[
  {
    "example_id": 0,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "print(64**(1/2))"
  },
  {
    "example_id": 1,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.75"
    ],
    "annotated_answers": [
      "1.25"
    ],
    "solution": "distance_to_go = 0.5 + 0.75 + 0.5\nprint(distance_to_go)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "cookies_sold, cupcakes_sold, brownies_sold = 54, 20, 35\ncookies_price, cupcakes_price, brownies_price = 1/3, 2, 1\ntotal_cost = 15\nrevenue = (cookies_sold * cookies_price) + (cupcakes_sold * cupcakes_price) + (brownies_sold * brownies_price)\nprofit = revenue - total_cost\nprint(profit)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "1584.0"
    ],
    "solution": "from math import factorial\n\ndef number_of_ways(n):\n    return factorial(n) // (factorial(3) * factorial(n - 3))\n\nprint(number_of_ways(12))"
  },
  {
    "example_id": 4,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "330.0"
    ],
    "solution": "passes = 11 * 3\nprint(passes)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.745056497175141"
    ],
    "annotated_answers": [
      "3.7"
    ],
    "solution": "x = 37/12\ny = 260/59\nprint((x+y)/2)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# number of boxes containing both pens and pencils\nn_boxes = 13 + 9 - 3\nprint(n_boxes)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "324.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "perimeter = 18\narea = perimeter ** 2\nprint(area)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "import math\nprint(math.sqrt(15 * 35 * 21))"
  },
  {
    "example_id": 9,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "for i in range(99, 0, -1):\n    if i % 99 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 10,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def divisors(n):\n    return set(d for d in range(1, int(n**0.5) + 1) if n % d == 0)\n\ndef odd_divisors(n):\n    return len(divisors(n)) % 2 == 1\n\ndef count_positive_integers_with_odd_number_of_positive_divisors(upper_bound):\n    count = 0\n    for i in range(1, upper_bound):\n        if odd_divisors(i):\n            count += 1\n    return count\n\nprint(count_positive_integers_with_odd_number_of_positive_divisors(103))"
  },
  {
    "example_id": 11,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1518.0"
    ],
    "annotated_answers": [
      "1518.0"
    ],
    "solution": "# The smallest prime numbers\np1, p2, p3, p4 = 2, 3, 5, 7\n# The smallest composite numbers greater than 0\nc1, c2, c3, c4 = 4, 6, 8, 9\n\nproduct_of_smallest_prime_numbers = p1 * p2 * p3 * p4\nproduct_of_smallest_composite_numbers = c1 * c2 * c3 * c4\n\nprint(product_of_smallest_composite_numbers - product_of_smallest_prime_numbers)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "from math import gcd\ndef least_common_multiple(a, b):\n    return (a*b)//gcd(a,b)\nprint(least_common_multiple(72,96))"
  },
  {
    "example_id": 13,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "x = 107 * 109 ** 5\nexponent = 11\nprint(exponent)"
  },
  {
    "example_id": 14,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(1/6 * 6 * 7 + 8 * 2 / 8 * (7 - 1))"
  },
  {
    "example_id": 15,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print(round(14.7923412**2, -2))"
  },
  {
    "example_id": 16,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for i in range(10, 50):\n    if i % i % 10 == 0:\n        print(i)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "current_age = 10\nbirth_age = current_age - 4\nsix_years_from_now = birth_age + 6\nprint(six_years_from_now)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "for i in range(37, 800, 37):\n    if i % 37 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 19,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.99999999999999"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print((2.5**2 - 0.7**2)**0.5/(2.7-2.5))"
  },
  {
    "example_id": 20,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = round(sum(list(map(round, [13, 14, 22, 52, 63, 74]))), -1)\nb = round(sum(list(map(round, [13, 14, 22, 52, 63, 74]))), -1)\nprint(a - b)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "# number of positive multiples of 3 that are less than 20\n# 3, 6, 9, 12, 15\ntotal = 5\n# number of positive multiples of 6 that are less than 20\n# 6, 12\ntotal_6 = 2\nprint(total_6 - total)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3 + 4\nprint(x)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "196.0",
      "2.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy.abc import x\n\nperimeter = 56\n\narea = perimeter**2 / (8 * sqrt(2))\n\nprint(area)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5400.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "import math\nx, y, z = 360, 450, 540\nL = math.lcm(x, y, z)\nprint(L)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "overall_average = (84 * 25 + 66 * 20) / (25 + 20)\nprint(overall_average)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "sarah_score, james_score, matthew_score = 5, 3, -2\nteam_score = (sarah_score * james_score) - matthew_score\nprint(team_score)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "N = 11\ndef divisors(N):\n    return len([x for x in range(1, N+1) if N % x == 0])\nprint(divisors(N))"
  },
  {
    "example_id": 28,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "unique_values = []\nfor x in [4, 8, 12]:\n    for y in [4, 8, 12]:\n        if x/y not in unique_values:\n            unique_values.append(x/y)\nprint(len(unique_values))"
  },
  {
    "example_id": 29,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b, c = 0, 0, 0\na = c - b\nprint(a)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "numbers = [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93]\nprint(len(numbers))"
  },
  {
    "example_id": 31,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "side_length = 60 / 2\narea = side_length * side_length\nprint(area)"
  },
  {
    "example_id": 32,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "564.0"
    ],
    "annotated_answers": [
      "564.0"
    ],
    "solution": "print(round(563.5097))"
  },
  {
    "example_id": 33,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "256.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef count_primes_of_four_digit_positive_integers():\n    count = 0\n    for i in range(1000, 10000):\n        if len(str(i)) == 4 and all(is_prime(int(j)) for j in str(i)):\n            count += 1\n    return count\n\nprint(count_primes_of_four_digit_positive_integers())"
  },
  {
    "example_id": 34,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "y = 6\nprint(y**3)"
  },
  {
    "example_id": 35,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0000000000000004"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "A,B,C,D,E = 1, 8/3, 47/12, 71/12, 7\nCD = D - C\nprint(CD)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.830951894845301"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "hypotenuse = 5\nleg = 3\narea = (hypotenuse ** 2 + leg ** 2) ** 0.5\nprint(area)"
  },
  {
    "example_id": 37,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 6\nanswer = (x**2)**0.5 - 3\nprint(answer)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# calculate the area of the first triangle\nfirst_triangle_area = 5 * 8 / 2\n# calculate the area of the second triangle\nsecond_triangle_area = 20 * 20 / 2\n# calculate the ratio of the areas of the two triangles\nratio = second_triangle_area / first_triangle_area\n# calculate the length of the second triangle's leg\nsecond_triangle_leg = 20 / ratio\nprint(second_triangle_leg)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = -8 - 7\nprint(x)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3380.0"
    ],
    "annotated_answers": [
      "3380.0"
    ],
    "solution": "import string\n\n# create a list of all possible 3-letter words from the alphabet\nwords = [word for word in [a+b+c for a in string.ascii_lowercase for b in string.ascii_lowercase for c in string.ascii_lowercase] if word[0].lower() in 'aeiou']\n\n# count the number of words that start with a vowel\nprint(len(words))"
  },
  {
    "example_id": 41,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0",
      "29.0",
      "33.0",
      "17.5",
      "35.0",
      "17.5",
      "35.0",
      "17.5",
      "17.5",
      "17.5",
      "35.0",
      "11.666666666666668",
      "35.0",
      "17.5",
      "17.5",
      "11.666666666666668",
      "35.0",
      "11.666666666666668",
      "35.0",
      "11.666666666666668"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from math import factorial\n\ndef factors(n):\n    return [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]\n\ndef win_probability(m, j):\n    return len([f for f in factors(m) if f <= j]) / len(factors(j))\n\ndef possible_rolls(m, j):\n    return sum([win_probability(m, j) for m in range(1, 21)])\n\nprint(possible_rolls(1, 1))\nprint(possible_rolls(1, 2))\nprint(possible_rolls(1, 3))\nprint(possible_rolls(1, 4))\nprint(possible_rolls(1, 5))\nprint(possible_rolls(1, 6))\nprint(possible_rolls(1, 7))\nprint(possible_rolls(1, 8))\nprint(possible_rolls(1, 9))\nprint(possible_rolls(1, 10))\nprint(possible_rolls(1, 11))\nprint(possible_rolls(1, 12))\nprint(possible_rolls(1, 13))\nprint(possible_rolls(1, 14))\nprint(possible_rolls(1, 15))\nprint(possible_rolls(1, 16))\nprint(possible_rolls(1, 17))\nprint(possible_rolls(1, 18))\nprint(possible_rolls(1, 19))\nprint(possible_rolls(1, 20))"
  },
  {
    "example_id": 42,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "students_in_both_clubs = 28 + 21 - 6\nprint(students_in_both_clubs)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor i in range(1, 201):\n    if i % 4 == 0 and '2' in str(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-348.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "N = 500 - 90 + 7 - (400 - 60 + 5)\nN = 500 - 90 + 7 - 355\nN = -348\nprint(N)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def sum_digits(n):\n    return int(str(n)[0]) + int(str(n)[1])\n\ndef count_two_digit_positive_integers(n):\n    count = 0\n    for i in range(10, n):\n        if sum_digits(i) == 7:\n            count += 1\n    return count\n\nprint(count_two_digit_positive_integers(100))"
  },
  {
    "example_id": 46,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "count = 0\nfor i in range(6):\n    for j in range(6):\n        if (i,j) == (2,2):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Evaluate 6+5-4\\*3\\div(2+1)\n# Evaluate 6+5-12/3\n# Evaluate 11-4\n# Evaluate 7\nprint(7)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import pow\n\nresult = pow(pow(pow(pow(-345, 4), 2), 0), -2) ** -4\nprint(result)"
  },
  {
    "example_id": 49,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2005.0"
    ],
    "annotated_answers": [
      "4007.0"
    ],
    "solution": "from math import ceil\n\ndef nth_positive_odd(n):\n    return ceil(n/2)*2 + 1\n\nprint(nth_positive_odd(2004))"
  },
  {
    "example_id": 50,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "100.0",
      "100.0",
      "100.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\nfor i in range(100):\n    for j in range(100):\n        if i**2 + j**2 == 100:\n            print(i**2 + j**2)\n            break\n        elif j**2 + i**2 == 100:\n            print(j**2 + i**2)\n            break"
  },
  {
    "example_id": 51,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "3.0",
      "6.0",
      "9.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "x = 0\nwhile x < 10:\n    if (341400 + x * 100000) % 3 == 0:\n        print(x)\n    x += 1"
  },
  {
    "example_id": 52,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "history_students = 126\nscience_students = 129\ntotal_students = 200\nboth_students = history_students + science_students\nprint(both_students)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-30.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "smallest_multiple_of_5 = 5 * (1 + (-32) // 5)\nprint(smallest_multiple_of_5)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "4.0",
      "8.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 20000\nfor i in range(10):\n    if n % 4 == 0:\n        print(i)\n    n += 1"
  },
  {
    "example_id": 55,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "import math\n\ndef overlap_area(sheet1_width, sheet1_length, sheet2_width, sheet2_length):\n    x_overlap = min(sheet1_width, sheet2_width)\n    y_overlap = min(sheet1_length, sheet2_length)\n    area = x_overlap * y_overlap\n    return area\n\nsheet1_width = 8\nsheet1_length = 10\nsheet2_width = 8.5\nsheet2_length = 11.5\noverlap_area = overlap_area(sheet1_width, sheet1_length, sheet2_width, sheet2_length)\nprint(overlap_area)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10090.0"
    ],
    "solution": "from math import ceil\n\ndef odd_digits(n):\n    return int(ceil(n/2))\n\ndef find_1000th_odd_digit_number(n):\n    for i in range(1, n+1):\n        if len(str(i)) % 2 == 1:\n            return i\n\nodd_1000th_digit_number = find_1000th_odd_digit_number(1000)\nprint(odd_1000th_digit_number)"
  },
  {
    "example_id": 57,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.5",
      "7.0",
      "4.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "grades = [4,5,6,7,8,9]\nmedian = grades[len(grades)//2]\nmode = max(set(grades), key=grades.count)\narithmetic_mean = sum(grades)/len(grades)\nprint(arithmetic_mean, median, mode)"
  },
  {
    "example_id": 58,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "# Use the lcm function to find the least common multiple.\nimport math\nlcm = math.lcm(14, 20, 35)\nprint(lcm)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1 or n == 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(n):\n    return (n ** 3) % 1 == 0\n\ndef get_cubes(n):\n    cubes = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n - i ** 3 >= 0:\n            cubes.append(i)\n    return cubes\n\ndef is_sum_of_three_cubes(n):\n    cubes = get_cubes(n)\n    for i in cubes:\n        for j in cubes:\n            for k in cubes:\n                if i + j + k == n:\n                    return True\n    return False\n\nn = 100\nwhile not is_prime(n):\n    n += 1\nprint(n)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "flour_needed_per_cookie = 15\nflour_needed_for_144_cookies = flour_needed_per_cookie * 144 / 20\nprint(flour_needed_for_144_cookies)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\n# Circumference of a circle is 2*pi*r\n# Area of a circle is pi*r^2\n# Area of a ring is area of outer circle minus area of inner circle\n# Radius of a circle is half of its diameter\n\nr1 = 12\nr2 = 13\n\narea_ring = math.pi * (r1**2 - r2**2)\narea_smallest_circle = math.pi * r2**2\n\nradius_smallest_circle = math.sqrt(area_smallest_circle / math.pi)\n\nprint(radius_smallest_circle)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(8-4//2-1)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.5"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = (5**2 - 2) / 2\nprint(x)"
  },
  {
    "example_id": 64,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "k = 27\nsum = 0\nfor k in range(27):\n    if (k/27) > (2/3) and (k/27) < (8/9):\n        sum += k\nprint(sum)"
  },
  {
    "example_id": 65,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 1\nwhile n <= 9:\n    if (6*n) % n == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 66,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "total_memos = 600\ntypists = 4\ndays = 3\nday_memos = total_memos / days\nprint(day_memos)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88920.0"
    ],
    "annotated_answers": [
      "247000.0"
    ],
    "solution": "loan, savings = 0.80 * 49400, 49400\npurchase_price = loan + savings\nprint(purchase_price)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "rectangles = 3\nprint(rectangles)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "import math\n\ndef book_stacks(n):\n    return math.factorial(n) // (math.factorial(3) * math.factorial(n - 3))\n\nprint(book_stacks(5))"
  },
  {
    "example_id": 70,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "468.0",
      "1002.0"
    ],
    "annotated_answers": [
      "636.0"
    ],
    "solution": "# Solution 1\ndef chimes_per_hour(hour):\n    return hour + 8\n\ndef chimes_per_24_hours(hours):\n    return sum(chimes_per_hour(hour) for hour in range(hours))\n\nprint(chimes_per_24_hours(24))\n\n# Solution 2\nprint(24*8 + 2*(15 + 4*30 + 6*45))"
  },
  {
    "example_id": 71,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.7"
    ],
    "annotated_answers": [
      "2.7"
    ],
    "solution": "rebecca_number = 2.748\nprint(round(rebecca_number, 1))"
  },
  {
    "example_id": 72,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "12.0",
      "24.0",
      "36.0",
      "48.0",
      "60.0",
      "72.0",
      "84.0",
      "96.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for x in range(0, 100, 6):\n    if x % 4 == 0:\n        print(x)"
  },
  {
    "example_id": 73,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pentagon_sides = 5\ndiagonals = pentagon_sides - 2\nprint(diagonals)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import itertools\n\ndef sum_digits(n):\n    return sum(map(int, str(n)))\n\ndef count_integers(start, end, target_sum):\n    return sum(1 for i in range(start, end+1) if sum_digits(i) == target_sum)\n\nprint(count_integers(200, 300, 15))"
  },
  {
    "example_id": 75,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "import sympy\na, b, c, d, e = sympy.symbols('a b c d e')\npentagon_area = (a**2 + b**2 + c**2 + d**2 + e**2) / 2\nprint(pentagon_area)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.9422940931534629"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import math\nx = math.atan(0.809/0.588)\nprint(x)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\ndef greatest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(int(math.sqrt(n)), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\ndef least_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\nprint(greatest_prime_factor(2000) - least_prime_factor(2000))"
  },
  {
    "example_id": 78,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\ndef circle_area(radius):\n    return math.pi * radius ** 2\n\ndef total_area(radius):\n    return circle_area(radius) * 4\n\ndef larger_circle_radius(smaller_radius):\n    return math.sqrt(total_area(smaller_radius) / math.pi)\n\nsmaller_radius = 4\nlarger_radius = larger_circle_radius(smaller_radius)\nprint(larger_radius)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def divisible_by(n, divisor):\n    return n % divisor == 0\n\ndivisible_count = 0\nfor i in range(1, 500):\n    if divisible_by(i, 3) and divisible_by(i, 4) and divisible_by(i, 5):\n        divisible_count += 1\n\nprint(divisible_count)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "num_houses = 10 * 6\nprint(num_houses)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "feet_per_minute = 20\ninches_per_foot = 12\ninches_per_second = feet_per_minute * inches_per_foot / 60\nprint(inches_per_second)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "234.0"
    ],
    "annotated_answers": [
      "234.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nfor i in range(201, 300):\n    if gcd(i, 36) == 18:\n        print(i)\n        break"
  },
  {
    "example_id": 83,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "x_min = -3\nx_max = 8\nx_list = range(x_min, x_max + 1)\nsolution_list = []\nfor x in x_list:\n    if x + 5 > x_min and x + 5 <= x_max:\n        solution_list.append(x + 5)\nprint(sum(solution_list))"
  },
  {
    "example_id": 84,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\n# 16 cm = 16/9 * 30 cm\n# 16 cm / 30 cm = 1/9\n# 1/9 * 30 cm = 30/9 cm\n# 30/9 cm = 3 cm\nprint(3)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "# First odd positive integer is 1\n# Second odd positive integer is 3\n# Third odd positive integer is 5\n# Fourth odd positive integer is 7\n# Fifth odd positive integer is 9\n# Sixth odd positive integer is 11\n# Seventh odd positive integer is 13\n# Eighth odd positive integer is 15\n# Ninth odd positive integer is 17\n\nprint(17)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "# Number of choices for each dish\nappetizers = 5\nentrees = 8\ndesserts = 4\n\n# Number of meals that can be formed\nmeals = appetizers * entrees * desserts\nprint(meals)"
  },
  {
    "example_id": 87,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Using Euclid's algorithm\ndef gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcf(518, 294))"
  },
  {
    "example_id": 88,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "98.69006752597979"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "import math\nprint(110 - math.degrees(math.atan2(5-4, 7-2)))"
  },
  {
    "example_id": 89,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nstart = 3*math.sqrt(5)\nend = 5*math.sqrt(3)\nprint(math.ceil((end-start)/1))"
  },
  {
    "example_id": 90,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0",
      "19.0",
      "26.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "mexico_students = 7\nengland_students = 11\nboth_students = 4\ntotal_students = 30\nnot_mexico_students = total_students - mexico_students\nnot_england_students = total_students - england_students\nnot_mexico_and_england_students = total_students - both_students\nprint(not_mexico_students, not_england_students, not_mexico_and_england_students)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "182.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = 56\nb = 126\nprint(a+b)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.5"
    ],
    "annotated_answers": [
      "84.5"
    ],
    "solution": "print(35.2 + 49.3)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2 and is_prime(n):\n        factors.append(n)\n    return factors\n\ndef sum_of_prime_factors(n):\n    return sum(prime_factors(n))\n\nprint(sum_of_prime_factors(85085))"
  },
  {
    "example_id": 94,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def positive_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef product(my_list):\n    result = 1\n    for i in my_list:\n        result *= i\n    return result\n\ndivisors = positive_divisors(10)\nprint(product(divisors))"
  },
  {
    "example_id": 95,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "large_boxes = 4\nsmall_boxes = 3\nsmaller_boxes = 2\ntotal_boxes = large_boxes + (small_boxes * large_boxes) + (smaller_boxes * small_boxes * large_boxes)\nprint(total_boxes)"
  },
  {
    "example_id": 96,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.40500611775288",
      "51"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn = 42\nprint(factorial(n))"
  },
  {
    "example_id": 97,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "666000.0"
    ],
    "annotated_answers": [
      "666000.0"
    ],
    "solution": "print(3**2*2**4*37*5**3)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "from math import sqrt\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1 and is_prime(n):\n        factors.append(n)\n    return factors\n\n\ndef least_positive_integer_divisible_by_smallest_odd_positive_integers(n):\n    factors = find_prime_factors(n)\n    for i in range(len(factors)):\n        if factors[i] % 2 == 1:\n            return factors[i] * (factors[i - 1] ** 2)\n    return n + 1\n\n\nprint(least_positive_integer_divisible_by_smallest_odd_positive_integers(12))"
  },
  {
    "example_id": 99,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.000000000000001"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "result = pow(20 * pow(2/5, 2) * pow(3/4, 2) * 5/9, 5)\nprint(result)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "scores = [87, 85, 87]\ndiff = 3\navg = 90/5\nmax_score = scores[0] + diff\nprint(max_score)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "4.0",
      "5.0",
      "8.0",
      "10.0",
      "20.0",
      "40.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "factors = []\nfor i in range(1, 41):\n    if 120 % i == 0 and 40 % i == 0:\n        factors.append(i)\nprint(factors)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "denominator = 8\nnumerator = 5\ndifference = denominator - numerator\nprint(difference)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(0**(5**6431564))"
  },
  {
    "example_id": 104,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "1.125"
    ],
    "solution": "a = 0.2 + 0.6\na_reciprocal = 1/a\nprint(a_reciprocal)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "# brute force\nfor i in range(2, 1000000000000):\n    if i % 3 == 2 and i % 4 == 2 and i % 5 == 2 and i % 6 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 106,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(-1 ** 1001)"
  },
  {
    "example_id": 107,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "days_studied = [1,1,1,1,1,3,3,3,3,3,5]\ntotal_hours_studied = [1,2,3,4,5,1,2,3,4,5,1,2]\ndays_studied_3_or_more = [0,0,0,0,0,1,1,1,1,1,1,1]\nfor day in range(len(days_studied)):\n    if days_studied[day] >= 3:\n        days_studied_3_or_more[day] = 1\nprint(days_studied_3_or_more)"
  },
  {
    "example_id": 108,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "563.51"
    ],
    "annotated_answers": [
      "563.51"
    ],
    "solution": "print(round(563.5097, 2))"
  },
  {
    "example_id": 109,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.2"
    ],
    "solution": "from sympy import symbols, simplify\n\nAB, BC, CD, EA = symbols('AB BC CD EA')\n\n# right triangle AEB\nAE = 4\nAB = BC = CD\narea = 6\n\n# use the sine rule to find the length of segment CE\ncosA = EA / AB\ncosB = BC / AB\ncosC = CD / AB\nsinA = AB / EA\nsinB = BC / EA\nsinC = CD / EA\n\n# find the length of segment CE\nCE = simplify(sinA * EA * sinB * BC / sinC)\n\nprint(CE)"
  },
  {
    "example_id": 110,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.18"
    ],
    "annotated_answers": [
      "13.18"
    ],
    "solution": "print(56.78-43.6)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "22.5"
    ],
    "solution": "import math\n\nx = (360/5)/(2*2)\nprint(x)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "terms = [32, 8]\nfor i in range(2, 5):\n    terms.append((terms[-1] + terms[-2])/2)\nprint(terms[-1])"
  },
  {
    "example_id": 113,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "147.0"
    ],
    "solution": "pages_per_minute_fiction = 5\npages_per_minute_history = 2\ntotal_pages = 30\nminutes = (total_pages / pages_per_minute_fiction) + (total_pages / pages_per_minute_history)\nprint(minutes)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "# The perimeter of an equilateral triangle is 3 times the length of one side.\n# The side of an equilateral triangle is 1/2 the length of the perimeter.\n# The perimeter of a regular hexagon is 6 times the length of one side.\n# The length of one side of a regular hexagon is 1/6 the length of the perimeter.\nside_length = 39/6\nperimeter = 6*side_length\nprint(perimeter)"
  },
  {
    "example_id": 115,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# 6 appears 10 times in the list of all integers from 1 to 100\nprint(10)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "4.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from sympy import Rational\n\nx = Rational(2, 5)\ny = Rational(1, 2)\n\nprint(max(x/y, y/x))"
  },
  {
    "example_id": 117,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# smallest average of four distinct positive even integers\nx = 2\ny = 4\nz = 6\nw = 8\nprint((x+y+z+w)/4)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "103041.0"
    ],
    "annotated_answers": [
      "103041.0"
    ],
    "solution": "print((103041**0.5)**2)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "payment_per_doughnut = 3/4\ndoughnuts_per_dozen = 12\ntotal_doughnuts = 4\ntotal_payment = total_doughnuts * payment_per_doughnut\nprint(total_payment)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "side_length = 6\nbase = 8\naltitude = side_length**2 / base\nprint(altitude)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5040.0"
    ],
    "annotated_answers": [
      "5040.0"
    ],
    "solution": "import itertools\n\npermutations = itertools.permutations(range(10), 4)\npossible_settings = 0\nfor permutation in permutations:\n    possible_settings += 1\nprint(possible_settings)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.3636363636363635"
    ],
    "annotated_answers": [
      "1.36"
    ],
    "solution": "veal_price = 2.20\nveal_weight = 3\nkilo_veal_weight = veal_weight / veal_price\nprint(kilo_veal_weight)"
  },
  {
    "example_id": 123,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcf(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        return gcf(a - b, b)\n    else:\n        return gcf(a, b - a)\n\nprint(gcf(144, 405))"
  },
  {
    "example_id": 124,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.73"
    ],
    "annotated_answers": [
      "0.73"
    ],
    "solution": "print(0.8 - 0.07)"
  },
  {
    "example_id": 125,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-72.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "scores = [17, 10, 9, 14, 16, 8, 10]\ntotal_sum = 0\nfor score in scores:\n    total_sum += score\naverage = total_sum / len(scores)\nnext_scores = average - total_sum\nprint(next_scores)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.8"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "# Store at North Area Mall\nnorth_shoes = 18\nnorth_total = 90\nnorth_ratio = north_shoes / north_total\n\n# Store at University Mall\nuniversity_shoes = north_ratio * 9\nuniversity_total = 9\nprint(university_shoes)"
  },
  {
    "example_id": 127,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "588.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "num_of_positive_factors = 14 * 42\nprint(num_of_positive_factors)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "red_interval, yellow_interval, blue_interval = 2, 3, 5\ntotal_interval = red_interval + yellow_interval + blue_interval\ndance_length = 7\nlights_on_at_same_time = dance_length // total_interval\nprint(lights_on_at_same_time)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.15"
    ],
    "annotated_answers": [
      "0.15"
    ],
    "solution": "print(3/20)"
  },
  {
    "example_id": 130,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.666666666666666"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = (29 - 2 - 1) / 3\nprint(x)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "def smallest_multiple_of_6(n):\n    multiples = []\n    for i in range(n, n+1000):\n        if i % 6 == 0:\n            multiples.append(i)\n    return min(multiples)\n\nprint(smallest_multiple_of_6(115))"
  },
  {
    "example_id": 132,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# 9th grade has the closest number of male bus riders to female bus riders\nprint('9th grade')"
  },
  {
    "example_id": 133,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "13.0",
      "15.0",
      "17.0",
      "19.0",
      "23.0",
      "25.0",
      "27.0",
      "29.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def is_relatively_prime(a, b):\n    return gcd(a, b) == 1\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef relatively_prime_numbers(a, b):\n    numbers = []\n    for i in range(a, b):\n        if is_relatively_prime(i, 28):\n            numbers.append(i)\n    return numbers\n\nprint(relatively_prime_numbers(10, 30))"
  },
  {
    "example_id": 134,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "expr = ((1*2)+(3*4)-(5*6)+(7*8))*(9*0)\nprint(expr)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "scores = [70, 80, 90, 75, 80, 85]\nmean = sum(scores) / len(scores)\nprint(mean)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "percentage = 5\namount = 10\ntotal = 1200\nresult = percentage/100 * amount/100 * total\nprint(result)"
  },
  {
    "example_id": 137,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a, b = 2, 2\nprint(a**2 + b**2)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "246.0",
      "246.0"
    ],
    "annotated_answers": [
      "1208.0"
    ],
    "solution": "# Enter your solution here\nimport math\n\ndef perimeter(hexagon):\n    perimeter = 0\n    for i in range(len(hexagon)):\n        perimeter += hexagon[i]\n    return perimeter\n\ndef area(hexagon):\n    area = 0\n    for i in range(len(hexagon)):\n        area += hexagon[i]\n    return area\n\ndef is_congruent(hexagon):\n    is_congruent = True\n    for i in range(len(hexagon)):\n        if hexagon[i]!= hexagon[0]:\n            is_congruent = False\n            break\n    return is_congruent\n\ndef main():\n    # Enter your code here\n    hexagon = [62, 62, 62, 20, 20, 20]\n    print(perimeter(hexagon))\n    print(area(hexagon))\n    print(is_congruent(hexagon))\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 139,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11]\nproduct = 1\nfor prime in primes:\n    product *= prime\nprint(product % 42)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nprint(sympy.solve(2**3*3**x - 72))"
  },
  {
    "example_id": 141,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 5\nlow = 3*x-5\nhigh = 7\nsolutions = []\nfor i in range(low, high):\n    if i % 3 == 0:\n        solutions.append(i)\nprint(len(solutions))"
  },
  {
    "example_id": 142,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "shorter_piece = 60 / 5\nprint(shorter_piece)"
  },
  {
    "example_id": 143,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 10"
  },
  {
    "example_id": 144,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "rows = [1, 2, 3, 4, 5]\nrow_numbers = [1, 2, 3, 4, 5]\n\nfor i in range(len(rows)):\n    rows[i] = [j for j in range(1, rows[i]+1)]\n\nfor i in range(len(rows)):\n    for j in range(len(rows[i])):\n        print(rows[i][j], end=' ')\n    print()\n\nprint('-'*30)\nfor i in range(len(rows)):\n    print(row_numbers[i], end=' ')\nprint()"
  },
  {
    "example_id": 145,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "326.5"
    ],
    "annotated_answers": [
      "326.5"
    ],
    "solution": "print(12.6 + 313.9)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((100/101)**(-3)*(100/101)**3)"
  },
  {
    "example_id": 147,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "result = (1 + 2*3*4*5) / 11\nprint(result)"
  },
  {
    "example_id": 148,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "shadow_length = 120\nperson_height = 5\ntree_height = shadow_length / person_height\nprint(tree_height)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5000.0"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "odd_digits = 10\ntotal_numbers = 10000\ntotal_odd_numbers = 0\nfor i in range(10000):\n    if i % 2!= 0:\n        total_odd_numbers += 1\nprint(total_odd_numbers)"
  },
  {
    "example_id": 150,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "from math import sqrt, ceil\n\n# Find the perfect square with 3 different prime factors\nperfect_square = 0\nwhile perfect_square ** 2 < 3:\n    perfect_square += 1\n\n# Find the least perfect square with 3 different prime factors\nleast_perfect_square = perfect_square\nwhile least_perfect_square ** 2 >= 3:\n    least_perfect_square -= 1\n\n# Print the least perfect square with 3 different prime factors\nprint(least_perfect_square ** 2)"
  },
  {
    "example_id": 151,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2097154.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "numbers = [1, 1, 2, -2]\nresult = 0\nfor number in numbers:\n    result += number**20\nprint(result)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "6.0",
      "6.0",
      "8.0",
      "8.0",
      "10.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def john_count(n):\n    if n % 2 == 0:\n        return n\n    else:\n        return n - 1\n\ncount = 0\nwhile count < 5000:\n    count += 1\n    next_count = john_count(count)\n    print(next_count)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0",
      "108.0",
      "108.0",
      "144.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "apples_by_person = [2, 3, 3, 4]\ntotal_apples = 36\napples_by_person = [a * total_apples for a in apples_by_person]\nprint(apples_by_person)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "import math\nx = 65\nprint(x)"
  },
  {
    "example_id": 155,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.398193359375"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Calculate the expression\nexpr = (8/9) ** -4 - 17\nprint(expr)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "base = 6\nheight = 6\narea = (base * height) / 2\nprint(area)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "from math import factorial\n\ndef largest_prime_factor(n):\n    for i in range(n, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(largest_prime_factor(1391))"
  },
  {
    "example_id": 158,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "48.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "x_p, y_p, x_q, y_q = 8, 48, 8, 48\nx_b, y_b = (x_p + x_q) / 2, (y_p + y_q) / 2\nx_c, y_c = (x_b + x_q) / 2, (y_b + y_q) / 2\nx_d, y_d = (x_c + x_p) / 2, (y_c + y_p) / 2\nprint(x_d, y_d)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# The smallest angle is 90 degrees.\n# The largest angle is twice 90 degrees = 180 degrees.\nprint(180)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "def is_positive_multiple(x, y):\n    return x % y == 0 and x > 0\n\ndef is_three_digit(x):\n    return len(str(x)) == 3\n\ndef count_positive_multiples(x, y):\n    count = 0\n    for i in range(1, 1000):\n        if is_positive_multiple(i, x) and is_three_digit(i):\n            count += 1\n    return count\n\nprint(count_positive_multiples(13, 1000))"
  },
  {
    "example_id": 161,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "old_price = 60\nnew_price = old_price * (1 - 0.25)\nprint(new_price)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "def is_emirp(n):\n    if str(n)[::-1] in [str(i) for i in range(10)]:\n        return False\n    else:\n        return True\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_smallest_emirp_not_prime(n):\n    for i in range(10, n):\n        if is_emirp(i) and not is_prime(i):\n            return i\n    return None\n\nprint(find_smallest_emirp_not_prime(100))"
  },
  {
    "example_id": 163,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "girls_miles, boys_miles = 3, 5\ndays = 7\ntotal_miles = girls_miles * days + boys_miles * (days - 1)\nprint(total_miles)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "from math import floor\nfrom math import ceil\ndef is_composite(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(floor(n ** 0.5)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef sum_of_composites(a, b):\n    return sum(x for x in range(a, b + 1) if is_composite(x))\nprint(sum_of_composites(10, 20))"
  },
  {
    "example_id": 165,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.99999999999999"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "expr = (6 ** 0.5 + 24 ** 0.5) ** 2\nprint(expr)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "print(4*12 - (4+12))"
  },
  {
    "example_id": 167,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "# Number of games played = number of players x (number of games played by each player - 1)\n# Each player plays 3 games against each player from the other school\n# Each player plays 1 game against each other player from his or her own school\n# Number of players = 12\n# Number of games played by each player = 3 + 1 = 4\n# Number of games played = 12 x 4 = 48\nprint(48)"
  },
  {
    "example_id": 168,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 22\nprint(x/2)"
  },
  {
    "example_id": 169,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "-6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print(12//2)\nprint(12//-2)"
  },
  {
    "example_id": 170,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "-2.0",
      "3.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import S\nx = S('x')\nprint((-2 < 4 + 3*x) & (4 + 3*x < 2))"
  },
  {
    "example_id": 171,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "# find the smallest integer with factors of 16, 15, and 12\n# by checking numbers from 1 to 1000\nfor i in range(1, 1000):\n    if i % 16 == 0 and i % 15 == 0 and i % 12 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 172,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import sqrt\nfrom math import floor\n\np = [2,3]\nfor i in range(5, 1000):\n    if i % 3 == 0 and i > 5:\n        p.append(i)\n        if len(p) == 6:\n            break\n\nn = 1\nfor i in p:\n    n *= i\n\nn_str = str(n)\nsum_of_digits = 0\nfor i in n_str:\n    sum_of_digits += int(i)\nprint(sum_of_digits)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "a,b,c,d,e = 0,2,3,4,4\na_c = (b+d)/2\nprint(a_c)"
  },
  {
    "example_id": 174,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num_triangles = 2\nprint(num_triangles)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "num = 10**5 * 10**77 // 10**15 // 10**15**4\nprint(num)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 1/2\nprint(x)"
  },
  {
    "example_id": 177,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "79200.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "# Distance travelled in one minute\ndistance = 15 * 5280\nprint(distance)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "83.0"
    ],
    "solution": "# 3x - 9 = 2x + 37\n# 3x = 9 + 2x + 37\n# 3x = 39\n# x = 13"
  },
  {
    "example_id": 179,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.53333333333333"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "perimeter = 68\ndiagonal = 30\narea = perimeter ** 2 / (4 * diagonal)\nprint(area)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = 150\nprint(x)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "woman_height = 6\nshadow_length = 9\nflagpole_height = 20\nflagpole_shadow_length = (flagpole_height - woman_height)\nprint(flagpole_shadow_length)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "rope1 = 18\nrope2 = 24\nmax_length = min(rope1, rope2)\nprint(max_length)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "from sympy import symbols, sqrt\na, b, c = symbols('a b c')\narea = 72\ns = (a + b + c) / 2\narea_triangle = sqrt(s * (s - a) * (s - b) * (s - c))\nprint(area_triangle)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3400.0"
    ],
    "solution": "x = 1000"
  },
  {
    "example_id": 185,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "area = 2 * (7 + 5)\nprint(area)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import pow\n\na = pow(36, 10)\nb = pow(6, 19)\nprint(a // b)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20202.0"
    ],
    "annotated_answers": [
      "89898.0"
    ],
    "solution": "# Start with a five-digit number.\nn = 10000\n# Loop until we find the largest number that is divisible by 6.\nwhile True:\n    # Check if n is a palindrome.\n    if str(n) == str(n)[::-1]:\n        # Check if n is divisible by 6.\n        if n % 6 == 0:\n            # If n is both a palindrome and divisible by 6, print it.\n            print(n)\n            break\n    # Increment n by 1.\n    n += 1"
  },
  {
    "example_id": 188,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "82100000000.00002"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "base, exponent = 8.21, 10\nresult = base * 10 ** exponent\nprint(result)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "# Define variables\nn_scored_80 = 20\nn_scored_90 = 8\nn_scored_100 = 2\nn_students = 30\n\n# Calculate class average\nclass_average = (n_scored_80 * 80 + n_scored_90 * 90 + n_scored_100 * 100) / n_students\n\n# Print class average\nprint(class_average)"
  },
  {
    "example_id": 190,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "115.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "# 85-degree mark\nangle_1 = 85\n# 30-degree mark\nangle_2 = 30\n# measure of angle $ABC$\nangle_3 = angle_1 + angle_2\n# angle ABC in degrees\nprint(angle_3)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "n = 12\nprint(n*(n-1)/2)"
  },
  {
    "example_id": 192,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "cookie_dough, cookie_ingredient = 3/2, 1/16\ntotal_cookies = cookie_dough / cookie_ingredient\nprint(total_cookies)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "a, b = 36, 24\nif a > b:\n    lesser_measure = a - b\nelse:\n    lesser_measure = b - a\ndegrees_of_angle = lesser_measure * 360 / (a + b)\nprint(degrees_of_angle)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.39999999999999997"
    ],
    "annotated_answers": [
      "0.4"
    ],
    "solution": "print(2.4/6)"
  },
  {
    "example_id": 195,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 4 + 4**2\nprint(x)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "games_lost = 12\npercentage = 0.25\ngames_won = games_lost * percentage\nprint(games_won)"
  },
  {
    "example_id": 197,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "t = 9.6/1.2\nprint(t)"
  },
  {
    "example_id": 198,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "628.0"
    ],
    "solution": "import math\nfor i in range(1, 200):\n    if i < math.pi:\n        print(i)"
  },
  {
    "example_id": 199,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(6*3)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "colors = 8\nshirts_tie = 2\nshirt_tie_same = 1\noutfits = colors * (shirts_tie - shirt_tie_same)\nprint(outfits)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "123.72505543237251",
      "165.40540540540542",
      "115.74279379157429",
      "97.2972972972973",
      "78.22616407982261",
      "19.45945945945946"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "n_male_under_35 = 53\nn_female_under_35 = 8\nn_male_35_to_44 = 155\nn_female_35_to_44 = 17\nn_male_45_to_54 = 145\nn_female_45_to_54 = 10\nn_male_over_54 = 98\nn_female_over_54 = 2\nn_male_total = n_male_under_35 + n_male_35_to_44 + n_male_45_to_54 + n_male_over_54\nn_female_total = n_female_under_35 + n_female_35_to_44 + n_female_45_to_54 + n_female_over_54\nn_total = n_male_total + n_female_total\n\nn_male_35_to_44_fraction = n_male_35_to_44 / n_male_total\nn_female_35_to_44_fraction = n_female_35_to_44 / n_female_total\nn_male_45_to_54_fraction = n_male_45_to_54 / n_male_total\nn_female_45_to_54_fraction = n_female_45_to_54 / n_female_total\nn_male_over_54_fraction = n_male_over_54 / n_male_total\nn_female_over_54_fraction = n_female_over_54 / n_female_total\n\ncentral_angle_male_35_to_44 = 360 * n_male_35_to_44_fraction\ncentral_angle_female_35_to_44 = 360 * n_female_35_to_44_fraction\ncentral_angle_male_45_to_54 = 360 * n_male_45_to_54_fraction\ncentral_angle_female_45_to_54 = 360 * n_female_45_to_54_fraction\ncentral_angle_male_over_54 = 360 * n_male_over_54_fraction\ncentral_angle_female_over_54 = 360 * n_female_over_54_fraction\n\nprint(central_angle_male_35_to_44)\nprint(central_angle_female_35_to_44)\nprint(central_angle_male_45_to_54)\nprint(central_angle_female_45_to_54)\nprint(central_angle_male_over_54)\nprint(central_angle_female_over_54)"
  },
  {
    "example_id": 202,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "european_stamps_80s = 8\nprint(european_stamps_80s)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "count = 0\nfor i in range(1000, 10000):\n    if str(i) == str(i)[::-1] and i % 3 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 204,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "cupcakes = 24\ningredients = [\n    'chocolate',\n    'raisins',\n    'chocolate chips',\n    'nuts'\n]\n\ndef ingredient_count(cupcakes, ingredient):\n    if ingredient == 'chocolate':\n        return cupcakes // 2\n    elif ingredient == 'raisins':\n        return cupcakes // 3\n    elif ingredient == 'chocolate chips':\n        return cupcakes // 4\n    elif ingredient == 'nuts':\n        return cupcakes // 6\n\ndef none_of_these_ingredients(cupcakes):\n    total_ingredients = sum(ingredient_count(cupcakes, ingredient) for ingredient in ingredients)\n    return cupcakes - total_ingredients\n\nprint(none_of_these_ingredients(cupcakes))"
  },
  {
    "example_id": 205,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "157.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "count = 0\nfor i in range(100, 500):\n    if '3' in str(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "306.25"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "perimeter = 20 + 20 + 15 + 15\narea = perimeter ** 2 / 16\nprint(area)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "import math\nprint(math.sqrt(math.prod([10, 15, 24])))"
  },
  {
    "example_id": 208,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = 12\nwhile 6 - x > -9:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "import sympy\n\nx = sympy.symbols('x')\n\nlargest_angle = sympy.atan(sympy.tan(x/2)/(sympy.sqrt(3)/2)) * 2\n\nprint(largest_angle)"
  },
  {
    "example_id": 210,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# Write a program to find how many positive multiples of 7 are less than 150\n# Hint: Consider using the modulo operator (%)\n\n# Modulo operator returns the remainder of an integer division\n# For example, 17 % 7 = 2 because 17 / 7 = 2 with a remainder of 2\n# For example, 15 % 7 = 1 because 15 / 7 = 2 with a remainder of 1\n\n# Initialize a counter for the number of positive multiples of 7\ncount = 0\n# Initialize a variable to hold the next possible positive multiple of 7\nnext_multiple = 7\n# Loop until the next multiple is greater than 150\nwhile next_multiple < 150:\n    # Increment the counter by 1\n    count += 1\n    # Increment the next multiple by 7\n    next_multiple += 7\n\n# Print the count of positive multiples of 7 less than 150\nprint(count)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def divisors(n):\n    \"\"\"\n    Return the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\nprint(divisors(7))"
  },
  {
    "example_id": 212,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "numbers = [6, 8, 9, 11, 16]\nprint(sum(numbers) / len(numbers))"
  },
  {
    "example_id": 213,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a, b, x = 9, 5, 5\na = (x**2 - b)**2\nprint(a)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "143.5"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "tallest_height = 858\nshortest_height = 625\nmean_height = (tallest_height + shortest_height) / 2\nnew_height = 885\nincrease = new_height - mean_height\nprint(increase)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "side_length = 2 + 21\nprint(side_length)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "from math import factorial\n\ntotal_positions = 8\n\nways = factorial(total_positions) // (factorial(2) * factorial(total_positions - 2))\n\nprint(ways)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "politicians = 4\nlawyers = 3\nhandshakes = politicians * (politicians - 1) + lawyers * (politicians - 1)\nprint(handshakes)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "965.0"
    ],
    "annotated_answers": [
      "980.0"
    ],
    "solution": "total_farthings = 20 * 12 * 4 + 1 * 5\nprint(total_farthings)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "from sympy import *\nAC = sqrt(32**2 + 0**2)\nprint(AC)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# This solution is for a convex hexagon.\n# If the hexagon is not convex, the number of diagonals changes.\nsides = 6\ndiagonals = sides * (sides - 3) // 2\nprint(diagonals)"
  },
  {
    "example_id": 221,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 0\nwhile not (3*x > 2*x+1):\n    x += 1\nprint(x)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(6 + 8/2)"
  },
  {
    "example_id": 223,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "num_students = 20\nnum_rows = 2\nnum_cols = 14\ndesks = num_rows * num_cols\nprint(desks)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "a = 76\nb = -4*8 - 2\nc = 13\nprint(a + b + c)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "350.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "# length = 400, width = 300\n# length + width = 700\n# Jim walks diagonally, so he walks length + width/2\n# Martha walks along length and width\n# Martha walks length + width, so she walks 700\n# Jim walks length + width/2, so he walks 700 - 700/2\n# Jim walks 700 - 700/2, so he walks 350\nprint(350)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "inches_per_mile = 20\nactual_distance = 120\ninches_apart = actual_distance / inches_per_mile\nprint(inches_apart)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(round(15.49999999))"
  },
  {
    "example_id": 228,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "import math\n\ndef area(shape):\n    if shape == \"rectangle\":\n        return width * height\n    elif shape == \"circle\":\n        return math.pi * radius ** 2\n    elif shape == \"triangle\":\n        return (height * base) / 2\n\nwidth = 8\nheight = 5\nbase = 2\nradius = 1.5\n\nshape = \"rectangle\"\nprint(area(shape))"
  },
  {
    "example_id": 229,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5321.0",
      "6.516345618263067",
      "-13.0"
    ],
    "annotated_answers": [
      "5321.0"
    ],
    "solution": "result = (-5321) ** 0.5\nresult = result ** 2\nprint(result)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "r = 60 / 2\nprint(r)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "989.0"
    ],
    "annotated_answers": [
      "949.0"
    ],
    "solution": "# Find the largest multiple of 73 less than 1000\nlargest_multiple_of_73 = 989\nprint(largest_multiple_of_73)"
  },
  {
    "example_id": 232,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "total_discs = 77\ndiscs_per_box = 12\nnum_boxes = total_discs // discs_per_box\nprint(num_boxes)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "numbers = [8, 12, 16, 20, 24]\nprint(sum(numbers) / len(numbers))"
  },
  {
    "example_id": 234,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "original_price = 60\ndiscount = 0.2\ndiscounted_price = original_price * (1 - discount)\ncommission = 0.05 * original_price\nprint(commission)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "full_height = 6\nhead_height_fraction = 1/8\nhead_height = full_height * head_height_fraction\nprint(head_height)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "20.0",
      "32.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "total_students = 35\nhistory_A = 8\nmath_A = 15\nboth_A = 3\nnot_A_in_history = total_students - history_A\nnot_A_in_math = total_students - math_A\nnot_A_in_both = total_students - both_A\nprint(not_A_in_history, not_A_in_math, not_A_in_both)"
  },
  {
    "example_id": 237,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "3024.0"
    ],
    "solution": "# Import from the toolbox\nfrom math import factorial\n# Calculate the number of ways to choose 4 officers from a club of 9 people\nprint(factorial(9) // (factorial(4) * factorial(5)))"
  },
  {
    "example_id": 238,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(int(5**5 / 5**4 - 5**3 + 5**2 * 5**1))"
  },
  {
    "example_id": 239,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import itertools\n\n# the faces of the die are numbered from 1 to 6\nfaces = list(range(1, 7))\n\n# count the ways to paint two faces blue\ncount = 0\nfor blue_faces in itertools.combinations(faces, 2):\n    product = blue_faces[0] * blue_faces[1]\n    if product!= 6:\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 240,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "number = 10\nresult = number * 5\nresult = 21 + 2 * number\nprint(number)"
  },
  {
    "example_id": 241,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "inches_per_yard = 36\ninches_in_2_1_6 = 2 * 1/6 * inches_per_yard\nprint(inches_in_2_1_6)"
  },
  {
    "example_id": 242,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-34.0",
      "-17.0",
      "0.0",
      "17.0",
      "34.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "for i in range(-50, 50):\n    if i % 17 == 0:\n        print(i)"
  },
  {
    "example_id": 243,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x = 50\nfor i in range(1, 10):\n    x -= i\nprint(x)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "students_showing_up = 30 + 50\nprint(students_showing_up)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "red_cars = 12\nfour_door_cars = 15\ntwo_door_white_cars = 4\ntotal_cars = 20\nred_four_door_cars = red_cars + four_door_cars - two_door_white_cars\nprint(red_four_door_cars)"
  },
  {
    "example_id": 246,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.14285714285714285"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(1/7)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "print(1 + 2 + 3 - 4 + 5 + 6)"
  },
  {
    "example_id": 248,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "147.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "C = 21 * 7\nprint(C)"
  },
  {
    "example_id": 249,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.777777777777778"
    ],
    "annotated_answers": [
      "7.78"
    ],
    "solution": "fudge_pound = 10\nfudge_purchased = 7/9\nfudge_purchased_price = fudge_pound * fudge_purchased\nprint(fudge_purchased_price)"
  },
  {
    "example_id": 250,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "a = 19\nb = a + 17\nprint(b)"
  },
  {
    "example_id": 251,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-16.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "print(-144/9)"
  },
  {
    "example_id": 252,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# number of pies with each ingredient\nnum_chocolate_pies = 3\nnum_marshmallow_pies = 3\nnum_cayenne_pies = 3\nnum_salted_soy_nuts_pies = 3\n\n# total number of pies\ntotal_num_pies = num_chocolate_pies + num_marshmallow_pies + num_cayenne_pies + num_salted_soy_nuts_pies\n\n# number of pies with no ingredients\nnum_no_ingredients_pies = 12 - total_num_pies\n\nprint(num_no_ingredients_pies)"
  },
  {
    "example_id": 253,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 3\nb = 2\nab = a * b\nprint(ab)"
  },
  {
    "example_id": 254,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1260.0"
    ],
    "annotated_answers": [
      "1260.0"
    ],
    "solution": "import math\nprint(math.sqrt(3*6*10*15*21*28))"
  },
  {
    "example_id": 255,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "A = 40\nB = 25\nC = 30\nD = A - (B + C)\nprint(D)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.75"
    ],
    "annotated_answers": [
      "16.75"
    ],
    "solution": "print(14.6+2.15)"
  },
  {
    "example_id": 257,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3257.0"
    ],
    "annotated_answers": [
      "351.0"
    ],
    "solution": "# number of cake-eating days in a year\ncake_days_per_year = 365\n# number of years between 2008 and 2016\nnum_years = 2016 - 2008\n# number of cake-eating days in 2008\ncake_days_2008 = (365 - 28)\n# total number of cake-eating days\ntotal_cake_days = cake_days_per_year * num_years + cake_days_2008\nprint(total_cake_days)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-550.0"
    ],
    "annotated_answers": [
      "550.0"
    ],
    "solution": "# Karla's miles driven\nmiles_driven = 12000\n# Hybrid car's miles per gallon\nmpg_hybrid = 48\n# SUV's miles per gallon\nmpg_suv = 15\n# Hybrid car's gallons saved\ngallons_saved = miles_driven / mpg_hybrid\n# SUV's gallons saved\ngallons_suv = miles_driven / mpg_suv\nprint(gallons_saved - gallons_suv)"
  },
  {
    "example_id": 259,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 5\nnum = 21420 * N\nif num % 6 == 0:\n    print(N)"
  },
  {
    "example_id": 260,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# The greatest odd integer that is a factor of 5!\nprint(5)"
  },
  {
    "example_id": 261,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\nx, y = 0, 0\nwhile 2**x * 3**y!= 1296:\n    x += 1\n    y += 1\nprint(x+y)"
  },
  {
    "example_id": 262,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.9999999999999996"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x, y = 1/31, 1/93\nprint(x / y)"
  },
  {
    "example_id": 263,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "def sqrt(x):\n    return x ** 0.5\n\ndef is_less_than_or_equal_to(x, y):\n    return x <= y\n\ndef is_less_than(x, y):\n    return x < y\n\ndef is_equal_to(x, y):\n    return x == y\n\ndef count_less_than(x, y):\n    count = 0\n    for i in range(1, x + 1):\n        if is_less_than_or_equal_to(sqrt(i), y):\n            count += 1\n    return count\n\nprint(count_less_than(20, 1000))"
  },
  {
    "example_id": 264,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(315, 108))"
  },
  {
    "example_id": 265,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "my_list = [71, 72, 73, 74, 75]\nprint(sum(my_list)/len(my_list))"
  },
  {
    "example_id": 266,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.303"
    ],
    "annotated_answers": [
      "0.303"
    ],
    "solution": "print(3/10 + 3/1000)"
  },
  {
    "example_id": 267,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "all_numbers = 50\naverage_of_20 = 30\naverage_of_30 = 20\naverage_of_all = (average_of_20 + average_of_30) / all_numbers\nprint(average_of_all)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.333333333333333"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 2/3 * 5\nprint(x)"
  },
  {
    "example_id": 269,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = (35 - 8) // 13\nprint(x)"
  },
  {
    "example_id": 270,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "30.0",
      "70.0",
      "18.0",
      "45.0",
      "30.0",
      "75.0",
      "42.0",
      "66.0",
      "78.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "# import sieve of eratosthenes\nfrom math import sqrt\n\n# find prime numbers less than 100\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n# find the product of the smallest prime and two two-digit primes\nfor prime in primes:\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if prime * primes[i] * primes[j] < 100:\n                print(prime * primes[i] * primes[j])\n                break"
  },
  {
    "example_id": 271,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.333333333333334"
    ],
    "annotated_answers": [
      "3.24"
    ],
    "solution": "outcomes = [14, 5, 9, 7, 7, 8]\nprint(sum(outcomes)/len(outcomes))"
  },
  {
    "example_id": 272,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "from math import factorial\n\nn = 8\nk = 3\n\npermutations = factorial(n) / (factorial(k) * factorial(n - k))\nprint(permutations)"
  },
  {
    "example_id": 273,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "297.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "integer = 5 * 4\nprint(integer + 277)"
  },
  {
    "example_id": 274,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# distance from Paul to pole\ndistance = 5\n# height of pole\nheight = 15\n# distance between poles\npole_distance = 14\n# total height of Paul\ntotal_height = 3\n# total height of Paul\ntotal_height = 3\n# length of rope\nrope_length = total_height + distance + pole_distance\nprint(rope_length)"
  },
  {
    "example_id": 275,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.95"
    ],
    "annotated_answers": [
      "4.95"
    ],
    "solution": "numbers = [4.5, 4.45, 0.45, 0.54]\nprint(max(numbers) + min(numbers))"
  },
  {
    "example_id": 276,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "import math\ndef largest_prime_factor(n):\n    i = 2\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            return i\n        i += 1\n    return n\nprint(largest_prime_factor(97))"
  },
  {
    "example_id": 277,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "median = 12\nmean = (12 + 21 + 6 + 11 + 30) / 5\nsum = median + mean\nprint(sum)"
  },
  {
    "example_id": 278,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.799999999999997"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "scores = [92, 73, 79, 87]\nfinal_score = 80 - sum(scores) / 5\nprint(final_score)"
  },
  {
    "example_id": 279,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.4000014000014"
    ],
    "annotated_answers": [
      "1.4"
    ],
    "solution": "print(1/0.714285)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 10\nprint(x)"
  },
  {
    "example_id": 281,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "half_adults_female = 1/2\nhalf_female_adults_with_one_child = 1/2\ntotal_people = 100\ntotal_children = half_adults_female * half_female_adults_with_one_child\npercent_children = total_children / total_people * 100\nprint(percent_children)"
  },
  {
    "example_id": 282,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "373.3333333333333"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "dogs_to_cats = 4/3\ntotal = 280\ndogs = total * dogs_to_cats\nprint(dogs)"
  },
  {
    "example_id": 283,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1421.2230337568676"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "from math import pi\nradius = 12 * pi\nside = radius\narea = side ** 2\nprint(area)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import numpy as np\n\n# Data from 1944 through 2000\n# 14 years with 1 hurricane\n# 17 years with 2 hurricanes\n# 12 years with 3 hurricanes\n# 4 years with 4 hurricanes\n# 2 years with 5 hurricanes\n# 1 year with 6 hurricanes\n# 2 years with 7 hurricanes\n# 1 year with 8 hurricanes\n\n# Get the number of hurricanes per year\nhurricanes_per_year = np.array([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])\n\n# Calculate the median number of hurricanes\nmedian_hurricanes = np.median(hurricanes_per_year)\n\n# Print the median number of hurricanes\nprint(median_hurricanes)"
  },
  {
    "example_id": 285,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "pizza_price = 12\ntip_amount = 15\ntip_percent = tip_amount / pizza_price\nprint(tip_percent)"
  },
  {
    "example_id": 286,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "candy_count = 44\nkids_count = candy_count // 3\nprint(kids_count)"
  },
  {
    "example_id": 287,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "print(pow(30*21*70, 1/2))"
  },
  {
    "example_id": 288,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "from math import pi\n\nsides = int(pi * 170 / 180)\nprint(sides)"
  },
  {
    "example_id": 289,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.38025641025641027"
    ],
    "annotated_answers": [
      "0.38"
    ],
    "solution": "candy_consumption = 1483\nweeks_in_year = 52\nlife_span = 75\navg_weekly_candy_consumption = candy_consumption / (weeks_in_year * life_span)\nprint(avg_weekly_candy_consumption)"
  },
  {
    "example_id": 290,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-72.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = -12\nresult = x * 6\nprint(result)"
  },
  {
    "example_id": 291,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_primes(n):\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef make_number(primes, n):\n    product = 1\n    for prime in primes[:n]:\n        product *= prime\n    return product\n\ndef solution(n):\n    primes = find_primes(n)\n    return make_number(primes, 4)\n\nprint(solution(2400))"
  },
  {
    "example_id": 292,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "225.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "robot_speed = 1/2.5 # meters per hour\nhallway_length = 90/robot_speed # meters\nprint(hallway_length)"
  },
  {
    "example_id": 293,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "from sympy import symbols, sqrt\nx, y = symbols('x y')\np = sqrt(x**2 + y**2)\nprint(p)"
  },
  {
    "example_id": 294,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "x = 12 // (12+1)\nprint(x)"
  },
  {
    "example_id": 295,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3721.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "total_chairs = 11 * 11\nodd_chairs = sum(range(1, total_chairs + 1, 2))\nprint(odd_chairs)"
  },
  {
    "example_id": 296,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "import math\n\nangle = 360/5\nprint(angle)"
  },
  {
    "example_id": 297,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1201.7777777777776"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "side = 104/3\narea = side**2\nprint(area)"
  },
  {
    "example_id": 298,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nlcm_of_smaller_integers = 1\nfor i in range(1, 8):\n    lcm_of_smaller_integers = lcm(lcm_of_smaller_integers, i)\nprint(lcm_of_smaller_integers)"
  },
  {
    "example_id": 299,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "factors = []\nfor i in range(10, 100):\n    if i % 10 == 0 and i % 50 == 0:\n        factors.append(i)\nprint(factors)"
  },
  {
    "example_id": 300,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "angle_P, angle_Q = 5, 1\nangle_R = angle_P / angle_Q\nprint(angle_R)"
  },
  {
    "example_id": 301,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "simplified = (24 / 30) / (20 / 3 / 25)\nprint(simplified)"
  },
  {
    "example_id": 302,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(int(3/5 * 9))"
  },
  {
    "example_id": 303,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "digits = [2, 3, 5, 7]\ndistinct_numbers = len(digits)\nprint(distinct_numbers)"
  },
  {
    "example_id": 304,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "french_students = 8\nspanish_students = 12\nboth_students = 3\ntotal_students = 30\nneither_french_nor_spanish = total_students - french_students - spanish_students - both_students\nprint(neither_french_nor_spanish)"
  },
  {
    "example_id": 305,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.5",
      "30.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "x = 30\nmean = 4.5\nset_members = [5, 8, 10, 18, 19, 28, 30, x]\nsum_set_members = sum(set_members)\nmean_set = sum_set_members / 8\nprint(mean_set)\nprint(x)"
  },
  {
    "example_id": 306,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = 14\nprint(x)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 4\nprint(5*x + 3)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "digits = [2, 3, 5]\ndistinct_numbers = len(set(digits))\nprint(distinct_numbers)"
  },
  {
    "example_id": 309,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c = 3, 5, 10\ndenominator = 6 * a * b\nnumerator = 3 * a ** 2 * b\nresult = numerator / denominator\nprint(result)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Use itertools.combinations\nimport itertools\nbills = [5, 5, 5, 5, 5, 2, 2, 2, 2, 2]\nprint(len(list(itertools.combinations(bills, 17))))"
  },
  {
    "example_id": 311,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import sympy as sp\na, b, c = sp.symbols('a b c')\narea = sp.sqrt((a*b*c)/2)\nprint(area)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 10\nprint(x)"
  },
  {
    "example_id": 313,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "ambulance_speed = 40\nambulance_route = 20\nhelicopter_speed = 1\nair_route = 15\ntakeoff_time = 3\nlanding_time = 3\nambulance_time = ambulance_route / ambulance_speed\nhelicopter_time = air_route / helicopter_speed + takeoff_time + landing_time\nprint(helicopter_time - ambulance_time)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x)"
  },
  {
    "example_id": 315,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "from sympy import symbols, sqrt\nh, b = symbols('h b')\narea = (h * b) / 2\nprint(area)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "print(5**3 - (3**2 - 5)**3)"
  },
  {
    "example_id": 317,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# Number of ways to choose two players from 10\n# to form a two-person team\nfrom math import comb\nprint(comb(10, 2))"
  },
  {
    "example_id": 318,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "129.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "perimeter = 30 + 50 + 25 + 24\nprint(perimeter)"
  },
  {
    "example_id": 319,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "eric_feet_from_sam = 10 - 8\nprint(eric_feet_from_sam)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "smallest = 5 - 3\nprint(smallest)"
  },
  {
    "example_id": 321,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "decimal = 31/11111\nprint(len(str(decimal).split('.')[1]))"
  },
  {
    "example_id": 322,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# calculate coolness of cats\ncoolness_of_2_cats = 2\n\n# calculate coolness of alpacas\ncoolness_of_5_alpacas = 5\n\n# calculate coolness of pandas\ncoolness_of_3_pandas = 3\n\n# calculate coolness of 7 cats\ncoolness_of_7_cats = 7\n\n# calculate coolness of 70 alpacas\ncoolness_of_70_alpacas = 70\n\n# calculate coolness of pandas and 70 alpacas\ncoolness_of_pandas_and_70_alpacas = coolness_of_3_pandas + coolness_of_70_alpacas\n\n# calculate number of pandas as cool as 70 alpacas\nnumber_of_pandas_as_cool_as_70_alpacas = coolness_of_pandas_and_70_alpacas // coolness_of_7_cats\n\nprint(number_of_pandas_as_cool_as_70_alpacas)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "n = -10 // 5 - 3\nprint(n)"
  },
  {
    "example_id": 324,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "# Import the math module\nimport math\n\n# Define the measures of the angles\na, b, c = 3, 5, 7\n\n# Calculate the degree measure of the largest angle\nlargest_angle = math.gcd(a, b)\nprint(largest_angle)"
  },
  {
    "example_id": 325,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0",
      "4.0",
      "7.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# list of numbers\nnum_list = [1, 2, 3, 4, 8, 14, 17, 29, 56, 91]\n\n# list of factors of 34\nfactors_34 = [1, 2, 3, 6, 12, 14, 28, 34]\n\n# list of multiples of 7\nmultiples_7 = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91]\n\n# number of factors of 34\nnum_factors_34 = 0\n# number of multiples of 7\nnum_multiples_7 = 0\n\nfor i in num_list:\n    if i in factors_34:\n        num_factors_34 += 1\n    if i in multiples_7:\n        num_multiples_7 += 1\n\nprint(\"Number of factors of 34: \", num_factors_34)\nprint(\"Number of multiples of 7: \", num_multiples_7)"
  },
  {
    "example_id": 326,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "from math import sqrt\n\na = 12\nb = 16\n\nperimeter = 2 * (a + b)\n\nprint(perimeter)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "supplement_angle = 180 - 50\nprint(supplement_angle)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "def count_three_digit_positive_integers():\n    count = 0\n    for i in range(1, 1000):\n        if len(str(i)) == 3:\n            count += 1\n    return count\nprint(count_three_digit_positive_integers())"
  },
  {
    "example_id": 329,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "import math\nx = 50 - 60\nprint(x)"
  },
  {
    "example_id": 330,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "enrico = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63]\nmarie = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]\nprint(len(set(marie).intersection(enrico)))"
  },
  {
    "example_id": 331,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.5"
    ],
    "annotated_answers": [
      "735.0"
    ],
    "solution": "carpet_cost, padding_cost = 21.95, 2.55\ncarpet_area, padding_area = 4, 3\ncarpet_cost_per_yard = carpet_cost / carpet_area\npadding_cost_per_yard = padding_cost / padding_area\ntotal_cost = carpet_cost_per_yard * carpet_area + padding_cost_per_yard * padding_area\nprint(total_cost)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "import sympy as sym\n\ndef is_prime(n):\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(sym.sqrt(n)) + 1, 6):\n        if n % (i - 1) == 0 or n % (i + 1) == 0:\n            return False\n    return True\n\ndef sum_of_primes(n):\n    sum_of_primes = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            sum_of_primes += i\n    return sum_of_primes\n\nprint(sum_of_primes(9))"
  },
  {
    "example_id": 333,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "trays = 6\nmuffins_per_tray = 20\ncroissants_per_tray = 5\nmuffins_in_batch = trays * muffins_per_tray + trays * croissants_per_tray\nprint(muffins_in_batch)"
  },
  {
    "example_id": 334,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "298.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_sum(start, end):\n    sum = 0\n    for i in range(start, end + 1):\n        if is_prime(i) and math.sqrt(i) % 1 == 0 and i - math.sqrt(i) == 1:\n            sum += i\n    return sum\n\nprint(find_sum(100, 200))"
  },
  {
    "example_id": 335,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(round(pow(1/23, 1000)))"
  },
  {
    "example_id": 336,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "side_of_larger_square = 9 * 4\nprint(side_of_larger_square)"
  },
  {
    "example_id": 337,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0",
      "60.0",
      "90.0",
      "120.0",
      "150.0",
      "180.0",
      "210.0",
      "240.0",
      "270.0",
      "300.0",
      "330.0",
      "360.0",
      "390.0",
      "420.0",
      "450.0",
      "480.0",
      "510.0"
    ],
    "annotated_answers": [
      "510.0"
    ],
    "solution": "max_multiple = 520\nfor i in range(30, max_multiple + 1, 30):\n    if i % 30 == 0:\n        print(i)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "from math import factorial\n\n# number of ways to select 2 balls out of 20\n# without considering order\n\n# formula: n! / (k! * (n-k)!)\n# where n = 20, k = 2\n\nprint(factorial(20) / (factorial(2) * factorial(18)))"
  },
  {
    "example_id": 339,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "original_number = 10\ndoubled_number = original_number * 2\ndoubled_number_plus_200 = doubled_number + 200\nresult = doubled_number_plus_200 / 4 - (original_number / 2)\nprint(result)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "handshakes = 6 * 6\nprint(handshakes)"
  },
  {
    "example_id": 341,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "n_fillings = 9\nn_sandwiches = n_fillings ** 2\nprint(n_sandwiches)"
  },
  {
    "example_id": 342,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "scores = [78, 80, 70, 90]\ndifferences = [10, -10, 20, 20]\navg_diff = sum(differences) / 4\nprint(avg_diff)"
  },
  {
    "example_id": 343,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "308.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "carolyn_share, jules_share, robertas_share = 4, 2, 1\ntotal_amount = 77\ncarolyn_received = total_amount * carolyn_share\nprint(carolyn_received)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "hockey = 33\nbaseball = 24\nneither = 8\nboth = hockey & baseball\nprint(both)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "total_nuts, pecans, walnuts, cashews = 9, 2, 3, 1\nwalnuts_pounds = total_nuts * walnuts / (pecans + walnuts + cashews)\nprint(walnuts_pounds)"
  },
  {
    "example_id": 346,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "hour_angle, minute_angle = 3, 20\nangle = hour_angle + minute_angle\nprint(angle)"
  },
  {
    "example_id": 347,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "111.0",
      "141.0",
      "171.0",
      "222.0",
      "252.0",
      "282.0",
      "303.0",
      "333.0",
      "363.0",
      "393.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "num = 100\nwhile num < 1000:\n    if str(num) == str(num)[::-1]:\n        if num % 3 == 0:\n            print(num)\n    num += 1"
  },
  {
    "example_id": 348,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "quarter_height = 0.5\nquarter_stack = 8\nfoot = 12\nquarter_stack_per_foot = quarter_height / quarter_stack\nfoot_stack = quarter_stack_per_foot * foot\nprint(foot_stack)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "num_cats = 24\nnum_cats_not_catching_mice = 17\nnum_black_cats = 10\nnum_black_cats_not_catching_mice = num_black_cats - num_cats_not_catching_mice\nprint(num_black_cats_not_catching_mice)"
  },
  {
    "example_id": 350,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import pow\nfrom math import ceil\n\n\ndef is_even_perfect_cube(x):\n    return x % 2 == 0 and pow(x, 1/3) % 1 == 0\n\n\ndef get_even_perfect_cubes_less_than(n):\n    return [x for x in range(2, n) if is_even_perfect_cube(x)]\n\n\nprint(len(get_even_perfect_cubes_less_than(2008)))"
  },
  {
    "example_id": 351,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Find positive solutions of the equation\nsolutions = [n for n in range(1, 1000) if -3*n + 3 > -11]\n# Find the sum of these solutions\nprint(sum(solutions))"
  },
  {
    "example_id": 352,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import gcd\nfrom fractions import Fraction\n\nnumerator, denominator = 4, 15\nfraction = Fraction(numerator, denominator)\nn = 1000\ndecimal = fraction.limit_denominator(n).denominator\nprint(decimal)"
  },
  {
    "example_id": 353,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\n# Given\npeople = 8\n\n# Find\nweeks = math.ceil(math.log2(people))\n\nprint(weeks)"
  },
  {
    "example_id": 354,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "A = 2 * 2 + 10\nprint(A)"
  },
  {
    "example_id": 355,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "107.0",
      "233.0",
      "251.0",
      "431.0",
      "503.0",
      "521.0",
      "701.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef sum_of_digits(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digits)\nfor i in range(100, 1000):\n    if is_prime(i) and sum_of_digits(i) == 8:\n        print(i)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "for i in range(2, 6):\n    j = 1\n    while (j % i)!= 0:\n        j += 1\n    print(j)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(1313, 1001))"
  },
  {
    "example_id": 358,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.9999999999999939"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((7/16)**111 * (16/7)**111)"
  },
  {
    "example_id": 359,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 13 - 5\nprint(k)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6666666666666667"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "wallops = 5\nballops = 3\nfallops = 11\n\n# 110 fallops = 110 / 11 fallops / 3 ballops / 5 wallops\n# 110 fallops = 110 / 11 / 3 / 5\n# 110 fallops = 10 / 1 / 1 / 1\n# 110 fallops = 10\n\nprint(110 / 11 / 3 / 5)"
  },
  {
    "example_id": 361,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.1"
    ],
    "annotated_answers": [
      "24.1"
    ],
    "solution": "kick_return_averages = [25.0, 24.3, 24.1, 23.8, 23.4]\nmedian = sorted(kick_return_averages)[2]\nprint(median)"
  },
  {
    "example_id": 362,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Calculate area of the rectangular section\narea = 3 * 2\n\n# Calculate the number of six-inch by six-inch tiles needed\ntiles = area // 36\n\n# Print the result\nprint(tiles)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "import sympy\n\noctagon = sympy.Polygon((0,0), (10,0), (10,6), (6,6), (6,2), (2,2), (2,10), (0,10))\nperimeter = octagon.perimeter\nprint(perimeter)"
  },
  {
    "example_id": 364,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "12.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 6\nwhile x*x < 200:\n    print(x)\n    x += 6"
  },
  {
    "example_id": 365,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import math\n\n# Distance driven by Kelly\nd_k = 9 + 12\n# Speed of Kelly\nv_k = 42\n# Time taken by Kelly\nt_k = d_k / v_k\n\n# Distance driven by Brenda\nd_b = 9 + 12\n# Speed of Brenda\nv_b = 45\n# Time taken by Brenda\nt_b = d_b / v_b\n\n# Minutes earlier\nprint(math.ceil(t_b - t_k))"
  },
  {
    "example_id": 366,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.1213203435596424"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import math\n\nbase = 6\narea = 27\nheight = math.sqrt(area / base)\nprint(height)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "162.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "count = 0\nfor i in range(99, 1000):\n    if str(i).count('0') == 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 368,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.875"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "chocolate_chips_per_cookie = 8\ntotal_cookies = 15\ntotal_chocolate_chips = total_cookies / chocolate_chips_per_cookie\nprint(total_chocolate_chips)"
  },
  {
    "example_id": 369,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "294780.0"
    ],
    "annotated_answers": [
      "1020.0"
    ],
    "solution": "# least common multiple\nlcm = 51*68*85\nprint(lcm)"
  },
  {
    "example_id": 370,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "x = 2\nprint(6 * x + 5)"
  },
  {
    "example_id": 371,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2007.0"
    ],
    "annotated_answers": [
      "2013.0"
    ],
    "solution": "def is_factor(n, m):\n    return n % m == 0\n\ndef is_common_factor(x, y):\n    for i in range(1, x + 1):\n        if is_factor(x, i) and is_factor(y, i):\n            return True\n    return False\n\ndef split_into_digits(n):\n    return int(n / 100), int(n % 100)\n\ndef next_odd_year(year):\n    return year + 2\n\ndef find_first_year(start_year, end_year):\n    for year in range(start_year, end_year + 1):\n        if is_common_factor(year, year + 1):\n            return year\n    return None\n\ndef main():\n    first_odd_year = next_odd_year(find_first_year(2005, 2006))\n    x, y = split_into_digits(first_odd_year)\n    if is_common_factor(x, y):\n        print(first_odd_year)\n    else:\n        print(\"No such year\")\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 372,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.28122915435089",
      "-54.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 4/8\nb = 8/37\nprint(a**55 * b**55)"
  },
  {
    "example_id": 373,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5773502691896257"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import math\nx = math.sqrt(3)/3\nprint(x)"
  },
  {
    "example_id": 374,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "foot_length, tile_length = 1, 4\ntiles_needed = foot_length ** 2 // tile_length ** 2\nprint(tiles_needed)"
  },
  {
    "example_id": 375,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "# Back up data every five minutes\nfive_minutes = 5\n# Back up data every two minutes\ntwo_minutes = 2\n# Total number of minutes in a day\ntotal_minutes = 24 * 60\n# Number of times in a day that the two computers back up at the same time\ntimes_backup = total_minutes // (five_minutes * two_minutes)\nprint(times_backup)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# 2^20 + 2^20 + 2^20 + 2^21\nnumber = 2**20 + 2**20 + 2**20 + 2**21\n# 2^17\ndivisor = 2**17\n# integer division\nprint(number // divisor)"
  },
  {
    "example_id": 377,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "cherry_danishes = 3\ncheese_danishes = 1\ntotal_danishes = cherry_danishes + cheese_danishes\nprint(total_danishes)"
  },
  {
    "example_id": 378,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1500.0"
    ],
    "solution": "x = 500"
  },
  {
    "example_id": 379,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# Height of the balloon after 25 more seconds\nheight = 10 + 2 * 25\nprint(height)"
  },
  {
    "example_id": 380,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n_teams = 4\nn_groups = 8\nn_matches = n_groups * (n_teams * (n_teams - 1)) / 2\nprint(n_matches)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5999.0"
    ],
    "annotated_answers": [
      "5999.0"
    ],
    "solution": "def is_less_than_8000_and_greater_than_2000(n):\n    if n < 8000 and n > 2000:\n        return True\n    else:\n        return False\n\ndef count_less_than_8000_and_greater_than_2000(n):\n    count = 0\n    for i in range(n):\n        if is_less_than_8000_and_greater_than_2000(i):\n            count += 1\n    return count\n\nprint(count_less_than_8000_and_greater_than_2000(10000))"
  },
  {
    "example_id": 382,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "# original dimensions\nlength = width = 200\nperimeter = 4 * width + 4 * length\n\n# new dimensions\nwidth = height = 200\narea = width * height\n\n# calculate original area\noriginal_area = perimeter**2 / (8 * area)\nprint(original_area)"
  },
  {
    "example_id": 383,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "784.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "perimeter = 28\narea = perimeter ** 2\nprint(area)"
  },
  {
    "example_id": 384,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "168.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "x = 14 * 3 * 4\nprint(x)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(6**3, 3**6))"
  },
  {
    "example_id": 386,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1**(2**235423523))"
  },
  {
    "example_id": 387,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "number = 9 * 12\nprint(number)"
  },
  {
    "example_id": 388,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "red_cars = 1/3 * 30\nwhite_cars = 8\nfour_door_cars = 0.5 * 30\nfour_door_red_cars = 0.5 * red_cars\nprint(four_door_red_cars)"
  },
  {
    "example_id": 389,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "import math\nimport sympy\n\n# The area of a right triangle is given by the formula:\n# Area = (base * height) / 2\n\n# The height of the triangle is equal to the length of the hypotenuse\nhypotenuse = 9\n\n# The base is the length of the side opposite the angle\nside_opposite_angle = 8\n\n# The area of the triangle is equal to the product of the base and height\narea = (side_opposite_angle * hypotenuse) / 2\n\nprint(\"The area of the triangle is: \" + str(area))"
  },
  {
    "example_id": 390,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1056.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "from math import gcd, lcm\nlcm_22_48 = lcm(22, 48)\ngcf_22_48 = gcd(22, 48)\nprint(lcm_22_48 * gcf_22_48)"
  },
  {
    "example_id": 391,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.554054054054053"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "area_1, area_2 = 25, 49\narea_3 = area_1 * area_2 / (area_1 + area_2)\nprint(area_3)"
  },
  {
    "example_id": 392,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "35.5",
      "64.0",
      "20.0",
      "64.0",
      "22.0",
      "64.0",
      "25.0",
      "64.0",
      "35.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "import numpy as np\ncounties = ['Aiken', 'Bamberg', 'Barnwell', 'Berkeley', 'Calhoun', 'Cherokee', 'Chesterfield', 'Colleton']\nn2001 = [124, 17, 25, 583, 15, 19, 46, 64]\nn2002 = [141, 15, 22, 557, 12, 13, 18, 49]\nn2003 = [130, 14, 26, 554, 10, 18, 13, 52]\nn2004 = [143, 18, 28, 553, 18, 13, 22, 29]\nn2005 = [136, 11, 29, 524, 11, 19, 41, 41]\nmedians = [np.median(n2001), np.median(n2002), np.median(n2003), np.median(n2004), np.median(n2005)]\nprint(medians)"
  },
  {
    "example_id": 393,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "capacity = 1100\ncurrent_enrollment = 980\nincrease = 0.05\nyears = 0\nwhile current_enrollment < capacity:\n    years += 1\n    current_enrollment += int(current_enrollment * increase)\nprint(years)"
  },
  {
    "example_id": 394,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.34589800443456"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "usd = 300\npounds = usd / 1.64\neuros = usd / 1.32\ndiff = euros - pounds\nprint(diff)"
  },
  {
    "example_id": 395,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.25"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "total_points = 90\nnum_tests = 6 + 2\npoints_per_test = total_points / num_tests\nprint(points_per_test)"
  },
  {
    "example_id": 396,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "87.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "weeks = 609 / 7\nprint(weeks)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "-49.0"
    ],
    "solution": "x = (4 - 34) / 3\nprint(x)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "print((1421 // 7 + 47) // 50 * 9)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0",
      "34.0",
      "43.0",
      "62.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# This is not a very efficient way to solve the problem.\nfor i in range(10, 100):\n    if i % 10 == 0:\n        continue\n    a, b = i // 10, i % 10\n    if a * b == 12:\n        print(i)"
  },
  {
    "example_id": 400,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "students_in_classroom = 18 + 13 + 5\nprint(students_in_classroom)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 37\ntotal = 0\nfor i in range(10):\n    total += i\n    if total % 3 == 0:\n        print(total)\n        break"
  },
  {
    "example_id": 402,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "85.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "numbers = list(range(-36, 49, 1))\nprint(len(numbers))"
  },
  {
    "example_id": 403,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.653097563788805"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import math\nhypotenuse = math.sqrt(25**2 + 14**2)\nprint(hypotenuse)"
  },
  {
    "example_id": 404,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# hairstyles\nhair_count = 3\n# eyebrows\neyebrow_count = 2\n# eyeballs\neye_count = 1\n# ears\near_count = 2\n# lips\nlip_count = 2\n# shoes\nshoe_count = 2\n# clown shoes\nclown_shoe_count = 1\n\ntotal_count = hair_count + eyebrow_count + eye_count + ear_count + lip_count + shoe_count + clown_shoe_count\n\nprint(total_count)"
  },
  {
    "example_id": 405,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.5999999999999996"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "number = 12\npercentage = 0.2\npercentage_30 = 0.3\nresult = number * percentage_30\nprint(result)"
  },
  {
    "example_id": 406,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.6"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "science_club_size = 15\nmath_club_fraction_science_club = 0.3\nmath_club_fraction_science_club_in_science_club = 0.8\nmath_club_size = (science_club_size * math_club_fraction_science_club) * math_club_fraction_science_club_in_science_club\nprint(math_club_size)"
  },
  {
    "example_id": 407,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "dads_steps = 30\nmaxs_steps = dads_steps / 10\nprint(maxs_steps)"
  },
  {
    "example_id": 408,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(8//2//2 + 6)"
  },
  {
    "example_id": 409,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.284271247461902"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\na = (0, 0)\nm = (4, 0)\nb = (8, 0)\nc = (8, -5)\nn = (6, -5)\nd = (0, -5)\narea_ABCD = 40\narea_MBCN = (math.sqrt(2)*area_ABCD)/2\nprint(area_MBCN)"
  },
  {
    "example_id": 410,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.97092112158773"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "import math\n\na = 39\nb = 14\n\nc = math.degrees(math.acos((math.sin(math.radians(a)) + math.sin(math.radians(b))) / math.sqrt(2)))\nprint(c)"
  },
  {
    "example_id": 411,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\nexpr = sympy.sympify('317^3+8^3-(2^(3^2)+317^3)')\nprint(expr)"
  },
  {
    "example_id": 412,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "225.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "x = 15\nprint(x**2)"
  },
  {
    "example_id": 413,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "0.0",
      "2.0",
      "0.0",
      "3.0",
      "0.0",
      "4.0",
      "0.0",
      "5.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "from itertools import combinations\n\nn = 10\n\nfor i in combinations(range(n), 2):\n    print(i)\n\n# (0, 1)\n# (0, 2)\n# (0, 3)\n# (0, 4)\n# (0, 5)\n# (0, 6)\n# (0, 7)\n# (0, 8)\n# (0, 9)\n# (1, 2)\n# (1, 3)\n# (1, 4)\n# (1, 5)\n# (1, 6)\n# (1, 7)\n# (1, 8)\n# (1, 9)\n# (2, 3)\n# (2, 4)\n# (2, 5)\n# (2, 6)\n# (2, 7)\n# (2, 8)\n# (2, 9)\n# (3, 4)\n# (3, 5)\n# (3, 6)\n# (3, 7)\n# (3, 8)\n# (3, 9)\n# (4, 5)\n# (4, 6)\n# (4, 7)\n# (4, 8)\n# (4, 9)\n# (5, 6)\n# (5, 7)\n# (5, 8)\n# (5, 9)\n# (6, 7)\n# (6, 8)\n# (6, 9)\n# (7, 8)\n# (7, 9)\n# (8, 9)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97969.0"
    ],
    "annotated_answers": [
      "97969.0"
    ],
    "solution": "print((97969 ** 0.5) ** 2)"
  },
  {
    "example_id": 415,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "891.0"
    ],
    "annotated_answers": [
      "891.0"
    ],
    "solution": "x = 11 * (1000 // 11) + 11\ny = 11 * (11**2 // 11) - 11\nprint(x - y)"
  },
  {
    "example_id": 416,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.25"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "scores = [100, 100, 99, 98]\naverage_score = 95\nmissing_score = average_score - sum(scores) / len(scores)\nprint(missing_score)"
  },
  {
    "example_id": 417,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.81001487604405"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\nside_length = 16\nperimeter = 8 * side_length\nside_count = 8\nside_per_hex = perimeter / side_count\nside_length_oct = side_per_hex / math.sin(math.pi / side_count)\nprint(side_length_oct)"
  },
  {
    "example_id": 418,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "260.0"
    ],
    "annotated_answers": [
      "260.0"
    ],
    "solution": "num_letters = 26\nnum_digits = 10\nnum_license_plates = num_letters * num_digits\nprint(num_license_plates)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "979.0"
    ],
    "annotated_answers": [
      "291.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0 and is_prime(i):\n            factors.append(i)\n            n //= i\n    if n > 2 and is_prime(n):\n        factors.append(n)\n    return factors\n\ndef prime_factors_sum(n):\n    return sum(prime_factors(n))\n\ndef prime_factors_product(n):\n    return prod(prime_factors(n))\n\ndef prod(my_list):\n    result = 1\n    for i in my_list:\n        result *= i\n    return result\n\ndef solve():\n    for i in range(10, 100):\n        if is_prime(i) and is_prime(100 - i):\n            return prime_factors_product(i) * prime_factors_product(100 - i)\n\nprint(solve())"
  },
  {
    "example_id": 420,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "16.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# x is the larger number\n# 2x - x = 15\n# 3x = 30\n# x = 10\n\n# 4x - 4x = 60\n# 4x = 60 + 4x\n# 4x = 64\n# x = 16\n\nprint(10)\nprint(16)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "bill_time = 400 / 50\nsam_time = 400 / 40\nprint(sam_time - bill_time)"
  },
  {
    "example_id": 422,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "16.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nradius = 16 / sympy.pi\nradius_decrease = -48 / sympy.pi / radius\nprint(radius - radius_decrease)"
  },
  {
    "example_id": 423,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "AB = 2 + 3 + 2\nprint(AB)"
  },
  {
    "example_id": 424,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "marbles = 100\nif marbles % 18 == 0:\n    bags = marbles // 18\n    remaining = marbles % 18\nelif marbles % 42 == 0:\n    bags = marbles // 42\n    remaining = marbles % 42\nelse:\n    bags = 0\n    remaining = 0\nprint(remaining)"
  },
  {
    "example_id": 425,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = 1/2\nprint(x)"
  },
  {
    "example_id": 426,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Area = (base * height) / 2\nbase = 12\nheight = 20\narea = (base * height) / 2\nprint(area)"
  },
  {
    "example_id": 427,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "import math\nnum_people = 3\nnum_offices = 5\nnum_ways = math.factorial(num_people) // (math.factorial(1) * math.factorial(num_people - 1))\nprint(num_ways)"
  },
  {
    "example_id": 428,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.6"
    ],
    "annotated_answers": [
      "0.6"
    ],
    "solution": "print(round(4/7, 1))"
  },
  {
    "example_id": 429,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import factorial\nfrom sympy import primefactors\n\ndef count_primes(n):\n    factors = primefactors(factorial(n))\n    return len(set(factors))\n\nprint(count_primes(20))"
  },
  {
    "example_id": 430,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3720.0"
    ],
    "annotated_answers": [
      "3720.0"
    ],
    "solution": "print(3.72*1000)"
  },
  {
    "example_id": 431,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 24\nprime_factors = [2, 2, 2, 3]\nprint(len(prime_factors))"
  },
  {
    "example_id": 432,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "green_marbles, blue_marbles = 60, 60/3\nprint(blue_marbles)"
  },
  {
    "example_id": 433,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.47654656"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 3.0784\nprint(x**2)"
  },
  {
    "example_id": 434,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "frogs_captured, frogs_observed = 45, 40\nfrogs_captured_previous_day = 10\nfrogs_in_pond = frogs_observed + frogs_captured_previous_day\nprint(frogs_in_pond)"
  },
  {
    "example_id": 435,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.75"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "average = 10.6\nnumbers = [10, 4, 5, 20]\naverage_of_numbers = sum(numbers) / len(numbers)\nprint(average_of_numbers)"
  },
  {
    "example_id": 436,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import factorial\n\ndef prime_factorization(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef prime_factors(n):\n    return len(set(prime_factorization(n)))\n\nprint(prime_factors(117 * 119))"
  },
  {
    "example_id": 437,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16043.0"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "perfect_square_digits = []\nfor i in range(1, 2501):\n    perfect_square_digits.append(str(i**2))\nprint(len(''.join(perfect_square_digits)))"
  },
  {
    "example_id": 438,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "import sympy\np = sympy.primefactors(3105)\nprint(p[-1])"
  },
  {
    "example_id": 439,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "128.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import math\n\n# shaded area\nshaded_area = 12 * 12 - 4 * 2 - 4 * 2\nprint(shaded_area)"
  },
  {
    "example_id": 440,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "print(182 + 3*7 - 64/2 + 27/3)"
  },
  {
    "example_id": 441,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6981317007977318"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "import math\nx = math.radians(40)\nprint(x)"
  },
  {
    "example_id": 442,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "16.0",
      "22.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "total_people = 42\nmat_people = 36\nbottle_people = 26\nboth_people = 20\n\nmat_absent = total_people - mat_people\nbottle_absent = total_people - bottle_people\nboth_absent = total_people - both_people\n\nprint(mat_absent, bottle_absent, both_absent)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "number_of_marbles_in_bag = 20\nnumber_of_blue_marbles = 5\nprobability_of_selecting_a_blue_marble = 0.5\nnumber_of_blue_marbles_to_add = round(number_of_marbles_in_bag * probability_of_selecting_a_blue_marble / (1 - probability_of_selecting_a_blue_marble)) - number_of_blue_marbles\nprint(number_of_blue_marbles_to_add)"
  },
  {
    "example_id": 444,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "number_of_pins_original = 2 * 66 / 3\nprint(number_of_pins_original)"
  },
  {
    "example_id": 445,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "477.0"
    ],
    "annotated_answers": [
      "264.0"
    ],
    "solution": "sum = 0\nfor i in range(10, 100):\n    if i % 10 == 3:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# using a logical and\nn = 5\nif 4*n + 3 < 25 and -7*n + 5 < 24:\n    print(n)"
  },
  {
    "example_id": 447,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-18.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "x, y = 8, 0\nt = (x - 2) / 2\ny = t - 21\nprint(y)"
  },
  {
    "example_id": 448,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "perimeter = 8 * 3 + 8 * 4 + 8 * 5\nprint(perimeter)"
  },
  {
    "example_id": 449,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5208333333333334"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(25/4/12)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "inches_per_yard = 36\ninches = 3/4 * inches_per_yard\nprint(inches)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1080.0"
    ],
    "annotated_answers": [
      "1080.0"
    ],
    "solution": "time_to_walk = 0.30\ntime_to_walk_in_seconds = time_to_walk * 3600\nprint(time_to_walk_in_seconds)"
  },
  {
    "example_id": 452,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "north_miles = 19\nwest_miles = 16\nsouth_miles = 3\neast_miles = 4\ntotal_miles = north_miles + west_miles + south_miles + east_miles\nprint(total_miles)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "time_to_walk_17_miles = 17 / 1.7\nprint(time_to_walk_17_miles)"
  },
  {
    "example_id": 454,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "6.0",
      "12.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "for n in range(1, 1000):\n    if 12 % n == 0:\n        print(n)"
  },
  {
    "example_id": 455,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "# number of ways to award medals\nfrom scipy.special import comb\nprint(comb(8, 3))"
  },
  {
    "example_id": 456,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "124.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "x = 120\ndegrees = [x, x, x - 2, x - 2, x + 2, x + 2, x + 4]\nmax_degree = max(degrees)\nprint(max_degree)"
  },
  {
    "example_id": 457,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "3.0",
      "10.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nrect_length = 3*x + 10\nrect_width = x + 12\nperimeter = 76\narea = rect_length*rect_width\nprint(area)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "x = 9000/100\nprint(x/2)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.9999999999999996"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 42\nprint((1/a)**4 * 2 * a**4 + a**(2+1-3))"
  },
  {
    "example_id": 460,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "cones_at_beginning, cones_at_noon, cones_at_end = 72, 72 * (2/3), 72 * (2/3) * (2/3)\nprint(cones_at_end)"
  },
  {
    "example_id": 461,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2560.0"
    ],
    "annotated_answers": [
      "2560.0"
    ],
    "solution": "initial_population = 10\ndouble_per_hour = 2\ntime_passed = 8\npopulation = initial_population * (double_per_hour ** time_passed)\nprint(population)"
  },
  {
    "example_id": 462,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "192.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "print(2**(2**3) - (2**2)**3)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.2"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "rate = 1.5/15\ntime = 2\ntemperature = 100\nnew_temperature = temperature + rate * time\nprint(new_temperature)"
  },
  {
    "example_id": 464,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "girls = 35\nboys = 35 - girls\nprint(boys)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "448.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "n = 1341\n# Find three consecutive positive integers whose sum is 1341.\ni = 1\nwhile i < n:\n    j = i + 1\n    k = j + 1\n    if i + j + k == n:\n        print(max(i, j, k))\n        break\n    i += 1"
  },
  {
    "example_id": 466,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "meerkats = 10\nguard_pairs = 2\nnight_period = meerkats // guard_pairs\nprint(night_period)"
  },
  {
    "example_id": 467,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "310.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# red balloons\nred = 600/4\n# blue balloons\nblue = 600/6\n# yellow balloons\nyellow = 600/10\n# total pots with three balloons\nthree_balloons = red + blue + yellow\nprint(three_balloons)"
  },
  {
    "example_id": 468,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Write a program to find the largest of the three consecutive integers\n# given that the product of the three consecutive integers is 120.\n# That product divided by the mean of the three integers is 24.\n\n# Calculate the mean of the three consecutive integers\nmean = 120 / 3\n\n# Calculate the product of the three consecutive integers\nproduct = 120\n\n# Find the largest of the three consecutive integers\nlargest = product / mean\nprint(largest)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.50000000000001"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import math\nside_length = 5*math.sqrt(5)\nwidth = side_length/2\narea = width * side_length\nprint(area)"
  },
  {
    "example_id": 470,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "shirts = 5\npants = 6\nhats = 8\noutfits = shirts * pants * hats\nprint(outfits)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# witches: 6\n# sorcerers: 10\n# handshakes: 6 + 10 - 1\nhandshakes = 6 + 10 - 1\nprint(handshakes)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "1001.0"
    ],
    "solution": "# Find the least positive four-digit number that is a multiple of 7\n# by trial and error\n\ndef least_positive_multiple_of_7(n):\n    \"\"\"\n    Finds the least positive integer that is a multiple of n\n    by trial and error\n    \"\"\"\n    for i in range(1000, 10000):\n        if i % n == 0:\n            return i\n\nprint(least_positive_multiple_of_7(7))"
  },
  {
    "example_id": 473,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "print(round(10.0000198*5.9999985401*6.9999852))"
  },
  {
    "example_id": 474,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "144.0",
      "288.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "n = 100\nfor i in range(10):\n    for j in range(10):\n        if i * 4 == j:\n            print(i * 100 + j * 10 + i * 4)"
  },
  {
    "example_id": 475,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "total_time = 3\ngood_workers = 3\nbad_workers = total_time // good_workers\nprint(bad_workers)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "picture_area = 2\npicture_length, picture_width = picture_area/2, picture_area/3\nquilt_length = 2 * picture_length\nquilt_width = 3 * picture_width\nquilt_area = quilt_length * quilt_width\nprint(quilt_area)"
  },
  {
    "example_id": 477,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5937.0"
    ],
    "annotated_answers": [
      "5937.0"
    ],
    "solution": "apples_picked = 15832\nhours_elapsed = 3\ntotal_apples = apples_picked * hours_elapsed / 8\nprint(total_apples)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# number of scoops of each flavor\nvanilla, chocolate, strawberry, cherry = 1, 1, 1, 1\n\n# number of orders\norders = vanilla + chocolate + strawberry + cherry - 1\n\n# print the number of orders\nprint(orders)"
  },
  {
    "example_id": 479,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print((-5)**3 + (-2)**3 + 2**3 + 5**3)"
  },
  {
    "example_id": 480,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import sqrt\nans = sqrt(25-16)/(sqrt(25)-sqrt(16))\nprint(ans)"
  },
  {
    "example_id": 481,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "distance = 4\nscale = 0.5\nkm = distance / scale\nprint(km)"
  },
  {
    "example_id": 482,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25000.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "circumference = 40000\ntrips = 1000000000 / circumference\nprint(trips)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "# Original pennies\nb = 40\na = 50\n# New pennies\nb_new = 40 + 2\na_new = 50 + 2\n# 2 pennies added\ndiff = b_new - a_new\n# Original pennies\nprint(diff)"
  },
  {
    "example_id": 484,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.400000000000006"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "brass_content = 0.8  # 80% copper\ncopper_content = 0.4  # 20% zinc\ntotal_brass = 48  # ounces of copper\ntotal_zinc = brass_content * total_brass\nprint(total_zinc)"
  },
  {
    "example_id": 485,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(92 - 45 / (3 * 5) - 5**2)"
  },
  {
    "example_id": 486,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.125"
    ],
    "annotated_answers": [
      "5.5"
    ],
    "solution": "length = 8.5\nfor i in range(2):\n    length /= 2\nprint(length)"
  },
  {
    "example_id": 487,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "-89.0"
    ],
    "solution": "import math\n\nx = 180\nM = 1\nN = 30\n\nprint(M+N)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = (4/5) * 5\nprint(x)"
  },
  {
    "example_id": 489,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "quarters = 1\nnickels = 1\npennies = 1\n\n# 1 quarter + 1 nickel = 25 + 5 = 30\n# 1 quarter + 1 penny = 25 + 1 = 26\n# 1 nickel + 1 penny = 5 + 1 = 6\n# 1 quarter + 1 nickel + 1 penny = 25 + 5 + 1 = 31\n\nprint(3)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "868.7"
    ],
    "annotated_answers": [
      "868.8"
    ],
    "solution": "x = 543.55\ny = 25.23\nz = 299.98\nprint(round(x, 1) + round(y, 1) + round(z, 1))"
  },
  {
    "example_id": 491,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "507.0"
    ],
    "annotated_answers": [
      "507.0"
    ],
    "solution": "smallest_positive_multiple_of_13 = 13\nwhile smallest_positive_multiple_of_13 <= 500:\n    smallest_positive_multiple_of_13 += 13\nprint(smallest_positive_multiple_of_13)"
  },
  {
    "example_id": 492,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "729.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "print(9**3)"
  },
  {
    "example_id": 493,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(2**5 - 5**2)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.332682251925386"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import math\na = 6\nb = 4\nc = 3\ns = (a+b+c)/2\narea = math.sqrt(s*(s-a)*(s-b)*(s-c))\nprint(area)"
  },
  {
    "example_id": 495,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.434782608695652"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = (3.7 - 1.66) / (2.8 - 2.34)\nprint(x)"
  },
  {
    "example_id": 496,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "7.0",
      "9.0",
      "11.0",
      "13.0",
      "15.0",
      "17.0",
      "19.0",
      "21.0",
      "23.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "odd_perfect_squares = []\nfor i in range(5, 211):\n    if i % 2!= 0:\n        odd_perfect_squares.append(i)\nprint(odd_perfect_squares)"
  },
  {
    "example_id": 497,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(3*3 + 3*(3 + 3) - 3**3)"
  },
  {
    "example_id": 498,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import sqrt\n\ndef is_perfect_square(n):\n    return int(sqrt(n))**2 == n\n\ndef perfect_square_sum(n):\n    i = 1\n    while is_perfect_square(n):\n        n -= i**2\n        i += 1\n    return i - 1\n\nprint(perfect_square_sum(49))"
  },
  {
    "example_id": 499,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.008695652173912858"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import math\nimport sympy\n\n# Area of rectangle PQRS\nPQ = 6\nQR = 6\nRS = 4\nPQRS = PQ * QR\n\n# Perimeter of quadrilateral PTRS\nPT = 6\nTR = 6\nTS = 4\nPTRS = PT + TR + TS\n\n# Ratio of sides TQ and TR\nTQ = 5.8\nTR = 6.2\n\n# Area of quadrilateral PTRS\nPTRS = (PQRS - TQ * TR) / (PT + TR + TS - 2 * TQ)\n\nprint(\"Area of quadrilateral PTRS is\", PTRS)"
  },
  {
    "example_id": 500,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "666666.6666666666"
    ],
    "annotated_answers": [
      "1250.0"
    ],
    "solution": "lira_to_dollar = 1.50\nnumber_of_lira = 1000000\ndollar = number_of_lira / lira_to_dollar\nprint(dollar)"
  },
  {
    "example_id": 501,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.21"
    ],
    "annotated_answers": [
      "1.21"
    ],
    "solution": "a = 0.78\nb = 0.12\nc = 1.33\nd = 1.328\nprint(max(a, b, c, d) - min(a, b, c, d))"
  },
  {
    "example_id": 502,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.84"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "width = 0.4\narea = 100\narea_outer = area - width**2\nprint(area_outer)"
  },
  {
    "example_id": 503,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "x = (7 * 2) + 7\nprint(x)"
  },
  {
    "example_id": 504,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "a = 7\nb = 13\neven_positive_integers_less_than_ab = (a*b) // 2\nprint(even_positive_integers_less_than_ab)"
  },
  {
    "example_id": 505,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1500.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "juniors = 450\nseniors = 600\njuniors_cartons = 1500\nseniors_cartons = juniors_cartons\nprint(seniors_cartons)"
  },
  {
    "example_id": 506,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.041666666666666664"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "elephant_speed = 19\nlion_speed = 24\ndistance = 1\ntime_to_catch = distance / lion_speed\nprint(time_to_catch)"
  },
  {
    "example_id": 507,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "lcm = 240\ngcd = 24\nx = 48\ny = lcm // gcd\nprint(y)"
  },
  {
    "example_id": 508,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "perimeter = 60\narea = perimeter / 2\nprint(area)"
  },
  {
    "example_id": 509,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2100.0"
    ],
    "annotated_answers": [
      "2100.0"
    ],
    "solution": "from math import sqrt\n\nprint(sqrt(5*10*14*21*15*20))"
  },
  {
    "example_id": 510,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a, b, c = ['Yes', 'No'], ['Red', 'Green', 'Blue', 'Other'], ['Yes', 'No']\nn = len(a) * len(b) * len(c)\nprint(n)"
  },
  {
    "example_id": 511,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "flagpole_height = 15\nshadow_length = 6\nperson_height = 5\nshadow_length_of_woman = flagpole_height - person_height\nprint(shadow_length_of_woman)"
  },
  {
    "example_id": 512,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2005.0"
    ],
    "annotated_answers": [
      "7004.0"
    ],
    "solution": "a, b = 3*11*13*21, 2005\nproduct = a - b\nb = a - product\nprint(b)"
  },
  {
    "example_id": 513,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# degrees = (360 / 12) * (minutes / 60) + (360 / 12) * (hours / 12)\ndegrees = (360 / 12) * (0 / 60) + (360 / 12) * (8 / 12)\nprint(degrees)"
  },
  {
    "example_id": 514,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "pints_in_quart = 2\nquarts_in_gallon = 4\ngallons = 2.5\npints = gallons * quarts_in_gallon * pints_in_quart\nprint(pints)"
  },
  {
    "example_id": 515,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "249921.46018366027"
    ],
    "annotated_answers": [
      "54000.0"
    ],
    "solution": "import math\nfield_radius = 5\nplot_side = 500\nwatered_area = math.pi * field_radius ** 2\nunwatered_area = plot_side ** 2 - watered_area\nprint(unwatered_area)"
  },
  {
    "example_id": 516,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8333333333333334"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "wands, rands, fands = 4, 6, 24\nwands_per_fand = wands / fands\nfands_per_wand = fands / wands\nfands_per_5fands = 5 / fands_per_wand\nprint(fands_per_5fands)"
  },
  {
    "example_id": 517,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from math import sqrt\ndef largest_prime_factor(n):\n    i = int(sqrt(n))\n    while i > 1:\n        if n % i == 0:\n            return i\n        i -= 1\n    return 1\nprint(largest_prime_factor(78))"
  },
  {
    "example_id": 518,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(pow(pow(100, 0.5) - pow(36, 0.5), 2))"
  },
  {
    "example_id": 519,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# length of the new rectangle\nwidth = 9/6*10\nprint(width)"
  },
  {
    "example_id": 520,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "print(15 + 8**2 - 3)"
  },
  {
    "example_id": 521,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "print(9/2)"
  },
  {
    "example_id": 522,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "print(-49/7)"
  },
  {
    "example_id": 523,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "111.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "def positive_multiples(n, end_value):\n    multiples = []\n    for i in range(n, end_value):\n        if i % n == 0:\n            multiples.append(i)\n    return multiples\n\nprint(len(positive_multiples(9, 1000)))"
  },
  {
    "example_id": 524,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "integers = [19, 20, 21, 22, 23]\nmean = sum(integers) / 5\nsmallest = min(integers)\nprint(smallest)"
  },
  {
    "example_id": 525,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "r = 24/3 + 5\nprint(r)"
  },
  {
    "example_id": 526,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import sqrt\nprint(sqrt(28 + sqrt(1296)))"
  },
  {
    "example_id": 527,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def factors(n):\n    factors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i * i!= n:\n                factors.append(n // i)\n    return factors\n\ndef get_factors(n):\n    factors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i * i!= n:\n                factors.append(n // i)\n    return factors\n\ndef get_positive_integers_less_than_or_equal_to_n_with_no_divisors(n):\n    factors = get_factors(n)\n    numbers = []\n    for i in range(1, n + 1):\n        if i in factors:\n            continue\n        numbers.append(i)\n    return numbers\n\ndef count_numbers(numbers):\n    return len(numbers)\n\ndef main():\n    numbers = get_positive_integers_less_than_or_equal_to_n_with_no_divisors(12)\n    print(count_numbers(numbers))\n\nmain()"
  },
  {
    "example_id": 528,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2520.0"
    ],
    "annotated_answers": [
      "2520.0"
    ],
    "solution": "from math import lcm\n\ndef least_common_multiple(n):\n    if n == 1:\n        return n\n    else:\n        return lcm(n, least_common_multiple(n-1))\n\nprint(least_common_multiple(10))"
  },
  {
    "example_id": 529,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2400.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "swimmer_speed = 2\ndolphin_speed = 8\nrace_length = 400\nswimmer_distance = swimmer_speed * race_length\ndolphin_distance = dolphin_speed * race_length\nprint(dolphin_distance - swimmer_distance)"
  },
  {
    "example_id": 530,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "# Import the math module to use the ceil function\nfrom math import ceil\n\n# Define the variables\nbright_price, fresh_price, glow_price = 75, 1, 60\nbright_volume, fresh_volume, glow_volume = 150, 50, 100\n\n# Calculate the volume of Bright\nbright_volume = bright_price / fresh_price * fresh_volume\n\n# Calculate the volume of Glow\nglow_volume = glow_price / bright_price * bright_volume\n\n# Calculate the number of cents per unit of volume of Glow\nglow_price_per_volume = ceil(glow_price * 100 / glow_volume)\n\nprint(glow_price_per_volume)"
  },
  {
    "example_id": 531,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "231.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "number_of_people = 22\nhandshakes = 0\nfor i in range(1, number_of_people):\n    handshakes += i\nprint(handshakes)"
  },
  {
    "example_id": 532,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "556.0"
    ],
    "annotated_answers": [
      "1251.0"
    ],
    "solution": "students_music = 834\nstudents = 2/3 * students_music\nprint(students)"
  },
  {
    "example_id": 533,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# A is the tens digit and B is the units digit\n# 25AB is divisible by 9\n# so A + B = 9\n# A and B are both between 1 and 9\n# there are 9*9 = 81 different combinations\n# so there are 81 different four-digit numbers\nprint(81)"
  },
  {
    "example_id": 534,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "divisible_by_3 = 0\nfor i in range(2, 10):\n    if i % 3 == 0:\n        divisible_by_3 += 1\nprint(divisible_by_3)"
  },
  {
    "example_id": 535,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "numbers = [2008, 2003, 1998, 2005, 8, 3]\nprint(len(numbers))"
  },
  {
    "example_id": 536,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.141592653589793"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\nprint(pi)"
  },
  {
    "example_id": 537,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0",
      "2.0",
      "7.0",
      "2.0",
      "13.0",
      "2.0",
      "19.0",
      "2.0",
      "31.0",
      "2.0",
      "43.0",
      "2.0",
      "61.0",
      "2.0",
      "73.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nfor p in primes:\n    if p > 3:\n        for q in primes:\n            if q + q!= p:\n                if p - q in primes:\n                    print(p, q)\n                    break"
  },
  {
    "example_id": 538,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor i in range(1, 100):\n    if i % 3 == 0 and i % 4 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 539,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = -1\nx_sum = 0\nfor i in range(2012):\n    x_sum += x**i\nprint(x_sum)"
  },
  {
    "example_id": 540,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "count = 0\nfor i in range(100):\n    if i % 2 == 0:\n        if 5 * i < 500:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 541,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "def smallest_divisible_by_9(n):\n    for i in range(100, 1000):\n        if i % 9 == 0:\n            return i\n    return None\n\nprint(smallest_divisible_by_9(3))"
  },
  {
    "example_id": 542,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# number of sides of a regular polygon\nn = 9\n# number of interior diagonals\ndiagonals = n*(n-3) // 2\nprint(diagonals)"
  },
  {
    "example_id": 543,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "alien_population = 160\nthree_eyed_alien_population = 17/40 * alien_population\nprint(three_eyed_alien_population)"
  },
  {
    "example_id": 544,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "gallons_left = 3/4\ncones_sold = 32 * gallons_left\nprint(cones_sold)"
  },
  {
    "example_id": 545,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "a = 1200\nb = 1200 // a\nprint(b)"
  },
  {
    "example_id": 546,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.4438595832024937",
      "176"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "from math import factorial\nn = 109\nprint(factorial(n))"
  },
  {
    "example_id": 547,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "days_between_reports = [9, 12, 15]\nminimum_days = min(days_between_reports)\nprint(minimum_days)"
  },
  {
    "example_id": 548,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcf(99, 100))"
  },
  {
    "example_id": 549,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.58823529411765"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "import numpy as np\ndays = [7, 5, 4, 1, 0]\npercentage = [40, 30, 20, 10, 0]\ntotal = sum(days)\nprint(sum(np.multiply(days, percentage)) / total)"
  },
  {
    "example_id": 550,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "70.43226875094867"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "import math\n\nb = 39\nc = 14\n\np = math.radians(b)\nq = math.radians(c)\n\na = math.acos((math.sin(p) + math.sin(q)) / math.sin(p) * math.sin(q))\n\nprint(math.degrees(a))"
  },
  {
    "example_id": 551,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from math import factorial\n\nnum_books = 4\nnum_ways = factorial(num_books)\nprint(num_ways)"
  },
  {
    "example_id": 552,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.35714285714285676"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "numbers = [1, 2, 3, 4, 5, 6, 7, 8]\nmean = sum(numbers) / len(numbers)\nnumbers.remove(7)\nnew_mean = sum(numbers) / len(numbers)\nprint(new_mean - mean)"
  },
  {
    "example_id": 553,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "total = 2*3*4*5+1\n\nparen_values = []\nfor i in range(1, 5):\n    for j in range(i+1):\n        left = total - 2*3*4*5 - (j*1)\n        right = 1 - (i-j)*1\n        if left == 0 and right == 0:\n            paren_values.append(2*3*4*5 + j*1)\nprint(len(paren_values))"
  },
  {
    "example_id": 554,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "perimeter = 4 * 10\nprint(perimeter)"
  },
  {
    "example_id": 555,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "3.0",
      "0.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "from sympy import *\n\nx = Symbol('x', real=True)\nh = Symbol('h', real=True)\nu = Symbol('u', real=True)\ny = Symbol('y', real=True)\nz = Symbol('z', real=True)\nj = Symbol('j', real=True)\n\nans1 = simplify(2/3*x - 2*x/3)\nans2 = simplify(1 - 2*h) - (h - 1)/2*h\nans3 = -u - u**2\nans4 = -3 + y\nans5 = 1/2*j - j/2\nans6 = y + x + z - x + y + z\n\nprint(ans1)\nprint(ans2)\nprint(ans3)\nprint(ans4)\nprint(ans5)\nprint(ans6)"
  },
  {
    "example_id": 556,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "680.0"
    ],
    "solution": "total_eyes = 3/8 * 160 + 160\nprint(total_eyes)"
  },
  {
    "example_id": 557,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "perimeter = 4 * 72\nprint(perimeter)"
  },
  {
    "example_id": 558,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "set = [3/7, 4/3, 11/8, 6/16]\ndiff = max(set) - min(set)\nprint(diff)"
  },
  {
    "example_id": 559,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "x = (7 - 15)/4\nprint(8*x + 2)"
  },
  {
    "example_id": 560,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0769230769230769"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "last_test_score = 98\navg = 91\nnum_tests = last_test_score / avg\nprint(num_tests)"
  },
  {
    "example_id": 561,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "# Find the product of two numbers\nproduct = 1000\n\n# Find the sum of two numbers\nsum = product // 10\n\n# Print the sum\nprint(sum)"
  },
  {
    "example_id": 562,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2\ny = 5\nx_range = range(x, 54 // y + 1)\nprint(len(x_range))"
  },
  {
    "example_id": 563,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import sqrt\n\nside = sqrt(16)\nprint(side)"
  },
  {
    "example_id": 564,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import factorial\nn = 5\nr = 2\nprint(factorial(n) // (factorial(r) * factorial(n - r)))"
  },
  {
    "example_id": 565,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.53981633974483"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import math\n\ndef area(radius):\n    return math.pi * radius ** 2\n\ndef main():\n    radius = 5\n    print(area(radius))\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 566,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "cliff_height = 112\ntrestle_length = 80\ntrain_position = 3/4 * trestle_length\nprint(cliff_height - train_position)"
  },
  {
    "example_id": 567,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 55/5 - 3\nprint(x)"
  },
  {
    "example_id": 568,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "total_dimples = 300\ntime_per_dimple = 2\ntotal_time = total_dimples * time_per_dimple\nminutes = total_time / 60\nprint(minutes)"
  },
  {
    "example_id": 569,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a, b, x, c = 7, 2, 10, 9\nx = (a + b + x + c) / 4\nprint(x)"
  },
  {
    "example_id": 570,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "37.5"
    ],
    "annotated_answers": [
      "37.5"
    ],
    "solution": "t_shirts = 2\nsweatshirt = 1\ncost_of_t_shirts = 15.22\ntotal_cost = 67.94\nsweatshirt_cost = total_cost - (t_shirts * cost_of_t_shirts)\nprint(sweatshirt_cost)"
  },
  {
    "example_id": 571,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "import math\n\n# The measure in degrees of angle 1\nangle1 = 50\n\n# The measure in degrees of angle 2\nangle2 = angle1 + 90\n\n# Print the measure in degrees of angle 2\nprint(angle2)"
  },
  {
    "example_id": 572,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "480.0"
    ],
    "solution": "import math\narea = (8 * 3) + (10 * 3)\nprint(area)"
  },
  {
    "example_id": 573,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "mary_age = 3/5 * 30\nprint(mary_age)"
  },
  {
    "example_id": 574,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "number_of_models = 5\nnumber_of_outfits = 5\ntotal_shows = number_of_models * (number_of_outfits - 2)\nprint(total_shows)"
  },
  {
    "example_id": 575,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from math import factorial\n\ndef count_two_digit_numbers(digits, max_repeats=1):\n    count = 0\n    for i in range(0, max_repeats + 1):\n        for j in range(0, max_repeats + 1):\n            for k in range(0, max_repeats + 1):\n                for l in range(0, max_repeats + 1):\n                    if i + j + k + l == 2:\n                        count += 1\n    return count\n\nprint(count_two_digit_numbers([2, 4, 6, 7]))"
  },
  {
    "example_id": 576,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "a = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nprint(len(a))"
  },
  {
    "example_id": 577,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "from itertools import permutations\n\n# number of ways to form 3-letter code words using A, B, and C\nprint(len(list(permutations(\"ABC\", 3))))"
  },
  {
    "example_id": 578,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "numbers = [1, 2, 3, 4, 5]\nsum_numbers = sum(numbers)\nmean_numbers = sum_numbers / len(numbers)\nmedian_numbers = sorted(numbers)[2]\nresult = mean_numbers - median_numbers\nprint(result)"
  },
  {
    "example_id": 579,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = (23 - 2 - 3 - 3) / 3\nprint(x)"
  },
  {
    "example_id": 580,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "12.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "import math\n\ndef rightanglemark(a, b, c):\n    return (a + b + c) / 2\n\ndef perimeter(a, b, c):\n    return a + b + c\n\na, b, c = 12, 0, 0\nmark = rightanglemark(a, b, c)\nperim = perimeter(a, b, c)\nprint(mark)\nprint(perim)"
  },
  {
    "example_id": 581,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.66666666666667"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "trinket_per_blinket = 4\nblinket_per_drinket = 3\ndrinket_value = 56\ntrinket_value = drinket_value / blinket_per_drinket * trinket_per_blinket\nprint(trinket_value)"
  },
  {
    "example_id": 582,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "angle_M_degrees = 180 - 10\nprint(angle_M_degrees)"
  },
  {
    "example_id": 583,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.5"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "daps_per_yap = 4\nbaps_per_yap = 3\nbaps_per_dap = baps_per_yap / daps_per_yap\ntotal_daps = 42\ntotal_baps = total_daps * baps_per_dap\nprint(total_baps)"
  },
  {
    "example_id": 584,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = (29-5) / 3\nprint(x)"
  },
  {
    "example_id": 585,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3969.0"
    ],
    "annotated_answers": [
      "-3969.0"
    ],
    "solution": "number = 63\nproduct = number * (-number)\nprint(product)"
  },
  {
    "example_id": 586,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.56505117707799"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "import math\n\nx = math.degrees(math.atan2(10, 20))\nprint(x)"
  },
  {
    "example_id": 587,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "side_length = 184 / 8\nprint(side_length)"
  },
  {
    "example_id": 588,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "print(3**4-5*8)"
  },
  {
    "example_id": 589,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "num_students = 700\nproficient_or_above_score = 0.9\nnum_not_proficient_or_above = num_students - (num_students * proficient_or_above_score)\nprint(num_not_proficient_or_above)"
  },
  {
    "example_id": 590,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import gcd\n\ndef reduce_fraction(numerator, denominator):\n    \"\"\"\n    Returns the reduced form of the fraction.\n    \"\"\"\n    divisor = gcd(numerator, denominator)\n    return numerator // divisor, denominator // divisor\n\ndef add_fractions(a, b):\n    \"\"\"\n    Returns the sum of fractions a and b.\n    \"\"\"\n    numerator = a[0] * b[1] + b[0] * a[1]\n    denominator = a[1] * b[1]\n    return reduce_fraction(numerator, denominator)\n\ndef multiply_fractions(a, b):\n    \"\"\"\n    Returns the product of fractions a and b.\n    \"\"\"\n    numerator = a[0] * b[0]\n    denominator = a[1] * b[1]\n    return reduce_fraction(numerator, denominator)\n\ndef sum_fraction_digits(fraction):\n    \"\"\"\n    Returns the sum of the digits in the decimal expansion of the fraction.\n    \"\"\"\n    denominator, numerator = fraction\n    return sum(map(int, str(numerator))) + sum(map(int, str(denominator)))\n\ndef main():\n    a = (2, 9)\n    b = (1, 7)\n    result = sum_fraction_digits(multiply_fractions(a, b))\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 591,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "nickels = 1\ndimes = 1\nquarters = 1\ntotal_coins = nickels + dimes + quarters\nprint(total_coins)"
  },
  {
    "example_id": 592,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "min_multiple_of_6_and_8 = 24\nprint(min_multiple_of_6_and_8)"
  },
  {
    "example_id": 593,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "236.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "x = 2*125.28 - 13.7\nprint(int(x))"
  },
  {
    "example_id": 594,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6287000.0"
    ],
    "annotated_answers": [
      "6290000.0"
    ],
    "solution": "print(round(6287215, -3))"
  },
  {
    "example_id": 595,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0",
      "84.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# 1\nn = 84\nlist_of_numbers = [2.5, 5.5, 8.5, 11.5]\nfor i in range(4, n):\n    list_of_numbers.append(i*1.0)\nprint(len(list_of_numbers))\n\n# 2\nlist_of_numbers = [2.5, 5.5, 8.5, 11.5] + [i*1.0 for i in range(4, n)]\nprint(len(list_of_numbers))"
  },
  {
    "example_id": 596,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.199999999999996"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "dresses_per_shirt = 3/5\ntotal_garments = 72\ndresses = dresses_per_shirt * total_garments\nprint(dresses)"
  },
  {
    "example_id": 597,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def factors(n):\n    return [i for i in range(1, n + 1) if n % i == 0 and i!= n]\n\ndef spin(n):\n    return factors(n)\n\ndef max_spins(n):\n    if n == 20:\n        return 1\n    else:\n        return max_spins(spin(n)[0]) + 1\n\nprint(max_spins(20))"
  },
  {
    "example_id": 598,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "avg_speed = 15 / 2.5\nprint(avg_speed)"
  },
  {
    "example_id": 599,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "from math import gcd\nprint(gcd(180, 450))"
  },
  {
    "example_id": 600,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "1093.0"
    ],
    "solution": "data = [51, 52, 53, 54, 55, 56, 57]\nmedian = sorted(data)[len(data)//2]\nmode = max(set(data), key=data.count)\nprint(median + mode)"
  },
  {
    "example_id": 601,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4444444444444444"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(4/9)"
  },
  {
    "example_id": 602,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "import math\n\nn = 2\nwhile True:\n    is_relatively_prime = True\n    for i in range(1, n):\n        if math.gcd(n, i) > 1:\n            is_relatively_prime = False\n            break\n    if is_relatively_prime:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 603,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "print(round((26 + 52), -1))"
  },
  {
    "example_id": 604,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print((1-(-1)**11)**2)"
  },
  {
    "example_id": 605,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "from math import pi\n\n# the length of a side of the pentagon\nside_length = 1\n\n# the number of sides of the pentagon\nnum_sides = 5\n\n# the measure of an interior angle\ninterior_angle = 180 / num_sides\n\n# the measure of two acute angles\nacute_angle = 90 - interior_angle\n\n# the common measure of the large angles\nlarge_angle = interior_angle + acute_angle\n\nprint(large_angle)"
  },
  {
    "example_id": 606,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.75"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "right_handed_players = 4 * (36 / 2) / 2\nleft_handed_players = 36 / 2\ngirls = left_handed_players / 2\nleft_handed_girls = girls / 2\nright_handed_girls = left_handed_girls / 2\nright_handed_players = right_handed_players - right_handed_girls\nprint(right_handed_players)"
  },
  {
    "example_id": 607,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "history_students = 85\nscience_students = 85\ntotal_students = history_students + science_students\nprint(total_students)"
  },
  {
    "example_id": 608,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import math\n\ndef find_mode(lst):\n    return max(set(lst), key=lst.count)\n\ndef find_median(lst):\n    return sorted(lst)[len(lst) // 2]\n\ndef find_mean(lst):\n    return sum(lst) / len(lst)\n\ndef find_diff(lst):\n    return max(lst) - min(lst)\n\nlst = [8, 8, 8, 8, 8]\nprint(find_diff(lst))"
  },
  {
    "example_id": 609,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "boykins_height = 5.5\nyming_height = 7.5\nheight_difference = yming_height - boykins_height\nprint(height_difference)"
  },
  {
    "example_id": 610,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "print(6/6-6+6*6)"
  },
  {
    "example_id": 611,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "lengths = [48, 72, 40]\nmax_length = max(lengths)\nprint(max_length)"
  },
  {
    "example_id": 612,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.00000000000001"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "from math import sqrt\n\nside = 4 * sqrt(2)\nbase = side * 2\narea = (base * side) / 2\nprint(area)"
  },
  {
    "example_id": 613,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef distinct_prime_factors(n):\n    factors = prime_factors(n)\n    unique_factors = []\n    for factor in factors:\n        if factor not in unique_factors:\n            unique_factors.append(factor)\n    return sum(unique_factors)\n\nprint(distinct_prime_factors(735))"
  },
  {
    "example_id": 614,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import simplify\n\nexpr = (123/321)*(456/654)*(789/987)*(123/321)**-1*(456/654)**-1*(789/987)**-1\nprint(simplify(expr))"
  },
  {
    "example_id": 615,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "square_side = 10\nrectangle_side = square_side * 1.5\nrectangle_area = rectangle_side * rectangle_side\nsquare_area = square_side * square_side\npercent_decrease = (rectangle_area - square_area) / square_area * 100\nprint(percent_decrease)"
  },
  {
    "example_id": 616,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# The ratio of the measures of the angles of a triangle is 3:2:1\n# Given that the shortest side of the triangle is 12 meters long, what is the number of meters in the longest side of the triangle?\n# Solution\n# Let the length of the longest side be x.\n# Then the length of the shortest side is 12.\n# The length of the longest side is 3 times the length of the shortest side.\n# So x = 3 \\* 12\n# x = 36\n# The length of the longest side is 36 meters long.\nx = 36\nprint(x)"
  },
  {
    "example_id": 617,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "94.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "distance = 100 - 6\nprint(distance)"
  },
  {
    "example_id": 618,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sides = 144 / 360\nprint(int(sides))"
  },
  {
    "example_id": 619,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import sqrt\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_numbers(n):\n    prime_numbers = []\n    for i in range(1, n + 1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n\ndef get_numbers(n):\n    numbers = []\n    for i in range(1, n + 1):\n        numbers.append(i)\n    return numbers\n\ndef get_prime_numbers_from_digits(digits):\n    prime_numbers = []\n    for i in digits:\n        prime_numbers.append(get_prime_numbers(i))\n    return prime_numbers\n\ndef get_numbers_from_digits(digits):\n    numbers = []\n    for i in digits:\n        numbers.append(get_numbers(i))\n    return numbers\n\ndef get_unique_prime_numbers(prime_numbers):\n    unique_prime_numbers = []\n    for i in prime_numbers:\n        if i not in unique_prime_numbers:\n            unique_prime_numbers.append(i)\n    return unique_prime_numbers\n\ndef get_prime_numbers_from_digits_with_unique_prime_numbers(digits):\n    prime_numbers = get_prime_numbers_from_digits(digits)\n    unique_prime_numbers = get_unique_prime_numbers(prime_numbers)\n    return unique_prime_numbers\n\ndef get_prime_numbers_from_digits_with_numbers(digits):\n    prime_numbers = get_prime_numbers_from_digits(digits)\n    numbers = get_numbers_from_digits(digits)\n    prime_numbers_with_numbers = []\n    for i in range(len(numbers)):\n        prime_numbers_with_numbers.append((prime_numbers[i], numbers[i]))\n    return prime_numbers_with_numbers\n\ndef get_prime_numbers_from_digits_with_numbers_with_prime_numbers(digits):\n    prime_numbers = get_prime_numbers_from_digits(digits)\n    numbers = get_numbers_from_digits(digits)\n    prime_numbers_with_numbers = []\n    for i in range(len(numbers)):\n        prime_numbers_with_numbers.append((prime_numbers[i], numbers[i], prime_numbers[i]))\n    return prime_numbers_with_numbers\n\ndef main():\n    prime_numbers = get_prime_numbers_from_digits_with_numbers_with_prime_numbers([1, 3, 6, 7])\n    print(prime_numbers)\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 620,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(5625 ** 0.5)"
  },
  {
    "example_id": 621,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "sides = 1070 / 180\nprint(int(sides))"
  },
  {
    "example_id": 622,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "9604.0"
    ],
    "solution": "from itertools import combinations\nfrom math import prod\n\ndef count_odd_five_digit_counting_numbers(digits):\n    count = 0\n    for length in range(1, 6):\n        for combination in combinations(digits, length):\n            if prod(combination) % 10 == 1:\n                count += 1\n    return count\n\nprint(count_odd_five_digit_counting_numbers([1, 2, 3, 4, 5, 6, 7]))"
  },
  {
    "example_id": 623,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "perimeter_triangle = 21\nsides = 6\nperimeter_hexagon = perimeter_triangle * sides\nprint(perimeter_hexagon)"
  },
  {
    "example_id": 624,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1440000.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# You can use functions in math, scipy, sympy if they help.\n# You can use functions in math, scipy, sympy if they help.\nimport math\n\n# Find the length of the trapezoid\nbase_1 = 5\nbase_2 = 3\nheight = 9\ntrapezoid_length = (base_1 + base_2) * height / 2\n\n# Find the area of the trapezoid\narea = trapezoid_length * (base_1 + base_2) / 2\n\n# Convert the area to square centimeters\nsquare_centimeters = area * 10000\n\n# Print the result\nprint(square_centimeters)"
  },
  {
    "example_id": 625,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6105.0"
    ],
    "annotated_answers": [
      "957.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 111):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 626,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "175.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "furlongs_in_a_mile = 8\nfurlongs_in_a_fortnight = 2800\nweeks_in_a_fortnight = 2\nmiles_per_day = (furlongs_in_a_fortnight / weeks_in_a_fortnight) / furlongs_in_a_mile\nprint(miles_per_day)"
  },
  {
    "example_id": 627,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "number = 10/5\nprint(number)"
  },
  {
    "example_id": 628,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1188.0"
    ],
    "annotated_answers": [
      "1188.0"
    ],
    "solution": "length = 9\nwidth = 12\npictures = 11\narea = length * width * pictures\nprint(area)"
  },
  {
    "example_id": 629,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "side1 = 9\nside2 = 10\nperimeter = side1 + side2\nprint(perimeter)"
  },
  {
    "example_id": 630,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.56505117707799"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "import numpy as np\ny = np.degrees(np.arctan(0.5))\nprint(y)"
  },
  {
    "example_id": 631,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(0 ** 5 + (-1) ** 4)"
  },
  {
    "example_id": 632,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(3**(-4)*3**(-8)*3**14)"
  },
  {
    "example_id": 633,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "print(16/25*pow(5/2, 4))"
  },
  {
    "example_id": 634,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "import math\n\ndef perimeter(a, b, c):\n    return a + b + c\n\ndef area(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\ndef side_length(a, b, c, s):\n    return (s - (a + b + c - s)) / 2\n\na, b, c = 3, 4, 5\ns = perimeter(a, b, c)\ns_3 = side_length(a, b, c, s)\np_3 = perimeter(s_3, s_3, s_3)\n\nprint(\"The perimeter of the nine-sided figure is\", p_3)"
  },
  {
    "example_id": 635,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "num_teams = 3\nnum_players = 4\nnum_handshakes = (num_teams - 1) * num_players * 3 + num_teams * num_players\nprint(num_handshakes)"
  }
]