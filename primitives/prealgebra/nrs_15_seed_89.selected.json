[
  {
    "example_id": 0,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "print(64**(1/2))"
  },
  {
    "example_id": 1,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.75"
    ],
    "annotated_answers": [
      "1.25"
    ],
    "solution": "x = 0.5 + 0.75 + 0.5\nprint(x)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "cookies_sold, cupcakes_sold, brownies_sold = 54, 20, 35\ncookies_price, cupcakes_price, brownies_price = 1/3, 2, 1\ntotal_cost = 15\nrevenue = (cookies_sold * cookies_price) + (cupcakes_sold * cupcakes_price) + (brownies_sold * brownies_price)\nprofit = revenue - total_cost\nprint(profit)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "1584.0"
    ],
    "solution": "import math\n\ndef number_of_ways(n):\n    return math.factorial(n) / (math.factorial(3) * math.factorial(n - 3))\n\nprint(number_of_ways(12))"
  },
  {
    "example_id": 4,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "330.0"
    ],
    "solution": "passes = 11 * 3\nprint(passes)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.745056497175141"
    ],
    "annotated_answers": [
      "3.7"
    ],
    "solution": "x, y = 37/12, 260/59\nprint((x+y)/2)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pencils = 13\npens = 9\nneither = 3\ntotal_boxes = pencils + pens + neither\npencils_and_pens = total_boxes - neither\nprint(pencils_and_pens)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "324.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "perimeter = 18\narea = perimeter * perimeter\nprint(area)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "import math\nprint(math.sqrt(15*35*21))"
  },
  {
    "example_id": 9,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.0",
      "0.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "for i in range(99, -1, -99):\n    print(i)"
  },
  {
    "example_id": 10,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import sqrt\n\ndef divisor_count(n):\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n ** 0.5 == int(n ** 0.5):\n        count -= 1\n    return count\n\ndef count_positive_integers(n):\n    count = 0\n    for i in range(1, n):\n        if divisor_count(i) % 2 == 1:\n            count += 1\n    return count\n\nprint(count_positive_integers(103))"
  },
  {
    "example_id": 11,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1518.0"
    ],
    "annotated_answers": [
      "1518.0"
    ],
    "solution": "# 1st smallest prime number\np1 = 2\n# 2nd smallest prime number\np2 = 3\n# 3rd smallest prime number\np3 = 5\n# 4th smallest prime number\np4 = 7\n\n# 1st smallest composite number greater than 0\nc1 = 4\n# 2nd smallest composite number greater than 0\nc2 = 6\n# 3rd smallest composite number greater than 0\nc3 = 8\n# 4th smallest composite number greater than 0\nc4 = 9\n\nproduct_prime = p1 * p2 * p3 * p4\nproduct_composite = c1 * c2 * c3 * c4\n\nprint(product_prime - product_composite)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "def lcm(a, b):\n    if a > b:\n        greater = a\n    else:\n        greater = b\n    while True:\n        if (greater % a == 0) and (greater % b == 0):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\nprint(lcm(72, 96))"
  },
  {
    "example_id": 13,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "x = 107 * 109 ** 5\nexponent = 5\nprint(exponent)"
  },
  {
    "example_id": 14,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 1/6*6*7 + 8*2/8*(7-1)\nprint(x)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print(round(14.7923412**2, -2))"
  },
  {
    "example_id": 16,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for i in range(10, 50):\n    if i % i % 10 == 0:\n        print(i)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "age = 18\nbrother_age = 4 * age\n\nprint(brother_age)\n\n# 18 + 6 = 24\n# 24 - 6 = 18\n# 18 / 4 = 4.5\n# 4.5 - 6 = 3.5\n# 3.5 - 6 = 0\n# 0 / 4 = 0\n# 0 - 6 = -6\n# -6 / 4 = -1.5\n# -1.5 - 6 = -7.5\n# -7.5 - 6 = -13.5\n# -13.5 - 6 = -19.5\n# -19.5 - 6 = -25.5\n# -25.5 - 6 = -31.5\n# -31.5 - 6 = -37.5\n# -37.5 - 6 = -43.5\n# -43.5 - 6 = -49.5\n# -49.5 - 6 = -55.5\n# -55.5 - 6 = -61.5\n# -61.5 - 6 = -67.5\n# -67.5 - 6 = -73.5\n# -73.5 - 6 = -79.5\n# -79.5 - 6 = -85.5\n# -85.5 - 6 = -91.5\n# -91.5 - 6 = -97.5\n# -97.5 - 6 = -103.5\n# -103.5 - 6 = -109.5\n# -109.5 - 6 = -115.5\n# -115.5 - 6 = -121.5\n# -121.5 - 6 = -127.5\n# -127.5 - 6 = -133.5\n# -133.5 - 6 = -139.5\n# -139.5 - 6 = -145.5\n# -145.5 - 6 = -151.5\n# -151.5 - 6 = -157.5\n# -157.5 - 6 = -163.5\n# -163.5 - 6 = -169.5\n# -169.5 - 6 = -175.5\n# -175.5 - 6 = -181.5\n# -181.5 - 6 = -187.5\n# -187.5 - 6 = -193.5\n# -193.5 - 6 = -199.5\n# -199.5 - 6 = -205.5\n# -205.5 - 6 = -211.5\n# -211.5 - 6 = -217.5\n# -217.5 - 6 = -223.5\n# -223.5 - 6 = -229.5\n# -229.5 - 6 = -235.5\n# -235.5 - 6 = -241.5\n# -241.5 - 6 = -247.5\n# -247.5 - 6 = -253.5\n# -253.5 - 6 = -259.5\n# -259.5 - 6 = -265.5\n# -265.5 - 6 = -271.5\n# -271.5 - 6 = -277.5\n# -277.5 - 6 = -283.5\n# -283.5 - 6 = -289.5\n# -289.5 - 6 = -295.5\n# -295.5 - 6 = -301.5\n# -301.5 - 6 = -307.5\n# -307.5 - 6 = -313.5\n# -313.5 - 6 = -319.5\n# -319.5 - 6 = -325.5\n# -325.5 - 6 = -331.5\n# -331.5 - 6 = -337.5\n# -337.5 - 6 = -343.5\n# -343.5 - 6 = -349.5\n# -349.5 - 6 = -355.5\n# -355.5 - 6 = -361.5\n# -361.5 - 6 = -367.5\n# -367.5 - 6 = -373.5\n# -373.5 - 6 = -379.5\n# -379.5 - 6 = -385.5\n# -385.5 - 6 = -391.5\n# -391.5 - 6 = -397.5\n# -397.5 - 6 = -403.5\n# -403.5 - 6 = -409.5\n# -409.5 - 6 = -415.5\n# -415.5 - 6 = -421.5\n# -421.5 - 6 = -427.5\n# -427.5 - 6 = -4"
  },
  {
    "example_id": 18,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "777.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "largest_multiple_of_37_less_than_800 = 800 - 800 % 37\nprint(largest_multiple_of_37_less_than_800)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.99999999999999"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\na = 2.5\nb = 0.7\nc = 2.7\nd = 2.5\nprint(math.sqrt(a**2-b**2)/(c-d))"
  },
  {
    "example_id": 20,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = round(sum([13, 14, 22, 52, 63, 74]), -1)\nb = round(13, -1) + round(14, -1) + round(22, -1) + round(52, -1) + round(63, -1) + round(74, -1)\nprint(a - b)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "multiples_of_3 = 0\nmultiples_of_6 = 0\nfor i in range(1, 20):\n    if i % 3 == 0:\n        multiples_of_3 += 1\n    if i % 6 == 0:\n        multiples_of_6 += 1\nprint(multiples_of_6 - multiples_of_3)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(3 + 4)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "784.0",
      "5.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nperimeter = 56\narea = (perimeter**2) / (4*tan(pi/5))\nprint(area)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5400.0",
      "5400.0",
      "60.0",
      "60.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "# Write your solution here\nimport math\n\ndef least_common_multiple(a, b):\n    return (a * b) // math.gcd(a, b)\n\ndef lcm(a, b, c):\n    return least_common_multiple(least_common_multiple(a, b), c)\n\ndef find_period(days):\n    return lcm(days[0], days[1], days[2])\n\ndef find_least_common_multiple(days):\n    return lcm(days[0], days[1], days[2])\n\ndef find_period_using_least_common_multiple(days):\n    return find_least_common_multiple(days)\n\ndef find_period_using_lcm(days):\n    return lcm(days[0], days[1], days[2])\n\ndef find_period_using_gcd(days):\n    return days[0] * days[1] * days[2] // math.gcd(days[0], days[1]) // math.gcd(days[0], days[2]) // math.gcd(days[1], days[2])\n\ndef find_period_using_math_gcd(days):\n    return days[0] * days[1] * days[2] // math.gcd(days[0], days[1]) // math.gcd(days[0], days[2]) // math.gcd(days[1], days[2])\n\ndays = [360, 450, 540]\nprint(find_period_using_lcm(days))\nprint(find_period_using_least_common_multiple(days))\nprint(find_period_using_gcd(days))\nprint(find_period_using_math_gcd(days))"
  },
  {
    "example_id": 25,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "group1_average = 84\ngroup2_average = 66\noverall_average = (group1_average * 25 + group2_average * 20) / (25 + 20)\nprint(overall_average)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "sarah = 5\njames = 3\nmatthew = -2\nmax_score = (sarah * james) - matthew\nprint(max_score)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "N = 11\ndef count_divisors(N):\n    count = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            count += 1\n    return count\nprint(count_divisors(N))"
  },
  {
    "example_id": 28,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "fraction_list = []\nfor x in [4, 8, 12]:\n    for y in [4, 8, 12]:\n        fraction_list.append(x/y)\nprint(len(set(fraction_list)))"
  },
  {
    "example_id": 29,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b, c = 0, 0, 0\na = c - b\nprint(a)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "numbers = [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93]\nprint(len(numbers))"
  },
  {
    "example_id": 31,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "side_length = 60 / 2\narea = side_length ** 2\nprint(area)"
  },
  {
    "example_id": 32,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "564.0"
    ],
    "annotated_answers": [
      "564.0"
    ],
    "solution": "print(round(563.5097))"
  },
  {
    "example_id": 33,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1061.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "import sympy\nfrom sympy import isprime, S\n\ndef number_of_four_digit_prime_numbers():\n    count = 0\n    for i in range(1000, 10000):\n        if isprime(i):\n            count += 1\n    return count\n\nprint(number_of_four_digit_prime_numbers())"
  },
  {
    "example_id": 34,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "y = 6\nprint(y**3)"
  },
  {
    "example_id": 35,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.75"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Rational\nAE = 6\nAB = 1 + 2/3\nBC = 1 + 1/4\nDE = 1 + 1/12\nCD = BC - AE\nprint(CD)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.830951894845301"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "hypotenuse = 5\nleg = 3\narea = (hypotenuse ** 2 + leg ** 2) ** (1/2)\nprint(area)"
  },
  {
    "example_id": 37,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 6\nprint(x**2 - 3)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "height = 5\nbase = 8\nheight2 = 20\nperimeter = height + height2\nbase2 = perimeter/2\nprint(base2)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = (-8) - 7\nprint(x)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3380.0"
    ],
    "solution": "from string import ascii_lowercase\nvowels = 'AEIOU'\nword_length = 3\nnumber_of_words = 0\nfor letter_a in vowels:\n    for letter_b in vowels:\n        for letter_c in vowels:\n            word = letter_a + letter_b + letter_c\n            if word in ascii_lowercase:\n                number_of_words += 1\nprint(number_of_words)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import math\ndef is_factor(a, b):\n    return a % b == 0\ndef get_factors(n):\n    factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\ndef get_winning_rolls():\n    winning_rolls = 0\n    for m in range(1, 21):\n        for j in range(1, 21):\n            if is_factor(m, j):\n                winning_rolls += 1\n    return winning_rolls\nprint(get_winning_rolls())"
  },
  {
    "example_id": 42,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "mathcounts = 28\nscience_club = 21\nneither = 6\ncommon = mathcounts + science_club - neither\nprint(common)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def is_divisible_by_4(n):\n    return n % 4 == 0\n\ndef has_2_in_units_place(n):\n    return str(n)[-1] == '2'\n\ncount = 0\nfor i in range(1, 201):\n    if has_2_in_units_place(i) and is_divisible_by_4(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-332.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "N = 500 - 90 + 7 - (400 - 60 + 5)\nN = 500 - 90 + 7 - 345\nN = -332\nprint(N)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def sum_digits(n):\n    return n // 10 + n % 10\n\ndef count_numbers(n):\n    count = 0\n    for i in range(10, n):\n        if sum_digits(i) == 7:\n            count += 1\n    return count\n\nn = 100\nprint(count_numbers(n))"
  },
  {
    "example_id": 46,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# This is the 5x5 grid:\n# 1 2 3 4 5\n# 6 7 8 9 10\n# 11 12 13 14 15\n# 16 17 18 19 20\n# 21 22 23 24 25\n# Count the black squares:\nblack_squares = 0\nfor i in range(25):\n    if i in [1, 5, 10, 15, 20]:\n        black_squares += 1\nprint(black_squares)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(6+5-4*3/(2+1))"
  },
  {
    "example_id": 48,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import pow\nx = pow(pow(pow(pow(-345, 4), 2), 0), -2)\nx = pow(x, -4)\nprint(x)"
  },
  {
    "example_id": 49,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4007.0"
    ],
    "solution": "n = 2004\nfor i in range(1, n + 1):\n    if i % 2 == 1:\n        print(i)\n        break"
  },
  {
    "example_id": 50,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sqrt\n\ndef is_perfect_square(n):\n    return int(sqrt(n)) ** 2 == n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef least_prime_sum_of_two_distinct_perfect_squares():\n    for i in range(1, 1000):\n        if is_perfect_square(i):\n            for j in range(i + 1, 1000):\n                if is_perfect_square(j):\n                    if is_prime(i + j):\n                        return i + j\n\nprint(least_prime_sum_of_two_distinct_perfect_squares())"
  },
  {
    "example_id": 51,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "3.0",
      "6.0",
      "9.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "for x in range(10):\n    if (341400 + x*100000) % 3 == 0:\n        print(x)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "history_students, science_students = 126, 129\ntotal_students = 200\nboth_students = history_students + science_students\nprint(both_students)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-30.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "# Find the smallest multiple of 5 greater than -32\nsmallest_multiple = 5 * (-32 // 5 + 1)\nprint(smallest_multiple)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "circle = [3, 5, 2, 9]\ndivisible_by_4 = [2, 4, 8, 6]\nfor i in divisible_by_4:\n    if i in circle:\n        print(i)"
  },
  {
    "example_id": 55,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "from sympy import symbols, sqrt\nw1, h1, w2, h2 = symbols('w1 h1 w2 h2')\narea = sqrt((w1 - w2)**2 + (h1 - h2)**2)\nprint(area)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10090.0"
    ],
    "solution": "def nth_odd_positive_integer_with_an_odd_number_of_digits(n):\n    i = 1\n    while len(str(i)) % 2 == 0:\n        i += 1\n    return i\nprint(nth_odd_positive_integer_with_an_odd_number_of_digits(1000))"
  },
  {
    "example_id": 57,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "8.0",
      "6.5"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "data = [4,5,6,7,8,9]\nmedian = data[3]\nmode = data[4]\nmean = sum(data) / len(data)\nprint(median, mode, mean)"
  },
  {
    "example_id": 58,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "def lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(lcm(lcm(14, 20), 35))"
  },
  {
    "example_id": 59,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(n):\n    return n ** 3 == abs(n)\n\ndef get_prime_sum_of_cubes(n):\n    for i in range(10, n + 1):\n        if is_prime(i):\n            for j in range(1, i):\n                for k in range(1, j):\n                    if is_cube(j) and is_cube(k) and is_cube(i - j - k):\n                        return i\n    return -1\n\nprint(get_prime_sum_of_cubes(100))"
  },
  {
    "example_id": 60,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "flour_needed = 15 * 144 / 20\nprint(flour_needed)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import numpy as np\n\n# Find the radius of the small circle\nsmall_circle_radius = (12 * 13) / (12 - 6)\n\n# Verify the solution\nprint(small_circle_radius)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(8-4/2-1)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.5"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = (5**2 - 2)/2\nprint(x)"
  },
  {
    "example_id": 64,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "k = 27\nsum = 0\nwhile k > 0:\n    if k / 27 > 2 / 3 and k / 27 < 8 / 9:\n        sum += k\n    k -= 1\nprint(sum)"
  },
  {
    "example_id": 65,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def divisible_by_n(n):\n    if n == 10:\n        return 10\n    else:\n        return 10 - n\n\nprint(divisible_by_n(6))"
  },
  {
    "example_id": 66,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "total_memos = 600\nnum_typists = 4\ndays = 3\nmemos_per_day = total_memos / days\nprint(memos_per_day)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88920.0"
    ],
    "annotated_answers": [
      "247000.0"
    ],
    "solution": "purchase_price = (0.8 * 49400) + 49400\nprint(purchase_price)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "import math\ntotal_rectangles = 0\nfor i in range(4):\n    for j in range(4):\n        if (i, j) in [(0, 0), (0, 3), (3, 0), (3, 3)]:\n            continue\n        if (i, j) in [(1, 1), (2, 2), (2, 1), (1, 2)]:\n            total_rectangles += 1\nprint(total_rectangles)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "from math import factorial\n\ndef permutations(string):\n    \"\"\"\n    Returns the number of permutations of a given string\n    \"\"\"\n    return factorial(len(string)) // factorial(len(string) - 1)\n\nn_books = 5\nn_permutations = permutations('12345')\nprint(n_permutations)"
  },
  {
    "example_id": 70,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "636.0"
    ],
    "solution": "# number of times the clock chimes an hour\nnumber_of_times_per_hour = 10\n# number of hours in a 24-hour period\nnumber_of_hours = 24\n# total number of times the clock chimes in a 24-hour period\ntotal_number_of_times = number_of_times_per_hour * number_of_hours\nprint(total_number_of_times)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.7"
    ],
    "annotated_answers": [
      "2.7"
    ],
    "solution": "num = 2.748\nprint(round(num, 1))"
  },
  {
    "example_id": 72,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "12.0",
      "24.0",
      "36.0",
      "48.0",
      "60.0",
      "72.0",
      "84.0",
      "96.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for x in range(0, 100, 4):\n    if x % 6 == 0:\n        print(x)"
  },
  {
    "example_id": 73,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pentagon_sides = 5\ndiagonals = 5 # each side is a diagonal\nprint(diagonals)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\n\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef is_sum_equal_to_15(n):\n    return sum_of_digits(n) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_equal_to_15(i):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(200, 300))"
  },
  {
    "example_id": 75,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "import math\nside = 3\nheight = 4\narea = (side * height) / 2\nprint(area)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import math\n\ndef solve_for_x(x, P, Q):\n    return (Q - P) / (2 * x)\n\nx = solve_for_x(2, 3, 5)\n\nprint(x)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef prime_factors_diff(n):\n    factors = prime_factors(n)\n    return max(factors) - min(factors)\n\nprint(prime_factors_diff(2000))"
  },
  {
    "example_id": 78,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\nr = math.sqrt(4*4 + 4*4 + 4*4 + 4*4)\nprint(r)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def count_divisible_by_3_4_5(n):\n    count = 0\n    for i in range(1, n):\n        if i % 3 == 0 and i % 4 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\ncount = count_divisible_by_3_4_5(500)\nprint(count)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "number_of_houses = 6 * 10\nprint(number_of_houses)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1200.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "bicycle_speed = 20 * 60\nprint(bicycle_speed)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "234.0"
    ],
    "annotated_answers": [
      "234.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nfor i in range(200, 300):\n    if gcd(i, 36) == 18:\n        print(i)\n        break"
  },
  {
    "example_id": 83,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "x_min = -3\nx_max = 8\nx_sum = 0\nfor x in range(x_min, x_max+1):\n    x_sum += x\nprint(x_sum)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import sqrt\n\n# Use the formula of a 30-60-90 triangle to find the length of the shorter leg\nshorter_leg = 16/sqrt(3)\n\n# Use the formula of a 30-60-90 triangle to find the length of the longer leg\nlonger_leg = sqrt(3)*shorter_leg\n\n# Print the length of the longer leg\nprint(longer_leg)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "for n in range(1, 1000000, 2):\n    if n == 17:\n        print(n)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "appetizers = 5\nentrees = 8\ndesserts = 4\nn_meals = appetizers * entrees * desserts\nprint(n_meals)"
  },
  {
    "example_id": 87,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "def gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcf(518, 294))"
  },
  {
    "example_id": 88,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.9198621771937625"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "import math\ndegrees = 110\nradians = math.radians(degrees)\nprint(radians)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import ceil\nfrom math import sqrt\na, b = 3 * sqrt(5), 5 * sqrt(3)\nprint(int(ceil(b - a)))"
  },
  {
    "example_id": 90,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0",
      "19.0",
      "12.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "mx_students = 7\neng_students = 11\nboth_students = 4\ntotal_students = 30\nnot_mx = total_students - mx_students\nnot_eng = total_students - eng_students\nnot_mx_eng = total_students - (mx_students + eng_students)\nprint(not_mx, not_eng, not_mx_eng)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.708286933869708"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = 56**0.5\nb = 126**0.5\nprint(a+b)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.5"
    ],
    "annotated_answers": [
      "84.5"
    ],
    "solution": "print(35.2 + 49.3)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "def prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\nprint(sum_prime_factors(85085))"
  },
  {
    "example_id": 94,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "# Find all positive divisors of 10\ndivisors = [1, 2, 5, 10]\n# Find the product of all positive divisors of 10\nproduct = 1\nfor divisor in divisors:\n    if 10 % divisor == 0:\n        product *= divisor\nprint(product)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "total_boxes = 4 + 3 + 2 + 2\nprint(total_boxes)"
  },
  {
    "example_id": 96,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.40500611775288",
      "51"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 42\nfact = 1\nwhile n > 1:\n    fact *= n\n    n -= 1\nprint(fact)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "666000.0"
    ],
    "annotated_answers": [
      "666000.0"
    ],
    "solution": "print(3**2 * 2**4 * 37 * 5**3)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "# divisors of 1, 3, 5, 7\ndivisors = [1, 3, 5, 7]\n\n# find the least positive integer divisible by all the divisors\nnum = 1\nwhile True:\n    if all(num % d == 0 for d in divisors):\n        print(num)\n        break\n    num += 1"
  },
  {
    "example_id": 99,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.000000000000001"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((20 * (2/5) ** 2 * (3/4) ** 2 * 5/9) ** 5)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "87.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "scores = [87, 85, 87]\ndiff = 3\navg = 90\nhighest_score = max(scores)\nprint(highest_score)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "4.0",
      "5.0",
      "8.0",
      "10.0",
      "20.0",
      "40.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "factors = [x for x in range(1, 121) if (120 % x) == 0 and (40 % x) == 0]\nprint(factors)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "denominator = 8\nnumerator = 5\ndifference = denominator - numerator\nprint(difference)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(0**(5**6431564))"
  },
  {
    "example_id": 104,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.846153846153846"
    ],
    "annotated_answers": [
      "1.125"
    ],
    "solution": "a =.26\nprint(1/a)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "num = 2\nwhile True:\n    if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 6 == 2:\n        print(num)\n        break\n    num += 1"
  },
  {
    "example_id": 106,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(-1**1001)"
  },
  {
    "example_id": 107,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def days_studied_three_hours(days):\n    return sum(1 for day in days if day >= 3)\n\ndays = [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3]\nprint(days_studied_three_hours(days))"
  },
  {
    "example_id": 108,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "563.51"
    ],
    "annotated_answers": [
      "563.51"
    ],
    "solution": "print(round(563.5097, 2))"
  },
  {
    "example_id": 109,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.2"
    ],
    "solution": "# This solution uses sympy\nimport sympy\n\n# Define the variables\nA, B, C, D, E = sympy.symbols('A B C D E')\n\n# Define the expressions\nAB = B - A\nBC = C - B\nCD = D - C\nDE = E - D\nAE = A - E\n\n# Define the area of triangle ABC\narea = sympy.sqrt(AB**2 + BC**2 + CD**2)\n\n# Define the length of segment CE\nCE = sympy.sqrt(area**2 - AE**2)\n\n# Print the length of segment CE\nprint(CE)"
  },
  {
    "example_id": 110,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.18"
    ],
    "annotated_answers": [
      "13.18"
    ],
    "solution": "print(56.78-43.6)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "22.5"
    ],
    "solution": "a, b, c = 0.0, 0.0, 0.0\n\na = 0.0\nb = 2*a\nc = 5*a\n\nprint(a)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a, b, c = 32, 8, 21\nx = (a + b) / 2\nprint(x)"
  },
  {
    "example_id": 113,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "147.0"
    ],
    "annotated_answers": [
      "147.0"
    ],
    "solution": "pages_per_book = [5, 2]\nminutes_per_page = [7, 7]\npages_to_read = [30, 30]\ntotal_minutes = sum(minutes_per_page[i] * pages_to_read[i] / pages_per_book[i] for i in range(len(pages_per_book)))\nprint(total_minutes)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "234.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "# Triangle perimeter\ntriangle_perimeter = 39\n# Hexagon perimeter\nhexagon_perimeter = 6 * triangle_perimeter\nprint(hexagon_perimeter)"
  },
  {
    "example_id": 115,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import math\n\ndef count_digit(n, digit):\n    return math.floor(n / digit)\n\ndef list_of_all_integers(n):\n    return [i for i in range(1, n+1)]\n\ndef count_digit_in_list(lst, digit):\n    count = 0\n    for x in lst:\n        if str(x)[-1] == str(digit):\n            count += 1\n    return count\n\ndef main():\n    lst = list_of_all_integers(100)\n    count = count_digit_in_list(lst, 6)\n    print(count)\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 116,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "x = max(2/5, 1/2, 5, 10)\ny = min(2/5, 1/2, 5, 10)\nprint(x/y)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def min_avg(n1, n2, n3, n4):\n    if n1 < n2 < n3 < n4:\n        return (n1 + n2 + n3 + n4) / 4\n    else:\n        return None\nprint(min_avg(2, 4, 6, 8))"
  },
  {
    "example_id": 118,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "103041.0"
    ],
    "annotated_answers": [
      "103041.0"
    ],
    "solution": "print((103041**0.5)**2)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "doughnuts_price = 3\ndoughnuts_per_dozen = 4\ndoughnuts_per_dozen_price = doughnuts_price / doughnuts_per_dozen\nprint(doughnuts_per_dozen_price * 12)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "square_side = 6\ntriangle_base = 8\ntriangle_altitude = square_side**2 / 8\nprint(triangle_altitude)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "256.0"
    ],
    "annotated_answers": [
      "5040.0"
    ],
    "solution": "def number_of_different_settings(n):\n    # n is the number of dials\n    return n ** 4\n\nprint(number_of_different_settings(4))"
  },
  {
    "example_id": 122,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.3636363636363635"
    ],
    "annotated_answers": [
      "1.36"
    ],
    "solution": "veal_price = 2.20\nveal_weight = 3\nveal_weight_kg = veal_weight / veal_price\nprint(veal_weight_kg)"
  },
  {
    "example_id": 123,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 144\nb = 405\n\ndef gcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a % b)\n\nprint(gcf(a, b))"
  },
  {
    "example_id": 124,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.73"
    ],
    "annotated_answers": [
      "0.73"
    ],
    "solution": "print(0.8 - 0.07)"
  },
  {
    "example_id": 125,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "2.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "scores = [17, 10, 9, 14, 16, 8, 10]\nscores_sum = sum(scores)\nscores_count = len(scores)\navg = scores_sum / scores_count\nprint(avg)\nnext_three_scores = 14 - avg\nprint(next_three_scores)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "total_shoe_stores = 90\nuniversity_shoe_stores = 18\nnorth_shoe_stores = total_shoe_stores * university_shoe_stores // total_shoe_stores\nprint(north_shoe_stores)"
  },
  {
    "example_id": 127,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "588.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "r = 14\ns = 42\nprint(r * s)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "red_blink_time = 2\nyellow_blink_time = 3\nblue_blink_time = 5\ndance_time = 7\ntotal_blink_time = red_blink_time + yellow_blink_time + blue_blink_time\nnumber_of_blinks_in_dance = dance_time // total_blink_time\nprint(number_of_blinks_in_dance)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.15"
    ],
    "annotated_answers": [
      "0.15"
    ],
    "solution": "print(3/20)"
  },
  {
    "example_id": 130,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.25"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = (29 - 2 - 2) / (2 + 1 + 1)\nprint(x)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "smallest_multiple_of_6_greater_than_115 = 120\nprint(smallest_multiple_of_6_greater_than_115)"
  },
  {
    "example_id": 132,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "0.01699999999999996",
      "10.0",
      "0.012999999999999956",
      "11.0",
      "0.06799999999999998",
      "12.0",
      "0.030000000000000013"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "grades = ['9th', '10th', '11th', '12th']\nmales = [0.411, 0.344, 0.206, 0.116]\nfemales = [0.394, 0.331, 0.138, 0.086]\nfor grade in grades:\n    males_percent = males[grades.index(grade)]\n    females_percent = females[grades.index(grade)]\n    males_nearest_females_percent = abs(males_percent - females_percent)\n    print(f\"Grade: {grade}, males_nearest_females_percent: {males_nearest_females_percent}\")"
  },
  {
    "example_id": 133,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "11.0",
      "10.0",
      "13.0",
      "10.0",
      "17.0",
      "10.0",
      "19.0",
      "10.0",
      "21.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def is_relatively_prime(a, b):\n    return gcd(a, b) == 1\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef get_relatively_prime_numbers(max_value):\n    for i in range(10, max_value):\n        for j in range(10, max_value):\n            if is_relatively_prime(i, j):\n                yield i, j\n\nprint(list(get_relatively_prime_numbers(30)))"
  },
  {
    "example_id": 134,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "expr = ((1*2) + (3*4) - (5*6) + (7*8)) * (9*0)\nprint(expr)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "scores = [70, 80, 90, 75, 80, 85]\nmean = sum(scores) / len(scores)\nprint(mean)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "percentage = 5\nnumber = 1200\ntotal = percentage / 100 * number\nprint(total)"
  },
  {
    "example_id": 137,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# import math\nimport sympy\nside_1_length, side_2_length = sympy.symbols('side_1_length side_2_length')\nhypotenuse_length = 2\nsum_of_squares = (side_1_length ** 2) + (side_2_length ** 2)\nprint(sum_of_squares)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "492.0"
    ],
    "annotated_answers": [
      "1208.0"
    ],
    "solution": "import math\nperimeter = 62 * 6 + 20 * 6\nprint(perimeter)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import sqrt\n\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n / i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\ndef smallest_prime_factors(n):\n    factors = prime_factors(n)\n    return factors[:5]\n\n\ndef product(numbers):\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n\n\ndef remainder(dividend, divisor):\n    return dividend % divisor\n\n\ndef solution():\n    smallest_prime_factors_list = smallest_prime_factors(42)\n    product_of_smallest_prime_numbers = product(smallest_prime_factors_list)\n    return remainder(product_of_smallest_prime_numbers, 42)\n\n\nprint(solution())"
  },
  {
    "example_id": 140,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.892789260714372"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import log\nx = log(72, 3)\nprint(x)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 5\ny = 3\nz = 7\nx_solution = int(z/y) + x\nprint(x_solution)"
  },
  {
    "example_id": 142,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "longer_piece = 60\nshorter_piece = 60 / 5\nprint(shorter_piece)"
  },
  {
    "example_id": 143,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 10"
  },
  {
    "example_id": 144,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "465.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Solution using list comprehension\ndef row(n):\n    return [i for i in range(1, n+1)]\n\ndef nth_term(n):\n    return sum(row(n))\n\nprint(nth_term(30))"
  },
  {
    "example_id": 145,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "326.5"
    ],
    "annotated_answers": [
      "326.5"
    ],
    "solution": "print(313.9 + 12.6)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((100/101)**(-3)*(100/101)**3)"
  },
  {
    "example_id": 147,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((1 + 2*3*4*5)/11)"
  },
  {
    "example_id": 148,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "tree_height = 120 / 2\nprint(tree_height)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25000000.0",
      "25000000.0"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "# using Python's built-in function\nprint(sum(i for i in range(10000) if str(i)[::-1][0] in '13579'))\n\n# using sympy\nfrom sympy import Symbol\nn = Symbol('n', integer=True, positive=True)\nprint(sum(n for n in range(10000) if n%2!= 0))"
  },
  {
    "example_id": 150,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "def is_prime(n):\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef least_perfect_square(n):\n    for i in range(1, n + 1):\n        if is_prime(i) and is_prime(i + 1) and is_prime(i + 2):\n            return i ** 2\n\nprint(least_perfect_square(1000000))"
  },
  {
    "example_id": 151,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2097154.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "hypatia = 1\neuclid = 1\npythagoras = 2\nptolemy = -2\nfinal_numbers = [hypatia ** 20, euclid ** 20, pythagoras ** 20, ptolemy ** 20]\nprint(sum(final_numbers))"
  },
  {
    "example_id": 152,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5000.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def count_up_down(n):\n    return [x for x in range(1, n+1)] + [x for x in range(n, 0, -1)]\n\nprint(count_up_down(5000)[4999])"
  },
  {
    "example_id": 153,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "num_apples, num_groups = 36, 4\nnum_apples_amy, num_apples_betty, num_apples_cathy, num_apples_daisy = num_apples // num_groups, num_apples // num_groups, num_apples // num_groups, num_apples // num_groups\nprint(num_apples_betty + num_apples_cathy)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "36.0",
      "2.0",
      "5.0",
      "18.0",
      "5.0",
      "18.0",
      "5.0",
      "36.0",
      "2.0",
      "0.5"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "from sympy import sin, cos, pi\nx = (sin(13*pi/18)*cos(5*pi/36)**2 + sin(13*pi/18)*sin(5*pi/36)**2)**0.5\nprint(x)"
  },
  {
    "example_id": 155,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.398193359375"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(pow(8/9, -4) - 17)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "side_length = 6\narea = (side_length ** 2) / 2\nprint(area)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "from sympy import primefactors\nprint(max(primefactors(1391)))"
  },
  {
    "example_id": 158,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "p = 8\nq = 48\nb = (p + q) / 2\nc = (b + q) / 2\nd = (c + p) / 2\nprint(d)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "degrees = 180 - 90\nprint(degrees)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "# Find all the positive multiples of 13\nmultiples = []\nfor i in range(1, 1000):\n    if i % 13 == 0:\n        multiples.append(i)\nprint(len(multiples))"
  },
  {
    "example_id": 161,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "original_price = 60\ndiscount = 0.25\ndiscounted_price = original_price * (1 - discount)\nprint(discounted_price)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_emirp(n):\n    if n < 10:\n        return False\n    if is_prime(n) and is_prime(int(str(n)[::-1])):\n        return True\n    return False\n\ndef smallest_non_emirp():\n    for i in range(10, 100):\n        if not is_emirp(i):\n            return i\n\nprint(smallest_non_emirp())"
  },
  {
    "example_id": 163,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6.0",
      "6.0",
      "6.0",
      "6.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "girls_mileage = [3]\nboys_mileage = [5]\ngirls_mileage.extend([6] * 4)\nboys_mileage.extend([5] * 4)\ntotal_mileage = girls_mileage + boys_mileage\nnew_javelins = [girl_mileage > boy_mileage for girl_mileage, boy_mileage in zip(girls_mileage, boys_mileage)]\nprint(total_mileage)\nprint(new_javelins)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "# Define a function that takes in a number and returns True if it is a composite number and False otherwise\ndef is_composite(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define a function that takes in two numbers and returns the sum of all composite numbers between them\ndef get_composite_sum(start, end):\n    sum = 0\n    for i in range(start, end + 1):\n        if is_composite(i):\n            sum += i\n    return sum\n\n# Test the function\nprint(get_composite_sum(10, 20))"
  },
  {
    "example_id": 165,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.99999999999999"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "from math import sqrt\nprint((sqrt(6) + sqrt(24)) ** 2)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "print((4*12)-(4+12))"
  },
  {
    "example_id": 167,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "number_of_players = 12\nnumber_of_games_per_player = 3\nnumber_of_games_played = number_of_players * number_of_games_per_player\nprint(number_of_games_played)"
  },
  {
    "example_id": 168,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "number = 22\nresult = number / 2\nprint(result)"
  },
  {
    "example_id": 169,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "multiple = 12\npositive = 0\nnegative = 0\nfor i in range(1, multiple + 1):\n    if multiple % i == 0:\n        if i > 0:\n            positive += 1\n        else:\n            negative += 1\nprint(positive, negative)"
  },
  {
    "example_id": 170,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import ceil\nx = ceil((-2-4)/3)\nprint(x)"
  },
  {
    "example_id": 171,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "for i in range(1, 10000):\n    if i % 16 == 0 and i % 15 == 0 and i % 12 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 172,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# 2 is the smallest prime number\n# 3 is the second smallest prime number\n# 2 * 3 = 6\n# 6 is the product of the two smallest 3-digit prime numbers\nn = 6\nsum_of_digits = sum(map(int, str(n)))\nprint(sum_of_digits)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import math\na, b, c, d, e = 40, 30, 20, 0, 0\nc = (b + d)/2\nprint(c)"
  },
  {
    "example_id": 174,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "0.0",
      "0.0",
      "2.0",
      "1.0",
      "0.0",
      "2.0",
      "0.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import pi\nfrom sympy.geometry import Point, Polygon\n\na = 1\nb = 1\nc = 1\n\np1 = Point(0, 0)\np2 = Point(a, 0)\np3 = Point(0, b)\np4 = Point(a, b)\n\np5 = Point(c, 0)\np6 = Point(a + c, 0)\np7 = Point(c, b)\np8 = Point(a + c, b)\n\np9 = Point(0, b + c)\np10 = Point(a, b + c)\np11 = Point(a + c, b + c)\n\npoly1 = Polygon(p1, p2, p3, p4)\npoly2 = Polygon(p5, p6, p7, p8)\npoly3 = Polygon(p9, p10, p11, p2)\n\ntriangles = poly1 + poly2 + poly3\n\nprint(triangles)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# In Python 2.7.x, the division is not an integer division\n# We need to use the built-in function `divmod`\n# or the library `gmpy2` for integer division\nfrom __future__ import division\nfrom math import log10\n\n# Calculate the number of zeroes\nn = divmod(10**5*10**77, 10**15)[1]\nn += 4 * divmod(10**15, 10**15)[1]\nprint(n)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 1/2\nprint(x)"
  },
  {
    "example_id": 177,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "352.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "distance = 5280\nspeed = 15\ntime = distance / speed\nprint(time)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "83.0"
    ],
    "solution": "# x = 3x - 9\n# half_value = x + 37\n# 2 * half_value = 2 * (x + 37)\n# 2x + 74 = x + 37\n# 197 = 37\n# x = 150"
  },
  {
    "example_id": 179,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.53333333333333"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "perimeter = 68\ndiagonal = 30\n# Area = perimeter^2 / (4 \\* base)\narea = perimeter**2 / (4 * diagonal)\nprint(area)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = 150 - 90\nprint(x)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "woman_height = 6\nshadow_height = 9\nflagpole_height = 20\nflagpole_length = flagpole_height - woman_height\nprint(flagpole_length)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "rope_1 = 18\nrope_2 = 24\npiece_length = (rope_1 + rope_2) // 2\nprint(piece_length)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "import sympy as sym\n\ndef area_triangle(a, b, c):\n    s = (a + b + c) / 2\n    return sym.sqrt(s * (s - a) * (s - b) * (s - c))\n\na, b, c = sym.symbols('a b c')\nprint(area_triangle(a, b, c))"
  },
  {
    "example_id": 184,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3400.0"
    ],
    "solution": "x = 2000"
  },
  {
    "example_id": 185,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.25"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "picture_width, picture_height = 5, 7\nborder_width = 0.5\narea = (picture_width + border_width) * (picture_height + border_width)\nprint(area)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\nprint(math.pow(36, 10) / math.pow(6, 19))"
  },
  {
    "example_id": 187,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20202.0"
    ],
    "annotated_answers": [
      "89898.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef is_divisible_by(n, d):\n    return n % d == 0\n\ndef largest_five_digit_palindrome_divisible_by_6():\n    for i in range(10000, 100000):\n        if is_palindrome(i) and is_divisible_by(i, 6):\n            return i\n    return None\n\nprint(largest_five_digit_palindrome_divisible_by_6())"
  },
  {
    "example_id": 188,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "power = 2\nbase = 8.21\nresult = 10**power\nprint(result)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "n = 30\nscore_80 = 20\nscore_90 = 8\nscore_100 = 2\ntotal_score = score_80 * 80 + score_90 * 90 + score_100 * 100\naverage = total_score / n\nprint(average)"
  },
  {
    "example_id": 190,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "85.0",
      "30.0",
      "2.0",
      "30.0",
      "85.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "import sympy\nA, B, C = sympy.symbols('A, B, C')\n\nray_BA = 85\nray_BC = 30\n\nangle_ABC = sympy.acos((sympy.cos(ray_BA) + sympy.cos(ray_BC) - sympy.cos(A)) / (2 * sympy.sin(ray_BA) * sympy.sin(ray_BC)))\n\nprint(angle_ABC)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "# Using the formula: 12! / (12 - 1)!\nfrom math import factorial\n\n# The number of ways to enter and leave the building\n# by one door is equal to 12! / 11!\nprint(factorial(12) // factorial(11))"
  },
  {
    "example_id": 192,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "cookie_dough, cookie_dough_per_cookie = 3/2, 1/16\ntotal_cookies = cookie_dough / cookie_dough_per_cookie\nprint(total_cookies)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "angle_ACB = 360 / (36 + 24) * 36\nprint(angle_ACB)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.39999999999999997"
    ],
    "annotated_answers": [
      "0.4"
    ],
    "solution": "print(2.4/6)"
  },
  {
    "example_id": 195,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 4**2 + 4\nprint(x)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "games_lost = 12\npercentage_won = 0.25\ngames_won = games_lost * (1 - percentage_won)\nprint(games_won)"
  },
  {
    "example_id": 197,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "t = 9.6 / 1.2\nprint(t)"
  },
  {
    "example_id": 198,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "628.0"
    ],
    "solution": "import math\nn = 200*math.pi\ni = 1\nwhile i < n:\n    if i % 1 == 0:\n        print(i)\n    i += 1"
  },
  {
    "example_id": 199,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(6*3)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "colors = 8\nshirts = 1\nties = 1\noutfits = colors * shirts * ties\nprint(outfits)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "116.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "num_male_under_35 = 53\nnum_female_under_35 = 8\nnum_male_between_35_44 = 155\nnum_female_between_35_44 = 17\nnum_male_between_45_54 = 145\nnum_female_between_45_54 = 10\nnum_male_over_54 = 98\nnum_female_over_54 = 2\ntotal_male = num_male_under_35 + num_male_between_35_44 + num_male_between_45_54 + num_male_over_54\ntotal_female = num_female_under_35 + num_female_between_35_44 + num_female_between_45_54 + num_female_over_54\ntotal = total_male + total_female\nnum_male_45_54 = num_male_between_45_54\nnum_male_45_54_degrees = (num_male_45_54 / total_male) * 360\nprint(round(num_male_45_54_degrees))"
  },
  {
    "example_id": 202,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "peru_cost, brazil_cost, france_cost, spain_cost = 4, 6, 6, 5\nperu_stamps, brazil_stamps, france_stamps, spain_stamps = 3, 5, 4, 13\nperu_stamps_80s, brazil_stamps_80s, france_stamps_80s, spain_stamps_80s = 8, 15, 12, 10\nprint(peru_stamps_80s + brazil_stamps_80s + france_stamps_80s + spain_stamps_80s)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1221.0",
      "1551.0",
      "1881.0",
      "2112.0",
      "2442.0",
      "2772.0",
      "3003.0",
      "3333.0",
      "3663.0",
      "3993.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "# palindrome number\nn = 1000\nwhile n < 10000:\n    if str(n) == str(n)[::-1] and n % 3 == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 204,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "cupcakes_sold = 24\nchocolate_cupcakes = cupcakes_sold // 2\nraisin_cupcakes = cupcakes_sold // 3\nchocolate_chip_cupcakes = cupcakes_sold // 4\nnut_cupcakes = cupcakes_sold // 6\nlargest_possible_cupcakes = cupcakes_sold - chocolate_cupcakes - raisin_cupcakes - chocolate_chip_cupcakes - nut_cupcakes\nprint(largest_possible_cupcakes)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "def count_3_digits(n):\n    digits = [int(digit) for digit in str(n)]\n    count = 0\n    for digit in digits:\n        if digit == 3:\n            count += 1\n    return count\n\ncount = 0\nfor n in range(100, 500):\n    if count_3_digits(n) >= 2:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "import math\nside_length = math.sqrt(20*20 + 15*15)\narea = 4*side_length\nprint(area)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "a = 10\nb = 15\nc = 24\nroot = a * b * c\nroot_square = root ** 0.5\nprint(root_square)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = int(6 - 9)\nprint(x)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "import math\n\ndef largest_angle(x):\n    return 6*x\n\nprint(largest_angle(1))"
  },
  {
    "example_id": 210,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# Write your solution here\nfrom math import floor\n\ndef multiples_of_7(n):\n    multiples = []\n    for i in range(1, n + 1):\n        if i % 7 == 0:\n            multiples.append(i)\n    return multiples\n\nprint(len(multiples_of_7(150)))"
  },
  {
    "example_id": 211,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\nprint(divisors(7))"
  },
  {
    "example_id": 212,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import numpy as np\ndata = [6, 8, 9, 11, 16]\nprint(np.mean(data))"
  },
  {
    "example_id": 213,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# O'Hara triples have the form (a, b, sqrt(a) + sqrt(b))\n# In this case, a = 9 and sqrt(a) + sqrt(b) = 5\na = 9\nprint(a)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "143.5"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "tallest_height = 858\nshortest_height = 625\nmean_height = (tallest_height + shortest_height) / 2\nnew_height = 885\nincrease = new_height - mean_height\nprint(increase)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "side_length = 2 + 21/2\nprint(side_length)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "def count_ways(board_size):\n    ways = 0\n    for row in range(board_size):\n        for col in range(board_size):\n            if row == col:\n                ways += 1\n    return ways\n\nprint(count_ways(8))"
  },
  {
    "example_id": 217,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Parties\npoliticians = 4\nlawyers = 3\n\n# Handshakes\nhandshakes = politicians * (politicians - 1) + lawyers * (politicians - 1)\n\nprint(handshakes)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "260.0"
    ],
    "annotated_answers": [
      "980.0"
    ],
    "solution": "pounds = 1\npence = 5\n\nfarthings = pounds * 240 + pence * 4\n\nprint(farthings)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "AC = 32\nprint(AC)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Toolbox\nfrom math import factorial\n\n# Solution\ndef diagonals(n):\n    return factorial(n) // (factorial(n-2) * 2)\n\nprint(diagonals(6))"
  },
  {
    "example_id": 221,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\nwhile 3*x > 2*x + 1:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(6 + 8/2)"
  },
  {
    "example_id": 223,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "class_size = 20\nwhile class_size <= 28:\n    class_size += 1\n    if class_size % 2 == 0:\n        students_in_line = class_size // 2\n        students_in_class = students_in_line * 2\n        print(students_in_class)\n        break\n    else:\n        students_in_line = (class_size // 2) + 1\n        students_in_class = students_in_line * 2\n        print(students_in_class)\n        break"
  },
  {
    "example_id": 224,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "a = 76\nb = -4 * 8 - 2\nc = 13\nprint(a + b + c)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-300.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "width, length = 300, 400\ndiagonal = width + length\njim_walk = diagonal - width\nmartha_walk = width + length\nprint(jim_walk - martha_walk)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "actual_distance = 120\ninches_per_mile = 20\ninches_between_cities = actual_distance / inches_per_mile\nprint(inches_between_cities)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(round(15.49999999))"
  },
  {
    "example_id": 228,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73.27390254512592"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "import math\narea = 2 * math.pi * 2 * math.sqrt(5 * 5 + 3 * 3)\nprint(area)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5321.0"
    ],
    "annotated_answers": [
      "5321.0"
    ],
    "solution": "x = -5321**0.5\nprint(x**2)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# radius = length / 2\nradius = 60 / 2\nprint(radius)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73.0",
      "146.0",
      "219.0",
      "292.0",
      "365.0",
      "438.0",
      "511.0",
      "584.0",
      "657.0",
      "730.0",
      "803.0",
      "876.0",
      "949.0"
    ],
    "annotated_answers": [
      "949.0"
    ],
    "solution": "for i in range(73, 1000, 73):\n    print(i)"
  },
  {
    "example_id": 232,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "compact_discs = 77\nboxes = 77 // 12\nprint(boxes)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "lst = [8, 12, 16, 20, 24]\nprint(sum(lst) / len(lst))"
  },
  {
    "example_id": 234,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.4000000000000004"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "commission = 0.05\ntotal_cost = 60\ndiscount = 0.2\ndiscounted_price = total_cost * (1 - discount)\ncommission_amount = commission * discounted_price\nprint(commission_amount)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "full_height = 6\nhead_height = full_height / 8\nprint(head_height)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0",
      "27.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "math_A, history_A, both_A = 15, 8, 3\ntotal_students = 35\nnot_A_math, not_A_history = total_students - math_A, total_students - history_A\nprint(not_A_math, not_A_history)"
  },
  {
    "example_id": 237,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "3024.0"
    ],
    "solution": "# P(9, 4)\nfrom math import factorial\nprint(factorial(9) // factorial(4) // factorial(5))"
  },
  {
    "example_id": 238,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(5**5//5**4-5**3+5**2*5**1)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import itertools\n\nfor blue_pairs in itertools.combinations(range(1, 7), 2):\n    if blue_pairs[0] * blue_pairs[1]!= 6:\n        print(blue_pairs)"
  },
  {
    "example_id": 240,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.2"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "original_number = (21 + (5 * 21)) / 5\nprint(original_number)"
  },
  {
    "example_id": 241,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "inches_in_yard = 36\ninches = 2/6 * inches_in_yard\nprint(inches)"
  },
  {
    "example_id": 242,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-34.0",
      "-17.0",
      "0.0",
      "17.0",
      "34.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\nmultiples = [i for i in range(-50, 51) if i % 17 == 0]\nprint(multiples)"
  },
  {
    "example_id": 243,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "# Solution 1:\nx = 50\nx = 2*x - 4*x + 6*x - 8*x + 9*x - 10*x\nx = 0\nprint(x)\n\n# Solution 2:\nx = 50\nx = x - 2*x + 3*x - 4*x + 5*x - 6*x + 7*x - 8*x + 9*x - 10*x\nx = 0\nprint(x)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "students = 30 + 50\nprint(students)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "red = 12\nfour_door = 15\ntwo_door_white = 4\ntotal = 20\nfour_door_red = red - two_door_white\nprint(four_door_red)"
  },
  {
    "example_id": 246,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.14285714285714285"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(1/7)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "import sympy\n\neq = sympy.sympify('1 + 2 + 3 - 4 + 5 + 6')\nprint(eq)"
  },
  {
    "example_id": 248,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "147.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "C = 21 * 7\nprint(C)"
  },
  {
    "example_id": 249,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.777777777777778"
    ],
    "annotated_answers": [
      "7.78"
    ],
    "solution": "amount_of_fudge = 7/9\nunit_price = 10\ntotal_cost = amount_of_fudge * unit_price\nprint(total_cost)"
  },
  {
    "example_id": 250,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "a = 19\nb = 32\nsum = a + b\nprint(sum)"
  },
  {
    "example_id": 251,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-16.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "print(-144 // 9)"
  },
  {
    "example_id": 252,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n_pie = 12\nn_chocolate = 3\nn_marshmallows = 3\nn_cayenne = 3\nn_salted_soy_nuts = 3\nn_pie = n_pie - n_chocolate - n_marshmallows - n_cayenne - n_salted_soy_nuts\nprint(n_pie)"
  },
  {
    "example_id": 253,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "# Find two divisors of 80\nfor a in range(1, 40):\n    if 80 % a == 0:\n        b = 80 // a\n        print(a * b)\n        break"
  },
  {
    "example_id": 254,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1260.0"
    ],
    "annotated_answers": [
      "1260.0"
    ],
    "solution": "import math\nprint(math.sqrt(3*6*10*15*21*28))"
  },
  {
    "example_id": 255,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "area_A = 40\narea_B = 25\narea_C = 30\narea_D = area_A + area_B - area_C\nprint(area_D)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.75"
    ],
    "annotated_answers": [
      "16.75"
    ],
    "solution": "print(14.6 + 2.15)"
  },
  {
    "example_id": 257,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "809.0"
    ],
    "annotated_answers": [
      "351.0"
    ],
    "solution": "days_in_year = 365\ndays_to_end_of_2008 = 287\ndays_to_end_of_2016 = 1095\ndays_between_birthdays = 91\ncake_days = days_to_end_of_2016 - days_to_end_of_2008 + 1\ncake_days_in_2008 = days_between_birthdays\ncake_days_in_2009 = days_between_birthdays\ncake_days_in_2010 = days_between_birthdays\ncake_days_in_2011 = days_between_birthdays\ncake_days_in_2012 = days_between_birthdays\ncake_days_in_2013 = days_between_birthdays\ncake_days_in_2014 = days_between_birthdays\ncake_days_in_2015 = days_between_birthdays\ncake_days_in_2016 = days_between_birthdays\nprint(cake_days)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-550.0"
    ],
    "annotated_answers": [
      "550.0"
    ],
    "solution": "miles_driven = 12000\nfuel_efficient_car_miles_per_gallon = 48\nsuv_miles_per_gallon = 15\ngallons_saved = (miles_driven / fuel_efficient_car_miles_per_gallon) - (miles_driven / suv_miles_per_gallon)\nprint(gallons_saved)"
  },
  {
    "example_id": 259,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 0\nwhile N < 10:\n    if (21420 * N) % 6 == 0:\n        print(N)\n    N += 1"
  },
  {
    "example_id": 260,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "max_odd_integer_factor_of_5_factorial = 5\nprint(max_odd_integer_factor_of_5_factorial)"
  },
  {
    "example_id": 261,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\nx, y = 0, 0\nfor x in range(10):\n    for y in range(10):\n        if pow(2, x) * pow(3, y) == 1296:\n            print(x + y)\n            break\n    else:\n        continue\n    break"
  },
  {
    "example_id": 262,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.000346860908775581"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(1/31/93)"
  },
  {
    "example_id": 263,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0",
      "20.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "terms_less_than_or_equal_to_20 = 0\nfor i in range(1, 21):\n    terms_less_than_or_equal_to_20 += 1\n    print(terms_less_than_or_equal_to_20)"
  },
  {
    "example_id": 264,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(315, 108))"
  },
  {
    "example_id": 265,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "ints = [71, 72, 73, 74, 75]\nprint(sum(ints)/len(ints))"
  },
  {
    "example_id": 266,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.303"
    ],
    "annotated_answers": [
      "0.303"
    ],
    "solution": "print(3/10 + 3/1000)"
  },
  {
    "example_id": 267,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "n1 = 20\nn2 = 30\nn3 = 50\navg1 = 30\navg2 = 20\navg3 = (n1 * avg1 + n2 * avg2) / (n1 + n2)\nprint(avg3)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 2 * 3\nprint(x)"
  },
  {
    "example_id": 269,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = (35 - 8) // 13\nprint(x)"
  },
  {
    "example_id": 270,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef get_min_product(primes):\n    min_product = 1000000000\n    for p1 in primes:\n        for p2 in primes:\n            if p1!= p2:\n                product = p1 * p2\n                if product < min_product:\n                    min_product = product\n    return min_product\n\nprimes = get_primes(100)\nmin_product = get_min_product(primes)\nprint(min_product)"
  },
  {
    "example_id": 271,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.333333333333334"
    ],
    "annotated_answers": [
      "3.24"
    ],
    "solution": "from statistics import mean\n\nresults = [14, 5, 9, 7, 7, 8]\n\nprint(mean(results))"
  },
  {
    "example_id": 272,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "from math import factorial\n\ndef choose(n, r):\n    return factorial(n) // (factorial(r) * factorial(n - r))\n\n# n = 8, r = 3\nprint(choose(8, 3))"
  },
  {
    "example_id": 273,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "297.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "integer = 5 * 4\nprint(integer + 277)"
  },
  {
    "example_id": 274,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "rope_length = 15 - 3\nprint(rope_length)"
  },
  {
    "example_id": 275,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.95"
    ],
    "annotated_answers": [
      "4.95"
    ],
    "solution": "list_of_numbers = [4.5, 4.45, 0.45, 0.54]\nprint(max(list_of_numbers) + min(list_of_numbers))"
  },
  {
    "example_id": 276,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "largest_prime_less_than_100 = 97\nlargest_prime_factor = 97\nfor i in range(2, largest_prime_less_than_100):\n    if largest_prime_less_than_100 % i == 0:\n        largest_prime_factor = i\nprint(largest_prime_factor)"
  },
  {
    "example_id": 277,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "median = 12\nmean = (12 + 21 + 6 + 11 + 30)/5\nprint(median + mean)"
  },
  {
    "example_id": 278,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "scores = [92, 73, 79, 87]\nmean = 80\nn = 5\nminimum_score = (mean * n - sum(scores)) / (n - len(scores))\nprint(minimum_score)"
  },
  {
    "example_id": 279,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.4000014000014"
    ],
    "annotated_answers": [
      "1.4"
    ],
    "solution": "print(1/0.714285)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 18\nprint(x)"
  },
  {
    "example_id": 281,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "n_children = 0\nn_adults = 0\nn_female_adults = 0\nn_biological_children = 0\n\n# Adults\nn_adults = 2 * (21 - 1) + 1\nn_adults = int(n_adults / 2)\n\n# Female Adults\nn_female_adults = int(n_adults / 2)\n\n# Biological Children\nn_biological_children = int(n_female_adults / 2)\n\n# Children\nn_children = n_biological_children\n\n# Percentage of children\npercentage_children = n_children / (n_adults + n_children) * 100\nprint(percentage_children)"
  },
  {
    "example_id": 282,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "373.3333333333333"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "dogs_to_cats = 4/3\ntotal = 280\ndogs = total * dogs_to_cats\nprint(dogs)"
  },
  {
    "example_id": 283,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1421.2230337568676"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import math\nradius = 12 * math.pi\narea = radius**2\nprint(area)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "hurricanes_per_year = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85]\nmedian_hurricanes_per_year = sorted(hurricanes_per_year)[9]\nprint(median_hurricanes_per_year)"
  },
  {
    "example_id": 285,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "total_cost = 12\ntip = 15\ntip_percent = (tip / total_cost) * 100\nprint(tip_percent)"
  },
  {
    "example_id": 286,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "candy = 44\nlargest_number_of_kids = candy // 3\nprint(largest_number_of_kids)"
  },
  {
    "example_id": 287,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "import math\nprint(math.sqrt(30*21*70))"
  },
  {
    "example_id": 288,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.666666666666664"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "sides = 170 / 3\nprint(sides)"
  },
  {
    "example_id": 289,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.38025641025641027"
    ],
    "annotated_answers": [
      "0.38"
    ],
    "solution": "lifespan = 75\ncandy_consumption = 1483\nweeks_in_a_year = 52\ncandy_per_week = candy_consumption / (weeks_in_a_year * lifespan)\nprint(candy_per_week)"
  },
  {
    "example_id": 290,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-80.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = -10\nresult = x * 6\nsolution = result - 20\nprint(solution)"
  },
  {
    "example_id": 291,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Find the prime factors of 2400\n# 2400 = 2^5 x 3^3\n# The number of primes is 5 + 3 = 8\nprint(8)"
  },
  {
    "example_id": 292,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "225.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "speed = 2.5\nlength = 1\ntime = 90\ndistance = speed * time\nprint(distance)"
  },
  {
    "example_id": 293,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "import math\nhypotenuse = math.sqrt(8**2 + 15**2)\nperimeter = 8 + 15 + hypotenuse\nprint(perimeter)"
  },
  {
    "example_id": 294,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "x = 12 // (12 + 1)\nprint(x)"
  },
  {
    "example_id": 295,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "rows = 11\nchairs_per_row = 11\nchairs_in_rows = rows * chairs_per_row\nodds_in_rows = (chairs_in_rows + 1) // 2\nprint(odds_in_rows)"
  },
  {
    "example_id": 296,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "from sympy import *\ntheta = 180 - 3*pi/5\nprint(theta)"
  },
  {
    "example_id": 297,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1201.7777777777776"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "width, length = 104 / 3, 104 / 3\nprint(width * length)"
  },
  {
    "example_id": 298,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "# LCM(1, 2, 4, 5, 6, 7) = LCM(1, 2, 4, 5, 6) * 7\nlcm = 420\nprint(lcm)"
  },
  {
    "example_id": 299,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor i in range(10, 100):\n    if i % 10 == 0 and i % 15 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 300,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "import sympy\ntheta = sympy.Symbol('theta')\ns = 5 * theta\nr = sympy.solve(s - theta, theta)[0]\nprint(r)"
  },
  {
    "example_id": 301,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import sqrt\nx, y = sqrt(24)/sqrt(30), sqrt(20)/(3*sqrt(25))\nprint(x/y)"
  },
  {
    "example_id": 302,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 21\nprint(x)"
  },
  {
    "example_id": 303,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# solution\ndef num_distinct_numbers(numbers):\n    numbers_set = set(numbers)\n    return len(numbers_set)\n\nprint(num_distinct_numbers([2, 3, 5, 7]))"
  },
  {
    "example_id": 304,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "french_students = 8\nspanish_students = 12\nboth_languages = 3\ntotal_students = 30\nneither_languages = total_students - (french_students + spanish_students + both_languages)\nprint(neither_languages)"
  },
  {
    "example_id": 305,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "x = 28\nmean = 4.5\ntotal = 0\nfor i in range(8):\n    total += x\nmean = total / 8\nprint(x - mean)"
  },
  {
    "example_id": 306,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = (6 + 22) / 2\nprint(x)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.440892098500626",
      "-16.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 12 / 5 - 3\nprint(5*x + 3)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "distinct_numbers = 3 ** 3\nprint(distinct_numbers)"
  },
  {
    "example_id": 309,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c = 1, 2, 3\nprint((3*a**2*b)/(5*a*c) * (10/6*c)/(a*b))"
  },
  {
    "example_id": 310,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import itertools\n\nbills = ['$5', '$2']\ntotal = '$17'\n\ndef combinations(bills, total):\n    bill_combinations = []\n    for combination in itertools.combinations(bills, 3):\n        if sum(combination) == total:\n            bill_combinations.append(combination)\n    return bill_combinations\n\nbill_combinations = combinations(bills, total)\nprint(len(bill_combinations))"
  },
  {
    "example_id": 311,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\narea = (a*c)/2\nprint(area)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Using math.floor()\nfrom math import floor\nx = floor(7 * 3 / 4)\nprint(x)\n\n# Using math.ceil()\nfrom math import ceil\nx = ceil(7 * 3 / 4)\nprint(x)"
  },
  {
    "example_id": 313,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "ambulance_speed = 40\nambulance_distance = 20\nambulance_time = ambulance_distance / ambulance_speed\n\nhelicopter_speed = 1\nhelicopter_distance = 15\nhelicopter_time = (helicopter_distance / helicopter_speed) + 3 + 3\n\nprint(helicopter_time - ambulance_time)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x)"
  },
  {
    "example_id": 315,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import math\nbase = 6\nheight = 6\narea = (base * height) / 2\nprint(area)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "print(5**3 - (3**2-5)**3)"
  },
  {
    "example_id": 317,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0",
      "45.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# Total number of players\nn = 10\n\n# Number of setters\nm = 4\n\n# Number of spikers\nk = 5\n\n# Total number of two-person teams\ntotal_teams = n * (n - 1) / 2\n\n# Number of two-person teams with no setters\nno_setters = (m - 1) * k\n\n# Number of two-person teams with no spikers\nno_spikers = (n - m) * (k - 1)\n\n# Number of two-person teams with no setters and no spikers\nno_setters_and_no_spikers = (m - 1) * (k - 1)\n\n# Total number of two-person teams with no setters or no spikers\ntotal_teams_with_no_setters_or_no_spikers = no_setters + no_spikers + no_setters_and_no_spikers\n\n# Total number of two-person teams with setters and spikers\ntotal_teams_with_setters_and_spikers = total_teams - total_teams_with_no_setters_or_no_spikers\n\n# Total number of two-person teams with setters\ntotal_teams_with_setters = total_teams_with_setters_and_spikers + total_teams_with_no_setters_or_no_spikers\n\n# Total number of two-person teams with spikers\ntotal_teams_with_spikers = total_teams_with_setters_and_spikers + total_teams_with_no_setters_or_no_spikers\n\nprint(total_teams_with_setters)\nprint(total_teams_with_spikers)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "from math import sqrt\nside_a, side_b = 30, 50\nperimeter = 2 * (side_a + side_b)\nprint(perimeter)"
  },
  {
    "example_id": 319,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "least_distance = 10 - 8\nprint(least_distance)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "smallest = 5 - 4\nprint(smallest)"
  },
  {
    "example_id": 321,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def repeating_decimal(num):\n    num_str = str(num)\n    if '.' in num_str:\n        repeating_digits = [int(digit) for digit in num_str.split('.')[1]]\n    else:\n        repeating_digits = []\n    return len(repeating_digits)\n\nprint(repeating_decimal(31/11111))"
  },
  {
    "example_id": 322,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "70.0",
      "840.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "cats = 2\nalpacas = 5\npandas = 3\ntotal_cats = cats + alpacas\ntotal_pandas = pandas + total_cats\ntotal_alpacas = total_cats + alpacas\ntotal_pandas_coolness = total_pandas * 7\ntotal_alpacas_coolness = total_alpacas * 70\nprint(total_pandas_coolness)\nprint(total_alpacas_coolness)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "n = -10 // 5 - 3\nprint(n)"
  },
  {
    "example_id": 324,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "7.0",
      "1.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "# Solution\n# Step 1: Find the ratio of the measures\n# Step 2: Find the degree measure of the largest angle\n\n# Step 1: Find the ratio of the measures\n# Import math library for the gcd function\nfrom math import gcd\n\n# Find the ratio of the measures\nratio = [3, 5, 7]\n\n# Print the ratio\nprint(ratio)\n\n# Step 2: Find the degree measure of the largest angle\n# Import math library for the gcd function\nfrom math import gcd\n\n# Find the degree measure of the largest angle\nlargest_angle = gcd(ratio[0], ratio[1])\n\n# Print the degree measure of the largest angle\nprint(largest_angle)"
  },
  {
    "example_id": 325,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def is_factor(n, k):\n    return n % k == 0\n\ndef is_multiple(n, k):\n    return n % k == 0 and n // k!= 1\n\ndef factors_of_34(k):\n    return [x for x in range(1, 35) if is_factor(34, x)]\n\ndef multiples_of_7(k):\n    return [x for x in range(1, 35) if is_multiple(7, x)]\n\ndef solution(numbers):\n    factors = factors_of_34(34)\n    multiples = multiples_of_7(7)\n    return len(set(numbers).intersection(factors) | set(numbers).intersection(multiples))\n\nnumbers = [1, 2, 3, 4, 8, 14, 17, 29, 56, 91]\nprint(solution(numbers))"
  },
  {
    "example_id": 326,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "import sympy\ndiagonal1 = sympy.symbols('diagonal1')\ndiagonal2 = sympy.symbols('diagonal2')\nperimeter = 2 * (diagonal1 + diagonal2)\nprint(perimeter)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "supplement = 180 - 50\nprint(supplement)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "500500.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "# use math.factorial\nn = 1000\nprint(n * (n + 1) // 2)"
  },
  {
    "example_id": 329,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8726646259971648"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "import numpy as np\nx = np.radians(50)\nprint(x)"
  },
  {
    "example_id": 330,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "enrico = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63]\nmarie = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]\n\nprint(len(set(enrico) & set(marie)))"
  },
  {
    "example_id": 331,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.769509476031215"
    ],
    "annotated_answers": [
      "735.0"
    ],
    "solution": "import math\n\n# calculate the area of the room\nwidth = 9\nheight = 2\narea = width * height\n\n# calculate the cost of carpet\ncarpet_cost = 21.95\ncarpet_area = area - (2 * 3)\ncarpet_cost_per_yard = carpet_cost / carpet_area\ncarpet_cost_per_square_yard = carpet_cost_per_yard / 10.764\n\n# calculate the cost of padding\npadding_cost = 2.55\npadding_area = 2 * 3\npadding_cost_per_yard = padding_cost / padding_area\npadding_cost_per_square_yard = padding_cost_per_yard / 10.764\n\n# calculate the total cost of carpet and padding\ncarpet_cost_per_square_yard = carpet_cost_per_square_yard + padding_cost_per_square_yard\ncarpet_total_cost = carpet_cost_per_square_yard * area\nprint(carpet_total_cost)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(n):\n    sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            sum += i\n    return sum\n\nprint(sum_of_primes(9))"
  },
  {
    "example_id": 333,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "muffins_in_batch = 60\ncroissants_per_tray = 5\nmin_muffins_in_batch = muffins_in_batch // 6 + croissants_per_tray\nprint(min_muffins_in_batch)"
  },
  {
    "example_id": 334,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "298.0"
    ],
    "solution": "import math\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_perfect_square(n):\n    root = math.sqrt(n)\n    return root == int(root)\n\ndef sum_of_primes(n):\n    sum = 0\n    for i in range(100, 201):\n        if is_prime(i) and is_perfect_square(i + 1):\n            sum += i\n    return sum\n\nprint(sum_of_primes(200))"
  },
  {
    "example_id": 335,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(round(pow(1/23, 1000)))"
  },
  {
    "example_id": 336,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "side = 4 * 9\nprint(side)"
  },
  {
    "example_id": 337,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0",
      "60.0",
      "90.0",
      "120.0",
      "150.0",
      "180.0",
      "210.0",
      "240.0",
      "270.0",
      "300.0",
      "330.0",
      "360.0",
      "390.0",
      "420.0",
      "450.0",
      "480.0",
      "510.0"
    ],
    "annotated_answers": [
      "510.0"
    ],
    "solution": "max_multiple = 520\nfor i in range(30, max_multiple, 30):\n    print(i)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "from scipy.special import comb\nprint(comb(20, 2))"
  },
  {
    "example_id": 339,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "n = 10\nresult = (n*2 + 200)/4 - (n)/2\nprint(result)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# The number of handshakes\nhandshakes = 6 * 6\nprint(handshakes)"
  },
  {
    "example_id": 341,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "fillings = ['turkey', 'ham', 'roast beef', 'cheese', 'tomatoes', 'peppers','sprouts', 'oranges', 'licorice']\n\ndef sandwich(fillings):\n    # calculate the number of sandwiches that can be ordered\n    return len(fillings) ** 2\n\ndef main():\n    # test the function\n    print(sandwich(fillings))\n\nmain()"
  },
  {
    "example_id": 342,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Blake's average is 78\nb_avg = 78\n# Jenny's average is 78 + 10 - 10 + 20 = 98\nj_avg = 78 + 10 - 10 + 20\ndiff = j_avg - b_avg\nprint(diff)"
  },
  {
    "example_id": 343,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "77.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "carolyn, julie, roberta = 77, 77/2, 77/4\nprint(carolyn)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "hockey_players = 33\nbaseball_players = 24\nneither_players = 8\nboth_players = hockey_players + baseball_players - neither_players\nprint(both_players)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "nuts_bought, walnuts_ratio, pecans_ratio, cashews_ratio = 9, 2, 3, 1\nwalnuts_bought = nuts_bought * walnuts_ratio / (pecans_ratio + cashews_ratio)\nprint(walnuts_bought)"
  },
  {
    "example_id": 346,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "hour_angle = 3\nminute_angle = 20\ndegree_measure = hour_angle + minute_angle\nprint(degree_measure)"
  },
  {
    "example_id": 347,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef is_multiple_of_3(n):\n    return n % 3 == 0\n\ncount = 0\nfor n in range(100, 1000):\n    if is_palindrome(n) and is_multiple_of_3(n):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 348,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "quarters_per_foot = 8\nquarters_per_inch = 4\nquarters_per_foot_stack = 12\nquarters_needed = quarters_per_foot_stack * quarters_per_foot\nprint(quarters_needed)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "cats = 24\ncats_without_mouse = 17\ncats_black = 10\ncats_without_mouse_black = 17 - 10\nprint(cats_without_mouse_black)"
  },
  {
    "example_id": 350,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Write a program to solve this problem.\n# Use the math toolbox.\n\nfrom math import floor\n\ndef is_perfect_cube(n):\n    return n**(1/3) == floor(n**(1/3))\n\ndef is_even(n):\n    return n % 2 == 0\n\ndef is_positive(n):\n    return n > 0\n\ndef count_perfect_cubes(n):\n    count = 0\n    for i in range(1, n):\n        if is_perfect_cube(i) and is_even(i) and is_positive(i):\n            count += 1\n    return count\n\nprint(count_perfect_cubes(2008))"
  },
  {
    "example_id": 351,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def is_solution(n):\n    return -3*n + 3 > -11\n\ndef sum_solutions(n):\n    if is_solution(n):\n        return n\n    else:\n        return 0\n\ndef sum_all_solutions():\n    return sum([sum_solutions(n) for n in range(100)])\n\nprint(sum_all_solutions())"
  },
  {
    "example_id": 352,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import gcd\n\ndef find_nth_digit(n):\n    \"\"\"\n    Returns the nth digit to the right of the decimal point of the fraction\n    \"\"\"\n    a, b = 4, 15\n    while n > 0:\n        a, b = b, gcd(a, b)\n        n -= 1\n    return a\n\nprint(find_nth_digit(1000))"
  },
  {
    "example_id": 353,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Write your solution here\nimport math\nimport itertools\n\ndef hug_pair(n, k):\n    \"\"\"\n    Given n and k, return the number of weeks it takes (at a minimum) for every pair of people to hug at least once.\n    \"\"\"\n    # Find the number of weeks it takes for every person to hug at least once\n    weeks = math.ceil(math.log(n, 2))\n    # Find the number of weeks it takes for every pair of people to hug at least once\n    pair_weeks = math.ceil(math.log(k, 2))\n    return max(weeks, pair_weeks)\n\n# Test case 1:\nprint(hug_pair(8, 8))\n# Test case 2:\nprint(hug_pair(9, 9))\n# Test case 3:\nprint(hug_pair(10, 10))\n# Test case 4:\nprint(hug_pair(11, 11))\n# Test case 5:\nprint(hug_pair(12, 12))\n# Test case 6:\nprint(hug_pair(13, 13))\n# Test case 7:\nprint(hug_pair(14, 14))\n# Test case 8:\nprint(hug_pair(15, 15))\n# Test case 9:\nprint(hug_pair(16, 16))\n# Test case 10:\nprint(hug_pair(17, 17))"
  },
  {
    "example_id": 354,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "A = 10 + (10 * 2)\nprint(A)"
  },
  {
    "example_id": 355,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "53.0",
      "71.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import sqrt\n\ndef is_prime(n):\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_digits(n):\n    return sum([int(d) for d in str(n)])\n\nfor i in range(10, 100):\n    if is_prime(i) and sum_digits(i) == 8:\n        print(i)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0",
      "5.0",
      "1.0",
      "7.0",
      "1.0",
      "9.0",
      "1.0",
      "11.0",
      "1.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "# The first five composite numbers\nnumbers = [3, 5, 7, 9, 11]\n\n# Initialize a dictionary to store the least positive integer divisible by each of the first five composite numbers\ndivisible_numbers = {}\n\n# Iterate through the list of numbers\nfor number in numbers:\n    # Initialize a variable to store the least positive integer divisible by the current number\n    divisible_number = 1\n    # Iterate through the numbers from 1 to the current number\n    for i in range(1, number):\n        # If the current number is divisible by the current number, then the least positive integer divisible by the current number is the current number\n        if i % number == 0:\n            divisible_number = number\n            break\n    # Add the least positive integer divisible by the current number to the dictionary\n    divisible_numbers[number] = divisible_number\n\n# Print the dictionary\nprint(divisible_numbers)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "a = 1313\nb = 1001\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\nprint(gcd(a, b))"
  },
  {
    "example_id": 358,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.9999999999999939"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(pow(7/16, 111)*pow(16/7, 111))"
  },
  {
    "example_id": 359,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 13 - 5\nprint(k)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Wallops are equivalent to 6 ballops\n# 6 ballops are equivalent to 3 fallops\n# 11 fallops are equivalent to 3 fallops\n# Therefore, 110 fallops are equivalent to 66 fallops\n# 66 fallops are equivalent to 110 wallops\nprint(110 * 6 / 3)"
  },
  {
    "example_id": 361,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.1"
    ],
    "annotated_answers": [
      "24.1"
    ],
    "solution": "kick_return_averages = [25.0, 24.3, 24.1, 23.8, 23.4]\nmedian = sorted(kick_return_averages)[2]\nprint(median)"
  },
  {
    "example_id": 362,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# 6-inch square tiles\n# 3 feet x 2 feet = 6 square feet\n# 6 square feet / 6 square inches = 1 square\n# 1 square tiles\nprint(1)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "perimeter = 10 + 6 + 4 + 8\nprint(perimeter)"
  },
  {
    "example_id": 364,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 0\nwhile x**2 < 200:\n    x += 6\nprint(x)"
  },
  {
    "example_id": 365,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.05238095238095239"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "k_dist = 9\nk_speed = 42\nb_dist = 12\nb_speed = 45\nk_time = k_dist / k_speed\nb_time = b_dist / b_speed\ntime_diff = b_time - k_time\nprint(time_diff)"
  },
  {
    "example_id": 366,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.1213203435596424"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import math\nh = math.sqrt(27/6)\nprint(h)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "162.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "count = 0\nfor i in range(99, 1000):\n    if str(i).count('0') == 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 368,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "chocolate_chips_per_cookie = 8\nnumber_of_cookies = 15\ntotal_cups_of_chocolate_chips = number_of_cookies * chocolate_chips_per_cookie\nprint(total_cups_of_chocolate_chips)"
  },
  {
    "example_id": 369,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1020.0"
    ],
    "annotated_answers": [
      "1020.0"
    ],
    "solution": "from math import lcm\nprint(lcm(51, 68, 85))"
  },
  {
    "example_id": 370,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0",
      "11.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "x = 1\nprint(3*x + 2*(1 + x) - 17)\nprint(6*x + 5)"
  },
  {
    "example_id": 371,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2006.0"
    ],
    "annotated_answers": [
      "2013.0"
    ],
    "solution": "year = 2006\nwhile year % 2!= 0:\n    year += 1\nprint(year)"
  },
  {
    "example_id": 372,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.28122915435089",
      "-54.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(pow(4/8, 55) * pow(8/37, 55))"
  },
  {
    "example_id": 373,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.28867513459481287"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import math\nx = 1/2 * math.tan(math.radians(30))\nprint(x)"
  },
  {
    "example_id": 374,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "side_length = 4\narea = 1\ntiles_needed = area / side_length\nprint(int(tiles_needed))"
  },
  {
    "example_id": 375,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "360.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "# number of times in a 24-hour period that the two computers back up data at the same time\n# = number of times in a 24-hour period that the two computers back up data at different times\n# = total number of 5-minute intervals in a 24-hour period - total number of 2-minute intervals in a 24-hour period\n# = 480 - 120 = 360\nprint(360)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "x = 2**20 + 2**20 + 2**20 + 2**21\ny = 2**17\nprint(x//y)"
  },
  {
    "example_id": 377,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "cherry_danishes = 3\ncheese_danishes = 2\ntotal_danishes = cherry_danishes + cheese_danishes\nprint(total_danishes)"
  },
  {
    "example_id": 378,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1500.0"
    ],
    "solution": "x = 500"
  },
  {
    "example_id": 379,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "height = 10\nrate = 2\ntime = 25\nheight += rate * time\nprint(height)"
  },
  {
    "example_id": 380,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "num_teams = 4\nnum_groups = 8\nnum_matches = num_groups * num_teams * (num_teams - 1) / 2\nprint(num_matches)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2001.0",
      "2002.0",
      "2003.0",
      "2004.0",
      "2005.0",
      "2006.0",
      "2007.0",
      "2008.0",
      "2009.0",
      "2010.0"
    ],
    "annotated_answers": [
      "5999.0"
    ],
    "solution": "for i in range(2001, 8000):\n    if len(str(i)) == 4:\n        print(i)"
  },
  {
    "example_id": 382,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "8.0",
      "8.0",
      "4.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "# Area of original garden\narea = 2 * 2\nprint(area)\n\n# Perimeter of original garden\nperimeter = 2 * (2 * 2)\nprint(perimeter)\n\n# Perimeter of square\nperimeter_new = 4 * 2\nprint(perimeter_new)\n\n# Area of square\narea_new = 2 * 2\nprint(area_new)"
  },
  {
    "example_id": 383,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "784.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "perimeter = 28\narea = perimeter ** 2\nprint(area)"
  },
  {
    "example_id": 384,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "168.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "x = 14*3*4\nprint(x)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "from math import gcd\nprint(gcd(6**3, 3**6))"
  },
  {
    "example_id": 386,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1 ** (2 ** 235423523))"
  },
  {
    "example_id": 387,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "number = 9\nif number % 12 == 0:\n    print(\"Alina's number is 12\")\nelse:\n    print(\"Joe's number is 12\")"
  },
  {
    "example_id": 388,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "total_cars = 30\nred_cars = 1/3 * total_cars\nfour_door_cars = 0.5 * total_cars\ntwo_door_white_cars = 8\nfour_door_red_cars = four_door_cars * red_cars / total_cars\nprint(four_door_red_cars)"
  },
  {
    "example_id": 389,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "import math\narea = 12 * 9\nprint(area)"
  },
  {
    "example_id": 390,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1056.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "from math import gcd, lcm\n\ndef lcm_gcf(a, b):\n    return lcm(a, b) * gcd(a, b)\n\nprint(lcm_gcf(22, 48))"
  },
  {
    "example_id": 391,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.554054054054053"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "A1 = 25\nA2 = 49\nA3 = A1 * A2 / (A1 + A2)\nprint(A3)"
  },
  {
    "example_id": 392,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "136.0",
      "64.0",
      "11.0",
      "64.0",
      "29.0",
      "64.0",
      "524.0",
      "64.0",
      "11.0",
      "64.0",
      "19.0",
      "64.0",
      "29.0",
      "64.0",
      "41.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "import numpy as np\n\ncounty_list = ['Aiken', 'Bamberg', 'Barnwell', 'Berkeley', 'Calhoun', 'Cherokee', 'Chesterfield', 'Colleton']\n\ncounty_2001 = [124, 17, 25, 583, 15, 19, 46, 64]\ncounty_2002 = [141, 15, 22, 557, 12, 13, 18, 18]\ncounty_2003 = [130, 14, 26, 554, 10, 18, 22, 52]\ncounty_2004 = [143, 14, 28, 553, 18, 13, 22, 46]\ncounty_2005 = [136, 11, 29, 524, 11, 19, 29, 41]\n\nmedian_2005 = [np.median(county_2005[i]) for i in range(len(county_list))]\n\nprint(median_2005)"
  },
  {
    "example_id": 393,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "capacity = 1100\ncurrent_enrollment = 980\nincrease_rate = 0.05\nyear = 0\nwhile True:\n    year += 1\n    new_enrollment = current_enrollment + current_enrollment * increase_rate\n    if new_enrollment > capacity:\n        print(year)\n        break\n    current_enrollment = new_enrollment"
  },
  {
    "example_id": 394,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.17294900221728"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "amount_of_money = 300\nhalf_of_money = amount_of_money / 2\npounds = half_of_money / 1.64\neuros = half_of_money / 1.32\nprint(euros - pounds)"
  },
  {
    "example_id": 395,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.8"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "total_points = 99\npoints_from_final = 90\nnum_tests = 6\npoints_from_tests = (total_points - points_from_final) / (num_tests - 1)\nprint(points_from_tests)"
  },
  {
    "example_id": 396,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "87.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "gestation_period = 609\nweeks = gestation_period / 7\nprint(weeks)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-34.0"
    ],
    "annotated_answers": [
      "-49.0"
    ],
    "solution": "x = 2*34 - 3*34\nprint(x)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "x = (1421 // 7 + 47) // 50 * 9\nprint(x)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0",
      "34.0",
      "43.0",
      "62.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "for num in range(10, 100):\n    tens = num // 10\n    ones = num % 10\n    if tens * ones == 12:\n        print(num)"
  },
  {
    "example_id": 400,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "biology = 18\nspanish = 13\nboth = 5\ntotal = biology + spanish + both\nprint(total)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0",
      "38.0",
      "39.0",
      "40.0",
      "41.0",
      "42.0",
      "43.0",
      "44.0",
      "45.0",
      "46.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 37\nwhile n < 100:\n    if (42789 * n) % 3 == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 402,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "85.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "numbers = list(range(-36, 49))\nprint(len(numbers))"
  },
  {
    "example_id": 403,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.653097563788805"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import math\n\nbase = 25\nheight = 14\n\naltitude = math.sqrt(base**2 + height**2)\n\nprint(altitude)"
  },
  {
    "example_id": 404,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "648.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# Complete Mr. Potato Head personality includes eyebrows, eyes, ears, lips, shoes and optionally hair\n# Mr. Potato Head can be bald\nn_hairstyles = 3\nn_eyebrows = 2\nn_eyes = 1\nn_ears = 2\nn_lips = 2\nn_shoes = 2\nn_hair = 1\n\n# Number of ways to choose one eyebrow\nn_eyebrow_choices = n_eyebrows + n_hair\n# Number of ways to choose one eye\nn_eye_choices = n_eyes + 1\n# Number of ways to choose one ear\nn_ear_choices = n_ears + 1\n# Number of ways to choose one lip\nn_lip_choices = n_lips + 1\n# Number of ways to choose one shoe\nn_shoe_choices = n_shoes + 1\n\n# Number of ways to choose one hairstyle\nn_hairstyle_choices = n_hairstyles + 1\n\n# Number of ways to choose one complete personality\nn_complete_personalities = n_eyebrow_choices * n_eye_choices * n_ear_choices * n_lip_choices * n_shoe_choices * n_hairstyle_choices\n\nprint(n_complete_personalities)"
  },
  {
    "example_id": 405,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.5999999999999996"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 12\npercent = 0.3\nresult = x * percent\nprint(result)"
  },
  {
    "example_id": 406,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# number of students in Math Club\nmath_club_students = 0.3 * 15\nprint(math_club_students)"
  },
  {
    "example_id": 407,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "max_steps = 10\ndad_steps = 30\ntotal_steps = 3 * dad_steps\nmax_steps_to_walk_same_hall = total_steps - max_steps\nprint(max_steps_to_walk_same_hall)"
  },
  {
    "example_id": 408,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(8//2//2 + 6)"
  },
  {
    "example_id": 409,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.59797974644666"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\na, m, b, c, n, d = 0, 4, 8, 8, 6, -5\narea_abcd = 40\narea_mbcd = math.sqrt(area_abcd**2 - (m-b)**2)\narea_mbcn = math.sqrt(area_mbcd**2 - (m-c)**2)\nprint(area_mbcn)"
  },
  {
    "example_id": 410,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "import math\nA = 39\nB = 14\nC = 90 - A - B\nprint(C)"
  },
  {
    "example_id": 411,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, b, c = 317, 8, 2\nprint(a ** 3 + b ** 3 - (c ** (3 ** 2) + a ** 3))"
  },
  {
    "example_id": 412,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "square = 15\nsquare_of_square = 225\nprint(square_of_square ** 0.5)"
  },
  {
    "example_id": 413,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "n_items = 10\nn_combinations = n_items * (n_items - 1) / 2\nprint(n_combinations)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97969.0"
    ],
    "annotated_answers": [
      "97969.0"
    ],
    "solution": "print((97969 ** 0.5) ** 2)"
  },
  {
    "example_id": 415,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "891.0"
    ],
    "annotated_answers": [
      "891.0"
    ],
    "solution": "x = 11 * (1000 // 11 + 1)\ny = 11 * (11**2 // 11 - 1)\nprint(x - y)"
  },
  {
    "example_id": 416,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "98.4"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "scores = [100, 100, 99, 98, 95]\nm = sum(scores) / len(scores)\nprint(m)"
  },
  {
    "example_id": 417,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\nside_length = 16\nperimeter = 8 * side_length\nn_sides = 8\nside_length = perimeter / n_sides\nprint(side_length)"
  },
  {
    "example_id": 418,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "260.0"
    ],
    "annotated_answers": [
      "260.0"
    ],
    "solution": "# There are 26 uppercase letters and 10 digits.\n# Hence, there are 26 * 10 = 260 possible license plates.\nprint(260)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "979.0"
    ],
    "annotated_answers": [
      "291.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef get_prime_factorization(n):\n    factors = []\n    for i in get_prime_factors(n):\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        factors.append((i, count))\n    return factors\n\ndef get_product_of_prime_factors(n):\n    product = 1\n    for i, count in get_prime_factorization(n):\n        product *= i ** count\n    return product\n\ndef solve():\n    for i in range(10, 100):\n        if is_prime(i):\n            for j in range(10, 100):\n                if is_prime(j) and i + j == 100:\n                    return get_product_of_prime_factors(i) * get_product_of_prime_factors(j)\n\nprint(solve())"
  },
  {
    "example_id": 420,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Let's call the smaller number x\n# The sum of the two numbers is 15, so x + y = 15\n# Four times the smaller number is 60 less than twice the larger number, so 4x = 60 - 2y\n# Solving the system of equations:\n# 4x = 60 - 2y\n# x + y = 15\n# We get:\n# x = 5\n# y = 10\nprint(5 + 10)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "bill_time = 400 / 50\nsam_time = 400 / 40\nprint(sam_time - bill_time)"
  },
  {
    "example_id": 422,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.25"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nradius = 8\ndiameter = 16\narea = math.pi * radius**2\ndecrease = 48*math.pi\nnew_radius = radius - (decrease/area)\nprint(new_radius)"
  },
  {
    "example_id": 423,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "length_AB = 2 + 3 + 2\nprint(length_AB)"
  },
  {
    "example_id": 424,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "n = 18\nwhile n % 42!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 425,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = -1\nprint(x)"
  },
  {
    "example_id": 426,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Use the formula for the area of a right triangle\n# A = (base * height) / 2\nbase = 12\nheight = 20\narea = (base * height) / 2\nprint(area)"
  },
  {
    "example_id": 427,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# Combinations\nfrom scipy.special import comb\nnum_people = 3\nnum_offices = 5\nnum_assignments = comb(num_people, num_offices, exact=True)\nprint(num_assignments)"
  },
  {
    "example_id": 428,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.6"
    ],
    "annotated_answers": [
      "0.6"
    ],
    "solution": "print(round(4/7, 1))"
  },
  {
    "example_id": 429,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\nn = 20\nfactors = sympy.factorint(sympy.factorial(n))\nprint(len(factors))"
  },
  {
    "example_id": 430,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3720.0"
    ],
    "annotated_answers": [
      "3720.0"
    ],
    "solution": "print(3.72 * 1000)"
  },
  {
    "example_id": 431,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 100\nwhile True:\n    for i in range(2, 10):\n        if n % i == 0:\n            n //= i\n            break\n    else:\n        print(n)\n        break"
  },
  {
    "example_id": 432,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "green_marbles, blue_marbles = 60, 60/3\nprint(blue_marbles)"
  },
  {
    "example_id": 433,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.47654656"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 3.0784\nprint(x**2)"
  },
  {
    "example_id": 434,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "frogs_in_pond = 45 + 40 - 10\nprint(frogs_in_pond)"
  },
  {
    "example_id": 435,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-28.4"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Average of four numbers is 10.6\n# The average of five numbers is 10.6\n# Four of the numbers are 10, 4, 5 and 20\n# The fifth number is 10.6 - 10 - 4 - 5 - 20\nprint(10.6 - 10 - 4 - 5 - 20)"
  },
  {
    "example_id": 436,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import primefactors\n\nn = 117*119\nprint(len(primefactors(n)))"
  },
  {
    "example_id": 437,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16043.0"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "perfect_square = [i**2 for i in range(1, 2501)]\nperfect_square_str = \"\".join(str(i) for i in perfect_square)\nprint(len(perfect_square_str))"
  },
  {
    "example_id": 438,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "from math import gcd\ndef greatest_prime_factor(n):\n    if n % 2 == 0:\n        return greatest_prime_factor(n // 2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return greatest_prime_factor(n // i)\n    return n\nprint(greatest_prime_factor(3105))"
  },
  {
    "example_id": 439,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.7853981633974483",
      "3.141592653589793",
      "3.141592653589793"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import pi\nimport numpy as np\n\ndef area(r):\n    return pi*r**2\n\ndef perimeter(r):\n    return 2*pi*r\n\ndef circumference(r):\n    return 2*pi*r\n\ndef main():\n    r = 0.5\n    print(\"Area of the shaded region:\", area(r))\n    print(\"Perimeter of the shaded region:\", perimeter(r))\n    print(\"Circumference of the shaded region:\", circumference(r))\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 440,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "print(182 + 3*7 - 64/2 + 27/3)"
  },
  {
    "example_id": 441,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8390996311772799"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "import math\nx = math.tan(math.radians(40))\nprint(x)"
  },
  {
    "example_id": 442,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n_mat = 36\nn_bottle = 26\nn_both = 20\nn_missing = n_mat - n_both\nprint(n_missing)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "blue_marbles = 5\ntotal_marbles = 20\ndesired_probability = 1/2\n\nblue_marbles_needed = (total_marbles * desired_probability) - blue_marbles\n\nprint(blue_marbles_needed)"
  },
  {
    "example_id": 444,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "initial_pins, half_of_one_third, brother_pins = 66, 22, 33\npins_left = initial_pins - half_of_one_third - brother_pins\nprint(pins_left)"
  },
  {
    "example_id": 445,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "264.0"
    ],
    "solution": "sum = 0\nfor i in range(10, 100):\n    for j in range(10, 100):\n        if i % 10 == 3 * j:\n            sum += i\nprint(sum)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.5",
      "-4.142857142857143"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n1 = (25-3)/4\nn2 = (24+5)/-7\nprint(n1, n2)"
  },
  {
    "example_id": 447,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-18.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "x, y = 8, 0\nt = (x - 2) / 2\ny = t - 21\nprint(y)"
  },
  {
    "example_id": 448,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "3.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "import sympy\nperimeter = 8*sympy.sqrt(3)\nprint(perimeter)"
  },
  {
    "example_id": 449,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5208333333333334"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(25/4/12)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "inches_per_yard = 36\ninches = 3 / 4 * inches_per_yard\nprint(inches)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1080.0"
    ],
    "annotated_answers": [
      "1080.0"
    ],
    "solution": "hours = 0.30\nseconds = hours * 3600\nprint(seconds)"
  },
  {
    "example_id": 452,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "total_distance = 19 + 16 + (-3) + (-4)\nprint(total_distance)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "walking_speed = 1.7\ndistance = 17\ntotal_time = distance / walking_speed\nprint(total_time)"
  },
  {
    "example_id": 454,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "6.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "for n in range(1, 12):\n    if 12 % n == 0:\n        print(n)"
  },
  {
    "example_id": 455,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "from math import factorial\nn = 8\nmedals = 3\npermutations = factorial(n) / (factorial(medals) * factorial(n - medals))\nprint(permutations)"
  },
  {
    "example_id": 456,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "104.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "x = 100\nangles = [x, x, x-2, x-2, x+2, x+2, x+4]\nlargest = max(angles)\nprint(largest)"
  },
  {
    "example_id": 457,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "3.0",
      "10.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "import sympy as sym\nx = sym.symbols('x')\nlength = 3*x + 10\nwidth = x + 12\nperimeter = 76\narea = length * width\nprint(area)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "half = 9000/100/2\nprint(half)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.9999999999999996"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 42\nprint(((1/a)**4) * 2 * (a**4) + (a**(2+1-3)))"
  },
  {
    "example_id": 460,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "starting_cones, noon_cones, end_cones = 72, 72 * 2/3, 72 * 2/3 * 2/3\nprint(end_cones)"
  },
  {
    "example_id": 461,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2560.0"
    ],
    "annotated_answers": [
      "2560.0"
    ],
    "solution": "bacteria_population = 10\ntime_interval = 1\ntime_elapsed = 8\nbacteria_population *= 2 ** time_elapsed\nprint(bacteria_population)"
  },
  {
    "example_id": 462,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "192.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "print(2**(2**3) - (2**2)**3)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "degrees_in_15_minutes = 1.5\nminutes_in_2_hours = 120\ndegrees_in_2_hours = degrees_in_15_minutes * minutes_in_2_hours\nprint(degrees_in_2_hours)"
  },
  {
    "example_id": 464,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# number of girls is a multiple of 13\n# number of girls is more than number of boys\n\ngirls = 35\nboys = 35 // 13\n\nprint(boys)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1341.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "a = 1341 - 2\nb = 1341 - 1\nc = 1341\nprint(max(a, b, c))"
  },
  {
    "example_id": 466,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "n = 10\nm = 2\nnight_per_meerkat = n / m\nprint(night_per_meerkat)"
  },
  {
    "example_id": 467,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1800.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# 3-4-6-9-10-12\nred, blue, yellow = 4, 6, 10\npots = 600\ntotal_balloons = red * (pots//red) + blue * (pots//blue) + yellow * (pots//yellow)\nprint(total_balloons)"
  },
  {
    "example_id": 468,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nmean = (a + b + c) / 3\nproduct = a * b * c\nlargest = product / mean\nprint(largest)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.50000000000001"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import math\nlength = 5 * math.sqrt(5)\nwidth = length / 2\narea = length * width\nprint(area)"
  },
  {
    "example_id": 470,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "shirts = 5\npants = 6\nhats = 8\noutfits = shirts * pants * hats\nprint(outfits)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "witches = 6\nsorcerers = 10\nhandshakes = witches * (sorcerers - 1) + sorcerers\nprint(handshakes)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "1001.0"
    ],
    "solution": "def least_positive_multiple_of_7(n):\n    \"\"\"\n    Given an integer n, find the least positive multiple of 7 that is greater than n.\n    :param n: an integer\n    :return: the least positive multiple of 7 that is greater than n\n    \"\"\"\n    if n % 7 == 0:\n        return n + 7\n    else:\n        return n + 7 - (n % 7)\nprint(least_positive_multiple_of_7(1000))"
  },
  {
    "example_id": 473,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "print(round(10.0000198 * 5.9999985401 * 6.9999852))"
  },
  {
    "example_id": 474,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "123.0",
      "42.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "# Solution 1\ntotal = 0\nfor i in range(10, 100):\n    a, b = i // 10, i % 10\n    if a == 4 * b:\n        total += i\nprint(total)\n\n# Solution 2\ntotal = sum(i for i in range(10, 100) if i % 10 == 4 * (i // 10))\nprint(total)"
  },
  {
    "example_id": 475,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "good_workers = 3\nbad_workers = 36 / 3 - 12\nprint(bad_workers)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Picture's area\narea = 2\n# Quilt's length\nlength = 2 * area\n# Quilt's width\nwidth = 3 * area\n# Quilt's area\nquilt_area = length * width\nprint(quilt_area)"
  },
  {
    "example_id": 477,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5937.0"
    ],
    "annotated_answers": [
      "5937.0"
    ],
    "solution": "# The number of apples George picked in 1 hour\nhourly_pounds = 15832 / 8\n# The number of apples George picked in 3 hours\nthree_hourly_pounds = hourly_pounds * 3\nprint(three_hourly_pounds)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "scoops = 4\nvanilla, chocolate, strawberry, cherry = 1, 1, 1, 1\n\ndef can_place(x, y):\n    return x!= chocolate or y!= 0\n\ndef stack(x, y):\n    return x + y\n\npossible_orders = [stack(scoops, i) for i in range(scoops + 1) if can_place(scoops, i)]\nprint(possible_orders)"
  },
  {
    "example_id": 479,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(((-5)**3) + ((-2)**3) + (2**3) + (5**3))"
  },
  {
    "example_id": 480,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import sqrt\nprint(sqrt(25-16)/(sqrt(25)-sqrt(16)))"
  },
  {
    "example_id": 481,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "distance = 4\nscale = 0.5\nkm = distance / scale\nprint(km)"
  },
  {
    "example_id": 482,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25000.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "circumference = 40000\ndistance = 1000000000\nnumber_of_trips = distance // circumference\nprint(number_of_trips)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "if 40 <= 40 + 2 <= 50:\n    print(40)\nelif 40 <= 40 + 2 + 2 <= 50:\n    print(40 + 2)\nelse:\n    print(40 + 2 + 2)"
  },
  {
    "example_id": 484,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.600000000000001"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "copper_weight, zinc_weight = 0.8, 0.2\ntotal_weight = 48\nzinc_weight = total_weight * zinc_weight\nprint(zinc_weight)"
  },
  {
    "example_id": 485,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(92 - 45 / (3 * 5) - 5 ** 2)"
  },
  {
    "example_id": 486,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.125"
    ],
    "annotated_answers": [
      "5.5"
    ],
    "solution": "side_length = 8.5\nfor i in range(2):\n    side_length = side_length / 2\nprint(side_length)"
  },
  {
    "example_id": 487,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-89.0"
    ],
    "solution": "x = 10\nM = 1\nN = 1\nprint(M + N)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "for x in range(1, 15):\n    if 1/4 < x/5 < 2/3:\n        print(x)"
  },
  {
    "example_id": 489,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "quarters, nickels, pennies = 1, 1, 1\n\n# Calculate the different sums of money\nsums = [quarters + nickels,\n        quarters + pennies,\n        nickels + pennies]\n\n# Print the sums of money\nprint(sums)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "868.7"
    ],
    "annotated_answers": [
      "868.8"
    ],
    "solution": "x = 543.55\ny = 25.23\nz = 299.98\nprint(round(x, 1) + round(y, 1) + round(z, 1))"
  },
  {
    "example_id": 491,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "507.0"
    ],
    "annotated_answers": [
      "507.0"
    ],
    "solution": "import math\n\ndef find_smallest_positive_multiple(n, m):\n    \"\"\"\n    Find the smallest positive multiple of n that is greater than m\n\n    Args:\n        n (int): Number to find the smallest positive multiple of\n        m (int): Number to compare against\n\n    Returns:\n        int: Smallest positive multiple of n that is greater than m\n    \"\"\"\n    if n > m:\n        raise ValueError(\"n must be greater than m\")\n\n    multiple = m + 1\n    while multiple % n!= 0:\n        multiple += 1\n\n    return multiple\n\nprint(find_smallest_positive_multiple(13, 500))"
  },
  {
    "example_id": 492,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "729.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "print(9**3)"
  },
  {
    "example_id": 493,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(2**5 - 5**2)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Area of a triangle is half the base times height\nbase = 3\nheight = 4\narea = 0.5 * base * height\nprint(area)"
  },
  {
    "example_id": 495,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.75"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 5 * (8 - 143) / 180\nprint(x)"
  },
  {
    "example_id": 496,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\n\ndef is_perfect_square(n):\n    return int(math.sqrt(n))**2 == n\n\ndef is_odd(n):\n    return n % 2 == 1\n\ndef is_between(n, a, b):\n    return a <= n <= b\n\ncount = 0\nfor i in range(5, 211):\n    if is_perfect_square(i) and is_odd(i) and is_between(i, 5, 211):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 497,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(3*3 + 3*(3+3) - 3**3)"
  },
  {
    "example_id": 498,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def is_square(n):\n    return int(n**0.5)**2 == n\n\ndef perfect_squares(n):\n    for i in range(1, n + 1):\n        if is_square(i):\n            yield i\n\ndef count_perfect_squares(n):\n    return sum(1 for _ in perfect_squares(n))\n\ndef min_perfect_squares(n):\n    return min(count_perfect_squares(i) for i in range(n + 1))\n\nprint(min_perfect_squares(49))"
  },
  {
    "example_id": 499,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import sympy\n\nt = sympy.Symbol('t')\np, q, r, s = sympy.symbols('p q r s')\n\nrect_area = 24\npqrs_area = rect_area / 2\n\nqr = q * r\ntr = t * r\n\npqrs_perimeter = qr + tr\n\npqrs_area = pqrs_perimeter / 2\n\nprint(pqrs_area)"
  },
  {
    "example_id": 500,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1500000.0"
    ],
    "annotated_answers": [
      "1250.0"
    ],
    "solution": "# The equivalent exchange rate between the lire and the dollar\nexchange_rate = 1.50\n# The number of lire\nnum_of_lira = 1000000\n# The number of dollars\nnum_of_dollars = exchange_rate * num_of_lira\nprint(num_of_dollars)"
  },
  {
    "example_id": 501,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.21"
    ],
    "annotated_answers": [
      "1.21"
    ],
    "solution": "numbers = [0.78, 0.12, 1.33, 1.328]\nprint(max(numbers) - min(numbers))"
  },
  {
    "example_id": 502,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.32"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "width = 0.4\narea_inner = 100\narea_outer = area_inner + 2 * width * width\nprint(area_outer)"
  },
  {
    "example_id": 503,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "x = 7 * 2 + 7\nprint(x)"
  },
  {
    "example_id": 504,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "a = 7\nb = 13\neven_positive_integers_less_than_ab = (a * b) // 2\nprint(even_positive_integers_less_than_ab)"
  },
  {
    "example_id": 505,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1125.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "juniors = 450\nseniors = 600\nmilk_per_day = 1500\ntotal_milk = juniors * milk_per_day\nsenior_milk = total_milk / seniors\nprint(senior_milk)"
  },
  {
    "example_id": 506,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.041666666666666664"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "elephant_speed, lion_speed = 19, 24\ndistance = 1\ntime = distance / lion_speed\nprint(time)"
  },
  {
    "example_id": 507,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "lcm = 240\ngcd = 24\nx = 48\ny = lcm // gcd\nprint(y)"
  },
  {
    "example_id": 508,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "perimeter = 60\narea = perimeter**2 / 12\nprint(area)"
  },
  {
    "example_id": 509,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2100.0"
    ],
    "annotated_answers": [
      "2100.0"
    ],
    "solution": "import sympy\nx = sympy.sqrt(sympy.Mul(5, 10, 14, 21, 15, 20))\nprint(x)"
  },
  {
    "example_id": 510,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "num_a = 2\nnum_b = 4\nnum_c = 2\nnum_answers = num_a * num_b * num_c\nprint(num_answers)"
  },
  {
    "example_id": 511,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "flagpole_length = 15\nperson_length = 5\nshadow_length = 6\nshadow_length_ratio = shadow_length/person_length\nflagpole_shadow_length = flagpole_length * shadow_length_ratio\nprint(flagpole_shadow_length)"
  },
  {
    "example_id": 512,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7004.0"
    ],
    "annotated_answers": [
      "7004.0"
    ],
    "solution": "a = 3\nb = 2005\nc = 11\nd = 13\ne = 21\nf = a*c*d*e - b\nprint(f)"
  },
  {
    "example_id": 513,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "hour_degrees = 30\nminute_degrees = 6\nangle = hour_degrees - minute_degrees\nprint(angle)"
  },
  {
    "example_id": 514,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "pints_in_quart = 2\nquarts_in_gallon = 4\ngallons = 2/2\npints = gallons * quarts_in_gallon * pints_in_quart\nprint(pints)"
  },
  {
    "example_id": 515,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "250000.0"
    ],
    "annotated_answers": [
      "54000.0"
    ],
    "solution": "import math\n\n# Area of the square plot\narea_of_square = 500**2\n\n# Area of the field\narea_of_field = math.pi * 5**2\n\n# Area of the land that is not watered\narea_not_watered = area_of_square - area_of_field\n\n# Round to the nearest thousand square meters\narea_not_watered = round(area_not_watered / 1000) * 1000\n\nprint(area_not_watered)"
  },
  {
    "example_id": 516,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96.0",
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "wands_to_rands = 4\nrands_to_fands = 24\nwands_to_fands = 5\n\nwands = wands_to_rands * rands_to_fands\nfands = wands_to_fands\n\nprint(wands)\nprint(fands)"
  },
  {
    "example_id": 517,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 78\nlargest_prime_factor = 0\nfor i in range(2, n):\n    if n % i == 0:\n        largest_prime_factor = i\n        break\nprint(largest_prime_factor)"
  },
  {
    "example_id": 518,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(((100**0.5) - (36**0.5))**2)"
  },
  {
    "example_id": 519,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "rectangle_length = 6\nrectangle_width = 10\nnew_rectangle_length = 9\nnew_rectangle_width = rectangle_width * new_rectangle_length / rectangle_length\nprint(new_rectangle_width)"
  },
  {
    "example_id": 520,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "print(15 + 8**2 - 3)"
  },
  {
    "example_id": 521,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "print(9/2)"
  },
  {
    "example_id": 522,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "print(-49/7)"
  },
  {
    "example_id": 523,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "111.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "# Number of positive multiples of 9 less than 1000\nprint(int((1000-1)/9))"
  },
  {
    "example_id": 524,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "import math\nnum_list = [1, 2, 3, 4, 5]\nmean = 21\nfor i in num_list:\n    if i > mean:\n        break\n    else:\n        smallest = i\n        print(smallest)"
  },
  {
    "example_id": 525,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Find r\nr = 24/3 + 5\n\n# Print r\nprint(r)"
  },
  {
    "example_id": 526,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import sqrt\nprint(sqrt(28 + sqrt(1296)))"
  },
  {
    "example_id": 527,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "total = 0\nfor i in range(1, 13):\n    if i % 2 == 0 or i % 3 == 0 or i % 4 == 0:\n        continue\n    total += 1\n    for j in range(1, i + 1):\n        if i % j == 0 and j > 1:\n            break\n    else:\n        total += 1\nprint(total)"
  },
  {
    "example_id": 528,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2520.0"
    ],
    "annotated_answers": [
      "2520.0"
    ],
    "solution": "import math\nlcm = 1\nfor i in range(1,10):\n    lcm = math.lcm(lcm, i)\nprint(lcm)"
  },
  {
    "example_id": 529,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2400.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "swimmer_speed = 2\ndolphin_speed = 8\nrace_time = 400\ndistance = (dolphin_speed - swimmer_speed) * race_time\nprint(distance)"
  },
  {
    "example_id": 530,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75",
      "1.0",
      "1.25"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "# Glow\nglow_price = 1.0\nglow_volume = 1.0 - (0.25 / 1.0)\nprint(glow_volume)\n\n# Fresh\nfresh_price = 1.0\nfresh_volume = 1.0\nprint(fresh_volume)\n\n# Bright\nbright_price = 1.0 + 0.6\nbright_volume = 1.0 + (0.25 / 1.0)\nprint(bright_volume)"
  },
  {
    "example_id": 531,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "231.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "num_people = 22\nnum_handshakes = num_people * (num_people - 1) // 2\nprint(num_handshakes)"
  },
  {
    "example_id": 532,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "556.0"
    ],
    "annotated_answers": [
      "1251.0"
    ],
    "solution": "num_music_students = 834\nnum_students = 2/3 * num_music_students\nprint(num_students)"
  },
  {
    "example_id": 533,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "9.0",
      "1.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "6.0",
      "4.0",
      "8.0",
      "9.0",
      "9.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import itertools\n\nfor i in itertools.combinations_with_replacement(range(10), 2):\n    if (25 * i[0] + i[1]) % 9 == 0:\n        print(i)"
  },
  {
    "example_id": 534,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# 1. Write a function that takes in a number and returns True if it ends in 0 and the sum of its digits is divisible by 3.\ndef ends_in_zero_and_divisible_by_3(n):\n    if n % 3 == 0:\n        return True\n    else:\n        return False\n# 2. Write a function that takes in a number and returns the sum of its digits.\ndef sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n# 3. Write a function that takes in a number and returns True if it is one of the numbers 2, 3, 4, 5, 6, 8, 9.\ndef is_in_set(n, set):\n    if n in set:\n        return True\n    else:\n        return False\n# 4. Use the functions you wrote in steps 1, 2, and 3 to solve the problem.\ndef count_divisible_by_3(n):\n    count = 0\n    for i in range(n):\n        if is_in_set(i, [2, 3, 4, 5, 6, 8, 9]) and ends_in_zero_and_divisible_by_3(i):\n            count += 1\n    return count\nprint(count_divisible_by_3(100))"
  },
  {
    "example_id": 535,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "list = [2008, 2003, 1998, 2005, 8, 3]\nprint(len(list))"
  },
  {
    "example_id": 536,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nprint(math.floor(math.log10(7)))"
  },
  {
    "example_id": 537,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0",
      "22.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "for i in range(2, 100):\n    for j in range(i, 100):\n        if i + j in range(2, 100) and i + j!= j and i + j!= i:\n            print(i + j)\n            break"
  },
  {
    "example_id": 538,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "24.0",
      "36.0",
      "48.0",
      "60.0",
      "72.0",
      "84.0",
      "96.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for i in range(1, 100):\n    if i % 3 == 0 and i % 4 == 0:\n        print(i)"
  },
  {
    "example_id": 539,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = -1\ntotal = 0\nfor i in range(2012):\n    total += x ** i\nprint(total)"
  },
  {
    "example_id": 540,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10.0",
      "20.0",
      "30.0",
      "40.0",
      "50.0",
      "60.0",
      "70.0",
      "80.0",
      "90.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "for i in range(0, 500):\n    if i % 2 == 0:\n        print(5 * i)"
  },
  {
    "example_id": 541,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0",
      "117.0",
      "126.0",
      "135.0",
      "144.0",
      "153.0",
      "162.0",
      "171.0",
      "180.0",
      "189.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "for i in range(100, 1000):\n    if i % 9 == 0:\n        print(i)"
  },
  {
    "example_id": 542,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "n = 9\nprint(n * (n - 3))"
  },
  {
    "example_id": 543,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "num_aliens = 160\nnum_aliens_with_three_eyes = 17/40 * num_aliens\nprint(num_aliens_with_three_eyes)"
  },
  {
    "example_id": 544,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "gallons_left = 3/4\ncones_sold = 32\ntotal_cones_sold = cones_sold * gallons_left\nprint(total_cones_sold)"
  },
  {
    "example_id": 545,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "a = 1200\nb = 1200 // a\nprint(b)"
  },
  {
    "example_id": 546,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.4438595832024937",
      "176"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "from math import factorial\nn = 109\nprint(factorial(n))"
  },
  {
    "example_id": 547,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "days_between_reporting = 9\ndays_between_reporting_jessica = 12\ndays_between_reporting_richard = 15\ndays_between_reporting_least = min(days_between_reporting, days_between_reporting_jessica, days_between_reporting_richard)\nprint(days_between_reporting_least)"
  },
  {
    "example_id": 548,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def gcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a % b)\n\nprint(gcf(99, 100))"
  },
  {
    "example_id": 549,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25",
      "0.17857142857142858",
      "0.21428571428571427",
      "0.14285714285714285",
      "0.03571428571428571",
      "0.07142857142857142",
      "0.10714285714285714",
      "0.0",
      "0.004",
      "0.003",
      "0.002",
      "0.001",
      "0.001",
      "0.001",
      "0.001",
      "0.001"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "days = [7, 5, 6, 4, 1, 2, 3, 0]\nproportions = [0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1]\ntotal = sum(days)\nfor i in range(len(days)):\n    days[i] /= total\n    proportions[i] /= 100\nprint(days)\nprint(proportions)"
  },
  {
    "example_id": 550,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "127.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "import math\n\n# Angle A\nangle_A = 39\n\n# Angle QBP\nangle_QBP = 14\n\n# Angle QCP\nangle_QCP = 180 - angle_QBP - angle_A\n\n# Angle BPC\nangle_BPC = angle_QCP\n\nprint(\"Angle BPC:\", angle_BPC)"
  },
  {
    "example_id": 551,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# using sympy\nfrom sympy import factorial\nn = 4\npermutations = factorial(n)\nprint(permutations)"
  },
  {
    "example_id": 552,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "values = [1, 2, 3, 4, 5, 6, 7, 8]\nremoved_value = values[0]\nprint(removed_value)"
  },
  {
    "example_id": 553,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "121.0",
      "121.0",
      "122.0",
      "121.0",
      "122.0",
      "121.0",
      "121.0",
      "121.0",
      "122.0",
      "122.0",
      "122.0",
      "122.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# 144\nprint(2*3*4*5 + 1)\n# 121\nprint(2*(3*4)*5 + 1)\n# 100\nprint(2*3*4*5 + (1+1))\n# 105\nprint((2*3)*4*5 + 1)\n# 110\nprint((2*3)*4*5 + (1+1))\n# 115\nprint(2*3*(4*5) + 1)\n# 120\nprint((2*3)*(4*5) + 1)\n# 125\nprint(2*(3*4)*5 + 1)\n# 130\nprint((2*3)*(4*5) + (1+1))\n# 135\nprint(2*(3*4)*5 + (1+1))\n# 140\nprint((2*3)*(4*5) + (1+1))\n# 144\nprint((2*3)*(4*5) + (1+1))"
  },
  {
    "example_id": 554,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "30.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "import sympy\nperimeter = sympy.sqrt(120)\nprint(perimeter)"
  },
  {
    "example_id": 555,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "ans = 0\nfor i in range(6):\n    if (i % 2 == 0 and i + 1 in range(6)):\n        ans += 1\nprint(ans)"
  },
  {
    "example_id": 556,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "680.0"
    ],
    "solution": "three_eyes, five_eyes = 3/8, 1-3/8\ntotal_eyes = three_eyes * 160 + five_eyes * 160\nprint(total_eyes)"
  },
  {
    "example_id": 557,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "perimeter = 4 * 72\nprint(perimeter)"
  },
  {
    "example_id": 558,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = 3/7, 4/3, 11/8, 6/16\ndiff = max(a, b, c, d) - min(a, b, c, d)\nprint(diff)"
  },
  {
    "example_id": 559,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "x = 3\nprint(8 * x + 2)"
  },
  {
    "example_id": 560,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "last_test_score = 98\nmean = 91\ntotal_tests = (last_test_score - mean) / (mean - (mean - 1)) + 1\nprint(total_tests)"
  },
  {
    "example_id": 561,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "num1 = 50\nnum2 = 20\nproduct = num1 * num2\nprint(product)"
  },
  {
    "example_id": 562,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2\ny = 5\nx_min = 2\nx_max = 54 // y\nx_values = range(x_min, x_max + 1)\nprint(len(x_values))"
  },
  {
    "example_id": 563,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nside_length = math.sqrt(16)\ngray_piece = side_length**2\nprint(gray_piece)"
  },
  {
    "example_id": 564,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 5\nm = 2\nfrom math import factorial\nprint(factorial(n) // (factorial(m) * factorial(n - m)))"
  },
  {
    "example_id": 565,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "117.80972450961724"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "from math import pi\n\nradius = 5\narea = (3 * pi * radius**2) / 2\nprint(area)"
  },
  {
    "example_id": 566,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-45.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "gorge_width = 80\nhigher_cliff = 112\nlower_cliff = 172\ntrain_length = 0.75 * (higher_cliff - lower_cliff)\nprint(train_length)"
  },
  {
    "example_id": 567,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 55/5 - 3\nprint(x)"
  },
  {
    "example_id": 568,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "dimples = 300\nseconds_per_dimple = 2\nminutes = dimples / seconds_per_dimple\nprint(minutes)"
  },
  {
    "example_id": 569,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.6666666666666665"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 7 - (7+2+10-9)/3\nprint(x)"
  },
  {
    "example_id": 570,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "37.5"
    ],
    "annotated_answers": [
      "37.5"
    ],
    "solution": "t_shirts_cost, sweatshirt_cost = 15.22, 67.94 - 15.22 - 15.22\nprint(sweatshirt_cost)"
  },
  {
    "example_id": 571,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0",
      "0.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "m1_angle = 50\nm2_angle = 90 - m1_angle\nl1_angle = 0\nl2_angle = 0\nm2_m1_angle = m2_angle - m1_angle\nl2_l1_angle = l2_angle - l1_angle\nprint(m2_m1_angle, l2_l1_angle)"
  },
  {
    "example_id": 572,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "480.0"
    ],
    "solution": "area = (8 * 3) + (10 * 3)\nprint(area)"
  },
  {
    "example_id": 573,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "mary_age = 3/5 * 30\nprint(mary_age)"
  },
  {
    "example_id": 574,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "num_of_outfits = 5\nnum_of_models = 5\nnum_of_dresses = 5\nnum_of_shows = num_of_outfits * (num_of_models - 2)\nprint(num_of_shows)"
  },
  {
    "example_id": 575,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from itertools import permutations\n\ndigits = [2, 4, 6, 7]\ncount = 0\nfor perm in permutations(digits):\n    if perm[0] + perm[1] in [10, 20, 40, 60, 70]:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 576,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "list = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nprint(len(list))"
  },
  {
    "example_id": 577,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "import itertools\nfrom itertools import permutations\ncode_words = ['AA', 'AB', 'BB', 'BA']\nnew_code_words = []\nfor i in range(len(code_words)):\n    for j in range(len(code_words)):\n        if i < j:\n            new_code_words.append(code_words[i] + code_words[j])\nnew_code_words = list(set(new_code_words))\nprint(len(new_code_words))"
  },
  {
    "example_id": 578,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Find sum\nn = 5\nsum = (n * (n + 1)) // 2\nsum = 105\n\n# Find mean\nmean = sum / n\nmean = 21\n\n# Find median\nmedian = sum // 2\nmedian = 21\n\n# Calculate result\nresult = mean - median\nresult = 21 - 21\nresult = 0\n\nprint(result)"
  },
  {
    "example_id": 579,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = (23 - 2 - 3) / 3\nprint(x)"
  },
  {
    "example_id": 580,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "import math\n\ndef perimeter(side_a, side_b, side_c):\n    return side_a + side_b + side_c\n\nside_a = 5\nside_b = math.sqrt(13 ** 2 - side_a ** 2)\nside_c = 13 - side_a - side_b\n\nprint(perimeter(side_a, side_b, side_c))"
  },
  {
    "example_id": 581,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "672.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define the conversion rates\ntrinkets_per_blinket = 4\nblinkets_per_drinket = 3\n\n# Calculate the value in trinkets\ntrinkets = 56 * blinkets_per_drinket * trinkets_per_blinket\n\n# Print the result\nprint(trinkets)"
  },
  {
    "example_id": 582,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "M = 180 - 10\nprint(M)"
  },
  {
    "example_id": 583,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "840.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "daps_to_yaps = 4\nyaps_to_baps = 5\ndaps_to_baps = daps_to_yaps * yaps_to_baps\nbaps_in_42_daps = 42 * daps_to_baps\nprint(baps_in_42_daps)"
  },
  {
    "example_id": 584,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = (29-5) / 3\nprint(x)"
  },
  {
    "example_id": 585,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3969.0"
    ],
    "annotated_answers": [
      "-3969.0"
    ],
    "solution": "num = 63\nproduct = num * (-num)\nprint(product)"
  },
  {
    "example_id": 586,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.56505117707799"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "import math\nangle = math.degrees(math.atan2(10, 20))\nprint(angle)"
  },
  {
    "example_id": 587,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "92.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "side_length = 184 / 2\nprint(side_length)"
  },
  {
    "example_id": 588,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "print(3**4-5*8)"
  },
  {
    "example_id": 589,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# 700 students\n# 90% of them scored 'proficient or above'\n# what number of students did not score 'proficient or above'?\n# answer: 630\n\n# 700 - 630 = 70\nprint(70)"
  },
  {
    "example_id": 590,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0",
      "63.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\na, b = sympy.Rational(2, 9), sympy.Rational(1, 7)\nresult = a + b\nprint(result)"
  },
  {
    "example_id": 591,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "nickels = 1\ndimes = 1\nquarters = 1\ntotal_coins = nickels + dimes + quarters\nprint(total_coins)"
  },
  {
    "example_id": 592,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(6*8)"
  },
  {
    "example_id": 593,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "236.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "x = 2 * 125.28 - 13.7\nprint(int(x))"
  },
  {
    "example_id": 594,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6290000.0"
    ],
    "annotated_answers": [
      "6290000.0"
    ],
    "solution": "x = 6287215\nprint(round(x, -4))"
  },
  {
    "example_id": 595,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "list_of_numbers = [2.5, 5.5, 8.5, 11.5, 14.5, 17.5, 20.5, 23.5, 26.5, 29.5, 32.5, 35.5, 38.5, 41.5, 44.5, 47.5, 50.5, 53.5, 56.5, 59.5, 62.5, 65.5, 68.5, 71.5, 74.5, 77.5, 80.5]\nnumber_of_numbers = len(list_of_numbers)\nprint(number_of_numbers)"
  },
  {
    "example_id": 596,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.199999999999996"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "total_garments = 72\ndresses_per_shirt = 3/5\ndresses_made = total_garments * dresses_per_shirt\nprint(dresses_made)"
  },
  {
    "example_id": 597,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "max_spins = 0\ncurrent_spin = 20\nwhile current_spin > 0:\n    factors = [x for x in range(1, current_spin + 1) if current_spin % x == 0 and x!= current_spin]\n    current_spin = len(factors)\n    max_spins += 1\nprint(max_spins)"
  },
  {
    "example_id": 598,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "miles = 15\ntime = 2.5\naverage_speed = miles / time\nprint(average_speed)"
  },
  {
    "example_id": 599,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def gcf(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcf(180, 450))"
  },
  {
    "example_id": 600,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "1093.0"
    ],
    "solution": "data = [51, 52, 53, 54, 55, 56, 57]\nmedian = data[len(data)//2]\nmode = data.count(data[0])\nprint(median + mode)"
  },
  {
    "example_id": 601,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(4 / 4/9)"
  },
  {
    "example_id": 602,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "# Find the smallest positive integer that is relatively prime to the product of the first 20 positive integers\n# Note: We can use the fact that the product of the first 20 positive integers is 20!\nfrom math import factorial\nn = 21\nwhile True:\n    if all(n % i!= 0 for i in range(2, n)):\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 603,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "print(round((26 + 52), -1))"
  },
  {
    "example_id": 604,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print((1 - (-1) ** 11) ** 2)"
  },
  {
    "example_id": 605,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6875.493541569878"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "from math import degrees\n\n# A convex pentagon has two congruent, acute angles\n# The measure of each of the other interior angles is equal to the sum of the measures of the two acute angles\n\n# Let's find the degree measure of one of the acute angles\nacute_angle = 30\n\n# Let's find the degree measure of the other acute angle\nother_acute_angle = 60 - acute_angle\n\n# Let's find the sum of the measures of the two acute angles\nsum_of_acute_angles = acute_angle + other_acute_angle\n\n# The sum of the measures of the two acute angles is equal to the sum of the measures of the two interior angles\n# Let's find the measure of one of the interior angles\ninterior_angle = 180 - sum_of_acute_angles\n\n# Let's find the degree measure of the common angle\ncommon_angle = degrees(interior_angle)\n\nprint(common_angle)"
  },
  {
    "example_id": 606,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Number of right-handed boys\n# = Number of right-handed boys + Number of left-handed boys\n# = Number of right-handed boys + Number of left-handed boys + Number of left-handed girls\n# = Number of right-handed boys + Number of left-handed boys + Number of left-handed girls - Number of right-handed girls\n# = 4 * Number of right-handed boys + Number of left-handed girls - Number of right-handed girls\n# = 4 * Number of right-handed boys + Number of left-handed girls - (Number of left-handed girls + Number of right-handed girls)\n# = 4 * Number of right-handed boys - Number of players on the team\n\n# Number of players on the team\n# = 2 * Number of left-handed girls + Number of right-handed girls\n# = 2 * Number of left-handed girls + Number of right-handed girls + Number of left-handed boys\n# = 2 * Number of left-handed girls + Number of right-handed girls + Number of left-handed boys + Number of right-handed boys\n# = Number of players on the team\n\n# Number of right-handed boys\n# = 4 * Number of right-handed boys - Number of players on the team\n# = 4 * Number of right-handed boys - (2 * Number of left-handed girls + Number of right-handed girls + Number of left-handed boys + Number of right-handed boys)\n# = 4 * Number of right-handed boys - (2 * Number of left-handed girls + Number of right-handed girls + Number of left-handed boys + Number of right-handed boys) / 2\n# = 2 * Number of right-handed boys - Number of left-handed girls - Number of right-handed girls - Number of left-handed boys - Number of right-handed boys\n# = 2 * 36 - 36\n# = 72 - 36\n# = 36\n\nprint(36)"
  },
  {
    "example_id": 607,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "history_students, science_students = 106, 109\nboth_students = 85\ntotal_students = history_students + science_students - both_students\nprint(total_students)"
  },
  {
    "example_id": 608,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import numpy as np\na = np.array([2, 4, 6, 8, 10])\nprint(np.max(a) - np.min(a))"
  },
  {
    "example_id": 609,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Yao Ming is 7'5''\n# Earl Boykins is 5'5''\n\n# Yao Ming is 7'5'' - 5'5'' = 2'0'' taller than Earl Boykins\nprint(7.5 - 5.5)"
  },
  {
    "example_id": 610,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "print(6//6-6+6*6)"
  },
  {
    "example_id": 611,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "timber_lengths = [48, 72, 40]\nmax_length = max(timber_lengths)\nprint(max_length)"
  },
  {
    "example_id": 612,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "import sympy as sym\n\nh = sym.sqrt(2)\ns = 4*h\n\nprint(s)"
  },
  {
    "example_id": 613,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef sum_distinct_prime_factors(n):\n    factors = prime_factors(n)\n    return sum(set(factors))\n\nprint(sum_distinct_prime_factors(735))"
  },
  {
    "example_id": 614,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import simplify\nexpr = (123/321) * (456/654) * (789/987) * (123/321) ** -1 * (456/654) ** -1 * (789/987) ** -1\nprint(simplify(expr))"
  },
  {
    "example_id": 615,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.25"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "side_length = 8\ndecrease_ratio = 0.4\nincrease_ratio = 1.5\n\n# area of the square\nsquare_area = side_length ** 2\n\n# area of the rectangle\nrect_area = (side_length * increase_ratio) ** 2\n\n# difference between the areas of the square and the rectangle\ndiff_area = square_area - rect_area\n\n# difference between the areas of the square and the rectangle\n# divided by the area of the square\ndiff_ratio = diff_area / square_area\n\n# print the result\nprint(diff_ratio)"
  },
  {
    "example_id": 616,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "27.0",
      "12.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "side = 12\nangle_ratio = 3/2\nangle_1 = angle_ratio * side\nangle_2 = angle_ratio * angle_1\nangle_3 = side\nprint(angle_1, angle_2, angle_3)"
  },
  {
    "example_id": 617,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "94.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "# find the distance between exit 47 and exit 48\nd = 100 - 6\nprint(d)"
  },
  {
    "example_id": 618,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sides = 144 / 360\nprint(sides)"
  },
  {
    "example_id": 619,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "digits = {1, 3, 6, 7}\nnumbers = {13, 16, 17, 31, 36, 61, 63, 71, 73}\nprime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nprimes = [number for number in numbers if number in prime_numbers]\nprint(len(primes))"
  },
  {
    "example_id": 620,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(5625 ** 0.5)"
  },
  {
    "example_id": 621,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 1070\nn = (n - 2) // 180\nprint(n)"
  },
  {
    "example_id": 622,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1440.0"
    ],
    "annotated_answers": [
      "9604.0"
    ],
    "solution": "import itertools\n\ncounting_numbers = []\nfor i in itertools.permutations(range(1, 8), 5):\n    if sum(i) % 2 == 1:\n        counting_numbers.append(int(''.join(map(str, i))))\n\nprint(len(counting_numbers))"
  },
  {
    "example_id": 623,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "perimeter_of_triangle = 21\nnumber_of_sides = 6\nside_length = perimeter_of_triangle / number_of_sides\nperimeter_of_hexagon = side_length * number_of_sides\nprint(perimeter_of_hexagon)"
  },
  {
    "example_id": 624,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "from math import pi\n\ntrapezoid_base_1 = 5\ntrapezoid_base_2 = 3\ntrapezoid_height = 9\ntrapezoid_area = (trapezoid_base_1 + trapezoid_base_2) * trapezoid_height / 2\nprint(trapezoid_area)"
  },
  {
    "example_id": 625,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6105.0"
    ],
    "annotated_answers": [
      "957.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 111):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 626,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.005714285714285714"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "furlongs_in_a_mile = 8\nfurlongs_in_a_fortnight = 2800\ndays_in_a_fortnight = 2\nmiles_per_day = furlongs_in_a_mile * days_in_a_fortnight / furlongs_in_a_fortnight\nprint(miles_per_day)"
  },
  {
    "example_id": 627,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 5\nprint(10 * n + 5)"
  },
  {
    "example_id": 628,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1188.0"
    ],
    "annotated_answers": [
      "1188.0"
    ],
    "solution": "width = 9\nheight = 12\npictures = 11\narea = pictures * width * height\nprint(area)"
  },
  {
    "example_id": 629,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "length_of_leg = 9\nlength_of_other_side_1 = 1\nlength_of_other_side_2 = 2\nperimeter = length_of_leg + length_of_other_side_1 + length_of_other_side_2\nprint(perimeter)"
  },
  {
    "example_id": 630,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.00000000000001"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "import math\ny = math.degrees(math.acos(.5))\nprint(y)"
  },
  {
    "example_id": 631,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(0**5 + (-1)**4)"
  },
  {
    "example_id": 632,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(3 ** (-4) * 3 ** (-8) * 3 ** 14)"
  },
  {
    "example_id": 633,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import math\nprint(16/25 * (5/2) ** 4)"
  },
  {
    "example_id": 634,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.95587280779858"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "import math\n\na = 17\nb = math.sqrt(a**2 - (1/2)**2)\nc = math.sqrt(a**2 - b**2)\n\nside_length = 2*b\n\nperimeter = 3*side_length\n\nprint(perimeter)"
  },
  {
    "example_id": 635,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "# number of handshakes for each team\nnum_handshakes = 3 * 4 * 3 + 3 * 4\nprint(num_handshakes)"
  }
]