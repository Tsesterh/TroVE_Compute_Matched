[
  {
    "example_id": 0,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "print(64**(1/2))"
  },
  {
    "example_id": 1,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.75"
    ],
    "annotated_answers": [
      "1.25"
    ],
    "solution": "distance_to_start = 0.5 + 0.75 + 0.5\nprint(distance_to_start)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "cookies_sold, cupcakes_sold, brownies_sold = 54, 20, 35\ncookies_price, cupcakes_price, brownies_price = 1/3, 2, 1\ntotal_cost = 15\nrevenue = (cookies_sold * cookies_price) + (cupcakes_sold * cupcakes_price) + (brownies_sold * brownies_price)\nprofit = revenue - total_cost\nprint(profit)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "1584.0"
    ],
    "solution": "n = 12\nr = 3\nimport math\nprint(math.factorial(n) // (math.factorial(r) * math.factorial(n - r)))"
  },
  {
    "example_id": 4,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "330.0"
    ],
    "solution": "passes_per_player = 3\nnumber_of_players = 11\nnumber_of_passes = passes_per_player * number_of_players\nprint(number_of_passes)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.745056497175141"
    ],
    "annotated_answers": [
      "3.7"
    ],
    "solution": "x, y = 37 / 12, 260 / 59\nprint((x + y) / 2)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pencils_boxes, pens_boxes, neither_boxes = 13, 9, 3\ntotal_boxes = pencils_boxes + pens_boxes + neither_boxes\npencils_and_pens_boxes = total_boxes - neither_boxes\nprint(pencils_and_pens_boxes)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "324.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "perimeter = 18\narea = perimeter ** 2\nprint(area)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "import math\nprint(math.sqrt(15 * 35 * 21))"
  },
  {
    "example_id": 9,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "99.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "for i in range(100):\n    if i % 99 == 0:\n        print(i)"
  },
  {
    "example_id": 10,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor i in range(1, 100):\n    if len(set(j for j in range(1, i + 1) if i % j == 0)) % 2 == 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1518.0"
    ],
    "annotated_answers": [
      "1518.0"
    ],
    "solution": "# prime numbers\np1, p2, p3, p4 = 2, 3, 5, 7\n# composite numbers\nc1, c2, c3, c4 = 4, 6, 8, 9\n# product\ndiff = (p1 * p2 * p3 * p4) - (c1 * c2 * c3 * c4)\nprint(diff)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "def lcm(a, b):\n    if a > b:\n        greater = a\n    else:\n        greater = b\n    while True:\n        if (greater % a == 0) and (greater % b == 0):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\nprint(lcm(72, 96))"
  },
  {
    "example_id": 13,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "p1, p2 = 107, 109\nx = 107*109**5\nx_exponent = 11\nexponent_of_109 = exponent_of_107 = 0\nwhile x_exponent > 0:\n    if x_exponent % 2 == 1:\n        exponent_of_109 += 1\n    x_exponent //= 2\n    x //= p2\n    if x % p1 == 0:\n        exponent_of_107 += 1\n        x //= p1\nprint(exponent_of_109)"
  },
  {
    "example_id": 14,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "71.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 1/6*6*7 + 8*2\nb = 8*(7-1)\nprint(a+b)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print(round(14.7923412 ** 2, -2))"
  },
  {
    "example_id": 16,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for i in range(10, 50):\n    if i % i % 10 == 0:\n        print(i)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "age = 18\nbrother_age = 4 * age\nsix_years_from_now = brother_age + brother_age\nprint(brother_age)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "777.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "def largest_multiple_of_37_less_than_800(n):\n    return n - n % 37\n\nprint(largest_multiple_of_37_less_than_800(799))"
  },
  {
    "example_id": 19,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.99999999999999"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import sqrt\na = 2.5\nb = 0.7\nc = 2.7\nd = 2.5\nprint(sqrt(a**2 - b**2)/(c - d))"
  },
  {
    "example_id": 20,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = round(sum([13, 14, 22, 52, 63, 74]), -1)\nb = round(13, -1) + round(14, -1) + round(22, -1) + round(52, -1) + round(63, -1) + round(74, -1)\nprint(a-b)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "positive_multiples_of_3 = 0\npositive_multiples_of_6 = 0\nfor i in range(1, 20):\n    if i % 3 == 0:\n        positive_multiples_of_3 += 1\n    if i % 6 == 0:\n        positive_multiples_of_6 += 1\nprint(positive_multiples_of_6 - positive_multiples_of_3)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(int((3+4)/1))"
  },
  {
    "example_id": 23,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import simplify, integrate\n\ndef area_of_rectangle(perimeter):\n    width = perimeter / 2\n    return width\n\ndef perimeter_of_rectangle(width):\n    return width * 2\n\nperimeter = 56\nwidth = perimeter_of_rectangle(perimeter)\narea = area_of_rectangle(perimeter)\n\nprint(area)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "import math\nx, y, z = 360, 450, 540\ndays = int(math.gcd(x, y))\nprint(days)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "overall_average = (25 * 84 + 20 * 66) / (25 + 20)\nprint(overall_average)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "sarah = 5\njames = 3\nmatthew = -2\nmax_score = (sarah * james) - matthew\nprint(max_score)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "N = 11\ndef num_divisors(N):\n    count = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            count += 1\n    return count\nprint(num_divisors(N))"
  },
  {
    "example_id": 28,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = [4, 8, 12]\ny = [4, 8, 12]\nfraction = [(x[i]/y[j]) for i in range(3) for j in range(3)]\nprint(len(set(fraction)))"
  },
  {
    "example_id": 29,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b, c = 0, 0, 0\na, b, c = 8 - b - c, 11 - b - c, 8\nprint(a)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "list = [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93]\nprint(len(list))"
  },
  {
    "example_id": 31,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "perimeter = 60\nside_length = perimeter / 2\narea = side_length ** 2\nprint(area)"
  },
  {
    "example_id": 32,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "564.0"
    ],
    "annotated_answers": [
      "564.0"
    ],
    "solution": "print(round(563.5097))"
  },
  {
    "example_id": 33,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_digit(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_digits(n):\n    count = 0\n    while n > 0:\n        if is_prime_digit(n % 10):\n            count += 1\n        n //= 10\n    return count\n\ndef count_prime_digits_solution(n):\n    count = 0\n    while n > 0:\n        if is_prime(n % 10):\n            count += 1\n        n //= 10\n    return count\n\ndef count_four_digit_prime_digits(n):\n    count = 0\n    while n > 0:\n        if is_prime(n % 10000):\n            count += 1\n        n //= 10\n    return count\n\ndef count_four_digit_prime_digits_solution(n):\n    count = 0\n    while n > 0:\n        if count_prime_digits(n % 10000) == 4:\n            count += 1\n        n //= 10\n    return count\n\nprint(count_four_digit_prime_digits_solution(10000))"
  },
  {
    "example_id": 34,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "y = 6\nprint(y**3)"
  },
  {
    "example_id": 35,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0000000000000004"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a, b, c, d, e = 1, 8/3, 47/12, 71/12, 7\nprint(d-c)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.830951894845301"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "hypotenuse = 5\nleg = 3\narea = (hypotenuse**2 + leg**2)**0.5\nprint(area)"
  },
  {
    "example_id": 37,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 6\nsqrt_x_squared = x**2\nsqrt_x_squared_minus_3 = sqrt_x_squared - 3\nprint(sqrt_x_squared_minus_3)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "base1 = 8\nheight1 = 5\nbase2 = 20\nperimeter2 = 20\nhypotenuse = (perimeter2 ** 2 - base2 ** 2) ** 0.5\nprint(hypotenuse)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = -8 - 7\nprint(x)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3380.0"
    ],
    "solution": "import itertools\n\nwords = [w for w in itertools.permutations('A E I O U'.split()) if len(w) == 3]\nprint(len(words))"
  },
  {
    "example_id": 41,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Factor of a number\ndef is_factor(a, b):\n    return a % b == 0\n\n# For how many possible rolls would both girls win?\ndef total_rolls_to_win(n):\n    total = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if is_factor(i, j):\n                total += 1\n    return total\n\nprint(total_rolls_to_win(20))"
  },
  {
    "example_id": 42,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "mathcounts = 28\nscience = 21\nneither = 6\nboth = mathcounts + science - neither\nprint(both)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor num in range(1, 201):\n    if str(num)[-1] == '2' and num % 4 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "N = 500 - 90 + 7 - (400 - 60 + 5)\nprint(N)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Define a function to check if a number is a two-digit number\ndef is_two_digits(n):\n    return len(str(n)) == 2\n\n# Define a function to check if a number is a positive integer\ndef is_positive_integer(n):\n    return isinstance(n, int) and n > 0\n\n# Define a function to check if a number is a positive two-digit number\ndef is_positive_two_digits(n):\n    return is_two_digits(n) and is_positive_integer(n)\n\n# Define a function to find the sum of digits in a number\ndef sum_digits(n):\n    return sum(int(d) for d in str(n))\n\n# Define a function to find the number of two-digit positive integers whose digits sum to 7\ndef count_two_digits(n):\n    count = 0\n    for i in range(10, 100):\n        if is_positive_two_digits(i) and sum_digits(i) == 7:\n            count += 1\n    return count\n\n# Test the function\nprint(count_two_digits(2))"
  },
  {
    "example_id": 46,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "total_squares = 25\nblack_squares = 1\nprint(black_squares)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(6+5-4*3/(2+1))"
  },
  {
    "example_id": 48,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def power(x, y):\n    return x ** y\n\ndef negative(x):\n    return -x\n\ndef subtract(x, y):\n    return x - y\n\ndef divide(x, y):\n    return x / y\n\ndef multiply(x, y):\n    return x * y\n\nx = power(power(power(power(negative(345), 4), 2), 0), -2)\ny = power(x, -4)\nprint(y)"
  },
  {
    "example_id": 49,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "5.0",
      "7.0",
      "9.0",
      "11.0",
      "13.0",
      "15.0",
      "17.0",
      "19.0"
    ],
    "annotated_answers": [
      "4007.0"
    ],
    "solution": "for i in range(1, 2004):\n    if i % 2 == 1:\n        print(i)"
  },
  {
    "example_id": 50,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2116.0",
      "2116.0",
      "2116.0",
      "2116.0",
      "2116.0",
      "2116.0",
      "2116.0",
      "2116.0",
      "2116.0",
      "2116.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sqrt\n\nfor i in range(1000, 10000):\n    if i % 2 == 0:\n        continue\n    for j in range(1000, 10000):\n        if j % 2 == 0:\n            continue\n        if (i + j) ** 0.5 == int((i + j) ** 0.5):\n            print(i + j)\n            break"
  },
  {
    "example_id": 51,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "from sympy import S\nfrom sympy.ntheory.generate import isprime\nfor x in range(1000000):\n    if isprime(341407*x + 7):\n        print(x)\n        break"
  },
  {
    "example_id": 52,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "history_students, science_students = 126, 129\ntotal_seniors = 200\nboth_students = history_students + science_students\nprint(both_students)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-30.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "# Find the next multiple of 5\nnext_multiple = 5 * ((-32) // 5 + 1)\nprint(next_multiple)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "divisible_by_4 = 2\ngreatest_digit = 9\ncircle = [divisible_by_4, greatest_digit]\nprint(circle)"
  },
  {
    "example_id": 55,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.5"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "import math\n\n# Area of the bottom sheet\nbottom_sheet_area = 8 * 10\n\n# Area of the top sheet\ntop_sheet_area = 8.5 * 11\n\n# Area of the overlap\noverlap_area = math.fabs(bottom_sheet_area - top_sheet_area)\n\n# Print the overlap area\nprint(overlap_area)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10090.0"
    ],
    "solution": "def is_odd(n):\n    return n % 2!= 0\n\ndef find_nth_odd_positive_integer(n):\n    i = 1\n    while not is_odd(len(str(i))):\n        i += 1\n    return i\n\nprint(find_nth_odd_positive_integer(1000))"
  },
  {
    "example_id": 57,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.5",
      "6.0",
      "5.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "grades = [4, 5, 6, 7, 8, 9]\nmedian = grades[2]\nmode = grades[1]\narithmetic_mean = sum(grades)/len(grades)\nprint(arithmetic_mean, median, mode)"
  },
  {
    "example_id": 58,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "from math import gcd\ndef lcm(a, b):\n    return a*b//gcd(a, b)\n\ndef lcm3(a, b, c):\n    return lcm(lcm(a, b), c)\n\nprint(lcm3(14, 20, 35))"
  },
  {
    "example_id": 59,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "from math import sqrt\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(n):\n    return n ** 3 == n\n\ndef is_sum_of_three_cubes(n):\n    for i in range(1, int(n ** 0.5) + 1):\n        for j in range(1, int(n ** 0.5) + 1):\n            if is_prime(n - i - j) and is_cube(i) and is_cube(j):\n                return True\n    return False\n\nmin_prime = 100\nfor i in range(10, 100):\n    if is_prime(i) and is_sum_of_three_cubes(i):\n        min_prime = i\n        break\nprint(min_prime)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2160.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "number_of_cookies = 144\nflour_per_cookie = 15\ntotal_flour = number_of_cookies * flour_per_cookie\nprint(total_flour)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "113.09733552923255"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\nradius = 6\narea = math.pi * radius ** 2\nprint(area)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(8 - 4 / 2 - 1)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.5"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = (5**2 - 2) / 2\nprint(x)"
  },
  {
    "example_id": 64,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "sum = 0\nfor k in range(1, 27):\n    if 2/3 < k/27 < 8/9:\n        sum += k\nprint(sum)"
  },
  {
    "example_id": 65,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for n in range(1, 10):\n    if (6 * n) % n == 0:\n        print(n)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "memos_per_day = 600 / 3\nprint(memos_per_day)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6916"
    ],
    "annotated_answers": [
      "247000.0"
    ],
    "solution": "purchase_price = 0.8 * 0.49400 + 0.6 * 0.49400\nprint(purchase_price)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "rectangles = 6\nprint(rectangles)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30240.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "from math import factorial\n\ndef book_stacks(n):\n    return factorial(n) / factorial(n-5)\n\nprint(book_stacks(10))"
  },
  {
    "example_id": 70,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "636.0"
    ],
    "solution": "# number of times the clock chimes at each hour\nchimes_per_hour = 8\n# number of times the clock chimes at each half hour\nchimes_per_half_hour = 2\n# total number of times the clock chimes in 24 hours\ntotal_chimes = chimes_per_hour * 24 + chimes_per_half_hour * 24 * 2\n# number of times the clock chimes at 12:05 a.m.\nchimes_at_12_05 = total_chimes - (chimes_per_hour * 12 + chimes_per_half_hour * 12 * 2)\nprint(chimes_at_12_05)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.7"
    ],
    "annotated_answers": [
      "2.7"
    ],
    "solution": "rebecca_number = 2.74675\nprint(round(rebecca_number, 1))"
  },
  {
    "example_id": 72,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "12.0",
      "24.0",
      "36.0",
      "48.0",
      "60.0",
      "72.0",
      "84.0",
      "96.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for x in range(0, 100, 6):\n    if x % 4 == 0:\n        print(x)"
  },
  {
    "example_id": 73,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pentagon_diagonals = 5\nprint(pentagon_diagonals)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import floor\n\ndef digitsum(n):\n    return sum(int(i) for i in str(n))\n\ndef count_integers(n, m):\n    return len([i for i in range(n, m) if digitsum(i) == 15])\n\nprint(count_integers(200, 300))"
  },
  {
    "example_id": 75,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "import math\nside_length = 5\nperimeter = side_length * 4\narea = perimeter * perimeter / 16\nprint(area)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.02714118477265"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import math\nx = math.degrees(math.atan2(1,0.809))\nprint(x)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i ** 2 <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef prime_factors_sorted(n):\n    return sorted(prime_factors(n))\n\ndef greatest_prime_factor(n):\n    return prime_factors_sorted(n)[-1]\n\ndef least_prime_factor(n):\n    return prime_factors_sorted(n)[0]\n\ndef positive_difference(a, b):\n    return max(a, b) - min(a, b)\n\nprint(positive_difference(greatest_prime_factor(2000), least_prime_factor(2000)))"
  },
  {
    "example_id": 78,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy as sp\nr = sp.symbols('r')\narea_of_one_circle = sp.pi * r ** 2\ntotal_area = 4 * area_of_one_circle\nradius_of_larger_circle = sp.sqrt(total_area / sp.pi)\nprint(radius_of_larger_circle)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor i in range(1, 500):\n    if i % 3 == 0 and i % 4 == 0 and i % 5 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "number_of_houses = 6 * 10\nprint(number_of_houses)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3333333333333333"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "bicycle_speed = 20\ninches_per_second = 60\nbicycle_speed /= inches_per_second\nprint(bicycle_speed)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "234.0",
      "270.0",
      "306.0",
      "342.0",
      "378.0",
      "414.0",
      "450.0",
      "486.0",
      "522.0",
      "558.0"
    ],
    "annotated_answers": [
      "234.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nfor i in range(200, 1000):\n    if gcd(i, 36) == 18:\n        print(i)"
  },
  {
    "example_id": 83,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "# First, find all the possible values of x\nx_values = range(0, 8)\n# Next, find all the possible values of y\ny_values = range(-3, 5)\n# Add all the possible values of y to x to find the sum\nsum = 0\nfor x in x_values:\n    for y in y_values:\n        if x+y >= 0 and x+y <= 8 and x+y % 1 == 0:\n            sum += x+y\nprint(sum)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.712812921102035"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\n# Find the length of the longer leg of the smaller triangle\n# using the formula for the hypotenuse of a 30-60-90 triangle\n# and the given length of the hypotenuse of the larger triangle\n\n# First, find the length of the shorter leg of the smaller triangle\n# by using the formula for the length of the hypotenuse of a 30-60-90 triangle\n# and the given length of the hypotenuse of the larger triangle\n\n# Next, find the length of the longer leg of the smaller triangle\n# by using the formula for the sum of the lengths of the legs of a 30-60-90 triangle\n# and the given length of the shorter leg of the smaller triangle\n\n# Finally, print the length of the longer leg of the smaller triangle\nprint(math.sqrt(3) * 16)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "n = 17\nif n % 2 == 1:\n    print(n)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "appetizers = 5\nentrees = 8\ndesserts = 4\nmeals = appetizers * entrees * desserts\nprint(meals)"
  },
  {
    "example_id": 87,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "a = 518\nb = 294\ndef gcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a % b)\nprint(gcf(a, b))"
  },
  {
    "example_id": 88,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols(\"x y\")\n\nA = (0, 0)\nB = (2, 4)\nC = (7, 4)\nD = (7, -2)\nE = (4.5 - 0.2, 1 - 0.2)\nF = (5, 3)\n\nangle_BAD = sympy.atan2(E[1] - B[1], E[0] - B[0])\nangle_CDA = sympy.atan2(F[1] - C[1], F[0] - C[0])\n\nangle_AFD = sympy.acos((x**2 + y**2 - 1)/(2*x))\n\nprint(angle_AFD)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import sqrt\na, b = 3*sqrt(5), 5*sqrt(3)\nintegers = []\nfor i in range(int(a), int(b)):\n    if i % 1 == 0:\n        integers.append(i)\nprint(len(integers))"
  },
  {
    "example_id": 90,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0",
      "19.0",
      "26.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "mx_students = 7\neng_students = 11\nboth_students = 4\ntotal_students = 30\nnot_mx = total_students - mx_students\nnot_eng = total_students - eng_students\nnot_both = total_students - both_students\nprint(not_mx, not_eng, not_both)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "import math\na, b = math.sqrt(56), math.sqrt(126)\nprint(a * b)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.5"
    ],
    "annotated_answers": [
      "84.5"
    ],
    "solution": "print(35.2 + 49.3)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "import math\n\ndef prime_factors(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(int(n))\n    return factors\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\nprint(sum_prime_factors(85085))"
  },
  {
    "example_id": 94,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def positive_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef product(my_list):\n    result = 1\n    for element in my_list:\n        result *= element\n    return result\n\npositive_divisors_of_10 = positive_divisors(10)\nprint(product(positive_divisors_of_10))"
  },
  {
    "example_id": 95,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "large_boxes = 4\nsmall_boxes_per_large_box = 3\nsmaller_boxes_per_small_box = 2\ntotal_boxes = large_boxes + (large_boxes * small_boxes_per_large_box) + (large_boxes * small_boxes_per_large_box * smaller_boxes_per_small_box)\nprint(total_boxes)"
  },
  {
    "example_id": 96,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.40500611775288",
      "51"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 42\nresult = 1\nwhile n > 1:\n    result *= n\n    n -= 1\nprint(result)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "666000.0"
    ],
    "annotated_answers": [
      "666000.0"
    ],
    "solution": "print(3**2 * 2**4 * 37 * 5**3)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "from math import prod\n\ndivisors = [1, 3, 5, 7]\ndivisible = prod(divisors)\nprint(divisible)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.000000000000001"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(pow(20*pow(2/5, 2)*pow(3/4, 2)*5/9, 5))"
  },
  {
    "example_id": 100,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "scores = [87, 85, 87]\nscores.append(scores[-1] + 3)\nscores.sort()\nprint(scores[-1])"
  },
  {
    "example_id": 101,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "15.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# factors of 120\nfor i in range(1, 120):\n    if 120 % i == 0:\n        print(i)\n\n# factors of 40\nfor i in range(1, 40):\n    if 40 % i == 0:\n        print(i)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "denominator = 8\nnumerator = 5\ndifference = denominator - numerator\nprint(difference)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(0**(5**6431564))"
  },
  {
    "example_id": 104,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.846153846153846"
    ],
    "annotated_answers": [
      "1.125"
    ],
    "solution": "a =.26\nreciprocal = 1/a\nprint(reciprocal)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "def is_remainder(n, i):\n    return n % i == 2\n\ndef get_smallest_number():\n    smallest = 1\n    while not all(is_remainder(smallest, i) for i in range(3, 7)):\n        smallest += 1\n    return smallest\n\nprint(get_smallest_number())"
  },
  {
    "example_id": 106,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(-1 ** 1001)"
  },
  {
    "example_id": 107,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "days = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nhours = [0, 1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\ncount = 0\nfor i in range(len(days)):\n    if hours[i] >= 3:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 108,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "563.51"
    ],
    "annotated_answers": [
      "563.51"
    ],
    "solution": "print(round(563.5097, 2))"
  },
  {
    "example_id": 109,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.2"
    ],
    "solution": "CE = 3\nprint(CE)"
  },
  {
    "example_id": 110,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.18"
    ],
    "annotated_answers": [
      "13.18"
    ],
    "solution": "print(56.78-43.6)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "22.5"
    ],
    "solution": "x = 30/5\nprint(x)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a, b = 32, 8\nx = (a + b) / 2\nprint(x)"
  },
  {
    "example_id": 113,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "147.0"
    ],
    "solution": "# time to read 5 pages of fiction\ntime_to_read_5_pages = 7\n# time to read 2 pages of history\ntime_to_read_2_pages = 7\n# number of pages in a book\nnumber_of_pages_fiction = 5\nnumber_of_pages_history = 2\n# total pages to read\ntotal_pages = 30\n# total time to read\ntotal_time = (number_of_pages_fiction * time_to_read_5_pages) + (number_of_pages_history * time_to_read_2_pages)\nprint(total_time)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "# Perimeter of a regular hexagon\nside = 39 / 6\nperimeter = 6 * side\nprint(perimeter)"
  },
  {
    "example_id": 115,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# count how many times 6 appears in the list of all integers from 1 to 100\nlist_of_integers = list(range(1, 101))\ncount = list_of_integers.count(6)\nprint(count)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import math\n\ngreatest_quotient = 0\nfor x in [2/5, 1/2, 5, 10]:\n    for y in [2/5, 1/2, 5, 10]:\n        quotient = x/y\n        if quotient > greatest_quotient:\n            greatest_quotient = quotient\nprint(greatest_quotient)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def smallest_avg(lst):\n    \"\"\"\n    lst: list of 4 distinct positive even integers\n    returns: the smallest possible average of lst\n    \"\"\"\n    lst.sort()\n    return (lst[0] + lst[1] + lst[2] + lst[3]) / 4\n\nprint(smallest_avg([2, 4, 6, 8]))"
  },
  {
    "example_id": 118,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "103041.0"
    ],
    "annotated_answers": [
      "103041.0"
    ],
    "solution": "print((103041**0.5)**2)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "doughnuts_cost = 3\ndoughnuts_per_dozen = 4\ndoughnuts_in_dozen = 12\ntotal_cost = doughnuts_per_dozen * doughnuts_in_dozen * doughnuts_cost\nprint(total_cost)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "square_side_length = 6\ntriangle_base = 8\naltitude_length = (square_side_length * triangle_base) / 2\nprint(altitude_length)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5040.0"
    ],
    "annotated_answers": [
      "5040.0"
    ],
    "solution": "# A solution using math\nfrom math import factorial\n\ndef num_different_settings(n):\n    return factorial(n) / factorial(n - 4)\n\nprint(num_different_settings(10))"
  },
  {
    "example_id": 122,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.3636363636363635"
    ],
    "annotated_answers": [
      "1.36"
    ],
    "solution": "veal_price = 2.20\nveal_weight = 3\nveal_weight_kg = veal_weight / veal_price\nprint(veal_weight_kg)"
  },
  {
    "example_id": 123,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a % b)\n\na, b = 144, 405\nprint(gcf(a, b))"
  },
  {
    "example_id": 124,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.73"
    ],
    "annotated_answers": [
      "0.73"
    ],
    "solution": "print(0.8 - 0.07)"
  },
  {
    "example_id": 125,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "11.0",
      "12.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "scores = [17, 10, 9, 14, 16, 8, 10]\noverall_average = 14\nnext_three_scores = [10, 11, 12]\nsum(next_three_scores) == overall_average - sum(scores[:-3])\nprint(next_three_scores)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "north_area_shoes = 18\nuniversity_mall_shoes = 9\nratio = north_area_shoes / 90\nuniversity_mall_stores = ratio * 90\nprint(university_mall_stores)"
  },
  {
    "example_id": 127,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "588.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "r = 14\ns = 42\nprint(r * s)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# number of seconds in a minute\ns_in_min = 60\n\n# number of seconds in a dance\ndance_time = 7 * s_in_min\n\n# number of seconds between two blinks\nblink_time = 2\n\n# number of seconds between three blinks\nyellow_blink_time = 3\n\n# number of seconds between five blinks\nblue_blink_time = 5\n\n# number of times all lights come on at the same time\nn_times = dance_time // (blink_time + yellow_blink_time + blue_blink_time)\n\nprint(n_times)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.15"
    ],
    "annotated_answers": [
      "0.15"
    ],
    "solution": "print(3/20)"
  },
  {
    "example_id": 130,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.666666666666666"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = (29 - 1 - 2) / (2 + 1)\nprint(x)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# find the next multiple of 6 greater than 115\nnext_multiple = 115 + 6 - (115 % 6)\nprint(next_multiple)"
  },
  {
    "example_id": 132,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "10.0",
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "males = {9: 41.1, 10: 34.4, 11: 20.6, 12: 11.6}\nfemales = {9: 39.4, 10: 33.1, 11: 13.8, 12: 8.6}\nfor grade in males:\n    if abs(males[grade] - females[grade]) < abs(males[grade] - females[12]):\n        print(grade)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "13.0",
      "15.0",
      "17.0",
      "19.0",
      "23.0",
      "25.0",
      "27.0",
      "29.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from math import gcd\n\n# Iterate through all possible numbers\nfor i in range(11, 30):\n    if gcd(i, 28) == 1:\n        print(i)"
  },
  {
    "example_id": 134,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "expression = ((1*2) + (3*4) - (5*6) + (7*8)) * (9*0)\nprint(expression)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "scores = [70, 80, 90, 75, 80, 85]\nmean = sum(scores)/len(scores)\nprint(mean)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 10\ny = 5\nz = 1200\nresult = (z * y) / x\nprint(result)"
  },
  {
    "example_id": 137,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import sympy as sym\na, b = sym.symbols('a, b')\nh = 2\nc = sym.sqrt(h**2 - a**2 - b**2)\nprint(c**2 + a**2 + b**2)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1208.0"
    ],
    "solution": "from sympy import symbols, simplify, sqrt\nl, h = symbols('l h')\n\n# Side lengths\na = l/2\nb = h\nc = l/2\nd = h\ne = l/2\nf = h\n\n# Perimeter\nperimeter = simplify(sqrt(a**2 + b**2) + sqrt(c**2 + d**2) + sqrt(e**2 + f**2))\nprint(perimeter)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "prime_numbers = [2, 3, 5, 7, 11]\nproduct = 1\nfor i in prime_numbers:\n    product *= i\nprint(product % 42)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import log, exp\nx = log(72, 3)\nprint(x)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import floor\n\n# Ceil(7/3) = 2\n# x - 5 >= 2\n# x >= 7\n\n# Ceil(7/3) = 3\n# x - 5 >= 3\n# x >= 10\n\n# x >= 10\n\n# Number of solutions = 10 - 5 + 1 = 6\nprint(6)"
  },
  {
    "example_id": 142,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "longer = 60\nshorter = 60 / 5\nprint(shorter)"
  },
  {
    "example_id": 143,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 10"
  },
  {
    "example_id": 144,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25527448.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def nth_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    else:\n        return nth_number(n-1) + nth_number(n-2) + nth_number(n-3)\nprint(nth_number(30))"
  },
  {
    "example_id": 145,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "326.5"
    ],
    "annotated_answers": [
      "326.5"
    ],
    "solution": "print(313.9 + 12.6)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((100/101)**-3 * (100/101)**3)"
  },
  {
    "example_id": 147,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "result = (1 + 2 * 3 * 4 * 5) / 11\nprint(result)"
  },
  {
    "example_id": 148,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "115.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "# The height of the tree is 120 - 5 = 115 feet\nprint(120 - 5)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4950.0"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "odd_digits = []\nfor i in range(100, 10000):\n    if i % 2 == 1:\n        odd_digits.append(i)\nprint(len(odd_digits))"
  },
  {
    "example_id": 150,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "from sympy import isprime, primefactors\n\ndef least_perfect_square(n):\n    for i in range(n):\n        i += 1\n        factors = primefactors(i)\n        if len(factors) == 3:\n            return i\n    return None\n\nprint(least_perfect_square(100))"
  },
  {
    "example_id": 151,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2097154.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "euclid = 1\npythagoras = 2\nptolemy = -2\nhypatia = 1\ntotal = euclid**20 + pythagoras**20 + ptolemy**20 + hypatia**20\nprint(total)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5000.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def john_count(n):\n    if n % 2 == 0:\n        return n - 1\n    else:\n        return n + 1\n\nfor i in range(5000):\n    i = john_count(i)\n\nprint(i)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "9.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "apples = 36\nratio = [2, 3, 3, 4]\ntotal = sum(ratio)\nbetty, cathy = apples * ratio[1] // total, apples * ratio[2] // total\nprint(betty, cathy)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.49999999999999994"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "from math import sin, cos, pi\n\nx = sin(pi/6)\nprint(x)"
  },
  {
    "example_id": 155,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import sympify\nfrom sympy.abc import x\n\nexpr = sympify('(8/9 * (1/2)^4)^-1 - 17')\nresult = expr.subs(x, 0)\nprint(result)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Area = base * height / 2\n# Area = 6 * 6 / 2\n# Area = 6 * 6 / 2 = 18\nprint(18)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "from math import sqrt\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n):\n    if is_prime(n):\n        return n\n    for i in range(int(sqrt(n)), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\nprint(largest_prime_factor(1391))"
  },
  {
    "example_id": 158,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "p = 8\nq = 48\nb = (p+q)/2\nc = (b+q)/2\nd = (c+p)/2\nprint(d)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "degrees = 2 * 90\nprint(degrees)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "multiples_of_13 = 0\nfor i in range(100, 1000):\n    if i % 13 == 0:\n        multiples_of_13 += 1\nprint(multiples_of_13)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "original_price = 60\ndiscount = 0.25\nnew_price = original_price * (1 - discount)\nprint(new_price)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "def is_emirp(n):\n    return is_prime(int(str(n)[::-1]))\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))\n\ndef find_smallest_non_emirp_two_digit_prime():\n    for i in range(10, 100):\n        if not is_emirp(i):\n            return i\n\nprint(find_smallest_non_emirp_two_digit_prime())"
  },
  {
    "example_id": 163,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "25.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "girls_total, boys_total = 3, 5\ndays = 4\ngirls_total += girls_total * days\nboys_total += boys_total * days\nprint(girls_total, boys_total)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "155.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "sum = 0\nfor i in range(11, 21):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 165,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.99999999999999"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "print(((6**0.5) + (24**0.5))**2)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "print(4*12 - (4+12))"
  },
  {
    "example_id": 167,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "# Total number of games\ntotal_games = 3 * 4 * 3 + 4\nprint(total_games)"
  },
  {
    "example_id": 168,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "actual_answer = 22/2\nprint(actual_answer)"
  },
  {
    "example_id": 169,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "positive_integers = 0\nnegative_integers = 0\nfor i in range(1, 12 + 1):\n    if 12 % i == 0:\n        if i > 0:\n            positive_integers += 1\n        else:\n            negative_integers += 1\nprint(positive_integers, negative_integers)"
  },
  {
    "example_id": 170,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "-1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import floor\nfrom math import ceil\nx = (2 - 4 - 3) / 3\nprint(floor(x), ceil(x))"
  },
  {
    "example_id": 171,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "for i in range(1, 1000):\n    if i % 16 == 0 and i % 15 == 0 and i % 12 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 172,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67 * 71 * 73 * 79 * 83 * 89 * 97\nprint(sum(map(int, str(n))))"
  },
  {
    "example_id": 173,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import math\ndef midpoint(a,b):\n    return (a+b)/2\nA,B,C,D,E = 0,2,3,4,6\nAC = midpoint(A,C)\nprint(AC)"
  },
  {
    "example_id": 174,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\n# Write a program that counts the number of triangles in this figure.\n# Use the triangle inequality theorem.\n# https://en.wikipedia.org/wiki/Triangle_inequality_theorem\n\n# Use the tools from the toolbox.\n# You can use functions in math, scipy, sympy if they help.\n\n# Your program starts here.\n\n# Triangle inequality theorem states that the sum of the lengths of any two sides of a triangle is greater than or equal to the third side.\n# In this figure, the length of side a is 1, b is 1, and c is 1.\n\n# Let's assume that the triangle is ABC.\n# The length of the side AB is a + b - c.\n# The length of the side BC is b + c - a.\n# The length of the side AC is a + c - b.\n# The length of the side AB + BC + AC is a + b - c + b + c - a + a + c - b.\n# By the triangle inequality theorem, the sum of the lengths of any two sides of a triangle is greater than or equal to the third side.\n# Therefore, the length of the side AB + BC + AC is greater than or equal to 1.\n\n# Therefore, the number of triangles in this figure is at least 1.\nprint(1)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "number = (10**5 * 10**77 // 10**15) // 10**15**4\nnumber_of_zeroes = len(str(number)) - 1\nprint(number_of_zeroes)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 1/2\nprint(x)"
  },
  {
    "example_id": 177,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "352.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "distance = 5280\ntime = 15\nrate = distance / time\nprint(rate)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "83.0"
    ],
    "solution": "# half_value(x) = x + 37\n# x + 37 = 3x - 9\n# 2x + 37 = 3x - 9\n# 2x = -62\n# x = -31"
  },
  {
    "example_id": 179,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.53333333333333"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "perimeter = 68\ndiagonal = 30\narea = perimeter * perimeter / (4 * diagonal)\nprint(area)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.43494882292201"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "import math\nx = math.degrees(math.atan2(0.5,0.25))\nprint(x)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "woman_shadow_length = 9\nflagpole_length = 20\nwoman_height = flagpole_length - woman_shadow_length\nprint(woman_height)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "rope_1, rope_2 = 18, 24\nmax_piece_length = min(rope_1, rope_2)\nprint(max_piece_length)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "from sympy import symbols, sqrt\n\na, b = symbols('a b')\nABCD_area = 72\ntriangle_area = sqrt((a**2 * (b**2 - a**2)) / 4)\nprint(triangle_area)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3400.0"
    ],
    "solution": "x = 1000"
  },
  {
    "example_id": 185,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-11.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\n\n# Area of the picture\npicture_area = 5 * 7\n\n# Area of the red border\nborder_area = 2 * (5 + 7)\n\n# Area of the visible red border\nvisible_border_area = border_area - picture_area\n\nprint(visible_border_area)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 36 ** 10\nb = 6 ** 19\nprint(a // b)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20202.0"
    ],
    "annotated_answers": [
      "89898.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef is_divisible_by(n, k):\n    return n % k == 0\n\nfor i in range(10000, 100000):\n    if is_palindrome(i) and is_divisible_by(i, 6):\n        print(i)\n        break"
  },
  {
    "example_id": 188,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "821.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "number = 8210\nbase = 10\nexponent = number / (base ** 1)\nprint(exponent)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "num_students = 30\nscore_80 = 20\nscore_90 = 8\nscore_100 = 2\naverage = (score_80 * 80 + score_90 * 90 + score_100 * 100) / num_students\nprint(average)"
  },
  {
    "example_id": 190,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "import math\n\n# Calculate the measure of angle ABC\ndef angle_measure(a, b, c):\n    # Calculate the measure of angle ABC\n    angle_a = math.degrees(math.atan2(b[1] - a[1], b[0] - a[0]))\n    angle_b = math.degrees(math.atan2(c[1] - b[1], c[0] - b[0]))\n    angle_c = 180 - angle_a - angle_b\n    return angle_c\n\n# Calculate the measure of angle ABC\nprint(angle_measure((1, 0), (1.4, 0), (1.2, 0)))"
  },
  {
    "example_id": 191,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "import math\n\n# number of ways to choose one door to enter and another to exit\n# using nCr formula\n# n! / (r! * (n-r)!)\nprint(math.factorial(12) / (math.factorial(1) * math.factorial(11)))"
  },
  {
    "example_id": 192,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "dough_weight, cookie_weight = 3/2, 1/16\nnum_cookies = dough_weight // cookie_weight\nprint(num_cookies)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "degrees = 360*24/36\nprint(degrees)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.39999999999999997"
    ],
    "annotated_answers": [
      "0.4"
    ],
    "solution": "print(2.4/6)"
  },
  {
    "example_id": 195,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 4**2 + 4\nprint(x)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "games_lost = 12\npercentage_won = 0.25\ngames_won = games_lost * percentage_won\nprint(games_won)"
  },
  {
    "example_id": 197,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "t = int(9.6 / 1.2)\nprint(t)"
  },
  {
    "example_id": 198,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "628.0"
    ],
    "solution": "# The floor function returns the largest integer less than or equal to its argument.\n# The ceiling function returns the smallest integer greater than or equal to its argument.\n# The round function rounds a number to the nearest integer.\n# The modulo function returns the remainder of a division.\npositive_integers_less_than_200pi = [int(x) for x in range(1, 200)]\nprint(positive_integers_less_than_200pi)"
  },
  {
    "example_id": 199,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(6*3)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "number_of_colors = 8\nshirt_and_tie_outfits = (number_of_colors * (number_of_colors - 1)) // 2\nprint(shirt_and_tie_outfits)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "n = 8\nn_1 = 53\nn_2 = 8\nn_3 = 155\nn_4 = 17\nn_5 = 145\nn_6 = 10\nn_7 = 98\nn_8 = 2\ncentral_angle = 360 / n\nprint(central_angle)"
  },
  {
    "example_id": 202,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "european_stamps = 18\ndecade = 80\ntotal_stamps = 24\ntotal_stamps_in_decade = 10\nprofit = total_stamps - total_stamps_in_decade\nprint(profit)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1221.0",
      "1551.0",
      "1881.0",
      "2112.0",
      "2442.0",
      "2772.0",
      "3003.0",
      "3333.0",
      "3663.0",
      "3993.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "num = 1000\nwhile num < 10000:\n    if str(num) == str(num)[::-1] and num % 3 == 0:\n        print(num)\n    num += 1"
  },
  {
    "example_id": 204,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "cupcakes = 24\nchocolate, raisins, chocolate_chips, nuts = 12, 8, 6, 4\nlargest_number_of_cupcakes = cupcakes - (chocolate + raisins + chocolate_chips + nuts)\nprint(largest_number_of_cupcakes)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "157.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "count = 0\nfor x in range(100, 501):\n    if '3' in str(x):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "306.25"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "side = 15\nperimeter = 20 + 20 + side + side\nsquare_area = perimeter**2 / 16\nprint(square_area)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# Use math.sqrt() function\nimport math\nx = math.sqrt(10*15*24)\nprint(x)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "print(int(6 - 9))"
  },
  {
    "example_id": 209,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0",
      "3.0",
      "2.0",
      "5.0",
      "1.0",
      "2.0",
      "6.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\n\ndef degrees(radians):\n    return (radians/sympy.pi) * 180\n\nangle = degrees(sympy.acos(((3*x**2 + 5*x - 1)/(6*x**2 - 3*x + 1))**2))\n\nprint(angle)"
  },
  {
    "example_id": 210,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "def positive_multiples_of_7(n):\n    count = 0\n    for i in range(1, n):\n        if i * 7 < 150:\n            count += 1\n    return count\nprint(positive_multiples_of_7(150))"
  },
  {
    "example_id": 211,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\nprint(divisors(7))"
  },
  {
    "example_id": 212,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "numbers = [6, 8, 9, 11, 16]\nprint(sum(numbers) / len(numbers))"
  },
  {
    "example_id": 213,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a, b, x = 9, 5, 5\na = (x**2 - b)**2\nprint(a)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "148.60000000000002"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "five_buildings_height = [733, 858, 733, 733, 625]\nnew_building_height = 885\nmean_height = sum(five_buildings_height) / len(five_buildings_height)\nincrease = new_building_height - mean_height\nprint(increase)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "side_length = 2 + 21 / 2\nprint(side_length)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "14.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "# solution 1\nimport itertools\nrows = ['1', '2', '3', '4', '5', '6', '7', '8']\ncols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\ncount = 0\nfor i in itertools.product(rows, cols):\n    if i[0] == i[1] or i[0] == i[1][1:] or i[0][1:] == i[1]:\n        count += 1\nprint(count)\n# solution 2\ncount = 0\nfor row in range(1, 9):\n    for col in range(1, 9):\n        if row == col or row + col == 8:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "politicians = 4\nlawyers = 3\nhandshakes = politicians * (politicians - 1) + lawyers * (politicians - 1)\nprint(handshakes)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "980.0"
    ],
    "annotated_answers": [
      "980.0"
    ],
    "solution": "pounds = 1\npence = 5\nfarthings = 20 * 12 * 4 * pounds + pence * 4\nprint(farthings)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "import math\nAC = math.sqrt(32**2 + 0**2)\nprint(AC)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Number of distinct diagonals of a convex hexagon\n# = Number of vertices\n# - 2\n# = 6 - 2\n# = 4\nprint(4)"
  },
  {
    "example_id": 221,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# 3x > 2x + 1\n# 3x - 2x - 1 > 0\n# 1x > 0\n# x > 0\nprint(1)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(6 + (8/2))"
  },
  {
    "example_id": 223,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "num_students = 20 + 28\nprint(num_students)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "a = 76\nb = -4*8-2\nc = 13\nprint(a+b+c)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "# Field dimensions\nfield_width, field_length = 300, 400\n\n# Jim's distance diagonally across the field\njim_distance = (field_width**2 + field_length**2)**0.5\n\n# Martha's distance by walking along the length and width\nmartha_distance = field_length + field_width\n\n# Martha's distance is less than Jim's distance\nprint(martha_distance - jim_distance)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "distance = 120\ninches_per_mile = 20\ninches_apart = distance / inches_per_mile\nprint(inches_apart)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(round(15.49999999))"
  },
  {
    "example_id": 228,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.141592653589793",
      "25.132741228718345",
      "12.566370614359172"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "import math\n\ndef area(s):\n    return math.pi * s * s / 4\n\ndef perimeter(s):\n    return 4 * math.pi * s\n\ndef circumference(s):\n    return 2 * math.pi * s\n\n# Area of a circle\nprint(area(2))\n\n# Perimeter of a circle\nprint(perimeter(2))\n\n# Circumference of a circle\nprint(circumference(2))"
  },
  {
    "example_id": 229,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5321.0"
    ],
    "annotated_answers": [
      "5321.0"
    ],
    "solution": "result = (-(5321 ** 0.5)) ** 2\nprint(result)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "rope_length = 60\nlargest_radius = rope_length / 2\nprint(largest_radius)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73.0",
      "146.0",
      "219.0",
      "292.0",
      "365.0",
      "438.0",
      "511.0",
      "584.0",
      "657.0",
      "730.0",
      "803.0",
      "876.0",
      "949.0"
    ],
    "annotated_answers": [
      "949.0"
    ],
    "solution": "for i in range(72, 999):\n    if i % 73 == 0:\n        print(i)"
  },
  {
    "example_id": 232,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "cds = 77\nboxes = cds // 12\nprint(boxes)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "numbers = [8, 12, 16, 20, 24]\nmean = sum(numbers) / len(numbers)\nprint(mean)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5999999999999996"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "coat_price = 60\ncoat_price_discounted = coat_price * 0.8\ncommission_percentage = 0.05\ncommission = commission_percentage * coat_price_discounted\nadditional_commission = commission - commission_percentage * coat_price\nprint(additional_commission)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "total_height = 6\nhead_height = total_height * (1/8)\nprint(head_height)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "20.0",
      "32.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "history_A_students = 8\nmath_A_students = 15\nboth_A_students = 3\ntotal_students = 35\nnot_A_history = total_students - history_A_students\nnot_A_math = total_students - math_A_students\nnot_A_both = total_students - both_A_students\nprint(not_A_history, not_A_math, not_A_both)"
  },
  {
    "example_id": 237,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "3024.0"
    ],
    "solution": "n = 9\nk = 4\nimport math\nprint(math.comb(n, k))"
  },
  {
    "example_id": 238,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(5**5//5**4-5**3+5**2*5**1)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from itertools import combinations\n\n# 1st face is painted blue\n# 2nd face is painted blue\nblue_combinations = combinations(range(1, 7), 2)\n\n# filter out combinations that have a product of 6\nblue_combinations = [c for c in blue_combinations if c[0] * c[1]!= 6]\n\n# count the number of combinations\nprint(len(blue_combinations))"
  },
  {
    "example_id": 240,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 0\nwhile True:\n    x += 1\n    if x * 5 == 21 + 2 * x:\n        break\nprint(x)"
  },
  {
    "example_id": 241,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "inches_in_yard = 36\ninches = 2/6 * inches_in_yard\nprint(inches)"
  },
  {
    "example_id": 242,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-34.0",
      "-17.0",
      "0.0",
      "17.0",
      "34.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Use the % operator to check if a number is a multiple of 17\n# and the range function to generate a list of numbers\n# between -50 and 50\ndef multiples_of_17(n):\n    return [x for x in range(-50, 50) if x % 17 == 0]\nprint(multiples_of_17(50))"
  },
  {
    "example_id": 243,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x = 50\nfor i in range(1, 10):\n    x -= i\nprint(x)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "num_students = 30 + 50\nprint(num_students)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "red_cars = 12\nfour_door_cars = 15\ntwo_door_white_cars = 4\ntotal_cars = 20\nfour_door_red_cars = four_door_cars - two_door_white_cars\nprint(four_door_red_cars)"
  },
  {
    "example_id": 246,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.14285714285714285"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(1/7)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "# using sympy\nfrom sympy import Add\nprint(Add(1, 2, 3, -4, 5, 6).doit())"
  },
  {
    "example_id": 248,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "C = 21\nprint(C)"
  },
  {
    "example_id": 249,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.777777777777778"
    ],
    "annotated_answers": [
      "7.78"
    ],
    "solution": "fudge_price = 10\nfudge_purchased = 7/9\ntotal_cost = fudge_purchased * fudge_price\nprint(total_cost)"
  },
  {
    "example_id": 250,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "prime1 = 19\nprime2 = 17 + prime1\nprint(prime2)"
  },
  {
    "example_id": 251,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-16.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "print(-144/9)"
  },
  {
    "example_id": 252,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "c, m, h, s = 3, 1/4, 1/6, 1/12\ntotal_pie_number = 12\n\ndef pies_with_no_ingredients(c, m, h, s, total_pie_number):\n    return int(total_pie_number - (c + m + h + s))\n\nprint(pies_with_no_ingredients(c, m, h, s, total_pie_number))"
  },
  {
    "example_id": 253,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 2\nb = 40\nprint(a*b)"
  },
  {
    "example_id": 254,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1260.0"
    ],
    "annotated_answers": [
      "1260.0"
    ],
    "solution": "from math import prod\n\nresult = prod([3, 6, 10, 15, 21, 28])**(1/2)\nprint(result)"
  },
  {
    "example_id": 255,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "A = 40\nB = 25\nC = 30\nD = A - B - C\nprint(D)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.75"
    ],
    "annotated_answers": [
      "16.75"
    ],
    "solution": "print(14.6+2.15)"
  },
  {
    "example_id": 257,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "351.0"
    ],
    "solution": "amaretta_birthday, enzo_birthday = '2008-07-27', '2008-09-03'\nnum_days_celebrated = 0\nfor year in range(2008, 2017):\n    for month in range(1, 13):\n        if month in [7, 8]:\n            num_days_celebrated += 1\n        if month == 9:\n            break\nprint(num_days_celebrated)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-550.0"
    ],
    "annotated_answers": [
      "550.0"
    ],
    "solution": "gallons_saved = 12000 / 48 - 12000 / 15\nprint(gallons_saved)"
  },
  {
    "example_id": 259,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 0\nwhile N < 10:\n    if (21420 * N) % 6 == 0:\n        print(N)\n    N += 1"
  },
  {
    "example_id": 260,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "greatest_odd_integer = 5\nwhile greatest_odd_integer > 1:\n    if greatest_odd_integer % 5 == 0:\n        break\n    greatest_odd_integer -= 1\nprint(greatest_odd_integer)"
  },
  {
    "example_id": 261,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x, y = 0, 0\nwhile 2**x*3**y!= 1296:\n    x += 1\n    y += 1\nprint(x+y)"
  },
  {
    "example_id": 262,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.9999999999999996"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b = 1/31, 1/93\nprint(a/b)"
  },
  {
    "example_id": 263,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "# Find the first term in the sequence that is greater than 20\nfirst_greater_than_20 = 21\n# Find the number of terms before first_greater_than_20\nnumber_of_less_than_or_equal_to_20 = first_greater_than_20 - 1\nprint(number_of_less_than_or_equal_to_20)"
  },
  {
    "example_id": 264,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(315, 108))"
  },
  {
    "example_id": 265,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "lst = [71, 72, 73, 74, 75]\nprint(sum(lst)/len(lst))"
  },
  {
    "example_id": 266,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.303"
    ],
    "annotated_answers": [
      "0.303"
    ],
    "solution": "print(0.3+0.003)"
  },
  {
    "example_id": 267,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "avg_of_20 = 30\navg_of_30 = 20\navg_of_50 = (avg_of_20 * 20 + avg_of_30 * 30) / 50\nprint(avg_of_50)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3*5 - 2*3\nprint(x)"
  },
  {
    "example_id": 269,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = int(35 / 13) - 8\nprint(x)"
  },
  {
    "example_id": 270,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n % 2 == 0 and n!= 2:\n        return False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_factor(n, p):\n    return n % p == 0\n\ndef get_prime_factors(n):\n    factors = []\n    for i in range(2, int(sqrt(n)) + 1):\n        if is_prime_factor(n, i):\n            factors.append(i)\n    return factors\n\ndef get_prime_factor_product(n):\n    factors = get_prime_factors(n)\n    product = 1\n    for i in factors:\n        product *= i\n    return product\n\ndef get_two_digit_primes():\n    primes = []\n    for i in range(10, 100):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef get_one_digit_primes():\n    primes = []\n    for i in range(2, 10):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef get_smallest_product(primes):\n    smallest = 1\n    for i in primes:\n        for j in primes:\n            if i!= j:\n                product = i * j\n                if product < smallest:\n                    smallest = product\n    return smallest\n\ndef get_product(n):\n    factors = get_prime_factors(n)\n    product = 1\n    for i in factors:\n        product *= i\n    return product\n\ndef get_two_digit_prime_product(n):\n    factors = get_prime_factors(n)\n    product = 1\n    for i in factors:\n        if i >= 10 and i < 100:\n            product *= i\n    return product\n\ndef get_one_digit_prime_product(n):\n    factors = get_prime_factors(n)\n    product = 1\n    for i in factors:\n        if i < 10:\n            product *= i\n    return product\n\ndef get_smallest_product_of_one_one_digit_prime_and_two_distinct_two_digit_primes():\n    one_digit_primes = get_one_digit_primes()\n    two_digit_primes = get_two_digit_primes()\n    smallest = 1\n    for i in one_digit_primes:\n        for j in two_digit_primes:\n            for k in two_digit_primes:\n                if j!= k:\n                    product = i * j * k\n                    if product < smallest:\n                        smallest = product\n    return smallest\n\nprint(get_smallest_product_of_one_one_digit_prime_and_two_distinct_two_digit_primes())"
  },
  {
    "example_id": 271,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.333333333333334"
    ],
    "annotated_answers": [
      "3.24"
    ],
    "solution": "import math\ndef average(lst):\n    return sum(lst) / len(lst)\nlst = [14, 5, 9, 7, 7, 8]\nprint(average(lst))"
  },
  {
    "example_id": 272,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "from math import factorial\n\ndef combinations(n, r):\n    return factorial(n) // (factorial(r) * factorial(n - r))\n\nn = 8\nr = 3\nprint(combinations(n, r))"
  },
  {
    "example_id": 273,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "297.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "integer = 5 * 4\nprint(integer + 277)"
  },
  {
    "example_id": 274,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "rope_length = 15 - 3\nprint(rope_length)"
  },
  {
    "example_id": 275,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.95"
    ],
    "annotated_answers": [
      "4.95"
    ],
    "solution": "a = 4.5\nb = 4.45\nc = 0.45\nd = 0.54\nsum = max(a, b, c, d) + min(a, b, c, d)\nprint(sum)"
  },
  {
    "example_id": 276,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "from math import factorial\n\nn = 97\nlargest_prime_factor = 1\nfor i in range(2, int(n**0.5) + 1):\n    if n % i == 0 and is_prime(i):\n        largest_prime_factor = i\n\nprint(largest_prime_factor)"
  },
  {
    "example_id": 277,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "median = 12\nmean = (12 + 21 + 6 + 11 + 30)/5\nprint(median + mean)"
  },
  {
    "example_id": 278,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.75"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "# Calculate mean for first four tests\nsum_of_scores = 92 + 73 + 79 + 87\nnumber_of_scores = 4\nmean = sum_of_scores / number_of_scores\n\n# Calculate the minimum score for the final test\nminimum_score = mean - 80\nprint(minimum_score)"
  },
  {
    "example_id": 279,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.4000014000014"
    ],
    "annotated_answers": [
      "1.4"
    ],
    "solution": "print(1/0.714285)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 11\nprint(x)"
  },
  {
    "example_id": 281,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# If half of the adults are female, then 1/2 of the total number of people are female\n# If half of the female adults have exactly one biological child, then 1/2 of the female adults have a child\n# If nobody else has a child, then 1/2 of the people are children\n# If there are no other children, then 1/2 of the people are children\n# Therefore, 1/2 of the people of Mathopolis are children\nprint(0.5)"
  },
  {
    "example_id": 282,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "373.3333333333333"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "dogs_to_cats_ratio = 4/3\ntotal_animals = 280\ndogs = total_animals * dogs_to_cats_ratio\nprint(dogs)"
  },
  {
    "example_id": 283,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Area of a square is side length squared\n# Area of a circle is pi times radius squared\n# Circumference is 2 times pi times radius\n# Given circumference is 12 pi, so radius is 6\n# Area is 6 squared, or 36\nprint(36)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": ""
  },
  {
    "example_id": 285,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "total_cost = 12\ntip = 15\ntip_percent = tip / total_cost\nprint(tip_percent)"
  },
  {
    "example_id": 286,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "candy_pieces = 44\nmax_kids = candy_pieces // 3\nprint(max_kids)"
  },
  {
    "example_id": 287,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "from sympy import sqrt\nprint(sqrt(30*21*70))"
  },
  {
    "example_id": 288,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.9444444444444444"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "sides = 170 / 180\nprint(sides)"
  },
  {
    "example_id": 289,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.38025641025641027"
    ],
    "annotated_answers": [
      "0.38"
    ],
    "solution": "lifespan = 75\nyears = 52\npounds = 1483\nweekly_pounds = pounds / (years * lifespan)\nprint(weekly_pounds)"
  },
  {
    "example_id": 290,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-120.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "original_number = -20 * 6\nprint(original_number)"
  },
  {
    "example_id": 291,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "357.0",
      "357.0",
      "2400.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef get_prime_factors(n):\n    prime_factors = []\n    for i in get_primes(n):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    return prime_factors\n\ndef get_product_of_prime_factors(n):\n    product = 1\n    for i in get_prime_factors(n):\n        product *= i\n    return product\n\ndef get_num_of_primes(n):\n    num_of_primes = 0\n    for i in get_primes(n):\n        num_of_primes += 1\n    return num_of_primes\n\ndef get_num_of_primes_to_make(n):\n    num_of_primes = 0\n    for i in get_primes(n):\n        num_of_primes += 1\n    return num_of_primes\n\nn = 2400\nnum_of_primes_to_make = get_num_of_primes_to_make(n)\nnum_of_primes = get_num_of_primes(n)\nproduct = get_product_of_prime_factors(n)\nprint(num_of_primes_to_make)\nprint(num_of_primes)\nprint(product)"
  },
  {
    "example_id": 292,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "robot_speed = 2.5\nhallway_length = 90 / robot_speed\nprint(hallway_length)"
  },
  {
    "example_id": 293,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "from math import sqrt\np = 28\nh = 15\ns = p + h\narea = 0.5 * p * h\nperimeter = s\nprint(perimeter)"
  },
  {
    "example_id": 294,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "x = 11\nprint(x)"
  },
  {
    "example_id": 295,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "total_chairs = 11 * 11\ntotal_odd_chairs = (total_chairs + 1) // 2\nprint(total_odd_chairs)"
  },
  {
    "example_id": 296,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-90.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "angle = 180 - 3 * 90\nprint(angle)"
  },
  {
    "example_id": 297,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1201.7777777777776"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "side_length = 104 / 3\nsquare_area = side_length * side_length\nprint(square_area)"
  },
  {
    "example_id": 298,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "from math import gcd, lcm\n\ndef lcm_of_smaller_ints(n):\n    lcm = 1\n    for i in range(2, n):\n        lcm = lcm * i // gcd(lcm, i)\n    return lcm\n\nprint(lcm_of_smaller_ints(8))"
  },
  {
    "example_id": 299,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define a function that checks if a number is a factor of another number\ndef is_factor(number, another_number):\n    return (number % another_number) == 0\n\n# Define a function that checks if a number is a positive two-digit integer\ndef is_positive_two_digit_integer(number):\n    return (number > 9) and (number < 100)\n\n# Initialize a count of factors\ncount = 0\n\n# Loop through numbers from 10 to 99\nfor number in range(10, 100):\n    # Check if the number is a factor of 100 and 150\n    if is_factor(number, 100) and is_factor(number, 150):\n        # Increment the count\n        count += 1\n\n# Print the count\nprint(count)"
  },
  {
    "example_id": 300,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "angle_p = 5\nangle_q = 1\nangle_r = angle_p/angle_q\nprint(angle_r)"
  },
  {
    "example_id": 301,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import sqrt\n\nexpression = (sqrt(24)/sqrt(30))/(sqrt(20)/(3*sqrt(25)))\nprint(expression)"
  },
  {
    "example_id": 302,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 5\nprint(x)"
  },
  {
    "example_id": 303,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "from math import factorial\nn = 4\nk = 1\ndistinct_numbers = factorial(n) / factorial(n - k)\nprint(distinct_numbers)"
  },
  {
    "example_id": 304,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "french_students = 8\nspanish_students = 12\nboth_students = 3\ngroup_size = 30\nnot_french_nor_spanish_students = group_size - french_students - spanish_students - both_students\nprint(not_french_nor_spanish_students)"
  },
  {
    "example_id": 305,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "10.25"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "import sympy as sym\nx = sym.symbols('x')\nn = 8\nm = 4.5\nx_list = [5, 8, 10, 18, 19, 28, 30, x]\nmean = sum(x_list) / n\ndifference = m - mean\nprint(difference)"
  },
  {
    "example_id": 306,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import math\nx = 13\nprint(x)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.4"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 12 / 5\nprint(x + 3)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "distinct_numbers = 1 + 1 + 1\nprint(distinct_numbers)"
  },
  {
    "example_id": 309,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c = 3, 4, 5\nnumerator = a**2 * b\ndenominator = c * a * b\nanswer = numerator / denominator * 10 / 6\nprint(answer)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import factorial\nn = 5\nk = 2\ncombinations = factorial(n) // (factorial(k) * factorial(n-k))\nprint(combinations)"
  },
  {
    "example_id": 311,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\nAD = sympy.sqrt(a**2 - c**2)\narea = (a*b*AD)/2\nprint(area)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 21\nprint(x)"
  },
  {
    "example_id": 313,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "ambulance_speed = 40\nambulance_route = 20\nhelicopter_speed = 1\nair_route = 15\ntakeoff = 3\nlanding = 3\nambulance_time = ambulance_route / ambulance_speed\nhelicopter_time = air_route / helicopter_speed + takeoff + landing\nprint(helicopter_time - ambulance_time)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x)"
  },
  {
    "example_id": 315,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "from sympy import symbols, sqrt, pprint\nh, b = symbols('h, b')\nA = (h**2 * b) / 2\npprint(A)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "print(5**3 - (3**2 - 5)**3)"
  },
  {
    "example_id": 317,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "setter_preference, spiker_preference = 5, 4\ntotal_players = 10\ntotal_teams = total_players // 2\nsetter_options = total_teams // setter_preference\nspiker_options = total_teams // spiker_preference\ntotal_setters = setter_options * setter_preference\ntotal_spikers = spiker_options * spiker_preference\ntotal_players_per_team = total_setters + total_spikers\ntotal_teams = total_players // total_players_per_team\nprint(total_teams)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "129.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "import math\ntrapezoid_perimeter = 30 + 50 + 25 + 24\nprint(trapezoid_perimeter)"
  },
  {
    "example_id": 319,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "eric_distance_from_sam = 10 - 8\nprint(eric_distance_from_sam)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "smallest = 5 - 4\nprint(smallest)"
  },
  {
    "example_id": 321,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(len(str(31/11111).split('.')[1]))"
  },
  {
    "example_id": 322,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "cats = 2\nalpacas = 5\npandas = 3\ntotal_coolness = cats * alpacas + pandas * cats\nprint(total_coolness)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "n = -10 // 5 - 3\nprint(n)"
  },
  {
    "example_id": 324,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "angles = [3, 5, 7]\nlargest_angle = max(angles)\nprint(largest_angle)"
  },
  {
    "example_id": 325,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0",
      "56.0",
      "91.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for n in [1, 2, 3, 4, 8, 14, 17, 29, 56, 91]:\n    if n % 7 == 0 or n % 34 == 0:\n        print(n)"
  },
  {
    "example_id": 326,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "import math\n\nperimeter = 2 * (12 + 16)\nprint(perimeter)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "supplement = 180 - 50\nprint(supplement)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "# This is a Python function\ndef three_digit_positive_integers():\n    count = 0\n    for i in range(100, 1000):\n        count += 1\n    return count\n\nprint(three_digit_positive_integers())"
  },
  {
    "example_id": 329,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "x = 60 - 50\nprint(x)"
  },
  {
    "example_id": 330,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Enrico's list\nenrico = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63]\n# Marie's list\nmarie = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]\n\n# count how many elements in Marie's list are in Enrico's list\ncount = 0\nfor element in marie:\n    if element in enrico:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 331,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "440.99999999999994"
    ],
    "annotated_answers": [
      "735.0"
    ],
    "solution": "room_area = 9 * 2\ncarpet_cost = room_area * 21.95\npadding_cost = room_area * 2.55\ntotal_cost = carpet_cost + padding_cost\nprint(total_cost)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "# Find the first 9 prime numbers\nprime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n# Find the sum of the first 9 prime numbers\nsum = 0\nfor prime_number in prime_numbers[:9]:\n    sum += prime_number\nprint(sum)"
  },
  {
    "example_id": 333,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "number_of_trays = 6\nnumber_of_muffins_in_each_tray = 20\nnumber_of_croissants_in_each_tray = 5\nnumber_of_muffins_in_original_batch = (number_of_trays * number_of_muffins_in_each_tray) + (number_of_trays * number_of_croissants_in_each_tray)\nprint(number_of_muffins_in_original_batch)"
  },
  {
    "example_id": 334,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "298.0"
    ],
    "solution": "from math import sqrt\n\ndef is_perfect_square(n):\n    return int(sqrt(n))**2 == n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(start, end):\n    return sum(n for n in range(start, end + 1) if is_prime(n) and is_perfect_square(n + 1))\n\nprint(sum_of_primes(100, 200))"
  },
  {
    "example_id": 335,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(int(round(pow(1/23, 1000))))"
  },
  {
    "example_id": 336,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "side_of_larger_square = 9 * 4\nprint(side_of_larger_square)"
  },
  {
    "example_id": 337,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "510.0"
    ],
    "annotated_answers": [
      "510.0"
    ],
    "solution": "# largest multiple of 30 which is less than 520\n# 30 * 17\nprint(30 * 17)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "from math import factorial\n\ndef combinations(n, r):\n    return factorial(n) // (factorial(r) * factorial(n - r))\n\nprint(combinations(20, 2))"
  },
  {
    "example_id": 339,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "number = 12\ndouble = number * 2\nresult = (double + 200) / 4 - (number / 2)\nprint(result)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# 6 members from Skateer University\n# 6 members from Iceburg Tech\nhandshakes = 6 * 6\nprint(handshakes)"
  },
  {
    "example_id": 341,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "387420489.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "fillings = ['turkey', 'ham', 'roast beef', 'cheese', 'tomatoes', 'peppers','sprouts', 'oranges', 'licorice']\nsandwiches = 9\nprint(sandwiches ** sandwiches)"
  },
  {
    "example_id": 342,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Average of Blake\nb_avg = 78\n\n# Average of Jenny\nj_avg = b_avg + 10\n\n# Difference between Jenny and Blake\ndifference = j_avg - b_avg\nprint(difference)"
  },
  {
    "example_id": 343,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "77.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "c, j, r = 77, 77/2, 77/4\nprint(c)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "hockey_players = 33\nbaseball_players = 24\nneither_players = 8\nboth_players = hockey_players + baseball_players - neither_players\nprint(both_players)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "nuts_pounds, pecans_ratio, walnuts_ratio, cashews_ratio = 9, 2, 3, 1\nwalnuts_pounds = nuts_pounds * walnuts_ratio / (pecans_ratio + walnuts_ratio + cashews_ratio)\nprint(walnuts_pounds)"
  },
  {
    "example_id": 346,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "angle = 3.20 / 12 * 360\nprint(angle)"
  },
  {
    "example_id": 347,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef multiples_of_3(n):\n    return n % 3 == 0\n\ndef count_multiples_of_3(n):\n    count = 0\n    for i in range(100, n):\n        if is_palindrome(i) and multiples_of_3(i):\n            count += 1\n    return count\n\nprint(count_multiples_of_3(1000))"
  },
  {
    "example_id": 348,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "quarters_per_inch = 8\ninches_per_foot = 12\ntotal_quarters = quarters_per_inch * inches_per_foot\nprint(total_quarters)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "total_cats = 24\ncats_that_catch_mice = 17\ncats_with_black_fur = 10\nsmallest_possible_number_of_cats_that_do_not_catch_mice_that_have_black_fur = total_cats - cats_that_catch_mice - cats_with_black_fur\nprint(smallest_possible_number_of_cats_that_do_not_catch_mice_that_have_black_fur)"
  },
  {
    "example_id": 350,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for i in range(2, 2008):\n    if i % 2 == 0:\n        if pow(i, 3) % 2 == 0:\n            print(i)"
  },
  {
    "example_id": 351,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 1\nwhile -3*n + 3 > -11:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 352,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Rational\n\ndef nth_digit(frac, n):\n    \"\"\"\n    Calculate the nth digit of a fraction.\n    >>> nth_digit(Rational(4, 15), 1000)\n    2\n    \"\"\"\n    return int(frac * 10 ** n) % 10\n\nprint(nth_digit(Rational(4, 15), 1000))"
  },
  {
    "example_id": 353,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 8\ndef hug(n):\n    if n == 1:\n        return 1\n    else:\n        return hug(n-1) + 1\nprint(hug(n))"
  },
  {
    "example_id": 354,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "A = 2 * 2 + 10\nprint(A)"
  },
  {
    "example_id": 355,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "53.0",
      "71.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def is_prime(n):\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_digits(n):\n    return sum(int(d) for d in str(n))\n\nfor i in range(10, 100):\n    if is_prime(i) and sum_digits(i) == 8:\n        print(i)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "divisible_by_2 = 2\ndivisible_by_3 = 3\ndivisible_by_4 = 4\ndivisible_by_5 = 5\ndivisible_by_6 = 6\ndivisible_by_7 = 7\ndivisible_by_8 = 8\ndivisible_by_9 = 9\ndivisible_by_10 = 10\ndivisible_by_11 = 11\ndivisible_by_12 = 12\ndivisible_by_13 = 13\ndivisible_by_14 = 14\ndivisible_by_15 = 15\nprint(divisible_by_2, divisible_by_3, divisible_by_4, divisible_by_5, divisible_by_6, divisible_by_7, divisible_by_8, divisible_by_9, divisible_by_10, divisible_by_11, divisible_by_12, divisible_by_13, divisible_by_14, divisible_by_15)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(1313, 1001))"
  },
  {
    "example_id": 358,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.9999999999999939"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(pow(7/16, 111)*pow(16/7, 111))"
  },
  {
    "example_id": 359,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 13 - 5\nprint(k)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# wallops = 6 ballops\n# ballops = 3 fallops\n# 1 wallop = 6 ballops\n# 1 ballop = 3 fallops\n# 110 fallops = 11 fallops * 10 wallops\n# 10 wallops = 6 ballops\n# 10 wallops = 3 ballops\n# 110 fallops = 30 wallops\nprint(30)"
  },
  {
    "example_id": 361,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.1"
    ],
    "annotated_answers": [
      "24.1"
    ],
    "solution": "averages = [25.0, 24.3, 24.1, 23.8, 23.4]\nmedian = sorted(averages)[2]\nprint(median)"
  },
  {
    "example_id": 362,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Length of one side of the rectangular section\nside_length = 3\n# Length of one side of a square tile\nside_length_tile = 6\n# Number of tiles needed to cover one side of the rectangular section\nnum_tiles_side = side_length // side_length_tile\n# Total number of tiles needed to cover the rectangular section\nnum_tiles = num_tiles_side * num_tiles_side\nprint(num_tiles)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "import math\noctagon_perimeter = 10 + 6 + 4 + 8\nprint(octagon_perimeter)"
  },
  {
    "example_id": 364,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x_values = []\nfor x in range(0, 300, 6):\n    if x**2 < 200:\n        x_values.append(x)\nprint(len(x_values))"
  },
  {
    "example_id": 365,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.05238095238095239"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "k_rate, b_rate = 42, 45\nk_dist, b_dist = 9, 12\nk_time, b_time = k_dist / k_rate, b_dist / b_rate\nb_time = b_time - k_time\nprint(b_time)"
  },
  {
    "example_id": 366,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.1213203435596424"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import math\nh = math.sqrt(27 / 6)\nprint(h)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "162.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "total = 0\nfor i in range(100, 1000):\n    if str(i).count('0') == 1:\n        total += 1\nprint(total)"
  },
  {
    "example_id": 368,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "cookies_made = 15\nchocolate_chips_per_cup = 8\nchocolate_chips_made = int(cookies_made / chocolate_chips_per_cup)\nprint(chocolate_chips_made)"
  },
  {
    "example_id": 369,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "294780.0"
    ],
    "annotated_answers": [
      "1020.0"
    ],
    "solution": "lcm = 51*68*85\nprint(lcm)"
  },
  {
    "example_id": 370,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "x = 3\nprint(6*x + 5)"
  },
  {
    "example_id": 371,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2006.0"
    ],
    "annotated_answers": [
      "2013.0"
    ],
    "solution": "def has_common_factor(a, b):\n    if a % b == 0:\n        return True\n    else:\n        return False\n\ndef split_num(n):\n    return int(str(n)[:-1]), int(str(n)[-1])\n\ndef find_next_year(start_year, end_year):\n    for year in range(start_year+1, end_year+1):\n        if has_common_factor(year, 100):\n            return year\n    return None\n\ndef main():\n    start_year = 2005\n    end_year = 2006\n    first_odd_year = find_next_year(start_year, end_year)\n    if first_odd_year:\n        print(first_odd_year)\n    else:\n        print(\"No odd-numbered year after {} has the property.\".format(end_year))\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 372,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.28122915435089",
      "-54.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b = 4/8, 8/37\nprint(a**55 * b**55)"
  },
  {
    "example_id": 373,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "143.18126641457803"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import math\n\ndef get_angle_from_side_and_opposite_side(side, opposite_side):\n    return math.degrees(math.atan(opposite_side/side))\n\ndef get_side_from_angle_and_opposite_side(angle, opposite_side):\n    return opposite_side/math.tan(math.radians(angle))\n\ndef get_angle_from_side_and_hypotenuse(side, hypotenuse):\n    return math.degrees(math.acos(side/hypotenuse))\n\ndef get_hypotenuse_from_side_and_angle(side, angle):\n    return side/math.cos(math.radians(angle))\n\ndef get_perimeter(side):\n    return 4*side\n\ndef get_area(side):\n    return side**2\n\nx = get_side_from_angle_and_opposite_side(2, 5)\nprint(x)"
  },
  {
    "example_id": 374,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "length = 1\nwidth = 1\nside_length = 4\narea = length * width\ntiles = area // side_length\nprint(tiles)"
  },
  {
    "example_id": 375,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0",
      "14.0",
      "3.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "# Using modulo\nimport math\ntwenty_four_hours = 24 * 60\nfive_minutes = 5 * 60\ntwo_minutes = 2 * 60\ncount = 0\nfor i in range(twenty_four_hours):\n    if i % five_minutes == 0 or i % two_minutes == 0:\n        count += 1\nprint(count)\n\n# Using modulo\nimport math\ntwenty_four_hours = 24 * 60\nfive_minutes = 5 * 60\ntwo_minutes = 2 * 60\ncount = 0\nfor i in range(twenty_four_hours):\n    if i % five_minutes == 0:\n        count += 1\n    elif i % two_minutes == 0:\n        count += 1\nprint(count)\n\n# Using modulo\nimport math\ntwenty_four_hours = 24 * 60\nfive_minutes = 5 * 60\ntwo_minutes = 2 * 60\ncount = 0\nfor i in range(twenty_four_hours):\n    if i % five_minutes == 0 and i % two_minutes == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "print((2**20 + 2**20 + 2**20 + 2**21) // 2**17)"
  },
  {
    "example_id": 377,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "cherry_danishes = 3\ncheese_danishes = 2\ntotal_danishes = cherry_danishes + cheese_danishes\nprint(total_danishes)"
  },
  {
    "example_id": 378,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1500.0"
    ],
    "solution": "x = 1000"
  },
  {
    "example_id": 379,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "starting_height = 10\nrate_of_rise = 2\ntime = 25\nheight = starting_height + (rate_of_rise * time)\nprint(height)"
  },
  {
    "example_id": 380,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "total_matches = 4 * 4\nprint(total_matches)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2001.0",
      "2002.0",
      "2003.0",
      "2004.0",
      "2005.0",
      "2006.0",
      "2007.0",
      "2008.0",
      "2009.0",
      "2010.0"
    ],
    "annotated_answers": [
      "5999.0"
    ],
    "solution": "less_than = 8000\ngreater_than = 2000\nn = 10000\nfor i in range(n):\n    if i < less_than and i > greater_than:\n        print(i)"
  },
  {
    "example_id": 382,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8000.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "# Area of the original garden\narea = 2 * 2 * 2000\n\n# Perimeter of the original garden\nperimeter = 2 * (2 * 2000)\n\n# Area of the new garden\nnew_area = 2 * 2 * 2000\n\n# Perimeter of the new garden\nnew_perimeter = 2 * 2 * 2000\n\n# Relationship between the old and new garden\nratio = perimeter / new_perimeter\n\n# Area of the old garden\nold_area = ratio * new_area\n\nprint(old_area)"
  },
  {
    "example_id": 383,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "784.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "perimeter = 28\narea = perimeter ** 2\nprint(area)"
  },
  {
    "example_id": 384,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "168.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "x = 14 * 3 * 4\nprint(x)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "from math import gcd\nprint(gcd(6**3, 3**6))"
  },
  {
    "example_id": 386,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1**(2**235423523))"
  },
  {
    "example_id": 387,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Alina tells Joe that her number is a factor of 9\n# Joe tells Alina that it is a factor of 12\n# if the number is not 1, what is it?\nif 9 % 12 == 0:\n    print(\"The number is 1\")\nelse:\n    print(\"The number is not 1\")"
  },
  {
    "example_id": 388,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "total_cars = 30\nred_cars = 1/3 * total_cars\nfour_door_cars = 0.5 * total_cars\ntwo_door_cars = 8\nwhite_cars = two_door_cars\ntotal_four_door_cars = red_cars + four_door_cars\nprint(total_four_door_cars)"
  },
  {
    "example_id": 389,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "156.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "import math\nh = 12\nw = 3\nl = 8\narea = h * w + l * w + l * h\nprint(area)"
  },
  {
    "example_id": 390,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1056.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "from math import gcd, lcm\n\ndef least_common_multiple(x, y):\n    return x * y // gcd(x, y)\n\ndef greatest_common_factor(x, y):\n    while x % y!= 0:\n        x, y = y, x % y\n    return y\n\nlcm_22_48 = least_common_multiple(22, 48)\ngcf_22_48 = greatest_common_factor(22, 48)\nprint(lcm_22_48 * gcf_22_48)"
  },
  {
    "example_id": 391,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "area_of_square_1 = 25\narea_of_square_2 = 49\narea_of_rectangle_3 = area_of_square_1 + area_of_square_2\nprint(area_of_rectangle_3)"
  },
  {
    "example_id": 392,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "136.0",
      "15.0",
      "26.0",
      "554.0",
      "12.0",
      "18.0",
      "22.0",
      "49.0",
      "64.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "import pandas as pd\ndata = {'Aiken': [124, 141, 130, 143, 136],\n        'Bamberg': [17, 15, 15, 14, 11],\n        'Barnwell': [25, 22, 26, 28, 29],\n        'Berkeley': [583, 557, 554, 553, 524],\n        'Calhoun': [15, 12, 10, 18, 11],\n        'Cherokee': [19, 13, 18, 13, 19],\n        'Chesterfield': [46, 18, 13, 22, 29],\n        'Colleton': [64, 49, 52, 46, 41]}\ndf = pd.DataFrame(data)\nprint(df.median())"
  },
  {
    "example_id": 393,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "current_enrollment = 980\ncapacity = 1100\nincrease_rate = 0.05\nfor year in range(1, 1000):\n    new_enrollment = current_enrollment + current_enrollment * increase_rate\n    if new_enrollment > capacity:\n        print(year)\n        break\n    current_enrollment = new_enrollment"
  },
  {
    "example_id": 394,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.17294900221728"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "usd = 300\npounds = usd/1.64\neuros = usd/1.32\nhalf_pounds = pounds/2\nhalf_euros = euros/2\nprint(half_euros - half_pounds)"
  },
  {
    "example_id": 395,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "total_points = 90\nnumber_of_tests = 6\nnumber_of_final_tests = 2\ntest_points = total_points / number_of_tests\nfinal_points = test_points * number_of_final_tests\nprint(final_points)"
  },
  {
    "example_id": 396,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "87.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "gestation_period = 609\nweeks = gestation_period / 7\nprint(weeks)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-34.0"
    ],
    "annotated_answers": [
      "-49.0"
    ],
    "solution": "x = 2*34 - 3*34\nprint(x)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "print((1421 // 7 + 47) // 50 * 9)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0",
      "34.0",
      "43.0",
      "62.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "for i in range(10, 100):\n    if i % 10 == 0:\n        continue\n    if i % 100 == 0:\n        continue\n    if (i % 10) * (i // 10) == 12:\n        print(i)"
  },
  {
    "example_id": 400,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "students_in_homeroom = 18 + 13 + 5\nprint(students_in_homeroom)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "3.0",
      "6.0",
      "15.0",
      "21.0",
      "36.0",
      "45.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 10\nsum = 0\nfor i in range(10):\n    sum += i\n    if sum % 3 == 0:\n        print(sum)"
  },
  {
    "example_id": 402,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "numbers = [-36, -29, -22, -15, -8, -1, 8, 15, 22, 29, 36, 41, 48]\nprint(len(numbers))"
  },
  {
    "example_id": 403,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import sympy\nAB = 25\nBC = 14\nAD = sympy.Rational(1, 2) * AB\nprint(AD)"
  },
  {
    "example_id": 404,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# Eyebrows\nn_eyebrows = 2\n\n# Eyes\nn_eyes = 1\n\n# Ears\nn_ears = 2\n\n# Lips\nn_lips = 2\n\n# Shoes\nn_shoes = 2\n\n# Hair\nn_hair = 3\n\n# Total\nn_personalities = n_eyebrows * n_eyes * n_ears * n_lips * n_shoes * n_hair\n\nprint(n_personalities)"
  },
  {
    "example_id": 405,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.5999999999999996"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 12\ny = x * 0.30\nprint(y)"
  },
  {
    "example_id": 406,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# Import the math toolbox\nimport math\n\n# Define the variables\nscience_club_size = 15\npercentage_of_science_club = 0.3\npercentage_of_science_club_in_math_club = 0.8\ntotal_math_club_size = 0\n\n# Define the function\ndef math_club_size(science_club_size):\n    math_club_size = int(math.floor(science_club_size * percentage_of_science_club * percentage_of_science_club_in_math_club))\n    return math_club_size\n\n# Call the function\ntotal_math_club_size = math_club_size(science_club_size)\n\n# Print the result\nprint(total_math_club_size)"
  },
  {
    "example_id": 407,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "dad_steps = 30\nmax_steps = dad_steps // 10\nprint(max_steps)"
  },
  {
    "example_id": 408,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(8//2//2 + 6)"
  },
  {
    "example_id": 409,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.85786437626905"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from math import sqrt\n\n# Area of rectangle ABDC\narea_adc = 40\n# Area of rectangle MBCN\narea_mbcn = area_adc - sqrt(200)\n\nprint(area_mbcn)"
  },
  {
    "example_id": 410,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "import math\ndef trisection(a, b):\n    return 180 - a - b\ndef trisector(a, b, c):\n    return trisection(a, b) + trisection(b, c) + trisection(c, a)\nA, B, C = 39, 14, 180 - 39 - 14\nBPC = trisector(A, B, C)\nprint(BPC)"
  },
  {
    "example_id": 411,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31855013.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import math\nbase = 317\nexp = 3\nresult1 = base ** exp\nbase = 8\nexp = 3\nresult2 = base ** exp\nbase = 2\nexp = 3 ** 2\nresult3 = base ** exp\nresult = result1 + result2 - result3\nprint(result)"
  },
  {
    "example_id": 412,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "225.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "print(15**2)"
  },
  {
    "example_id": 413,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "n = 10\ncombinations = n * (n-1) / 2\nprint(combinations)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97969.0"
    ],
    "annotated_answers": [
      "97969.0"
    ],
    "solution": "print(((97969)**0.5)**2)"
  },
  {
    "example_id": 415,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "891.0"
    ],
    "annotated_answers": [
      "891.0"
    ],
    "solution": "x = 11 * (1000 // 11) + 11\ny = 11 * (11**2 // 11) - 11\nprint(x - y)"
  },
  {
    "example_id": 416,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "scores = [100, 100, 99, 98, 95]\nmisplaced_score = scores[0]\nprint(misplaced_score)"
  },
  {
    "example_id": 417,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.141592653589793"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\nside_length = 16\nperimeter = 8 * math.pi\nside_count = 8\n\nside_length_octagon = perimeter / side_count\n\nprint(side_length_octagon)"
  },
  {
    "example_id": 418,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "260.0"
    ],
    "annotated_answers": [
      "260.0"
    ],
    "solution": "# 26 letters and 10 numbers\nnum_of_license_plates = 26 * 10\nprint(num_of_license_plates)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "979.0"
    ],
    "annotated_answers": [
      "291.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import isprime\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime(n):\n    for i in range(10, n + 1):\n        if isprime(i) and is_prime(i):\n            return i\n\ndef find_prime_pair(n):\n    for i in range(10, n + 1):\n        j = n - i\n        if isprime(i) and isprime(j) and is_prime(i) and is_prime(j):\n            return i, j\n\ndef find_prime_pair_product(n):\n    i, j = find_prime_pair(n)\n    return i * j\n\nprint(find_prime_pair_product(100))"
  },
  {
    "example_id": 420,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "smaller_num = 5\nlarger_num = 10\nsum = smaller_num + larger_num\ndiff = 60 - (2 * larger_num)\nprint(larger_num)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "bill_time = 400/50\nsam_time = 400/40\nprint(sam_time - bill_time)"
  },
  {
    "example_id": 422,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nradius = sympy.Symbol('radius')\ndiameter = 16\narea = sympy.pi * radius ** 2\ndecrease_radius = 48 * sympy.pi / area\nprint(decrease_radius)"
  },
  {
    "example_id": 423,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.605551275463989"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sqrt\n# Point A is (0,0)\n# Walk two meters north to point B\n# Walk three meters east to point B\n# Walk two meters north to point B\n# Length of AB is sqrt((3)^2 + (2)^2) = sqrt(9 + 4) = sqrt(13)\nprint(sqrt(13))"
  },
  {
    "example_id": 424,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "n = 18\nm = 42\nfor i in range(1, n+1):\n    if n % i == 0:\n        if m % i == 0:\n            print(i)\n            break"
  },
  {
    "example_id": 425,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = 1/2"
  },
  {
    "example_id": 426,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Area of a right triangle = base * height\n# Length of the hypotenuse = 20 cm\n# Area = (12 cm * 20 cm) / 2 = 120 cm^2\nprint(120)"
  },
  {
    "example_id": 427,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "n = 3\nk = 5\nfrom math import factorial\nprint(factorial(k) // (factorial(k-n) * factorial(n)))"
  },
  {
    "example_id": 428,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.6"
    ],
    "annotated_answers": [
      "0.6"
    ],
    "solution": "print(round(4/7, 1))"
  },
  {
    "example_id": 429,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 20\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef prime_factors(n):\n    factors = []\n    while n > 1:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n = n // i\n                break\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef prime_factors_of_factorial(n):\n    return prime_factors(factorial(n))\n\nprint(len(set(prime_factors_of_factorial(n))))"
  },
  {
    "example_id": 430,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3720.0"
    ],
    "annotated_answers": [
      "3720.0"
    ],
    "solution": "print(3720)"
  },
  {
    "example_id": 431,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\nn = 1\nwhile True:\n    factors = prime_factors(n)\n    if len(factors) == 2 and factors[1] - factors[0] == 10:\n        print(len(factors))\n        break\n    n += 1"
  },
  {
    "example_id": 432,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Number of blue marbles\nblue_marbles = 60 * 3 // 4\nprint(blue_marbles)"
  },
  {
    "example_id": 433,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.999846559999999"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\nx = 2.8284\nx_squared = x**2\nprint(x_squared)"
  },
  {
    "example_id": 434,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "frogs_observed, frogs_marked = 45, 10\nfrogs_estimated = frogs_observed - frogs_marked\nprint(frogs_estimated)"
  },
  {
    "example_id": 435,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-28.4"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "average = 10.6\nknown_numbers = [10, 4, 5, 20]\ntotal = sum(known_numbers)\nfifth_number = average - total\nprint(fifth_number)"
  },
  {
    "example_id": 436,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import factorint\nprime_factors = factorint(117*119)\nprint(len(prime_factors))"
  },
  {
    "example_id": 437,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16043.0"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "perfect_squares = [x**2 for x in range(1, 2501)]\nsequence = ''.join(map(str, perfect_squares))\nprint(len(sequence))"
  },
  {
    "example_id": 438,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "def gpf(n):\n    for i in range(n, 1, -1):\n        if n % i == 0 and isprime(i):\n            return i\n\ndef isprime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nprint(gpf(3105))"
  },
  {
    "example_id": 439,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import *\n\n# Define the area of each square\na = 1\n\n# Total area of the shaded region\narea = a * 12\n\n# Print the answer\nprint(area)"
  },
  {
    "example_id": 440,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "print(182 + 3 * 7 - 64 / 2 + 27 / 3)"
  },
  {
    "example_id": 441,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.079598922825289"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "import math\nx = math.degrees(math.atan((1.5)/(7.66)))\nprint(x)"
  },
  {
    "example_id": 442,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-40.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# number of people having neither a yoga mat nor a water bottle\nnum_people_without_yoga_mat_or_water_bottle = 42 - (36 + 26 + 20)\nprint(num_people_without_yoga_mat_or_water_bottle)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Number of blue marbles in the bag\nn = 5\n# Total number of marbles in the bag\nN = 20\n# Probability of selecting a blue marble at random\np = 0.5\n# Number of blue marbles to be added\nm = int(N * p - n)\nprint(m)"
  },
  {
    "example_id": 444,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "154.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "brother_pins = 66\ntotal_pins = 2 * brother_pins\npins_per_pile = total_pins / 2\npins_to_give_brother = pins_per_pile / 3\npins_left = brother_pins + pins_to_give_brother\noriginal_pins = pins_left + brother_pins\nprint(original_pins)"
  },
  {
    "example_id": 445,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "186.0"
    ],
    "annotated_answers": [
      "264.0"
    ],
    "solution": "sum = 0\nfor i in range(10, 100):\n    a, b = i // 10, i % 10\n    if a == 3 * b:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(list(range(1, 25))[4:-7])"
  },
  {
    "example_id": 447,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-18.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "x, y = 8, 0\nt = (x - 2) / 2\ny = t - 21\nprint(y)"
  },
  {
    "example_id": 448,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "# Given that the side lengths are all integer multiples of 8\n# We can construct a triangle with the side lengths of 8, 16, 24\n# The perimeter of this triangle is 8 + 16 + 24 = 48\nprint(48)"
  },
  {
    "example_id": 449,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5208333333333334"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(25/4/12)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "inches_per_yard = 36\ninches = 3/4 * inches_per_yard\nprint(inches)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1080.0"
    ],
    "annotated_answers": [
      "1080.0"
    ],
    "solution": "time_to_walk_to_school = 0.30\ntime_to_walk_to_school_in_seconds = time_to_walk_to_school * 3600\nprint(time_to_walk_to_school_in_seconds)"
  },
  {
    "example_id": 452,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "distance = 19 + 16 - 3 + 4\nprint(distance)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "distance = 17\ntime = distance / 1.7\nprint(time)"
  },
  {
    "example_id": 454,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "6.0",
      "12.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 1\nwhile n <= 12:\n    if 12 % n == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 455,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "from scipy.special import comb\nprint(comb(8, 3))"
  },
  {
    "example_id": 456,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "104.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "x = 100\nangles = [x, x, x-2, x-2, x + 2, x + 2, x + 4]\nlargest = max(angles)\nprint(largest)"
  },
  {
    "example_id": 457,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "3.0",
      "10.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nlength = 3*x + 10\nwidth = x + 12\nperimeter = 76\narea = length*width\nprint(area)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "print(9000*0.005)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.9999999999999996"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 42\nprint(pow(1/a, 4) * 2 * pow(a, 4) + pow(a, 2+1-3))"
  },
  {
    "example_id": 460,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "start_cones, noon_cones, end_cones = 72, 72 * 2/3, 72 * 2/3 * 2/3\nprint(end_cones)"
  },
  {
    "example_id": 461,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2560.0"
    ],
    "annotated_answers": [
      "2560.0"
    ],
    "solution": "bacteria_population = 10\ntime_elapsed = 8\nbacteria_population *= 2 ** time_elapsed\nprint(bacteria_population)"
  },
  {
    "example_id": 462,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "192.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "print(2**(2**3) - (2**2)**3)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "temperature_change = 1.5\ntime_interval = 15\ntemperature_increase = temperature_change * time_interval\ntemperature_in_2_hours = temperature_change * time_interval * 2\nprint(temperature_in_2_hours)"
  },
  {
    "example_id": 464,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "girls = 35\nboys = 35 - girls\nprint(boys)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "778.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "n = 1341\na, b, c = 1, 2, 3\nwhile a + b + c < n:\n    a, b, c = b, c, a + b + c\nprint(c)"
  },
  {
    "example_id": 466,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "meerkats = 10\nnights = 2\nsleep = meerkats/nights\nprint(sleep)"
  },
  {
    "example_id": 467,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "310.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Total number of pots = 600\n# Number of pots with red balloon = 600/4 = 150\n# Number of pots with blue balloon = 600/6 = 100\n# Number of pots with yellow balloon = 600/10 = 60\n# Number of pots with three different colored balloons = 150 + 100 + 60 = 310\nprint(310)"
  },
  {
    "example_id": 468,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a, b, c = 1, 2, 3\nabc = a*b*c\nmean = (a+b+c)/3\nprint(abc/mean)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.50000000000001"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import math\nside_length = 5 * math.sqrt(5)\nwidth = side_length / 2\narea = width * side_length\nprint(area)"
  },
  {
    "example_id": 470,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "shirts = 5\npants = 6\nhats = 8\noutfits = shirts * pants * hats\nprint(outfits)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# number of handshakes\nhandshakes = 10 * 9 + 6 * 10\nprint(handshakes)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1001.0",
      "1008.0",
      "1015.0",
      "1022.0",
      "1029.0",
      "1036.0",
      "1043.0",
      "1050.0",
      "1057.0",
      "1064.0"
    ],
    "annotated_answers": [
      "1001.0"
    ],
    "solution": "for i in range(1000, 10000):\n    if i % 7 == 0:\n        print(i)"
  },
  {
    "example_id": 473,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "print(round(10.0000198 * 5.9999985401 * 6.9999852))"
  },
  {
    "example_id": 474,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "486.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "sum = 0\nfor i in range(10, 100):\n    if i % 10 == 4:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 475,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "good_workers = 3\nbad_workers = 36 / 3 - 12\nprint(bad_workers)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "picture_area = 2\npicture_length = picture_area / 2\npicture_width = picture_area / 3\nquilt_length = 2 * picture_length\nquilt_width = 3 * picture_width\nquilt_area = quilt_length * quilt_width\nprint(quilt_area)"
  },
  {
    "example_id": 477,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5937.0"
    ],
    "annotated_answers": [
      "5937.0"
    ],
    "solution": "apples_picked_in_8_hours = 15832\napples_picked_in_3_hours = apples_picked_in_8_hours / 8 * 3\nprint(apples_picked_in_3_hours)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "vanilla, chocolate, strawberry, cherry = 1, 1, 1, 1\n\ndef count_stacks(n):\n    count = 0\n    while n > 0:\n        count += 1\n        n -= 1\n    return count\n\ndef can_stack(a, b, c, d):\n    if a > 0 and b > 0 and c > 0 and d > 0:\n        return True\n    else:\n        return False\n\ndef stack_scoops(a, b, c, d):\n    if can_stack(a, b, c, d):\n        return count_stacks(a) + count_stacks(b) + count_stacks(c) + count_stacks(d)\n    else:\n        return 0\n\nprint(stack_scoops(vanilla, chocolate, strawberry, cherry))"
  },
  {
    "example_id": 479,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print((-5) ** 3 + (-2) ** 3 + 2 ** 3 + 5 ** 3)"
  },
  {
    "example_id": 480,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import sqrt\nprint(sqrt(25-16)/(sqrt(25)-sqrt(16)))"
  },
  {
    "example_id": 481,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "distance = 4\nscale = 0.5\nkm = distance / scale\nprint(km)"
  },
  {
    "example_id": 482,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25000.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "circumference = 40000\ndistance = 1000000000\ntrips = distance // circumference\nprint(trips)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "# Original answer\nx = 40\ny = 50\nz = 2\n\nif x*y - 2*z == 0:\n    print(x)\nelif x*y - 2*z > 0:\n    print(y)\nelse:\n    print(z)"
  },
  {
    "example_id": 484,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.600000000000001"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "copper_weight = 48\nzinc_weight = 0.2 * copper_weight\nprint(zinc_weight)"
  },
  {
    "example_id": 485,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(92 - 45/15 - 5**2)"
  },
  {
    "example_id": 486,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.125"
    ],
    "annotated_answers": [
      "5.5"
    ],
    "solution": "length = 8.5\nfor i in range(2):\n    length /= 2\nprint(length)"
  },
  {
    "example_id": 487,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-89.0"
    ],
    "solution": "M, N = 1, 0\nprint(M+N)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# x = 12\nx = 12\nprint(x)"
  },
  {
    "example_id": 489,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "quarters = 1\nnickels = 1\npennies = 1\nsums = [quarters + nickels, quarters + pennies, nickels + pennies]\nprint(sums)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "868.7"
    ],
    "annotated_answers": [
      "868.8"
    ],
    "solution": "print(round(543.55, 1) + round(25.23, 1) + round(299.98, 1))"
  },
  {
    "example_id": 491,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "507.0"
    ],
    "annotated_answers": [
      "507.0"
    ],
    "solution": "x = 13\nwhile x <= 500:\n    x += 13\nprint(x)"
  },
  {
    "example_id": 492,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "729.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "print(9**3)"
  },
  {
    "example_id": 493,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 2**5\nb = 5**2\nprint(b - a)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import symbols, sqrt\nl = symbols('l', real=True)\narea = (l**2)/2\nprint(area)"
  },
  {
    "example_id": 495,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = (1 - (3.7/2.8)) / (1 - (3.7/2.8))\nprint(x)"
  },
  {
    "example_id": 496,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "49.0",
      "81.0",
      "121.0",
      "169.0",
      "225.0",
      "289.0",
      "361.0",
      "441.0",
      "529.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# odd perfect squares between 5 and 211\nn = 5\nwhile n < 211:\n    if n**2 % 2 == 1:\n        print(n**2)\n    n += 1"
  },
  {
    "example_id": 497,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(3 * 3 + 3 * (3 + 3) - 3 ** 3)"
  },
  {
    "example_id": 498,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def is_perfect_square(n):\n    return int(n**0.5)**2 == n\n\ndef count_perfect_square_terms(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if is_perfect_square(n - i**2):\n            count += 1\n    return count\n\nprint(count_perfect_square_terms(49))"
  },
  {
    "example_id": 499,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "PQ = 6\nQR = 6\nTR = 6\nTS = 12\nPTRS = PQ + TR + TS\nprint(PTRS)"
  },
  {
    "example_id": 500,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1250.0"
    ],
    "annotated_answers": [
      "1250.0"
    ],
    "solution": "# Convert 1200 lire to dollars\ndollars_per_liter = 1200 / 1.50\n# Convert 1,000,000 lire to dollars\ndollars_equivalent = 1000000 / dollars_per_liter\nprint(dollars_equivalent)"
  },
  {
    "example_id": 501,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.21"
    ],
    "annotated_answers": [
      "1.21"
    ],
    "solution": "numbers = [0.78, 0.12, 1.33, 1.328]\nprint(max(numbers) - min(numbers))"
  },
  {
    "example_id": 502,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.64"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "width = 0.4\narea_inner = 100\narea_outer = area_inner + (2 * width)**2\nprint(area_outer)"
  },
  {
    "example_id": 503,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "x = 2 * 2 + 7\nprint(x)"
  },
  {
    "example_id": 504,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "a = 7\nb = 13\neven_positive_integers = 0\nfor i in range(1, a*b):\n    if i % 2 == 0:\n        even_positive_integers += 1\nprint(even_positive_integers)"
  },
  {
    "example_id": 505,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "900000.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "juniors_milk = 1500\nseniors_milk = juniors_milk\nseniors_total = 600 * seniors_milk\nprint(seniors_total)"
  },
  {
    "example_id": 506,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.041666666666666664"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "elephant_speed = 19\nlion_speed = 24\ndistance = 1\ntime = distance / lion_speed\nprint(time)"
  },
  {
    "example_id": 507,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "lcm = 240\ngcd = 24\nif lcm % gcd == 0:\n    print(lcm//gcd)"
  },
  {
    "example_id": 508,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "perimeter = 60\narea = perimeter ** 2 / 12\nprint(area)"
  },
  {
    "example_id": 509,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2100.0"
    ],
    "annotated_answers": [
      "2100.0"
    ],
    "solution": "from math import sqrt\nprint(sqrt(5*10*14*21*15*20))"
  },
  {
    "example_id": 510,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "num_answers_q1, num_answers_q2, num_answers_q3 = 2, 4, 2\nnum_answers = num_answers_q1 * num_answers_q2 * num_answers_q3\nprint(num_answers)"
  },
  {
    "example_id": 511,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "flagpole_length = 15\nwoman_shadow_length = 6\nwoman_length = 5\nshadow_length = (woman_shadow_length / woman_length) * flagpole_length\nprint(shadow_length)"
  },
  {
    "example_id": 512,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7004.0"
    ],
    "annotated_answers": [
      "7004.0"
    ],
    "solution": "a = 3 * 11 * 13 * 21\nb = 2005\nprint(a - b)"
  },
  {
    "example_id": 513,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "minute_angle = 6\nhour_angle = 30\nangle = minute_angle + hour_angle\nprint(angle)"
  },
  {
    "example_id": 514,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "pints_in_quart = 2\nquarts_in_gallon = 4\nmilk_gallons = 2.5\npints_in_milk = milk_gallons * quarts_in_gallon * pints_in_quart\nprint(pints_in_milk)"
  },
  {
    "example_id": 515,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "249921.46018366027"
    ],
    "annotated_answers": [
      "54000.0"
    ],
    "solution": "import math\nside = 500\nradius = 5\narea = side**2 - math.pi*radius**2\nprint(area)"
  },
  {
    "example_id": 516,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "wands = 4\nrands = 6\nfands = 24\nwands_to_fands = wands/rands\nfands_to_wands = fands/rands\nfands_to_wands = fands_to_wands/wands_to_fands\nprint(fands_to_wands)"
  },
  {
    "example_id": 517,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def largest_prime_factor(n):\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(largest_prime_factor(78))"
  },
  {
    "example_id": 518,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(((100**0.5) - (36**0.5))**2)"
  },
  {
    "example_id": 519,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "length = 6\nwidth = 10\nnew_length = 9\nproportional_width = new_length / length * width\nprint(proportional_width)"
  },
  {
    "example_id": 520,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "print(15 + 8**2 - 3)"
  },
  {
    "example_id": 521,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "print(9/2)"
  },
  {
    "example_id": 522,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "print(-49/7)"
  },
  {
    "example_id": 523,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "111.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "# Calculate the number of multiples of 9 less than 1000\nmultiples = int((1000 - 1) / 9)\nprint(multiples)"
  },
  {
    "example_id": 524,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "integers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmean = 21\nsmallest = min(integers)\nprint(smallest)"
  },
  {
    "example_id": 525,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "r = 24/3 + 5\nprint(r)"
  },
  {
    "example_id": 526,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import sqrt\n\nprint(sqrt(28 + sqrt(1296)))"
  },
  {
    "example_id": 527,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "factors = [1, 2, 3, 4, 6, 12]\nEzekiel = [1, 2, 3, 4, 6, 12]\nprint(len(Ezekiel))"
  },
  {
    "example_id": 528,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "10.0",
      "10.0",
      "10.0",
      "10.0",
      "10.0",
      "10.0",
      "10.0",
      "10.0"
    ],
    "annotated_answers": [
      "2520.0"
    ],
    "solution": "def lcm(x, y):\n    if x > y:\n        return lcm(y, x)\n    while y!= 0:\n        x, y = y, x % y\n    return x * 10\n\nprint(lcm(1, 2))\nprint(lcm(2, 3))\nprint(lcm(3, 4))\nprint(lcm(4, 5))\nprint(lcm(5, 6))\nprint(lcm(6, 7))\nprint(lcm(7, 8))\nprint(lcm(8, 9))\nprint(lcm(9, 10))"
  },
  {
    "example_id": 529,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "swimmer_speed = 2\ndolphin_speed = 8\ndistance = 400\ntime = distance / swimmer_speed\nprint(distance - time)"
  },
  {
    "example_id": 530,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "glow_price = 1.00\nbright_price = 1.00 + 0.60\nbright_volume = bright_price / glow_price\nbright_volume = bright_volume - 0.25\nglow_volume = bright_volume * 0.75\nglow_price = glow_volume / glow_volume\nprint(glow_price)"
  },
  {
    "example_id": 531,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "231.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "n = 22\nk = 20\nmax_handshakes = n * (n-1) // 2\nprint(max_handshakes)"
  },
  {
    "example_id": 532,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "556.0"
    ],
    "annotated_answers": [
      "1251.0"
    ],
    "solution": "students_taking_music = 834\nstudents_total = 2/3 * students_taking_music\nprint(students_total)"
  },
  {
    "example_id": 533,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "numbers = []\nfor A in range(10):\n    for B in range(10):\n        number = 2500 + A*100 + B\n        if number % 9 == 0:\n            numbers.append(number)\nprint(len(numbers))"
  },
  {
    "example_id": 534,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# If a number ends in 0 and sum of digits is divisible by 3,\n# then it must be divisible by 3.\n# Hence, we only need to check divisibility by 3.\n\ndivisible_by_3 = [2, 3, 4, 5, 6, 8, 9]\n\nnum = 100\n\nif num % 3 == 0:\n    print(f\"{num} is divisible by 3\")\nelse:\n    print(f\"{num} is not divisible by 3\")"
  },
  {
    "example_id": 535,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "numbers = [2008, 2003, 1998, 2005, 8, 3]\nprint(len(numbers))"
  },
  {
    "example_id": 536,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "382.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import floor, ceiling\nfrom math import sqrt\n\n# Find the number of digits in 1/7\ndigits = 0\nfor i in range(1,1000):\n    if floor(1/7**i)!= ceiling(1/7**i):\n        digits += 1\n\n# Find the 2007th digit\ndigit = 0\nfor i in range(1,digits+1):\n    if floor(1/7**i)!= ceiling(1/7**i):\n        digit += 1\n    if digit == 2007:\n        break\n\nprint(digit)"
  },
  {
    "example_id": 537,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "5.0",
      "2.0",
      "5.0",
      "7.0",
      "2.0",
      "7.0",
      "9.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_sum(a, b):\n    if a == b:\n        return False\n    if not is_prime(a) or not is_prime(b):\n        return False\n    return (a + b) % 2 == 1\n\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        if is_prime_sum(a, b):\n            print(a, b, a + b)"
  },
  {
    "example_id": 538,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor i in range(1, 100):\n    if i % 3 == 0 and i % 4 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 539,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = -1\ntotal = 0\nfor i in range(2012):\n    total += x**i\nprint(total)"
  },
  {
    "example_id": 540,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10.0",
      "20.0",
      "30.0",
      "40.0",
      "50.0",
      "60.0",
      "70.0",
      "80.0",
      "90.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "# 5 times an even integer\nfor i in range(0, 500, 2):\n    if i * 5 < 500:\n        print(i * 5)"
  },
  {
    "example_id": 541,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0",
      "117.0",
      "126.0",
      "135.0",
      "144.0",
      "153.0",
      "162.0",
      "171.0",
      "180.0",
      "189.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "for i in range(100, 1000):\n    if i % 9 == 0:\n        print(i)"
  },
  {
    "example_id": 542,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "n = 9\nprint(n * (n - 3) // 2)"
  },
  {
    "example_id": 543,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "num_of_aliens = 160\nnum_of_aliens_with_three_eyes = 17/40 * num_of_aliens\nprint(num_of_aliens_with_three_eyes)"
  },
  {
    "example_id": 544,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "gallons_left = 3/4\ncones_sold = gallons_left * 32\nprint(cones_sold)"
  },
  {
    "example_id": 545,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "a = 1200\nb = 1200 // a\nprint(b)"
  },
  {
    "example_id": 546,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "109.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "n = 109\nfor i in range(2, int(n**0.5) + 1):\n    while n % i == 0:\n        print(i)\n        n //= i\nif n > 1:\n    print(n)"
  },
  {
    "example_id": 547,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "days_between_reports = [9, 12, 15]\ndays_until_next_report = min(days_between_reports)\nprint(days_until_next_report)"
  },
  {
    "example_id": 548,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def gcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a % b)\n\nprint(gcf(99, 100))"
  },
  {
    "example_id": 549,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "# import numpy as np\nimport numpy as np\n\n# Data\ndays = np.array([7, 5, 4, 1, 0])\npercent = np.array([40, 30, 20, 10])\n\n# Compute total number of households\ntotal_households = sum(days)\n\n# Compute number of households that eat dinner together at least once a week\ndinner_together = sum(days[days > 0])\n\n# Compute percent of households that eat dinner together at least once a week\npercent_dinner_together = dinner_together / total_households\n\n# Print result\nprint(\"Percent of households that eat dinner together at least once a week: \", percent_dinner_together * 100, \"%\")"
  },
  {
    "example_id": 550,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-88.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "import math\n\n# Angle B\nangle_B = 39\n\n# Angle QBP\nangle_QBP = 14\n\n# Angle A\nangle_A = 180 - angle_B - angle_QBP\n\n# Angle BPC\nangle_BPC = angle_B - angle_A\n\nprint(\"Angle BPC:\", angle_BPC)"
  },
  {
    "example_id": 551,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from math import factorial\n\ndef arrange_books(n_books):\n    return factorial(n_books) // factorial(n_books - 4)\n\nprint(arrange_books(4))"
  },
  {
    "example_id": 552,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.142857142857143"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "numbers = [1, 2, 3, 4, 5, 6, 7, 8]\nmean = sum(numbers) / len(numbers)\nnumbers.remove(7)\nmean2 = sum(numbers) / len(numbers)\nprint(mean2)"
  },
  {
    "example_id": 553,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "121.0",
      "144.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 5\nexpr = '2*3*4*5+1'\nparen_expr = '(2*3*4)*(5+1)'\nexpr_val = eval(expr)\nparen_expr_val = eval(paren_expr)\nprint(expr_val)\nprint(paren_expr_val)\nprint(expr_val == paren_expr_val)"
  },
  {
    "example_id": 554,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "area = 120\ndiagonal = 10\nperimeter = 4 * (area / diagonal)\nprint(perimeter)"
  },
  {
    "example_id": 555,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "u = 0.5\nh = 2\nj = 1\ny = 3\nx = 1\nz = 2\n\n# Question 1\nanswer = 0\nif (2/3*x) == (2*x/3):\n    answer += 1\n\n# Question 2\nanswer += 0\nif (1-h)/(2*h) == (h-1)/(2*h):\n    answer += 1\n\n# Question 3\nanswer += 0\nif -(u+u**2) == -u-u**2:\n    answer += 1\n\n# Question 4\nanswer += 0\nif -(3+y) == -3+y:\n    answer += 1\n\n# Question 5\nanswer += 0\nif (j/2) == (1/2)*j:\n    answer += 1\n\n# Question 6\nanswer += 0\nif x+y+z == y+x+z:\n    answer += 1\n\nprint(answer)"
  },
  {
    "example_id": 556,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "680.0"
    ],
    "solution": "eyes_3, eyes_5, aliens = 3/8, 1 - 3/8, 160\ntotal_eyes = (eyes_3 * aliens) + (eyes_5 * aliens)\nprint(total_eyes)"
  },
  {
    "example_id": 557,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "perimeter = 4*72\nprint(perimeter)"
  },
  {
    "example_id": 558,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "set = [3/7, 4/3, 11/8, 6/16]\ndiff = max(set) - min(set)\nprint(diff)"
  },
  {
    "example_id": 559,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-22.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "x = -3\ny = 8 * (-3) + 2\nprint(y)"
  },
  {
    "example_id": 560,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "last_score = 98\nfirst_score = 91\nnum_tests = 1 + (last_score - first_score) / (last_score - first_score)\nprint(num_tests)"
  },
  {
    "example_id": 561,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2000.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "a = 1000\nb = 1000\nsum = a + b\nprint(sum)"
  },
  {
    "example_id": 562,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nx = math.ceil(54 / 5)\nprint(x)"
  },
  {
    "example_id": 563,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Area of square = 16\n# Area of triangle = 4\n# Area of piece e = 1\n\npiece_e = 1\ntotal_area = 16\n\ntriangle_area = 4\ntriangle_area_per_piece = total_area / 4\n\ngray_piece_area = triangle_area_per_piece - piece_e\n\nprint(gray_piece_area)"
  },
  {
    "example_id": 564,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 5\nk = 2\nfrom math import factorial\nprint(factorial(n) / (factorial(k) * factorial(n-k)))"
  },
  {
    "example_id": 565,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.53981633974483"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import numpy as np\nradius = 5\narea = np.pi * radius ** 2\nprint(area)"
  },
  {
    "example_id": 566,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "cliff_height = 112\ntrestle_length = 80\ntrain_length = 0.75 * trestle_length\ntrain_height = cliff_height - train_length\nprint(train_height)"
  },
  {
    "example_id": 567,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 55/5 - 3\nprint(x)"
  },
  {
    "example_id": 568,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "dimples = 300\nseconds_per_dimple = 2\nminutes = dimples / seconds_per_dimple\nprint(minutes)"
  },
  {
    "example_id": 569,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a, b, x, c = 7, 2, 10, 9\nx = (a + b + x + c) / 4\nprint(x)"
  },
  {
    "example_id": 570,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "37.5"
    ],
    "annotated_answers": [
      "37.5"
    ],
    "solution": "tshirt_price = 15.22\nsweatshirt_price = 67.94 - 2 * tshirt_price\nprint(sweatshirt_price)"
  },
  {
    "example_id": 571,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-50.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "import math\n\nm1_angle = 50\nm2_angle = 90 - m1_angle\nm2_slope = math.tan(math.radians(m2_angle))\nm1_slope = -1 / m2_slope\n\nprint(math.degrees(math.atan(m1_slope)))"
  },
  {
    "example_id": 572,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "480.0"
    ],
    "solution": "import math\nwidth = 10\nheight = 8\narea = width * height\nprint(area)"
  },
  {
    "example_id": 573,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "mary_age = 3/5 * 30\nprint(mary_age)"
  },
  {
    "example_id": 574,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3125.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "number_of_models = 5\nnumber_of_outfits = 5\nnumber_of_shows = number_of_outfits ** number_of_models\nprint(number_of_shows)"
  },
  {
    "example_id": 575,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "digits = [2, 4, 6, 7]\n# 10**2 + 10**1 + 10**0 + 1 = 246\n# 10**2 + 10**1 + 10**0 + 1 + 10**0 + 1 = 247\n# 10**2 + 10**1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 = 248\n# 10**2 + 10**1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 = 249\n# 10**2 + 10**1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 = 250\n# 10**2 + 10**1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 = 251\n# 10**2 + 10**1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 = 252\n# 10**2 + 10**1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 = 253\n# 10**2 + 10**1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 = 254\n# 10**2 + 10**1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 = 255\n# 10**2 + 10**1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 + 10**0 + 1 = 256\ntotal = 0\nfor i in range(0, 10):\n    for j in range(0, 10):\n        for k in range(0, 10):\n            for l in range(0, 10):\n                total += 1\nprint(total)"
  },
  {
    "example_id": 576,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "list = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nprint(len(list))"
  },
  {
    "example_id": 577,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "import itertools\n\ndef get_code_words(letters, length):\n    return [\"\".join(word) for word in itertools.combinations(letters, length)]\n\nletters = [\"A\", \"B\", \"C\"]\nlength = 3\ncode_words = get_code_words(letters, length)\nprint(len(code_words))"
  },
  {
    "example_id": 578,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "whole_number = 10\nconsecutive_whole_numbers = [1, 2, 3, 4]\ntotal = whole_number + sum(consecutive_whole_numbers)\nmean = total / 5\nmedian = (whole_number + consecutive_whole_numbers[-1]) / 2\nprint(mean - median)"
  },
  {
    "example_id": 579,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 4"
  },
  {
    "example_id": 580,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "from sympy import *\nfrom sympy.abc import *\n\np, q, r, s = symbols('p q r s')\n\nperimeter = sqrt(2*(r*p + p*q + q*s + s*r))\nprint(perimeter)"
  },
  {
    "example_id": 581,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.666666666666667"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "drinkets_per_blinket = 3\ntrinkets_per_drinket = 4\ndrinkets = 56\ntrinkets = drinkets / drinkets_per_blinket\nblinkets = trinkets / trinkets_per_drinket\nprint(blinkets)"
  },
  {
    "example_id": 582,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "# Angle M in degrees is 180 - 10 = 170 degrees\nprint(180 - 10)"
  },
  {
    "example_id": 583,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.6"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "daps_per_yaps = 4\nyaps_per_baps = 5\ndaps_per_baps = daps_per_yaps / yaps_per_baps\nbaps_from_daps = daps_per_baps * 42\nprint(baps_from_daps)"
  },
  {
    "example_id": 584,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = (29-5)/3\nprint(x)"
  },
  {
    "example_id": 585,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3969.0"
    ],
    "annotated_answers": [
      "-3969.0"
    ],
    "solution": "number = 63\nproduct = number * (-number)\nprint(product)"
  },
  {
    "example_id": 586,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "import math\nangle = math.degrees(math.atan2(10, 10)) * 2\nprint(angle)"
  },
  {
    "example_id": 587,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "# Area of a rectangle is width * height\n# Length is common side\narea = 184\nside_length = 8\nwidth = area / side_length\nprint(width)"
  },
  {
    "example_id": 588,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "print(3**4-5*8)"
  },
  {
    "example_id": 589,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "proficient = 0.9 * 700\nprint(700 - proficient)"
  },
  {
    "example_id": 590,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.6507936507936507"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a, b = 2/9, 1/7\nsum = a + b\nsum = sum * 10\nprint(sum)"
  },
  {
    "example_id": 591,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "nickels = 1\ndimes = 1\nquarters = 1\ntotal_coins = nickels + dimes + quarters\nprint(total_coins)"
  },
  {
    "example_id": 592,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(6*8)"
  },
  {
    "example_id": 593,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "236.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# smallest integer that satisfies this condition\nsmallest = int(((2*125.28) - 13.7))\nprint(smallest)"
  },
  {
    "example_id": 594,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6290000.0"
    ],
    "annotated_answers": [
      "6290000.0"
    ],
    "solution": "print(round(6287215, -4))"
  },
  {
    "example_id": 595,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "n = 20\nx = [2.5, 5.5, 8.5, 11.5, 14.5, 17.5, 20.5, 23.5, 26.5, 29.5, 32.5, 35.5, 38.5, 41.5, 44.5, 47.5, 50.5, 53.5, 56.5, 59.5, 62.5, 65.5, 68.5, 71.5, 74.5, 77.5, 80.5]\nprint(len(x))"
  },
  {
    "example_id": 596,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.2"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "shirts_made = 72/5\ndresses_made = 3*shirts_made\nprint(dresses_made)"
  },
  {
    "example_id": 597,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "spin = 20\nfactors = [f for f in range(1, spin + 1) if f * f <= spin and f % 2 == 0]\nspinner = factors\ntotal_spins = 0\nwhile spin in spinner:\n    spin = random.choice(spinner)\n    spinner = [s for s in spinner if s!= spin]\n    total_spins += 1\nprint(total_spins)"
  },
  {
    "example_id": 598,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "time = 2.5\ndistance = 15\nspeed = distance / time\nprint(speed)"
  },
  {
    "example_id": 599,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def gcf(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcf(b % a, a)\n\nprint(gcf(180, 450))"
  },
  {
    "example_id": 600,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "1093.0"
    ],
    "solution": "data = [51, 52, 53, 54, 55, 56, 57]\nmedian = data[len(data)//2]\nmode = max(set(data), key=data.count)\nprint(median + mode)"
  },
  {
    "example_id": 601,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4444444444444444"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(4/9)"
  },
  {
    "example_id": 602,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "from math import gcd\n\ndef get_smallest_prime(n):\n    for i in range(2, n):\n        if gcd(i, n) == 1:\n            return i\n\nn = 1\nwhile True:\n    n = n + 1\n    if get_smallest_prime(n) is not None:\n        print(get_smallest_prime(n))\n        break"
  },
  {
    "example_id": 603,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "x = 26 + 52\nprint(round(x, -1))"
  },
  {
    "example_id": 604,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print((1 - (-1)**11)**2)"
  },
  {
    "example_id": 605,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "# Angle between two sides\nangle = 180 - 2 * 30\nprint(angle)"
  },
  {
    "example_id": 606,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "right_handed_boys = 2 * (36 / 4)\nprint(right_handed_boys)"
  },
  {
    "example_id": 607,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "215.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "history_students, science_students = 85, 85\ntotal_history_students = 106\ntotal_science_students = 109\ntotal_seniors = total_history_students + total_science_students\nprint(total_seniors)"
  },
  {
    "example_id": 608,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.6",
      "4.0",
      "2.0",
      "3.0",
      "4.0",
      "6.0",
      "8.0",
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import math\n\ndef average(numbers):\n    return sum(numbers) / len(numbers)\n\ndef median(numbers):\n    numbers.sort()\n    if len(numbers) % 2 == 1:\n        return numbers[len(numbers) // 2]\n    else:\n        return (numbers[len(numbers) // 2] + numbers[len(numbers) // 2 - 1]) / 2\n\ndef mode(numbers):\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    max_count = max(counts.values())\n    return [k for k, v in counts.items() if v == max_count]\n\nnumbers = [2, 3, 4, 6, 8]\nprint(average(numbers))\nprint(median(numbers))\nprint(mode(numbers))\nprint(max(numbers) - min(numbers))"
  },
  {
    "example_id": 609,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "boykins_height = 5.5\nyming_height = 7.5\nboykins_height_in_inches = boykins_height * 12\nyming_height_in_inches = yming_height * 12\nprint(yming_height_in_inches - boykins_height_in_inches)"
  },
  {
    "example_id": 610,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "print(6//6 - 6 + 6*6)"
  },
  {
    "example_id": 611,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "timber_lengths = [48, 72, 40]\nlongest_timber = max(timber_lengths)\nprint(longest_timber)"
  },
  {
    "example_id": 612,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "# Area = base * height / 2\narea = 4 * 2 / 2\nprint(area)"
  },
  {
    "example_id": 613,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef sum_distinct_prime_factors(n):\n    return sum(set(prime_factors(n)))\n\nprint(sum_distinct_prime_factors(735))"
  },
  {
    "example_id": 614,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((123/321)*(456/654)*(789/987)*(123/321)**-1*(456/654)**-1*(789/987)**-1)"
  },
  {
    "example_id": 615,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "side_length = 10\nside_length_new = side_length * 0.6\narea_new = side_length_new ** 2\narea_old = side_length ** 2\npercent_change = (area_old - area_new) / area_old * 100\nprint(percent_change)"
  },
  {
    "example_id": 616,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# A triangle has sides a, b, and c, and angles a, b, and c\n# The ratio of the measures of the angles of a triangle is 3:2:1\n# The shortest side of the triangle is 12 meters long\n\n# Use the sine rule to find the length of the longest side\na = 12\nb = a / 2\nc = a / 3\n\n# Find the sine of each angle\nsin_a = c / a\nsin_b = b / a\nsin_c = a / b\n\n# Find the longest side\nlongest_side = a / sin_a\nprint(longest_side)"
  },
  {
    "example_id": 617,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "94.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "distance_47_48 = 100 - 6\nprint(distance_47_48)"
  },
  {
    "example_id": 618,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# import math\nsides = 144 / 360\nprint(sides)"
  },
  {
    "example_id": 619,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "135.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# count the number of prime numbers\nfrom math import sqrt\nfrom sympy import isprime\n\ndef prime_number_count(n):\n    count = 0\n    for i in range(1, n+1):\n        if isprime(i):\n            count += 1\n    return count\n\n# calculate the number of prime numbers\nn = 763\nprime_count = prime_number_count(n)\nprint(prime_count)"
  },
  {
    "example_id": 620,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(5625 ** 0.5)"
  },
  {
    "example_id": 621,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-800.614872174388"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import pi\nfrom sympy import cot\n\nn = 6\nangle = 1070\nfor i in range(n):\n    angle -= cot(pi/n) * 180\nprint(angle)"
  },
  {
    "example_id": 622,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3888.0"
    ],
    "annotated_answers": [
      "9604.0"
    ],
    "solution": "def count_odd_five_digit_counting_numbers(digits):\n    count = 0\n    for i in range(1, 7):\n        for j in range(1, 7):\n            for k in range(1, 7):\n                for l in range(1, 7):\n                    for m in range(1, 7):\n                        if (i * 10000 + j * 1000 + k * 100 + l * 10 + m) % 2 == 1:\n                            count += 1\n    return count\n\nprint(count_odd_five_digit_counting_numbers([1, 2, 3, 4, 5, 6, 7]))"
  },
  {
    "example_id": 623,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "perimeter_triangle = 21\nsides = 6\nperimeter_hexagon = perimeter_triangle * sides\nprint(perimeter_hexagon)"
  },
  {
    "example_id": 624,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import math\n\n# area of trapezoid\nbase1 = 5\nbase2 = 3\nheight = 9\narea = (base1 + base2) * height / 2\nprint(area)"
  },
  {
    "example_id": 625,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6105.0"
    ],
    "annotated_answers": [
      "957.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 111):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 626,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11200.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "furlongs_per_mile = 8\nfurlongs_per_fortnight = 2800\ndays_per_fortnight = 2\nmiles_per_day = furlongs_per_mile * furlongs_per_fortnight / days_per_fortnight\nprint(miles_per_day)"
  },
  {
    "example_id": 627,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 10 * 5\nprint(5 + x)"
  },
  {
    "example_id": 628,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1188.0"
    ],
    "annotated_answers": [
      "1188.0"
    ],
    "solution": "area_of_pictures = 9 * 12 * 11\nprint(area_of_pictures)"
  },
  {
    "example_id": 629,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "leg_length = 9\nside_length1 = leg_length + 1\nside_length2 = leg_length + 2\nperimeter = side_length1 + side_length2 + leg_length\nprint(perimeter)"
  },
  {
    "example_id": 630,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.123233995736766",
      "-17.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "import math\n\ny = math.cos(math.radians(90))\nprint(y)"
  },
  {
    "example_id": 631,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(pow(0,5) + pow(-1,4))"
  },
  {
    "example_id": 632,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(3**(-4) * 3**(-8) * 3**14)"
  },
  {
    "example_id": 633,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "print(16/25 * (5/2)**4)"
  },
  {
    "example_id": 634,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.904518982983493"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "import math\n\n# Calculate the length of the side of the square\nside_length = math.sqrt(3)/2\n\n# Calculate the perimeter of the square\nperimeter = 4 * side_length\n\n# Calculate the perimeter of the triangle\ntriangle_perimeter = 17\n\n# Calculate the area of the triangle\ntriangle_area = triangle_perimeter * triangle_perimeter / (4 * math.tan(math.pi/3))\n\n# Calculate the perimeter of the nine-sided figure\nperimeter_of_nine = triangle_area / (3 * math.tan(math.pi/3))\n\n# Calculate the area of the nine-sided figure\narea_of_nine = perimeter_of_nine * math.tan(math.pi/3)\n\nprint(area_of_nine)"
  },
  {
    "example_id": 635,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "teams, players = 3, 4\nhandshakes = teams * (teams - 1) * players + teams * players\nprint(handshakes)"
  }
]