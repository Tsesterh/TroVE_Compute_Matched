[
  {
    "example_id": 0,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "113.09733552923254"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "from math import pi\n\nradius = 3\nvolume = (4/3) * pi * radius ** 3\nprint(volume)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = (3 - 1) / (2 - 1)\nprint(x)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "angle_A = 35\nangle_B = 35\nangle_C = 90 - angle_A - angle_B\nprint(angle_C)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "s = 1\nr = 9\nprint(r/s)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(4)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.141592653589793"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nprint(math.pi)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.388782715055347"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nradius = math.sqrt(112 * math.pi / 5)\nprint(radius)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "339.29",
      "397.61",
      "84.82",
      "-0.75",
      "113.1",
      "113.1"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import math\n\n# volume of a cylinder\ndef volume(d, h):\n    return math.pi * d * d * h\n\n# surface area of a cylinder\ndef surface_area(d, h):\n    return 2 * math.pi * d * d + 2 * math.pi * d * h\n\n# volume of a cylinder in a jar\ndef jar_volume(d, h):\n    return math.pi * (d / 2) ** 2 * h\n\n# surface area of a jar\ndef jar_surface_area(d, h):\n    return surface_area(d, h) + 2 * math.pi * d * h\n\n# increase in volume of a jar\ndef increase_volume(d, h, percentage):\n    return volume(d, h) * (1 + percentage / 100)\n\n# decrease in height of a jar\ndef decrease_height(d, h, percentage):\n    return h * (1 - percentage / 100)\n\n# increase in surface area of a jar\ndef increase_surface_area(d, h, percentage):\n    return jar_surface_area(d, h) * (1 + percentage / 100)\n\n# decrease in surface area of a jar\ndef decrease_surface_area(d, h, percentage):\n    return jar_surface_area(d, h) * (1 - percentage / 100)\n\n# initial diameter and height of a jar\nd0, h0 = 6, 3\n\n# final diameter and height of a jar\nd1, h1 = d0 * 1.25, h0 * 0.75\n\n# increase in volume of a jar\nv = increase_volume(d0, h0, 25)\n\n# decrease in height of a jar\nh = decrease_height(d0, h0, 25)\n\n# decrease in surface area of a jar\ns = decrease_surface_area(d0, h0, 25)\n\n# increase in surface area of a jar\ns = increase_surface_area(d0, h0, 25)\n\nprint(f'Initial volume: {volume(d0, h0):.2f}')\nprint(f'Final volume: {volume(d1, h1):.2f}')\nprint(f'Increase in volume: {v - volume(d0, h0):.2f}')\nprint(f'Decrease in height: {h - h0:.2f}')\nprint(f'Decrease in surface area: {s - jar_surface_area(d0, h0):.2f}')\nprint(f'Increase in surface area: {s - jar_surface_area(d0, h0):.2f}')"
  },
  {
    "example_id": 8,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from math import fabs\na, b = 3, 2\nc, d = 3, -2\ne, f = -3, -2\ng, h = -3, 0\narea = fabs((a - c) * (b - d) + (a - e) * (b - f) + (c - e) * (d - f) + (c - g) * (d - h)) / 2\nprint(area)"
  },
  {
    "example_id": 9,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\nsin_a = 2 * math.cos(math.radians(90))\ntan_a = sin_a / math.cos(math.radians(90))\nprint(tan_a)"
  },
  {
    "example_id": 10,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4472135954999579"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "import math\n\nradius = 1\narea = 20 / 100 * math.pi * radius ** 2\nx = math.sqrt(area / math.pi)\nprint(x)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "area_of_square_ABCD = 100\nside_of_square_ABCD = 100 / 4\nside_of_square_EFGH = 2\narea_of_square_EFGH = side_of_square_EFGH ** 2\nprint(area_of_square_EFGH)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.141592653589793"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import pi\n\ncube_volume = 6 * pi / 6\nprint(cube_volume)"
  },
  {
    "example_id": 13,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0808390005411683"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\n\njkl = math.atan(15/8)\nprint(jkl)"
  },
  {
    "example_id": 14,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "length, width, height = 10, 10, 12\nsurface_area = 2 * (length * width + length * height + width * height)\ncost = surface_area * 0.05\nprint(cost)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "from math import pi\n\nvolume_12 = pi * (12/2)**2 * 4\nvolume_2 = pi * (2/2)**2 * 4\n\nprint(volume_12 / volume_2)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy as sp\n\na = sp.Symbol('a')\nb = sp.Symbol('b')\nc = sp.Symbol('c')\n\nA = (a**2 + b**2 + c**2) / 2\ns = sp.sqrt(A)\n\nd = (s * (s - a) * (s - b) * (s - c)) ** (1/2)\n\nprint(d)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\nAB = sympy.Symbol('AB')\nDC = sympy.Symbol('DC')\nFE = sympy.Symbol('FE')\nCD = sympy.Symbol('CD')\n\nABFE_area = 2 * FE * CD\nAB_area = AB * DC\n\nprint(ABFE_area)\nprint(AB_area)\nprint(ABFE_area / AB_area)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "46.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "from sympy import symbols, sqrt\n\na, b = symbols('a b')\n\nAB = sqrt(2*2116) / (sqrt(2)+1)\n\nprint(AB)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "length_GF = 4\nprint(length_GF)"
  },
  {
    "example_id": 20,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.000000000000001"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\ns = math.sqrt(2)\narea = 2 * (s * s)\nprint(area)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import symbols\na, b, c, d, e, f = symbols('a, b, c, d, e, f')\narea = (a*d - b*c + e*f - d*f + c*e - a*f) / 2\nprint(area)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "side_1 = 1\nside_2 = 7\nside_3 = 2\nside_4 = 4\nsum = side_1 + side_2 + side_3 + side_4\nprint(sum)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.05"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "PQ = 0.67 * 15\nprint(PQ)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34606.0"
    ],
    "annotated_answers": [
      "8918.0"
    ],
    "solution": "edge_length_1 = 11\nedge_length_2 = 3 * edge_length_1\nvolume_1 = edge_length_1 ** 3\nvolume_2 = edge_length_2 ** 3\ndifference = volume_2 - volume_1\nprint(difference)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "import math\n\npq = 34\nqr = 34\npr = 32\n\nqm = (pq + qr + pr) / 2\nprint(qm)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "angle_cxy = 65 + 75\nprint(angle_cxy)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.64101615137755"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "surface_area = 600\nnew_surface_area = surface_area * 2\nvolume = new_surface_area ** (1/2)\nprint(volume)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "perimeter = 8 + 8 + 3 * 4\nprint(perimeter)"
  },
  {
    "example_id": 29,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\nprint(len([letter for letter in \"MATHCOUNTS\" if letter in \"h\"]))"
  },
  {
    "example_id": 30,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "from sympy import symbols\n\na, b, c = symbols(\"a b c\")\n\n# volume of the original triangle\nV_orig = (a**2 + b**2) * c / 2\n\n# volume of the rotated triangle\nV_rot = V_orig / 2\n\nprint(V_rot)"
  },
  {
    "example_id": 31,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from sympy import symbols\n\nlength_AB, length_BC, length_CD, length_DA = symbols('length_AB length_BC length_CD length_DA')\n\narea = (length_AB + length_BC) * length_CD / 2\n\nprint(area)"
  },
  {
    "example_id": 32,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.04"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "width = 4\nshaded_area = width / 100\nprint(shaded_area)"
  },
  {
    "example_id": 33,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "surface_area = 6 * 3 ** 2\nprint(surface_area)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\nradius = 7\nangle = math.radians(90)\ndistance = radius * math.sin(angle)\nprint(distance / distance)"
  },
  {
    "example_id": 35,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\n\na = 1\nb = 1\nc = 1\nr = (a + math.sqrt(b)) / c\n\nprint(a + b + c)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "base_A = 52\nbase_B = 12\nbase_C = 39\nheight = 5\ntrapezoid_area = (base_A + base_B) * height / 2\nprint(trapezoid_area)"
  },
  {
    "example_id": 37,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "102.0"
    ],
    "annotated_answers": [
      "102.0"
    ],
    "solution": "from math import sqrt\n\ns = (13 + 17 + 12 * sqrt(2)) / 2\narea = sqrt(s * (s - 13) * (s - 17) * (s - 12 * sqrt(2)))\nprint(area)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "perimeter = 12 + 8 + 2\nprint(perimeter)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.1172827028131629"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from math import tan\nprint(tan(315))"
  },
  {
    "example_id": 40,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5568.0"
    ],
    "annotated_answers": [
      "2304.0"
    ],
    "solution": "from sympy import *\n\narea = 96 * 32 + 24 * 104\nprint(area)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import sympy\n\nside_a, side_b, side_c, side_d, side_e, side_f, side_g, side_h, side_y, side_s = sympy.symbols('side_a, side_b, side_c, side_d, side_e, side_f, side_g, side_h, side_y, side_s')\n\narea_quadrilateral_dyes = (side_a * side_b + side_c * side_d + side_e * side_f + side_g * side_h) / 2\n\nprint(area_quadrilateral_dyes)"
  },
  {
    "example_id": 42,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.61340078982937"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import pi\nr = (6 * pi * 10 ** 3) ** (1/3)\nprint(r)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(8)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.333333333333333"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import pi\n\nV = 30 * pi\nh = V / (pi * 3**2)\nprint(h)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "3.0",
      "3.0",
      "3.0",
      "9.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "import sympy\na, b = sympy.symbols('a,b')\narea = sympy.pi * (3 - 3 * sympy.sqrt(3)) * 3**2\nprint(area)\nprint(area.subs({a: 1, b: 1}))"
  },
  {
    "example_id": 46,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5",
      "720.0",
      "720.0",
      "720.0",
      "720.0",
      "720.0",
      "720.0",
      "720.0",
      "720.0",
      "720.0",
      "720.0",
      "720.0",
      "720.0",
      "720.0",
      "720.0",
      "720.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "from math import pi\n\n# Formula for the surface area of a regular polygon\n# is given by:\n# SA = (n * s) / 2\n# where n is the number of sides\n# and s is the side length\n\n# The number of sides of a regular pentagon\n# is 5\nn = 5\n\n# The side length of a regular pentagon\n# is 1\ns = 1\n\n# The formula for the surface area of a regular\n# polygon gives us the surface area\n# of the regular pentagon\nsurface_area = (n * s) / 2\n\n# The surface area of a regular pentagon is 5\nprint(surface_area)\n\n# The minimum number of degrees\n# the regular pentagon must be rotated\n# in order to coincide with its original position\n# is 720 degrees\n# which is 360 degrees\n# times 2\nmin_degrees = 2 * 360\n\n# The formula for the minimum number of degrees\n# a regular polygon must be rotated\n# in order to coincide with its original position\n# is given by:\n# min_degrees = (n * 360) / 2\n# where n is the number of sides\n# of the regular polygon\n# This formula gives us the minimum number\n# of degrees the regular pentagon\n# must be rotated in order to coincide with its original position\nprint(min_degrees)\n\n# The minimum number of degrees\n# the regular pentagon must be rotated\n# in order to coincide with its original position\n# is 720 degrees\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position\n# which is 360 degrees\n# times 2\nprint(min_degrees)\n\n# The regular pentagon\n# must be rotated 720 degrees\n# in order to coincide with its original position"
  },
  {
    "example_id": 47,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "124.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "x = 124\nprint(x)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "34.0",
      "3.0",
      "78.0",
      "4.0",
      "148.0",
      "5.0",
      "250.0",
      "6.0",
      "390.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "s = 1\nwhile s < 100:\n    s += 1\n    surface_area = 4 * s ** 2\n    volume = s ** 3\n    sum = surface_area + 5 * s + volume\n    print(s, sum)"
  },
  {
    "example_id": 49,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "324.0"
    ],
    "annotated_answers": [
      "592.0"
    ],
    "solution": "a, b, c, d, e, f = 2, 2, 3, 3, 3, 3\nproduct = a * b * c * d * e * f\nprint(product % 1000)"
  },
  {
    "example_id": 50,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import pi\n\n# Define constants\nradius_old = 4\nradius_new = 8\nvolume_old = pi * radius_old ** 2\nvolume_new = pi * radius_new ** 2\n\n# Calculate the number of new containers needed\nnumber_new_containers = volume_old // volume_new\n\n# Print the result\nprint(number_new_containers)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "for p in range(1, 100):\n    a = 3 * p - 1\n    b = 3 * p\n    c = p ** 2 + 1\n    if a + b > c and b + c > a and c + a > b:\n        print(p)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "198.0"
    ],
    "solution": "import math\nside = 3\ncube_side = side - 1\nsurface_area = 6 * (side ** 2 + cube_side ** 2)\nprint(surface_area)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "m_angle = 40\nx = 180 - m_angle\nprint(x)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sin\n\ndef is_solution(x):\n    return sin(x) == -0.31\n\nnumber_of_solutions = 0\nfor x in range(0, 990, 1):\n    if is_solution(x):\n        number_of_solutions += 1\nprint(number_of_solutions)"
  },
  {
    "example_id": 55,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.333333333333332"
    ],
    "annotated_answers": [
      "15.08"
    ],
    "solution": "volume = (4 * 4 * 4) / 3\nprint(volume)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "import math\n\ndef area_of_pentagon(points):\n    area = 0\n    for i in range(len(points)):\n        area += points[i][0] * points[(i + 1) % len(points)][1] - points[(i + 1) % len(points)][0] * points[i][1]\n    return abs(area) / 2\n\npoints = [(-1, -1), (-3, 4), (1, 7), (6, 5), (3, -1)]\nprint(area_of_pentagon(points))"
  },
  {
    "example_id": 57,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "156.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from math import pi\narea = (7 + 17) / 2 * 13\nprint(area)"
  },
  {
    "example_id": 58,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nlength_BC = 2\nlength_AB = 4*sympy.sqrt(2)\nmedian_length = (length_AB + length_BC)/2\nprint(median_length)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\n\ndef count_triangles(sticks):\n    count = 0\n    for i in range(len(sticks)):\n        for j in range(i+1, len(sticks)):\n            for k in range(j+1, len(sticks)):\n                if sympy.gcd(sticks[i], sympy.gcd(sticks[j], sticks[k])) == 1:\n                    count += 1\n    return count\n\nprint(count_triangles([2, 4, 6]))"
  },
  {
    "example_id": 60,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print((3 + 5) / 2)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "6.0",
      "2.0",
      "6.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\n\ns = sympy.Symbol('s')\na, b, c, d, e, f, g, h, j = sympy.symbols('a b c d e f g h j')\n\ntriangle_area = sympy.integrate(sympy.integrate(s * sympy.sqrt(1 - (s - a)**2), (s, a, b)), (s, c, d))\nprint(triangle_area)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "86.0"
    ],
    "solution": "k = (2**2) / 4\nprint(int(100*k))"
  },
  {
    "example_id": 63,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# yarn_diameter = 6\n# pairs = 1\nyarn_diameter = 12\npairs = 2\nprint(pairs)"
  },
  {
    "example_id": 64,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "from math import ceil, sqrt\n\ndef x_values(x):\n    return [ceil(sqrt(x ** 2 + 6 ** 2) - 6)]\n\n\ndef sum_x_values(x):\n    return sum(x_values(x))\n\n\nprint(sum_x_values(5))"
  },
  {
    "example_id": 65,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6666666666666666"
    ],
    "annotated_answers": [
      "1.17"
    ],
    "solution": "depth = 1 / 1.5\nprint(depth)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import sqrt\n\narea = (sqrt(10)/2) * (sqrt(5)/2)\nprint(area)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a, b, c, d = 1, 2, 3, 4\narea_1 = (a * b) / 2\narea_2 = (a * d) / 2 + (b * c) / 2\nprint(a + b + c + d)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "distance = 16 / 2\nprint(distance)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.3318560862312"
    ],
    "annotated_answers": [
      "1.3"
    ],
    "solution": "from math import pi\n\nradius = 1\ntrapezoid_area = (2 * pi * radius) * (8.7 / 2)\nprint(trapezoid_area)"
  },
  {
    "example_id": 70,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.82392200292394"
    ],
    "annotated_answers": [
      "4.14"
    ],
    "solution": "import math\nside = 10 / math.cos(math.pi / 8)\nprint(side)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.664793948382652"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import math\nside_a = math.sqrt(32**2 - 12**2)\nprint(side_a)"
  },
  {
    "example_id": 72,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "perimeter = 20\nside = 3\nwhile perimeter >= side * 3:\n    perimeter = perimeter - side * 3\n    side = side + 1\nprint(side)"
  },
  {
    "example_id": 73,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "693.3333333333334"
    ],
    "annotated_answers": [
      "640.0"
    ],
    "solution": "from math import pi\n\nr1 = 2\nr2 = 8\n\nvol_plum = (4/3) * pi * r1**3\nvol_watermelon = (4/3) * pi * r2**3\n\nvol_sphere = vol_plum + vol_watermelon\n\nK = vol_sphere / pi\n\nprint(K)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\ns = sympy.Symbol('s')\narea = sympy.sqrt(s * (s - 2 * sympy.sqrt(2)))\nprint(area)"
  },
  {
    "example_id": 75,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\narea = 5 * 5 / 2\nprint(area)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.935134225695303"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "import math\n\na = 7\nb = 6\ns = math.sqrt(a + b * math.sqrt(2))\nprint(s)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "obtuse_angle = 90 - 40 - 40\nprint(obtuse_angle)"
  },
  {
    "example_id": 78,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "w = 1\nx = 1\ny = 1\nz = 1\nprint(w + x + y + z)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3599.9999999999995"
    ],
    "annotated_answers": [
      "3600.0"
    ],
    "solution": "base_edge = 20\nheight = 27\nvolume = (1/3) * base_edge * base_edge * height\nprint(volume)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0",
      "120.0",
      "108.0",
      "120.0",
      "108.0",
      "120.0",
      "108.0",
      "120.0",
      "108.0",
      "120.0",
      "108.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "angles = [108, 120, 108, 120, 108, 120, 108, 120, 108, 120, 108]\nprint(angles)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import *\nhypotenuse = sqrt(5**2 + (-5)**2)\nside_length = hypotenuse / 2\narea = side_length * side_length\nprint(area)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.061701120214437"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "import math\nside_length = 8\nnumber_of_sides = 5\narea = side_length * number_of_sides * math.tan(math.pi / number_of_sides)\nprint(area)"
  },
  {
    "example_id": 83,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.313708498984761"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\na = 12\nb = 4\nc = math.sqrt(a**2 - b**2)\nprint(c)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "import sympy as sp\n\na, b, c, d = sp.symbols(\"a b c d\")\ntrapezoid_area = (a + b + c + d) / 2\n\nprint(trapezoid_area)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3926.9908169872415"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "from math import pi\n\nradius = 50\narea = (radius * radius) * pi / 2\nprint(area)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "length = 10\narea = 40\nwidth = area / length\nprint(width)"
  },
  {
    "example_id": 87,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.10134583033141"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import math\n\nperimeter = 28\narea = 49\n\narc_length = perimeter - 2 * math.sqrt(area / math.pi)\nprint(arc_length)"
  },
  {
    "example_id": 88,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 3 - 2\ny = 3\nprint(x + y)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "from math import factorial\ndef number_of_equilateral_triangles(side_lengths):\n    number_of_equilateral_triangles = 0\n    for i in range(len(side_lengths)):\n        for j in range(i+1,len(side_lengths)):\n            if side_lengths[i] == side_lengths[j]:\n                number_of_equilateral_triangles += 1\n    return number_of_equilateral_triangles\nprint(number_of_equilateral_triangles([2, 3, 5, 7, 11]))"
  },
  {
    "example_id": 90,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "ratio = 1/2\nprint(ratio)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "-1.0",
      "-1.0",
      "-1.0",
      "-1.0",
      "-1.0",
      "-1.0",
      "-1.0",
      "-1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import gcd\ndef is_convex_octagon(n):\n    if n < 8:\n        return False\n    if n % 4!= 0:\n        return False\n    for i in range(n):\n        if gcd(i, n)!= 1:\n            return False\n    return True\n\ndef max_interior_right_angles(n):\n    if is_convex_octagon(n):\n        return n // 4\n    else:\n        return -1\n\nprint(max_interior_right_angles(8))\nprint(max_interior_right_angles(9))\nprint(max_interior_right_angles(10))\nprint(max_interior_right_angles(11))\nprint(max_interior_right_angles(12))\nprint(max_interior_right_angles(13))\nprint(max_interior_right_angles(14))\nprint(max_interior_right_angles(15))\nprint(max_interior_right_angles(16))"
  },
  {
    "example_id": 92,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "area = 6 * 10\nprint(area)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0",
      "-32.0",
      "-32.0",
      "-32.0",
      "-32.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import *\na, b, d, c = symbols('a b d c')\nP, Q, R, S, T = symbols('P Q R S T')\n\na, b, d, c = 16, 16, 24, 0\n\nP, Q, R, S, T = 20, 25, 15, 12, 7\n\np = a * (b - c) / (a - d)\n\nq = (a - d) * (p - c) / (a - d)\n\nr = (a - d) * (q - c) / (a - d)\n\ns = (a - d) * (r - c) / (a - d)\n\nt = (a - d) * (s - c) / (a - d)\n\nprint(p, q, r, s, t)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "perimeter = 30 + 17 + 17\nprint(perimeter)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(14 + 1)"
  },
  {
    "example_id": 96,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "length_hc = 150\nlength_hd = 130\nlength_hp = 0.5 * (length_hc + length_hd)\nprint(length_hp)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "131.09733552923257"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from math import pi\n\nheight = 3\nside_length = 6\n\ntotal_area = (6 * height) + (2 * pi * side_length * height)\n\nprint(total_area)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "452.3893421169302"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "from math import pi\n\nK = pi * 12**2\nprint(K)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.375"
    ],
    "annotated_answers": [
      "224.0"
    ],
    "solution": "import math\n\nvolume = 1.5 * math.pi\n\nn = volume / (math.pi * 4)\n\nprint(n)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = (0, 1)\nb = (1, 3)\nc = (5, 2)\nd = (4, 0)\n\ndef area(p1, p2, p3, p4):\n    return abs(p1[0] * p2[1] + p2[0] * p3[1] + p3[0] * p4[1] + p4[0] * p1[1] - p1[1] * p2[0] - p2[1] * p3[0] - p3[1] * p4[0] - p4[1] * p1[0]) / 2\n\nprint(area(a, b, c, d))"
  },
  {
    "example_id": 101,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "r = 10 / 2\nprint(r)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\nradius1 = 2\nradius2 = 1\nheight1 = math.pi * radius1 ** 2\nheight2 = math.pi * radius2 ** 2 / height1\nprint(height2)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "a, b, c = 17, 24, 33\nperimeter = a + b + c\nprint(perimeter)"
  },
  {
    "example_id": 104,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0",
      "18.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "from sympy import Symbol, integrate, solve\n\nx = Symbol('x')\ny = Symbol('y')\n\ndef f(x):\n    return 4*x - 6\n\ndef g(x):\n    return -2*x + 12\n\ndef h(y):\n    return y\n\ndef area(f, g, h):\n    return integrate(f(x) - g(x), (x, h(x), 0))\n\nprint(area(f, g, h))"
  },
  {
    "example_id": 105,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def count(lower, upper):\n    count = 0\n    for i in range(lower, upper + 1):\n        for j in range(lower, upper + 1):\n            if i + j == 0:\n                count += 1\n    return count\n\nprint(count(-4, 3) * count(-3, 4) * count(3, 4) * count(4, 3))"
  },
  {
    "example_id": 106,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.20000000000000004"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import math\n\nradius = 10\nheight = 20\n\nvolume = math.pi * radius ** 2 * height\n\nnew_radius = radius * 0.8\nnew_height = height * 1.25\n\nnew_volume = math.pi * new_radius ** 2 * new_height\n\npercent_change = (new_volume - volume) / volume\n\nprint(abs(percent_change))"
  },
  {
    "example_id": 107,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols(\"a b c\")\ns = (a + b + c) / 2\nprint(sympy.sqrt(s * (s - a) * (s - b) * (s - c)))"
  },
  {
    "example_id": 108,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "27.2"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols(\"a b c\")\ns = (a + b + c) / 2\narea = sympy.sqrt(s * (s - a) * (s - b) * (s - c))\naltitudes = [2 * area / side for side in [a, b, c]]\nprint(sum(altitudes))"
  },
  {
    "example_id": 109,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0",
      "8.0",
      "8.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x, y')\n\ntrapezoid_area = sympy.integrate(sympy.sqrt(1 + (y - x)**2), (x, 0, 8))\nprint(trapezoid_area)"
  },
  {
    "example_id": 110,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "a_y = 24 / 2\nprint(a_y)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "area = 8\nmidpoint_AB = (5, 2)\nmidpoint_BC = (7.5, 2)\nheight = 2\nmidpoint_AC = (5, 0)\nbisect_height = 1\nshaded_area = area - 2 * height\nprint(shaded_area)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "11.5"
    ],
    "solution": "area = 5 * 8\nprint(area)"
  },
  {
    "example_id": 113,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "hexagonal_prism_edges = 6\nprint(hexagonal_prism_edges)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.381976597885342"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nradius = (6 / math.pi) ** (1 / 2)\nprint(radius)"
  },
  {
    "example_id": 115,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 2\nb = 4\n\nprint(a+b)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.870509320858122"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "volume = 63960\nheight = 30\nside = (volume / height) ** (1/3)\nprint(side)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "from sympy import symbols, sqrt\np, q, r = symbols('p q r')\nx, y = symbols('x y')\ntri_area = sqrt(p**2 + q**2) * sqrt(q**2 + r**2) * sqrt(r**2 + x**2)\nprint(tri_area)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "perimeter = 2 * (12 + 16)\nprint(perimeter)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(30)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0",
      "105.0",
      "112.5",
      "116.25"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "import math\n\nangle = 60\n\nfor i in range(1, 5):\n    angle = angle + (120 - angle) / 2\n    print(angle)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "#!/usr/bin/env python3\n\n# function to check if a point is inside a rectangle\ndef is_inside(x, y):\n    if x > 5 and x < -5 and y > 4 and y < -4:\n        return True\n    return False\n\n# loop through all integer coordinates\ninside_count = 0\nfor x in range(-5, 6):\n    for y in range(-4, 5):\n        if is_inside(x, y):\n            inside_count += 1\n\nprint(inside_count)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "a, b, c = 1, 2, 3\narea = (b - a) * (c - a)\nprint(area)"
  },
  {
    "example_id": 123,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\n\ndef measure_of_an_interior_angle(n):\n    return 6.5 * measure_of_an_exterior_angle(n)\n\ndef measure_of_an_exterior_angle(n):\n    return 360 / n\n\nfor n in range(1, 100):\n    if measure_of_an_interior_angle(n) == 6.5 * measure_of_an_exterior_angle(n):\n        print(n)\n        break"
  },
  {
    "example_id": 124,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1152.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "base_perimeter = 3 * 4\nheight = 2 * base_perimeter\nvolume = (1/3) * base_perimeter ** 2 * height\nprint(volume)"
  },
  {
    "example_id": 125,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import math\n\nside_length = 2\nsurface_area = 4 * side_length\nprint(surface_area)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.08533845493851"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "import math\nx = math.degrees(math.atan2(math.sin(70), math.sin(40)))\nprint(x)"
  },
  {
    "example_id": 127,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.2"
    ],
    "annotated_answers": [
      "1.4"
    ],
    "solution": "midpoint = 10 / 2\ndistance = 7.2 - midpoint\nprint(distance)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "![](./solution.png)\n\n\n\nimport sympy\nx, y, z = sympy.symbols('x y z')\n\nR = 40 * sympy.pi / 180\n\nx_eq = sympy.simplify(y + z)\ny_eq = sympy.simplify(x + z)\nz_eq = sympy.simplify(x + y)\n\nprint(sympy.solve([x_eq, y_eq, z_eq], [x, y, z]))"
  },
  {
    "example_id": 129,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "import math\nimport sympy\n\na, b, c, d, e, f = sympy.symbols('a b c d e f')\n\nsides = [a, b, c, d, e, f]\n\nangles = [a, b, c, d, e, f]\n\nfor i in range(len(angles)):\n    angles[i] = sympy.acos((sides[i]**2 + sides[(i+1)%len(sides)]**2 - sides[(i+2)%len(sides)]**2)/(2*sides[i]*sides[(i+1)%len(sides)]))\n\nprint(sum(angles))"
  },
  {
    "example_id": 130,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "from sympy import symbols, sqrt\n\na, b, c = symbols('a b c')\n\ns = sqrt(a**2 + b**2)\n\nprint(2 * s + a + b + c)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import pi\n\nr_scoop = 1\nr_cone = 2\nh_cone = 5\n\nvolume_scoop = (4/3) * pi * r_scoop ** 3\nvolume_cone = (4/3) * pi * r_cone ** 3\n\nn_scoops = volume_cone / volume_scoop\n\nprint(n_scoops)"
  },
  {
    "example_id": 132,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import *\n\na, b, c = symbols('a b c')\n\nd, e = (a + b) / 2, (a + c) / 2\n\nprint(d - e)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import math\nbase = 8\nheight = 8\narea = (base * height) / 2\nprint(area)"
  },
  {
    "example_id": 134,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.464101615137753"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "import math\nperimeter = 5 + 2*math.sqrt(3)\nprint(perimeter)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0000000000000004"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import pi\nvolume, radius = 2700 * pi, 30\nheight = volume / (pi * radius ** 2)\nprint(height)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.41887902047863906"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from math import pi\nradius = 10 * pi / 75\nprint(radius)"
  },
  {
    "example_id": 137,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\nA = sympy.Polygon((4, 0), (-4, 0), (0, y), (x, y))\nprint(A.area)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.166666666666668"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a = 7\nb = 24\nc = 100\nprint(a * c / b)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import *\nR = 36\nV = 1/6 * pi * R**3\nA = 4 * pi * R**2\nt = V / A\nprint(t)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "157707.95121020763"
    ],
    "annotated_answers": [
      "17700.0"
    ],
    "solution": "from math import pi\n\ncircumference = 2 * pi * 25100\nprint(circumference)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.42857142857142855"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "a = 3/14 * 4 / 2\nprint(a)"
  },
  {
    "example_id": 142,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.3386902103511544"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import tan\nprint(tan(180))"
  },
  {
    "example_id": 143,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "length = 1 + 3 - 1\nprint(length)"
  },
  {
    "example_id": 144,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "11.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\na = 2 * sympy.atan(sympy.sqrt(x - 11) / 2)\nprint(a)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x, y = 6, 5\nprint(x + y)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\nvolume = 45 * math.pi\nradius = 3\nheight = volume / (math.pi * radius ** 2)\nprint(height)"
  },
  {
    "example_id": 147,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nx = sympy.symbols(\"x\")\nk = 3 / sympy.sqrt(x**2 + 1)\nprint(k)"
  },
  {
    "example_id": 148,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.000000000000003"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\n# area of rhombus ABDC\narea_abcd = 24\n\n# angle BAD = 60 degrees\nangle_bad = 60\n\n# cos(x) = adjacent side / hypotenuse\nadjacent_side = math.cos(math.radians(angle_bad)) * math.hypot(10, 15)\n\n# hypotenuse = adjacent side / cos(x)\nhypotenuse = math.hypot(10, 15) / math.cos(math.radians(angle_bad))\n\n# area of rhombus BFDE\narea_bfde = area_abcd / (hypotenuse / adjacent_side)\n\nprint(area_bfde)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\ncos_a = (b**2 + c**2 - a**2) / (2 * b * c)\nprint(cos_a)"
  },
  {
    "example_id": 150,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "import math\ndistance = math.sqrt(8**2 + 12**2)\nprint(int(distance))"
  },
  {
    "example_id": 151,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.098593171027442"
    ],
    "annotated_answers": [
      "8.5"
    ],
    "solution": "import math\nside_a = 8\nside_b = 15\nside_c = 17\ns = (side_a + side_b + side_c) / 2\narea = math.sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\nradius = area / math.pi\nprint(radius)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "distance = (32 / 2) - 8\nprint(distance)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Volume of pyramid ABCH\nvolume_pyramid_ABCH = 10\n\n# Volume of ABCDEFGH\nvolume_pyramid_ABCDEFGH = 2 * volume_pyramid_ABCH\n\nprint(volume_pyramid_ABCDEFGH)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "import sympy\n\nW, X, Y, Z = sympy.symbols('W X Y Z')\n\ntrapezoid_area = (W + X) * (Y - Z) / 2\n\nprint(trapezoid_area)"
  },
  {
    "example_id": 155,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "A = 16\nprint(A)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.848644940502395",
      "77"
    ],
    "annotated_answers": [
      "301.0"
    ],
    "solution": "from sympy import gcd\n\nm, n = 1, 1\n\nfor i in range(2, 100):\n    if (i % 2) == 0:\n        m, n = n, m * i\n    else:\n        m, n = n, m * (i - 1)\n\nprint(m + n)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "side_length = 6\nprint(side_length)"
  },
  {
    "example_id": 158,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "perimeter = 2 * (15 + 10)\nprint(perimeter)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.162"
    ],
    "annotated_answers": [
      "0.54"
    ],
    "solution": "volume = 0.027\narea = 6 * volume\nprint(area)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "208.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "x = 104\ny = 104\nprint(x + y)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.8284271247461903"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\n\ndistance = math.sqrt(2**2 + 2**2)\nprint(distance)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "47.0",
      "0.7376340018041461",
      "0.26236599819585393"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "from math import ceil, floor\n\ndef triangle_side_lengths(side_length1, side_length2):\n    if side_length1 > side_length2:\n        larger, smaller = side_length1, side_length2\n    else:\n        larger, smaller = side_length2, side_length1\n    return larger - smaller, larger + smaller\n\n\ndef triangle_side_lengths_with_integer_third_side(side_length1, side_length2):\n    if side_length1 > side_length2:\n        larger, smaller = side_length1, side_length2\n    else:\n        larger, smaller = side_length2, side_length1\n    third_side_length = (larger**2 - smaller**2)**0.5\n    return third_side_length - floor(third_side_length), ceil(third_side_length) - third_side_length\n\n\nprint(triangle_side_lengths(18, 29))\nprint(triangle_side_lengths_with_integer_third_side(18, 29))"
  },
  {
    "example_id": 163,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "import sympy\n\na, b, c, d = sympy.symbols('a b c d')\n\ns = (a + b + c) / 2\n\narea = sympy.sqrt(s * (s - a) * (s - b) * (s - c))\n\nprint(area)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "area = 16\nprint(area)"
  },
  {
    "example_id": 165,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "import math\na, b, c = (4, 9), (0, 0), (12, 0)\ns = (b[0] * c[1] + c[0] * a[1] + a[0] * b[1]) / 2\nprint(s)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "angle_BAE = 60\nprint(angle_BAE)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0",
      "120.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef mangle(p, q, r):\n    \"\"\"\n    Returns the measure of the angle m between the three points p, q, and r.\n    \"\"\"\n    return math.degrees(math.acos((q[0] - p[0]) * (r[0] - p[0]) + (q[1] - p[1]) * (r[1] - p[1]) + (q[2] - p[2]) * (r[2] - p[2])))\n\ndef mangle_possible_values(n=7):\n    \"\"\"\n    Returns the number of possible values for mangle(p, q, r) given n equally spaced points around a circle.\n    \"\"\"\n    return (n - 1) * (n - 2) * (n - 3)\n\ndef mangle_possible_values_with_points(points):\n    \"\"\"\n    Returns the number of possible values for mangle(p, q, r) given n equally spaced points around a circle.\n    \"\"\"\n    n = len(points)\n    return (n - 1) * (n - 2) * (n - 3)\n\nprint(mangle_possible_values(7))\nprint(mangle_possible_values_with_points([(0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0), (-1, 1, 0), (-1, 0, 0), (-1, -1, 0)]))"
  },
  {
    "example_id": 168,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "import math\n\ndef triangle_area(side_a, side_b, side_c):\n    s = (side_a + side_b + side_c) / 2\n    return math.sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\n\nside_a, side_b, side_c = 6, 8, 10\nnew_side_a, new_side_b, new_side_c = side_a * 1.5, side_b * 1.5, side_c * 1.5\nprint(triangle_area(new_side_a, new_side_b, new_side_c))"
  },
  {
    "example_id": 169,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "angle_RAS = 74\nangle_RTB = 28\nangle_BR = angle_RAS - angle_RTB\nprint(angle_BR)"
  },
  {
    "example_id": 170,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import pi\n\ntank_radius = 6\nbeaker_radius = 3\nbeaker_height = 8\n\nwater_in_beaker = 4/3 * pi * beaker_radius**3\n\ntank_volume = 4/3 * pi * tank_radius**3\n\nnumber_of_beakers = tank_volume / water_in_beaker\n\nprint(number_of_beakers)"
  },
  {
    "example_id": 171,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 0\nb = 1\nc = 2\nd = 4\nsum = a + b + c + d\nprint(sum)"
  },
  {
    "example_id": 172,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "61.26020470831195"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "import math\nx = math.degrees(math.atan(3.1/1.7))\nprint(x)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "area = (6*8)/2\nprint(area)"
  },
  {
    "example_id": 174,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nlateral_surface_area = 24 * sympy.pi\nvolume = lateral_surface_area\nradius = (3 * volume) / (4 * lateral_surface_area)\nprint(radius)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "from sympy import *\n\na, b, c = symbols('a b c')\ns = a+b+c\n\nG = (a*b*c)/s\nM = (a+b)/2\nN = (b+c)/2\n\narea = (M-G) * (N-G)\nprint(area)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.137166941154069"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import math\n\n# Area of the two crescent-shaped regions\narea = math.pi * 3 * 3 / 2\n\nprint(area)"
  },
  {
    "example_id": 177,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "3.0",
      "12.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\n\na, b, c = 6, 3*sympy.sqrt(3), 0\n\np = (a**2 + b**2 - c**2)/(2*a*b)\n\nprint(p)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.2"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "perimeter = 176\nside_length = perimeter / 5\nprint(side_length)"
  },
  {
    "example_id": 179,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\ndef area(x, y):\n    return sympy.integrate((x+1)**2 + (y+1)**2, (x, -1, 0))\nprint(area(x, y))"
  },
  {
    "example_id": 180,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x, y = 4, 9\nprint(x + y)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "area = 6\nBD = 4 * area / 3\nprint(BD)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 4\ny = 6\n\nif x < y:\n    print(y - x)\nelse:\n    print(x - y)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1440.0"
    ],
    "annotated_answers": [
      "864.0"
    ],
    "solution": "base_area = 288\nheight = 15\nvolume = base_area * height / 3\nprint(volume)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "195936.0"
    ],
    "annotated_answers": [
      "391872.0"
    ],
    "solution": "distance = 97968 * (30 / 15)\nprint(distance)"
  },
  {
    "example_id": 185,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-36.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "import math\nangle_AOB = 54 - 90\nprint(angle_AOB)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "1152.0"
    ],
    "solution": "# using same batter\nflour_per_waffle = 1/2\nflour_in_griddle = 24\nwaffles_needed = flour_in_griddle / flour_per_waffle\nprint(waffles_needed)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "length_ax = 6\nlength_zb = 18\nlength_zc = 63\nratio = length_zb / length_zc\nlength_ay = length_ax / ratio\nprint(length_ay)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "a = 10\nb = 3\nprint(a + b)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "59.99999999999999"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "import numpy as np\n\ndef volume_of_sphere(volume):\n    radius = (3 * volume / (4 * np.pi)) ** (1/3)\n    return (4/3) * np.pi * radius ** 3\n\nvolume = 60\nradius = volume_of_sphere(volume)\nprint(radius)"
  },
  {
    "example_id": 190,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.25"
    ],
    "solution": "from math import sqrt\n\na = 7\nb = sqrt(7 ** 2 - a ** 2)\nprint(a * b)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "2.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "from sympy import symbols\n\nx, y = symbols('x y')\n\narea = (12 - x) * y / 2\n\nprint(area)"
  },
  {
    "example_id": 192,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.75"
    ],
    "solution": "pentagon = (1 - 1) * (1 - (-1)) + (-1 - 1) * (1 - 1) + (-1 - (-1)) * (1 - (-1)) + (1 - (-1)) * (1 - 1)\nprint(pentagon)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "length = 12\nprint(length)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6197751905438615"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import tan\nprint(tan(45))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "2.0",
      "8.0",
      "2.0",
      "2.0",
      "12.0",
      "2.0",
      "4.0",
      "1.0",
      "16.0",
      "2.0",
      "4.0",
      "1.0",
      "64.0",
      "2.0",
      "6.0",
      "1.0",
      "144.0",
      "2.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "import sympy\n\na, b, c, d = sympy.symbols('a b c d')\n\narea = sympy.integrate(sympy.sqrt((a + 2)**2 + b**2), (a, -2, 2)) + sympy.integrate(sympy.sqrt((a - 2)**2 + b**2), (a, 2, -2)) + sympy.integrate(sympy.sqrt((a - 6)**2 + b**2), (a, -6, -2)) + sympy.integrate(sympy.sqrt((a + 2)**2 + b**2), (a, 2, -6))\n\nprint(area)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "157.07963267948966"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "from math import pi\narea = (1/2) * pi * 10**2\nprint(area)"
  },
  {
    "example_id": 197,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\n\na = (2, 4)\nb = (2, -4)\n\nperimeter_1 = math.sqrt((b[0] - a[0]) ** 2 + (b[1] - a[1]) ** 2) + math.sqrt((a[0] - (-1)) ** 2 + (a[1] - 0) ** 2)\nperimeter_2 = math.sqrt((b[0] - (-1)) ** 2 + (b[1] - 0) ** 2) + math.sqrt((a[0] - 2) ** 2 + (a[1] - 4) ** 2)\n\nprint(max(perimeter_1, perimeter_2) - min(perimeter_1, perimeter_2))"
  },
  {
    "example_id": 198,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.56"
    ],
    "annotated_answers": [
      "37.72"
    ],
    "solution": "a = 7\nb = 24\nc = 25\nsum = a + b + c\nprint(sum / 100)"
  },
  {
    "example_id": 199,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "from sympy import *\n\na, b, c, d = symbols('a b c d')\narea = (a*b*sin(pi/2))/2\nprint(area)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.7463526651802308"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\n\nlateral_surface_area = 3.5\nvolume = 3.5\n\nradius = (lateral_surface_area / (2 * pi)) ** (1/2)\n\nprint(radius)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "2.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "from sympy import *\n\ns = Polygon(Point(0, 0), Point(1, 1), Point(1, 0.5), Point(2.5, 0.5), Point(2.5, -0.5), Point(1, -0.5), Point(1, -1))\nprint(s.area)"
  },
  {
    "example_id": 202,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "import math\nv, w, x, y, z = 120, 60, 30, 15, 0\na = (x - y) / (z - y)\nb = (w - y) / (z - y)\nc = (v - y) / (z - y)\nd = a - b\ne = c - b\nf = d / e\nx = f * z + y\nprint(x)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy\n\nx = sympy.symbols('x')\narea = 30\ntriangle_base = x\ntriangle_height = 5\ntriangle_area = (triangle_base * triangle_height) / 2\nprint(sympy.solve([triangle_area - area, triangle_base - x], x))"
  },
  {
    "example_id": 204,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.745966692414834"
    ],
    "annotated_answers": [
      "184.0"
    ],
    "solution": "a = 14**2 - 10**2 - 6**2\na = a**0.5\nprint(a)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "radius = 27 * 3\nprint(radius)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1008.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "pentagon_area = 2 * (12 * 24 + 12 * 12 + 6 * 12)\nprint(pentagon_area)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.7142857142857142"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "side_AB = 4\nside_BC = 6\nside_XY = 14\n\n# Compute the ratio of the measures of the two similar sides\nratio = side_AB / side_XY\n\n# Compute the measure of side YZ\nside_YZ = ratio * side_BC\n\nprint(side_YZ)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a = 3"
  },
  {
    "example_id": 209,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "770.6620530427069"
    ],
    "annotated_answers": [
      "2040.0"
    ],
    "solution": "import math\n\nl = math.sqrt(32**2 + 36**2)\narea = (l * 32) / 2\nprint(area)"
  },
  {
    "example_id": 210,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.196152422706632"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "import math\nradius = 3\nheight = math.sqrt(3 * radius ** 2)\nprint(height)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2000.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import math\n\ntheta = 20\nradius = 100\n\nlength = theta * radius\n\nprint(length)"
  },
  {
    "example_id": 212,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3505.0"
    ],
    "annotated_answers": [
      "145.0"
    ],
    "solution": "import math\nimport sympy\n\n# solve the equation\n# AD^2 + AB^2 - 2 * AD * AB * math.cos(math.radians(90)) = AC^2\n# AC^2 = AB^2 + BD^2 - 2 * AB * BD * math.cos(math.radians(90))\n# AC^2 = 105^2 + 42^2 - 2 * 105 * 42 * math.cos(math.radians(90))\n# AC^2 = 12277 + 1764 - 2 * 105 * 42 * math.cos(math.radians(90))\n# AC^2 = 14020\n# AC = sqrt(14020)\n# AC = 119\nprint(sympy.sqrt(14020))"
  },
  {
    "example_id": 213,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.18968510422141"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "import math\nadc = math.degrees(math.acos((2 * 1) / (1 + 2)))\nprint(adc)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "from math import sin, degrees\n\ndef find_angle(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Calculates the angle formed by three points.\n    \"\"\"\n    angle = degrees(sin(y1 - y2))\n    return angle\n\nx1, y1 = -4.07, 0\nx2, y2 = 40.008, 0\nx3, y3 = 0, 20.616\n\n# Calculate the angle\nangle = find_angle(x1, y1, x2, y2, x3, y3)\n\n# Bisect the angle\nprint(angle / 2)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x = 360 / 10\nprint(x)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "volume = 2 * 2 * 2 + 19\nedge_length = volume ** (1/3)\nprint(edge_length)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\ns = (a + b + c) / 2\n\ng = sympy.sympify('(a*b + b*c + c*a) / (a + b + c)')\n\nm = sympy.sympify('(a*b + b*c + c*a - (a + b + c)**2 / 4) / (a + b + c)')\nn = sympy.sympify('(a*c + b*c + c*a - (a + b + c)**2 / 4) / (a + b + c)')\n\ne = sympy.sympify('(m*n + m*g + n*g - g*g) / (m + n)')\n\nprint(e)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.8011526357338304"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import sin\nprint(sin(180))"
  },
  {
    "example_id": 219,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "def area(base, height):\n    return base * height / 2\n\nbase = 10\nheight = 10\narea1 = area(base, height)\n\nbase = 10\nheight = 10\narea2 = area(base, height)\n\narea = area1 + area2\nprint(area)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x y')\n\nsolution = sympy.solve(x + y - 6, y)\n\nprint(solution)"
  },
  {
    "example_id": 221,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.800000000000001"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "length = 3 * (5 - 2.4)\nprint(length)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "from sympy import symbols\n\na, b, c = symbols('a b c')\n\nprint(c/2)"
  },
  {
    "example_id": 223,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-11.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import math\n\nc = 16\nr1 = 10\nr2 = 17\n\ncenter_distance = c - r1 - r2\n\nprint(center_distance)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "length = 12\nwidth = 12\narea = length * width\nprint(area)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "from sympy import symbols, sqrt, simplify\n\na, b, c = symbols('a b c')\n\ns = (a + b + c) / 2\narea = sqrt(s * (s - a) * (s - b) * (s - c))\n\nprint(area)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "print(4 * 30)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0"
    ],
    "annotated_answers": [
      "23.31"
    ],
    "solution": "import numpy as np\n\ndef ant(x):\n    t1 = x / np.sqrt(2)\n    t2 = x**2 / 2\n    return t1 + t2 + 2\n\nmin_x = np.min(np.linspace(0, 20, 100))\nmin_t = ant(min_x)\nprint(min_x, min_t)"
  },
  {
    "example_id": 228,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "from sympy import *\na, b, c = symbols(\"a b c\")\nAD = sqrt(a**2 + b**2)\nprint(AD)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\n\narea = 30\n\ntriangle_pwx = (b * (c - a) + (a + b) * c) / 2\ntriangle_pzx = (b * (c - a) + (a + b) * c) / 2\n\np = sympy.sqrt(triangle_pwx * triangle_pzx / (triangle_pwx + triangle_pzx))\n\nprint(triangle_pwx + triangle_pzx - 2 * p)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "base = 3 + 4 + 5\nheight = 6\nvolume = base * height / 3\nprint(volume)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "import sympy\n\nA, B, C, D, E, F = sympy.symbols(\"A B C D E F\")\n\narea = (A * B + C * D + E * F) / 2\n\nprint(area)"
  },
  {
    "example_id": 232,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import *\na, b, c = symbols(\"a b c\")\nr = sqrt((a ** 2 + b ** 2 + c ** 2) / 2)\nprint(r)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.26548245743669"
    ],
    "annotated_answers": [
      "62.8"
    ],
    "solution": "from math import pi\n\n# Area of the shaded region\narea = 4 * pi * (4 / 2)**2\nprint(area)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "from sympy import *\n\na, b, c = symbols('a b c')\n\ns = (a + b + c) / 2\n\nr = sqrt(s * (s - a) * (s - b) * (s - c))\n\nprint(r)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import symbols, simplify\n\nx, y = symbols('x y')\n\na, b, c, d = [x, y, -x, -y]\n\narea = simplify((a - b) * (c - d))\n\nprint(area)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "74.0"
    ],
    "solution": "import math\n\nr = 54\nd = 3\ndelta = 1\n\nwhile math.pow(r, 3) == math.pow(r + delta, 3):\n    delta += 1\n\nprint(delta)"
  }
]