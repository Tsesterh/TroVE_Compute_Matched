[
  {
    "example_id": 0,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "113.09733552923254"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "from math import pi\nradius = 3\nvolume = (4/3) * pi * radius**3\nprint(volume)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.3333333333333335"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = (2*3*1 - 1 + 2*1 - 2 + 1 + 4) / (3*1 - 1 + 2*1 - 2 + 1)\nprint(x)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "angle_A_B_C = 35\nangle_B_C_A = 35\nangle_C_D_A = 180 - angle_A_B_C - angle_B_C_A\nprint(angle_C_D_A)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "s = 1\nr = 9\nprint(r/s)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "min(1, 2, 3, 4)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.141592653589793"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\n\narea = pi\nprint(area)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.4"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nsurface_area = 112 * math.pi\nradius = surface_area / (2 * math.pi) / 2.5\nprint(radius)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "old_diameter, old_height = 12, 8\nnew_diameter = old_diameter * 1.25\nnew_height = old_height * (new_diameter / old_diameter)\nprint(new_height / old_height)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import *\nx, y = symbols('x,y')\nAB = sqrt(x**2 + y**2)\nBC = sqrt((x - 3)**2 + y**2)\nCD = sqrt((x - 3)**2 + (y + 2)**2)\nAD = sqrt((x + 3)**2 + y**2)\narea = (AB + BC + CD + AD) / 2\nprint(area)"
  },
  {
    "example_id": 9,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2246467991473533",
      "-16.0",
      "1.633123935319537",
      "16.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\na = 2 * math.cos(math.radians(90))\nprint(a)\n\nprint(math.tan(math.radians(90)))"
  },
  {
    "example_id": 10,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4472135954999579"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "import math\n\ndef area_of_circle(radius):\n    return math.pi * radius ** 2\n\ndef area_of_shaded_region(radius):\n    return 0.2 * area_of_circle(radius)\n\nradius = math.sqrt(area_of_shaded_region(1) / math.pi)\nx = radius\nprint(x)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "area_of_square_abcd = 100\nside_length_of_square_efgh = 2\narea_of_square_efgh = area_of_square_abcd / side_length_of_square_efgh\nprint(area_of_square_efgh)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5235987755982988"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import pi\n\nvolume = pi / 6\n\nprint(volume)"
  },
  {
    "example_id": 13,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.898587196589413",
      "-16.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\n\nJL = 8 / math.tan(math.radians(90))\nprint(JL)"
  },
  {
    "example_id": 14,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "length, width, height = 10, 10, 12\nsurface_area = 2 * (length * width + length * height + width * height)\ncost = surface_area * 0.05\nprint(cost)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "from sympy import *\n\n# Water volume in the pipe\nv1 = pi * 2 ** 2 * 4\n\n# Water volume in the bigger pipe\nv2 = pi * 12 ** 2 * 4\n\n# Number of congruent pipes\nn = v2 // v1\n\nprint(n)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\ns = (a + b + c) / 2\n\nx = sympy.sqrt(s * (s - a) * (s - b) * (s - c))\n\nprint(x)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\nab = 2 * math.sqrt(2) * 2\ndc = 2 * math.sqrt(2)\nprint(ab / dc)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "from sympy import *\n\na, b, c = symbols('a b c')\n\nAB = 2 * (a + b + c)\n\nprint(AB)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "length_GF = 4\nprint(length_GF)"
  },
  {
    "example_id": 20,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.4494897427831783"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\na = math.sqrt(2)\nc = math.sqrt(3)\nprint(a*c)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\ns = sympy.Polygon(sympy.Point(0, 6), sympy.Point(0, 0), sympy.Point(8, 0), sympy.Point(0, 3), sympy.Point(4, 0), sympy.Point(8/3, 2))\nprint(s.area)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 1\nb = 7\nc = 2\nd = 4\nsum = a + b + c + d\nprint(sum)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.05"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "PQ = 0.67 * 15\nprint(PQ)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34606.0"
    ],
    "annotated_answers": [
      "8918.0"
    ],
    "solution": "first_edge_length = 11\nsecond_edge_length = 3 * first_edge_length\nvolume_second_cube = second_edge_length ** 3\nvolume_first_cube = first_edge_length ** 3\ndifference = volume_second_cube - volume_first_cube\nprint(difference)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "median = (34 + 32) / 2\nprint(median)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "print(65)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5196.152422706633"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "surface_area = 600\nside_length = (surface_area / 2) ** (1/2)\nvolume = side_length ** 3\nprint(volume)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "perimeter = 2 * 8 + 8 + 8\nprint(perimeter)"
  },
  {
    "example_id": 29,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import string\n\nmathcounts_letters = \"MATHCOUNTS\"\n\nhorizontal_line_letters = []\n\nfor letter in mathcounts_letters:\n    if letter in \"AEIOU\":\n        horizontal_line_letters.append(letter)\n\nprint(len(horizontal_line_letters))"
  },
  {
    "example_id": 30,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import math\n\nside_a, side_b, side_c = 3, 4, 5\n\narea = (side_a + side_b + side_c) * math.sqrt(3) / 2\nvolume = area * side_c / 2\n\nprint(int(volume))"
  },
  {
    "example_id": 31,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from sympy import symbols\n\nh, w = symbols('h w')\n\narea = (w + h) * h / 2\n\nprint(area)"
  },
  {
    "example_id": 32,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "length = 4\nwidth = length / 4\npercentage = width / length * 100\nprint(percentage)"
  },
  {
    "example_id": 33,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "surface_area = 6 * 3**2\nprint(surface_area)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\n\n# AB = 7, CD = 7\n# AP = CP = 7\n# AP = BP + CP\n# AP - CP = BP\n# BP = 7 - 7 = 0\n\n# DP = AB - AP\n# DP = 7 - 0 = 7\n\n# BP/DP = 0/7 = 0\nprint(0)"
  },
  {
    "example_id": 35,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\n\nr = sympy.sqrt(1/3)\na = 1/3\nb = 1/3\nc = 1/3\nprint(a + b + c)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "227.5"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "base_A = 52\nbase_C = 39\nheight = 5\narea = 0.5 * (base_A + base_C) * height\nprint(area)"
  },
  {
    "example_id": 37,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "102.0"
    ],
    "annotated_answers": [
      "102.0"
    ],
    "solution": "from math import sqrt\nside_1 = 13\nside_2 = 17\nside_3 = 12 * sqrt(2)\ns = (side_1 + side_2 + side_3) / 2\narea = sqrt(s * (s - side_1) * (s - side_2) * (s - side_3))\nprint(area)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "perimeter = 12 + 8 + 2\nprint(perimeter)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0000000000000004"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import math\nprint(math.tan(math.radians(315)))"
  },
  {
    "example_id": 40,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5568.0"
    ],
    "annotated_answers": [
      "2304.0"
    ],
    "solution": "area = 96 * 32 + 104 * 24\nprint(area)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "a, b, c, d, e, f, g, h, y, s = 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nquadrilateral_area = 2 * (a + b + c + d)\nprint(quadrilateral_area)"
  },
  {
    "example_id": 42,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\n\n# volume = (4/3) * pi * r^3\n# surface_area = 4 * pi * r^2\n\nr = sympy.Symbol('r')\nvolume = (4/3) * sympy.pi * r**3\nsurface_area = 4 * sympy.pi * r**2\n\nsolution = sympy.solve([volume, surface_area], r)[0]\n\nprint(solution)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# octagonal prism has 8 sides\nprint(8)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.333333333333333"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import math\n\ndef volume(r,h):\n    return (math.pi * r ** 2) * h\n\ndef height(r,v):\n    return v / (math.pi * r ** 2)\n\nr = 3\nv = 30 * math.pi\nh = height(r,v)\nprint(h)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.4247779607693793"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "from math import pi\n\na = 6\nb = 3\n\nprint(a-b*pi)"
  },
  {
    "example_id": 46,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "from math import pi\n\ndef find_min_rotation(n):\n    rotation = 0\n    while n!= 5:\n        rotation += 360 / n\n        n += 1\n    return rotation\n\nprint(find_min_rotation(5))"
  },
  {
    "example_id": 47,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "x = 124 - 90\nprint(x)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29700.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "s = 0\nfor i in range(1, 100):\n    s += i\n    s += 5 * i\nprint(s)"
  },
  {
    "example_id": 49,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "592.0"
    ],
    "solution": "a, b, c, d, e, f = 1, 1, 1, 1, 1, 1\na = 1\nb = 1\nc = 1\nd = 1\ne = 1\nf = 1\nproduct = a*b*c*d*e*f\nprint(product % 1000)"
  },
  {
    "example_id": 50,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import pi\n\nradius_old = 4\nradius_new = 8\nvolume_old = pi * radius_old ** 2\nvolume_new = pi * radius_new ** 2\n\nnumber_of_containers_needed = int(volume_old / volume_new)\n\nprint(number_of_containers_needed)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef is_triangle(a, b, c):\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef is_triangle_with_side_lengths(a, b, c):\n    if a == b == c:\n        return True\n    elif a + b < c or a + c < b or b + c < a:\n        return False\n    else:\n        return is_triangle(a, b, c)\n\n\ndef p_that_exists_a_triangle_with_side_lengths(a, b, c):\n    for p in range(1, int(math.sqrt(a**2 + b**2) + 1)):\n        if is_triangle_with_side_lengths(3*p-1, 3*p, p**2+1):\n            return p\n    return 0\n\n\nprint(p_that_exists_a_triangle_with_side_lengths(3, 4, 5))"
  },
  {
    "example_id": 52,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "198.0"
    ],
    "solution": "side = 3\nside_1 = 1\nside_2 = 2\n\nsurface_area = 6 * (side ** 2) - 4 * side_1 ** 2 - 4 * side_2 ** 2\nprint(surface_area)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "angle = 180 - 40\nprint(angle)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sin\n\nx = 0\nwhile sin(x) < -0.31:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 55,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.333333333333332"
    ],
    "annotated_answers": [
      "15.08"
    ],
    "solution": "volume = (4 ** 2) * 4 / 3\nprint(volume)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "import math\n\na, b, c, d, e = -1, -3, 6, 5, 3\ns = (a + b + c + d + e) / 2\narea = (s * (s - a) * (s - b) * (s - c) * (s - d) * (s - e)) ** 0.5\nprint(area)"
  },
  {
    "example_id": 57,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "156.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "import math\nbase_1 = 7\nbase_2 = 17\nheight = 13\narea = (base_1 + base_2) * height / 2\nprint(area)"
  },
  {
    "example_id": 58,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0000000000000004"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nside_a = 4 * math.sqrt(2)\nside_b = 2\nside_c = math.sqrt(side_a**2 + side_b**2)\nmedian = side_c / 2\nprint(median)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def kendra_triangles(stick_lengths):\n    triangles = 0\n    for i in range(len(stick_lengths)):\n        for j in range(i + 1, len(stick_lengths)):\n            for k in range(j + 1, len(stick_lengths)):\n                if stick_lengths[i] + stick_lengths[j] > stick_lengths[k] and stick_lengths[j] + stick_lengths[k] > stick_lengths[i] and stick_lengths[k] + stick_lengths[i] > stick_lengths[j]:\n                    triangles += 1\n    return triangles\n\nprint(kendra_triangles([2, 4, 6]))"
  },
  {
    "example_id": 60,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "5.0",
      "6.0",
      "9.0",
      "10.0",
      "12.0",
      "15.0",
      "18.0",
      "20.0",
      "21.0",
      "24.0",
      "25.0",
      "27.0",
      "30.0",
      "33.0",
      "35.0",
      "36.0",
      "39.0",
      "40.0",
      "42.0",
      "45.0",
      "48.0",
      "50.0",
      "51.0",
      "54.0",
      "55.0",
      "57.0",
      "60.0",
      "63.0",
      "65.0",
      "66.0",
      "69.0",
      "70.0",
      "72.0",
      "75.0",
      "78.0",
      "80.0",
      "81.0",
      "84.0",
      "85.0",
      "87.0",
      "90.0",
      "93.0",
      "95.0",
      "96.0",
      "99.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "length_a = 3\nlength_b = 5\n\ncentimeters = list(range(1, 100))\n\nfor centimeter in centimeters:\n    if centimeter % length_a == 0 or centimeter % length_b == 0:\n        print(centimeter)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.6604597633658"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\n\ndef area_of_triangle(x1, y1, x2, y2, x3, y3):\n    return sympy.sqrt((x1 - x2)**2 + (y1 - y2)**2) * sympy.sqrt((x1 - x3)**2 + (y1 - y3)**2)\n\nprint(area_of_triangle(3, 0, 6, 0, 4.5, 5))"
  },
  {
    "example_id": 62,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.01"
    ],
    "annotated_answers": [
      "86.0"
    ],
    "solution": "length = 2\nmidpoint = length / 2\narea = midpoint * midpoint\nk = area / 100\nprint(k)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 12/6\nprint(n)"
  },
  {
    "example_id": 64,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "11.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\ntri_x = 5 + 6 + x\ntri_x = sp.integrate(tri_x, x)\nprint(tri_x)"
  },
  {
    "example_id": 65,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6666666666666666"
    ],
    "annotated_answers": [
      "1.17"
    ],
    "solution": "depth = 1 / 1.5\nprint(depth)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import numpy as np\n\ndef area(A, B, C):\n    return np.abs(np.cross(B-A, C-A))/2\n\nprint(area(np.array([-4, -1]), np.array([2, -1]), np.array([1, 3])))"
  },
  {
    "example_id": 67,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0",
      "-38.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a, b, c, d = 1, 2, 3, 4\narea1 = a * b * c + b * c * d + c * d * a + d * a * b\narea2 = a * b * c - b * c * d - c * d * a - d * a * b\nprint(area1, area2)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# The distance from the center point P to the corner Q of the opposite base\ndistance = 16/2\nprint(distance)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5707963267948966"
    ],
    "annotated_answers": [
      "1.3"
    ],
    "solution": "import math\nradius = 1\ntrapezoid_area = (math.pi * radius ** 2) / 2\nprint(trapezoid_area)"
  },
  {
    "example_id": 70,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.13125929752753"
    ],
    "annotated_answers": [
      "4.14"
    ],
    "solution": "import math\nside_length = 10 / math.sin(math.pi / 8)\nprint(side_length)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a = 12\nb = 12\nc = 32 - a - b\nprint(c)"
  },
  {
    "example_id": 72,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def isosceles_triangles(p):\n    for i in range(1, p // 2 + 1):\n        if i * 2 == p:\n            yield i\n\nprint(list(isosceles_triangles(20)))"
  },
  {
    "example_id": 73,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.283185307179586"
    ],
    "annotated_answers": [
      "640.0"
    ],
    "solution": "import math\n\nvolume = (8/3)*math.pi - (2/3)*math.pi\nprint(volume)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.141592653589793"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\na, b, c = 4, 4, 4\ns = math.pi * 2\ns_triangle = (a + b + c) / 2\ns_semicircle = s / 2\narea = s_triangle * s_semicircle / s_triangle\nprint(area)"
  },
  {
    "example_id": 75,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "side_a = 5\nside_b = 5\nside_c = 6\narea = (side_a * side_b) / 2\nprint(area)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.219544457292887"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "a = 7**2\nb = 6**2\ns = (a + b)**0.5\nprint(s)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "print(90-40)"
  },
  {
    "example_id": 78,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "w = 1\nx = 1\ny = 1\nz = 1\nprint(w + x + y + z)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3599.9999999999995"
    ],
    "annotated_answers": [
      "3600.0"
    ],
    "solution": "base_length = 20\nheight = 27\nvolume = (1/3) * base_length * base_length * height\nprint(volume)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0",
      "60.0",
      "45.0",
      "36.0",
      "30.0",
      "25.714285714285715",
      "22.5",
      "20.0",
      "18.0",
      "16.363636363636363",
      "15.0",
      "13.846153846153847"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def star_polygon_angle(n):\n    return (180 * n) / (n * (n + 1))\n\nfor i in range(1, 13):\n    print(star_polygon_angle(i))"
  },
  {
    "example_id": 81,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "0.5"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\na, b = sympy.symbols(\"a b\")\nc = sympy.sqrt(a**2 + b**2)\ns = a + b + c\narea = (s*(s-a)*(s-b)*(s-c))**0.5\nprint(area)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.274333882308138"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from math import pi\nradius = 3\narea = pi * radius ** 2\nprint(area)"
  },
  {
    "example_id": 83,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from sympy import symbols\n\na, b, c = symbols(\"a b c\")\n\n# Formula for angle bisector\nad = (b**2 + c**2 - a**2) / (2 * b * c)\n\nprint(ad)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "112.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "length_of_base_1 = 4\nlength_of_base_2 = 10\nheight = 16\narea = (length_of_base_1 + length_of_base_2) * height / 2\nprint(area)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2500.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "from math import pi\narea = (100**2) / 4\nprint(area)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "length = 10\narea = 40\nbase = length * 2\nheight = area / base\nprint(height)"
  },
  {
    "example_id": 87,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.10134583033141"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import math\nradius = math.sqrt(49/math.pi)\narc_length = 28 - 2 * radius\nprint(arc_length)"
  },
  {
    "example_id": 88,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 3 - 2\ny = 3\nprint(x + y)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "def triangles_with_two_equal_sides(side_lengths):\n    count = 0\n    for i in range(len(side_lengths)):\n        for j in range(i+1, len(side_lengths)):\n            if side_lengths[i] == side_lengths[j]:\n                count += 1\n    return count\n\nprint(triangles_with_two_equal_sides([2, 3, 5, 7, 11]))"
  },
  {
    "example_id": 90,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.74"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Triangle ABE\narea_ABE = (10 * 10) / 2\n\n# Triangle DEF\narea_DEF = (7.4 * 10) / 2\n\n# Ratio\nratio = area_DEF / area_ABE\nprint(ratio)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(8)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "area = 6 * 10\nprint(area)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.524174696260026"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import sqrt\n\nlength = 16\nwidth = 20\nheight = 15\n\n# Find the length of RD\nlength_rd = sqrt(pow(width - length, 2) + pow(height, 2))\n\n# Find QR - RD\nqr = length_rd + width - length\n\nprint(qr)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "perimeter = 30 + 17 + 17\nprint(perimeter)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(14 / 2)"
  },
  {
    "example_id": 96,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.142135623730951"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "import math\nlength_of_rope_c = 150\nlength_of_rope_d = 130\ndistance_between_c_and_d = math.sqrt(((140-length_of_rope_c)**2)+((140-length_of_rope_d)**2))\nprint(distance_between_c_and_d)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import math\n\nheight = 3\nside_length = 6\narea = (side_length * height) * 6\nprint(area)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "452.3893421169302"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "import math\n\nside = 12\narea = math.pi * side ** 2\nprint(area)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "224.0"
    ],
    "solution": "import math\nn = int(math.pi * (6/3) * (8**3 - 4**3) / (8**3 - 4**3))\nprint(n)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import Polygon, Point\n\nquadrilateral = Polygon(Point(0, 1), Point(1, 3), Point(5, 2), Point(4, 0))\nprint(quadrilateral.area)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "r = 8\nprint(r)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import pi\n\nvolume1 = pi * 2**2 * 1\nvolume2 = pi * 1**2 * 1\n\nprint(volume2 / volume1)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\n\nm = sympy.sqrt(a**2 - c**2) / a\nn = sympy.sqrt(c**2 - b**2) / c\n\nI = (m + n) / 2\n\nM = a * (1 - I) / m\nN = c * (1 - I) / n\n\nperimeter = M + N + b\n\nprint(perimeter)"
  },
  {
    "example_id": 104,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0",
      "18.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "import sympy\n\nx = sympy.symbols('x')\narea = sympy.integrate((-2*x + 12 - (4*x - 6)), x)\nprint(area)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import gcd\n\n# find the gcd of the coordinates\ng = gcd(4, -4)\n\n# find the number of rectangles\nrectangles = 1\nwhile g > 1:\n    rectangles += 1\n    g = gcd(g, -3)\n\nprint(rectangles)"
  },
  {
    "example_id": 106,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "old_radius = 10\nnew_radius = old_radius * 0.8\n\nold_height = 20\nnew_height = old_height * 1.25\n\nold_volume = 3.14 * old_radius ** 2 * old_height\nnew_volume = 3.14 * new_radius ** 2 * new_height\n\npercent_change = (new_volume - old_volume) / old_volume\nprint(abs(percent_change * 100))"
  },
  {
    "example_id": 107,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\ns = (a + b + c) / 2\narea = sympy.sqrt(s*(s-a)*(s-b)*(s-c))\nprint(area)"
  },
  {
    "example_id": 108,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "27.2"
    ],
    "solution": "import sympy\nside_a, side_b, side_c = sympy.symbols('side_a, side_b, side_c')\naltitude_a = sympy.sqrt(side_b ** 2 + side_c ** 2)\naltitude_b = sympy.sqrt(side_a ** 2 + side_c ** 2)\naltitude_c = sympy.sqrt(side_a ** 2 + side_b ** 2)\nsum_altitudes = altitude_a + altitude_b + altitude_c\nprint(sum_altitudes)"
  },
  {
    "example_id": 109,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\n\nwidth = 2\nheight = 3\n\narea = width * height / 2\nprint(area)"
  },
  {
    "example_id": 110,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "a = (10, 24)\nprint(a[1])"
  },
  {
    "example_id": 111,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\n\n# Calculate the area of the shaded region\narea = sympy.Rational(1,2) * sympy.sqrt(8)\nprint(area)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "11.5"
    ],
    "solution": "area = 5 * 8\nprint(area)"
  },
  {
    "example_id": 113,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "print(6 * 2)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.385995887898602"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\nradius = math.sqrt((6 * 6) / 3.14)\nprint(radius)"
  },
  {
    "example_id": 115,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 2\nb = 2\n\nx = 1\ny = 3\n\nx = 2\ny = 1\n\nx = 3\ny = 0\n\nx = 0\ny = 1\n\nprint(a, b)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.870509320858122"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "height = 30\nvolume = 63960\nside_length = (volume / height) ** (1/3)\nprint(side_length)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-39.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "import sympy\n\np = sympy.Point(0, 5)\nq = sympy.Point(6, 9)\nr = sympy.Point(12, 0)\ntriangle = sympy.Triangle(p, q, r)\nprint(triangle.area)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "perimeter = 2 * (12 + 16)\nprint(perimeter)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(40)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "a, b, c = 60, 60 + 180, 60 + 180 + 180\nprint(c)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "x = [5, 5, -5, -5]\ny = [4, -4, 4, -4]\ninside = [1 for x, y in zip(x, y) if x >= 0 and y >= 0 and x <= 10 and y <= 10]\nprint(len(inside))"
  },
  {
    "example_id": 122,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "a, b, c = 1, 2, 3\narea = (b - a) * (c - a)\nprint(area)"
  },
  {
    "example_id": 123,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 6.5\nn /= 6.5\nn = int(n)\nprint(n)"
  },
  {
    "example_id": 124,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "base_perimeter = 3 * 4\nheight = 2 * base_perimeter\nvolume = (1/3) * base_perimeter * height\nprint(volume)"
  },
  {
    "example_id": 125,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import math\n\ndef surface_area(side_length):\n    return 4 * side_length ** 2\n\nprint(surface_area(2))"
  },
  {
    "example_id": 126,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.08533845493851"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "import math\nx = math.degrees(math.atan2(math.sin(70), math.sin(40)))\nprint(x)"
  },
  {
    "example_id": 127,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.7999999999999998"
    ],
    "annotated_answers": [
      "1.4"
    ],
    "solution": "import math\nmidpoint = (10 + 6) / 2\nprint(midpoint - 7.2)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "import math\nx = math.degrees(math.acos((math.sin(40 * math.pi/180) * math.sin(90 * math.pi/180)) / (math.sin(40 * math.pi/180) + math.sin(90 * math.pi/180))))\ny = math.degrees(math.acos((math.sin(40 * math.pi/180) * math.sin(180 * math.pi/180)) / (math.sin(40 * math.pi/180) + math.sin(180 * math.pi/180))))\nz = 180 - x - y\nprint(x + y + z)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of a convex hexagon\n\ndef sum_angles(n):\n    return n * (n - 3)\n\nprint(sum_angles(6))\n\n# solution\n\nimport math\n\n# Calculate the sum of the angles of"
  },
  {
    "example_id": 130,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "from sympy import *\n\nsides = [6, 6, 6, 6, 6, 6]\n\npyramid = sum(sides)\n\nprint(pyramid)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef scoops_to_fill_cone(radius, height):\n    volume_of_cone = (4/3) * math.pi * radius ** 3\n    volume_of_scoop = (4/3) * math.pi * 1 ** 3\n    return volume_of_cone / volume_of_scoop\n\nprint(scoops_to_fill_cone(2, 5))"
  },
  {
    "example_id": 132,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 10\nb = 6\nc = 10\nd = (a+b)/2\ne = (a+c)/2\nprint(d-e)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "side_length = 8\narea = (side_length * side_length) / 2\nprint(area)"
  },
  {
    "example_id": 134,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.928203230275507"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "import math\nperimeter = 5 + 2*math.sqrt(3) + 2*math.sqrt(3)\nprint(perimeter)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "155.88457268119896"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nvolume = 2700 * math.pi\nradius = math.sqrt(volume / math.pi)\nheight = 3 * radius\nprint(height)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.262080214064092"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import math\nradius = (10*math.pi)/(2*math.sin(math.radians(75)))\nprint(radius)"
  },
  {
    "example_id": 137,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\nx, y, k = sympy.symbols('x, y, k')\na = sympy.Polygon((4, 0), (-4, 0), (0, k), (x, y))\nprint(a.area)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.166666666666668"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "import math\n\n# Hypotenuse of the first triangle is 24\n# Leg of the first triangle is 7\n# Hypotenuse of the second triangle is 100\n\n# Similar triangles, so the ratio of the shorter leg of the second triangle to the shorter leg of the first triangle is the same as the ratio of the hypotenuse of the second triangle to the hypotenuse of the first triangle\n# Therefore, the shorter leg of the second triangle is 7 \\* (100 / 24)\n\nprint(7 * (100 / 24))"
  },
  {
    "example_id": 139,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import *\n\nR = 36\n\nv = (4/3)*pi*R**3\n\nsa = 4*pi*R**2\n\nt = v/sa\n\nprint(t)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1191.6726364005663"
    ],
    "annotated_answers": [
      "17700.0"
    ],
    "solution": "from math import pi, sin, cos\n\n# Lena's latitude is 45 degrees\nlatitude = 45\n\n# Earth's equator is 25,100 miles long\nequator_length = 25100\n\n# Earth's circumference is 40,075 miles\ncircumference = 40075\n\n# The distance from the equator to the North Pole\nnorth_pole_to_equator = circumference / 2\n\n# Lena's distance from the equator\nlena_distance = north_pole_to_equator - (latitude * equator_length / 90)\n\n# The distance in miles\nmiles = lena_distance / (pi * 2)\n\nprint(miles)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "a = 3*14/4*2\nprint(a)"
  },
  {
    "example_id": 142,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.3386902103511544"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import tan\nprint(tan(180))"
  },
  {
    "example_id": 143,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b = 1, 3\nc = a + b\nprint(c)"
  },
  {
    "example_id": 144,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.414213562373095"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import math\na = 5 + math.sqrt(2)\nprint(a)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x, y = 7, 4\nprint(x + y)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\nr = 3\nh = sympy.sqrt(45*sympy.pi*r**2)\nprint(h)"
  },
  {
    "example_id": 147,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.9498743710662"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import math\n\nradius_small = 7\nradius_large = 10\n\nk = math.sqrt(radius_large ** 2 - (8 - radius_small) ** 2)\n\nprint(k)"
  },
  {
    "example_id": 148,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import symbols, cos, sin, pi\n\na, b = symbols('a, b')\nc = a * cos(pi / 6)\nd = b * cos(pi / 6)\n\narea = 24\n\nprint(a * d)\nprint(b * c)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols(\"a b c\")\n\ncos_a = (a**2 + b**2 - c**2) / (2*a*b)\n\nprint(cos_a)"
  },
  {
    "example_id": 150,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "import math\n\ndistance = math.sqrt(8**2 + 12**2)\nprint(round(distance))"
  },
  {
    "example_id": 151,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.098593171027442"
    ],
    "annotated_answers": [
      "8.5"
    ],
    "solution": "import math\nside_a = 8\nside_b = 15\nside_c = 17\nperimeter = side_a + side_b + side_c\ns = perimeter / 2\narea = math.sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\nradius = area / math.pi\nprint(radius)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "distance = 32 / 2\nprint(distance)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "volume_of_pyramid_ABCH = 20\nvolume_of_pyramid_ABCDEFGH = 2 * volume_of_pyramid_ABCH\nprint(volume_of_pyramid_ABCDEFGH)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "W, X, Y, Z = 12, 18, 18, 12\ntrapezoid_area = (Y - Z) * (X - W) / 2\nprint(trapezoid_area)"
  },
  {
    "example_id": 155,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "A = 16\nprint(A)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "301.0"
    ],
    "solution": "import sympy as sp\n\nn = 2\nm = 1\nfor i in range(2, 100):\n    n += 1\n    m += 1\n    if sp.gcd(m, n) == 1:\n        break\n\nprint(m + n)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "s = 1\nsurface_area = 6 * s**2\nvolume = s**3\nprint(surface_area == volume**(1/3))\nprint(surface_area**(1/2) == volume**(1/3))\nprint(s)"
  },
  {
    "example_id": 158,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "perimeter = 15 + 10 + 15\nprint(perimeter)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.162"
    ],
    "annotated_answers": [
      "0.54"
    ],
    "solution": "volume = 0.027\nsurface_area = 6 * volume\nprint(surface_area)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "208.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "x = 104\ny = 104\nprint(x + y)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.8284271247461903"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import sqrt\n\nmax_distance = 2 * sqrt(2)\nprint(max_distance)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "import sympy\n\na, b = sympy.symbols('a, b')\nc = sympy.sqrt(a**2 + b**2)\nc_min = sympy.floor(c)\nc_max = sympy.ceiling(c)\nprint(c_max - c_min)"
  },
  {
    "example_id": 163,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "from sympy import *\na, b, c = symbols('a b c')\ns = (a**2 + b**2 + c**2) / 2\narea = sqrt(s*(s-a*b)*(s-a*c)*(s-b*c))\nprint(area)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "side = 4\narea = side * side / 2\nprint(area)"
  },
  {
    "example_id": 165,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols(\"a b c\")\narea = sympy.sqrt((a**2 + b**2) * (c**2 + a**2) * (b**2 + c**2) * (a**2 + c**2))\nprint(area)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "angle = 60\nprint(angle)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0",
      "45.0",
      "45.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef mangle(p1, p2, p3):\n    # calculate the sine and cosine of the angle\n    sin = (p2[0] - p1[0]) * (p3[0] - p1[0]) + (p2[1] - p1[1]) * (p3[1] - p1[1])\n    cos = (p2[0] - p1[0]) * (p3[0] - p1[0]) + (p2[1] - p1[1]) * (p3[1] - p1[1])\n    # calculate the arctangent of the sine and cosine\n    angle = math.atan2(sin, cos)\n    # convert to degrees\n    angle = angle * 180 / math.pi\n    return int(angle)\n\n# test the function\nprint(mangle((0, 0), (1, 0), (0.5, 0.8660254037844386)))\nprint(mangle((0, 0), (1, 0), (0.5, -0.8660254037844386)))\nprint(mangle((0, 0), (1, 0), (0.5, 0)))"
  },
  {
    "example_id": 168,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "import math\n\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\na, b, c = 6, 8, 10\na = a * 1.5\nb = b * 1.5\nc = c * 1.5\n\nprint(triangle_area(a, b, c))"
  },
  {
    "example_id": 169,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "angle_RAS = 74\nangle_RTB = 28\nangle_BR = angle_RAS - angle_RTB\nprint(angle_BR)"
  },
  {
    "example_id": 170,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import pi\n\nradius_tank = 6\nradius_beaker = 3\nheight_beaker = 8\n\nvolume_tank = 4/3 * pi * radius_tank ** 3\nvolume_beaker = pi * radius_beaker ** 2 * height_beaker\n\nnumber_of_beakers = volume_tank // volume_beaker\n\nprint(number_of_beakers)"
  },
  {
    "example_id": 171,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x1, y1 = 0, 1\nx2, y2 = 2, 1\nx3, y3 = 4, 0\nx4, y4 = x1 + x2, y1 + y2\nprint(x4, y4)"
  },
  {
    "example_id": 172,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.56505117707799"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "import math\n\nx = math.degrees(math.atan2(3, 6))\nprint(x)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\na = sympy.symbols('a')\nb = sympy.symbols('b')\nc = sympy.symbols('c')\n\narea = (a**2 + b**2 + c**2) / 2\nprint(area)"
  },
  {
    "example_id": 174,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.4641016151377544"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "pi = 3.14159\nlateral_surface_area = 24 * pi\nvolume = 24 * pi\nradius = (lateral_surface_area / (2 * pi)) ** (1/2)\nprint(radius)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "from sympy import *\na, b, c = symbols('a b c')\ns = (a + b + c) / 2\narea = s * (s - a) * (s - b) * (s - c)\nprint(area)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.25",
      "48.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from sympy import *\n\nsemicircle_area = pi * (3 / 2)**2\nrectangle_area = 6 * 8\ntotal_area = semicircle_area + rectangle_area\nprint(total_area)"
  },
  {
    "example_id": 177,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.937253933193772"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nbase = 6\nheight = 3 * math.sqrt(3)\nside_length = math.sqrt(base ** 2 + height ** 2)\nprint(side_length)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.2"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "perimeter = 176\nside = perimeter / 5\nprint(side)"
  },
  {
    "example_id": 179,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Polygon, simplify\n\np = Polygon( (-1, 0), (0, 1), (2, 0), (0, -3) )\nprint(p.area)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "9.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = (1 + 7) / 2\ny = (3 + 15) / 2\nprint((x, y))"
  },
  {
    "example_id": 181,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "area = 6\nside_a, side_b = 3, 4\nside_c = side_a + side_b\narea_cde = area / 2\nprint(area_cde)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x, y = 4, 6\nprint(abs(x-y))"
  },
  {
    "example_id": 183,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1440.0"
    ],
    "annotated_answers": [
      "864.0"
    ],
    "solution": "import numpy as np\n\n# Area of the base\nbase_area = 288\n\n# Height of the pyramid\nheight = 15\n\n# Volume of the pyramid\nvolume = base_area * height / 3\n\nprint(volume)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "195936.0"
    ],
    "annotated_answers": [
      "391872.0"
    ],
    "solution": "distance = 97968 * 30 / 15\nprint(distance)"
  },
  {
    "example_id": 185,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-36.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "import math\nangle_aob = 54 - 90\nprint(angle_aob)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "1152.0"
    ],
    "solution": "flour_in_waffle = 0.5\ngriddle_diameter = 24\nwaffle_diameter = 6\nflour_in_griddle = griddle_diameter * waffle_diameter * flour_in_waffle\nprint(flour_in_griddle)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.1666666666666665"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "A = 6\nB = 18\nC = 63\na = A / B\nc = C / B\ny = a * c\nprint(y)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "a = 3\nb = 1\nprint(a + b)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1048.8464933683963"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "import math\nvolume = 60\nradius = math.sqrt(volume/math.pi)\nprint(4*math.pi*radius**3)"
  },
  {
    "example_id": 190,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "98.0"
    ],
    "annotated_answers": [
      "12.25"
    ],
    "solution": "a, b, c = 7, 7, 14\narea = (a + b) * c / 2\nprint(area)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x y')\n\n# area = (base * height) / 2\narea = (3 * (12 - x - 4)) / 2\n\nprint(area)"
  },
  {
    "example_id": 192,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "1.0",
      "2.0",
      "4.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "4.0",
      "-1.0",
      "1.0",
      "100.0",
      "3.0",
      "1.0",
      "2.0",
      "4.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "4.0",
      "-1.0",
      "1.0",
      "100.0",
      "-3.0",
      "2.0",
      "1.0",
      "2.0",
      "4.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "4.0",
      "-1.0",
      "1.0",
      "100.0",
      "3.0",
      "1.0",
      "2.0",
      "4.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "4.0",
      "-1.0",
      "1.0",
      "100.0",
      "-4.0",
      "1.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "4.0",
      "-1.0",
      "1.0",
      "100.0",
      "2.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "4.0",
      "-1.0",
      "1.0",
      "100.0",
      "10.0",
      "1.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "4.0",
      "-1.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.75"
    ],
    "solution": "from sympy import *\n\nx = Symbol('x')\ny = Symbol('y')\n\n# Find the area of the pentagon\npent_area = integrate(sqrt((x - 1)**2 + (y - 1)**2), (x, -1, 1), (y, -1, 1))\n\n# Find the area of the triangle\ntri_area = integrate(sqrt((x - 1)**2 + (y - 1)**2), (x, -1, 1), (y, -1, 1))\n\n# Find the total area\ntotal_area = pent_area + tri_area\n\n# Find the number of square units\ntotal_area_in_square_units = total_area * 100\n\n# Print the result\nprint(total_area_in_square_units)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.620499351813308"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "length = (12**2 + 10**2)**0.5\nprint(length)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.9999999999999999"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\nprint(math.tan(math.radians(45)))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "8.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "from sympy import symbols\nx, y = symbols('x y')\narea = (2 * (x + 2) + 2 * (y + 2))\nprint(area)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "157.07963267948966"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "from math import pi\narea = (pi * 10**2) / 2\nprint(area)"
  },
  {
    "example_id": 197,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import *\n\nx, y = symbols('x, y')\nperimeter = (x + y) * 2\n\nperimeter_min = (x + y) * 2\nperimeter_max = (x + y + 1) * 2\n\nprint(perimeter_max - perimeter_min)"
  },
  {
    "example_id": 198,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "37.72"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a, b, c')\n\ntriangle_altitudes = [a + b, a + c, b + c]\n\ntriangle_altitudes_sum = sum(triangle_altitudes)\n\nprint(triangle_altitudes_sum)"
  },
  {
    "example_id": 199,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "import math\n\ndef area(side_a, side_b, side_c):\n    s = (side_a + side_b + side_c) / 2\n    return math.sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\n\nprint(area(13, 14, 15))"
  },
  {
    "example_id": 200,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5570423008216338"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\n\ndef volume(radius):\n    return pi * radius ** 2\n\ndef lateral_surface_area(radius):\n    return 2 * pi * radius\n\ndef radius(lateral_surface_area, volume):\n    return lateral_surface_area / (2 * pi)\n\nprint(radius(3.5, 3.5))"
  },
  {
    "example_id": 201,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "2.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "from sympy import Polygon, Point\n\np = Polygon(Point(0,0), Point(1,1), Point(1,0.5), Point(2.5,0.5), Point(2.5,-0.5), Point(1,-0.5), Point(1,-1))\nprint(p.area)"
  },
  {
    "example_id": 202,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "v, w, x, y, z = 100, 120, 140, 160, 180\nprint((x-v)/(w-v) + 1)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "3.0",
      "25.0",
      "3.0",
      "-12025.0",
      "450.0",
      "714.0",
      "1.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-12025.0",
      "450.0",
      "714.0",
      "1.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "10.0",
      "3.0",
      "25.0",
      "3.0",
      "-12025.0",
      "450.0",
      "714.0",
      "1.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-12025.0",
      "450.0",
      "714.0",
      "1.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "10.0",
      "3.0",
      "-12025.0",
      "450.0",
      "714.0",
      "1.0",
      "3.0",
      "3.0",
      "25.0",
      "3.0",
      "-12025.0",
      "450.0",
      "714.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\narea = 30\ntriangle_area = sympy.sqrt(x * (5 - x) * (5 - x))\nprint(sympy.solve(triangle_area - area, x))"
  },
  {
    "example_id": 204,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "57.15476066494083"
    ],
    "annotated_answers": [
      "184.0"
    ],
    "solution": "import math\na = 10 * 14 / math.sqrt(6)\nprint(a)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "radius = 27 * 3\nprint(radius)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "pentagon_area = 5 * (12**2)\nprint(pentagon_area)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import math\na, b, c, x, y, z = 4, 6, 14, 0, 0, 0\ny = (x * a) / b\nz = (x * c) / b\nprint(y, z)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import sqrt\na = 1\nwhile True:\n    a += 1\n    if (a + 1) ** 2 + (6 * a) ** 2 == (6 * a + 1) ** 2:\n        print(a)\n        break"
  },
  {
    "example_id": 209,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "102.6180170906274"
    ],
    "annotated_answers": [
      "2040.0"
    ],
    "solution": "import math\n\nside_a = math.sqrt(math.pow(32, 2) + math.pow(68, 2))\nside_b = math.sqrt(math.pow(50, 2) + math.pow(18, 2))\nside_c = math.sqrt(math.pow(68, 2) + math.pow(36, 2))\n\narea = (side_a + side_b + side_c) / 2\nprint(area)"
  },
  {
    "example_id": 210,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.23606797749979"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "import math\nradius = 2\nheight = math.sqrt(3 * 3 - radius * radius)\nprint(height)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "600.0",
      "5.0",
      "5.0",
      "2.0",
      "30.0",
      "0.04",
      "5.0",
      "2.0",
      "20.0",
      "2.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import sympy\n\ndegree_measure = sympy.Symbol('degree_measure')\nradius = sympy.Symbol('radius')\n\narc_length = sympy.sqrt(radius**2 * (sympy.pi / 180) * degree_measure)\n\narc_length_increase = (arc_length * 1.2).subs(degree_measure, degree_measure + 20) - arc_length\n\narc_length_increase_percent = (arc_length_increase / arc_length) * 100\n\nprint(arc_length_increase_percent)"
  },
  {
    "example_id": 212,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "11025.0"
    ],
    "annotated_answers": [
      "145.0"
    ],
    "solution": "import sympy\n\na, b, d = sympy.symbols('a b d')\n\nAB = 105\nBD = 42\n\nC = sympy.sqrt(a**2 - AB**2)\n\nprint(C)"
  },
  {
    "example_id": 213,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.00000000000001"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "import math\nprint(math.degrees(math.acos(0.5)))"
  },
  {
    "example_id": 214,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.266578497925543"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import math\n\ndef find_angle(x, y, x1, y1, x2, y2):\n    angle = math.degrees(math.atan2(y - y1, x - x1) - math.atan2(y2 - y1, x2 - x1))\n    return angle\n\nx, y = 0, 0\nx1, y1 = 40, 0\nx2, y2 = 0, 20.616\n\nangle = find_angle(x, y, x1, y1, x2, y2)\nprint(angle)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x = 72\nprint(x)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "volume = 2 * 2 * 2 + 19\nedge = volume ** (1/3)\nprint(edge)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\na, b, c = 3, 4, 5\np = (a + b + c) / 2\narea = math.sqrt(p * (p - a) * (p - b) * (p - c))\n\nm = (a + b + c) / 2\nn = (a + b + c) / 2\n\nprint(area)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.8011526357338304"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import sin\nprint(sin(180))"
  },
  {
    "example_id": 219,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "450.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nline_1 = -2*x + 8\nline_2 = 1/2*x - 2\nline_3 = -2\narea = sympy.integrate((line_1 - line_2)**2, (x, -2, 4))\nprint(area)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols(\"x, y\")\n\nline = x + y - 6\n\nprint(sympy.integrate(sympy.integrate(line, x), y))"
  },
  {
    "example_id": 221,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.800000000000001"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "length = 3 * (5 - 2.4)\nprint(length)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "from sympy import symbols\nfrom sympy import simplify\n\na, b, c = symbols('a b c')\n\ntri = simplify((a*b + c*b + a*c)/2)\n\nprint(tri)"
  },
  {
    "example_id": 223,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.15625"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import math\nradius1, radius2 = 10, 17\nchord_length = 16\ncenter_distance = (radius1**2 + radius2**2 - chord_length**2) / (2 * chord_length)\nprint(center_distance)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "length = 12\nwidth = 12\narea = length * width\nprint(area)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "from sympy import *\n\na, b, c = symbols('a b c')\ns = (a + b + c) / 2\narea = sqrt(s * (s - a) * (s - b) * (s - c))\nprint(area)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# 30 degrees\nprint(30 * 4)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.82009788756334"
    ],
    "annotated_answers": [
      "23.31"
    ],
    "solution": "import math\n\nx = math.sqrt(74**2 - 63**2)\nprint(x)"
  },
  {
    "example_id": 228,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\n\nD = (b * c) / (a + c)\n\nprint(D**2)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "6.0",
      "2.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "import sympy\nu, v, w, x, y, z = sympy.symbols('u v w x y z')\np = (y * w + x * u) / (y - x)\narea_pxy = sympy.simplify(sympy.integrate((u - y) * (v - y), (u, 0, p), (v, 0, y)))\narea_pzx = sympy.simplify(sympy.integrate((z - x) * (w - x), (z, 0, p), (w, 0, x)))\nprint(area_pxy - area_pzx)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "base = 3 + 4 + 5\naltitude = 6\nvolume = base * altitude / 3\nprint(volume)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "0.5",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "0.5",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "import sympy\n\nA, B, C, D, E, F = sympy.symbols('A B C D E F')\n\ntri_1 = (A + B + E)/3\ntri_2 = (A + D + F)/3\ntri_3 = (C + E + F)/3\n\nrect_area = (B - A) * (C - A)\n\ntri_1_area = (1/2) * sympy.sqrt(tri_1**2 - (tri_1 * (B - A))**2)\ntri_2_area = (1/2) * sympy.sqrt(tri_2**2 - (tri_2 * (D - A))**2)\ntri_3_area = (1/2) * sympy.sqrt(tri_3**2 - (tri_3 * (C - A))**2)\n\nprint(rect_area - tri_1_area - tri_2_area - tri_3_area)"
  },
  {
    "example_id": 232,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import numpy as np\n\na = 6\nb = 8\nc = 10\n\ns = (a + b + c) / 2\n\nr = np.sqrt(s * (s - a) * (s - b) * (s - c))\n\nprint(r)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "401.92"
    ],
    "annotated_answers": [
      "62.8"
    ],
    "solution": "import math\n\npi = 3.14\n\ndef area_of_semicircle(radius):\n    return pi * radius ** 2\n\ndef area_of_shaded_regions(semicircle_radius):\n    return area_of_semicircle(semicircle_radius) * 2\n\nsemicircle_radius = 8\nshaded_area = area_of_shaded_regions(semicircle_radius)\nprint(shaded_area)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\n\ns = (a + b + c) / 2\n\narea = sympy.sqrt(s * (s - a) * (s - b) * (s - c))\n\nr = area / (2 * sympy.pi)\n\nprint(r)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import *\nx, y = symbols('x, y')\nAB = [3, 7]\nBC = [3, 5]\nCD = [-1, 1]\nAD = [-1, 3]\n\ndef area(p1, p2):\n    return sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\ns = 0\ns += area(AB, BC)\ns += area(BC, CD)\ns += area(CD, AD)\ns += area(AD, AB)\nprint(s)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "74.0"
    ],
    "solution": "diameter_in_cm = 3\nvolume_per_rubber_band = 0.01 # in cubic cm\nnumber_of_rubber_bands = 54\ndesired_diameter_in_cm = diameter_in_cm + 1\n\nnumber_of_rubber_bands_to_add = desired_diameter_in_cm / (diameter_in_cm + 1)\n\nprint(number_of_rubber_bands_to_add)"
  }
]