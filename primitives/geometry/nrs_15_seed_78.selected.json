[
  {
    "example_id": 0,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "113.09733552923254"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "from math import pi\n\nradius = 3\nvolume = (4/3) * pi * radius ** 3\nprint(volume)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.9230769230769231"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = (2 * 2 * 4 + 3 * 3 * 1) / (3 * 3 + 2 * 2)\nprint(x)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "import math\n\nangle_BAC = 35\nangle_BCA = 35\n\nangle_CDA = 180 - angle_BAC - angle_BCA\n\nprint(angle_CDA)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "s = 1\nr = 9\nprint(r/s)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# The line of symmetry passes through the midpoint of side AB\n# So, we need to color 4 small squares black\n# And, we need to color the top two small squares black\n# So, the total number of small squares colored black is 6\nprint(6)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.141592653589793"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nprint(math.pi)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.260282901033822"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\n# cylinder surface area\nSA = 112 * math.pi\n\n# volume\nV = SA / math.pi\n\n# radius\nr = V / (2.5 * math.pi)\n\nprint(r)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "diameter_increase = 25\ndiameter = 10\nheight = 5\n\ndiameter_new = diameter * (1 + diameter_increase/100)\nheight_new = height * (diameter_new / diameter)\n\nprint((height_new - height) / height * 100)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import numpy as np\n\na = np.array([3,2])\nb = np.array([3,-2])\nc = np.array([-3,-2])\nd = np.array([-3,0])\n\narea = abs(np.cross(b-a, c-a))\nprint(area)"
  },
  {
    "example_id": 9,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.4694553433171311"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import sin, cos, tan\nprint(tan(sin(2*cos(cos(90)))))"
  },
  {
    "example_id": 10,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "import math\nradius = 1\narea = 0.2 * math.pi * radius ** 2\nx = area / (2 * math.pi * radius)\nprint(x)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "# Square EFGH\nefgh_area = 100 - 2 * 2\nprint(efgh_area)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.4764012244017"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\n\ncube_volume = 64\nsphere_volume = math.pi / 6\n\nprint(cube_volume - sphere_volume)"
  },
  {
    "example_id": 13,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.961603297665937"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from math import tan\n\nJL = tan(90) * 8\nprint(JL)"
  },
  {
    "example_id": 14,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "length, width, height = 10, 10, 12\nsurface_area = 2 * (length * width + length * height + width * height)\ncost = surface_area * 0.05\nprint(cost)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import math\n\ndef volume_of_cylinder(height, diameter):\n    return math.pi * height * diameter ** 2 / 3\n\ndef number_of_cylinders(height, diameter_1, diameter_2):\n    volume_1 = volume_of_cylinder(height, diameter_1)\n    volume_2 = volume_of_cylinder(height, diameter_2)\n    return math.ceil(volume_2 / volume_1)\n\nprint(number_of_cylinders(4, 2, 12))"
  },
  {
    "example_id": 16,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\n\nperimeter = a + b + c\n\nhalf_perimeter = (perimeter / 2)\n\nhalf_base = (a + b + c) / 2\n\ndiameter = sympy.sqrt(half_base * (half_base - a) * (half_base - b) * (half_base - c))\n\nprint(diameter)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\na, b, c, d = sympy.symbols('a b c d')\n\nAB = sympy.sqrt(a**2 + b**2)\nDC = sympy.sqrt(c**2 + d**2)\n\nAB_DC = 2 * (AB + DC)\n\nprint(AB / DC)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "851.4126496635781"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "import math\nside = 2116 * (math.sqrt(2) + 1) / 6\nprint(side)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "length_of_GF = 4\nprint(length_of_GF)"
  },
  {
    "example_id": 20,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\narea = 2\nside_a = math.sqrt(area / 2)\nside_b = math.sqrt(area / 2)\nside_c = math.sqrt(2 * area)\nprint(\"The area of triangle ABC is\", area, \"square centimeters.\")\nprint(\"The length of side A is\", side_a, \"centimeters.\")\nprint(\"The length of side B is\", side_b, \"centimeters.\")\nprint(\"The length of side C is\", side_c, \"centimeters.\")"
  },
  {
    "example_id": 21,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\ndef area(x1, y1, x2, y2, x3, y3, x4, y4):\n    return abs(x1 * y2 + x2 * y3 + x3 * y4 + x4 * y1 - x2 * y1 - x3 * y2 - x4 * y3 - x1 * y4) / 2\n\nprint(area(0, 6, 0, 0, 8, 0, 0, 3))"
  },
  {
    "example_id": 22,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "side_1, side_2, side_3, side_4 = 1, 7, 2, 4\nside_5, side_6 = side_1 + side_3, side_2 + side_4\nprint(side_5 + side_6)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.05"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "PQ = 0.67 * 15\nprint(PQ)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "686.0"
    ],
    "annotated_answers": [
      "8918.0"
    ],
    "solution": "v1 = 343\nv2 = 3 * v1\ndiff = v2 - v1\nprint(diff)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "import math\npq = 34\nqr = 34\npr = 32\nqm = (pq + qr + pr) / 2\nprint(qm)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "print(65)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4800.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "surface_area = 600\nvolume = surface_area * 8\nprint(volume)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "perimeter = 8 + 8 + 10\nprint(perimeter)"
  },
  {
    "example_id": 29,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\ndef count_horizontal_symmetry(word):\n    count = 0\n    for letter in word:\n        if letter in \"aeiou\":\n            count += 1\n    return count\n\nprint(count_horizontal_symmetry(\"MATHCOUNTS\"))"
  },
  {
    "example_id": 30,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import math\n\ndef calculate_volume(a, b, c):\n    s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\nprint(int(calculate_volume(3, 4, 5)))"
  },
  {
    "example_id": 31,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "122.0",
      "122.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from sympy import simplify, sqrt\n\nbase_a = sqrt(10**2 + 12**2)\nbase_b = sqrt(10**2 + 10**2)\nheight = sqrt(12**2 + 10**2)\narea = (base_a + base_b) * height / 2\nprint(simplify(area))"
  },
  {
    "example_id": 32,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "percent = (2 / 4) * 100\nprint(percent)"
  },
  {
    "example_id": 33,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "surface_area = 6 * 3 * 3\nprint(surface_area)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "2.4748737341529163",
      "64.0",
      "2.474873734152916",
      "64.0",
      "2.4748737341529163",
      "64.0",
      "2.474873734152916",
      "64.0",
      "1.319328945100783",
      "64.0",
      "1.1497265477578809"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import numpy as np\n\ndef get_point_from_radius_and_angle(radius, angle):\n    x = radius * np.cos(angle)\n    y = radius * np.sin(angle)\n    return x, y\n\ndef get_point_from_points(point1, point2):\n    return (point1[0] + point2[0]) / 2, (point1[1] + point2[1]) / 2\n\ndef get_angle_from_points(point1, point2):\n    return np.arctan2(point2[1] - point1[1], point2[0] - point1[0])\n\ndef get_distance_from_points(point1, point2):\n    return np.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)\n\ndef get_radius_from_points(point1, point2):\n    return get_distance_from_points(point1, point2) / 2\n\ndef get_arc_length(radius, angle):\n    return 2 * np.pi * radius * angle / 360\n\ndef get_chord_length(radius, angle):\n    return get_arc_length(radius, angle) / 2\n\ndef get_point_from_chord_and_angle(chord, angle):\n    return get_point_from_radius_and_angle(chord / 2, angle)\n\ndef get_angle_from_chords(chord1, chord2):\n    return np.arctan2(chord2 / 2, chord1 / 2)\n\ndef get_point_from_chords_and_angle(chord1, chord2, angle):\n    return get_point_from_chord_and_angle(chord1, angle) + get_point_from_chord_and_angle(chord2, angle)\n\ndef get_points_from_chords_and_angle(chord1, chord2, angle):\n    return get_point_from_chords_and_angle(chord1, chord2, angle), get_point_from_chords_and_angle(chord2, chord1, angle)\n\ndef get_chord_length_from_points(point1, point2):\n    return get_distance_from_points(point1, point2)\n\ndef get_chord_length_from_chords(chord1, chord2):\n    return chord1 + chord2\n\ndef get_angle_from_points_and_center(point1, point2, center):\n    return get_angle_from_points(point1, point2) - get_angle_from_points(center, point1)\n\ndef get_angle_from_chords_and_center(chord1, chord2, center):\n    return get_angle_from_chords(chord1, chord2) - get_angle_from_points(center, get_point_from_chord_and_angle(chord1, chord2))\n\ndef get_point_from_chords_and_angle_and_center(chord1, chord2, angle, center):\n    return get_point_from_chords_and_angle(chord1, chord2, angle) + get_point_from_points(center, get_point_from_chord_and_angle(chord1, chord2))\n\nchord1 = 7\nchord2 = 7\n\nangle = np.arctan2(chord2 / 2, chord1 / 2)\n\ncenter_x, center_y = 0, 0\n\nprint(get_point_from_chords_and_angle_and_center(chord1, chord2, angle, (center_x, center_y)))"
  },
  {
    "example_id": 35,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "r = 1\na = 3\nb = 2\nc = 1\nprint(a+b+c)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "227.5"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "base_AB = 52\nbase_CD = 39\nheight = 5\narea = (base_AB + base_CD) * height / 2\nprint(area)"
  },
  {
    "example_id": 37,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "102.0"
    ],
    "solution": "import sympy\nx, y, z = sympy.symbols('x, y, z')\ns = (x + y + z) / 2\narea = sympy.sqrt(s * (s - x) * (s - y) * (s - z))\nprint(area)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "perimeter = 12 + 8 + 2\nprint(perimeter)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0000000000000004"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import math\nprint(math.tan(math.radians(315)))"
  },
  {
    "example_id": 40,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2304.0"
    ],
    "annotated_answers": [
      "2304.0"
    ],
    "solution": "import sympy\n\narea = sympy.Polygon(sympy.Point(0,0), sympy.Point(96,0), sympy.Point(96,24), sympy.Point(0,24)).area\nprint(area)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.313708498984763"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\nside_a = math.sqrt(2)\nside_b = 1\nside_c = math.sqrt(2)\nside_d = 1\nside_e = side_a\nside_f = side_b\nside_g = side_c\nside_h = side_d\nside_y = 5\nside_s = side_a + side_b + side_c + side_d\narea = side_a * side_b + side_b * side_c + side_c * side_d + side_d * side_a + side_e * side_f + side_f * side_g + side_g * side_h + side_h * side_e\nprint(area)"
  },
  {
    "example_id": 42,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import sqrt\n\nvolume = 4/3 * pi * radius ** 3\nsurface_area = 4 * pi * radius ** 2\n\nradius = sqrt(volume / (4/3 * pi))\nradius = sqrt(surface_area / (4 * pi))\n\nprint(radius)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(8)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.333333333333333"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import pi\nradius = 3\nvolume = 30 * pi\nheight = volume / (pi * radius ** 2)\nprint(height)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "from sympy import pi\na, b = 3, 3\nprint(a+b)"
  },
  {
    "example_id": 46,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "import math\n\ndef find_rotation(n):\n    \"\"\"\n    Given the number of sides of a polygon,\n    return the minimum number of degrees that must be rotated\n    in order to restore the original position.\n    \"\"\"\n    return 360 / n\n\nprint(find_rotation(5))"
  },
  {
    "example_id": 47,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "angle = 124\nx = angle - 90\nprint(x)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4950.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "s = 0\nfor i in range(1,100):\n    s += i\nprint(s)"
  },
  {
    "example_id": 49,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "592.0"
    ],
    "solution": "import sympy\na, b, c, d, e, f = sympy.symbols('a, b, c, d, e, f')\nratio = (a*sympy.pi + b*sympy.sqrt(c)) / (d*sympy.pi - e*sympy.sqrt(f))\nratio = sympy.nsimplify(ratio, rational=True)\nproduct = a*b*c*d*e*f\nproduct = sympy.nsimplify(product, rational=True)\nprint(product % 1000)"
  },
  {
    "example_id": 50,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "old_radius = 4\nnew_radius = 8\nnumber_of_new_containers = old_radius // new_radius\nprint(number_of_new_containers)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "997.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def triangle_exists(p):\n    a = 3 * p - 1\n    b = 3 * p\n    c = p ** 2 + 1\n    return a < b < c\n\ncount = 0\nfor p in range(1, 1000):\n    if triangle_exists(p):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.0"
    ],
    "annotated_answers": [
      "198.0"
    ],
    "solution": "side = 3\ncut = 1\ninsert = 2\nsurface_area = side * side * 6 + (side - cut) * (side - cut) * 4 + (side - insert) * (side - insert) * 4\nprint(surface_area)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "m = 40\nx = 180 - m\nprint(x)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sin, degrees, radians\n\ndef find_values(f, a, b):\n    values = []\n    for i in range(int(degrees(a)), int(degrees(b)) + 1):\n        if f(radians(i)) == 0:\n            values.append(i)\n    return values\n\nprint(find_values(sin, radians(-0.31), radians(990)))"
  },
  {
    "example_id": 55,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.333333333333332"
    ],
    "annotated_answers": [
      "15.08"
    ],
    "solution": "volume = (4 * 4 * 4) / 3\nprint(volume)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "2.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "from sympy import Polygon\n\nvertices = [(1, 7), (-3, 4), (6, 5), (-1, -1), (3, -1)]\n\npolygon = Polygon(*vertices)\n\nprint(polygon.area)"
  },
  {
    "example_id": 57,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "156.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "base_1 = 7\nbase_2 = 17\nheight = 13\narea = (base_1 + base_2) * height / 2\nprint(area)"
  },
  {
    "example_id": 58,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.000000000000001"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nb = 4*math.sqrt(2)\nc = 2\n\nbcm = (b**2 + c**2)**0.5\nprint(bcm)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import sqrt\n\ndef is_pythagorean(a, b, c):\n    return a**2 + b**2 == c**2\n\ndef is_congruent(a, b):\n    return a == b\n\ndef is_triangle(a, b, c):\n    return is_pythagorean(a, b, c) and not is_congruent(a, b) and not is_congruent(a, c) and not is_congruent(b, c)\n\ndef is_possible_triangle(a, b, c):\n    return is_triangle(a, b, c) and a + b + c == 12\n\ndef count_possible_triangles(sticks):\n    count = 0\n    for a in sticks:\n        for b in sticks:\n            for c in sticks:\n                if is_possible_triangle(a, b, c):\n                    count += 1\n    return count\n\nprint(count_possible_triangles([2, 4, 6]))"
  },
  {
    "example_id": 60,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(3 + 5)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "67.5"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import *\n\ns = 0.5 * (9 * 5 + 9 * 5 + 9 * 5 + 0 * 5)\n\nprint(s)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9992.0",
      "-9984.0",
      "-9996.0",
      "-9998.0",
      "-9999.0",
      "-9999.0",
      "-9999.0",
      "-9999.0"
    ],
    "annotated_answers": [
      "86.0"
    ],
    "solution": "import math\n\ndef area(s):\n    return s * 2\n\ndef midpoint(s):\n    return s / 2\n\ndef perimeter(s):\n    return s * 4\n\ndef line_segment(a, b):\n    return math.sqrt((b[0] - a[0]) ** 2 + (b[1] - a[1]) ** 2)\n\ndef length(s):\n    return math.sqrt(s ** 2)\n\ndef set_area(s, k):\n    return area(s) - k\n\ndef set_perimeter(s, k):\n    return perimeter(s) - k\n\ndef set_length(s, k):\n    return length(s) - k\n\ndef set_midpoint(s, k):\n    return midpoint(s) - k\n\ndef set_line_segment(a, b, k):\n    return line_segment(a, b) - k\n\ndef main():\n    a = (0, 0)\n    b = (1, 0)\n    c = (1, 1)\n    d = (0, 1)\n    ab = line_segment(a, b)\n    bc = line_segment(b, c)\n    cd = line_segment(c, d)\n    da = line_segment(d, a)\n    s = ab + bc + cd + da\n    print(set_area(s, 10000))\n    print(set_perimeter(s, 10000))\n    print(set_length(s, 10000))\n    print(set_midpoint(s, 10000))\n    print(set_line_segment(a, b, 10000))\n    print(set_line_segment(b, c, 10000))\n    print(set_line_segment(c, d, 10000))\n    print(set_line_segment(d, a, 10000))\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 63,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 12 / 6\nprint(n)"
  },
  {
    "example_id": 64,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "5.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsol = sympy.solve(5*x + 6, x)\nprint(sol)"
  },
  {
    "example_id": 65,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6666666666666666"
    ],
    "annotated_answers": [
      "1.17"
    ],
    "solution": "depth = 1/1.5\nprint(depth)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import numpy as np\n\ndef triangle_area(A, B, C):\n    \"\"\"\n    Calculate the area of a triangle given its vertices.\n    \"\"\"\n    return 0.5 * np.linalg.norm(np.cross(B - A, C - A))\n\nprint(triangle_area(np.array((-4, -1)), np.array((2, -1)), np.array((1, 3))))"
  },
  {
    "example_id": 67,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "2.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a, b, c, d = 1, 2, 3, 4\narea1 = (a * b + b * c + c * d + d * a) / 2\narea2 = (a * b - b * c + c * d - d * a) / 2\nprint(area1, area2)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "distance = 16/2\nprint(distance)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.6637121724624"
    ],
    "annotated_answers": [
      "1.3"
    ],
    "solution": "from math import pi\n\nradius = 1\nbase = 2 * pi * radius\nheight = 8.7\narea = (base + base) * height / 2\nprint(area)"
  },
  {
    "example_id": 70,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.14"
    ],
    "solution": "side_length = 10 / 2\nprint(side_length)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.664793948382652"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Import math library\nimport math\n\n# Find the length of side AB\nlength = math.sqrt(32**2 - 12**2)\n\nprint(length)"
  },
  {
    "example_id": 72,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import sqrt\n\ndef isosceles_triangles(perimeter):\n    for i in range(1, int(perimeter / 2) + 1):\n        if perimeter % i == 0:\n            j = perimeter / i\n            if i * j == perimeter and i * (i + 1) == 2 * j and j * (j + 1) == 2 * i:\n                return i, j\n    return 0, 0\n\nprint(isosceles_triangles(20))"
  },
  {
    "example_id": 73,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "640.0"
    ],
    "solution": "import math\nr1, r2 = 2, 8\nv1, v2 = (4/3) * math.pi * r1**3, (4/3) * math.pi * r2**3\nv_total = v1 + v2\nK = (v_total - v1 - v2) / (math.pi * 3)\nprint(K)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\n\n# compute area of triangle ABC\na, b, c = sympy.symbols('a b c')\nA = (a**2 + b**2 + c**2) / 2\n\n# compute area of semicircle\nr = sympy.sqrt(2)\narea = sympy.pi * r**2\n\n# compute area of triangle ABC in terms of area of semicircle\nA_in_terms_of_area_of_semicircle = A - area\n\n# compute value of A in terms of area of semicircle\nA_value = A_in_terms_of_area_of_semicircle.subs({area: 2 * sympy.pi})\n\nprint(A_value)"
  },
  {
    "example_id": 75,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a, b, c = 5, 5, 6\ns = (a + b + c) / 2\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(area)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.935134225695303"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "from math import sqrt\n\na = 7\nb = 6\ns = sqrt(a+b*sqrt(2))\n\nprint(s)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "measure = 90 - 40\nprint(measure)"
  },
  {
    "example_id": 78,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "w = 4\nx = 1\ny = 1\nz = 1\nprint(w + x + y + z)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "179.99999999999997"
    ],
    "annotated_answers": [
      "3600.0"
    ],
    "solution": "base = 20\nheight = 27\nvolume = (1/3) * base * height\nprint(volume)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-180.0",
      "180.0",
      "60.0",
      "90.0",
      "108.0",
      "60.0",
      "128.57142857142856",
      "45.0",
      "140.0",
      "36.0",
      "147.27272727272728",
      "30.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "# Define a function to compute the angle at each vertex\ndef angle_at_vertex(n):\n    if n % 2 == 0:\n        return 360 / n\n    else:\n        return 180 - 360 / n\n\n# Print the angle at each vertex\nfor n in range(1, 13):\n    print(angle_at_vertex(n))"
  },
  {
    "example_id": 81,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\nAB = sympy.sqrt(x**2 + y**2)\nBC = sympy.sqrt((5 - x)**2 + (-5 + y)**2)\nCA = sympy.sqrt((-1 - x)**2 + (-1 + y)**2)\nABC = (AB + BC + CA) / 2\nprint(ABC)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0",
      "5.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from sympy import *\n\npentagon_sides = 5\npentagon_side_length = 8\npentagon_area = pentagon_sides * (pentagon_side_length ** 2) / (4 * tan(pi / pentagon_sides))\nprint(pentagon_area)"
  },
  {
    "example_id": 83,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\n\na, b, d = 12, 4, 0\nc = math.sqrt(a**2 - d**2)\nprint(c)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "112.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "import math\nbase_a = 4\nbase_b = 10\nheight = 16\narea = (base_a + base_b) * height / 2\nprint(area)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7853.981633974483"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "from math import pi\n\nmax_area = (100**2) * (pi/4)\nprint(max_area)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.52786404500042"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\nlength = 10\narea = 40\nheight = math.sqrt(area / 2)\ndistance_from_a = length - height\nprint(distance_from_a)"
  },
  {
    "example_id": 87,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.10134583033141"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import math\n\nperimeter = 28\narea = 49\n\n# arc length = perimeter - 2*radius\narc_length = perimeter - 2*math.sqrt(area / math.pi)\nprint(arc_length)"
  },
  {
    "example_id": 88,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 3 + 2 - 3\nprint(x)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "#import math\n\ndef triangle(a, b, c):\n    p = (a+b+c)/2\n    s = (p*(p-a)*(p-b)*(p-c))**0.5\n    return s\n\ndef equal_side_triangles(s):\n    count = 0\n    for i in range(1,s):\n        if triangle(i,i,s-i) == i:\n            count += 1\n    return count\n\nprint(equal_side_triangles(11))"
  },
  {
    "example_id": 90,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\n\nE, F = sympy.symbols(\"E F\")\n\na, b, c, d = sympy.symbols(\"a b c d\")\n\ne = (a + b) / 2\nf = (c + d) / 2\n\ntriangle_a_be = (b - a) * (d - a) / 2\ntriangle_e_f = (f - e) * (d - e) / 2\n\nratio = triangle_e_f / triangle_a_be\n\nprint(ratio)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(8)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "area = 6 * 10\nprint(area)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "104.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "length, width = 16, 20\nheight = width\nsurface_area = 2 * (length * width + length * height + width * height)\ncost = surface_area * 0.05\nprint(cost)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "perimeter = 30 + 17 + 17\nprint(perimeter)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(14/2)"
  },
  {
    "example_id": 96,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "198.4943324127921"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "import math\n\ndef length_of_rope_HP(length_HC, length_HD):\n    \"\"\"\n    Calculate the greatest length of rope that can be saved\n    by replacing ropes HC and HD with a single rope HP.\n    \"\"\"\n    length_HP = math.sqrt(length_HC ** 2 + length_HD ** 2)\n    return length_HP\n\nlength_HC = 150\nlength_HD = 130\nlength_HP = length_of_rope_HP(length_HC, length_HD)\nprint(length_HP)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "side_length = 6\nheight = 3\n\narea_of_non_hexagonal_faces = 6 * (3 - side_length) ** 2\nprint(area_of_non_hexagonal_faces)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "452.3893421169302"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "from math import pi\nK = pi * 12 ** 2\nprint(K)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "256.0"
    ],
    "annotated_answers": [
      "224.0"
    ],
    "solution": "import math\n\n# Find the volume of the cone\nV = (math.pi * (8**2) * 6) / 3\n\n# Find the volume of the solid\nV_solid = V * 2\n\n# Find n\nn = int(V_solid / math.pi)\n\nprint(n)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import sympy\na, b, c, d = sympy.symbols('a b c d')\nquadrilateral = sympy.Polygon((0, 1), (1, 3), (5, 2), (4, 0))\narea = quadrilateral.area\nprint(area)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "r = 8\nprint(r)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nr1 = 2\nr2 = 1\nh1 = math.pi * r1 ** 2\nh2 = math.pi * r2 ** 2\nprint(h2 / h1)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "# This is the length of the side of the triangle\nside_length = 17\n# This is the length of the side of the triangle\nside_length2 = 24\n# This is the length of the side of the triangle\nside_length3 = 33\n# This is the length of the perimeter of the triangle\nperimeter = side_length + side_length2 + side_length3\nprint(perimeter)"
  },
  {
    "example_id": 104,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "from sympy import *\n\ndef solve_area(line1, line2):\n    x1, y1 = line1.p1\n    x2, y2 = line1.p2\n    x3, y3 = line2.p1\n    x4, y4 = line2.p2\n    return abs(x1*y2 - x2*y1 + x3*y4 - x4*y3) / 2\n\nline1 = Line((-1, 4), (1, -6))\nline2 = Line((-1, -2), (1, 12))\nprint(solve_area(line1, line2))"
  },
  {
    "example_id": 105,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "-4.0",
      "-3.0",
      "1.0",
      "1.0",
      "1.0",
      "-1.0",
      "1.0",
      "1.0",
      "1.0",
      "-1.0",
      "4.0",
      "3.0",
      "-4.0",
      "-3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef is_rectangle(v1, v2, v3, v4):\n    if v1 == v2 or v3 == v4:\n        return False\n    if v1[0] == v3[0] or v1[1] == v3[1] or v2[0] == v4[0] or v2[1] == v4[1]:\n        return False\n    return True\n\ndef rectangles(v1, v2, v3, v4):\n    if is_rectangle(v1, v2, v3, v4):\n        yield (v1, v2, v3, v4)\n    if is_rectangle(v1, v3, v2, v4):\n        yield (v1, v3, v2, v4)\n    if is_rectangle(v1, v4, v2, v3):\n        yield (v1, v4, v2, v3)\n    if is_rectangle(v3, v4, v1, v2):\n        yield (v3, v4, v1, v2)\n    if is_rectangle(v2, v4, v1, v3):\n        yield (v2, v4, v1, v3)\n\nfor v1, v2, v3, v4 in rectangles((4, 3), (-4, -3), (1, 1), (1, -1)):\n    print(v1, v2, v3, v4)"
  },
  {
    "example_id": 106,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "radius = 10\nheight = 20\nradius_new = radius * 0.8\nheight_new = height * 1.25\nvolume_new = (radius_new ** 2) * height_new\nvolume_old = (radius ** 2) * height\npercent_change = (volume_new - volume_old) / volume_old * 100\nprint(abs(percent_change))"
  },
  {
    "example_id": 107,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "import math\ns = (7+24+25)/2\narea = math.sqrt(s*(s-7)*(s-24)*(s-25))\nprint(area)"
  },
  {
    "example_id": 108,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.38313432735757"
    ],
    "annotated_answers": [
      "27.2"
    ],
    "solution": "import math\n\na, b, c = 10, 10, 12\naltitudes = [math.sqrt(a**2 + b**2), math.sqrt(b**2 + c**2), math.sqrt(c**2 + a**2)]\nprint(sum(altitudes))"
  },
  {
    "example_id": 109,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\nwidth = 4 - 2\nheight = 3 - 0\nprint(width * height)"
  },
  {
    "example_id": 110,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import math\n\ndef area(base, height):\n    return 0.5 * base * height\n\ndef y_coordinate(base, height, area):\n    return area / base\n\nprint(y_coordinate(10, 24, 240))"
  },
  {
    "example_id": 111,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import *\n\n# area of triangle XYZ\narea = 8\n\n# midpoints of AB\nA = (5, 2)\nB = (7.5, 2)\n\n# height of triangle XYZ\nh = 4\n\n# area of shaded region\narea_shaded = area / 2 * (A[1] - B[1])\n\nprint(area_shaded)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "11.5"
    ],
    "solution": "AB = 5\nAD = 8\narea = (AB * AD) / 2\nprint(area)"
  },
  {
    "example_id": 113,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Hexagonal prism has 12 edges\nprint(12)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "radius = 6 / 2\nprint(radius)"
  },
  {
    "example_id": 115,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 2\nb = 3\nprint(a + b)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.870509320858122"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "volume = 63960\nheight = 30\nside_length = (volume / height) ** (1/3)\nprint(side_length)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "6.0",
      "2.0",
      "12.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\na = sympy.sqrt(x**2 + y**2)\nb = sympy.sqrt((x - 6)**2 + y**2)\nc = sympy.sqrt((x - 12)**2 + (y - 5)**2)\nprint(a + b + c)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "perimeter = 2 * (16 + 12)\nprint(perimeter)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(30)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Find the sum of the angles\nsum = 0\nfor i in range(1, 4):\n    sum += 60\nprint(sum)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "# Number of integer coordinates inside the rectangle\ninside = 0\n\nfor x in range(-5, 6):\n    for y in range(-4, 5):\n        if x >= -4 and x <= 5 and y >= -4 and y <= 5:\n            inside += 1\n\nprint(inside)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "a, b, c = 1, 2, 3\narea = (b-a)*(c-a)\nprint(area)"
  },
  {
    "example_id": 123,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 6.5 / 6\nprint(int(n))"
  },
  {
    "example_id": 124,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "9.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "import sympy\n\nbase = 3 * sympy.symbols('base')\nh = 2 * sympy.symbols('h')\nvolume = (1/3) * base * h * sympy.sqrt(base**2 + h**2)\nprint(volume)"
  },
  {
    "example_id": 125,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "side = 2\narea = 2 * (side * 2)\nprint(area)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.08533845493851"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "import math\n\nx = math.degrees(math.atan2(math.sin(70), math.sin(40)))\nprint(x)"
  },
  {
    "example_id": 127,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.2"
    ],
    "annotated_answers": [
      "1.4"
    ],
    "solution": "midpoint = 10 / 2\ndistance = 7.2 - midpoint\nprint(distance)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "import math\nx = 180 - 40\ny = 180 - x\nz = 180 - x - y\nprint(x + y + z)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "480.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "angle_1 = 120\nangle_2 = 60\nangle_3 = 60\nangle_4 = 60\nangle_5 = 120\nangle_6 = 60\nsum = angle_1 + angle_2 + angle_3 + angle_4 + angle_5 + angle_6\nprint(sum)"
  },
  {
    "example_id": 130,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "6.0",
      "6.0",
      "6.0",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "import sympy\n\nAB = 6\nBC = 6\nCD = 6\nDE = 6\nEF = 6\nAG = 6\n\na, b, c, d, e, f = sympy.symbols('a b c d e f')\n\nAB = a * AB\nBC = b * BC\nCD = c * CD\nDE = d * DE\nEF = e * EF\nAG = f * AG\n\nexpr = sympy.Add(AB, BC, CD, DE, EF, AG)\n\nprint(expr)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef cone_volume(r,h):\n    return (math.pi/3) * r ** 2 * h\n\ndef scoop_volume(r):\n    return 4/3 * math.pi * r ** 3\n\ndef scoops_needed(r,h,r2):\n    return int(cone_volume(r2,h) / scoop_volume(r))\n\nprint(scoops_needed(1,5,2))"
  },
  {
    "example_id": 132,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\nde = (a + b + c) / 2\nprint(de)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "base = 8\nheight = 8\narea = (base + height) * height / 2\nprint(area)"
  },
  {
    "example_id": 134,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.928203230275507"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "import math\n\nperimeter = 2 * (5 + 2 * math.sqrt(3))\nprint(perimeter)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0000000000000004"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import pi\nradius = 30\nvolume = 2700 * pi\nheight = volume / (pi * radius ** 2)\nprint(height)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.262080214064092"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import math\n\nradius = 10 * math.pi / (2 * math.sin(math.radians(75)))\nprint(radius)"
  },
  {
    "example_id": 137,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6400.0",
      "2.0",
      "10240000.0",
      "1.0",
      "4.0",
      "6400.0",
      "2.0",
      "10240000.0",
      "1.0",
      "4.0",
      "6400.0",
      "2.0",
      "10240000.0",
      "1.0",
      "4.0",
      "6400.0",
      "2.0",
      "10240000.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x, y')\nK = sympy.solve(sympy.sqrt(x**2 + y**2) - sympy.sqrt(x**2 - y**2) - 80, y)\nprint(K)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.166666666666668"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "length_of_shorter_leg = 100 * 7 / 24\nprint(length_of_shorter_leg)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0033349173383328"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import numpy as np\n\ndef sphere_volume(r):\n    return (4/3) * np.pi * r ** 3\n\ndef sphere_surface_area(r):\n    return 4 * np.pi * r ** 2\n\ndef polyhedron_volume(r, h):\n    return np.pi * r ** 2 * h\n\ndef polyhedron_surface_area(r, h):\n    return 2 * np.pi * r * (r + h)\n\ndef ratio(r, h):\n    return polyhedron_volume(r, h) / polyhedron_surface_area(r, h)\n\ndef least_upper_bound(r):\n    for h in np.linspace(0, r, 1000):\n        if ratio(r, h) > 1.0:\n            return ratio(r, h - 0.001)\n    return 1.0\n\nprint(least_upper_bound(36))"
  },
  {
    "example_id": 140,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "157707.95121020763"
    ],
    "annotated_answers": [
      "17700.0"
    ],
    "solution": "from math import pi\ncircumference = 2 * pi * 25100\nprint(circumference)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.42857142857142855"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "x = 3 / 14 * 4 / 2\nprint(x)"
  },
  {
    "example_id": 142,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.3386902103511544"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import tan\nprint(tan(180))"
  },
  {
    "example_id": 143,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "unit = 1\nside_1 = 1\nside_2 = 3\nside_3 = unit * 2\nprint(side_3)"
  },
  {
    "example_id": 144,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.797958971132712"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import math\na = math.sqrt(11**2 - 5**2)\nprint(a)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x, y = 7, 4\nprint(x + y)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\n# Volume of the cylinder\nV = 45 * math.pi\n\n# Radius of the cylinder\nr = 3\n\n# Height of the cylinder\nh = V / (math.pi * r**2)\n\nprint(h)"
  },
  {
    "example_id": 147,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import math\n\nk = math.sqrt(100 - 64)\nprint(k)"
  },
  {
    "example_id": 148,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.24259169977185",
      "17.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\n# area of rhombus ABCD\narea = 24\n\n# angle BAD\nangle_b = 60\n\n# side length of rhombus ABCD\nside_length = math.sqrt(area / 2)\n\n# diagonal length of rhombus BFD\ndiagonal_length = math.sqrt(area / 2 - side_length ** 2)\n\n# angle BFD\nangle_b_fd = math.degrees(math.acos(diagonal_length / side_length))\n\n# angle FED\nangle_f_ed = angle_b_fd\n\n# angle EDF\nangle_e_df = angle_b + angle_b_fd\n\n# angle DFE\nangle_d_fe = angle_b + angle_f_ed\n\n# area of rhombus BFD\narea_b_fd = side_length ** 2 / (math.cos(math.radians(angle_b_fd)) ** 2)\n\n# area of rhombus FED\narea_f_ed = area_b_fd\n\n# area of rhombus EDF\narea_e_df = area_b_fd\n\n# area of rhombus DFE\narea_d_fe = area_b_fd\n\nprint(area_b_fd + area_f_ed + area_e_df + area_d_fe)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\n\ncos_a = (b**2 + c**2 - a**2) / (2 * b * c)\n\nprint(cos_a)"
  },
  {
    "example_id": 150,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "import math\ndistance = math.sqrt((8 ** 2) - (8 ** 2))\nprint(distance)"
  },
  {
    "example_id": 151,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.098593171027442"
    ],
    "annotated_answers": [
      "8.5"
    ],
    "solution": "import math\nside_a = 8\nside_b = 15\nside_c = 17\ns = (side_a + side_b + side_c) / 2\narea = math.sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\nradius = area / math.pi\nprint(radius)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "distance = 32/2\nprint(distance)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "986.6666666666666"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "a, b, c = 5, 6, 4\nvolume = 20\narea = 2 * (a * b + a * c + b * c)\nprint(volume * area / 3)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "area = (12 * 18) / 2\nprint(area)"
  },
  {
    "example_id": 155,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "A = 16\nprint(A)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "301.0"
    ],
    "solution": "m, n = 3, 2\nprint(m + n)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "s = 6\nprint(s)"
  },
  {
    "example_id": 158,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# This solution does not use any functions\n\n# Perimeter of the triangle\nperimeter = 2 * (15 + 10)\nprint(perimeter)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.162"
    ],
    "annotated_answers": [
      "0.54"
    ],
    "solution": "volume = 0.027\nsurface_area = 6 * volume\nprint(surface_area)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "284.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "x = 104\ny = 180\nprint(x + y)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.48528137423857"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef max_distance(x1, y1, x2, y2):\n    return max(distance(x1, y1, x2, y2), distance(x1, y1, x2, y2 + 2), distance(x1, y1, x2 + 2, y2), distance(x1, y1, x2 + 2, y2 + 2))\n\nprint(max_distance(2, 2, 6, 6))"
  },
  {
    "example_id": 162,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "import math\n\ndef triangle_side(side1, side2):\n    \"\"\"\n    Calculate the length of the third side of a triangle.\n    Given the length of two sides, find the length of the third side.\n    \"\"\"\n    return math.sqrt(side1 ** 2 + side2 ** 2)\n\n\ndef triangle_sides(side1, side2):\n    \"\"\"\n    Calculate the length of the third side of a triangle.\n    Given the length of two sides, find the length of the third side.\n    \"\"\"\n    return triangle_side(side1, side2)\n\n\ndef triangle_side_difference(side1, side2):\n    \"\"\"\n    Calculate the positive difference between the maximum and minimum length of the third side.\n    Given the length of two sides, find the positive difference between the maximum and minimum length of the third side.\n    \"\"\"\n    return triangle_sides(side1, side2) - triangle_sides(side1, side2)\n\n\nside1 = 18\nside2 = 29\nprint(triangle_side_difference(side1, side2))"
  },
  {
    "example_id": 163,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5",
      "2.0",
      "0.5",
      "2.0",
      "0.5",
      "2.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "from sympy import *\n\na, b, c = symbols('a b c')\n\narea = (a**2 + b**2 + c**2) * 0.5\n\nprint(area)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "area = 4 * 4\nprint(area)"
  },
  {
    "example_id": 165,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "97.0",
      "4.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\n\n# area of triangle ABC\narea = sympy.integrate((x + y) / 2, (x, 0, 4)) + sympy.integrate((y) / 2, (y, 0, 9))\n\nprint(area)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "angle = 60\nprint(angle)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\nfrom sympy import *\nx, y = symbols('x, y')\ndef get_angle(p1, p2, p3):\n    return acos((p1.x - p2.x) * (p3.x - p2.x) + (p1.y - p2.y) * (p3.y - p2.y))\n\ndef get_m_angle(p1, p2, p3):\n    return get_angle(p1, p2, p3) / 2\n\ndef get_m_angles(p1, p2, p3, p4, p5, p6, p7):\n    return [get_m_angle(p1, p2, p3), get_m_angle(p1, p3, p4), get_m_angle(p1, p4, p5), get_m_angle(p1, p5, p6), get_m_angle(p1, p6, p7)]\n\np1 = Point2D(x=0, y=0)\np2 = Point2D(x=1, y=0)\np3 = Point2D(x=1, y=1)\np4 = Point2D(x=0, y=1)\np5 = Point2D(x=-1, y=1)\np6 = Point2D(x=-1, y=0)\np7 = Point2D(x=-1, y=-1)\n\nprint(get_m_angles(p1, p2, p3, p4, p5, p6, p7))"
  },
  {
    "example_id": 168,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "from sympy import symbols, sqrt\n\na, b, c = symbols('a b c')\n\ns = (a + b + c) / 2\n\narea = sqrt(s * (s - a) * (s - b) * (s - c))\n\nprint(area)"
  },
  {
    "example_id": 169,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "angle_RAS = 74\nangle_RTB = 28\nangle_BR = angle_RAS - angle_RTB\nprint(angle_BR)"
  },
  {
    "example_id": 170,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\ntank_radius = 6\nbeaker_radius = 3\nbeaker_height = 8\n\nnumber_of_beakers = math.ceil(tank_radius / (beaker_radius + beaker_height))\nprint(number_of_beakers)"
  },
  {
    "example_id": 171,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 4\ny = 0\nsum = x + y\nprint(sum)"
  },
  {
    "example_id": 172,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.99202019855866"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "import math\nx = math.degrees(math.atan(0.7))\nprint(x)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Using the formula for the area of a triangle\n# Area = (base x height) / 2\nbase = 6\nheight = 8\narea = (base * height) / 2\nprint(area)"
  },
  {
    "example_id": 174,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.898979485566356"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\nlateral_surface_area = 24 * math.pi\nvolume = lateral_surface_area\nradius = math.sqrt(volume / math.pi)\nprint(radius)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\nabc = sympy.Polygon(sympy.Point(0,0), sympy.Point(a,0), sympy.Point(b,c))\namn = abc.area\nprint(amn)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.84955592153876"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from math import pi\n\nradius = 3\narea = 2 * pi * radius\nprint(area)"
  },
  {
    "example_id": 177,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "6.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "5.19615242270663",
      "5.19615242270663"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "![image](https://user-images.githubusercontent.com/59552244/100943533-45545880-3575-11eb-9489-a8b5531c3786.png)\n\n\n\nimport math\nimport sympy as sym\n\n# Define variables\na = sym.Symbol('a')\nb = sym.Symbol('b')\nc = sym.Symbol('c')\nm = sym.Symbol('m')\nn = sym.Symbol('n')\np = sym.Symbol('p')\n\n# Define equations\na**2 + b**2 == c**2\na**2 + c**2 == b**2\na + b + c == 6\nm**2 + n**2 == p**2\nm + n + p == 3*math.sqrt(3)\n\n# Solve equations\nsolve_a = sym.solve(a**2 + b**2 - c**2, a)\nsolve_b = sym.solve(a**2 + c**2 - b**2, b)\nsolve_c = sym.solve(a + b + c - 6, c)\nsolve_m = sym.solve(m**2 + n**2 - p**2, m)\nsolve_n = sym.solve(m + n + p - 3*math.sqrt(3), n)\nsolve_p = sym.solve(m + n + p - 3*math.sqrt(3), p)\n\n# Print solution\nprint(solve_a)\nprint(solve_b)\nprint(solve_c)\nprint(solve_m)\nprint(solve_n)\nprint(solve_p)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.2"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "perimeter = 176\nside_length = perimeter / 5\nprint(side_length)"
  },
  {
    "example_id": 179,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\n\na, b, c, d = sympy.symbols('a b c d')\ns = sympy.Polygon((-1, 0), (0, 1), (2, 0), (0, -3))\nprint(s.area)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x_coord = (1+7)/2\ny_coord = 3\nprint(x_coord + y_coord)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.4641016151377544"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "import math\ns = 6\nb = 4\nc = math.sqrt(s * (s - b))\nprint(c)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 4\ny = 6\nz = abs(x - y)\nprint(z)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1440.0"
    ],
    "annotated_answers": [
      "864.0"
    ],
    "solution": "base = 288\nheight = 15\nvolume = (base * height) / 3\nprint(volume)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "195936.0"
    ],
    "annotated_answers": [
      "391872.0"
    ],
    "solution": "distance = 97968 * (30/15)\nprint(distance)"
  },
  {
    "example_id": 185,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "a = 54\nb = 90 - a\nprint(b)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1152.0"
    ],
    "solution": "flour_per_waffle = 0.5\nwaffles_on_griddle = 24 / 6\ntotal_flour = waffles_on_griddle * flour_per_waffle\nprint(total_flour)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "A = 6\nB = 18\nC = 63\n\nprint((C/B) * A)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "a, b = 3, 1\nprint(a + b)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "59.99999999999999"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "import sympy\nimport numpy\n\nV_cylinder = 60\n\ndef sphere_volume(V_cylinder):\n    r = (V_cylinder / (4 / 3 * numpy.pi)) ** (1 / 3)\n    return 4 / 3 * numpy.pi * r ** 3\n\nV_sphere = sphere_volume(V_cylinder)\nprint(V_sphere)"
  },
  {
    "example_id": 190,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "12.25"
    ],
    "solution": "import math\n\nAB = CD = 7\nBC = 14\n\nprint(AB * CD)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "12.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "from sympy import symbols, simplify\nx, y = symbols('x y')\nexpression = (x + 3*y - 12)\nprint(simplify(expression))"
  },
  {
    "example_id": 192,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4950.0",
      "5000.0",
      "5.0"
    ],
    "annotated_answers": [
      "3.75"
    ],
    "solution": "import sympy\n\ndef area_of_pentagon(n):\n    h = sympy.sqrt(5) * n\n    w = h / sympy.sqrt(5)\n    return (w * h) / 2\n\ndef area_of_triangle(n):\n    return (n * (n + 1)) / 2\n\ndef area_of_square(n):\n    return n * n\n\ndef number_of_square_units(n):\n    return area_of_square(n) - area_of_pentagon(n) - area_of_triangle(n)\n\nprint(number_of_square_units(100))"
  },
  {
    "example_id": 193,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.142135623730951"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import sqrt\n\nlength = sqrt(2) * 10\nprint(length)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6197751905438615"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import tan\nprint(tan(45))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "from sympy import symbols, simplify\n\nx, y = symbols('x, y')\n\ns = simplify((x**2 + y**2) * (2*x - 2*y))\n\nprint(s)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "import math\n\ndef inscribed_triangle_area(side_length):\n    return side_length * side_length / 2\n\narea = inscribed_triangle_area(10)\nprint(area)"
  },
  {
    "example_id": 197,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import simplify\n\ndef perimeter(a, b, c):\n    return a + b + c\n\ndef area(a, b, c):\n    p = perimeter(a, b, c) / 2\n    return sqrt(p * (p - a) * (p - b) * (p - c))\n\ndef least_perimeter(a, b, c):\n    return a + b + abs(a - b)\n\ndef greatest_perimeter(a, b, c):\n    return a + b + abs(a - c)\n\nprint(simplify(greatest_perimeter(2, -4, 4) - least_perimeter(-1, 0, 2)))"
  },
  {
    "example_id": 198,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.56"
    ],
    "annotated_answers": [
      "37.72"
    ],
    "solution": "a, b, c = 7, 24, 25\nsum = a + b + c\nprint(sum/100)"
  },
  {
    "example_id": 199,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "import sympy\n\ns = sympy.Symbol('s')\nh = sympy.Symbol('h')\narea = (s * h) / 2\nprint(area)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\nlateral_surface_area = 3.5\nvolume = 3.5\n\nradius = (lateral_surface_area * volume)**(1/2)\n\nprint(radius)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "2.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "from sympy import Polygon\n\npolygon = Polygon(\n    (0, 0),\n    (1, 1),\n    (1, 0.5),\n    (2.5, 0.5),\n    (2.5, -0.5),\n    (1, -0.5),\n    (1, -1),\n)\nprint(polygon.area)"
  },
  {
    "example_id": 202,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-52.5"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "v, w, x, y, z = 120, 60, 30, 15, 5\n\n# arithmetic sequence formula\nx = v + (z - v) * (y - w) / (x - w)\n\nprint(x)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 5 * 30 / 30\nprint(x)"
  },
  {
    "example_id": 204,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.366600265340756"
    ],
    "annotated_answers": [
      "184.0"
    ],
    "solution": "from math import sqrt\na = sqrt(10*14/2)\nprint(a)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import math\nprint(3 * 27)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "pentagon_area = 5 * (12 ** 2)\nprint(pentagon_area)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.333333333333334"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "x, y, z = 14, 4, 6\ny = x / (z / y)\nprint(y)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "18.0",
      "19.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a = 3\nprint(a + 1, 6 * a, 6 * a + 1)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1476.0"
    ],
    "annotated_answers": [
      "2040.0"
    ],
    "solution": "from sympy import *\nl = 36\narea = 0.5 * l * (32 + 50)\nprint(area)"
  },
  {
    "example_id": 210,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.23606797749979"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "from math import pi\n\nradius_of_cup = 3\nradius_of_container = 2\nheight = (radius_of_cup**2 - radius_of_container**2)**0.5\nprint(height)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-90.0",
      "90.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import sympy as sp\n\ntheta = sp.Symbol('theta')\nradius = sp.Symbol('radius')\n\ntheta_new = 1.2 * theta\nradius_new = 1.25 * radius\n\nlength = sp.sqrt(radius_new ** 2 + theta_new ** 2)\n\nprint(sp.solve((length - length.subs(theta, 90)) / length.subs(theta, 90)))"
  },
  {
    "example_id": 212,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "145.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols(\"a b c\")\n\nAD = sympy.sqrt(a**2 - b**2)\nAB = 105\nBD = 42\n\nc = (a**2 + b**2 - AD**2) / 2 * a\n\nprint(c)"
  },
  {
    "example_id": 213,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "75.52248781407008"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "import math\nprint(math.degrees(math.acos(0.5 / 2)))"
  },
  {
    "example_id": 214,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.034960000000003"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import math\n\nt = 1 - 0.32\n\nx = t * (-4.07) + (1 - t) * 40.008\n\nprint(x)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x = 90\nprint(x)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "volume = 2 * 2 * 2\nvolume += 19\nprint(volume ** (1/3))"
  },
  {
    "example_id": 217,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import *\n\na, b, c = symbols('a, b, c')\np = (a + b + c) / 2\n\narea = p * (p - a) * (p - b) * (p - c)\n\nprint(area)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.8011526357338304"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import sin\nprint(sin(180))"
  },
  {
    "example_id": 219,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.08333333333333",
      "3.0",
      "25.0",
      "2.0",
      "100.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny1 = -2*x + 8\ny2 = 1/2*x - 2\ny3 = x - 2\narea = sympy.integrate((y1-y2)**2, x)\nprint(area)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import solve\nfrom sympy.abc import x, y\n\neq = [x + y - 6]\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 221,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.4"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "length_of_BN = 2.4\nprint(length_of_BN)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "from sympy import Symbol, simplify, sqrt, pprint\n\na, b, c, d = Symbol('a'), Symbol('b'), Symbol('c'), Symbol('d')\n\nABCD = 42\n\nAB = sqrt((a - b) ** 2 + (c - d) ** 2)\n\nAD = sqrt((a - d) ** 2 + (c - d) ** 2)\n\nBD = sqrt((b - d) ** 2 + (c - d) ** 2)\n\nCD = sqrt((c - d) ** 2 + (a - d) ** 2)\n\nABCD = simplify(AB + AD + BD + CD)\n\nprint(ABCD)"
  },
  {
    "example_id": 223,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.09375"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import math\n\nd = 16\nr1 = 10\nr2 = 17\n\nprint((r1**2 + d**2 - r2**2) / (2 * d))"
  },
  {
    "example_id": 224,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "import numpy\n\n# coordinates of points\na = numpy.array((2, 12))\nb = numpy.array((12, 0))\no = numpy.array((0, 0))\nq = numpy.array((0, 12))\n\n# perimeter\nperimeter = numpy.sum(numpy.abs(a - b)) + numpy.sum(numpy.abs(b - o)) + numpy.sum(numpy.abs(o - q)) + numpy.sum(numpy.abs(q - a))\n\n# area\narea = perimeter / 2\n\nprint(area)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "from sympy import symbols, sqrt\n\na, b, c = symbols('a b c')\ns = (a + b + c) / 2\narea = sqrt(s * (s - a) * (s - b) * (s - c))\nprint(area)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "print(4 * 30)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "23.31"
    ],
    "solution": "import math\n\ndef ant_travel(x):\n    # First crawl to (x,0)\n    t1 = x / math.sqrt(2)\n    # Instantly teleport to (x,x)\n    t2 = x / 2\n    # Finally, head to B at 2 units per second\n    t3 = (74 - x) / 2\n    return t1 + t2 + t3\n\nmin_x = 0\nmax_x = 74\nwhile min_x < max_x:\n    mid_x = (min_x + max_x) / 2\n    if ant_travel(mid_x) < ant_travel(min_x):\n        min_x = mid_x\n    else:\n        max_x = mid_x\n\nprint(min_x)"
  },
  {
    "example_id": 228,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a, b, c')\n\np = (a**2 + b**2 - c**2) / (2 * a * b)\n\nprint(p)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "from sympy import *\nu, v, w = symbols('u,v,w')\nx, y, z = symbols('x,y,z')\np = (w - x) * (v - y) / (u - y) + x\narea = (p - y) * (z - y) / 2\nprint(area)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.66025403784439",
      "2.0",
      "3.0",
      "9.0",
      "2.0",
      "3.0",
      "8.66025403784439",
      "2.0",
      "3.0",
      "9.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import symbols, solve\n\nh, b1, b2, b3 = symbols('h b1 b2 b3')\n\nvolume = (1/3) * h * (b1 + b2 + b3) * h\n\nconstraints = [volume - 225, b1 + b2 + b3 - 9]\n\nsol = solve(constraints, [h, b1, b2, b3])\n\nprint(sol)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "from sympy import *\n\nA, B, C, D, E, F = symbols('A B C D E F')\n\narea = (A + B + E)/3 + (A + D + F)/3 + (C + E + F)/3\n\nprint(area)"
  },
  {
    "example_id": 232,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\ntriangle = sympy.Polygon((0,0), (a,0), (b,c))\nprint(triangle.circumradius)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.12"
    ],
    "annotated_answers": [
      "62.8"
    ],
    "solution": "# 3.14 as approximation for pi\nimport math\npi = 3.14\n\n# Area of the two shaded regions\narea = (pi * 4) * (4 / 2)\nprint(area)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "import math\ns = (10 + 17 + 21) / 2\nr = math.sqrt(s * (s - 10) * (s - 17) * (s - 21))\nprint(r)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import *\n\na, b, c, d = symbols('a b c d')\n\nAB = sqrt((c - a)**2 + (d - b)**2)\nBC = sqrt((a - c)**2 + (b - d)**2)\nCD = sqrt((c - d)**2 + (a - b)**2)\nDA = sqrt((b - a)**2 + (d - c)**2)\n\narea = (AB + BC + CD + DA) / 2\n\nprint(area)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "74.0"
    ],
    "solution": "import math\n\ndiameter_54 = 3\ndiameter_55 = diameter_54 + 1\nvolume_54 = math.pi * (diameter_54 / 2) ** 2\nvolume_55 = math.pi * (diameter_55 / 2) ** 2\nrubber_bands_needed = math.ceil(volume_55 / volume_54)\nprint(rubber_bands_needed)"
  }
]