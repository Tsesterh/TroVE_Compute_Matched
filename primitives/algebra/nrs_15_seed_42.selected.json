[
  {
    "example_id": 0,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a, b, c = 1, 2, 5\nprint(b)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.6666666666666665"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "a = 8 / (4 - 1)\nprint(a)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "294759906334250.0"
    ],
    "annotated_answers": [
      "268.0"
    ],
    "solution": "import math\n\ntotal_area = 0\nfor i in range(20):\n    radius = 16 * 2 ** i\n    area = math.pi * radius ** 2\n    total_area += area\n\nprint(round(total_area))"
  },
  {
    "example_id": 3,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7945.0"
    ],
    "annotated_answers": [
      "7945.0"
    ],
    "solution": "rent = 5000\nelec_cost = 1.45\ntotal_cost = 16520.25\nelec_used = (total_cost - rent) / elec_cost\nprint(elec_used)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "flour_per_cake = 1.5\nflour_total = flour_per_cake * 2\nprint(flour_total)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75"
    ],
    "annotated_answers": [
      "164.0"
    ],
    "solution": "wins = 3\ntotal_matches = 4\nwin_ratio = wins / total_matches\nprint(win_ratio)\n# 0.75"
  },
  {
    "example_id": 6,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = 2\ny = x + 2\nsquare_x = x**2\nsquare_y = y**2\ndiff = square_y - square_x\nsum = x + y\nprint(sum)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "z_over_y = 4 * 2\nprint(z_over_y)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = (12+8)/2\ny = (12-8)/2\nprint(2*x - x*y)"
  },
  {
    "example_id": 9,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-54.0",
      "2.0",
      "2.0",
      "54.0",
      "2.0",
      "2.0",
      "9.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "189.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "solve(6*x + 4*y - 7, K*x + 8*y - 7)"
  },
  {
    "example_id": 10,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "1545.0"
    ],
    "solution": "distance = 405\nfor i in range(4):\n    distance = 2/3 * distance\nprint(distance)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.56790123456789"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "x = 3\nprint((x - 1/x)**4)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "189.23595505617976"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "import math\n\nm = int(math.sqrt(2000*16))\nn = 2000/m\nprint(m+n)"
  },
  {
    "example_id": 13,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3702.0"
    ],
    "annotated_answers": [
      "3702.0"
    ],
    "solution": "N = 1/3\nfloor_10N = int(10*N)\nfloor_100N = int(100*N)\nfloor_1000N = int(1000*N)\nfloor_10000N = int(10000*N)\nprint(floor_10N + floor_100N + floor_1000N + floor_10000N)"
  },
  {
    "example_id": 14,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "count = 0\nfor x in range(-10, 10):\n    for y in range(-10, 10):\n        if (x**2 + y**2) == 25:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "import sympy as sp\n\nx, y, c = sp.symbols('x y c')\neq = x**2 - 10*x + y**2 + 6*y + c\n\n# solve for c\nsol = sp.solve(eq.subs(x, 0).subs(y, 0) - 1)\n\nprint(sol)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "A = 1\nB = 2\nC = 1\nD = -1\nprint(A+B+C+D)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# The sum of three consecutive even integers is 66\n# The smallest of the three integers is 2\nprint(2)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "smaller = 25 - 11\nprint(smaller)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4096.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(8 ** 4)"
  },
  {
    "example_id": 20,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1636.3636363636365"
    ],
    "annotated_answers": [
      "445.0"
    ],
    "solution": "num_widgets = 1000 / 0.50\nnum_widgets_to_sell = num_widgets - 1000 / 2.75\nprint(num_widgets_to_sell)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(0.5 * 1/3 * 36)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.331632653061224"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "x = 7 / 2\nprint(x**2 + 1 / x**2 + 1)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(7 + 7)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "x = 2\nprint(x**((x+1)**x))"
  },
  {
    "example_id": 25,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32768.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# Number of cells at the end of day 1\n# = 2\n# Number of cells at the end of day 2\n# = 2 * 2\n# Number of cells at the end of day 3\n# = 2 * 2 * 2\n# Number of cells at the end of day 4\n# = 2 * 2 * 2 * 2\n# Number of cells at the end of day 5\n# = 2 * 2 * 2 * 2 * 2\n# Number of cells at the end of day 6\n# = 2 * 2 * 2 * 2 * 2 * 2\n# Number of cells at the end of day 7\n# = 2 * 2 * 2 * 2 * 2 * 2 * 2\n# Number of cells at the end of day 8\n# = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n# Number of cells at the end of day 9\n# = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n# Number of cells at the end of day 10\n# = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n# Number of cells at the end of day 11\n# = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n# Number of cells at the end of day 12\n# = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n# Number of cells at the end of day 13\n# = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n# Number of cells at the end of day 14\n# = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n# Number of cells at the end of day 15\n# = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\n\nprint(2 ** 15)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "y = 9\nprint(y)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1120.0"
    ],
    "annotated_answers": [
      "1120.0"
    ],
    "solution": "print(43**2 - 27**2)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nprint(math.log(27, 3))"
  },
  {
    "example_id": 29,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1374.0"
    ],
    "annotated_answers": [
      "194.0"
    ],
    "solution": "# A sequence can be defined by a formula\n# a1 + d(n-1) = an\n# a1 = a2 + d(n-2) = an + d(n-1)\n# a2 + d(n-2) + d(n-1) = an + 2d(n-1)\n# a2 + 2d(n-1) = an + 2d(n-1) + d(n-1)\n# a2 + 2d(n-1) = an + d(n-1)\n# a2 = an - d(n-1)\n\n# Given sequence: 2, 30,?\na1 = 2\na2 = 30\nd = a2 - a1\n\n# fiftieth term:\na50 = a1 + (50-1) * d\nprint(a50)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# 2 + 3 = 5\n# 4 + 5 = 9\n# 6 + 7 = 13\n# 8 + 9 = 17\nprint(5 + 9 + 13 + 17)"
  },
  {
    "example_id": 31,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-312.5",
      "541.265877365274"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "import sympy\nprint(sympy.expand((-125) ** (4/3)))"
  },
  {
    "example_id": 32,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "-10.0",
      "-9.0",
      "-8.0",
      "-7.0",
      "-6.0",
      "-5.0",
      "-2.0",
      "-3.0",
      "-1.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import S, Abs\n\nf = lambda x: (1/(Abs(x**2 + 3*x - 4) + Abs(x**2 + 9*x + 20)))\n\nx = S('x')\n\ndomain = set()\nfor x in range(-10, 10):\n    if f(x).is_real and f(x).is_positive:\n        domain.add(x)\nprint(domain)"
  },
  {
    "example_id": 33,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x_center = (7 + (-3)) / 2\ny_center = (-6 + (-4)) / 2\nprint(x_center + y_center)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "f = lambda a: 1/(1-a)\nf_inv = lambda a: (1-a)/a\na = 0.5\nprint(f_inv(a) * a * f(a))"
  },
  {
    "example_id": 35,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = 3\nn = 1\nprint(m + n)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "4.0",
      "33.0",
      "4.0",
      "1.0",
      "3.0",
      "4.0",
      "33.0",
      "4.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = 2*x**2 - 7*x + 2\na, b = sympy.solve(f, x)\nprint(1/(a-1) + 1/(b-1))"
  },
  {
    "example_id": 37,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print((9-4*1j)-(-3-4*1j))"
  },
  {
    "example_id": 38,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-55.0"
    ],
    "solution": "a = -1\nb = 5\nc = 0\n\ncost = a * (-1) ** 2 + b * -1 + c\ncost += a * 0 ** 2 + b * 0 + c\ncost += a * 5 ** 2 + b * 5 + c\n\nprint(cost)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = 2\ny = 3\nprint(x+y)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-51.0"
    ],
    "annotated_answers": [
      "103.0"
    ],
    "solution": "second_largest = 129 - 180\nprint(second_largest)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def find_sqrt(n):\n    if n <= 1:\n        return n\n    else:\n        return find_sqrt(n-1) + 1\n\nprint(find_sqrt(12))"
  },
  {
    "example_id": 42,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-311.4477611940298"
    ],
    "annotated_answers": [
      "575.0"
    ],
    "solution": "n = -2.71/8.71 * 1001\nprint(n)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# simplify: (1/2 * 1024) / (0.125 * 2^12)\n\n# expand: 1024 / 2^12\n#          = 1024 / 4096\n#          = 1/4\n\n# simplify: (1/2 * 1024) / (0.125 * 1/4)\n#           = (1024 / 2^12) / (0.125 * 1/4)\n#           = (1024 / 4096) / (0.125 * 1/4)\n#           = 1/4\n\nprint(1/4)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.333333333333333"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Before adding 5 blue marbles\nnum_blue_marbles = 4 / 3\n\n# After adding 5 blue marbles\nnum_blue_marbles += 5\n\n# After removing 3 yellow marbles\nnum_blue_marbles -= 3\n\nprint(num_blue_marbles)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\n\nsegment = sympy.Segment((1, 2), (-4, -10))\nprint(segment.length)"
  },
  {
    "example_id": 46,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x = 6 + 1\ny = 8 + 1\nprint(x + y)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 4\nb = -2\nc = -1\nprint(a+b+c)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0",
      "210.0",
      "105.0",
      "410.0",
      "105.0",
      "410.0",
      "105.0",
      "410.0",
      "105.0",
      "410.0",
      "105.0",
      "410.0",
      "105.0",
      "410.0",
      "105.0",
      "410.0",
      "105.0",
      "410.0",
      "105.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "# Write a function that returns the sum of the first n terms of an arithmetic sequence\ndef sum_of_arithmetic_sequence(n):\n    # Write a function that returns the sum of the first n terms of an arithmetic sequence\n    return n * (n + 1) // 2\n\n# Test the function\nprint(sum_of_arithmetic_sequence(10))  # 55\nprint(sum_of_arithmetic_sequence(20))  # 190\n\n# Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\ndef difference_of_arithmetic_sequence(n):\n    # Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\n    return n * (2 * n + 1) // 2\n\n# Test the function\nprint(difference_of_arithmetic_sequence(10))  # 55\nprint(difference_of_arithmetic_sequence(20))  # 190\n\n# Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\ndef difference_of_arithmetic_sequence(n):\n    # Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\n    return n * (2 * n + 1) // 2\n\n# Test the function\nprint(difference_of_arithmetic_sequence(10))  # 55\nprint(difference_of_arithmetic_sequence(20))  # 190\n\n# Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\ndef difference_of_arithmetic_sequence(n):\n    # Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\n    return n * (2 * n + 1) // 2\n\n# Test the function\nprint(difference_of_arithmetic_sequence(10))  # 55\nprint(difference_of_arithmetic_sequence(20))  # 190\n\n# Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\ndef difference_of_arithmetic_sequence(n):\n    # Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\n    return n * (2 * n + 1) // 2\n\n# Test the function\nprint(difference_of_arithmetic_sequence(10))  # 55\nprint(difference_of_arithmetic_sequence(20))  # 190\n\n# Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\ndef difference_of_arithmetic_sequence(n):\n    # Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\n    return n * (2 * n + 1) // 2\n\n# Test the function\nprint(difference_of_arithmetic_sequence(10))  # 55\nprint(difference_of_arithmetic_sequence(20))  # 190\n\n# Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\ndef difference_of_arithmetic_sequence(n):\n    # Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\n    return n * (2 * n + 1) // 2\n\n# Test the function\nprint(difference_of_arithmetic_sequence(10))  # 55\nprint(difference_of_arithmetic_sequence(20))  # 190\n\n# Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\ndef difference_of_arithmetic_sequence(n):\n    # Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\n    return n * (2 * n + 1) // 2\n\n# Test the function\nprint(difference_of_arithmetic_sequence(10))  # 55\nprint(difference_of_arithmetic_sequence(20))  # 190\n\n# Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\ndef difference_of_arithmetic_sequence(n):\n    # Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\n    return n * (2 * n + 1) // 2\n\n# Test the function\nprint(difference_of_arithmetic_sequence(10))  # 55\nprint(difference_of_arithmetic_sequence(20))  # 190\n\n# Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\ndef difference_of_arithmetic_sequence(n):\n    # Write a function that returns the difference between the sum of the first n terms of an arithmetic sequence and the sum of the first n + 1 terms of an arithmetic sequence\n    return n * (2 * n + 1) // 2\n\n# Test the function\nprint(difference_of_arithmetic_sequence(10))  #"
  },
  {
    "example_id": 49,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# floor(14.6) = 14\n# ceiling(-14.6) = -14\nprint(14 - (-14))"
  },
  {
    "example_id": 50,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 3\nb = x * 3 / (x + 3)\nprint(b)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5000.0"
    ],
    "annotated_answers": [
      "5000.0"
    ],
    "solution": "print(255**2 - 245**2)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# First, find b\nb = (3-2) / (4-2)\n\n# Now, find c\nc = 3 - b * 2\n\nprint(c)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "1.0",
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import log, exp\nx = exp(log(49) / log(7))\nprint(x)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "c = 27**(b-1) * 5 / 125**(b-1)\nprint(c)"
  },
  {
    "example_id": 55,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "2.0",
      "48.0",
      "108.0",
      "2.0",
      "2.0",
      "-6.0",
      "2.0",
      "48.0",
      "108.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy as sp\n\nx, y = sp.symbols('x y')\nexpr = 2*x**2 + 3*y**2 + 8*x - 24*y + 62\n\n# find the minimum value of the expression\nresult = sp.solve(expr, [x, y])\n\nprint(result)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "fewest_miles = 4 * 3\nprint(fewest_miles)"
  },
  {
    "example_id": 57,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import *\ns = symbols(\"s\")\nroot_1 = (-1 + sqrt(1 + 4*s)) / 2\nroot_2 = (-1 - sqrt(1 + 4*s)) / 2\nprint(root_1 + root_2)"
  },
  {
    "example_id": 58,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "32.0",
      "32.0",
      "8.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 8\nb = 4\nc = 1\na2 = a*a\nb2 = b*b\nc2 = c*c\na_b_c = a*b*c\na_b = a*b\na_c = a*c\nb_c = b*c\n\nprint(a2 - b2 + c2)\nprint(a_b_c)\nprint(a_b)\nprint(a_c)\nprint(b_c)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 3 * 5\nb = 15 * 6\nc = 6\nd = a * c / b\nprint(d)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "904.7786842338604",
      "150.79644737231004",
      "24.0",
      "0.4444444444444444"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "import math\n\ndef get_volume(r, h):\n    return (1/3) * math.pi * r**2 * h\n\ndef get_height(r, h):\n    return 24 / (3 * r)\n\nr_small = 6\nh_small = 24\n\nv_small = get_volume(r_small, h_small)\n\nr_large = 3 * r_small\nh_large = get_height(r_large, h_small)\n\nv_large = get_volume(r_large, h_large)\n\nprint(v_small, v_large)\nprint(h_small, h_large)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print((9)**2 - 3*(9)*(3) + 8)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "4.0",
      "6.0",
      "6.0",
      "2.0",
      "7.0",
      "7.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sy\na, b, c, x, y = sy.symbols('a b c x y')\neq1 = sy.Eq(a*x + b*y + c, x + 7)\neq2 = sy.Eq(a + b*x + c*y, 2*x + 6*y)\neq3 = sy.Eq(a*y + b + c*x, 4*x + y)\nsol = sy.solve([eq1, eq2, eq3], [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "multiples = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\nprint(sum(multiples))"
  },
  {
    "example_id": 64,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "5.0",
      "7.0",
      "9.0",
      "11.0",
      "13.0",
      "15.0",
      "17.0",
      "19.0",
      "21.0",
      "23.0",
      "25.0",
      "27.0",
      "29.0",
      "31.0",
      "33.0",
      "35.0",
      "37.0",
      "39.0",
      "41.0",
      "43.0",
      "45.0",
      "47.0",
      "49.0",
      "51.0",
      "53.0",
      "55.0",
      "57.0",
      "59.0",
      "61.0",
      "63.0",
      "65.0",
      "67.0",
      "69.0",
      "71.0",
      "73.0",
      "75.0",
      "77.0",
      "79.0",
      "81.0",
      "83.0",
      "85.0",
      "87.0",
      "89.0",
      "91.0",
      "93.0",
      "95.0",
      "97.0",
      "99.0",
      "101.0",
      "103.0",
      "105.0",
      "107.0",
      "109.0",
      "111.0",
      "113.0",
      "115.0",
      "117.0",
      "119.0",
      "121.0",
      "123.0",
      "125.0",
      "127.0",
      "129.0",
      "131.0",
      "133.0",
      "135.0",
      "137.0",
      "139.0",
      "141.0",
      "143.0",
      "145.0",
      "147.0",
      "149.0",
      "151.0",
      "153.0",
      "155.0",
      "157.0",
      "159.0",
      "161.0",
      "163.0",
      "165.0",
      "167.0",
      "169.0",
      "171.0",
      "173.0",
      "175.0",
      "177.0",
      "179.0",
      "181.0",
      "183.0",
      "185.0",
      "187.0",
      "189.0",
      "191.0",
      "193.0",
      "195.0",
      "197.0",
      "199.0",
      "201.0",
      "203.0",
      "205.0",
      "207.0",
      "209.0",
      "211.0",
      "213.0",
      "215.0",
      "217.0",
      "219.0",
      "221.0",
      "223.0",
      "225.0",
      "227.0",
      "229.0",
      "231.0",
      "233.0",
      "235.0",
      "237.0",
      "239.0",
      "241.0",
      "243.0",
      "245.0",
      "247.0",
      "249.0",
      "251.0",
      "253.0",
      "255.0",
      "257.0",
      "259.0",
      "261.0",
      "263.0",
      "265.0",
      "267.0",
      "269.0",
      "271.0",
      "273.0",
      "275.0",
      "277.0",
      "279.0",
      "281.0",
      "283.0",
      "285.0",
      "287.0",
      "289.0",
      "291.0",
      "293.0",
      "295.0",
      "297.0",
      "299.0",
      "301.0",
      "303.0",
      "305.0",
      "307.0",
      "309.0",
      "311.0",
      "313.0",
      "315.0",
      "317.0",
      "319.0",
      "321.0",
      "323.0",
      "325.0",
      "327.0",
      "329.0",
      "331.0",
      "333.0",
      "335.0",
      "337.0",
      "339.0",
      "341.0",
      "343.0",
      "345.0",
      "347.0",
      "349.0",
      "351.0",
      "353.0",
      "355.0",
      "357.0",
      "359.0",
      "361.0",
      "363.0",
      "365.0",
      "367.0",
      "369.0",
      "371.0",
      "373.0",
      "375.0",
      "377.0",
      "379.0",
      "381.0",
      "383.0",
      "385.0",
      "387.0",
      "389.0",
      "391.0",
      "393.0",
      "395.0",
      "397.0",
      "399.0",
      "401.0",
      "403.0",
      "405.0",
      "407.0",
      "409.0",
      "411.0",
      "413.0",
      "415.0",
      "417.0",
      "419.0",
      "421.0",
      "423.0",
      "425.0",
      "427.0",
      "429.0",
      "431.0",
      "433.0",
      "435.0",
      "437.0",
      "439.0",
      "441.0",
      "443.0",
      "445.0",
      "447.0",
      "449.0",
      "451.0",
      "453.0",
      "455.0",
      "457.0",
      "459.0",
      "461.0",
      "463.0",
      "465.0",
      "467.0",
      "469.0",
      "471.0",
      "473.0",
      "475.0",
      "477.0",
      "479.0",
      "481.0",
      "483.0",
      "485.0",
      "487.0",
      "489.0",
      "491.0",
      "493.0",
      "495.0",
      "497.0",
      "499.0",
      "501.0",
      "503.0",
      "505.0",
      "507.0",
      "509.0",
      "511.0",
      "513.0",
      "515.0",
      "517.0",
      "519.0",
      "521.0",
      "523.0",
      "525.0",
      "527.0",
      "529.0",
      "531.0",
      "533.0",
      "535.0",
      "537.0",
      "539.0",
      "541.0",
      "543.0",
      "545.0",
      "547.0",
      "549.0",
      "551.0",
      "553.0",
      "555.0",
      "557.0",
      "559.0",
      "561.0",
      "563.0",
      "565.0",
      "567.0",
      "569.0",
      "571.0",
      "573.0",
      "575.0",
      "577.0",
      "579.0",
      "581.0",
      "583.0",
      "585.0",
      "587.0",
      "589.0",
      "591.0",
      "593.0",
      "595.0",
      "597.0",
      "599.0",
      "601.0",
      "603.0",
      "605.0",
      "607.0",
      "609.0",
      "611.0",
      "613.0",
      "615.0",
      "617.0",
      "619.0",
      "621.0",
      "623.0",
      "625.0",
      "627.0",
      "629.0",
      "631.0",
      "633.0",
      "635.0",
      "637.0",
      "639.0",
      "641.0",
      "643.0",
      "645.0",
      "647.0",
      "649.0",
      "651.0",
      "653.0",
      "655.0",
      "657.0",
      "659.0",
      "661.0",
      "663.0",
      "665.0",
      "667.0",
      "669.0",
      "671.0",
      "673.0",
      "675.0",
      "677.0",
      "679.0",
      "681.0",
      "683.0",
      "685.0",
      "687.0",
      "689.0",
      "691.0",
      "693.0",
      "695.0",
      "697.0",
      "699.0",
      "701.0",
      "703.0",
      "705.0",
      "707.0",
      "709.0",
      "711.0",
      "713.0",
      "715.0",
      "717.0",
      "719.0",
      "721.0",
      "723.0",
      "725.0",
      "727.0",
      "729.0",
      "731.0",
      "733.0",
      "735.0",
      "737.0",
      "739.0",
      "741.0",
      "743.0",
      "745.0",
      "747.0",
      "749.0",
      "751.0",
      "753.0",
      "755.0",
      "757.0",
      "759.0",
      "761.0",
      "763.0",
      "765.0",
      "767.0",
      "769.0",
      "771.0",
      "773.0",
      "775.0",
      "777.0",
      "779.0",
      "781.0",
      "783.0",
      "785.0",
      "787.0",
      "789.0",
      "791.0",
      "793.0",
      "795.0",
      "797.0",
      "799.0",
      "801.0",
      "803.0",
      "805.0",
      "807.0",
      "809.0",
      "811.0",
      "813.0",
      "815.0",
      "817.0",
      "819.0",
      "821.0",
      "823.0",
      "825.0",
      "827.0",
      "829.0",
      "831.0",
      "833.0",
      "835.0",
      "837.0",
      "839.0",
      "841.0",
      "843.0",
      "845.0",
      "847.0",
      "849.0",
      "851.0",
      "853.0",
      "855.0",
      "857.0",
      "859.0",
      "861.0",
      "863.0",
      "865.0",
      "867.0",
      "869.0",
      "871.0",
      "873.0",
      "875.0",
      "877.0",
      "879.0",
      "881.0",
      "883.0",
      "885.0",
      "887.0",
      "889.0",
      "891.0",
      "893.0",
      "895.0",
      "897.0",
      "899.0",
      "901.0",
      "903.0",
      "905.0",
      "907.0",
      "909.0",
      "911.0",
      "913.0",
      "915.0",
      "917.0",
      "919.0",
      "921.0",
      "923.0",
      "925.0",
      "927.0",
      "929.0",
      "931.0",
      "933.0",
      "935.0",
      "937.0",
      "939.0",
      "941.0",
      "943.0",
      "945.0",
      "947.0",
      "949.0",
      "951.0",
      "953.0",
      "955.0",
      "957.0",
      "959.0",
      "961.0",
      "963.0",
      "965.0",
      "967.0",
      "969.0",
      "971.0",
      "973.0",
      "975.0",
      "977.0",
      "979.0",
      "981.0",
      "983.0",
      "985.0",
      "987.0",
      "989.0",
      "991.0",
      "993.0",
      "995.0",
      "997.0",
      "999.0",
      "1001.0",
      "1003.0",
      "1005.0",
      "1007.0",
      "1009.0",
      "1011.0",
      "1013.0",
      "1015.0",
      "1017.0",
      "1019.0",
      "1021.0",
      "1023.0",
      "1025.0",
      "1027.0",
      "1029.0",
      "1031.0",
      "1033.0",
      "1035.0",
      "1037.0",
      "1039.0",
      "1041.0",
      "1043.0",
      "1045.0",
      "1047.0",
      "1049.0",
      "1051.0",
      "1053.0",
      "1055.0",
      "1057.0",
      "1059.0",
      "1061.0",
      "1063.0",
      "1065.0",
      "1067.0",
      "1069.0",
      "1071.0",
      "1073.0",
      "1075.0",
      "1077.0",
      "1079.0",
      "1081.0",
      "1083.0",
      "1085.0",
      "1087.0",
      "1089.0",
      "1091.0",
      "1093.0",
      "1095.0",
      "1097.0",
      "1099.0",
      "1101.0",
      "1103.0",
      "1105.0",
      "1107.0",
      "1109.0",
      "1111.0",
      "1113.0",
      "1115.0",
      "1117.0",
      "1119.0",
      "1121.0",
      "1123.0",
      "1125.0",
      "1127.0",
      "1129.0",
      "1131.0",
      "1133.0",
      "1135.0",
      "1137.0",
      "1139.0",
      "1141.0",
      "1143.0",
      "1145.0",
      "1147.0",
      "1149.0",
      "1151.0",
      "1153.0",
      "1155.0",
      "1157.0",
      "1159.0",
      "1161.0",
      "1163.0",
      "1165.0",
      "1167.0",
      "1169.0",
      "1171.0",
      "1173.0",
      "1175.0",
      "1177.0",
      "1179.0",
      "1181.0",
      "1183.0",
      "1185.0",
      "1187.0",
      "1189.0",
      "1191.0",
      "1193.0",
      "1195.0",
      "1197.0",
      "1199.0",
      "1201.0",
      "1203.0",
      "1205.0",
      "1207.0",
      "1209.0",
      "1211.0",
      "1213.0",
      "1215.0",
      "1217.0",
      "1219.0",
      "1221.0",
      "1223.0",
      "1225.0",
      "1227.0",
      "1229.0",
      "1231.0",
      "1233.0",
      "1235.0",
      "1237.0",
      "1239.0",
      "1241.0",
      "1243.0",
      "1245.0",
      "1247.0",
      "1249.0",
      "1251.0",
      "1253.0",
      "1255.0",
      "1257.0",
      "1259.0",
      "1261.0",
      "1263.0",
      "1265.0",
      "1267.0",
      "1269.0",
      "1271.0",
      "1273.0",
      "1275.0",
      "1277.0",
      "1279.0",
      "1281.0",
      "1283.0",
      "1285.0",
      "1287.0",
      "1289.0",
      "1291.0",
      "1293.0",
      "1295.0",
      "1297.0",
      "1299.0",
      "1301.0",
      "1303.0",
      "1305.0",
      "1307.0",
      "1309.0",
      "1311.0",
      "1313.0",
      "1315.0",
      "1317.0",
      "1319.0",
      "1321.0",
      "1323.0",
      "1325.0",
      "1327.0",
      "1329.0",
      "1331.0",
      "1333.0",
      "1335.0",
      "1337.0",
      "1339.0",
      "1341.0",
      "1343.0",
      "1345.0",
      "1347.0",
      "1349.0",
      "1351.0",
      "1353.0",
      "1355.0",
      "1357.0",
      "1359.0",
      "1361.0",
      "1363.0",
      "1365.0",
      "1367.0",
      "1369.0",
      "1371.0",
      "1373.0",
      "1375.0",
      "1377.0",
      "1379.0",
      "1381.0",
      "1383.0",
      "1385.0",
      "1387.0",
      "1389.0",
      "1391.0",
      "1393.0",
      "1395.0",
      "1397.0",
      "1399.0",
      "1401.0",
      "1403.0",
      "1405.0",
      "1407.0",
      "1409.0",
      "1411.0",
      "1413.0",
      "1415.0",
      "1417.0",
      "1419.0",
      "1421.0",
      "1423.0",
      "1425.0",
      "1427.0",
      "1429.0",
      "1431.0",
      "1433.0",
      "1435.0",
      "1437.0",
      "1439.0",
      "1441.0",
      "1443.0",
      "1445.0",
      "1447.0",
      "1449.0",
      "1451.0",
      "1453.0",
      "1455.0",
      "1457.0",
      "1459.0",
      "1461.0",
      "1463.0",
      "1465.0",
      "1467.0",
      "1469.0",
      "1471.0",
      "1473.0",
      "1475.0",
      "1477.0",
      "1479.0",
      "1481.0",
      "1483.0",
      "1485.0",
      "1487.0",
      "1489.0",
      "1491.0",
      "1493.0",
      "1495.0",
      "1497.0",
      "1499.0",
      "1501.0",
      "1503.0",
      "1505.0",
      "1507.0",
      "1509.0",
      "1511.0",
      "1513.0",
      "1515.0",
      "1517.0",
      "1519.0",
      "1521.0",
      "1523.0",
      "1525.0",
      "1527.0",
      "1529.0",
      "1531.0",
      "1533.0",
      "1535.0",
      "1537.0",
      "1539.0",
      "1541.0",
      "1543.0",
      "1545.0",
      "1547.0",
      "1549.0",
      "1551.0",
      "1553.0",
      "1555.0",
      "1557.0",
      "1559.0",
      "1561.0",
      "1563.0",
      "1565.0",
      "1567.0",
      "1569.0",
      "1571.0",
      "1573.0",
      "1575.0",
      "1577.0",
      "1579.0",
      "1581.0",
      "1583.0",
      "1585.0",
      "1587.0",
      "1589.0",
      "1591.0",
      "1593.0",
      "1595.0",
      "1597.0",
      "1599.0",
      "1601.0",
      "1603.0",
      "1605.0",
      "1607.0",
      "1609.0",
      "1611.0",
      "1613.0",
      "1615.0",
      "1617.0",
      "1619.0",
      "1621.0",
      "1623.0",
      "1625.0",
      "1627.0",
      "1629.0",
      "1631.0",
      "1633.0",
      "1635.0",
      "1637.0",
      "1639.0",
      "1641.0",
      "1643.0",
      "1645.0",
      "1647.0",
      "1649.0",
      "1651.0",
      "1653.0",
      "1655.0",
      "1657.0",
      "1659.0",
      "1661.0",
      "1663.0",
      "1665.0",
      "1667.0",
      "1669.0",
      "1671.0",
      "1673.0",
      "1675.0",
      "1677.0",
      "1679.0",
      "1681.0",
      "1683.0",
      "1685.0",
      "1687.0",
      "1689.0",
      "1691.0",
      "1693.0",
      "1695.0",
      "1697.0",
      "1699.0",
      "1701.0",
      "1703.0",
      "1705.0",
      "1707.0",
      "1709.0",
      "1711.0",
      "1713.0",
      "1715.0",
      "1717.0",
      "1719.0",
      "1721.0",
      "1723.0",
      "1725.0",
      "1727.0",
      "1729.0",
      "1731.0",
      "1733.0",
      "1735.0",
      "1737.0",
      "1739.0",
      "1741.0",
      "1743.0",
      "1745.0",
      "1747.0",
      "1749.0",
      "1751.0",
      "1753.0",
      "1755.0",
      "1757.0",
      "1759.0",
      "1761.0",
      "1763.0",
      "1765.0",
      "1767.0",
      "1769.0",
      "1771.0",
      "1773.0",
      "1775.0",
      "1777.0",
      "1779.0",
      "1781.0",
      "1783.0",
      "1785.0",
      "1787.0",
      "1789.0",
      "1791.0",
      "1793.0",
      "1795.0",
      "1797.0",
      "1799.0",
      "1801.0",
      "1803.0",
      "1805.0",
      "1807.0",
      "1809.0",
      "1811.0",
      "1813.0",
      "1815.0",
      "1817.0",
      "1819.0",
      "1821.0",
      "1823.0",
      "1825.0",
      "1827.0",
      "1829.0",
      "1831.0",
      "1833.0",
      "1835.0",
      "1837.0",
      "1839.0",
      "1841.0",
      "1843.0",
      "1845.0",
      "1847.0",
      "1849.0",
      "1851.0",
      "1853.0",
      "1855.0",
      "1857.0",
      "1859.0",
      "1861.0",
      "1863.0",
      "1865.0",
      "1867.0",
      "1869.0",
      "1871.0",
      "1873.0",
      "1875.0",
      "1877.0",
      "1879.0",
      "1881.0",
      "1883.0",
      "1885.0",
      "1887.0",
      "1889.0",
      "1891.0",
      "1893.0",
      "1895.0",
      "1897.0",
      "1899.0",
      "1901.0",
      "1903.0",
      "1905.0",
      "1907.0",
      "1909.0",
      "1911.0",
      "1913.0",
      "1915.0",
      "1917.0",
      "1919.0",
      "1921.0",
      "1923.0",
      "1925.0",
      "1927.0",
      "1929.0",
      "1931.0",
      "1933.0",
      "1935.0",
      "1937.0",
      "1939.0",
      "1941.0",
      "1943.0",
      "1945.0",
      "1947.0",
      "1949.0",
      "1951.0",
      "1953.0",
      "1955.0",
      "1957.0",
      "1959.0",
      "1961.0",
      "1963.0",
      "1965.0",
      "1967.0",
      "1969.0",
      "1971.0",
      "1973.0",
      "1975.0",
      "1977.0",
      "1979.0",
      "1981.0",
      "1983.0",
      "1985.0",
      "1987.0",
      "1989.0",
      "1991.0",
      "1993.0",
      "1995.0",
      "1997.0",
      "1999.0",
      "2001.0",
      "2003.0"
    ],
    "annotated_answers": [
      "4005.0"
    ],
    "solution": "n = 2003\ni = 1\nwhile i <= n:\n    print(i)\n    i = i + 2"
  },
  {
    "example_id": 65,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve\nc = solve(4*x**7 + x**5 + 3*x**2 - 2*x + c, x)[0]\nprint(c)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pints_per_mile = 1.5\ntotal_pints = pints_per_mile * 10 + pints_per_mile * 3\nprint(total_pints)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.5000000000000009"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import sqrt\n\na = 2 * sqrt(2)\nb = sqrt(2)\n\nprint(a / b + b / a - a * b)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-20.8"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "t = (-16 * 26) / 20\nprint(t)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.999500998003992",
      "-0.500249625561658",
      "0.866169477209129",
      "0.999500998003992",
      "-0.500249625561658",
      "0.866169477209129"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nroots = solve((2003/2004*x + 1 + 1/x), x)\nprint(sum(1/r for r in roots))"
  },
  {
    "example_id": 70,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.4"
    ],
    "solution": "from math import floor\nx = 27 / floor(27)\nprint(x)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n = (55 + 1) / 2\nprint(n)"
  },
  {
    "example_id": 72,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "4.0",
      "233.0",
      "4.0",
      "1.0",
      "4.0",
      "233.0",
      "4.0"
    ],
    "annotated_answers": [
      "0.5"
    ],
    "solution": "# brute force\nx_list = list(range(-100, 101))\nresult = 0\nfor x in x_list:\n    if (2*x+5)*(x-3) == 14:\n        result += x\nprint(result)\n\n# using sympy\nimport sympy as sp\nx = sp.Symbol('x')\neq = (2*x+5)*(x-3) - 14\nsolve_eq = sp.solve(eq, x)\nprint(solve_eq)"
  },
  {
    "example_id": 73,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "# Find the constant a\n# using the following equation\n# (2x^2 + ax + 7)(x^2 - 3x + 4) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation\n# (x^2 - 3x + 4)(2x^2 + ax + 7) = 2x^4 - 11x^3 + 30x^2 - 41x + 28\n# using the following equation"
  },
  {
    "example_id": 74,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "6.0",
      "2.0",
      "2.0",
      "6.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsolutions = sympy.solve(2*x**2+4*x-1, x)\nsquares = [solution**2 for solution in solutions]\nprint(sum(squares))"
  },
  {
    "example_id": 75,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import numpy as np\n\n# calculate the distance between the two points\ndistance = np.sqrt((-3-2)**2 + (7-(-5))**2)\nprint(distance)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# number of cents charged for each extra hour\nannual_fee = 26 - 10\nprint(annual_fee)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "73.5"
    ],
    "solution": "j = 42\nk = 56\n\nj_32 = 42 * (32 / 56)\nprint(j_32)"
  },
  {
    "example_id": 78,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "x = 5**2 + 18\nprint(x)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2011.0"
    ],
    "annotated_answers": [
      "2015.0"
    ],
    "solution": "b = 2011\nwhile True:\n    x = b - (b+1)//2\n    if x >= 1:\n        break\n    b += 1\nprint(b)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "350.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "print(113+276-13-26)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "625.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "width = 100 / 4\nprint(width**2)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "4.0",
      "2.0",
      "2.0",
      "5.0",
      "2.0",
      "10.0",
      "12.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\n\neq1 = 2**x - 2\neq2 = 5*2**x + 10\neq3 = 3*4**x + 12\n\neq12 = eq1*eq2\neq3_expanded = eq3.expand()\n\nsol = eq12 - eq3_expanded\nsol.simplify()\nprint(sol)"
  },
  {
    "example_id": 83,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "1024.0",
      "4.0",
      "5.0",
      "2.0",
      "1024.0",
      "2.0",
      "5.0",
      "2.0",
      "1024.0",
      "2.0",
      "5.0",
      "2.0",
      "1024.0",
      "4.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nexpr = (2**(x+1))**3 * 4**x\nprint(sp.solve(expr - 8192))"
  },
  {
    "example_id": 84,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import sympy as sp\nx = sp.symbols('x')\n\na, b = sp.symbols('a b', real=True)\n\na_b = a ** 2 + 2 * a * b + b ** 2\n\nb_x = 2 * x\n\neq1 = a_b - b_x\n\nsol = sp.solve(eq1, x)\nprint(sol)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Find the degree of f\ndegree_f = 6\n# Find the degree of g\ndegree_g = 3\n# Find the degree of h\ndegree_h = 36 - (degree_f + degree_g)\nprint(degree_h)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "def f(x):\n    return x - 7\n\ndef g(x):\n    return 7 - x\n\ndef h(x):\n    return f(g(x))\n\nprint(h(15))"
  },
  {
    "example_id": 87,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\ndef f(n):\n    if n >= 4:\n        return math.floor(n)\n    else:\n        return math.ceil(n)\n\nprint(f(math.pi / 3) + f(math.sqrt(45)) + f(8 ** (2 / 3)))"
  },
  {
    "example_id": 88,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2000000000000028"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "x = (7+2)/5\ny = (7+2)/3\nprint(24*x-14*y)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\nfrom sympy.solvers import solve\nfrom sympy import S\n\ndef vertical_asymptote(function, x_0):\n    return function.subs(x, x_0).simplify()\n\ndef solve_vertical_asymptote(function):\n    return solve(function.diff(x).subs(x, 0) == 0, x)\n\ndef has_vertical_asymptote(function):\n    return len(solve_vertical_asymptote(function)) > 0\n\ndef main():\n    function = x/(x**2 + 7*x - 30)\n    print(has_vertical_asymptote(function))\n    print(solve_vertical_asymptote(function))\n    print(vertical_asymptote(function, 2))\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 90,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "water_volume = 600 / 8\nprint(water_volume)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(531**2 - 2*531*530 + 530**2)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x', positive=True)\nprint(x**(-1) > x)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "treeks_per_squig = 1 / 3\ntreeks_per_goolee = 2 / 3\ntotal_treeks = treeks_per_squig + treeks_per_goolee\nprint(total_treeks)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# The ratio of two numbers is 3:5\n# The ratio after subtracting 4 from the lesser number and adding 8 to the larger number is 2:7\n\n# The lesser number is 3, the greater number is 5\n# If we subtract 4 from 3 and add 8 to 5, the new ratio is 2:7\n\n# We need to find the greater number before 8 is added to it\nlesser_number = 3\ngreater_number = 5\n\n# Subtract 4 from the lesser number\nlesser_number -= 4\n\n# Add 8 to the greater number\ngreater_number += 8\n\n# The greater number before 8 is added is greater_number\nprint(greater_number)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "25.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nh = sympy.sqrt(25-x**2) + sympy.sqrt(-(x-2))\nprint(h.expand().simplify())"
  },
  {
    "example_id": 96,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "187.5"
    ],
    "annotated_answers": [
      "187.5"
    ],
    "solution": "bottle_calories = 125 * 12 / 8\nprint(bottle_calories)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "k = 6\nprint(k)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(2 * (-2) ** 2 + 3 * (-2) + 4)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "import sympy\n\na = sympy.Symbol('a')\nb = sympy.Symbol('b')\n\ne1 = sympy.Eq(2**a, 32)\ne2 = sympy.Eq(a**b, 125)\n\nsolution = sympy.solve((e1, e2), (a, b))\nprint(solution)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import numpy as np\n\ndef book_sold_per_month(p):\n    return 120 - 3 * p\n\np_star = np.argmax(book_sold_per_month(np.arange(41)))\nprint(p_star)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\na = sympy.solvers.solve(x**2 + 8*x + 4, x)[0]\nprint(a)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.030788046451576"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "r = (66200 / 20000) ** (1/3) - 1\nprint(r * 100)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "print((34-10)+(20-9)+(55-10))"
  },
  {
    "example_id": 104,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "700.0"
    ],
    "annotated_answers": [
      "700.0"
    ],
    "solution": "print(32**2 - 18**2)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(int(pow(3/2, 2) + pow(pow(3/2, 2), 2)))"
  },
  {
    "example_id": 106,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0",
      "15.0",
      "15.0",
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "for i in range(1, 20):\n    for j in range(1, 20):\n        if (i * j - (i + j)) == 39:\n            print(i + j)"
  },
  {
    "example_id": 107,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def F(a, b, c, d):\n    return a ** b + c * d\n\nb = F(6, 2, 4, 3)\nprint(b)"
  },
  {
    "example_id": 108,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def f(n):\n    if n > 1:\n        return n ** 3 + 2 * n - 1\n    else:\n        return n - 1\n\nprint(f(0) + f(1) + f(2))"
  },
  {
    "example_id": 109,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\n\ndef f(x):\n    if x < 0:\n        return -x**2 - 1\n    elif 0 <= x < 4:\n        return 2\n    else:\n        return sqrt(x)\n\nprint(f(pi))"
  },
  {
    "example_id": 110,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x1 = 0\nx2 = 0\nx3 = 0\nS = 0\n\nx1 = x2 + x3\nx2 = x1 + x3\nx3 = x1 + x2\n\nS = x1 + x2 + x3\nS = 3 * x1\n\nS2 = S**2\nprint(S2)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-33.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "from sympy import solve, symbols\nx = symbols(\"x\")\nsoln = solve(x**2 - 6*x + 2 - 29, x)\na, b = soln\nprint(2*a - 3*b)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0",
      "22.0",
      "24.0",
      "26.0",
      "28.0",
      "30.0",
      "32.0",
      "34.0",
      "36.0",
      "38.0",
      "40.0",
      "42.0",
      "44.0",
      "46.0",
      "48.0",
      "50.0",
      "52.0",
      "54.0",
      "56.0",
      "58.0",
      "60.0",
      "62.0",
      "64.0",
      "66.0",
      "68.0",
      "70.0",
      "72.0",
      "74.0",
      "76.0",
      "78.0",
      "80.0",
      "82.0",
      "84.0",
      "86.0",
      "88.0",
      "90.0",
      "92.0",
      "94.0",
      "96.0",
      "98.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import sqrt\ndef has_integer_solutions(a):\n    delta = a * a + 20\n    return delta % 4 == 0\nfor a in range(1, 100):\n    if has_integer_solutions(a):\n        print(a)"
  },
  {
    "example_id": 113,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = 5 + 8\nprint(x/x)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from math import sin, pi\n\ndef f(x):\n    return -6 * sin(x * pi / 6)\n\nprint(f(f(-1)))"
  },
  {
    "example_id": 115,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\nc = sympy.Symbol('c')\nf = sympy.Function('f')\nx = sympy.Symbol('x')\nexpr = 2*x**2 + x + 5\nexpr = expr / (x**2 + 4*x + c)\nexpr.simplify()\nprint(expr)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "c = 1\nprint(c)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 30**2 / (5*10*18)\nprint(x)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return x**2 + 12\n\ndef f_3m(m):\n    return 3*f(m)\n\ndef f_m(m):\n    return f(3*m)\n\ndef solve_for_m():\n    # m > 0\n    m = 1\n    while f_3m(m)!= f_m(m):\n        m += 1\n    return m\n\nprint(solve_for_m())"
  },
  {
    "example_id": 119,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = (-50 + 2*10) / 2\nprint(x)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx = sympy.log(2**8, 4)\nprint(x)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "y = 8 - 5*(-2) + 4*(-2)**2\nprint(y)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "print(2-abs(2))"
  },
  {
    "example_id": 123,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import numpy as np\n\n# Calculate the slope of the line\nslope = (19 - 9) / (7 - 9)\n\n# Calculate the value of k\nk = slope * 0 + 19\n\nprint(k)"
  },
  {
    "example_id": 124,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1363.0"
    ],
    "annotated_answers": [
      "74726.0"
    ],
    "solution": "import numpy as np\n\np = 6/100\nx = 100000\nx0 = 1000\n\nx1 = np.round(x0 / (1 - p)**5)\n\nprint(x1)"
  },
  {
    "example_id": 125,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.724744871391589"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = (5+6**0.5) / 2\nprint(x)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import log\nprint(log(1, 2))"
  },
  {
    "example_id": 127,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "N = 3\nprint(N)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "85.0",
      "7.0",
      "34.0",
      "5.0"
    ],
    "annotated_answers": [
      "93.0"
    ],
    "solution": "from sympy import sqrt\nA = 6\nB = sqrt(245) + 3*sqrt(125) + 4*sqrt(45)\nC = 1\nprint(A/B/C)\nprint(A+B+C)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Use the distributive property\n# u^2 - u - 1 = (u - 1)(u + 1)\n# u^2 + 7u - 4 = (u + 1)(u + 6)\n\n# Combine like terms\n# u^2 - u - 1 + u^2 + 7u - 4 = (u - 1)(u + 1) + (u + 1)(u + 6)\n# 2u^2 + 7u - 5 = (u - 1)(u + 1 + 6)\n\n# Combine like terms\n# 2u^2 + 7u - 5 = 2(u^2 + 3u - 2)\n# 2u^2 + 7u - 5 = 2u^2 + 6u - 2\n# u^2 + 3u - 2 = u^2 + 6u - 2\n# u^2 + 3u - 2 = u^2 + 6u - 2\n\n# Combine like terms\n# u^2 + 3u - 2 = u^2 + 6u - 2\n# u^2 + 3u - 2 = u^2 + 6u - 2\n# u^2 + 3u - 2 = u^2 + 6u - 2\n\n# Combine like terms\n# u^2 + 3u - 2 = u^2 + 6u - 2\n# u^2 + 3u - 2 = u^2 + 6u - 2\n# u^2 + 3u - 2 = u^2 + 6u - 2"
  },
  {
    "example_id": 130,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "13.5"
    ],
    "solution": "absolute_difference = abs(18*A - 18*B)\nprint(round(absolute_difference, 1))"
  },
  {
    "example_id": 131,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "f = lambda x: (4 - x) / 2\ng = lambda x: 2 * x - 4\nprint(f(g(1)) * g(f(1)))"
  },
  {
    "example_id": 132,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = -3\nb = 4\nsum_ab = a + b\nprint(sum_ab)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.20360331117452"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import math\n\na, b = 1, 2\nc, d = 3, 4\nm, n = (a + c) / 2, (b + d) / 2\n\na += 14\nb += 20\nc -= 2\nd -= 4\n\nm, n = (a + c) / 2, (b + d) / 2\n\nprint(math.sqrt((m - n) ** 2 + (b - d) ** 2))"
  },
  {
    "example_id": 134,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 20\nm = 2 * n\nprint(m)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "48.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\n\nexp = (x + 1) ** 48\n\nprint(sympy.simplify(exp))"
  },
  {
    "example_id": 136,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "f = lambda x: x + 1\ng = lambda x: x ** 2 + 3\nprint(f(g(2)))"
  },
  {
    "example_id": 137,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "print(round(3.6 ** 2) - round(3.6) ** 2)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "121.0"
    ],
    "solution": "from sympy import sqrt\nn = sqrt(400) - sqrt(81)\nprint(n)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "2.0",
      "14.0",
      "19.0",
      "7.0",
      "19.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "361.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nprint(49*x**2 + 14*x*(19-7*x) + (19-7*x)**2)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\n\na, b = sympy.symbols('a b')\neq1 = 5 * a + 2 * b\neq2 = a * b\n\nans = sympy.solve([eq1, eq2], [a, b])\nprint(ans)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def zeno_days(square_size):\n    days = 0\n    while square_size > 1:\n        square_size /= 2\n        days += 1\n    return days\nprint(zeno_days(15*15))"
  },
  {
    "example_id": 142,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\nx_cubed = x ** 3\nx_cubed - 2 * x + 1\nprint(x_cubed)"
  },
  {
    "example_id": 143,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "2.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import sqrt\n\n# Calculate a+b+c\na = 6\nb = 1\nc = 2\n\n# Calculate the value of the expression\nexpression = a + b/sqrt(c)\n\n# Calculate a+b\na_plus_b = a + b\n\n# Calculate a+b+c\na_plus_b_plus_c = a_plus_b + c\n\n# Check that a+b+c is equal to a+b/sqrt(c)\nprint(a_plus_b_plus_c)\nprint(expression)"
  },
  {
    "example_id": 144,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "abby_and_damon = 200 - 160\nprint(abby_and_damon)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = -5\ny = 3\nprint(x + y)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import sqrt\nA = 1 + sqrt(2)\nB = 2 + sqrt(3)\nC = 2 + sqrt(2)\nD = 3 + sqrt(3)\nprint((A * (1 + sqrt(B)) - (sqrt(C) + sqrt(D)))\n .simplify())"
  },
  {
    "example_id": 147,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a, b = 2*2a, 2b\nprint(a+b)"
  },
  {
    "example_id": 148,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "mnp = -1\nfor i in range(100):\n    for j in range(100):\n        if (i+j+mnp)**2 * (i*j+mnp*(i+j)) == 4:\n            mnp = i*j*mnp\n            break\n        if (i+j+mnp)**2 * (mnp*i+j*(i+j)) == 4:\n            mnp = i*j*mnp\n            break\n        if (i+j+mnp)**2 * (mnp*j+i*(i+j)) == 4:\n            mnp = i*j*mnp\n            break\n        if (i+j+mnp)**2 * (i*mnp+j*(i+j)) == 4:\n            mnp = i*j*mnp\n            break\nprint(mnp)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import I, im\n\nz = I\nfz = z**2\n\nz = 1\nfz = z + 2\n\nz = -1\nfz = z + 2\n\nz = -I\nfz = z**2\n\nprint(fz + fz + fz + fz)"
  },
  {
    "example_id": 150,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-114.0"
    ],
    "annotated_answers": [
      "-114.0"
    ],
    "solution": "print(sum(range(-30, 27)))"
  },
  {
    "example_id": 151,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import *\n\n# Calculate total number of tablespoons needed\nflour = 1.5\neggs = 2\nbutter = 3\nsugar = 3/4\nchocolate_drops = 1\ntotal_ingredients = flour + eggs + butter + sugar + chocolate_drops\n\n# Calculate total number of cookies needed\ntotal_cookies = 216\n\n# Calculate number of pans needed\npans = ceiling(total_cookies / total_ingredients)\n\n# Calculate number of sticks of butter needed\nsticks_of_butter = pans * 8\n\nprint(sticks_of_butter)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "9.0",
      "2.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "from sympy import *\nx, y = symbols('x y')\neq1 = (2*x + 3*y)**2 - 4\neq2 = x*y + 5\nsolve([eq1, eq2], [x, y])\nprint(4*x**2 + 9*y**2)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = [3, 4, 5, 6, 7, 8, 9, 10]\nfor i in x:\n    if i**2 - 10*i + 16 == 0:\n        print(i)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import symbols, solve\nx = symbols('x')\neq = (x+1)/(x**2-2*x+1)\nasymptotes = solve(eq.as_numer_denom()[0], x)\nprint(asymptotes)"
  },
  {
    "example_id": 155,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "def h(x):\n    return (x-0.5)*(x-2.5)*(x-6.5)*(x-7.5)/16 + x\n\ndef sum_of_all_integers_x_satisfying_hx_gt_x(xmin, xmax):\n    return sum(x for x in range(xmin, xmax+1) if h(x) > x)\n\nprint(sum_of_all_integers_x_satisfying_hx_gt_x(0, 8))"
  },
  {
    "example_id": 156,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x = 2\ny = 4 / (2 * x)\nprint(x + y)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "f = lambda x: 5*x+2\ng = lambda x: 3*x**2-4*x\nprint(f(f(1))-g(g(2)))"
  },
  {
    "example_id": 158,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = (13 + (-16) + 6) / 3\ny = 8 ** (1/3)\nprint(x**2 + y**3)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "5.0",
      "2.0",
      "1.0",
      "2.0",
      "3.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "-11.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\nprint(sympy.solve(x - 9/(x + 1) - 2))"
  },
  {
    "example_id": 160,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1710.0"
    ],
    "annotated_answers": [
      "1710.0"
    ],
    "solution": "total = sum(range(28, 87, 2))\nprint(total)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import numpy as np\n\ndef f(x, a):\n    return a * x ** 2 if x >= a else a * x + 2 * a\n\nx = np.linspace(0, 10, 100)\na = 2\n\nfor i in range(len(x)):\n    if f(x[i], a) > 0 and f(x[i], a) < 2 * a:\n        a = x[i]\n        break\n\nprint(a)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "g_degree = 8 - 4\nprint(g_degree)"
  },
  {
    "example_id": 163,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, Eq, solve\nx = Symbol('x')\nm = Symbol('m')\neq = Eq(3*x**2 - 4*x + 1, m*(x - 1))\nsolutions = solve(eq, x)\nprint(solutions)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\n\npoly = 3*(x - 4) + 2*(x**2 - x + 7) - 5*(x - 1)\nprint(simplify(poly))"
  },
  {
    "example_id": 165,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print((1+3)**3)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "voltage = 12\nresistance = 20\ncurrent = voltage / resistance\nprint(current)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import math\nprint(math.log(2 ** 12, 1 / 8))"
  },
  {
    "example_id": 168,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nprint(math.log(5**4, 5**2))"
  },
  {
    "example_id": 169,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import symbols\nfrom sympy.solvers import solve\nx = symbols('x')\nf = 4*x**3 + 1\nprint(solve(f - 33, x)[0])"
  },
  {
    "example_id": 170,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "12.0",
      "6.0",
      "5.0",
      "6.0",
      "25.0",
      "12.0",
      "6.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol, solve\nk = Symbol('k', real=True)\nx = Symbol('x', real=True)\neq1 = 3*x**2 + 5*x + k\neq2 = solve(eq1, x)\nprint(eq2)"
  },
  {
    "example_id": 171,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import Symbol\n\ni = Symbol('i', real=False)\nprint((2-2*i)*(5+5*i))"
  },
  {
    "example_id": 172,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "rows = 450 / 15\nprint(rows)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.5"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "def f(x):\n    return 2 * x + 1\n\ndef f_inv(x):\n    return (x - 4) / 2\n\nprint(f_inv(17))"
  },
  {
    "example_id": 174,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25992104989487",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "A, B = sympy.solve(\n    (5*x - 16)/(x**2 - 7*x + 10) - (A/x - 2 + B/x - 5),\n    (A + B)\n)\nprint(A + B)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\nwhile 2**(x+2)!= 32:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def P(x):\n    return 4*x**3 - 2*x**2 + 7*x - 1\ndef Q(x):\n    return P(x)**2\ndef y_intercept(f):\n    return f(0)\nprint(y_intercept(Q))"
  },
  {
    "example_id": 177,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "n = 5\nsum = 1 + 2 + 3 + 4 + 5\nprint(sum)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "# floor(52/3) = 16\n# ceil(16/5) = 3\n# ceil(3/23) = 1\nprint(1)"
  },
  {
    "example_id": 179,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = 5\nprint(x)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\neq = - (x + 1) ** 2 + 1\neq_shifted = eq.subs(x, x + 5).subs(y, y + 1)\nx_roots = sympy.solve(eq_shifted, x)\nb = x_roots[1]\na = x_roots[0]\nprint(b - a)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6785714285714286"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 1\nb = 0.9\nS = a/(1-b)\nb_S = b/(1-S)\nab = a+b\nb_ab = b+ab\nprint(ab/(b_ab))"
  },
  {
    "example_id": 182,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6666666666666667"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a1 = 1\na2 = 2\na3 = 3\na4 = 4\na5 = 5\n\nratio = a4 / a2\nprint(a5 / a3)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "978121.0"
    ],
    "annotated_answers": [
      "978121.0"
    ],
    "solution": "print(989 ** 2)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "c = 9"
  },
  {
    "example_id": 185,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "y_intercept = -6\nprint(y_intercept)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "9.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nc = Symbol('c')\n\nx = Symbol('x')\ny = Symbol('y')\n\neq = (x**2 + 8*x + y**2 + 4*y + c) - 3**2\n\nsol = solve(eq, c)\n\nprint(sol)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import log\na = int(log(2938, 8))\nb = int(log(2938, 8) + 1)\nprint(a+b)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "quarts = 2 / 0.25\nprint(quarts)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(f(g(2)))"
  },
  {
    "example_id": 190,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import symbols, solve\nx, k = symbols('x, k')\neq1 = 4*x**2 + 7*x + k\neq2 = 4*x**2 - 7*x + k\nroots = solve((eq1, eq2), (x, k))\nprint(roots)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = 2\nprint(m)"
  },
  {
    "example_id": 192,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "adina_shoe_size = 42 - 6\nprint(adina_shoe_size)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "775.3846153846154"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a = -60 / 13\nb = 3120 / 4\nprint(a + b)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import log\nprint(log(81, 3))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-34.224000000000004"
    ],
    "annotated_answers": [
      "0.43"
    ],
    "solution": "t = -4.9 * 2.4**2 - 3.5 * 2.4 + 2.4\nprint(t)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "print((4**3 + 2**3) - (3**3 + 1**3))"
  },
  {
    "example_id": 197,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2401.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "square_of_difference = (73 - 24) ** 2\nprint(square_of_difference)"
  },
  {
    "example_id": 198,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def D(a,b,c):\n    return a*b*c/(a+b+c)\nprint(D(2,4,6))"
  },
  {
    "example_id": 199,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8000.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "print((26**2 - 24**2 - 10)**2 - 10**2)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "x = 71\ny = 82\nprint(y - x)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0",
      "1.0",
      "6.0",
      "1.0",
      "7.0",
      "1.0",
      "8.0",
      "1.0",
      "9.0",
      "1.0",
      "10.0",
      "1.0",
      "11.0",
      "1.0",
      "12.0",
      "1.0",
      "13.0",
      "1.0",
      "14.0",
      "1.0",
      "15.0",
      "1.0",
      "16.0",
      "1.0",
      "17.0",
      "1.0",
      "18.0",
      "1.0",
      "19.0",
      "1.0",
      "20.0",
      "1.0",
      "21.0",
      "1.0",
      "22.0",
      "1.0",
      "23.0",
      "1.0",
      "24.0",
      "1.0",
      "25.0",
      "1.0",
      "26.0",
      "1.0",
      "27.0",
      "1.0",
      "28.0",
      "1.0",
      "29.0",
      "1.0",
      "30.0",
      "1.0",
      "31.0",
      "1.0",
      "32.0",
      "1.0",
      "33.0",
      "1.0",
      "34.0",
      "1.0",
      "35.0",
      "1.0",
      "36.0",
      "1.0",
      "37.0",
      "1.0",
      "38.0",
      "1.0",
      "39.0",
      "1.0",
      "40.0",
      "1.0",
      "41.0",
      "1.0",
      "42.0",
      "1.0",
      "43.0",
      "1.0",
      "44.0",
      "1.0",
      "45.0",
      "1.0",
      "46.0",
      "1.0",
      "47.0",
      "1.0",
      "48.0",
      "1.0",
      "49.0",
      "1.0",
      "50.0",
      "1.0",
      "51.0",
      "1.0",
      "52.0",
      "1.0",
      "53.0",
      "1.0",
      "54.0",
      "1.0",
      "55.0",
      "1.0",
      "56.0",
      "1.0",
      "57.0",
      "1.0",
      "58.0",
      "1.0",
      "59.0",
      "1.0",
      "60.0",
      "1.0",
      "61.0",
      "1.0",
      "62.0",
      "1.0",
      "63.0",
      "1.0",
      "64.0",
      "1.0",
      "65.0",
      "1.0",
      "66.0",
      "1.0",
      "67.0",
      "1.0",
      "68.0",
      "1.0",
      "69.0",
      "1.0",
      "70.0",
      "1.0",
      "71.0",
      "1.0",
      "72.0",
      "1.0",
      "73.0",
      "1.0",
      "74.0",
      "1.0",
      "75.0",
      "1.0",
      "76.0",
      "1.0",
      "77.0",
      "1.0",
      "78.0",
      "1.0",
      "79.0",
      "1.0",
      "80.0",
      "1.0",
      "81.0",
      "1.0",
      "82.0",
      "1.0",
      "83.0",
      "1.0",
      "84.0",
      "1.0",
      "85.0",
      "1.0",
      "86.0",
      "1.0",
      "87.0",
      "1.0",
      "88.0",
      "1.0",
      "89.0",
      "1.0",
      "90.0",
      "1.0",
      "91.0",
      "1.0",
      "92.0",
      "1.0",
      "93.0",
      "1.0",
      "94.0",
      "1.0",
      "95.0",
      "1.0",
      "96.0",
      "1.0",
      "97.0",
      "1.0",
      "98.0",
      "1.0",
      "99.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "4.0",
      "2.0",
      "5.0",
      "2.0",
      "6.0",
      "2.0",
      "7.0",
      "2.0",
      "8.0",
      "2.0",
      "9.0",
      "2.0",
      "10.0",
      "2.0",
      "11.0",
      "2.0",
      "12.0",
      "2.0",
      "13.0",
      "2.0",
      "14.0",
      "2.0",
      "15.0",
      "2.0",
      "16.0",
      "2.0",
      "17.0",
      "2.0",
      "18.0",
      "2.0",
      "19.0",
      "2.0",
      "20.0",
      "2.0",
      "21.0",
      "2.0",
      "22.0",
      "2.0",
      "23.0",
      "2.0",
      "24.0",
      "2.0",
      "25.0",
      "2.0",
      "26.0",
      "2.0",
      "27.0",
      "2.0",
      "28.0",
      "2.0",
      "29.0",
      "2.0",
      "30.0",
      "2.0",
      "31.0",
      "2.0",
      "32.0",
      "2.0",
      "33.0",
      "2.0",
      "34.0",
      "2.0",
      "35.0",
      "2.0",
      "36.0",
      "2.0",
      "37.0",
      "2.0",
      "38.0",
      "2.0",
      "39.0",
      "2.0",
      "40.0",
      "2.0",
      "41.0",
      "2.0",
      "42.0",
      "2.0",
      "43.0",
      "2.0",
      "44.0",
      "2.0",
      "45.0",
      "2.0",
      "46.0",
      "2.0",
      "47.0",
      "2.0",
      "48.0",
      "2.0",
      "49.0",
      "2.0",
      "50.0",
      "2.0",
      "51.0",
      "2.0",
      "52.0",
      "2.0",
      "53.0",
      "2.0",
      "54.0",
      "2.0",
      "55.0",
      "2.0",
      "56.0",
      "2.0",
      "57.0",
      "2.0",
      "58.0",
      "2.0",
      "59.0",
      "2.0",
      "60.0",
      "2.0",
      "61.0",
      "2.0",
      "62.0",
      "2.0",
      "63.0",
      "2.0",
      "64.0",
      "2.0",
      "65.0",
      "2.0",
      "66.0",
      "2.0",
      "67.0",
      "2.0",
      "68.0",
      "2.0",
      "69.0",
      "2.0",
      "70.0",
      "2.0",
      "71.0",
      "2.0",
      "72.0",
      "2.0",
      "73.0",
      "2.0",
      "74.0",
      "2.0",
      "75.0",
      "2.0",
      "76.0",
      "2.0",
      "77.0",
      "2.0",
      "78.0",
      "2.0",
      "79.0",
      "2.0",
      "80.0",
      "2.0",
      "81.0",
      "2.0",
      "82.0",
      "2.0",
      "83.0",
      "2.0",
      "84.0",
      "2.0",
      "85.0",
      "2.0",
      "86.0",
      "2.0",
      "87.0",
      "2.0",
      "88.0",
      "2.0",
      "89.0",
      "2.0",
      "90.0",
      "2.0",
      "91.0",
      "2.0",
      "92.0",
      "2.0",
      "93.0",
      "2.0",
      "94.0",
      "2.0",
      "95.0",
      "2.0",
      "96.0",
      "2.0",
      "97.0",
      "2.0",
      "98.0",
      "2.0",
      "99.0",
      "3.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "4.0",
      "3.0",
      "5.0",
      "3.0",
      "6.0",
      "3.0",
      "7.0",
      "3.0",
      "8.0",
      "3.0",
      "9.0",
      "3.0",
      "10.0",
      "3.0",
      "11.0",
      "3.0",
      "12.0",
      "3.0",
      "13.0",
      "3.0",
      "14.0",
      "3.0",
      "15.0",
      "3.0",
      "16.0",
      "3.0",
      "17.0",
      "3.0",
      "18.0",
      "3.0",
      "19.0",
      "3.0",
      "20.0",
      "3.0",
      "21.0",
      "3.0",
      "22.0",
      "3.0",
      "23.0",
      "3.0",
      "24.0",
      "3.0",
      "25.0",
      "3.0",
      "26.0",
      "3.0",
      "27.0",
      "3.0",
      "28.0",
      "3.0",
      "29.0",
      "3.0",
      "30.0",
      "3.0",
      "31.0",
      "3.0",
      "32.0",
      "3.0",
      "33.0",
      "3.0",
      "34.0",
      "3.0",
      "35.0",
      "3.0",
      "36.0",
      "3.0",
      "37.0",
      "3.0",
      "38.0",
      "3.0",
      "39.0",
      "3.0",
      "40.0",
      "3.0",
      "41.0",
      "3.0",
      "42.0",
      "3.0",
      "43.0",
      "3.0",
      "44.0",
      "3.0",
      "45.0",
      "3.0",
      "46.0",
      "3.0",
      "47.0",
      "3.0",
      "48.0",
      "3.0",
      "49.0",
      "3.0",
      "50.0",
      "3.0",
      "51.0",
      "3.0",
      "52.0",
      "3.0",
      "53.0",
      "3.0",
      "54.0",
      "3.0",
      "55.0",
      "3.0",
      "56.0",
      "3.0",
      "57.0",
      "3.0",
      "58.0",
      "3.0",
      "59.0",
      "3.0",
      "60.0",
      "3.0",
      "61.0",
      "3.0",
      "62.0",
      "3.0",
      "63.0",
      "3.0",
      "64.0",
      "3.0",
      "65.0",
      "3.0",
      "66.0",
      "3.0",
      "67.0",
      "3.0",
      "68.0",
      "3.0",
      "69.0",
      "3.0",
      "70.0",
      "3.0",
      "71.0",
      "3.0",
      "72.0",
      "3.0",
      "73.0",
      "3.0",
      "74.0",
      "3.0",
      "75.0",
      "3.0",
      "76.0",
      "3.0",
      "77.0",
      "3.0",
      "78.0",
      "3.0",
      "79.0",
      "3.0",
      "80.0",
      "3.0",
      "81.0",
      "3.0",
      "82.0",
      "3.0",
      "83.0",
      "3.0",
      "84.0",
      "3.0",
      "85.0",
      "3.0",
      "86.0",
      "3.0",
      "87.0",
      "3.0",
      "88.0",
      "3.0",
      "89.0",
      "3.0",
      "90.0",
      "3.0",
      "91.0",
      "3.0",
      "92.0",
      "3.0",
      "93.0",
      "3.0",
      "94.0",
      "3.0",
      "95.0",
      "3.0",
      "96.0",
      "3.0",
      "97.0",
      "3.0",
      "98.0",
      "3.0",
      "99.0",
      "4.0",
      "1.0",
      "4.0",
      "2.0",
      "4.0",
      "3.0",
      "4.0",
      "4.0",
      "4.0",
      "5.0",
      "4.0",
      "6.0",
      "4.0",
      "7.0",
      "4.0",
      "8.0",
      "4.0",
      "9.0",
      "4.0",
      "10.0",
      "4.0",
      "11.0",
      "4.0",
      "12.0",
      "4.0",
      "13.0",
      "4.0",
      "14.0",
      "4.0",
      "15.0",
      "4.0",
      "16.0",
      "4.0",
      "17.0",
      "4.0",
      "18.0",
      "4.0",
      "19.0",
      "4.0",
      "20.0",
      "4.0",
      "21.0",
      "4.0",
      "22.0",
      "4.0",
      "23.0",
      "4.0",
      "24.0",
      "4.0",
      "25.0",
      "4.0",
      "26.0",
      "4.0",
      "27.0",
      "4.0",
      "28.0",
      "4.0",
      "29.0",
      "4.0",
      "30.0",
      "4.0",
      "31.0",
      "4.0",
      "32.0",
      "4.0",
      "33.0",
      "4.0",
      "34.0",
      "4.0",
      "35.0",
      "4.0",
      "36.0",
      "4.0",
      "37.0",
      "4.0",
      "38.0",
      "4.0",
      "39.0",
      "4.0",
      "40.0",
      "4.0",
      "41.0",
      "4.0",
      "42.0",
      "4.0",
      "43.0",
      "4.0",
      "44.0",
      "4.0",
      "45.0",
      "4.0",
      "46.0",
      "4.0",
      "47.0",
      "4.0",
      "48.0",
      "4.0",
      "49.0",
      "4.0",
      "50.0",
      "4.0",
      "51.0",
      "4.0",
      "52.0",
      "4.0",
      "53.0",
      "4.0",
      "54.0",
      "4.0",
      "55.0",
      "4.0",
      "56.0",
      "4.0",
      "57.0",
      "4.0",
      "58.0",
      "4.0",
      "59.0",
      "4.0",
      "60.0",
      "4.0",
      "61.0",
      "4.0",
      "62.0",
      "4.0",
      "63.0",
      "4.0",
      "64.0",
      "4.0",
      "65.0",
      "4.0",
      "66.0",
      "4.0",
      "67.0",
      "4.0",
      "68.0",
      "4.0",
      "69.0",
      "4.0",
      "70.0",
      "4.0",
      "71.0",
      "4.0",
      "72.0",
      "4.0",
      "73.0",
      "4.0",
      "74.0",
      "4.0",
      "75.0",
      "4.0",
      "76.0",
      "4.0",
      "77.0",
      "4.0",
      "78.0",
      "4.0",
      "79.0",
      "4.0",
      "80.0",
      "4.0",
      "81.0",
      "4.0",
      "82.0",
      "4.0",
      "83.0",
      "4.0",
      "84.0",
      "4.0",
      "85.0",
      "4.0",
      "86.0",
      "4.0",
      "87.0",
      "4.0",
      "88.0",
      "4.0",
      "89.0",
      "4.0",
      "90.0",
      "4.0",
      "91.0",
      "4.0",
      "92.0",
      "4.0",
      "93.0",
      "4.0",
      "94.0",
      "4.0",
      "95.0",
      "4.0",
      "96.0",
      "4.0",
      "97.0",
      "4.0",
      "98.0",
      "4.0",
      "99.0",
      "5.0",
      "1.0",
      "5.0",
      "2.0",
      "5.0",
      "3.0",
      "5.0",
      "4.0",
      "5.0",
      "5.0",
      "5.0",
      "6.0",
      "5.0",
      "7.0",
      "5.0",
      "8.0",
      "5.0",
      "9.0",
      "5.0",
      "10.0",
      "5.0",
      "11.0",
      "5.0",
      "12.0",
      "5.0",
      "13.0",
      "5.0",
      "14.0",
      "5.0",
      "15.0",
      "5.0",
      "16.0",
      "5.0",
      "17.0",
      "5.0",
      "18.0",
      "5.0",
      "19.0",
      "5.0",
      "20.0",
      "5.0",
      "21.0",
      "5.0",
      "22.0",
      "5.0",
      "23.0",
      "5.0",
      "24.0",
      "5.0",
      "25.0",
      "5.0",
      "26.0",
      "5.0",
      "27.0",
      "5.0",
      "28.0",
      "5.0",
      "29.0",
      "5.0",
      "30.0",
      "5.0",
      "31.0",
      "5.0",
      "32.0",
      "5.0",
      "33.0",
      "5.0",
      "34.0",
      "5.0",
      "35.0",
      "5.0",
      "36.0",
      "5.0",
      "37.0",
      "5.0",
      "38.0",
      "5.0",
      "39.0",
      "5.0",
      "40.0",
      "5.0",
      "41.0",
      "5.0",
      "42.0",
      "5.0",
      "43.0",
      "5.0",
      "44.0",
      "5.0",
      "45.0",
      "5.0",
      "46.0",
      "5.0",
      "47.0",
      "5.0",
      "48.0",
      "5.0",
      "49.0",
      "5.0",
      "50.0",
      "5.0",
      "51.0",
      "5.0",
      "52.0",
      "5.0",
      "53.0",
      "5.0",
      "54.0",
      "5.0",
      "55.0",
      "5.0",
      "56.0",
      "5.0",
      "57.0",
      "5.0",
      "58.0",
      "5.0",
      "59.0",
      "5.0",
      "60.0",
      "5.0",
      "61.0",
      "5.0",
      "62.0",
      "5.0",
      "63.0",
      "5.0",
      "64.0",
      "5.0",
      "65.0",
      "5.0",
      "66.0",
      "5.0",
      "67.0",
      "5.0",
      "68.0",
      "5.0",
      "69.0",
      "5.0",
      "70.0",
      "5.0",
      "71.0",
      "5.0",
      "72.0",
      "5.0",
      "73.0",
      "5.0",
      "74.0",
      "5.0",
      "75.0",
      "5.0",
      "76.0",
      "5.0",
      "77.0",
      "5.0",
      "78.0",
      "5.0",
      "79.0",
      "5.0",
      "80.0",
      "5.0",
      "81.0",
      "5.0",
      "82.0",
      "5.0",
      "83.0",
      "5.0",
      "84.0",
      "5.0",
      "85.0",
      "5.0",
      "86.0",
      "5.0",
      "87.0",
      "5.0",
      "88.0",
      "5.0",
      "89.0",
      "5.0",
      "90.0",
      "5.0",
      "91.0",
      "5.0",
      "92.0",
      "5.0",
      "93.0",
      "5.0",
      "94.0",
      "5.0",
      "95.0",
      "5.0",
      "96.0",
      "5.0",
      "97.0",
      "5.0",
      "98.0",
      "5.0",
      "99.0",
      "6.0",
      "1.0",
      "6.0",
      "2.0",
      "6.0",
      "3.0",
      "6.0",
      "4.0",
      "6.0",
      "5.0",
      "6.0",
      "6.0",
      "6.0",
      "7.0",
      "6.0",
      "8.0",
      "6.0",
      "9.0",
      "6.0",
      "10.0",
      "6.0",
      "11.0",
      "6.0",
      "12.0",
      "6.0",
      "13.0",
      "6.0",
      "14.0",
      "6.0",
      "15.0",
      "6.0",
      "16.0",
      "6.0",
      "17.0",
      "6.0",
      "18.0",
      "6.0",
      "19.0",
      "6.0",
      "20.0",
      "6.0",
      "21.0",
      "6.0",
      "22.0",
      "6.0",
      "23.0",
      "6.0",
      "24.0",
      "6.0",
      "25.0",
      "6.0",
      "26.0",
      "6.0",
      "27.0",
      "6.0",
      "28.0",
      "6.0",
      "29.0",
      "6.0",
      "30.0",
      "6.0",
      "31.0",
      "6.0",
      "32.0",
      "6.0",
      "33.0",
      "6.0",
      "34.0",
      "6.0",
      "35.0",
      "6.0",
      "36.0",
      "6.0",
      "37.0",
      "6.0",
      "38.0",
      "6.0",
      "39.0",
      "6.0",
      "40.0",
      "6.0",
      "41.0",
      "6.0",
      "42.0",
      "6.0",
      "43.0",
      "6.0",
      "44.0",
      "6.0",
      "45.0",
      "6.0",
      "46.0",
      "6.0",
      "47.0",
      "6.0",
      "48.0",
      "6.0",
      "49.0",
      "6.0",
      "50.0",
      "6.0",
      "51.0",
      "6.0",
      "52.0",
      "6.0",
      "53.0",
      "6.0",
      "54.0",
      "6.0",
      "55.0",
      "6.0",
      "56.0",
      "6.0",
      "57.0",
      "6.0",
      "58.0",
      "6.0",
      "59.0",
      "6.0",
      "60.0",
      "6.0",
      "61.0",
      "6.0",
      "62.0",
      "6.0",
      "63.0",
      "6.0",
      "64.0",
      "6.0",
      "65.0",
      "6.0",
      "66.0",
      "6.0",
      "67.0",
      "6.0",
      "68.0",
      "6.0",
      "69.0",
      "6.0",
      "70.0",
      "6.0",
      "71.0",
      "6.0",
      "72.0",
      "6.0",
      "73.0",
      "6.0",
      "74.0",
      "6.0",
      "75.0",
      "6.0",
      "76.0",
      "6.0",
      "77.0",
      "6.0",
      "78.0",
      "6.0",
      "79.0",
      "6.0",
      "80.0",
      "6.0",
      "81.0",
      "6.0",
      "82.0",
      "6.0",
      "83.0",
      "6.0",
      "84.0",
      "6.0",
      "85.0",
      "6.0",
      "86.0",
      "6.0",
      "87.0",
      "6.0",
      "88.0",
      "6.0",
      "89.0",
      "6.0",
      "90.0",
      "6.0",
      "91.0",
      "6.0",
      "92.0",
      "6.0",
      "93.0",
      "6.0",
      "94.0",
      "6.0",
      "95.0",
      "6.0",
      "96.0",
      "6.0",
      "97.0",
      "6.0",
      "98.0",
      "6.0",
      "99.0",
      "7.0",
      "1.0",
      "7.0",
      "2.0",
      "7.0",
      "3.0",
      "7.0",
      "4.0",
      "7.0",
      "5.0",
      "7.0",
      "6.0",
      "7.0",
      "7.0",
      "7.0",
      "8.0",
      "7.0",
      "9.0",
      "7.0",
      "10.0",
      "7.0",
      "11.0",
      "7.0",
      "12.0",
      "7.0",
      "13.0",
      "7.0",
      "14.0",
      "7.0",
      "15.0",
      "7.0",
      "16.0",
      "7.0",
      "17.0",
      "7.0",
      "18.0",
      "7.0",
      "19.0",
      "7.0",
      "20.0",
      "7.0",
      "21.0",
      "7.0",
      "22.0",
      "7.0",
      "23.0",
      "7.0",
      "24.0",
      "7.0",
      "25.0",
      "7.0",
      "26.0",
      "7.0",
      "27.0",
      "7.0",
      "28.0",
      "7.0",
      "29.0",
      "7.0",
      "30.0",
      "7.0",
      "31.0",
      "7.0",
      "32.0",
      "7.0",
      "33.0",
      "7.0",
      "34.0",
      "7.0",
      "35.0",
      "7.0",
      "36.0",
      "7.0",
      "37.0",
      "7.0",
      "38.0",
      "7.0",
      "39.0",
      "7.0",
      "40.0",
      "7.0",
      "41.0",
      "7.0",
      "42.0",
      "7.0",
      "43.0",
      "7.0",
      "44.0",
      "7.0",
      "45.0",
      "7.0",
      "46.0",
      "7.0",
      "47.0",
      "7.0",
      "48.0",
      "7.0",
      "49.0",
      "7.0",
      "50.0",
      "7.0",
      "51.0",
      "7.0",
      "52.0",
      "7.0",
      "53.0",
      "7.0",
      "54.0",
      "7.0",
      "55.0",
      "7.0",
      "56.0",
      "7.0",
      "57.0",
      "7.0",
      "58.0",
      "7.0",
      "59.0",
      "7.0",
      "60.0",
      "7.0",
      "61.0",
      "7.0",
      "62.0",
      "7.0",
      "63.0",
      "7.0",
      "64.0",
      "7.0",
      "65.0",
      "7.0",
      "66.0",
      "7.0",
      "67.0",
      "7.0",
      "68.0",
      "7.0",
      "69.0",
      "7.0",
      "70.0",
      "7.0",
      "71.0",
      "7.0",
      "72.0",
      "7.0",
      "73.0",
      "7.0",
      "74.0",
      "7.0",
      "75.0",
      "7.0",
      "76.0",
      "7.0",
      "77.0",
      "7.0",
      "78.0",
      "7.0",
      "79.0",
      "7.0",
      "80.0",
      "7.0",
      "81.0",
      "7.0",
      "82.0",
      "7.0",
      "83.0",
      "7.0",
      "84.0",
      "7.0",
      "85.0",
      "7.0",
      "86.0",
      "7.0",
      "87.0",
      "7.0",
      "88.0",
      "7.0",
      "89.0",
      "7.0",
      "90.0",
      "7.0",
      "91.0",
      "7.0",
      "92.0",
      "7.0",
      "93.0",
      "7.0",
      "94.0",
      "7.0",
      "95.0",
      "7.0",
      "96.0",
      "7.0",
      "97.0",
      "7.0",
      "98.0",
      "7.0",
      "99.0",
      "8.0",
      "1.0",
      "8.0",
      "2.0",
      "8.0",
      "3.0",
      "8.0",
      "4.0",
      "8.0",
      "5.0",
      "8.0",
      "6.0",
      "8.0",
      "7.0",
      "8.0",
      "8.0",
      "8.0",
      "9.0",
      "8.0",
      "10.0",
      "8.0",
      "11.0",
      "8.0",
      "12.0",
      "8.0",
      "13.0",
      "8.0",
      "14.0",
      "8.0",
      "15.0",
      "8.0",
      "16.0",
      "8.0",
      "17.0",
      "8.0",
      "18.0",
      "8.0",
      "19.0",
      "8.0",
      "20.0",
      "8.0",
      "21.0",
      "8.0",
      "22.0",
      "8.0",
      "23.0",
      "8.0",
      "24.0",
      "8.0",
      "25.0",
      "8.0",
      "26.0",
      "8.0",
      "27.0",
      "8.0",
      "28.0",
      "8.0",
      "29.0",
      "8.0",
      "30.0",
      "8.0",
      "31.0",
      "8.0",
      "32.0",
      "8.0",
      "33.0",
      "8.0",
      "34.0",
      "8.0",
      "35.0",
      "8.0",
      "36.0",
      "8.0",
      "37.0",
      "8.0",
      "38.0",
      "8.0",
      "39.0",
      "8.0",
      "40.0",
      "8.0",
      "41.0",
      "8.0",
      "42.0",
      "8.0",
      "43.0",
      "8.0",
      "44.0",
      "8.0",
      "45.0",
      "8.0",
      "46.0",
      "8.0",
      "47.0",
      "8.0",
      "48.0",
      "8.0",
      "49.0",
      "8.0",
      "50.0",
      "8.0",
      "51.0",
      "8.0",
      "52.0",
      "8.0",
      "53.0",
      "8.0",
      "54.0",
      "8.0",
      "55.0",
      "8.0",
      "56.0",
      "8.0",
      "57.0",
      "8.0",
      "58.0",
      "8.0",
      "59.0",
      "8.0",
      "60.0",
      "8.0",
      "61.0",
      "8.0",
      "62.0",
      "8.0",
      "63.0",
      "8.0",
      "64.0",
      "8.0",
      "65.0",
      "8.0",
      "66.0",
      "8.0",
      "67.0",
      "8.0",
      "68.0",
      "8.0",
      "69.0",
      "8.0",
      "70.0",
      "8.0",
      "71.0",
      "8.0",
      "72.0",
      "8.0",
      "73.0",
      "8.0",
      "74.0",
      "8.0",
      "75.0",
      "8.0",
      "76.0",
      "8.0",
      "77.0",
      "8.0",
      "78.0",
      "8.0",
      "79.0",
      "8.0",
      "80.0",
      "8.0",
      "81.0",
      "8.0",
      "82.0",
      "8.0",
      "83.0",
      "8.0",
      "84.0",
      "8.0",
      "85.0",
      "8.0",
      "86.0",
      "8.0",
      "87.0",
      "8.0",
      "88.0",
      "8.0",
      "89.0",
      "8.0",
      "90.0",
      "8.0",
      "91.0",
      "8.0",
      "92.0",
      "8.0",
      "93.0",
      "8.0",
      "94.0",
      "8.0",
      "95.0",
      "8.0",
      "96.0",
      "8.0",
      "97.0",
      "8.0",
      "98.0",
      "8.0",
      "99.0",
      "9.0",
      "1.0",
      "9.0",
      "2.0",
      "9.0",
      "3.0",
      "9.0",
      "4.0",
      "9.0",
      "5.0",
      "9.0",
      "6.0",
      "9.0",
      "7.0",
      "9.0",
      "8.0",
      "9.0",
      "9.0",
      "9.0",
      "10.0",
      "9.0",
      "11.0",
      "9.0",
      "12.0",
      "9.0",
      "13.0",
      "9.0",
      "14.0",
      "9.0",
      "15.0",
      "9.0",
      "16.0",
      "9.0",
      "17.0",
      "9.0",
      "18.0",
      "9.0",
      "19.0",
      "9.0",
      "20.0",
      "9.0",
      "21.0",
      "9.0",
      "22.0",
      "9.0",
      "23.0",
      "9.0",
      "24.0",
      "9.0",
      "25.0",
      "9.0",
      "26.0",
      "9.0",
      "27.0",
      "9.0",
      "28.0",
      "9.0",
      "29.0",
      "9.0",
      "30.0",
      "9.0",
      "31.0",
      "9.0",
      "32.0",
      "9.0",
      "33.0",
      "9.0",
      "34.0",
      "9.0",
      "35.0",
      "9.0",
      "36.0",
      "9.0",
      "37.0",
      "9.0",
      "38.0",
      "9.0",
      "39.0",
      "9.0",
      "40.0",
      "9.0",
      "41.0",
      "9.0",
      "42.0",
      "9.0",
      "43.0",
      "9.0",
      "44.0",
      "9.0",
      "45.0",
      "9.0",
      "46.0",
      "9.0",
      "47.0",
      "9.0",
      "48.0",
      "9.0",
      "49.0",
      "9.0",
      "50.0",
      "9.0",
      "51.0",
      "9.0",
      "52.0",
      "9.0",
      "53.0",
      "9.0",
      "54.0",
      "9.0",
      "55.0",
      "9.0",
      "56.0",
      "9.0",
      "57.0",
      "9.0",
      "58.0",
      "9.0",
      "59.0",
      "9.0",
      "60.0",
      "9.0",
      "61.0",
      "9.0",
      "62.0",
      "9.0",
      "63.0",
      "9.0",
      "64.0",
      "9.0",
      "65.0",
      "9.0",
      "66.0",
      "9.0",
      "67.0",
      "9.0",
      "68.0",
      "9.0",
      "69.0",
      "9.0",
      "70.0",
      "9.0",
      "71.0",
      "9.0",
      "72.0",
      "9.0",
      "73.0",
      "9.0",
      "74.0",
      "9.0",
      "75.0",
      "9.0",
      "76.0",
      "9.0",
      "77.0",
      "9.0",
      "78.0",
      "9.0",
      "79.0",
      "9.0",
      "80.0",
      "9.0",
      "81.0",
      "9.0",
      "82.0",
      "9.0",
      "83.0",
      "9.0",
      "84.0",
      "9.0",
      "85.0",
      "9.0",
      "86.0",
      "9.0",
      "87.0",
      "9.0",
      "88.0",
      "9.0",
      "89.0",
      "9.0",
      "90.0",
      "9.0",
      "91.0",
      "9.0",
      "92.0",
      "9.0",
      "93.0",
      "9.0",
      "94.0",
      "9.0",
      "95.0",
      "9.0",
      "96.0",
      "9.0",
      "97.0",
      "9.0",
      "98.0",
      "9.0",
      "99.0",
      "10.0",
      "1.0",
      "10.0",
      "2.0",
      "10.0",
      "3.0",
      "10.0",
      "4.0",
      "10.0",
      "5.0",
      "10.0",
      "6.0",
      "10.0",
      "7.0",
      "10.0",
      "8.0",
      "10.0",
      "9.0",
      "10.0",
      "10.0",
      "10.0",
      "11.0",
      "10.0",
      "12.0",
      "10.0",
      "13.0",
      "10.0",
      "14.0",
      "10.0",
      "15.0",
      "10.0",
      "16.0",
      "10.0",
      "17.0",
      "10.0",
      "18.0",
      "10.0",
      "19.0",
      "10.0",
      "20.0",
      "10.0",
      "21.0",
      "10.0",
      "22.0",
      "10.0",
      "23.0",
      "10.0",
      "24.0",
      "10.0",
      "25.0",
      "10.0",
      "26.0",
      "10.0",
      "27.0",
      "10.0",
      "28.0",
      "10.0",
      "29.0",
      "10.0",
      "30.0",
      "10.0",
      "31.0",
      "10.0",
      "32.0",
      "10.0",
      "33.0",
      "10.0",
      "34.0",
      "10.0",
      "35.0",
      "10.0",
      "36.0",
      "10.0",
      "37.0",
      "10.0",
      "38.0",
      "10.0",
      "39.0",
      "10.0",
      "40.0",
      "10.0",
      "41.0",
      "10.0",
      "42.0",
      "10.0",
      "43.0",
      "10.0",
      "44.0",
      "10.0",
      "45.0",
      "10.0",
      "46.0",
      "10.0",
      "47.0",
      "10.0",
      "48.0",
      "10.0",
      "49.0",
      "10.0",
      "50.0",
      "10.0",
      "51.0",
      "10.0",
      "52.0",
      "10.0",
      "53.0",
      "10.0",
      "54.0",
      "10.0",
      "55.0",
      "10.0",
      "56.0",
      "10.0",
      "57.0",
      "10.0",
      "58.0",
      "10.0",
      "59.0",
      "10.0",
      "60.0",
      "10.0",
      "61.0",
      "10.0",
      "62.0",
      "10.0",
      "63.0",
      "10.0",
      "64.0",
      "10.0",
      "65.0",
      "10.0",
      "66.0",
      "10.0",
      "67.0",
      "10.0",
      "68.0",
      "10.0",
      "69.0",
      "10.0",
      "70.0",
      "10.0",
      "71.0",
      "10.0",
      "72.0",
      "10.0",
      "73.0",
      "10.0",
      "74.0",
      "10.0",
      "75.0",
      "10.0",
      "76.0",
      "10.0",
      "77.0",
      "10.0",
      "78.0",
      "10.0",
      "79.0",
      "10.0",
      "80.0",
      "10.0",
      "81.0",
      "10.0",
      "82.0",
      "10.0",
      "83.0",
      "10.0",
      "84.0",
      "10.0",
      "85.0",
      "10.0",
      "86.0",
      "10.0",
      "87.0",
      "10.0",
      "88.0",
      "10.0",
      "89.0",
      "10.0",
      "90.0",
      "10.0",
      "91.0",
      "10.0",
      "92.0",
      "10.0",
      "93.0",
      "10.0",
      "94.0",
      "10.0",
      "95.0",
      "10.0",
      "96.0",
      "10.0",
      "97.0",
      "10.0",
      "98.0",
      "10.0",
      "99.0",
      "11.0",
      "1.0",
      "11.0",
      "2.0",
      "11.0",
      "3.0",
      "11.0",
      "4.0",
      "11.0",
      "5.0",
      "11.0",
      "6.0",
      "11.0",
      "7.0",
      "11.0",
      "8.0",
      "11.0",
      "9.0",
      "11.0",
      "10.0",
      "11.0",
      "11.0",
      "11.0",
      "12.0",
      "11.0",
      "13.0",
      "11.0",
      "14.0",
      "11.0",
      "15.0",
      "11.0",
      "16.0",
      "11.0",
      "17.0",
      "11.0",
      "18.0",
      "11.0",
      "19.0",
      "11.0",
      "20.0",
      "11.0",
      "21.0",
      "11.0",
      "22.0",
      "11.0",
      "23.0",
      "11.0",
      "24.0",
      "11.0",
      "25.0",
      "11.0",
      "26.0",
      "11.0",
      "27.0",
      "11.0",
      "28.0",
      "11.0",
      "29.0",
      "11.0",
      "30.0",
      "11.0",
      "31.0",
      "11.0",
      "32.0",
      "11.0",
      "33.0",
      "11.0",
      "34.0",
      "11.0",
      "35.0",
      "11.0",
      "36.0",
      "11.0",
      "37.0",
      "11.0",
      "38.0",
      "11.0",
      "39.0",
      "11.0",
      "40.0",
      "11.0",
      "41.0",
      "11.0",
      "42.0",
      "11.0",
      "43.0",
      "11.0",
      "44.0",
      "11.0",
      "45.0",
      "11.0",
      "46.0",
      "11.0",
      "47.0",
      "11.0",
      "48.0",
      "11.0",
      "49.0",
      "11.0",
      "50.0",
      "11.0",
      "51.0",
      "11.0",
      "52.0",
      "11.0",
      "53.0",
      "11.0",
      "54.0",
      "11.0",
      "55.0",
      "11.0",
      "56.0",
      "11.0",
      "57.0",
      "11.0",
      "58.0",
      "11.0",
      "59.0",
      "11.0",
      "60.0",
      "11.0",
      "61.0",
      "11.0",
      "62.0",
      "11.0",
      "63.0",
      "11.0",
      "64.0",
      "11.0",
      "65.0",
      "11.0",
      "66.0",
      "11.0",
      "67.0",
      "11.0",
      "68.0",
      "11.0",
      "69.0",
      "11.0",
      "70.0",
      "11.0",
      "71.0",
      "11.0",
      "72.0",
      "11.0",
      "73.0",
      "11.0",
      "74.0",
      "11.0",
      "75.0",
      "11.0",
      "76.0",
      "11.0",
      "77.0",
      "11.0",
      "78.0",
      "11.0",
      "79.0",
      "11.0",
      "80.0",
      "11.0",
      "81.0",
      "11.0",
      "82.0",
      "11.0",
      "83.0",
      "11.0",
      "84.0",
      "11.0",
      "85.0",
      "11.0",
      "86.0",
      "11.0",
      "87.0",
      "11.0",
      "88.0",
      "11.0",
      "89.0",
      "11.0",
      "90.0",
      "11.0",
      "91.0",
      "11.0",
      "92.0",
      "11.0",
      "93.0",
      "11.0",
      "94.0",
      "11.0",
      "95.0",
      "11.0",
      "96.0",
      "11.0",
      "97.0",
      "11.0",
      "98.0",
      "11.0",
      "99.0",
      "12.0",
      "1.0",
      "12.0",
      "2.0",
      "12.0",
      "3.0",
      "12.0",
      "4.0",
      "12.0",
      "5.0",
      "12.0",
      "6.0",
      "12.0",
      "7.0",
      "12.0",
      "8.0",
      "12.0",
      "9.0",
      "12.0",
      "10.0",
      "12.0",
      "11.0",
      "12.0",
      "12.0",
      "12.0",
      "13.0",
      "12.0",
      "14.0",
      "12.0",
      "15.0",
      "12.0",
      "16.0",
      "12.0",
      "17.0",
      "12.0",
      "18.0",
      "12.0",
      "19.0",
      "12.0",
      "20.0",
      "12.0",
      "21.0",
      "12.0",
      "22.0",
      "12.0",
      "23.0",
      "12.0",
      "24.0",
      "12.0",
      "25.0",
      "12.0",
      "26.0",
      "12.0",
      "27.0",
      "12.0",
      "28.0",
      "12.0",
      "29.0",
      "12.0",
      "30.0",
      "12.0",
      "31.0",
      "12.0",
      "32.0",
      "12.0",
      "33.0",
      "12.0",
      "34.0",
      "12.0",
      "35.0",
      "12.0",
      "36.0",
      "12.0",
      "37.0",
      "12.0",
      "38.0",
      "12.0",
      "39.0",
      "12.0",
      "40.0",
      "12.0",
      "41.0",
      "12.0",
      "42.0",
      "12.0",
      "43.0",
      "12.0",
      "44.0",
      "12.0",
      "45.0",
      "12.0",
      "46.0",
      "12.0",
      "47.0",
      "12.0",
      "48.0",
      "12.0",
      "49.0",
      "12.0",
      "50.0",
      "12.0",
      "51.0",
      "12.0",
      "52.0",
      "12.0",
      "53.0",
      "12.0",
      "54.0",
      "12.0",
      "55.0",
      "12.0",
      "56.0",
      "12.0",
      "57.0",
      "12.0",
      "58.0",
      "12.0",
      "59.0",
      "12.0",
      "60.0",
      "12.0",
      "61.0",
      "12.0",
      "62.0",
      "12.0",
      "63.0",
      "12.0",
      "64.0",
      "12.0",
      "65.0",
      "12.0",
      "66.0",
      "12.0",
      "67.0",
      "12.0",
      "68.0",
      "12.0",
      "69.0",
      "12.0",
      "70.0",
      "12.0",
      "71.0",
      "12.0",
      "72.0",
      "12.0",
      "73.0",
      "12.0",
      "74.0",
      "12.0",
      "75.0",
      "12.0",
      "76.0",
      "12.0",
      "77.0",
      "12.0",
      "78.0",
      "12.0",
      "79.0",
      "12.0",
      "80.0",
      "12.0",
      "81.0",
      "12.0",
      "82.0",
      "12.0",
      "83.0",
      "12.0",
      "84.0",
      "12.0",
      "85.0",
      "12.0",
      "86.0",
      "12.0",
      "87.0",
      "12.0",
      "88.0",
      "12.0",
      "89.0",
      "12.0",
      "90.0",
      "12.0",
      "91.0",
      "12.0",
      "92.0",
      "12.0",
      "93.0",
      "12.0",
      "94.0",
      "12.0",
      "95.0",
      "12.0",
      "96.0",
      "12.0",
      "97.0",
      "12.0",
      "98.0",
      "12.0",
      "99.0",
      "13.0",
      "1.0",
      "13.0",
      "2.0",
      "13.0",
      "3.0",
      "13.0",
      "4.0",
      "13.0",
      "5.0",
      "13.0",
      "6.0",
      "13.0",
      "7.0",
      "13.0",
      "8.0",
      "13.0",
      "9.0",
      "13.0",
      "10.0",
      "13.0",
      "11.0",
      "13.0",
      "12.0",
      "13.0",
      "13.0",
      "13.0",
      "14.0",
      "13.0",
      "15.0",
      "13.0",
      "16.0",
      "13.0",
      "17.0",
      "13.0",
      "18.0",
      "13.0",
      "19.0",
      "13.0",
      "20.0",
      "13.0",
      "21.0",
      "13.0",
      "22.0",
      "13.0",
      "23.0",
      "13.0",
      "24.0",
      "13.0",
      "25.0",
      "13.0",
      "26.0",
      "13.0",
      "27.0",
      "13.0",
      "28.0",
      "13.0",
      "29.0",
      "13.0",
      "30.0",
      "13.0",
      "31.0",
      "13.0",
      "32.0",
      "13.0",
      "33.0",
      "13.0",
      "34.0",
      "13.0",
      "35.0",
      "13.0",
      "36.0",
      "13.0",
      "37.0",
      "13.0",
      "38.0",
      "13.0",
      "39.0",
      "13.0",
      "40.0",
      "13.0",
      "41.0",
      "13.0",
      "42.0",
      "13.0",
      "43.0",
      "13.0",
      "44.0",
      "13.0",
      "45.0",
      "13.0",
      "46.0",
      "13.0",
      "47.0",
      "13.0",
      "48.0",
      "13.0",
      "49.0",
      "13.0",
      "50.0",
      "13.0",
      "51.0",
      "13.0",
      "52.0",
      "13.0",
      "53.0",
      "13.0",
      "54.0",
      "13.0",
      "55.0",
      "13.0",
      "56.0",
      "13.0",
      "57.0",
      "13.0",
      "58.0",
      "13.0",
      "59.0",
      "13.0",
      "60.0",
      "13.0",
      "61.0",
      "13.0",
      "62.0",
      "13.0",
      "63.0",
      "13.0",
      "64.0",
      "13.0",
      "65.0",
      "13.0",
      "66.0",
      "13.0",
      "67.0",
      "13.0",
      "68.0",
      "13.0",
      "69.0",
      "13.0",
      "70.0",
      "13.0",
      "71.0",
      "13.0",
      "72.0",
      "13.0",
      "73.0",
      "13.0",
      "74.0",
      "13.0",
      "75.0",
      "13.0",
      "76.0",
      "13.0",
      "77.0",
      "13.0",
      "78.0",
      "13.0",
      "79.0",
      "13.0",
      "80.0",
      "13.0",
      "81.0",
      "13.0",
      "82.0",
      "13.0",
      "83.0",
      "13.0",
      "84.0",
      "13.0",
      "85.0",
      "13.0",
      "86.0",
      "13.0",
      "87.0",
      "13.0",
      "88.0",
      "13.0",
      "89.0",
      "13.0",
      "90.0",
      "13.0",
      "91.0",
      "13.0",
      "92.0",
      "13.0",
      "93.0",
      "13.0",
      "94.0",
      "13.0",
      "95.0",
      "13.0",
      "96.0",
      "13.0",
      "97.0",
      "13.0",
      "98.0",
      "13.0",
      "99.0",
      "14.0",
      "1.0",
      "14.0",
      "2.0",
      "14.0",
      "3.0",
      "14.0",
      "4.0",
      "14.0",
      "5.0",
      "14.0",
      "6.0",
      "14.0",
      "7.0",
      "14.0",
      "8.0",
      "14.0",
      "9.0",
      "14.0",
      "10.0",
      "14.0",
      "11.0",
      "14.0",
      "12.0",
      "14.0",
      "13.0",
      "14.0",
      "14.0",
      "14.0",
      "15.0",
      "14.0",
      "16.0",
      "14.0",
      "17.0",
      "14.0",
      "18.0",
      "14.0",
      "19.0",
      "14.0",
      "20.0",
      "14.0",
      "21.0",
      "14.0",
      "22.0",
      "14.0",
      "23.0",
      "14.0",
      "24.0",
      "14.0",
      "25.0",
      "14.0",
      "26.0",
      "14.0",
      "27.0",
      "14.0",
      "28.0",
      "14.0",
      "29.0",
      "14.0",
      "30.0",
      "14.0",
      "31.0",
      "14.0",
      "32.0",
      "14.0",
      "33.0",
      "14.0",
      "34.0",
      "14.0",
      "35.0",
      "14.0",
      "36.0",
      "14.0",
      "37.0",
      "14.0",
      "38.0",
      "14.0",
      "39.0",
      "14.0",
      "40.0",
      "14.0",
      "41.0",
      "14.0",
      "42.0",
      "14.0",
      "43.0",
      "14.0",
      "44.0",
      "14.0",
      "45.0",
      "14.0",
      "46.0",
      "14.0",
      "47.0",
      "14.0",
      "48.0",
      "14.0",
      "49.0",
      "14.0",
      "50.0",
      "14.0",
      "51.0",
      "14.0",
      "52.0",
      "14.0",
      "53.0",
      "14.0",
      "54.0",
      "14.0",
      "55.0",
      "14.0",
      "56.0",
      "14.0",
      "57.0",
      "14.0",
      "58.0",
      "14.0",
      "59.0",
      "14.0",
      "60.0",
      "14.0",
      "61.0",
      "14.0",
      "62.0",
      "14.0",
      "63.0",
      "14.0",
      "64.0",
      "14.0",
      "65.0",
      "14.0",
      "66.0",
      "14.0",
      "67.0",
      "14.0",
      "68.0",
      "14.0",
      "69.0",
      "14.0",
      "70.0",
      "14.0",
      "71.0",
      "14.0",
      "72.0",
      "14.0",
      "73.0",
      "14.0",
      "74.0",
      "14.0",
      "75.0",
      "14.0",
      "76.0",
      "14.0",
      "77.0",
      "14.0",
      "78.0",
      "14.0",
      "79.0",
      "14.0",
      "80.0",
      "14.0",
      "81.0",
      "14.0",
      "82.0",
      "14.0",
      "83.0",
      "14.0",
      "84.0",
      "14.0",
      "85.0",
      "14.0",
      "86.0",
      "14.0",
      "87.0",
      "14.0",
      "88.0",
      "14.0",
      "89.0",
      "14.0",
      "90.0",
      "14.0",
      "91.0",
      "14.0",
      "92.0",
      "14.0",
      "93.0",
      "14.0",
      "94.0",
      "14.0",
      "95.0",
      "14.0",
      "96.0",
      "14.0",
      "97.0",
      "14.0",
      "98.0",
      "14.0",
      "99.0",
      "15.0",
      "1.0",
      "15.0",
      "2.0",
      "15.0",
      "3.0",
      "15.0",
      "4.0",
      "15.0",
      "5.0",
      "15.0",
      "6.0",
      "15.0",
      "7.0",
      "15.0",
      "8.0",
      "15.0",
      "9.0",
      "15.0",
      "10.0",
      "15.0",
      "11.0",
      "15.0",
      "12.0",
      "15.0",
      "13.0",
      "15.0",
      "14.0",
      "15.0",
      "15.0",
      "15.0",
      "16.0",
      "15.0",
      "17.0",
      "15.0",
      "18.0",
      "15.0",
      "19.0",
      "15.0",
      "20.0",
      "15.0",
      "21.0",
      "15.0",
      "22.0",
      "15.0",
      "23.0",
      "15.0",
      "24.0",
      "15.0",
      "25.0",
      "15.0",
      "26.0",
      "15.0",
      "27.0",
      "15.0",
      "28.0",
      "15.0",
      "29.0",
      "15.0",
      "30.0",
      "15.0",
      "31.0",
      "15.0",
      "32.0",
      "15.0",
      "33.0",
      "15.0",
      "34.0",
      "15.0",
      "35.0",
      "15.0",
      "36.0",
      "15.0",
      "37.0",
      "15.0",
      "38.0",
      "15.0",
      "39.0",
      "15.0",
      "40.0",
      "15.0",
      "41.0",
      "15.0",
      "42.0",
      "15.0",
      "43.0",
      "15.0",
      "44.0",
      "15.0",
      "45.0",
      "15.0",
      "46.0",
      "15.0",
      "47.0",
      "15.0",
      "48.0",
      "15.0",
      "49.0",
      "15.0",
      "50.0",
      "15.0",
      "51.0",
      "15.0",
      "52.0",
      "15.0",
      "53.0",
      "15.0",
      "54.0",
      "15.0",
      "55.0",
      "15.0",
      "56.0",
      "15.0",
      "57.0",
      "15.0",
      "58.0",
      "15.0",
      "59.0",
      "15.0",
      "60.0",
      "15.0",
      "61.0",
      "15.0",
      "62.0",
      "15.0",
      "63.0",
      "15.0",
      "64.0",
      "15.0",
      "65.0",
      "15.0",
      "66.0",
      "15.0",
      "67.0",
      "15.0",
      "68.0",
      "15.0",
      "69.0",
      "15.0",
      "70.0",
      "15.0",
      "71.0",
      "15.0",
      "72.0",
      "15.0",
      "73.0",
      "15.0",
      "74.0",
      "15.0",
      "75.0",
      "15.0",
      "76.0",
      "15.0",
      "77.0",
      "15.0",
      "78.0",
      "15.0",
      "79.0",
      "15.0",
      "80.0",
      "15.0",
      "81.0",
      "15.0",
      "82.0",
      "15.0",
      "83.0",
      "15.0",
      "84.0",
      "15.0",
      "85.0",
      "15.0",
      "86.0",
      "15.0",
      "87.0",
      "15.0",
      "88.0",
      "15.0",
      "89.0",
      "15.0",
      "90.0",
      "15.0",
      "91.0",
      "15.0",
      "92.0",
      "15.0",
      "93.0",
      "15.0",
      "94.0",
      "15.0",
      "95.0",
      "15.0",
      "96.0",
      "15.0",
      "97.0",
      "15.0",
      "98.0",
      "15.0",
      "99.0",
      "16.0",
      "1.0",
      "16.0",
      "2.0",
      "16.0",
      "3.0",
      "16.0",
      "4.0",
      "16.0",
      "5.0",
      "16.0",
      "6.0",
      "16.0",
      "7.0",
      "16.0",
      "8.0",
      "16.0",
      "9.0",
      "16.0",
      "10.0",
      "16.0",
      "11.0",
      "16.0",
      "12.0",
      "16.0",
      "13.0",
      "16.0",
      "14.0",
      "16.0",
      "15.0",
      "16.0",
      "16.0",
      "16.0",
      "17.0",
      "16.0",
      "18.0",
      "16.0",
      "19.0",
      "16.0",
      "20.0",
      "16.0",
      "21.0",
      "16.0",
      "22.0",
      "16.0",
      "23.0",
      "16.0",
      "24.0",
      "16.0",
      "25.0",
      "16.0",
      "26.0",
      "16.0",
      "27.0",
      "16.0",
      "28.0",
      "16.0",
      "29.0",
      "16.0",
      "30.0",
      "16.0",
      "31.0",
      "16.0",
      "32.0",
      "16.0",
      "33.0",
      "16.0",
      "34.0",
      "16.0",
      "35.0",
      "16.0",
      "36.0",
      "16.0",
      "37.0",
      "16.0",
      "38.0",
      "16.0",
      "39.0",
      "16.0",
      "40.0",
      "16.0",
      "41.0",
      "16.0",
      "42.0",
      "16.0",
      "43.0",
      "16.0",
      "44.0",
      "16.0",
      "45.0",
      "16.0",
      "46.0",
      "16.0",
      "47.0",
      "16.0",
      "48.0",
      "16.0",
      "49.0",
      "16.0",
      "50.0",
      "16.0",
      "51.0",
      "16.0",
      "52.0",
      "16.0",
      "53.0",
      "16.0",
      "54.0",
      "16.0",
      "55.0",
      "16.0",
      "56.0",
      "16.0",
      "57.0",
      "16.0",
      "58.0",
      "16.0",
      "59.0",
      "16.0",
      "60.0",
      "16.0",
      "61.0",
      "16.0",
      "62.0",
      "16.0",
      "63.0",
      "16.0",
      "64.0",
      "16.0",
      "65.0",
      "16.0",
      "66.0",
      "16.0",
      "67.0",
      "16.0",
      "68.0",
      "16.0",
      "69.0",
      "16.0",
      "70.0",
      "16.0",
      "71.0",
      "16.0",
      "72.0",
      "16.0",
      "73.0",
      "16.0",
      "74.0",
      "16.0",
      "75.0",
      "16.0",
      "76.0",
      "16.0",
      "77.0",
      "16.0",
      "78.0",
      "16.0",
      "79.0",
      "16.0",
      "80.0",
      "16.0",
      "81.0",
      "16.0",
      "82.0",
      "16.0",
      "83.0",
      "16.0",
      "84.0",
      "16.0",
      "85.0",
      "16.0",
      "86.0",
      "16.0",
      "87.0",
      "16.0",
      "88.0",
      "16.0",
      "89.0",
      "16.0",
      "90.0",
      "16.0",
      "91.0",
      "16.0",
      "92.0",
      "16.0",
      "93.0",
      "16.0",
      "94.0",
      "16.0",
      "95.0",
      "16.0",
      "96.0",
      "16.0",
      "97.0",
      "16.0",
      "98.0",
      "16.0",
      "99.0",
      "17.0",
      "1.0",
      "17.0",
      "2.0",
      "17.0",
      "3.0",
      "17.0",
      "4.0",
      "17.0",
      "5.0",
      "17.0",
      "6.0",
      "17.0",
      "7.0",
      "17.0",
      "8.0",
      "17.0",
      "9.0",
      "17.0",
      "10.0",
      "17.0",
      "11.0",
      "17.0",
      "12.0",
      "17.0",
      "13.0",
      "17.0",
      "14.0",
      "17.0",
      "15.0",
      "17.0",
      "16.0",
      "17.0",
      "17.0",
      "17.0",
      "18.0",
      "17.0",
      "19.0",
      "17.0",
      "20.0",
      "17.0",
      "21.0",
      "17.0",
      "22.0",
      "17.0",
      "23.0",
      "17.0",
      "24.0",
      "17.0",
      "25.0",
      "17.0",
      "26.0",
      "17.0",
      "27.0",
      "17.0",
      "28.0",
      "17.0",
      "29.0",
      "17.0",
      "30.0",
      "17.0",
      "31.0",
      "17.0",
      "32.0",
      "17.0",
      "33.0",
      "17.0",
      "34.0",
      "17.0",
      "35.0",
      "17.0",
      "36.0",
      "17.0",
      "37.0",
      "17.0",
      "38.0",
      "17.0",
      "39.0",
      "17.0",
      "40.0",
      "17.0",
      "41.0",
      "17.0",
      "42.0",
      "17.0",
      "43.0",
      "17.0",
      "44.0",
      "17.0",
      "45.0",
      "17.0",
      "46.0",
      "17.0",
      "47.0",
      "17.0",
      "48.0",
      "17.0",
      "49.0",
      "17.0",
      "50.0",
      "17.0",
      "51.0",
      "17.0",
      "52.0",
      "17.0",
      "53.0",
      "17.0",
      "54.0",
      "17.0",
      "55.0",
      "17.0",
      "56.0",
      "17.0",
      "57.0",
      "17.0",
      "58.0",
      "17.0",
      "59.0",
      "17.0",
      "60.0",
      "17.0",
      "61.0",
      "17.0",
      "62.0",
      "17.0",
      "63.0",
      "17.0",
      "64.0",
      "17.0",
      "65.0",
      "17.0",
      "66.0",
      "17.0",
      "67.0",
      "17.0",
      "68.0",
      "17.0",
      "69.0",
      "17.0",
      "70.0",
      "17.0",
      "71.0",
      "17.0",
      "72.0",
      "17.0",
      "73.0",
      "17.0",
      "74.0",
      "17.0",
      "75.0",
      "17.0",
      "76.0",
      "17.0",
      "77.0",
      "17.0",
      "78.0",
      "17.0",
      "79.0",
      "17.0",
      "80.0",
      "17.0",
      "81.0",
      "17.0",
      "82.0",
      "17.0",
      "83.0",
      "17.0",
      "84.0",
      "17.0",
      "85.0",
      "17.0",
      "86.0",
      "17.0",
      "87.0",
      "17.0",
      "88.0",
      "17.0",
      "89.0",
      "17.0",
      "90.0",
      "17.0",
      "91.0",
      "17.0",
      "92.0",
      "17.0",
      "93.0",
      "17.0",
      "94.0",
      "17.0",
      "95.0",
      "17.0",
      "96.0",
      "17.0",
      "97.0",
      "17.0",
      "98.0",
      "17.0",
      "99.0",
      "18.0",
      "1.0",
      "18.0",
      "2.0",
      "18.0",
      "3.0",
      "18.0",
      "4.0",
      "18.0",
      "5.0",
      "18.0",
      "6.0",
      "18.0",
      "7.0",
      "18.0",
      "8.0",
      "18.0",
      "9.0",
      "18.0",
      "10.0",
      "18.0",
      "11.0",
      "18.0",
      "12.0",
      "18.0",
      "13.0",
      "18.0",
      "14.0",
      "18.0",
      "15.0",
      "18.0",
      "16.0",
      "18.0",
      "17.0",
      "18.0",
      "18.0",
      "18.0",
      "19.0",
      "18.0",
      "20.0",
      "18.0",
      "21.0",
      "18.0",
      "22.0",
      "18.0",
      "23.0",
      "18.0",
      "24.0",
      "18.0",
      "25.0",
      "18.0",
      "26.0",
      "18.0",
      "27.0",
      "18.0",
      "28.0",
      "18.0",
      "29.0",
      "18.0",
      "30.0",
      "18.0",
      "31.0",
      "18.0",
      "32.0",
      "18.0",
      "33.0",
      "18.0",
      "34.0",
      "18.0",
      "35.0",
      "18.0",
      "36.0",
      "18.0",
      "37.0",
      "18.0",
      "38.0",
      "18.0",
      "39.0",
      "18.0",
      "40.0",
      "18.0",
      "41.0",
      "18.0",
      "42.0",
      "18.0",
      "43.0",
      "18.0",
      "44.0",
      "18.0",
      "45.0",
      "18.0",
      "46.0",
      "18.0",
      "47.0",
      "18.0",
      "48.0",
      "18.0",
      "49.0",
      "18.0",
      "50.0",
      "18.0",
      "51.0",
      "18.0",
      "52.0",
      "18.0",
      "53.0",
      "18.0",
      "54.0",
      "18.0",
      "55.0",
      "18.0",
      "56.0",
      "18.0",
      "57.0",
      "18.0",
      "58.0",
      "18.0",
      "59.0",
      "18.0",
      "60.0",
      "18.0",
      "61.0",
      "18.0",
      "62.0",
      "18.0",
      "63.0",
      "18.0",
      "64.0",
      "18.0",
      "65.0",
      "18.0",
      "66.0",
      "18.0",
      "67.0",
      "18.0",
      "68.0",
      "18.0",
      "69.0",
      "18.0",
      "70.0",
      "18.0",
      "71.0",
      "18.0",
      "72.0",
      "18.0",
      "73.0",
      "18.0",
      "74.0",
      "18.0",
      "75.0",
      "18.0",
      "76.0",
      "18.0",
      "77.0",
      "18.0",
      "78.0",
      "18.0",
      "79.0",
      "18.0",
      "80.0",
      "18.0",
      "81.0",
      "18.0",
      "82.0",
      "18.0",
      "83.0",
      "18.0",
      "84.0",
      "18.0",
      "85.0",
      "18.0",
      "86.0",
      "18.0",
      "87.0",
      "18.0",
      "88.0",
      "18.0",
      "89.0",
      "18.0",
      "90.0",
      "18.0",
      "91.0",
      "18.0",
      "92.0",
      "18.0",
      "93.0",
      "18.0",
      "94.0",
      "18.0",
      "95.0",
      "18.0",
      "96.0",
      "18.0",
      "97.0",
      "18.0",
      "98.0",
      "18.0",
      "99.0",
      "19.0",
      "1.0",
      "19.0",
      "2.0",
      "19.0",
      "3.0",
      "19.0",
      "4.0",
      "19.0",
      "5.0",
      "19.0",
      "6.0",
      "19.0",
      "7.0",
      "19.0",
      "8.0",
      "19.0",
      "9.0",
      "19.0",
      "10.0",
      "19.0",
      "11.0",
      "19.0",
      "12.0",
      "19.0",
      "13.0",
      "19.0",
      "14.0",
      "19.0",
      "15.0",
      "19.0",
      "16.0",
      "19.0",
      "17.0",
      "19.0",
      "18.0",
      "19.0",
      "19.0",
      "19.0",
      "20.0",
      "19.0",
      "21.0",
      "19.0",
      "22.0",
      "19.0",
      "23.0",
      "19.0",
      "24.0",
      "19.0",
      "25.0",
      "19.0",
      "26.0",
      "19.0",
      "27.0",
      "19.0",
      "28.0",
      "19.0",
      "29.0",
      "19.0",
      "30.0",
      "19.0",
      "31.0",
      "19.0",
      "32.0",
      "19.0",
      "33.0",
      "19.0",
      "34.0",
      "19.0",
      "35.0",
      "19.0",
      "36.0",
      "19.0",
      "37.0",
      "19.0",
      "38.0",
      "19.0",
      "39.0",
      "19.0",
      "40.0",
      "19.0",
      "41.0",
      "19.0",
      "42.0",
      "19.0",
      "43.0",
      "19.0",
      "44.0",
      "19.0",
      "45.0",
      "19.0",
      "46.0",
      "19.0",
      "47.0",
      "19.0",
      "48.0",
      "19.0",
      "49.0",
      "19.0",
      "50.0",
      "19.0",
      "51.0",
      "19.0",
      "52.0",
      "19.0",
      "53.0",
      "19.0",
      "54.0",
      "19.0",
      "55.0",
      "19.0",
      "56.0",
      "19.0",
      "57.0",
      "19.0",
      "58.0",
      "19.0",
      "59.0",
      "19.0",
      "60.0",
      "19.0",
      "61.0",
      "19.0",
      "62.0",
      "19.0",
      "63.0",
      "19.0",
      "64.0",
      "19.0",
      "65.0",
      "19.0",
      "66.0",
      "19.0",
      "67.0",
      "19.0",
      "68.0",
      "19.0",
      "69.0",
      "19.0",
      "70.0",
      "19.0",
      "71.0",
      "19.0",
      "72.0",
      "19.0",
      "73.0",
      "19.0",
      "74.0",
      "19.0",
      "75.0",
      "19.0",
      "76.0",
      "19.0",
      "77.0",
      "19.0",
      "78.0",
      "19.0",
      "79.0",
      "19.0",
      "80.0",
      "19.0",
      "81.0",
      "19.0",
      "82.0",
      "19.0",
      "83.0",
      "19.0",
      "84.0",
      "19.0",
      "85.0",
      "19.0",
      "86.0",
      "19.0",
      "87.0",
      "19.0",
      "88.0",
      "19.0",
      "89.0",
      "19.0",
      "90.0",
      "19.0",
      "91.0",
      "19.0",
      "92.0",
      "19.0",
      "93.0",
      "19.0",
      "94.0",
      "19.0",
      "95.0",
      "19.0",
      "96.0",
      "19.0",
      "97.0",
      "19.0",
      "98.0",
      "19.0",
      "99.0",
      "20.0",
      "1.0",
      "20.0",
      "2.0",
      "20.0",
      "3.0",
      "20.0",
      "4.0",
      "20.0",
      "5.0",
      "20.0",
      "6.0",
      "20.0",
      "7.0",
      "20.0",
      "8.0",
      "20.0",
      "9.0",
      "20.0",
      "10.0",
      "20.0",
      "11.0",
      "20.0",
      "12.0",
      "20.0",
      "13.0",
      "20.0",
      "14.0",
      "20.0",
      "15.0",
      "20.0",
      "16.0",
      "20.0",
      "17.0",
      "20.0",
      "18.0",
      "20.0",
      "19.0",
      "20.0",
      "20.0",
      "20.0",
      "21.0",
      "20.0",
      "22.0",
      "20.0",
      "23.0",
      "20.0",
      "24.0",
      "20.0",
      "25.0",
      "20.0",
      "26.0",
      "20.0",
      "27.0",
      "20.0",
      "28.0",
      "20.0",
      "29.0",
      "20.0",
      "30.0",
      "20.0",
      "31.0",
      "20.0",
      "32.0",
      "20.0",
      "33.0",
      "20.0",
      "34.0",
      "20.0",
      "35.0",
      "20.0",
      "36.0",
      "20.0",
      "37.0",
      "20.0",
      "38.0",
      "20.0",
      "39.0",
      "20.0",
      "40.0",
      "20.0",
      "41.0",
      "20.0",
      "42.0",
      "20.0",
      "43.0",
      "20.0",
      "44.0",
      "20.0",
      "45.0",
      "20.0",
      "46.0",
      "20.0",
      "47.0",
      "20.0",
      "48.0",
      "20.0",
      "49.0",
      "20.0",
      "50.0",
      "20.0",
      "51.0",
      "20.0",
      "52.0",
      "20.0",
      "53.0",
      "20.0",
      "54.0",
      "20.0",
      "55.0",
      "20.0",
      "56.0",
      "20.0",
      "57.0",
      "20.0",
      "58.0",
      "20.0",
      "59.0",
      "20.0",
      "60.0",
      "20.0",
      "61.0",
      "20.0",
      "62.0",
      "20.0",
      "63.0",
      "20.0",
      "64.0",
      "20.0",
      "65.0",
      "20.0",
      "66.0",
      "20.0",
      "67.0",
      "20.0",
      "68.0",
      "20.0",
      "69.0",
      "20.0",
      "70.0",
      "20.0",
      "71.0",
      "20.0",
      "72.0",
      "20.0",
      "73.0",
      "20.0",
      "74.0",
      "20.0",
      "75.0",
      "20.0",
      "76.0",
      "20.0",
      "77.0",
      "20.0",
      "78.0",
      "20.0",
      "79.0",
      "20.0",
      "80.0",
      "20.0",
      "81.0",
      "20.0",
      "82.0",
      "20.0",
      "83.0",
      "20.0",
      "84.0",
      "20.0",
      "85.0",
      "20.0",
      "86.0",
      "20.0",
      "87.0",
      "20.0",
      "88.0",
      "20.0",
      "89.0",
      "20.0",
      "90.0",
      "20.0",
      "91.0",
      "20.0",
      "92.0",
      "20.0",
      "93.0",
      "20.0",
      "94.0",
      "20.0",
      "95.0",
      "20.0",
      "96.0",
      "20.0",
      "97.0",
      "20.0",
      "98.0",
      "20.0",
      "99.0",
      "21.0",
      "1.0",
      "21.0",
      "2.0",
      "21.0",
      "3.0",
      "21.0",
      "4.0",
      "21.0",
      "5.0",
      "21.0",
      "6.0",
      "21.0",
      "7.0",
      "21.0",
      "8.0",
      "21.0",
      "9.0",
      "21.0",
      "10.0",
      "21.0",
      "11.0",
      "21.0",
      "12.0",
      "21.0",
      "13.0",
      "21.0",
      "14.0",
      "21.0",
      "15.0",
      "21.0",
      "16.0",
      "21.0",
      "17.0",
      "21.0",
      "18.0",
      "21.0",
      "19.0",
      "21.0",
      "20.0",
      "21.0",
      "21.0",
      "21.0",
      "22.0",
      "21.0",
      "23.0",
      "21.0",
      "24.0",
      "21.0",
      "25.0",
      "21.0",
      "26.0",
      "21.0",
      "27.0",
      "21.0",
      "28.0",
      "21.0",
      "29.0",
      "21.0",
      "30.0",
      "21.0",
      "31.0",
      "21.0",
      "32.0",
      "21.0",
      "33.0",
      "21.0",
      "34.0",
      "21.0",
      "35.0",
      "21.0",
      "36.0",
      "21.0",
      "37.0",
      "21.0",
      "38.0",
      "21.0",
      "39.0",
      "21.0",
      "40.0",
      "21.0",
      "41.0",
      "21.0",
      "42.0",
      "21.0",
      "43.0",
      "21.0",
      "44.0",
      "21.0",
      "45.0",
      "21.0",
      "46.0",
      "21.0",
      "47.0",
      "21.0",
      "48.0",
      "21.0",
      "49.0",
      "21.0",
      "50.0",
      "21.0",
      "51.0",
      "21.0",
      "52.0",
      "21.0",
      "53.0",
      "21.0",
      "54.0",
      "21.0",
      "55.0",
      "21.0",
      "56.0",
      "21.0",
      "57.0",
      "21.0",
      "58.0",
      "21.0",
      "59.0",
      "21.0",
      "60.0",
      "21.0",
      "61.0",
      "21.0",
      "62.0",
      "21.0",
      "63.0",
      "21.0",
      "64.0",
      "21.0",
      "65.0",
      "21.0",
      "66.0",
      "21.0",
      "67.0",
      "21.0",
      "68.0",
      "21.0",
      "69.0",
      "21.0",
      "70.0",
      "21.0",
      "71.0",
      "21.0",
      "72.0",
      "21.0",
      "73.0",
      "21.0",
      "74.0",
      "21.0",
      "75.0",
      "21.0",
      "76.0",
      "21.0",
      "77.0",
      "21.0",
      "78.0",
      "21.0",
      "79.0",
      "21.0",
      "80.0",
      "21.0",
      "81.0",
      "21.0",
      "82.0",
      "21.0",
      "83.0",
      "21.0",
      "84.0",
      "21.0",
      "85.0",
      "21.0",
      "86.0",
      "21.0",
      "87.0",
      "21.0",
      "88.0",
      "21.0",
      "89.0",
      "21.0",
      "90.0",
      "21.0",
      "91.0",
      "21.0",
      "92.0",
      "21.0",
      "93.0",
      "21.0",
      "94.0",
      "21.0",
      "95.0",
      "21.0",
      "96.0",
      "21.0",
      "97.0",
      "21.0",
      "98.0",
      "21.0",
      "99.0",
      "22.0",
      "1.0",
      "22.0",
      "2.0",
      "22.0",
      "3.0",
      "22.0",
      "4.0",
      "22.0",
      "5.0",
      "22.0",
      "6.0",
      "22.0",
      "7.0",
      "22.0",
      "8.0",
      "22.0",
      "9.0",
      "22.0",
      "10.0",
      "22.0",
      "11.0",
      "22.0",
      "12.0",
      "22.0",
      "13.0",
      "22.0",
      "14.0",
      "22.0",
      "15.0",
      "22.0",
      "16.0",
      "22.0",
      "17.0",
      "22.0",
      "18.0",
      "22.0",
      "19.0",
      "22.0",
      "20.0",
      "22.0",
      "21.0",
      "22.0",
      "22.0",
      "22.0",
      "23.0",
      "22.0",
      "24.0",
      "22.0",
      "25.0",
      "22.0",
      "26.0",
      "22.0",
      "27.0",
      "22.0",
      "28.0",
      "22.0",
      "29.0",
      "22.0",
      "30.0",
      "22.0",
      "31.0",
      "22.0",
      "32.0",
      "22.0",
      "33.0",
      "22.0",
      "34.0",
      "22.0",
      "35.0",
      "22.0",
      "36.0",
      "22.0",
      "37.0",
      "22.0",
      "38.0",
      "22.0",
      "39.0",
      "22.0",
      "40.0",
      "22.0",
      "41.0",
      "22.0",
      "42.0",
      "22.0",
      "43.0",
      "22.0",
      "44.0",
      "22.0",
      "45.0",
      "22.0",
      "46.0",
      "22.0",
      "47.0",
      "22.0",
      "48.0",
      "22.0",
      "49.0",
      "22.0",
      "50.0",
      "22.0",
      "51.0",
      "22.0",
      "52.0",
      "22.0",
      "53.0",
      "22.0",
      "54.0",
      "22.0",
      "55.0",
      "22.0",
      "56.0",
      "22.0",
      "57.0",
      "22.0",
      "58.0",
      "22.0",
      "59.0",
      "22.0",
      "60.0",
      "22.0",
      "61.0",
      "22.0",
      "62.0",
      "22.0",
      "63.0",
      "22.0",
      "64.0",
      "22.0",
      "65.0",
      "22.0",
      "66.0",
      "22.0",
      "67.0",
      "22.0",
      "68.0",
      "22.0",
      "69.0",
      "22.0",
      "70.0",
      "22.0",
      "71.0",
      "22.0",
      "72.0",
      "22.0",
      "73.0",
      "22.0",
      "74.0",
      "22.0",
      "75.0",
      "22.0",
      "76.0",
      "22.0",
      "77.0",
      "22.0",
      "78.0",
      "22.0",
      "79.0",
      "22.0",
      "80.0",
      "22.0",
      "81.0",
      "22.0",
      "82.0",
      "22.0",
      "83.0",
      "22.0",
      "84.0",
      "22.0",
      "85.0",
      "22.0",
      "86.0",
      "22.0",
      "87.0",
      "22.0",
      "88.0",
      "22.0",
      "89.0",
      "22.0",
      "90.0",
      "22.0",
      "91.0",
      "22.0",
      "92.0",
      "22.0",
      "93.0",
      "22.0",
      "94.0",
      "22.0",
      "95.0",
      "22.0",
      "96.0",
      "22.0",
      "97.0",
      "22.0",
      "98.0",
      "22.0",
      "99.0",
      "23.0",
      "1.0",
      "23.0",
      "2.0",
      "23.0",
      "3.0",
      "23.0",
      "4.0",
      "23.0",
      "5.0",
      "23.0",
      "6.0",
      "23.0",
      "7.0",
      "23.0",
      "8.0",
      "23.0",
      "9.0",
      "23.0",
      "10.0",
      "23.0",
      "11.0",
      "23.0",
      "12.0",
      "23.0",
      "13.0",
      "23.0",
      "14.0",
      "23.0",
      "15.0",
      "23.0",
      "16.0",
      "23.0",
      "17.0",
      "23.0",
      "18.0",
      "23.0",
      "19.0",
      "23.0",
      "20.0",
      "23.0",
      "21.0",
      "23.0",
      "22.0",
      "23.0",
      "23.0",
      "23.0",
      "24.0",
      "23.0",
      "25.0",
      "23.0",
      "26.0",
      "23.0",
      "27.0",
      "23.0",
      "28.0",
      "23.0",
      "29.0",
      "23.0",
      "30.0",
      "23.0",
      "31.0",
      "23.0",
      "32.0",
      "23.0",
      "33.0",
      "23.0",
      "34.0",
      "23.0",
      "35.0",
      "23.0",
      "36.0",
      "23.0",
      "37.0",
      "23.0",
      "38.0",
      "23.0",
      "39.0",
      "23.0",
      "40.0",
      "23.0",
      "41.0",
      "23.0",
      "42.0",
      "23.0",
      "43.0",
      "23.0",
      "44.0",
      "23.0",
      "45.0",
      "23.0",
      "46.0",
      "23.0",
      "47.0",
      "23.0",
      "48.0",
      "23.0",
      "49.0",
      "23.0",
      "50.0",
      "23.0",
      "51.0",
      "23.0",
      "52.0",
      "23.0",
      "53.0",
      "23.0",
      "54.0",
      "23.0",
      "55.0",
      "23.0",
      "56.0",
      "23.0",
      "57.0",
      "23.0",
      "58.0",
      "23.0",
      "59.0",
      "23.0",
      "60.0",
      "23.0",
      "61.0",
      "23.0",
      "62.0",
      "23.0",
      "63.0",
      "23.0",
      "64.0",
      "23.0",
      "65.0",
      "23.0",
      "66.0",
      "23.0",
      "67.0",
      "23.0",
      "68.0",
      "23.0",
      "69.0",
      "23.0",
      "70.0",
      "23.0",
      "71.0",
      "23.0",
      "72.0",
      "23.0",
      "73.0",
      "23.0",
      "74.0",
      "23.0",
      "75.0",
      "23.0",
      "76.0",
      "23.0",
      "77.0",
      "23.0",
      "78.0",
      "23.0",
      "79.0",
      "23.0",
      "80.0",
      "23.0",
      "81.0",
      "23.0",
      "82.0",
      "23.0",
      "83.0",
      "23.0",
      "84.0",
      "23.0",
      "85.0",
      "23.0",
      "86.0",
      "23.0",
      "87.0",
      "23.0",
      "88.0",
      "23.0",
      "89.0",
      "23.0",
      "90.0",
      "23.0",
      "91.0",
      "23.0",
      "92.0",
      "23.0",
      "93.0",
      "23.0",
      "94.0",
      "23.0",
      "95.0",
      "23.0",
      "96.0",
      "23.0",
      "97.0",
      "23.0",
      "98.0",
      "23.0",
      "99.0",
      "24.0",
      "1.0",
      "24.0",
      "2.0",
      "24.0",
      "3.0",
      "24.0",
      "4.0",
      "24.0",
      "5.0",
      "24.0",
      "6.0",
      "24.0",
      "7.0",
      "24.0",
      "8.0",
      "24.0",
      "9.0",
      "24.0",
      "10.0",
      "24.0",
      "11.0",
      "24.0",
      "12.0",
      "24.0",
      "13.0",
      "24.0",
      "14.0",
      "24.0",
      "15.0",
      "24.0",
      "16.0",
      "24.0",
      "17.0",
      "24.0",
      "18.0",
      "24.0",
      "19.0",
      "24.0",
      "20.0",
      "24.0",
      "21.0",
      "24.0",
      "22.0",
      "24.0",
      "23.0",
      "24.0",
      "24.0",
      "24.0",
      "25.0",
      "24.0",
      "26.0",
      "24.0",
      "27.0",
      "24.0",
      "28.0",
      "24.0",
      "29.0",
      "24.0",
      "30.0",
      "24.0",
      "31.0",
      "24.0",
      "32.0",
      "24.0",
      "33.0",
      "24.0",
      "34.0",
      "24.0",
      "35.0",
      "24.0",
      "36.0",
      "24.0",
      "37.0",
      "24.0",
      "38.0",
      "24.0",
      "39.0",
      "24.0",
      "40.0",
      "24.0",
      "41.0",
      "24.0",
      "42.0",
      "24.0",
      "43.0",
      "24.0",
      "44.0",
      "24.0",
      "45.0",
      "24.0",
      "46.0",
      "24.0",
      "47.0",
      "24.0",
      "48.0",
      "24.0",
      "49.0",
      "24.0",
      "50.0",
      "24.0",
      "51.0",
      "24.0",
      "52.0",
      "24.0",
      "53.0",
      "24.0",
      "54.0",
      "24.0",
      "55.0",
      "24.0",
      "56.0",
      "24.0",
      "57.0",
      "24.0",
      "58.0",
      "24.0",
      "59.0",
      "24.0",
      "60.0",
      "24.0",
      "61.0",
      "24.0",
      "62.0",
      "24.0",
      "63.0",
      "24.0",
      "64.0",
      "24.0",
      "65.0",
      "24.0",
      "66.0",
      "24.0",
      "67.0",
      "24.0",
      "68.0",
      "24.0",
      "69.0",
      "24.0",
      "70.0",
      "24.0",
      "71.0",
      "24.0",
      "72.0",
      "24.0",
      "73.0",
      "24.0",
      "74.0",
      "24.0",
      "75.0",
      "24.0",
      "76.0",
      "24.0",
      "77.0",
      "24.0",
      "78.0",
      "24.0",
      "79.0",
      "24.0",
      "80.0",
      "24.0",
      "81.0",
      "24.0",
      "82.0",
      "24.0",
      "83.0",
      "24.0",
      "84.0",
      "24.0",
      "85.0",
      "24.0",
      "86.0",
      "24.0",
      "87.0",
      "24.0",
      "88.0",
      "24.0",
      "89.0",
      "24.0",
      "90.0",
      "24.0",
      "91.0",
      "24.0",
      "92.0",
      "24.0",
      "93.0",
      "24.0",
      "94.0",
      "24.0",
      "95.0",
      "24.0",
      "96.0",
      "24.0",
      "97.0",
      "24.0",
      "98.0",
      "24.0",
      "99.0",
      "25.0",
      "1.0",
      "25.0",
      "2.0",
      "25.0",
      "3.0",
      "25.0",
      "4.0",
      "25.0",
      "5.0",
      "25.0",
      "6.0",
      "25.0",
      "7.0",
      "25.0",
      "8.0",
      "25.0",
      "9.0",
      "25.0",
      "10.0",
      "25.0",
      "11.0",
      "25.0",
      "12.0",
      "25.0",
      "13.0",
      "25.0",
      "14.0",
      "25.0",
      "15.0",
      "25.0",
      "16.0",
      "25.0",
      "17.0",
      "25.0",
      "18.0",
      "25.0",
      "19.0",
      "25.0",
      "20.0",
      "25.0",
      "21.0",
      "25.0",
      "22.0",
      "25.0",
      "23.0",
      "25.0",
      "24.0",
      "25.0",
      "25.0",
      "25.0",
      "26.0",
      "25.0",
      "27.0",
      "25.0",
      "28.0",
      "25.0",
      "29.0",
      "25.0",
      "30.0",
      "25.0",
      "31.0",
      "25.0",
      "32.0",
      "25.0",
      "33.0",
      "25.0",
      "34.0",
      "25.0",
      "35.0",
      "25.0",
      "36.0",
      "25.0",
      "37.0",
      "25.0",
      "38.0",
      "25.0",
      "39.0",
      "25.0",
      "40.0",
      "25.0",
      "41.0",
      "25.0",
      "42.0",
      "25.0",
      "43.0",
      "25.0",
      "44.0",
      "25.0",
      "45.0",
      "25.0",
      "46.0",
      "25.0",
      "47.0",
      "25.0",
      "48.0",
      "25.0",
      "49.0",
      "25.0",
      "50.0",
      "25.0",
      "51.0",
      "25.0",
      "52.0",
      "25.0",
      "53.0",
      "25.0",
      "54.0",
      "25.0",
      "55.0",
      "25.0",
      "56.0",
      "25.0",
      "57.0",
      "25.0",
      "58.0",
      "25.0",
      "59.0",
      "25.0",
      "60.0",
      "25.0",
      "61.0",
      "25.0",
      "62.0",
      "25.0",
      "63.0",
      "25.0",
      "64.0",
      "25.0",
      "65.0",
      "25.0",
      "66.0",
      "25.0",
      "67.0",
      "25.0",
      "68.0",
      "25.0",
      "69.0",
      "25.0",
      "70.0",
      "25.0",
      "71.0",
      "25.0",
      "72.0",
      "25.0",
      "73.0",
      "25.0",
      "74.0",
      "25.0",
      "75.0",
      "25.0",
      "76.0",
      "25.0",
      "77.0",
      "25.0",
      "78.0",
      "25.0",
      "79.0",
      "25.0",
      "80.0",
      "25.0",
      "81.0",
      "25.0",
      "82.0",
      "25.0",
      "83.0",
      "25.0",
      "84.0",
      "25.0",
      "85.0",
      "25.0",
      "86.0",
      "25.0",
      "87.0",
      "25.0",
      "88.0",
      "25.0",
      "89.0",
      "25.0",
      "90.0",
      "25.0",
      "91.0",
      "25.0",
      "92.0",
      "25.0",
      "93.0",
      "25.0",
      "94.0",
      "25.0",
      "95.0",
      "25.0",
      "96.0",
      "25.0",
      "97.0",
      "25.0",
      "98.0",
      "25.0",
      "99.0",
      "26.0",
      "1.0",
      "26.0",
      "2.0",
      "26.0",
      "3.0",
      "26.0",
      "4.0",
      "26.0",
      "5.0",
      "26.0",
      "6.0",
      "26.0",
      "7.0",
      "26.0",
      "8.0",
      "26.0",
      "9.0",
      "26.0",
      "10.0",
      "26.0",
      "11.0",
      "26.0",
      "12.0",
      "26.0",
      "13.0",
      "26.0",
      "14.0",
      "26.0",
      "15.0",
      "26.0",
      "16.0",
      "26.0",
      "17.0",
      "26.0",
      "18.0",
      "26.0",
      "19.0",
      "26.0",
      "20.0",
      "26.0",
      "21.0",
      "26.0",
      "22.0",
      "26.0",
      "23.0",
      "26.0",
      "24.0",
      "26.0",
      "25.0",
      "26.0",
      "26.0",
      "26.0",
      "27.0",
      "26.0",
      "28.0",
      "26.0",
      "29.0",
      "26.0",
      "30.0",
      "26.0",
      "31.0",
      "26.0",
      "32.0",
      "26.0",
      "33.0",
      "26.0",
      "34.0",
      "26.0",
      "35.0",
      "26.0",
      "36.0",
      "26.0",
      "37.0",
      "26.0",
      "38.0",
      "26.0",
      "39.0",
      "26.0",
      "40.0",
      "26.0",
      "41.0",
      "26.0",
      "42.0",
      "26.0",
      "43.0",
      "26.0",
      "44.0",
      "26.0",
      "45.0",
      "26.0",
      "46.0",
      "26.0",
      "47.0",
      "26.0",
      "48.0",
      "26.0",
      "49.0",
      "26.0",
      "50.0",
      "26.0",
      "51.0",
      "26.0",
      "52.0",
      "26.0",
      "53.0",
      "26.0",
      "54.0",
      "26.0",
      "55.0",
      "26.0",
      "56.0",
      "26.0",
      "57.0",
      "26.0",
      "58.0",
      "26.0",
      "59.0",
      "26.0",
      "60.0",
      "26.0",
      "61.0",
      "26.0",
      "62.0",
      "26.0",
      "63.0",
      "26.0",
      "64.0",
      "26.0",
      "65.0",
      "26.0",
      "66.0",
      "26.0",
      "67.0",
      "26.0",
      "68.0",
      "26.0",
      "69.0",
      "26.0",
      "70.0",
      "26.0",
      "71.0",
      "26.0",
      "72.0",
      "26.0",
      "73.0",
      "26.0",
      "74.0",
      "26.0",
      "75.0",
      "26.0",
      "76.0",
      "26.0",
      "77.0",
      "26.0",
      "78.0",
      "26.0",
      "79.0",
      "26.0",
      "80.0",
      "26.0",
      "81.0",
      "26.0",
      "82.0",
      "26.0",
      "83.0",
      "26.0",
      "84.0",
      "26.0",
      "85.0",
      "26.0",
      "86.0",
      "26.0",
      "87.0",
      "26.0",
      "88.0",
      "26.0",
      "89.0",
      "26.0",
      "90.0",
      "26.0",
      "91.0",
      "26.0",
      "92.0",
      "26.0",
      "93.0",
      "26.0",
      "94.0",
      "26.0",
      "95.0",
      "26.0",
      "96.0",
      "26.0",
      "97.0",
      "26.0",
      "98.0",
      "26.0",
      "99.0",
      "27.0",
      "1.0",
      "27.0",
      "2.0",
      "27.0",
      "3.0",
      "27.0",
      "4.0",
      "27.0",
      "5.0",
      "27.0",
      "6.0",
      "27.0",
      "7.0",
      "27.0",
      "8.0",
      "27.0",
      "9.0",
      "27.0",
      "10.0",
      "27.0",
      "11.0",
      "27.0",
      "12.0",
      "27.0",
      "13.0",
      "27.0",
      "14.0",
      "27.0",
      "15.0",
      "27.0",
      "16.0",
      "27.0",
      "17.0",
      "27.0",
      "18.0",
      "27.0",
      "19.0",
      "27.0",
      "20.0",
      "27.0",
      "21.0",
      "27.0",
      "22.0",
      "27.0",
      "23.0",
      "27.0",
      "24.0",
      "27.0",
      "25.0",
      "27.0",
      "26.0",
      "27.0",
      "27.0",
      "27.0",
      "28.0",
      "27.0",
      "29.0",
      "27.0",
      "30.0",
      "27.0",
      "31.0",
      "27.0",
      "32.0",
      "27.0",
      "33.0",
      "27.0",
      "34.0",
      "27.0",
      "35.0",
      "27.0",
      "36.0",
      "27.0",
      "37.0",
      "27.0",
      "38.0",
      "27.0",
      "39.0",
      "27.0",
      "40.0",
      "27.0",
      "41.0",
      "27.0",
      "42.0",
      "27.0",
      "43.0",
      "27.0",
      "44.0",
      "27.0",
      "45.0",
      "27.0",
      "46.0",
      "27.0",
      "47.0",
      "27.0",
      "48.0",
      "27.0",
      "49.0",
      "27.0",
      "50.0",
      "27.0",
      "51.0",
      "27.0",
      "52.0",
      "27.0",
      "53.0",
      "27.0",
      "54.0",
      "27.0",
      "55.0",
      "27.0",
      "56.0",
      "27.0",
      "57.0",
      "27.0",
      "58.0",
      "27.0",
      "59.0",
      "27.0",
      "60.0",
      "27.0",
      "61.0",
      "27.0",
      "62.0",
      "27.0",
      "63.0",
      "27.0",
      "64.0",
      "27.0",
      "65.0",
      "27.0",
      "66.0",
      "27.0",
      "67.0",
      "27.0",
      "68.0",
      "27.0",
      "69.0",
      "27.0",
      "70.0",
      "27.0",
      "71.0",
      "27.0",
      "72.0",
      "27.0",
      "73.0",
      "27.0",
      "74.0",
      "27.0",
      "75.0",
      "27.0",
      "76.0",
      "27.0",
      "77.0",
      "27.0",
      "78.0",
      "27.0",
      "79.0",
      "27.0",
      "80.0",
      "27.0",
      "81.0",
      "27.0",
      "82.0",
      "27.0",
      "83.0",
      "27.0",
      "84.0",
      "27.0",
      "85.0",
      "27.0",
      "86.0",
      "27.0",
      "87.0",
      "27.0",
      "88.0",
      "27.0",
      "89.0",
      "27.0",
      "90.0",
      "27.0",
      "91.0",
      "27.0",
      "92.0",
      "27.0",
      "93.0",
      "27.0",
      "94.0",
      "27.0",
      "95.0",
      "27.0",
      "96.0",
      "27.0",
      "97.0",
      "27.0",
      "98.0",
      "27.0",
      "99.0",
      "28.0",
      "1.0",
      "28.0",
      "2.0",
      "28.0",
      "3.0",
      "28.0",
      "4.0",
      "28.0",
      "5.0",
      "28.0",
      "6.0",
      "28.0",
      "7.0",
      "28.0",
      "8.0",
      "28.0",
      "9.0",
      "28.0",
      "10.0",
      "28.0",
      "11.0",
      "28.0",
      "12.0",
      "28.0",
      "13.0",
      "28.0",
      "14.0",
      "28.0",
      "15.0",
      "28.0",
      "16.0",
      "28.0",
      "17.0",
      "28.0",
      "18.0",
      "28.0",
      "19.0",
      "28.0",
      "20.0",
      "28.0",
      "21.0",
      "28.0",
      "22.0",
      "28.0",
      "23.0",
      "28.0",
      "24.0",
      "28.0",
      "25.0",
      "28.0",
      "26.0",
      "28.0",
      "27.0",
      "28.0",
      "28.0",
      "28.0",
      "29.0",
      "28.0",
      "30.0",
      "28.0",
      "31.0",
      "28.0",
      "32.0",
      "28.0",
      "33.0",
      "28.0",
      "34.0",
      "28.0",
      "35.0",
      "28.0",
      "36.0",
      "28.0",
      "37.0",
      "28.0",
      "38.0",
      "28.0",
      "39.0",
      "28.0",
      "40.0",
      "28.0",
      "41.0",
      "28.0",
      "42.0",
      "28.0",
      "43.0",
      "28.0",
      "44.0",
      "28.0",
      "45.0",
      "28.0",
      "46.0",
      "28.0",
      "47.0",
      "28.0",
      "48.0",
      "28.0",
      "49.0",
      "28.0",
      "50.0",
      "28.0",
      "51.0",
      "28.0",
      "52.0",
      "28.0",
      "53.0",
      "28.0",
      "54.0",
      "28.0",
      "55.0",
      "28.0",
      "56.0",
      "28.0",
      "57.0",
      "28.0",
      "58.0",
      "28.0",
      "59.0",
      "28.0",
      "60.0",
      "28.0",
      "61.0",
      "28.0",
      "62.0",
      "28.0",
      "63.0",
      "28.0",
      "64.0",
      "28.0",
      "65.0",
      "28.0",
      "66.0",
      "28.0",
      "67.0",
      "28.0",
      "68.0",
      "28.0",
      "69.0",
      "28.0",
      "70.0",
      "28.0",
      "71.0",
      "28.0",
      "72.0",
      "28.0",
      "73.0",
      "28.0",
      "74.0",
      "28.0",
      "75.0",
      "28.0",
      "76.0",
      "28.0",
      "77.0",
      "28.0",
      "78.0",
      "28.0",
      "79.0",
      "28.0",
      "80.0",
      "28.0",
      "81.0",
      "28.0",
      "82.0",
      "28.0",
      "83.0",
      "28.0",
      "84.0",
      "28.0",
      "85.0",
      "28.0",
      "86.0",
      "28.0",
      "87.0",
      "28.0",
      "88.0",
      "28.0",
      "89.0",
      "28.0",
      "90.0",
      "28.0",
      "91.0",
      "28.0",
      "92.0",
      "28.0",
      "93.0",
      "28.0",
      "94.0",
      "28.0",
      "95.0",
      "28.0",
      "96.0",
      "28.0",
      "97.0",
      "28.0",
      "98.0",
      "28.0",
      "99.0",
      "29.0",
      "1.0",
      "29.0",
      "2.0",
      "29.0",
      "3.0",
      "29.0",
      "4.0",
      "29.0",
      "5.0",
      "29.0",
      "6.0",
      "29.0",
      "7.0",
      "29.0",
      "8.0",
      "29.0",
      "9.0",
      "29.0",
      "10.0",
      "29.0",
      "11.0",
      "29.0",
      "12.0",
      "29.0",
      "13.0",
      "29.0",
      "14.0",
      "29.0",
      "15.0",
      "29.0",
      "16.0",
      "29.0",
      "17.0",
      "29.0",
      "18.0",
      "29.0",
      "19.0",
      "29.0",
      "20.0",
      "29.0",
      "21.0",
      "29.0",
      "22.0",
      "29.0",
      "23.0",
      "29.0",
      "24.0",
      "29.0",
      "25.0",
      "29.0",
      "26.0",
      "29.0",
      "27.0",
      "29.0",
      "28.0",
      "29.0",
      "29.0",
      "29.0",
      "30.0",
      "29.0",
      "31.0",
      "29.0",
      "32.0",
      "29.0",
      "33.0",
      "29.0",
      "34.0",
      "29.0",
      "35.0",
      "29.0",
      "36.0",
      "29.0",
      "37.0",
      "29.0",
      "38.0",
      "29.0",
      "39.0",
      "29.0",
      "40.0",
      "29.0",
      "41.0",
      "29.0",
      "42.0",
      "29.0",
      "43.0",
      "29.0",
      "44.0",
      "29.0",
      "45.0",
      "29.0",
      "46.0",
      "29.0",
      "47.0",
      "29.0",
      "48.0",
      "29.0",
      "49.0",
      "29.0",
      "50.0",
      "29.0",
      "51.0",
      "29.0",
      "52.0",
      "29.0",
      "53.0",
      "29.0",
      "54.0",
      "29.0",
      "55.0",
      "29.0",
      "56.0",
      "29.0",
      "57.0",
      "29.0",
      "58.0",
      "29.0",
      "59.0",
      "29.0",
      "60.0",
      "29.0",
      "61.0",
      "29.0",
      "62.0",
      "29.0",
      "63.0",
      "29.0",
      "64.0",
      "29.0",
      "65.0",
      "29.0",
      "66.0",
      "29.0",
      "67.0",
      "29.0",
      "68.0",
      "29.0",
      "69.0",
      "29.0",
      "70.0",
      "29.0",
      "71.0",
      "29.0",
      "72.0",
      "29.0",
      "73.0",
      "29.0",
      "74.0",
      "29.0",
      "75.0",
      "29.0",
      "76.0",
      "29.0",
      "77.0",
      "29.0",
      "78.0",
      "29.0",
      "79.0",
      "29.0",
      "80.0",
      "29.0",
      "81.0",
      "29.0",
      "82.0",
      "29.0",
      "83.0",
      "29.0",
      "84.0",
      "29.0",
      "85.0",
      "29.0",
      "86.0",
      "29.0",
      "87.0",
      "29.0",
      "88.0",
      "29.0",
      "89.0",
      "29.0",
      "90.0",
      "29.0",
      "91.0",
      "29.0",
      "92.0",
      "29.0",
      "93.0",
      "29.0",
      "94.0",
      "29.0",
      "95.0",
      "29.0",
      "96.0",
      "29.0",
      "97.0",
      "29.0",
      "98.0",
      "29.0",
      "99.0",
      "30.0",
      "1.0",
      "30.0",
      "2.0",
      "30.0",
      "3.0",
      "30.0",
      "4.0",
      "30.0",
      "5.0",
      "30.0",
      "6.0",
      "30.0",
      "7.0",
      "30.0",
      "8.0",
      "30.0",
      "9.0",
      "30.0",
      "10.0",
      "30.0",
      "11.0",
      "30.0",
      "12.0",
      "30.0",
      "13.0",
      "30.0",
      "14.0",
      "30.0",
      "15.0",
      "30.0",
      "16.0",
      "30.0",
      "17.0",
      "30.0",
      "18.0",
      "30.0",
      "19.0",
      "30.0",
      "20.0",
      "30.0",
      "21.0",
      "30.0",
      "22.0",
      "30.0",
      "23.0",
      "30.0",
      "24.0",
      "30.0",
      "25.0",
      "30.0",
      "26.0",
      "30.0",
      "27.0",
      "30.0",
      "28.0",
      "30.0",
      "29.0",
      "30.0",
      "30.0",
      "30.0",
      "31.0",
      "30.0",
      "32.0",
      "30.0",
      "33.0",
      "30.0",
      "34.0",
      "30.0",
      "35.0",
      "30.0",
      "36.0",
      "30.0",
      "37.0",
      "30.0",
      "38.0",
      "30.0",
      "39.0",
      "30.0",
      "40.0",
      "30.0",
      "41.0",
      "30.0",
      "42.0",
      "30.0",
      "43.0",
      "30.0",
      "44.0",
      "30.0",
      "45.0",
      "30.0",
      "46.0",
      "30.0",
      "47.0",
      "30.0",
      "48.0",
      "30.0",
      "49.0",
      "30.0",
      "50.0",
      "30.0",
      "51.0",
      "30.0",
      "52.0",
      "30.0",
      "53.0",
      "30.0",
      "54.0",
      "30.0",
      "55.0",
      "30.0",
      "56.0",
      "30.0",
      "57.0",
      "30.0",
      "58.0",
      "30.0",
      "59.0",
      "30.0",
      "60.0",
      "30.0",
      "61.0",
      "30.0",
      "62.0",
      "30.0",
      "63.0",
      "30.0",
      "64.0",
      "30.0",
      "65.0",
      "30.0",
      "66.0",
      "30.0",
      "67.0",
      "30.0",
      "68.0",
      "30.0",
      "69.0",
      "30.0",
      "70.0",
      "30.0",
      "71.0",
      "30.0",
      "72.0",
      "30.0",
      "73.0",
      "30.0",
      "74.0",
      "30.0",
      "75.0",
      "30.0",
      "76.0",
      "30.0",
      "77.0",
      "30.0",
      "78.0",
      "30.0",
      "79.0",
      "30.0",
      "80.0",
      "30.0",
      "81.0",
      "30.0",
      "82.0",
      "30.0",
      "83.0",
      "30.0",
      "84.0",
      "30.0",
      "85.0",
      "30.0",
      "86.0",
      "30.0",
      "87.0",
      "30.0",
      "88.0",
      "30.0",
      "89.0",
      "30.0",
      "90.0",
      "30.0",
      "91.0",
      "30.0",
      "92.0",
      "30.0",
      "93.0",
      "30.0",
      "94.0",
      "30.0",
      "95.0",
      "30.0",
      "96.0",
      "30.0",
      "97.0",
      "30.0",
      "98.0",
      "30.0",
      "99.0",
      "31.0",
      "1.0",
      "31.0",
      "2.0",
      "31.0",
      "3.0",
      "31.0",
      "4.0",
      "31.0",
      "5.0",
      "31.0",
      "6.0",
      "31.0",
      "7.0",
      "31.0",
      "8.0",
      "31.0",
      "9.0",
      "31.0",
      "10.0",
      "31.0",
      "11.0",
      "31.0",
      "12.0",
      "31.0",
      "13.0",
      "31.0",
      "14.0",
      "31.0",
      "15.0",
      "31.0",
      "16.0",
      "31.0",
      "17.0",
      "31.0",
      "18.0",
      "31.0",
      "19.0",
      "31.0",
      "20.0",
      "31.0",
      "21.0",
      "31.0",
      "22.0",
      "31.0",
      "23.0",
      "31.0",
      "24.0",
      "31.0",
      "25.0",
      "31.0",
      "26.0",
      "31.0",
      "27.0",
      "31.0",
      "28.0",
      "31.0",
      "29.0",
      "31.0",
      "30.0",
      "31.0",
      "31.0",
      "31.0",
      "32.0",
      "31.0",
      "33.0",
      "31.0",
      "34.0",
      "31.0",
      "35.0",
      "31.0",
      "36.0",
      "31.0",
      "37.0",
      "31.0",
      "38.0",
      "31.0",
      "39.0",
      "31.0",
      "40.0",
      "31.0",
      "41.0",
      "31.0",
      "42.0",
      "31.0",
      "43.0",
      "31.0",
      "44.0",
      "31.0",
      "45.0",
      "31.0",
      "46.0",
      "31.0",
      "47.0",
      "31.0",
      "48.0",
      "31.0",
      "49.0",
      "31.0",
      "50.0",
      "31.0",
      "51.0",
      "31.0",
      "52.0",
      "31.0",
      "53.0",
      "31.0",
      "54.0",
      "31.0",
      "55.0",
      "31.0",
      "56.0",
      "31.0",
      "57.0",
      "31.0",
      "58.0",
      "31.0",
      "59.0",
      "31.0",
      "60.0",
      "31.0",
      "61.0",
      "31.0",
      "62.0",
      "31.0",
      "63.0",
      "31.0",
      "64.0",
      "31.0",
      "65.0",
      "31.0",
      "66.0",
      "31.0",
      "67.0",
      "31.0",
      "68.0",
      "31.0",
      "69.0",
      "31.0",
      "70.0",
      "31.0",
      "71.0",
      "31.0",
      "72.0",
      "31.0",
      "73.0",
      "31.0",
      "74.0",
      "31.0",
      "75.0",
      "31.0",
      "76.0",
      "31.0",
      "77.0",
      "31.0",
      "78.0",
      "31.0",
      "79.0",
      "31.0",
      "80.0",
      "31.0",
      "81.0",
      "31.0",
      "82.0",
      "31.0",
      "83.0",
      "31.0",
      "84.0",
      "31.0",
      "85.0",
      "31.0",
      "86.0",
      "31.0",
      "87.0",
      "31.0",
      "88.0",
      "31.0",
      "89.0",
      "31.0",
      "90.0",
      "31.0",
      "91.0",
      "31.0",
      "92.0",
      "31.0",
      "93.0",
      "31.0",
      "94.0",
      "31.0",
      "95.0",
      "31.0",
      "96.0",
      "31.0",
      "97.0",
      "31.0",
      "98.0",
      "31.0",
      "99.0",
      "32.0",
      "1.0",
      "32.0",
      "2.0",
      "32.0",
      "3.0",
      "32.0",
      "4.0",
      "32.0",
      "5.0",
      "32.0",
      "6.0",
      "32.0",
      "7.0",
      "32.0",
      "8.0",
      "32.0",
      "9.0",
      "32.0",
      "10.0",
      "32.0",
      "11.0",
      "32.0",
      "12.0",
      "32.0",
      "13.0",
      "32.0",
      "14.0",
      "32.0",
      "15.0",
      "32.0",
      "16.0",
      "32.0",
      "17.0",
      "32.0",
      "18.0",
      "32.0",
      "19.0",
      "32.0",
      "20.0",
      "32.0",
      "21.0",
      "32.0",
      "22.0",
      "32.0",
      "23.0",
      "32.0",
      "24.0",
      "32.0",
      "25.0",
      "32.0",
      "26.0",
      "32.0",
      "27.0",
      "32.0",
      "28.0",
      "32.0",
      "29.0",
      "32.0",
      "30.0",
      "32.0",
      "31.0",
      "32.0",
      "32.0",
      "32.0",
      "33.0",
      "32.0",
      "34.0",
      "32.0",
      "35.0",
      "32.0",
      "36.0",
      "32.0",
      "37.0",
      "32.0",
      "38.0",
      "32.0",
      "39.0",
      "32.0",
      "40.0",
      "32.0",
      "41.0",
      "32.0",
      "42.0",
      "32.0",
      "43.0",
      "32.0",
      "44.0",
      "32.0",
      "45.0",
      "32.0",
      "46.0",
      "32.0",
      "47.0",
      "32.0",
      "48.0",
      "32.0",
      "49.0",
      "32.0",
      "50.0",
      "32.0",
      "51.0",
      "32.0",
      "52.0",
      "32.0",
      "53.0",
      "32.0",
      "54.0",
      "32.0",
      "55.0",
      "32.0",
      "56.0",
      "32.0",
      "57.0",
      "32.0",
      "58.0",
      "32.0",
      "59.0",
      "32.0",
      "60.0",
      "32.0",
      "61.0",
      "32.0",
      "62.0",
      "32.0",
      "63.0",
      "32.0",
      "64.0",
      "32.0",
      "65.0",
      "32.0",
      "66.0",
      "32.0",
      "67.0",
      "32.0",
      "68.0",
      "32.0",
      "69.0",
      "32.0",
      "70.0",
      "32.0",
      "71.0",
      "32.0",
      "72.0",
      "32.0",
      "73.0",
      "32.0",
      "74.0",
      "32.0",
      "75.0",
      "32.0",
      "76.0",
      "32.0",
      "77.0",
      "32.0",
      "78.0",
      "32.0",
      "79.0",
      "32.0",
      "80.0",
      "32.0",
      "81.0",
      "32.0",
      "82.0",
      "32.0",
      "83.0",
      "32.0",
      "84.0",
      "32.0",
      "85.0",
      "32.0",
      "86.0",
      "32.0",
      "87.0",
      "32.0",
      "88.0",
      "32.0",
      "89.0",
      "32.0",
      "90.0",
      "32.0",
      "91.0",
      "32.0",
      "92.0",
      "32.0",
      "93.0",
      "32.0",
      "94.0",
      "32.0",
      "95.0",
      "32.0",
      "96.0",
      "32.0",
      "97.0",
      "32.0",
      "98.0",
      "32.0",
      "99.0",
      "33.0",
      "1.0",
      "33.0",
      "2.0",
      "33.0",
      "3.0",
      "33.0",
      "4.0",
      "33.0",
      "5.0",
      "33.0",
      "6.0",
      "33.0",
      "7.0",
      "33.0",
      "8.0",
      "33.0",
      "9.0",
      "33.0",
      "10.0",
      "33.0",
      "11.0",
      "33.0",
      "12.0",
      "33.0",
      "13.0",
      "33.0",
      "14.0",
      "33.0",
      "15.0",
      "33.0",
      "16.0",
      "33.0",
      "17.0",
      "33.0",
      "18.0",
      "33.0",
      "19.0",
      "33.0",
      "20.0",
      "33.0",
      "21.0",
      "33.0",
      "22.0",
      "33.0",
      "23.0",
      "33.0",
      "24.0",
      "33.0",
      "25.0",
      "33.0",
      "26.0",
      "33.0",
      "27.0",
      "33.0",
      "28.0",
      "33.0",
      "29.0",
      "33.0",
      "30.0",
      "33.0",
      "31.0",
      "33.0",
      "32.0",
      "33.0",
      "33.0",
      "33.0",
      "34.0",
      "33.0",
      "35.0",
      "33.0",
      "36.0",
      "33.0",
      "37.0",
      "33.0",
      "38.0",
      "33.0",
      "39.0",
      "33.0",
      "40.0",
      "33.0",
      "41.0",
      "33.0",
      "42.0",
      "33.0",
      "43.0",
      "33.0",
      "44.0",
      "33.0",
      "45.0",
      "33.0",
      "46.0",
      "33.0",
      "47.0",
      "33.0",
      "48.0",
      "33.0",
      "49.0",
      "33.0",
      "50.0",
      "33.0",
      "51.0",
      "33.0",
      "52.0",
      "33.0",
      "53.0",
      "33.0",
      "54.0",
      "33.0",
      "55.0",
      "33.0",
      "56.0",
      "33.0",
      "57.0",
      "33.0",
      "58.0",
      "33.0",
      "59.0",
      "33.0",
      "60.0",
      "33.0",
      "61.0",
      "33.0",
      "62.0",
      "33.0",
      "63.0",
      "33.0",
      "64.0",
      "33.0",
      "65.0",
      "33.0",
      "66.0",
      "33.0",
      "67.0",
      "33.0",
      "68.0",
      "33.0",
      "69.0",
      "33.0",
      "70.0",
      "33.0",
      "71.0",
      "33.0",
      "72.0",
      "33.0",
      "73.0",
      "33.0",
      "74.0",
      "33.0",
      "75.0",
      "33.0",
      "76.0",
      "33.0",
      "77.0",
      "33.0",
      "78.0",
      "33.0",
      "79.0",
      "33.0",
      "80.0",
      "33.0",
      "81.0",
      "33.0",
      "82.0",
      "33.0",
      "83.0",
      "33.0",
      "84.0",
      "33.0",
      "85.0",
      "33.0",
      "86.0",
      "33.0",
      "87.0",
      "33.0",
      "88.0",
      "33.0",
      "89.0",
      "33.0",
      "90.0",
      "33.0",
      "91.0",
      "33.0",
      "92.0",
      "33.0",
      "93.0",
      "33.0",
      "94.0",
      "33.0",
      "95.0",
      "33.0",
      "96.0",
      "33.0",
      "97.0",
      "33.0",
      "98.0",
      "33.0",
      "99.0",
      "34.0",
      "1.0",
      "34.0",
      "2.0",
      "34.0",
      "3.0",
      "34.0",
      "4.0",
      "34.0",
      "5.0",
      "34.0",
      "6.0",
      "34.0",
      "7.0",
      "34.0",
      "8.0",
      "34.0",
      "9.0",
      "34.0",
      "10.0",
      "34.0",
      "11.0",
      "34.0",
      "12.0",
      "34.0",
      "13.0",
      "34.0",
      "14.0",
      "34.0",
      "15.0",
      "34.0",
      "16.0",
      "34.0",
      "17.0",
      "34.0",
      "18.0",
      "34.0",
      "19.0",
      "34.0",
      "20.0",
      "34.0",
      "21.0",
      "34.0",
      "22.0",
      "34.0",
      "23.0",
      "34.0",
      "24.0",
      "34.0",
      "25.0",
      "34.0",
      "26.0",
      "34.0",
      "27.0",
      "34.0",
      "28.0",
      "34.0",
      "29.0",
      "34.0",
      "30.0",
      "34.0",
      "31.0",
      "34.0",
      "32.0",
      "34.0",
      "33.0",
      "34.0",
      "34.0",
      "34.0",
      "35.0",
      "34.0",
      "36.0",
      "34.0",
      "37.0",
      "34.0",
      "38.0",
      "34.0",
      "39.0",
      "34.0",
      "40.0",
      "34.0",
      "41.0",
      "34.0",
      "42.0",
      "34.0",
      "43.0",
      "34.0",
      "44.0",
      "34.0",
      "45.0",
      "34.0",
      "46.0",
      "34.0",
      "47.0",
      "34.0",
      "48.0",
      "34.0",
      "49.0",
      "34.0",
      "50.0",
      "34.0",
      "51.0",
      "34.0",
      "52.0",
      "34.0",
      "53.0",
      "34.0",
      "54.0",
      "34.0",
      "55.0",
      "34.0",
      "56.0",
      "34.0",
      "57.0",
      "34.0",
      "58.0",
      "34.0",
      "59.0",
      "34.0",
      "60.0",
      "34.0",
      "61.0",
      "34.0",
      "62.0",
      "34.0",
      "63.0",
      "34.0",
      "64.0",
      "34.0",
      "65.0",
      "34.0",
      "66.0",
      "34.0",
      "67.0",
      "34.0",
      "68.0",
      "34.0",
      "69.0",
      "34.0",
      "70.0",
      "34.0",
      "71.0",
      "34.0",
      "72.0",
      "34.0",
      "73.0",
      "34.0",
      "74.0",
      "34.0",
      "75.0",
      "34.0",
      "76.0",
      "34.0",
      "77.0",
      "34.0",
      "78.0",
      "34.0",
      "79.0",
      "34.0",
      "80.0",
      "34.0",
      "81.0",
      "34.0",
      "82.0",
      "34.0",
      "83.0",
      "34.0",
      "84.0",
      "34.0",
      "85.0",
      "34.0",
      "86.0",
      "34.0",
      "87.0",
      "34.0",
      "88.0",
      "34.0",
      "89.0",
      "34.0",
      "90.0",
      "34.0",
      "91.0",
      "34.0",
      "92.0",
      "34.0",
      "93.0",
      "34.0",
      "94.0",
      "34.0",
      "95.0",
      "34.0",
      "96.0",
      "34.0",
      "97.0",
      "34.0",
      "98.0",
      "34.0",
      "99.0",
      "35.0",
      "1.0",
      "35.0",
      "2.0",
      "35.0",
      "3.0",
      "35.0",
      "4.0",
      "35.0",
      "5.0",
      "35.0",
      "6.0",
      "35.0",
      "7.0",
      "35.0",
      "8.0",
      "35.0",
      "9.0",
      "35.0",
      "10.0",
      "35.0",
      "11.0",
      "35.0",
      "12.0",
      "35.0",
      "13.0",
      "35.0",
      "14.0",
      "35.0",
      "15.0",
      "35.0",
      "16.0",
      "35.0",
      "17.0",
      "35.0",
      "18.0",
      "35.0",
      "19.0",
      "35.0",
      "20.0",
      "35.0",
      "21.0",
      "35.0",
      "22.0",
      "35.0",
      "23.0",
      "35.0",
      "24.0",
      "35.0",
      "25.0",
      "35.0",
      "26.0",
      "35.0",
      "27.0",
      "35.0",
      "28.0",
      "35.0",
      "29.0",
      "35.0",
      "30.0",
      "35.0",
      "31.0",
      "35.0",
      "32.0",
      "35.0",
      "33.0",
      "35.0",
      "34.0",
      "35.0",
      "35.0",
      "35.0",
      "36.0",
      "35.0",
      "37.0",
      "35.0",
      "38.0",
      "35.0",
      "39.0",
      "35.0",
      "40.0",
      "35.0",
      "41.0",
      "35.0",
      "42.0",
      "35.0",
      "43.0",
      "35.0",
      "44.0",
      "35.0",
      "45.0",
      "35.0",
      "46.0",
      "35.0",
      "47.0",
      "35.0",
      "48.0",
      "35.0",
      "49.0",
      "35.0",
      "50.0",
      "35.0",
      "51.0",
      "35.0",
      "52.0",
      "35.0",
      "53.0",
      "35.0",
      "54.0",
      "35.0",
      "55.0",
      "35.0",
      "56.0",
      "35.0",
      "57.0",
      "35.0",
      "58.0",
      "35.0",
      "59.0",
      "35.0",
      "60.0",
      "35.0",
      "61.0",
      "35.0",
      "62.0",
      "35.0",
      "63.0",
      "35.0",
      "64.0",
      "35.0",
      "65.0",
      "35.0",
      "66.0",
      "35.0",
      "67.0",
      "35.0",
      "68.0",
      "35.0",
      "69.0",
      "35.0",
      "70.0",
      "35.0",
      "71.0",
      "35.0",
      "72.0",
      "35.0",
      "73.0",
      "35.0",
      "74.0",
      "35.0",
      "75.0",
      "35.0",
      "76.0",
      "35.0",
      "77.0",
      "35.0",
      "78.0",
      "35.0",
      "79.0",
      "35.0",
      "80.0",
      "35.0",
      "81.0",
      "35.0",
      "82.0",
      "35.0",
      "83.0",
      "35.0",
      "84.0",
      "35.0",
      "85.0",
      "35.0",
      "86.0",
      "35.0",
      "87.0",
      "35.0",
      "88.0",
      "35.0",
      "89.0",
      "35.0",
      "90.0",
      "35.0",
      "91.0",
      "35.0",
      "92.0",
      "35.0",
      "93.0",
      "35.0",
      "94.0",
      "35.0",
      "95.0",
      "35.0",
      "96.0",
      "35.0",
      "97.0",
      "35.0",
      "98.0",
      "35.0",
      "99.0",
      "36.0",
      "1.0",
      "36.0",
      "2.0",
      "36.0",
      "3.0",
      "36.0",
      "4.0",
      "36.0",
      "5.0",
      "36.0",
      "6.0",
      "36.0",
      "7.0",
      "36.0",
      "8.0",
      "36.0",
      "9.0",
      "36.0",
      "10.0",
      "36.0",
      "11.0",
      "36.0",
      "12.0",
      "36.0",
      "13.0",
      "36.0",
      "14.0",
      "36.0",
      "15.0",
      "36.0",
      "16.0",
      "36.0",
      "17.0",
      "36.0",
      "18.0",
      "36.0",
      "19.0",
      "36.0",
      "20.0",
      "36.0",
      "21.0",
      "36.0",
      "22.0",
      "36.0",
      "23.0",
      "36.0",
      "24.0",
      "36.0",
      "25.0",
      "36.0",
      "26.0",
      "36.0",
      "27.0",
      "36.0",
      "28.0",
      "36.0",
      "29.0",
      "36.0",
      "30.0",
      "36.0",
      "31.0",
      "36.0",
      "32.0",
      "36.0",
      "33.0",
      "36.0",
      "34.0",
      "36.0",
      "35.0",
      "36.0",
      "36.0",
      "36.0",
      "37.0",
      "36.0",
      "38.0",
      "36.0",
      "39.0",
      "36.0",
      "40.0",
      "36.0",
      "41.0",
      "36.0",
      "42.0",
      "36.0",
      "43.0",
      "36.0",
      "44.0",
      "36.0",
      "45.0",
      "36.0",
      "46.0",
      "36.0",
      "47.0",
      "36.0",
      "48.0",
      "36.0",
      "49.0",
      "36.0",
      "50.0",
      "36.0",
      "51.0",
      "36.0",
      "52.0",
      "36.0",
      "53.0",
      "36.0",
      "54.0",
      "36.0",
      "55.0",
      "36.0",
      "56.0",
      "36.0",
      "57.0",
      "36.0",
      "58.0",
      "36.0",
      "59.0",
      "36.0",
      "60.0",
      "36.0",
      "61.0",
      "36.0",
      "62.0",
      "36.0",
      "63.0",
      "36.0",
      "64.0",
      "36.0",
      "65.0",
      "36.0",
      "66.0",
      "36.0",
      "67.0",
      "36.0",
      "68.0",
      "36.0",
      "69.0",
      "36.0",
      "70.0",
      "36.0",
      "71.0",
      "36.0",
      "72.0",
      "36.0",
      "73.0",
      "36.0",
      "74.0",
      "36.0",
      "75.0",
      "36.0",
      "76.0",
      "36.0",
      "77.0",
      "36.0",
      "78.0",
      "36.0",
      "79.0",
      "36.0",
      "80.0",
      "36.0",
      "81.0",
      "36.0",
      "82.0",
      "36.0",
      "83.0",
      "36.0",
      "84.0",
      "36.0",
      "85.0",
      "36.0",
      "86.0",
      "36.0",
      "87.0",
      "36.0",
      "88.0",
      "36.0",
      "89.0",
      "36.0",
      "90.0",
      "36.0",
      "91.0",
      "36.0",
      "92.0",
      "36.0",
      "93.0",
      "36.0",
      "94.0",
      "36.0",
      "95.0",
      "36.0",
      "96.0",
      "36.0",
      "97.0",
      "36.0",
      "98.0",
      "36.0",
      "99.0",
      "37.0",
      "1.0",
      "37.0",
      "2.0",
      "37.0",
      "3.0",
      "37.0",
      "4.0",
      "37.0",
      "5.0",
      "37.0",
      "6.0",
      "37.0",
      "7.0",
      "37.0",
      "8.0",
      "37.0",
      "9.0",
      "37.0",
      "10.0",
      "37.0",
      "11.0",
      "37.0",
      "12.0",
      "37.0",
      "13.0",
      "37.0",
      "14.0",
      "37.0",
      "15.0",
      "37.0",
      "16.0",
      "37.0",
      "17.0",
      "37.0",
      "18.0",
      "37.0",
      "19.0",
      "37.0",
      "20.0",
      "37.0",
      "21.0",
      "37.0",
      "22.0",
      "37.0",
      "23.0",
      "37.0",
      "24.0",
      "37.0",
      "25.0",
      "37.0",
      "26.0",
      "37.0",
      "27.0",
      "37.0",
      "28.0",
      "37.0",
      "29.0",
      "37.0",
      "30.0",
      "37.0",
      "31.0",
      "37.0",
      "32.0",
      "37.0",
      "33.0",
      "37.0",
      "34.0",
      "37.0",
      "35.0",
      "37.0",
      "36.0",
      "37.0",
      "37.0",
      "37.0",
      "38.0",
      "37.0",
      "39.0",
      "37.0",
      "40.0",
      "37.0",
      "41.0",
      "37.0",
      "42.0",
      "37.0",
      "43.0",
      "37.0",
      "44.0",
      "37.0",
      "45.0",
      "37.0",
      "46.0",
      "37.0",
      "47.0",
      "37.0",
      "48.0",
      "37.0",
      "49.0",
      "37.0",
      "50.0",
      "37.0",
      "51.0",
      "37.0",
      "52.0",
      "37.0",
      "53.0",
      "37.0",
      "54.0",
      "37.0",
      "55.0",
      "37.0",
      "56.0",
      "37.0",
      "57.0",
      "37.0",
      "58.0",
      "37.0",
      "59.0",
      "37.0",
      "60.0",
      "37.0",
      "61.0",
      "37.0",
      "62.0",
      "37.0",
      "63.0",
      "37.0",
      "64.0",
      "37.0",
      "65.0",
      "37.0",
      "66.0",
      "37.0",
      "67.0",
      "37.0",
      "68.0",
      "37.0",
      "69.0",
      "37.0",
      "70.0",
      "37.0",
      "71.0",
      "37.0",
      "72.0",
      "37.0",
      "73.0",
      "37.0",
      "74.0",
      "37.0",
      "75.0",
      "37.0",
      "76.0",
      "37.0",
      "77.0",
      "37.0",
      "78.0",
      "37.0",
      "79.0",
      "37.0",
      "80.0",
      "37.0",
      "81.0",
      "37.0",
      "82.0",
      "37.0",
      "83.0",
      "37.0",
      "84.0",
      "37.0",
      "85.0",
      "37.0",
      "86.0",
      "37.0",
      "87.0",
      "37.0",
      "88.0",
      "37.0",
      "89.0",
      "37.0",
      "90.0",
      "37.0",
      "91.0",
      "37.0",
      "92.0",
      "37.0",
      "93.0",
      "37.0",
      "94.0",
      "37.0",
      "95.0",
      "37.0",
      "96.0",
      "37.0",
      "97.0",
      "37.0",
      "98.0",
      "37.0",
      "99.0",
      "38.0",
      "1.0",
      "38.0",
      "2.0",
      "38.0",
      "3.0",
      "38.0",
      "4.0",
      "38.0",
      "5.0",
      "38.0",
      "6.0",
      "38.0",
      "7.0",
      "38.0",
      "8.0",
      "38.0",
      "9.0",
      "38.0",
      "10.0",
      "38.0",
      "11.0",
      "38.0",
      "12.0",
      "38.0",
      "13.0",
      "38.0",
      "14.0",
      "38.0",
      "15.0",
      "38.0",
      "16.0",
      "38.0",
      "17.0",
      "38.0",
      "18.0",
      "38.0",
      "19.0",
      "38.0",
      "20.0",
      "38.0",
      "21.0",
      "38.0",
      "22.0",
      "38.0",
      "23.0",
      "38.0",
      "24.0",
      "38.0",
      "25.0",
      "38.0",
      "26.0",
      "38.0",
      "27.0",
      "38.0",
      "28.0",
      "38.0",
      "29.0",
      "38.0",
      "30.0",
      "38.0",
      "31.0",
      "38.0",
      "32.0",
      "38.0",
      "33.0",
      "38.0",
      "34.0",
      "38.0",
      "35.0",
      "38.0",
      "36.0",
      "38.0",
      "37.0",
      "38.0",
      "38.0",
      "38.0",
      "39.0",
      "38.0",
      "40.0",
      "38.0",
      "41.0",
      "38.0",
      "42.0",
      "38.0",
      "43.0",
      "38.0",
      "44.0",
      "38.0",
      "45.0",
      "38.0",
      "46.0",
      "38.0",
      "47.0",
      "38.0",
      "48.0",
      "38.0",
      "49.0",
      "38.0",
      "50.0",
      "38.0",
      "51.0",
      "38.0",
      "52.0",
      "38.0",
      "53.0",
      "38.0",
      "54.0",
      "38.0",
      "55.0",
      "38.0",
      "56.0",
      "38.0",
      "57.0",
      "38.0",
      "58.0",
      "38.0",
      "59.0",
      "38.0",
      "60.0",
      "38.0",
      "61.0",
      "38.0",
      "62.0",
      "38.0",
      "63.0",
      "38.0",
      "64.0",
      "38.0",
      "65.0",
      "38.0",
      "66.0",
      "38.0",
      "67.0",
      "38.0",
      "68.0",
      "38.0",
      "69.0",
      "38.0",
      "70.0",
      "38.0",
      "71.0",
      "38.0",
      "72.0",
      "38.0",
      "73.0",
      "38.0",
      "74.0",
      "38.0",
      "75.0",
      "38.0",
      "76.0",
      "38.0",
      "77.0",
      "38.0",
      "78.0",
      "38.0",
      "79.0",
      "38.0",
      "80.0",
      "38.0",
      "81.0",
      "38.0",
      "82.0",
      "38.0",
      "83.0",
      "38.0",
      "84.0",
      "38.0",
      "85.0",
      "38.0",
      "86.0",
      "38.0",
      "87.0",
      "38.0",
      "88.0",
      "38.0",
      "89.0",
      "38.0",
      "90.0",
      "38.0",
      "91.0",
      "38.0",
      "92.0",
      "38.0",
      "93.0",
      "38.0",
      "94.0",
      "38.0",
      "95.0",
      "38.0",
      "96.0",
      "38.0",
      "97.0",
      "38.0",
      "98.0",
      "38.0",
      "99.0",
      "39.0",
      "1.0",
      "39.0",
      "2.0",
      "39.0",
      "3.0",
      "39.0",
      "4.0",
      "39.0",
      "5.0",
      "39.0",
      "6.0",
      "39.0",
      "7.0",
      "39.0",
      "8.0",
      "39.0",
      "9.0",
      "39.0",
      "10.0",
      "39.0",
      "11.0",
      "39.0",
      "12.0",
      "39.0",
      "13.0",
      "39.0",
      "14.0",
      "39.0",
      "15.0",
      "39.0",
      "16.0",
      "39.0",
      "17.0",
      "39.0",
      "18.0",
      "39.0",
      "19.0",
      "39.0",
      "20.0",
      "39.0",
      "21.0",
      "39.0",
      "22.0",
      "39.0",
      "23.0",
      "39.0",
      "24.0",
      "39.0",
      "25.0",
      "39.0",
      "26.0",
      "39.0",
      "27.0",
      "39.0",
      "28.0",
      "39.0",
      "29.0",
      "39.0",
      "30.0",
      "39.0",
      "31.0",
      "39.0",
      "32.0",
      "39.0",
      "33.0",
      "39.0",
      "34.0",
      "39.0",
      "35.0",
      "39.0",
      "36.0",
      "39.0",
      "37.0",
      "39.0",
      "38.0",
      "39.0",
      "39.0",
      "39.0",
      "40.0",
      "39.0",
      "41.0",
      "39.0",
      "42.0",
      "39.0",
      "43.0",
      "39.0",
      "44.0",
      "39.0",
      "45.0",
      "39.0",
      "46.0",
      "39.0",
      "47.0",
      "39.0",
      "48.0",
      "39.0",
      "49.0",
      "39.0",
      "50.0",
      "39.0",
      "51.0",
      "39.0",
      "52.0",
      "39.0",
      "53.0",
      "39.0",
      "54.0",
      "39.0",
      "55.0",
      "39.0",
      "56.0",
      "39.0",
      "57.0",
      "39.0",
      "58.0",
      "39.0",
      "59.0",
      "39.0",
      "60.0",
      "39.0",
      "61.0",
      "39.0",
      "62.0",
      "39.0",
      "63.0",
      "39.0",
      "64.0",
      "39.0",
      "65.0",
      "39.0",
      "66.0",
      "39.0",
      "67.0",
      "39.0",
      "68.0",
      "39.0",
      "69.0",
      "39.0",
      "70.0",
      "39.0",
      "71.0",
      "39.0",
      "72.0",
      "39.0",
      "73.0",
      "39.0",
      "74.0",
      "39.0",
      "75.0",
      "39.0",
      "76.0",
      "39.0",
      "77.0",
      "39.0",
      "78.0",
      "39.0",
      "79.0",
      "39.0",
      "80.0",
      "39.0",
      "81.0",
      "39.0",
      "82.0",
      "39.0",
      "83.0",
      "39.0",
      "84.0",
      "39.0",
      "85.0",
      "39.0",
      "86.0",
      "39.0",
      "87.0",
      "39.0",
      "88.0",
      "39.0",
      "89.0",
      "39.0",
      "90.0",
      "39.0",
      "91.0",
      "39.0",
      "92.0",
      "39.0",
      "93.0",
      "39.0",
      "94.0",
      "39.0",
      "95.0",
      "39.0",
      "96.0",
      "39.0",
      "97.0",
      "39.0",
      "98.0",
      "39.0",
      "99.0",
      "40.0",
      "1.0",
      "40.0",
      "2.0",
      "40.0",
      "3.0",
      "40.0",
      "4.0",
      "40.0",
      "5.0",
      "40.0",
      "6.0",
      "40.0",
      "7.0",
      "40.0",
      "8.0",
      "40.0",
      "9.0",
      "40.0",
      "10.0",
      "40.0",
      "11.0",
      "40.0",
      "12.0",
      "40.0",
      "13.0",
      "40.0",
      "14.0",
      "40.0",
      "15.0",
      "40.0",
      "16.0",
      "40.0",
      "17.0",
      "40.0",
      "18.0",
      "40.0",
      "19.0",
      "40.0",
      "20.0",
      "40.0",
      "21.0",
      "40.0",
      "22.0",
      "40.0",
      "23.0",
      "40.0",
      "24.0",
      "40.0",
      "25.0",
      "40.0",
      "26.0",
      "40.0",
      "27.0",
      "40.0",
      "28.0",
      "40.0",
      "29.0",
      "40.0",
      "30.0",
      "40.0",
      "31.0",
      "40.0",
      "32.0",
      "40.0",
      "33.0",
      "40.0",
      "34.0",
      "40.0",
      "35.0",
      "40.0",
      "36.0",
      "40.0",
      "37.0",
      "40.0",
      "38.0",
      "40.0",
      "39.0",
      "40.0",
      "40.0",
      "40.0",
      "41.0",
      "40.0",
      "42.0",
      "40.0",
      "43.0",
      "40.0",
      "44.0",
      "40.0",
      "45.0",
      "40.0",
      "46.0",
      "40.0",
      "47.0",
      "40.0",
      "48.0",
      "40.0",
      "49.0",
      "40.0",
      "50.0",
      "40.0",
      "51.0",
      "40.0",
      "52.0",
      "40.0",
      "53.0",
      "40.0",
      "54.0",
      "40.0",
      "55.0",
      "40.0",
      "56.0",
      "40.0",
      "57.0",
      "40.0",
      "58.0",
      "40.0",
      "59.0",
      "40.0",
      "60.0",
      "40.0",
      "61.0",
      "40.0",
      "62.0",
      "40.0",
      "63.0",
      "40.0",
      "64.0",
      "40.0",
      "65.0",
      "40.0",
      "66.0",
      "40.0",
      "67.0",
      "40.0",
      "68.0",
      "40.0",
      "69.0",
      "40.0",
      "70.0",
      "40.0",
      "71.0",
      "40.0",
      "72.0",
      "40.0",
      "73.0",
      "40.0",
      "74.0",
      "40.0",
      "75.0",
      "40.0",
      "76.0",
      "40.0",
      "77.0",
      "40.0",
      "78.0",
      "40.0",
      "79.0",
      "40.0",
      "80.0",
      "40.0",
      "81.0",
      "40.0",
      "82.0",
      "40.0",
      "83.0",
      "40.0",
      "84.0",
      "40.0",
      "85.0",
      "40.0",
      "86.0",
      "40.0",
      "87.0",
      "40.0",
      "88.0",
      "40.0",
      "89.0",
      "40.0",
      "90.0",
      "40.0",
      "91.0",
      "40.0",
      "92.0",
      "40.0",
      "93.0",
      "40.0",
      "94.0",
      "40.0",
      "95.0",
      "40.0",
      "96.0",
      "40.0",
      "97.0",
      "40.0",
      "98.0",
      "40.0",
      "99.0",
      "41.0",
      "1.0",
      "41.0",
      "2.0",
      "41.0",
      "3.0",
      "41.0",
      "4.0",
      "41.0",
      "5.0",
      "41.0",
      "6.0",
      "41.0",
      "7.0",
      "41.0",
      "8.0",
      "41.0",
      "9.0",
      "41.0",
      "10.0",
      "41.0",
      "11.0",
      "41.0",
      "12.0",
      "41.0",
      "13.0",
      "41.0",
      "14.0",
      "41.0",
      "15.0",
      "41.0",
      "16.0",
      "41.0",
      "17.0",
      "41.0",
      "18.0",
      "41.0",
      "19.0",
      "41.0",
      "20.0",
      "41.0",
      "21.0",
      "41.0",
      "22.0",
      "41.0",
      "23.0",
      "41.0",
      "24.0",
      "41.0",
      "25.0",
      "41.0",
      "26.0",
      "41.0",
      "27.0",
      "41.0",
      "28.0",
      "41.0",
      "29.0",
      "41.0",
      "30.0",
      "41.0",
      "31.0",
      "41.0",
      "32.0",
      "41.0",
      "33.0",
      "41.0",
      "34.0",
      "41.0",
      "35.0",
      "41.0",
      "36.0",
      "41.0",
      "37.0",
      "41.0",
      "38.0",
      "41.0",
      "39.0",
      "41.0",
      "40.0",
      "41.0",
      "41.0",
      "41.0",
      "42.0",
      "41.0",
      "43.0",
      "41.0",
      "44.0",
      "41.0",
      "45.0",
      "41.0",
      "46.0",
      "41.0",
      "47.0",
      "41.0",
      "48.0",
      "41.0",
      "49.0",
      "41.0",
      "50.0",
      "41.0",
      "51.0",
      "41.0",
      "52.0",
      "41.0",
      "53.0",
      "41.0",
      "54.0",
      "41.0",
      "55.0",
      "41.0",
      "56.0",
      "41.0",
      "57.0",
      "41.0",
      "58.0",
      "41.0",
      "59.0",
      "41.0",
      "60.0",
      "41.0",
      "61.0",
      "41.0",
      "62.0",
      "41.0",
      "63.0",
      "41.0",
      "64.0",
      "41.0",
      "65.0",
      "41.0",
      "66.0",
      "41.0",
      "67.0",
      "41.0",
      "68.0",
      "41.0",
      "69.0",
      "41.0",
      "70.0",
      "41.0",
      "71.0",
      "41.0",
      "72.0",
      "41.0",
      "73.0",
      "41.0",
      "74.0",
      "41.0",
      "75.0",
      "41.0",
      "76.0",
      "41.0",
      "77.0",
      "41.0",
      "78.0",
      "41.0",
      "79.0",
      "41.0",
      "80.0",
      "41.0",
      "81.0",
      "41.0",
      "82.0",
      "41.0",
      "83.0",
      "41.0",
      "84.0",
      "41.0",
      "85.0",
      "41.0",
      "86.0",
      "41.0",
      "87.0",
      "41.0",
      "88.0",
      "41.0",
      "89.0",
      "41.0",
      "90.0",
      "41.0",
      "91.0",
      "41.0",
      "92.0",
      "41.0",
      "93.0",
      "41.0",
      "94.0",
      "41.0",
      "95.0",
      "41.0",
      "96.0",
      "41.0",
      "97.0",
      "41.0",
      "98.0",
      "41.0",
      "99.0",
      "42.0",
      "1.0",
      "42.0",
      "2.0",
      "42.0",
      "3.0",
      "42.0",
      "4.0",
      "42.0",
      "5.0",
      "42.0",
      "6.0",
      "42.0",
      "7.0",
      "42.0",
      "8.0",
      "42.0",
      "9.0",
      "42.0",
      "10.0",
      "42.0",
      "11.0",
      "42.0",
      "12.0",
      "42.0",
      "13.0",
      "42.0",
      "14.0",
      "42.0",
      "15.0",
      "42.0",
      "16.0",
      "42.0",
      "17.0",
      "42.0",
      "18.0",
      "42.0",
      "19.0",
      "42.0",
      "20.0",
      "42.0",
      "21.0",
      "42.0",
      "22.0",
      "42.0",
      "23.0",
      "42.0",
      "24.0",
      "42.0",
      "25.0",
      "42.0",
      "26.0",
      "42.0",
      "27.0",
      "42.0",
      "28.0",
      "42.0",
      "29.0",
      "42.0",
      "30.0",
      "42.0",
      "31.0",
      "42.0",
      "32.0",
      "42.0",
      "33.0",
      "42.0",
      "34.0",
      "42.0",
      "35.0",
      "42.0",
      "36.0",
      "42.0",
      "37.0",
      "42.0",
      "38.0",
      "42.0",
      "39.0",
      "42.0",
      "40.0",
      "42.0",
      "41.0",
      "42.0",
      "42.0",
      "42.0",
      "43.0",
      "42.0",
      "44.0",
      "42.0",
      "45.0",
      "42.0",
      "46.0",
      "42.0",
      "47.0",
      "42.0",
      "48.0",
      "42.0",
      "49.0",
      "42.0",
      "50.0",
      "42.0",
      "51.0",
      "42.0",
      "52.0",
      "42.0",
      "53.0",
      "42.0",
      "54.0",
      "42.0",
      "55.0",
      "42.0",
      "56.0",
      "42.0",
      "57.0",
      "42.0",
      "58.0",
      "42.0",
      "59.0",
      "42.0",
      "60.0",
      "42.0",
      "61.0",
      "42.0",
      "62.0",
      "42.0",
      "63.0",
      "42.0",
      "64.0",
      "42.0",
      "65.0",
      "42.0",
      "66.0",
      "42.0",
      "67.0",
      "42.0",
      "68.0",
      "42.0",
      "69.0",
      "42.0",
      "70.0",
      "42.0",
      "71.0",
      "42.0",
      "72.0",
      "42.0",
      "73.0",
      "42.0",
      "74.0",
      "42.0",
      "75.0",
      "42.0",
      "76.0",
      "42.0",
      "77.0",
      "42.0",
      "78.0",
      "42.0",
      "79.0",
      "42.0",
      "80.0",
      "42.0",
      "81.0",
      "42.0",
      "82.0",
      "42.0",
      "83.0",
      "42.0",
      "84.0",
      "42.0",
      "85.0",
      "42.0",
      "86.0",
      "42.0",
      "87.0",
      "42.0",
      "88.0",
      "42.0",
      "89.0",
      "42.0",
      "90.0",
      "42.0",
      "91.0",
      "42.0",
      "92.0",
      "42.0",
      "93.0",
      "42.0",
      "94.0",
      "42.0",
      "95.0",
      "42.0",
      "96.0",
      "42.0",
      "97.0",
      "42.0",
      "98.0",
      "42.0",
      "99.0",
      "43.0",
      "1.0",
      "43.0",
      "2.0",
      "43.0",
      "3.0",
      "43.0",
      "4.0",
      "43.0",
      "5.0",
      "43.0",
      "6.0",
      "43.0",
      "7.0",
      "43.0",
      "8.0",
      "43.0",
      "9.0",
      "43.0",
      "10.0",
      "43.0",
      "11.0",
      "43.0",
      "12.0",
      "43.0",
      "13.0",
      "43.0",
      "14.0",
      "43.0",
      "15.0",
      "43.0",
      "16.0",
      "43.0",
      "17.0",
      "43.0",
      "18.0",
      "43.0",
      "19.0",
      "43.0",
      "20.0",
      "43.0",
      "21.0",
      "43.0",
      "22.0",
      "43.0",
      "23.0",
      "43.0",
      "24.0",
      "43.0",
      "25.0",
      "43.0",
      "26.0",
      "43.0",
      "27.0",
      "43.0",
      "28.0",
      "43.0",
      "29.0",
      "43.0",
      "30.0",
      "43.0",
      "31.0",
      "43.0",
      "32.0",
      "43.0",
      "33.0",
      "43.0",
      "34.0",
      "43.0",
      "35.0",
      "43.0",
      "36.0",
      "43.0",
      "37.0",
      "43.0",
      "38.0",
      "43.0",
      "39.0",
      "43.0",
      "40.0",
      "43.0",
      "41.0",
      "43.0",
      "42.0",
      "43.0",
      "43.0",
      "43.0",
      "44.0",
      "43.0",
      "45.0",
      "43.0",
      "46.0",
      "43.0",
      "47.0",
      "43.0",
      "48.0",
      "43.0",
      "49.0",
      "43.0",
      "50.0",
      "43.0",
      "51.0",
      "43.0",
      "52.0",
      "43.0",
      "53.0",
      "43.0",
      "54.0",
      "43.0",
      "55.0",
      "43.0",
      "56.0",
      "43.0",
      "57.0",
      "43.0",
      "58.0",
      "43.0",
      "59.0",
      "43.0",
      "60.0",
      "43.0",
      "61.0",
      "43.0",
      "62.0",
      "43.0",
      "63.0",
      "43.0",
      "64.0",
      "43.0",
      "65.0",
      "43.0",
      "66.0",
      "43.0",
      "67.0",
      "43.0",
      "68.0",
      "43.0",
      "69.0",
      "43.0",
      "70.0",
      "43.0",
      "71.0",
      "43.0",
      "72.0",
      "43.0",
      "73.0",
      "43.0",
      "74.0",
      "43.0",
      "75.0",
      "43.0",
      "76.0",
      "43.0",
      "77.0",
      "43.0",
      "78.0",
      "43.0",
      "79.0",
      "43.0",
      "80.0",
      "43.0",
      "81.0",
      "43.0",
      "82.0",
      "43.0",
      "83.0",
      "43.0",
      "84.0",
      "43.0",
      "85.0",
      "43.0",
      "86.0",
      "43.0",
      "87.0",
      "43.0",
      "88.0",
      "43.0",
      "89.0",
      "43.0",
      "90.0",
      "43.0",
      "91.0",
      "43.0",
      "92.0",
      "43.0",
      "93.0",
      "43.0",
      "94.0",
      "43.0",
      "95.0",
      "43.0",
      "96.0",
      "43.0",
      "97.0",
      "43.0",
      "98.0",
      "43.0",
      "99.0",
      "44.0",
      "1.0",
      "44.0",
      "2.0",
      "44.0",
      "3.0",
      "44.0",
      "4.0",
      "44.0",
      "5.0",
      "44.0",
      "6.0",
      "44.0",
      "7.0",
      "44.0",
      "8.0",
      "44.0",
      "9.0",
      "44.0",
      "10.0",
      "44.0",
      "11.0",
      "44.0",
      "12.0",
      "44.0",
      "13.0",
      "44.0",
      "14.0",
      "44.0",
      "15.0",
      "44.0",
      "16.0",
      "44.0",
      "17.0",
      "44.0",
      "18.0",
      "44.0",
      "19.0",
      "44.0",
      "20.0",
      "44.0",
      "21.0",
      "44.0",
      "22.0",
      "44.0",
      "23.0",
      "44.0",
      "24.0",
      "44.0",
      "25.0",
      "44.0",
      "26.0",
      "44.0",
      "27.0",
      "44.0",
      "28.0",
      "44.0",
      "29.0",
      "44.0",
      "30.0",
      "44.0",
      "31.0",
      "44.0",
      "32.0",
      "44.0",
      "33.0",
      "44.0",
      "34.0",
      "44.0",
      "35.0",
      "44.0",
      "36.0",
      "44.0",
      "37.0",
      "44.0",
      "38.0",
      "44.0",
      "39.0",
      "44.0",
      "40.0",
      "44.0",
      "41.0",
      "44.0",
      "42.0",
      "44.0",
      "43.0",
      "44.0",
      "44.0",
      "44.0",
      "45.0",
      "44.0",
      "46.0",
      "44.0",
      "47.0",
      "44.0",
      "48.0",
      "44.0",
      "49.0",
      "44.0",
      "50.0",
      "44.0",
      "51.0",
      "44.0",
      "52.0",
      "44.0",
      "53.0",
      "44.0",
      "54.0",
      "44.0",
      "55.0",
      "44.0",
      "56.0",
      "44.0",
      "57.0",
      "44.0",
      "58.0",
      "44.0",
      "59.0",
      "44.0",
      "60.0",
      "44.0",
      "61.0",
      "44.0",
      "62.0",
      "44.0",
      "63.0",
      "44.0",
      "64.0",
      "44.0",
      "65.0",
      "44.0",
      "66.0",
      "44.0",
      "67.0",
      "44.0",
      "68.0",
      "44.0",
      "69.0",
      "44.0",
      "70.0",
      "44.0",
      "71.0",
      "44.0",
      "72.0",
      "44.0",
      "73.0",
      "44.0",
      "74.0",
      "44.0",
      "75.0",
      "44.0",
      "76.0",
      "44.0",
      "77.0",
      "44.0",
      "78.0",
      "44.0",
      "79.0",
      "44.0",
      "80.0",
      "44.0",
      "81.0",
      "44.0",
      "82.0",
      "44.0",
      "83.0",
      "44.0",
      "84.0",
      "44.0",
      "85.0",
      "44.0",
      "86.0",
      "44.0",
      "87.0",
      "44.0",
      "88.0",
      "44.0",
      "89.0",
      "44.0",
      "90.0",
      "44.0",
      "91.0",
      "44.0",
      "92.0",
      "44.0",
      "93.0",
      "44.0",
      "94.0",
      "44.0",
      "95.0",
      "44.0",
      "96.0",
      "44.0",
      "97.0",
      "44.0",
      "98.0",
      "44.0",
      "99.0",
      "45.0",
      "1.0",
      "45.0",
      "2.0",
      "45.0",
      "3.0",
      "45.0",
      "4.0",
      "45.0",
      "5.0",
      "45.0",
      "6.0",
      "45.0",
      "7.0",
      "45.0",
      "8.0",
      "45.0",
      "9.0",
      "45.0",
      "10.0",
      "45.0",
      "11.0",
      "45.0",
      "12.0",
      "45.0",
      "13.0",
      "45.0",
      "14.0",
      "45.0",
      "15.0",
      "45.0",
      "16.0",
      "45.0",
      "17.0",
      "45.0",
      "18.0",
      "45.0",
      "19.0",
      "45.0",
      "20.0",
      "45.0",
      "21.0",
      "45.0",
      "22.0",
      "45.0",
      "23.0",
      "45.0",
      "24.0",
      "45.0",
      "25.0",
      "45.0",
      "26.0",
      "45.0",
      "27.0",
      "45.0",
      "28.0",
      "45.0",
      "29.0",
      "45.0",
      "30.0",
      "45.0",
      "31.0",
      "45.0",
      "32.0",
      "45.0",
      "33.0",
      "45.0",
      "34.0",
      "45.0",
      "35.0",
      "45.0",
      "36.0",
      "45.0",
      "37.0",
      "45.0",
      "38.0",
      "45.0",
      "39.0",
      "45.0",
      "40.0",
      "45.0",
      "41.0",
      "45.0",
      "42.0",
      "45.0",
      "43.0",
      "45.0",
      "44.0",
      "45.0",
      "45.0",
      "45.0",
      "46.0",
      "45.0",
      "47.0",
      "45.0",
      "48.0",
      "45.0",
      "49.0",
      "45.0",
      "50.0",
      "45.0",
      "51.0",
      "45.0",
      "52.0",
      "45.0",
      "53.0",
      "45.0",
      "54.0",
      "45.0",
      "55.0",
      "45.0",
      "56.0",
      "45.0",
      "57.0",
      "45.0",
      "58.0",
      "45.0",
      "59.0",
      "45.0",
      "60.0",
      "45.0",
      "61.0",
      "45.0",
      "62.0",
      "45.0",
      "63.0",
      "45.0",
      "64.0",
      "45.0",
      "65.0",
      "45.0",
      "66.0",
      "45.0",
      "67.0",
      "45.0",
      "68.0",
      "45.0",
      "69.0",
      "45.0",
      "70.0",
      "45.0",
      "71.0",
      "45.0",
      "72.0",
      "45.0",
      "73.0",
      "45.0",
      "74.0",
      "45.0",
      "75.0",
      "45.0",
      "76.0",
      "45.0",
      "77.0",
      "45.0",
      "78.0",
      "45.0",
      "79.0",
      "45.0",
      "80.0",
      "45.0",
      "81.0",
      "45.0",
      "82.0",
      "45.0",
      "83.0",
      "45.0",
      "84.0",
      "45.0",
      "85.0",
      "45.0",
      "86.0",
      "45.0",
      "87.0",
      "45.0",
      "88.0",
      "45.0",
      "89.0",
      "45.0",
      "90.0",
      "45.0",
      "91.0",
      "45.0",
      "92.0",
      "45.0",
      "93.0",
      "45.0",
      "94.0",
      "45.0",
      "95.0",
      "45.0",
      "96.0",
      "45.0",
      "97.0",
      "45.0",
      "98.0",
      "45.0",
      "99.0",
      "46.0",
      "1.0",
      "46.0",
      "2.0",
      "46.0",
      "3.0",
      "46.0",
      "4.0",
      "46.0",
      "5.0",
      "46.0",
      "6.0",
      "46.0",
      "7.0",
      "46.0",
      "8.0",
      "46.0",
      "9.0",
      "46.0",
      "10.0",
      "46.0",
      "11.0",
      "46.0",
      "12.0",
      "46.0",
      "13.0",
      "46.0",
      "14.0",
      "46.0",
      "15.0",
      "46.0",
      "16.0",
      "46.0",
      "17.0",
      "46.0",
      "18.0",
      "46.0",
      "19.0",
      "46.0",
      "20.0",
      "46.0",
      "21.0",
      "46.0",
      "22.0",
      "46.0",
      "23.0",
      "46.0",
      "24.0",
      "46.0",
      "25.0",
      "46.0",
      "26.0",
      "46.0",
      "27.0",
      "46.0",
      "28.0",
      "46.0",
      "29.0",
      "46.0",
      "30.0",
      "46.0",
      "31.0",
      "46.0",
      "32.0",
      "46.0",
      "33.0",
      "46.0",
      "34.0",
      "46.0",
      "35.0",
      "46.0",
      "36.0",
      "46.0",
      "37.0",
      "46.0",
      "38.0",
      "46.0",
      "39.0",
      "46.0",
      "40.0",
      "46.0",
      "41.0",
      "46.0",
      "42.0",
      "46.0",
      "43.0",
      "46.0",
      "44.0",
      "46.0",
      "45.0",
      "46.0",
      "46.0",
      "46.0",
      "47.0",
      "46.0",
      "48.0",
      "46.0",
      "49.0",
      "46.0",
      "50.0",
      "46.0",
      "51.0",
      "46.0",
      "52.0",
      "46.0",
      "53.0",
      "46.0",
      "54.0",
      "46.0",
      "55.0",
      "46.0",
      "56.0",
      "46.0",
      "57.0",
      "46.0",
      "58.0",
      "46.0",
      "59.0",
      "46.0",
      "60.0",
      "46.0",
      "61.0",
      "46.0",
      "62.0",
      "46.0",
      "63.0",
      "46.0",
      "64.0",
      "46.0",
      "65.0",
      "46.0",
      "66.0",
      "46.0",
      "67.0",
      "46.0",
      "68.0",
      "46.0",
      "69.0",
      "46.0",
      "70.0",
      "46.0",
      "71.0",
      "46.0",
      "72.0",
      "46.0",
      "73.0",
      "46.0",
      "74.0",
      "46.0",
      "75.0",
      "46.0",
      "76.0",
      "46.0",
      "77.0",
      "46.0",
      "78.0",
      "46.0",
      "79.0",
      "46.0",
      "80.0",
      "46.0",
      "81.0",
      "46.0",
      "82.0",
      "46.0",
      "83.0",
      "46.0",
      "84.0",
      "46.0",
      "85.0",
      "46.0",
      "86.0",
      "46.0",
      "87.0",
      "46.0",
      "88.0",
      "46.0",
      "89.0",
      "46.0",
      "90.0",
      "46.0",
      "91.0",
      "46.0",
      "92.0",
      "46.0",
      "93.0",
      "46.0",
      "94.0",
      "46.0",
      "95.0",
      "46.0",
      "96.0",
      "46.0",
      "97.0",
      "46.0",
      "98.0",
      "46.0",
      "99.0",
      "47.0",
      "1.0",
      "47.0",
      "2.0",
      "47.0",
      "3.0",
      "47.0",
      "4.0",
      "47.0",
      "5.0",
      "47.0",
      "6.0",
      "47.0",
      "7.0",
      "47.0",
      "8.0",
      "47.0",
      "9.0",
      "47.0",
      "10.0",
      "47.0",
      "11.0",
      "47.0",
      "12.0",
      "47.0",
      "13.0",
      "47.0",
      "14.0",
      "47.0",
      "15.0",
      "47.0",
      "16.0",
      "47.0",
      "17.0",
      "47.0",
      "18.0",
      "47.0",
      "19.0",
      "47.0",
      "20.0",
      "47.0",
      "21.0",
      "47.0",
      "22.0",
      "47.0",
      "23.0",
      "47.0",
      "24.0",
      "47.0",
      "25.0",
      "47.0",
      "26.0",
      "47.0",
      "27.0",
      "47.0",
      "28.0",
      "47.0",
      "29.0",
      "47.0",
      "30.0",
      "47.0",
      "31.0",
      "47.0",
      "32.0",
      "47.0",
      "33.0",
      "47.0",
      "34.0",
      "47.0",
      "35.0",
      "47.0",
      "36.0",
      "47.0",
      "37.0",
      "47.0",
      "38.0",
      "47.0",
      "39.0",
      "47.0",
      "40.0",
      "47.0",
      "41.0",
      "47.0",
      "42.0",
      "47.0",
      "43.0",
      "47.0",
      "44.0",
      "47.0",
      "45.0",
      "47.0",
      "46.0",
      "47.0",
      "47.0",
      "47.0",
      "48.0",
      "47.0",
      "49.0",
      "47.0",
      "50.0",
      "47.0",
      "51.0",
      "47.0",
      "52.0",
      "47.0",
      "53.0",
      "47.0",
      "54.0",
      "47.0",
      "55.0",
      "47.0",
      "56.0",
      "47.0",
      "57.0",
      "47.0",
      "58.0",
      "47.0",
      "59.0",
      "47.0",
      "60.0",
      "47.0",
      "61.0",
      "47.0",
      "62.0",
      "47.0",
      "63.0",
      "47.0",
      "64.0",
      "47.0",
      "65.0",
      "47.0",
      "66.0",
      "47.0",
      "67.0",
      "47.0",
      "68.0",
      "47.0",
      "69.0",
      "47.0",
      "70.0",
      "47.0",
      "71.0",
      "47.0",
      "72.0",
      "47.0",
      "73.0",
      "47.0",
      "74.0",
      "47.0",
      "75.0",
      "47.0",
      "76.0",
      "47.0",
      "77.0",
      "47.0",
      "78.0",
      "47.0",
      "79.0",
      "47.0",
      "80.0",
      "47.0",
      "81.0",
      "47.0",
      "82.0",
      "47.0",
      "83.0",
      "47.0",
      "84.0",
      "47.0",
      "85.0",
      "47.0",
      "86.0",
      "47.0",
      "87.0",
      "47.0",
      "88.0",
      "47.0",
      "89.0",
      "47.0",
      "90.0",
      "47.0",
      "91.0",
      "47.0",
      "92.0",
      "47.0",
      "93.0",
      "47.0",
      "94.0",
      "47.0",
      "95.0",
      "47.0",
      "96.0",
      "47.0",
      "97.0",
      "47.0",
      "98.0",
      "47.0",
      "99.0",
      "48.0",
      "1.0",
      "48.0",
      "2.0",
      "48.0",
      "3.0",
      "48.0",
      "4.0",
      "48.0",
      "5.0",
      "48.0",
      "6.0",
      "48.0",
      "7.0",
      "48.0",
      "8.0",
      "48.0",
      "9.0",
      "48.0",
      "10.0",
      "48.0",
      "11.0",
      "48.0",
      "12.0",
      "48.0",
      "13.0",
      "48.0",
      "14.0",
      "48.0",
      "15.0",
      "48.0",
      "16.0",
      "48.0",
      "17.0",
      "48.0",
      "18.0",
      "48.0",
      "19.0",
      "48.0",
      "20.0",
      "48.0",
      "21.0",
      "48.0",
      "22.0",
      "48.0",
      "23.0",
      "48.0",
      "24.0",
      "48.0",
      "25.0",
      "48.0",
      "26.0",
      "48.0",
      "27.0",
      "48.0",
      "28.0",
      "48.0",
      "29.0",
      "48.0",
      "30.0",
      "48.0",
      "31.0",
      "48.0",
      "32.0",
      "48.0",
      "33.0",
      "48.0",
      "34.0",
      "48.0",
      "35.0",
      "48.0",
      "36.0",
      "48.0",
      "37.0",
      "48.0",
      "38.0",
      "48.0",
      "39.0",
      "48.0",
      "40.0",
      "48.0",
      "41.0",
      "48.0",
      "42.0",
      "48.0",
      "43.0",
      "48.0",
      "44.0",
      "48.0",
      "45.0",
      "48.0",
      "46.0",
      "48.0",
      "47.0",
      "48.0",
      "48.0",
      "48.0",
      "49.0",
      "48.0",
      "50.0",
      "48.0",
      "51.0",
      "48.0",
      "52.0",
      "48.0",
      "53.0",
      "48.0",
      "54.0",
      "48.0",
      "55.0",
      "48.0",
      "56.0",
      "48.0",
      "57.0",
      "48.0",
      "58.0",
      "48.0",
      "59.0",
      "48.0",
      "60.0",
      "48.0",
      "61.0",
      "48.0",
      "62.0",
      "48.0",
      "63.0",
      "48.0",
      "64.0",
      "48.0",
      "65.0",
      "48.0",
      "66.0",
      "48.0",
      "67.0",
      "48.0",
      "68.0",
      "48.0",
      "69.0",
      "48.0",
      "70.0",
      "48.0",
      "71.0",
      "48.0",
      "72.0",
      "48.0",
      "73.0",
      "48.0",
      "74.0",
      "48.0",
      "75.0",
      "48.0",
      "76.0",
      "48.0",
      "77.0",
      "48.0",
      "78.0",
      "48.0",
      "79.0",
      "48.0",
      "80.0",
      "48.0",
      "81.0",
      "48.0",
      "82.0",
      "48.0",
      "83.0",
      "48.0",
      "84.0",
      "48.0",
      "85.0",
      "48.0",
      "86.0",
      "48.0",
      "87.0",
      "48.0",
      "88.0",
      "48.0",
      "89.0",
      "48.0",
      "90.0",
      "48.0",
      "91.0",
      "48.0",
      "92.0",
      "48.0",
      "93.0",
      "48.0",
      "94.0",
      "48.0",
      "95.0",
      "48.0",
      "96.0",
      "48.0",
      "97.0",
      "48.0",
      "98.0",
      "48.0",
      "99.0",
      "49.0",
      "1.0",
      "49.0",
      "2.0",
      "49.0",
      "3.0",
      "49.0",
      "4.0",
      "49.0",
      "5.0",
      "49.0",
      "6.0",
      "49.0",
      "7.0",
      "49.0",
      "8.0",
      "49.0",
      "9.0",
      "49.0",
      "10.0",
      "49.0",
      "11.0",
      "49.0",
      "12.0",
      "49.0",
      "13.0",
      "49.0",
      "14.0",
      "49.0",
      "15.0",
      "49.0",
      "16.0",
      "49.0",
      "17.0",
      "49.0",
      "18.0",
      "49.0",
      "19.0",
      "49.0",
      "20.0",
      "49.0",
      "21.0",
      "49.0",
      "22.0",
      "49.0",
      "23.0",
      "49.0",
      "24.0",
      "49.0",
      "25.0",
      "49.0",
      "26.0",
      "49.0",
      "27.0",
      "49.0",
      "28.0",
      "49.0",
      "29.0",
      "49.0",
      "30.0",
      "49.0",
      "31.0",
      "49.0",
      "32.0",
      "49.0",
      "33.0",
      "49.0",
      "34.0",
      "49.0",
      "35.0",
      "49.0",
      "36.0",
      "49.0",
      "37.0",
      "49.0",
      "38.0",
      "49.0",
      "39.0",
      "49.0",
      "40.0",
      "49.0",
      "41.0",
      "49.0",
      "42.0",
      "49.0",
      "43.0",
      "49.0",
      "44.0",
      "49.0",
      "45.0",
      "49.0",
      "46.0",
      "49.0",
      "47.0",
      "49.0",
      "48.0",
      "49.0",
      "49.0",
      "49.0",
      "50.0",
      "49.0",
      "51.0",
      "49.0",
      "52.0",
      "49.0",
      "53.0",
      "49.0",
      "54.0",
      "49.0",
      "55.0",
      "49.0",
      "56.0",
      "49.0",
      "57.0",
      "49.0",
      "58.0",
      "49.0",
      "59.0",
      "49.0",
      "60.0",
      "49.0",
      "61.0",
      "49.0",
      "62.0",
      "49.0",
      "63.0",
      "49.0",
      "64.0",
      "49.0",
      "65.0",
      "49.0",
      "66.0",
      "49.0",
      "67.0",
      "49.0",
      "68.0",
      "49.0",
      "69.0",
      "49.0",
      "70.0",
      "49.0",
      "71.0",
      "49.0",
      "72.0",
      "49.0",
      "73.0",
      "49.0",
      "74.0",
      "49.0",
      "75.0",
      "49.0",
      "76.0",
      "49.0",
      "77.0",
      "49.0",
      "78.0",
      "49.0",
      "79.0",
      "49.0",
      "80.0",
      "49.0",
      "81.0",
      "49.0",
      "82.0",
      "49.0",
      "83.0",
      "49.0",
      "84.0",
      "49.0",
      "85.0",
      "49.0",
      "86.0",
      "49.0",
      "87.0",
      "49.0",
      "88.0",
      "49.0",
      "89.0",
      "49.0",
      "90.0",
      "49.0",
      "91.0",
      "49.0",
      "92.0",
      "49.0",
      "93.0",
      "49.0",
      "94.0",
      "49.0",
      "95.0",
      "49.0",
      "96.0",
      "49.0",
      "97.0",
      "49.0",
      "98.0",
      "49.0",
      "99.0",
      "50.0",
      "1.0",
      "50.0",
      "2.0",
      "50.0",
      "3.0",
      "50.0",
      "4.0",
      "50.0",
      "5.0",
      "50.0",
      "6.0",
      "50.0",
      "7.0",
      "50.0",
      "8.0",
      "50.0",
      "9.0",
      "50.0",
      "10.0",
      "50.0",
      "11.0",
      "50.0",
      "12.0",
      "50.0",
      "13.0",
      "50.0",
      "14.0",
      "50.0",
      "15.0",
      "50.0",
      "16.0",
      "50.0",
      "17.0",
      "50.0",
      "18.0",
      "50.0",
      "19.0",
      "50.0",
      "20.0",
      "50.0",
      "21.0",
      "50.0",
      "22.0",
      "50.0",
      "23.0",
      "50.0",
      "24.0",
      "50.0",
      "25.0",
      "50.0",
      "26.0",
      "50.0",
      "27.0",
      "50.0",
      "28.0",
      "50.0",
      "29.0",
      "50.0",
      "30.0",
      "50.0",
      "31.0",
      "50.0",
      "32.0",
      "50.0",
      "33.0",
      "50.0",
      "34.0",
      "50.0",
      "35.0",
      "50.0",
      "36.0",
      "50.0",
      "37.0",
      "50.0",
      "38.0",
      "50.0",
      "39.0",
      "50.0",
      "40.0",
      "50.0",
      "41.0",
      "50.0",
      "42.0",
      "50.0",
      "43.0",
      "50.0",
      "44.0",
      "50.0",
      "45.0",
      "50.0",
      "46.0",
      "50.0",
      "47.0",
      "50.0",
      "48.0",
      "50.0",
      "49.0",
      "50.0",
      "50.0",
      "50.0",
      "51.0",
      "50.0",
      "52.0",
      "50.0",
      "53.0",
      "50.0",
      "54.0",
      "50.0",
      "55.0",
      "50.0",
      "56.0",
      "50.0",
      "57.0",
      "50.0",
      "58.0",
      "50.0",
      "59.0",
      "50.0",
      "60.0",
      "50.0",
      "61.0",
      "50.0",
      "62.0",
      "50.0",
      "63.0",
      "50.0",
      "64.0",
      "50.0",
      "65.0",
      "50.0",
      "66.0",
      "50.0",
      "67.0",
      "50.0",
      "68.0",
      "50.0",
      "69.0",
      "50.0",
      "70.0",
      "50.0",
      "71.0",
      "50.0",
      "72.0",
      "50.0",
      "73.0",
      "50.0",
      "74.0",
      "50.0",
      "75.0",
      "50.0",
      "76.0",
      "50.0",
      "77.0",
      "50.0",
      "78.0",
      "50.0",
      "79.0",
      "50.0",
      "80.0",
      "50.0",
      "81.0",
      "50.0",
      "82.0",
      "50.0",
      "83.0",
      "50.0",
      "84.0",
      "50.0",
      "85.0",
      "50.0",
      "86.0",
      "50.0",
      "87.0",
      "50.0",
      "88.0",
      "50.0",
      "89.0",
      "50.0",
      "90.0",
      "50.0",
      "91.0",
      "50.0",
      "92.0",
      "50.0",
      "93.0",
      "50.0",
      "94.0",
      "50.0",
      "95.0",
      "50.0",
      "96.0",
      "50.0",
      "97.0",
      "50.0",
      "98.0",
      "50.0",
      "99.0",
      "51.0",
      "1.0",
      "51.0",
      "2.0",
      "51.0",
      "3.0",
      "51.0",
      "4.0",
      "51.0",
      "5.0",
      "51.0",
      "6.0",
      "51.0",
      "7.0",
      "51.0",
      "8.0",
      "51.0",
      "9.0",
      "51.0",
      "10.0",
      "51.0",
      "11.0",
      "51.0",
      "12.0",
      "51.0",
      "13.0",
      "51.0",
      "14.0",
      "51.0",
      "15.0",
      "51.0",
      "16.0",
      "51.0",
      "17.0",
      "51.0",
      "18.0",
      "51.0",
      "19.0",
      "51.0",
      "20.0",
      "51.0",
      "21.0",
      "51.0",
      "22.0",
      "51.0",
      "23.0",
      "51.0",
      "24.0",
      "51.0",
      "25.0",
      "51.0",
      "26.0",
      "51.0",
      "27.0",
      "51.0",
      "28.0",
      "51.0",
      "29.0",
      "51.0",
      "30.0",
      "51.0",
      "31.0",
      "51.0",
      "32.0",
      "51.0",
      "33.0",
      "51.0",
      "34.0",
      "51.0",
      "35.0",
      "51.0",
      "36.0",
      "51.0",
      "37.0",
      "51.0",
      "38.0",
      "51.0",
      "39.0",
      "51.0",
      "40.0",
      "51.0",
      "41.0",
      "51.0",
      "42.0",
      "51.0",
      "43.0",
      "51.0",
      "44.0",
      "51.0",
      "45.0",
      "51.0",
      "46.0",
      "51.0",
      "47.0",
      "51.0",
      "48.0",
      "51.0",
      "49.0",
      "51.0",
      "50.0",
      "51.0",
      "51.0",
      "51.0",
      "52.0",
      "51.0",
      "53.0",
      "51.0",
      "54.0",
      "51.0",
      "55.0",
      "51.0",
      "56.0",
      "51.0",
      "57.0",
      "51.0",
      "58.0",
      "51.0",
      "59.0",
      "51.0",
      "60.0",
      "51.0",
      "61.0",
      "51.0",
      "62.0",
      "51.0",
      "63.0",
      "51.0",
      "64.0",
      "51.0",
      "65.0",
      "51.0",
      "66.0",
      "51.0",
      "67.0",
      "51.0",
      "68.0",
      "51.0",
      "69.0",
      "51.0",
      "70.0",
      "51.0",
      "71.0",
      "51.0",
      "72.0",
      "51.0",
      "73.0",
      "51.0",
      "74.0",
      "51.0",
      "75.0",
      "51.0",
      "76.0",
      "51.0",
      "77.0",
      "51.0",
      "78.0",
      "51.0",
      "79.0",
      "51.0",
      "80.0",
      "51.0",
      "81.0",
      "51.0",
      "82.0",
      "51.0",
      "83.0",
      "51.0",
      "84.0",
      "51.0",
      "85.0",
      "51.0",
      "86.0",
      "51.0",
      "87.0",
      "51.0",
      "88.0",
      "51.0",
      "89.0",
      "51.0",
      "90.0",
      "51.0",
      "91.0",
      "51.0",
      "92.0",
      "51.0",
      "93.0",
      "51.0",
      "94.0",
      "51.0",
      "95.0",
      "51.0",
      "96.0",
      "51.0",
      "97.0",
      "51.0",
      "98.0",
      "51.0",
      "99.0",
      "52.0",
      "1.0",
      "52.0",
      "2.0",
      "52.0",
      "3.0",
      "52.0",
      "4.0",
      "52.0",
      "5.0",
      "52.0",
      "6.0",
      "52.0",
      "7.0",
      "52.0",
      "8.0",
      "52.0",
      "9.0",
      "52.0",
      "10.0",
      "52.0",
      "11.0",
      "52.0",
      "12.0",
      "52.0",
      "13.0",
      "52.0",
      "14.0",
      "52.0",
      "15.0",
      "52.0",
      "16.0",
      "52.0",
      "17.0",
      "52.0",
      "18.0",
      "52.0",
      "19.0",
      "52.0",
      "20.0",
      "52.0",
      "21.0",
      "52.0",
      "22.0",
      "52.0",
      "23.0",
      "52.0",
      "24.0",
      "52.0",
      "25.0",
      "52.0",
      "26.0",
      "52.0",
      "27.0",
      "52.0",
      "28.0",
      "52.0",
      "29.0",
      "52.0",
      "30.0",
      "52.0",
      "31.0",
      "52.0",
      "32.0",
      "52.0",
      "33.0",
      "52.0",
      "34.0",
      "52.0",
      "35.0",
      "52.0",
      "36.0",
      "52.0",
      "37.0",
      "52.0",
      "38.0",
      "52.0",
      "39.0",
      "52.0",
      "40.0",
      "52.0",
      "41.0",
      "52.0",
      "42.0",
      "52.0",
      "43.0",
      "52.0",
      "44.0",
      "52.0",
      "45.0",
      "52.0",
      "46.0",
      "52.0",
      "47.0",
      "52.0",
      "48.0",
      "52.0",
      "49.0",
      "52.0",
      "50.0",
      "52.0",
      "51.0",
      "52.0",
      "52.0",
      "52.0",
      "53.0",
      "52.0",
      "54.0",
      "52.0",
      "55.0",
      "52.0",
      "56.0",
      "52.0",
      "57.0",
      "52.0",
      "58.0",
      "52.0",
      "59.0",
      "52.0",
      "60.0",
      "52.0",
      "61.0",
      "52.0",
      "62.0",
      "52.0",
      "63.0",
      "52.0",
      "64.0",
      "52.0",
      "65.0",
      "52.0",
      "66.0",
      "52.0",
      "67.0",
      "52.0",
      "68.0",
      "52.0",
      "69.0",
      "52.0",
      "70.0",
      "52.0",
      "71.0",
      "52.0",
      "72.0",
      "52.0",
      "73.0",
      "52.0",
      "74.0",
      "52.0",
      "75.0",
      "52.0",
      "76.0",
      "52.0",
      "77.0",
      "52.0",
      "78.0",
      "52.0",
      "79.0",
      "52.0",
      "80.0",
      "52.0",
      "81.0",
      "52.0",
      "82.0",
      "52.0",
      "83.0",
      "52.0",
      "84.0",
      "52.0",
      "85.0",
      "52.0",
      "86.0",
      "52.0",
      "87.0",
      "52.0",
      "88.0",
      "52.0",
      "89.0",
      "52.0",
      "90.0",
      "52.0",
      "91.0",
      "52.0",
      "92.0",
      "52.0",
      "93.0",
      "52.0",
      "94.0",
      "52.0",
      "95.0",
      "52.0",
      "96.0",
      "52.0",
      "97.0",
      "52.0",
      "98.0",
      "52.0",
      "99.0",
      "53.0",
      "1.0",
      "53.0",
      "2.0",
      "53.0",
      "3.0",
      "53.0",
      "4.0",
      "53.0",
      "5.0",
      "53.0",
      "6.0",
      "53.0",
      "7.0",
      "53.0",
      "8.0",
      "53.0",
      "9.0",
      "53.0",
      "10.0",
      "53.0",
      "11.0",
      "53.0",
      "12.0",
      "53.0",
      "13.0",
      "53.0",
      "14.0",
      "53.0",
      "15.0",
      "53.0",
      "16.0",
      "53.0",
      "17.0",
      "53.0",
      "18.0",
      "53.0",
      "19.0",
      "53.0",
      "20.0",
      "53.0",
      "21.0",
      "53.0",
      "22.0",
      "53.0",
      "23.0",
      "53.0",
      "24.0",
      "53.0",
      "25.0",
      "53.0",
      "26.0",
      "53.0",
      "27.0",
      "53.0",
      "28.0",
      "53.0",
      "29.0",
      "53.0",
      "30.0",
      "53.0",
      "31.0",
      "53.0",
      "32.0",
      "53.0",
      "33.0",
      "53.0",
      "34.0",
      "53.0",
      "35.0",
      "53.0",
      "36.0",
      "53.0",
      "37.0",
      "53.0",
      "38.0",
      "53.0",
      "39.0",
      "53.0",
      "40.0",
      "53.0",
      "41.0",
      "53.0",
      "42.0",
      "53.0",
      "43.0",
      "53.0",
      "44.0",
      "53.0",
      "45.0",
      "53.0",
      "46.0",
      "53.0",
      "47.0",
      "53.0",
      "48.0",
      "53.0",
      "49.0",
      "53.0",
      "50.0",
      "53.0",
      "51.0",
      "53.0",
      "52.0",
      "53.0",
      "53.0",
      "53.0",
      "54.0",
      "53.0",
      "55.0",
      "53.0",
      "56.0",
      "53.0",
      "57.0",
      "53.0",
      "58.0",
      "53.0",
      "59.0",
      "53.0",
      "60.0",
      "53.0",
      "61.0",
      "53.0",
      "62.0",
      "53.0",
      "63.0",
      "53.0",
      "64.0",
      "53.0",
      "65.0",
      "53.0",
      "66.0",
      "53.0",
      "67.0",
      "53.0",
      "68.0",
      "53.0",
      "69.0",
      "53.0",
      "70.0",
      "53.0",
      "71.0",
      "53.0",
      "72.0",
      "53.0",
      "73.0",
      "53.0",
      "74.0",
      "53.0",
      "75.0",
      "53.0",
      "76.0",
      "53.0",
      "77.0",
      "53.0",
      "78.0",
      "53.0",
      "79.0",
      "53.0",
      "80.0",
      "53.0",
      "81.0",
      "53.0",
      "82.0",
      "53.0",
      "83.0",
      "53.0",
      "84.0",
      "53.0",
      "85.0",
      "53.0",
      "86.0",
      "53.0",
      "87.0",
      "53.0",
      "88.0",
      "53.0",
      "89.0",
      "53.0",
      "90.0",
      "53.0",
      "91.0",
      "53.0",
      "92.0",
      "53.0",
      "93.0",
      "53.0",
      "94.0",
      "53.0",
      "95.0",
      "53.0",
      "96.0",
      "53.0",
      "97.0",
      "53.0",
      "98.0",
      "53.0",
      "99.0",
      "54.0",
      "1.0",
      "54.0",
      "2.0",
      "54.0",
      "3.0",
      "54.0",
      "4.0",
      "54.0",
      "5.0",
      "54.0",
      "6.0",
      "54.0",
      "7.0",
      "54.0",
      "8.0",
      "54.0",
      "9.0",
      "54.0",
      "10.0",
      "54.0",
      "11.0",
      "54.0",
      "12.0",
      "54.0",
      "13.0",
      "54.0",
      "14.0",
      "54.0",
      "15.0",
      "54.0",
      "16.0",
      "54.0",
      "17.0",
      "54.0",
      "18.0",
      "54.0",
      "19.0",
      "54.0",
      "20.0",
      "54.0",
      "21.0",
      "54.0",
      "22.0",
      "54.0",
      "23.0",
      "54.0",
      "24.0",
      "54.0",
      "25.0",
      "54.0",
      "26.0",
      "54.0",
      "27.0",
      "54.0",
      "28.0",
      "54.0",
      "29.0",
      "54.0",
      "30.0",
      "54.0",
      "31.0",
      "54.0",
      "32.0",
      "54.0",
      "33.0",
      "54.0",
      "34.0",
      "54.0",
      "35.0",
      "54.0",
      "36.0",
      "54.0",
      "37.0",
      "54.0",
      "38.0",
      "54.0",
      "39.0",
      "54.0",
      "40.0",
      "54.0",
      "41.0",
      "54.0",
      "42.0",
      "54.0",
      "43.0",
      "54.0",
      "44.0",
      "54.0",
      "45.0",
      "54.0",
      "46.0",
      "54.0",
      "47.0",
      "54.0",
      "48.0",
      "54.0",
      "49.0",
      "54.0",
      "50.0",
      "54.0",
      "51.0",
      "54.0",
      "52.0",
      "54.0",
      "53.0",
      "54.0",
      "54.0",
      "54.0",
      "55.0",
      "54.0",
      "56.0",
      "54.0",
      "57.0",
      "54.0",
      "58.0",
      "54.0",
      "59.0",
      "54.0",
      "60.0",
      "54.0",
      "61.0",
      "54.0",
      "62.0",
      "54.0",
      "63.0",
      "54.0",
      "64.0",
      "54.0",
      "65.0",
      "54.0",
      "66.0",
      "54.0",
      "67.0",
      "54.0",
      "68.0",
      "54.0",
      "69.0",
      "54.0",
      "70.0",
      "54.0",
      "71.0",
      "54.0",
      "72.0",
      "54.0",
      "73.0",
      "54.0",
      "74.0",
      "54.0",
      "75.0",
      "54.0",
      "76.0",
      "54.0",
      "77.0",
      "54.0",
      "78.0",
      "54.0",
      "79.0",
      "54.0",
      "80.0",
      "54.0",
      "81.0",
      "54.0",
      "82.0",
      "54.0",
      "83.0",
      "54.0",
      "84.0",
      "54.0",
      "85.0",
      "54.0",
      "86.0",
      "54.0",
      "87.0",
      "54.0",
      "88.0",
      "54.0",
      "89.0",
      "54.0",
      "90.0",
      "54.0",
      "91.0",
      "54.0",
      "92.0",
      "54.0",
      "93.0",
      "54.0",
      "94.0",
      "54.0",
      "95.0",
      "54.0",
      "96.0",
      "54.0",
      "97.0",
      "54.0",
      "98.0",
      "54.0",
      "99.0",
      "55.0",
      "1.0",
      "55.0",
      "2.0",
      "55.0",
      "3.0",
      "55.0",
      "4.0",
      "55.0",
      "5.0",
      "55.0",
      "6.0",
      "55.0",
      "7.0",
      "55.0",
      "8.0",
      "55.0",
      "9.0",
      "55.0",
      "10.0",
      "55.0",
      "11.0",
      "55.0",
      "12.0",
      "55.0",
      "13.0",
      "55.0",
      "14.0",
      "55.0",
      "15.0",
      "55.0",
      "16.0",
      "55.0",
      "17.0",
      "55.0",
      "18.0",
      "55.0",
      "19.0",
      "55.0",
      "20.0",
      "55.0",
      "21.0",
      "55.0",
      "22.0",
      "55.0",
      "23.0",
      "55.0",
      "24.0",
      "55.0",
      "25.0",
      "55.0",
      "26.0",
      "55.0",
      "27.0",
      "55.0",
      "28.0",
      "55.0",
      "29.0",
      "55.0",
      "30.0",
      "55.0",
      "31.0",
      "55.0",
      "32.0",
      "55.0",
      "33.0",
      "55.0",
      "34.0",
      "55.0",
      "35.0",
      "55.0",
      "36.0",
      "55.0",
      "37.0",
      "55.0",
      "38.0",
      "55.0",
      "39.0",
      "55.0",
      "40.0",
      "55.0",
      "41.0",
      "55.0",
      "42.0",
      "55.0",
      "43.0",
      "55.0",
      "44.0",
      "55.0",
      "45.0",
      "55.0",
      "46.0",
      "55.0",
      "47.0",
      "55.0",
      "48.0",
      "55.0",
      "49.0",
      "55.0",
      "50.0",
      "55.0",
      "51.0",
      "55.0",
      "52.0",
      "55.0",
      "53.0",
      "55.0",
      "54.0",
      "55.0",
      "55.0",
      "55.0",
      "56.0",
      "55.0",
      "57.0",
      "55.0",
      "58.0",
      "55.0",
      "59.0",
      "55.0",
      "60.0",
      "55.0",
      "61.0",
      "55.0",
      "62.0",
      "55.0",
      "63.0",
      "55.0",
      "64.0",
      "55.0",
      "65.0",
      "55.0",
      "66.0",
      "55.0",
      "67.0",
      "55.0",
      "68.0",
      "55.0",
      "69.0",
      "55.0",
      "70.0",
      "55.0",
      "71.0",
      "55.0",
      "72.0",
      "55.0",
      "73.0",
      "55.0",
      "74.0",
      "55.0",
      "75.0",
      "55.0",
      "76.0",
      "55.0",
      "77.0",
      "55.0",
      "78.0",
      "55.0",
      "79.0",
      "55.0",
      "80.0",
      "55.0",
      "81.0",
      "55.0",
      "82.0",
      "55.0",
      "83.0",
      "55.0",
      "84.0",
      "55.0",
      "85.0",
      "55.0",
      "86.0",
      "55.0",
      "87.0",
      "55.0",
      "88.0",
      "55.0",
      "89.0",
      "55.0",
      "90.0",
      "55.0",
      "91.0",
      "55.0",
      "92.0",
      "55.0",
      "93.0",
      "55.0",
      "94.0",
      "55.0",
      "95.0",
      "55.0",
      "96.0",
      "55.0",
      "97.0",
      "55.0",
      "98.0",
      "55.0",
      "99.0",
      "56.0",
      "1.0",
      "56.0",
      "2.0",
      "56.0",
      "3.0",
      "56.0",
      "4.0",
      "56.0",
      "5.0",
      "56.0",
      "6.0",
      "56.0",
      "7.0",
      "56.0",
      "8.0",
      "56.0",
      "9.0",
      "56.0",
      "10.0",
      "56.0",
      "11.0",
      "56.0",
      "12.0",
      "56.0",
      "13.0",
      "56.0",
      "14.0",
      "56.0",
      "15.0",
      "56.0",
      "16.0",
      "56.0",
      "17.0",
      "56.0",
      "18.0",
      "56.0",
      "19.0",
      "56.0",
      "20.0",
      "56.0",
      "21.0",
      "56.0",
      "22.0",
      "56.0",
      "23.0",
      "56.0",
      "24.0",
      "56.0",
      "25.0",
      "56.0",
      "26.0",
      "56.0",
      "27.0",
      "56.0",
      "28.0",
      "56.0",
      "29.0",
      "56.0",
      "30.0",
      "56.0",
      "31.0",
      "56.0",
      "32.0",
      "56.0",
      "33.0",
      "56.0",
      "34.0",
      "56.0",
      "35.0",
      "56.0",
      "36.0",
      "56.0",
      "37.0",
      "56.0",
      "38.0",
      "56.0",
      "39.0",
      "56.0",
      "40.0",
      "56.0",
      "41.0",
      "56.0",
      "42.0",
      "56.0",
      "43.0",
      "56.0",
      "44.0",
      "56.0",
      "45.0",
      "56.0",
      "46.0",
      "56.0",
      "47.0",
      "56.0",
      "48.0",
      "56.0",
      "49.0",
      "56.0",
      "50.0",
      "56.0",
      "51.0",
      "56.0",
      "52.0",
      "56.0",
      "53.0",
      "56.0",
      "54.0",
      "56.0",
      "55.0",
      "56.0",
      "56.0",
      "56.0",
      "57.0",
      "56.0",
      "58.0",
      "56.0",
      "59.0",
      "56.0",
      "60.0",
      "56.0",
      "61.0",
      "56.0",
      "62.0",
      "56.0",
      "63.0",
      "56.0",
      "64.0",
      "56.0",
      "65.0",
      "56.0",
      "66.0",
      "56.0",
      "67.0",
      "56.0",
      "68.0",
      "56.0",
      "69.0",
      "56.0",
      "70.0",
      "56.0",
      "71.0",
      "56.0",
      "72.0",
      "56.0",
      "73.0",
      "56.0",
      "74.0",
      "56.0",
      "75.0",
      "56.0",
      "76.0",
      "56.0",
      "77.0",
      "56.0",
      "78.0",
      "56.0",
      "79.0",
      "56.0",
      "80.0",
      "56.0",
      "81.0",
      "56.0",
      "82.0",
      "56.0",
      "83.0",
      "56.0",
      "84.0",
      "56.0",
      "85.0",
      "56.0",
      "86.0",
      "56.0",
      "87.0",
      "56.0",
      "88.0",
      "56.0",
      "89.0",
      "56.0",
      "90.0",
      "56.0",
      "91.0",
      "56.0",
      "92.0",
      "56.0",
      "93.0",
      "56.0",
      "94.0",
      "56.0",
      "95.0",
      "56.0",
      "96.0",
      "56.0",
      "97.0",
      "56.0",
      "98.0",
      "56.0",
      "99.0",
      "57.0",
      "1.0",
      "57.0",
      "2.0",
      "57.0",
      "3.0",
      "57.0",
      "4.0",
      "57.0",
      "5.0",
      "57.0",
      "6.0",
      "57.0",
      "7.0",
      "57.0",
      "8.0",
      "57.0",
      "9.0",
      "57.0",
      "10.0",
      "57.0",
      "11.0",
      "57.0",
      "12.0",
      "57.0",
      "13.0",
      "57.0",
      "14.0",
      "57.0",
      "15.0",
      "57.0",
      "16.0",
      "57.0",
      "17.0",
      "57.0",
      "18.0",
      "57.0",
      "19.0",
      "57.0",
      "20.0",
      "57.0",
      "21.0",
      "57.0",
      "22.0",
      "57.0",
      "23.0",
      "57.0",
      "24.0",
      "57.0",
      "25.0",
      "57.0",
      "26.0",
      "57.0",
      "27.0",
      "57.0",
      "28.0",
      "57.0",
      "29.0",
      "57.0",
      "30.0",
      "57.0",
      "31.0",
      "57.0",
      "32.0",
      "57.0",
      "33.0",
      "57.0",
      "34.0",
      "57.0",
      "35.0",
      "57.0",
      "36.0",
      "57.0",
      "37.0",
      "57.0",
      "38.0",
      "57.0",
      "39.0",
      "57.0",
      "40.0",
      "57.0",
      "41.0",
      "57.0",
      "42.0",
      "57.0",
      "43.0",
      "57.0",
      "44.0",
      "57.0",
      "45.0",
      "57.0",
      "46.0",
      "57.0",
      "47.0",
      "57.0",
      "48.0",
      "57.0",
      "49.0",
      "57.0",
      "50.0",
      "57.0",
      "51.0",
      "57.0",
      "52.0",
      "57.0",
      "53.0",
      "57.0",
      "54.0",
      "57.0",
      "55.0",
      "57.0",
      "56.0",
      "57.0",
      "57.0",
      "57.0",
      "58.0",
      "57.0",
      "59.0",
      "57.0",
      "60.0",
      "57.0",
      "61.0",
      "57.0",
      "62.0",
      "57.0",
      "63.0",
      "57.0",
      "64.0",
      "57.0",
      "65.0",
      "57.0",
      "66.0",
      "57.0",
      "67.0",
      "57.0",
      "68.0",
      "57.0",
      "69.0",
      "57.0",
      "70.0",
      "57.0",
      "71.0",
      "57.0",
      "72.0",
      "57.0",
      "73.0",
      "57.0",
      "74.0",
      "57.0",
      "75.0",
      "57.0",
      "76.0",
      "57.0",
      "77.0",
      "57.0",
      "78.0",
      "57.0",
      "79.0",
      "57.0",
      "80.0",
      "57.0",
      "81.0",
      "57.0",
      "82.0",
      "57.0",
      "83.0",
      "57.0",
      "84.0",
      "57.0",
      "85.0",
      "57.0",
      "86.0",
      "57.0",
      "87.0",
      "57.0",
      "88.0",
      "57.0",
      "89.0",
      "57.0",
      "90.0",
      "57.0",
      "91.0",
      "57.0",
      "92.0",
      "57.0",
      "93.0",
      "57.0",
      "94.0",
      "57.0",
      "95.0",
      "57.0",
      "96.0",
      "57.0",
      "97.0",
      "57.0",
      "98.0",
      "57.0",
      "99.0",
      "58.0",
      "1.0",
      "58.0",
      "2.0",
      "58.0",
      "3.0",
      "58.0",
      "4.0",
      "58.0",
      "5.0",
      "58.0",
      "6.0",
      "58.0",
      "7.0",
      "58.0",
      "8.0",
      "58.0",
      "9.0",
      "58.0",
      "10.0",
      "58.0",
      "11.0",
      "58.0",
      "12.0",
      "58.0",
      "13.0",
      "58.0",
      "14.0",
      "58.0",
      "15.0",
      "58.0",
      "16.0",
      "58.0",
      "17.0",
      "58.0",
      "18.0",
      "58.0",
      "19.0",
      "58.0",
      "20.0",
      "58.0",
      "21.0",
      "58.0",
      "22.0",
      "58.0",
      "23.0",
      "58.0",
      "24.0",
      "58.0",
      "25.0",
      "58.0",
      "26.0",
      "58.0",
      "27.0",
      "58.0",
      "28.0",
      "58.0",
      "29.0",
      "58.0",
      "30.0",
      "58.0",
      "31.0",
      "58.0",
      "32.0",
      "58.0",
      "33.0",
      "58.0",
      "34.0",
      "58.0",
      "35.0",
      "58.0",
      "36.0",
      "58.0",
      "37.0",
      "58.0",
      "38.0",
      "58.0",
      "39.0",
      "58.0",
      "40.0",
      "58.0",
      "41.0",
      "58.0",
      "42.0",
      "58.0",
      "43.0",
      "58.0",
      "44.0",
      "58.0",
      "45.0",
      "58.0",
      "46.0",
      "58.0",
      "47.0",
      "58.0",
      "48.0",
      "58.0",
      "49.0",
      "58.0",
      "50.0",
      "58.0",
      "51.0",
      "58.0",
      "52.0",
      "58.0",
      "53.0",
      "58.0",
      "54.0",
      "58.0",
      "55.0",
      "58.0",
      "56.0",
      "58.0",
      "57.0",
      "58.0",
      "58.0",
      "58.0",
      "59.0",
      "58.0",
      "60.0",
      "58.0",
      "61.0",
      "58.0",
      "62.0",
      "58.0",
      "63.0",
      "58.0",
      "64.0",
      "58.0",
      "65.0",
      "58.0",
      "66.0",
      "58.0",
      "67.0",
      "58.0",
      "68.0",
      "58.0",
      "69.0",
      "58.0",
      "70.0",
      "58.0",
      "71.0",
      "58.0",
      "72.0",
      "58.0",
      "73.0",
      "58.0",
      "74.0",
      "58.0",
      "75.0",
      "58.0",
      "76.0",
      "58.0",
      "77.0",
      "58.0",
      "78.0",
      "58.0",
      "79.0",
      "58.0",
      "80.0",
      "58.0",
      "81.0",
      "58.0",
      "82.0",
      "58.0",
      "83.0",
      "58.0",
      "84.0",
      "58.0",
      "85.0",
      "58.0",
      "86.0",
      "58.0",
      "87.0",
      "58.0",
      "88.0",
      "58.0",
      "89.0",
      "58.0",
      "90.0",
      "58.0",
      "91.0",
      "58.0",
      "92.0",
      "58.0",
      "93.0",
      "58.0",
      "94.0",
      "58.0",
      "95.0",
      "58.0",
      "96.0",
      "58.0",
      "97.0",
      "58.0",
      "98.0",
      "58.0",
      "99.0",
      "59.0",
      "1.0",
      "59.0",
      "2.0",
      "59.0",
      "3.0",
      "59.0",
      "4.0",
      "59.0",
      "5.0",
      "59.0",
      "6.0",
      "59.0",
      "7.0",
      "59.0",
      "8.0",
      "59.0",
      "9.0",
      "59.0",
      "10.0",
      "59.0",
      "11.0",
      "59.0",
      "12.0",
      "59.0",
      "13.0",
      "59.0",
      "14.0",
      "59.0",
      "15.0",
      "59.0",
      "16.0",
      "59.0",
      "17.0",
      "59.0",
      "18.0",
      "59.0",
      "19.0",
      "59.0",
      "20.0",
      "59.0",
      "21.0",
      "59.0",
      "22.0",
      "59.0",
      "23.0",
      "59.0",
      "24.0",
      "59.0",
      "25.0",
      "59.0",
      "26.0",
      "59.0",
      "27.0",
      "59.0",
      "28.0",
      "59.0",
      "29.0",
      "59.0",
      "30.0",
      "59.0",
      "31.0",
      "59.0",
      "32.0",
      "59.0",
      "33.0",
      "59.0",
      "34.0",
      "59.0",
      "35.0",
      "59.0",
      "36.0",
      "59.0",
      "37.0",
      "59.0",
      "38.0",
      "59.0",
      "39.0",
      "59.0",
      "40.0",
      "59.0",
      "41.0",
      "59.0",
      "42.0",
      "59.0",
      "43.0",
      "59.0",
      "44.0",
      "59.0",
      "45.0",
      "59.0",
      "46.0",
      "59.0",
      "47.0",
      "59.0",
      "48.0",
      "59.0",
      "49.0",
      "59.0",
      "50.0",
      "59.0",
      "51.0",
      "59.0",
      "52.0",
      "59.0",
      "53.0",
      "59.0",
      "54.0",
      "59.0",
      "55.0",
      "59.0",
      "56.0",
      "59.0",
      "57.0",
      "59.0",
      "58.0",
      "59.0",
      "59.0",
      "59.0",
      "60.0",
      "59.0",
      "61.0",
      "59.0",
      "62.0",
      "59.0",
      "63.0",
      "59.0",
      "64.0",
      "59.0",
      "65.0",
      "59.0",
      "66.0",
      "59.0",
      "67.0",
      "59.0",
      "68.0",
      "59.0",
      "69.0",
      "59.0",
      "70.0",
      "59.0",
      "71.0",
      "59.0",
      "72.0",
      "59.0",
      "73.0",
      "59.0",
      "74.0",
      "59.0",
      "75.0",
      "59.0",
      "76.0",
      "59.0",
      "77.0",
      "59.0",
      "78.0",
      "59.0",
      "79.0",
      "59.0",
      "80.0",
      "59.0",
      "81.0",
      "59.0",
      "82.0",
      "59.0",
      "83.0",
      "59.0",
      "84.0",
      "59.0",
      "85.0",
      "59.0",
      "86.0",
      "59.0",
      "87.0",
      "59.0",
      "88.0",
      "59.0",
      "89.0",
      "59.0",
      "90.0",
      "59.0",
      "91.0",
      "59.0",
      "92.0",
      "59.0",
      "93.0",
      "59.0",
      "94.0",
      "59.0",
      "95.0",
      "59.0",
      "96.0",
      "59.0",
      "97.0",
      "59.0",
      "98.0",
      "59.0",
      "99.0",
      "60.0",
      "1.0",
      "60.0",
      "2.0",
      "60.0",
      "3.0",
      "60.0",
      "4.0",
      "60.0",
      "5.0",
      "60.0",
      "6.0",
      "60.0",
      "7.0",
      "60.0",
      "8.0",
      "60.0",
      "9.0",
      "60.0",
      "10.0",
      "60.0",
      "11.0",
      "60.0",
      "12.0",
      "60.0",
      "13.0",
      "60.0",
      "14.0",
      "60.0",
      "15.0",
      "60.0",
      "16.0",
      "60.0",
      "17.0",
      "60.0",
      "18.0",
      "60.0",
      "19.0",
      "60.0",
      "20.0",
      "60.0",
      "21.0",
      "60.0",
      "22.0",
      "60.0",
      "23.0",
      "60.0",
      "24.0",
      "60.0",
      "25.0",
      "60.0",
      "26.0",
      "60.0",
      "27.0",
      "60.0",
      "28.0",
      "60.0",
      "29.0",
      "60.0",
      "30.0",
      "60.0",
      "31.0",
      "60.0",
      "32.0",
      "60.0",
      "33.0",
      "60.0",
      "34.0",
      "60.0",
      "35.0",
      "60.0",
      "36.0",
      "60.0",
      "37.0",
      "60.0",
      "38.0",
      "60.0",
      "39.0",
      "60.0",
      "40.0",
      "60.0",
      "41.0",
      "60.0",
      "42.0",
      "60.0",
      "43.0",
      "60.0",
      "44.0",
      "60.0",
      "45.0",
      "60.0",
      "46.0",
      "60.0",
      "47.0",
      "60.0",
      "48.0",
      "60.0",
      "49.0",
      "60.0",
      "50.0",
      "60.0",
      "51.0",
      "60.0",
      "52.0",
      "60.0",
      "53.0",
      "60.0",
      "54.0",
      "60.0",
      "55.0",
      "60.0",
      "56.0",
      "60.0",
      "57.0",
      "60.0",
      "58.0",
      "60.0",
      "59.0",
      "60.0",
      "60.0",
      "60.0",
      "61.0",
      "60.0",
      "62.0",
      "60.0",
      "63.0",
      "60.0",
      "64.0",
      "60.0",
      "65.0",
      "60.0",
      "66.0",
      "60.0",
      "67.0",
      "60.0",
      "68.0",
      "60.0",
      "69.0",
      "60.0",
      "70.0",
      "60.0",
      "71.0",
      "60.0",
      "72.0",
      "60.0",
      "73.0",
      "60.0",
      "74.0",
      "60.0",
      "75.0",
      "60.0",
      "76.0",
      "60.0",
      "77.0",
      "60.0",
      "78.0",
      "60.0",
      "79.0",
      "60.0",
      "80.0",
      "60.0",
      "81.0",
      "60.0",
      "82.0",
      "60.0",
      "83.0",
      "60.0",
      "84.0",
      "60.0",
      "85.0",
      "60.0",
      "86.0",
      "60.0",
      "87.0",
      "60.0",
      "88.0",
      "60.0",
      "89.0",
      "60.0",
      "90.0",
      "60.0",
      "91.0",
      "60.0",
      "92.0",
      "60.0",
      "93.0",
      "60.0",
      "94.0",
      "60.0",
      "95.0",
      "60.0",
      "96.0",
      "60.0",
      "97.0",
      "60.0",
      "98.0",
      "60.0",
      "99.0",
      "61.0",
      "1.0",
      "61.0",
      "2.0",
      "61.0",
      "3.0",
      "61.0",
      "4.0",
      "61.0",
      "5.0",
      "61.0",
      "6.0",
      "61.0",
      "7.0",
      "61.0",
      "8.0",
      "61.0",
      "9.0",
      "61.0",
      "10.0",
      "61.0",
      "11.0",
      "61.0",
      "12.0",
      "61.0",
      "13.0",
      "61.0",
      "14.0",
      "61.0",
      "15.0",
      "61.0",
      "16.0",
      "61.0",
      "17.0",
      "61.0",
      "18.0",
      "61.0",
      "19.0",
      "61.0",
      "20.0",
      "61.0",
      "21.0",
      "61.0",
      "22.0",
      "61.0",
      "23.0",
      "61.0",
      "24.0",
      "61.0",
      "25.0",
      "61.0",
      "26.0",
      "61.0",
      "27.0",
      "61.0",
      "28.0",
      "61.0",
      "29.0",
      "61.0",
      "30.0",
      "61.0",
      "31.0",
      "61.0",
      "32.0",
      "61.0",
      "33.0",
      "61.0",
      "34.0",
      "61.0",
      "35.0",
      "61.0",
      "36.0",
      "61.0",
      "37.0",
      "61.0",
      "38.0",
      "61.0",
      "39.0",
      "61.0",
      "40.0",
      "61.0",
      "41.0",
      "61.0",
      "42.0",
      "61.0",
      "43.0",
      "61.0",
      "44.0",
      "61.0",
      "45.0",
      "61.0",
      "46.0",
      "61.0",
      "47.0",
      "61.0",
      "48.0",
      "61.0",
      "49.0",
      "61.0",
      "50.0",
      "61.0",
      "51.0",
      "61.0",
      "52.0",
      "61.0",
      "53.0",
      "61.0",
      "54.0",
      "61.0",
      "55.0",
      "61.0",
      "56.0",
      "61.0",
      "57.0",
      "61.0",
      "58.0",
      "61.0",
      "59.0",
      "61.0",
      "60.0",
      "61.0",
      "61.0",
      "61.0",
      "62.0",
      "61.0",
      "63.0",
      "61.0",
      "64.0",
      "61.0",
      "65.0",
      "61.0",
      "66.0",
      "61.0",
      "67.0",
      "61.0",
      "68.0",
      "61.0",
      "69.0",
      "61.0",
      "70.0",
      "61.0",
      "71.0",
      "61.0",
      "72.0",
      "61.0",
      "73.0",
      "61.0",
      "74.0",
      "61.0",
      "75.0",
      "61.0",
      "76.0",
      "61.0",
      "77.0",
      "61.0",
      "78.0",
      "61.0",
      "79.0",
      "61.0",
      "80.0",
      "61.0",
      "81.0",
      "61.0",
      "82.0",
      "61.0",
      "83.0",
      "61.0",
      "84.0",
      "61.0",
      "85.0",
      "61.0",
      "86.0",
      "61.0",
      "87.0",
      "61.0",
      "88.0",
      "61.0",
      "89.0",
      "61.0",
      "90.0",
      "61.0",
      "91.0",
      "61.0",
      "92.0",
      "61.0",
      "93.0",
      "61.0",
      "94.0",
      "61.0",
      "95.0",
      "61.0",
      "96.0",
      "61.0",
      "97.0",
      "61.0",
      "98.0",
      "61.0",
      "99.0",
      "62.0",
      "1.0",
      "62.0",
      "2.0",
      "62.0",
      "3.0",
      "62.0",
      "4.0",
      "62.0",
      "5.0",
      "62.0",
      "6.0",
      "62.0",
      "7.0",
      "62.0",
      "8.0",
      "62.0",
      "9.0",
      "62.0",
      "10.0",
      "62.0",
      "11.0",
      "62.0",
      "12.0",
      "62.0",
      "13.0",
      "62.0",
      "14.0",
      "62.0",
      "15.0",
      "62.0",
      "16.0",
      "62.0",
      "17.0",
      "62.0",
      "18.0",
      "62.0",
      "19.0",
      "62.0",
      "20.0",
      "62.0",
      "21.0",
      "62.0",
      "22.0",
      "62.0",
      "23.0",
      "62.0",
      "24.0",
      "62.0",
      "25.0",
      "62.0",
      "26.0",
      "62.0",
      "27.0",
      "62.0",
      "28.0",
      "62.0",
      "29.0",
      "62.0",
      "30.0",
      "62.0",
      "31.0",
      "62.0",
      "32.0",
      "62.0",
      "33.0",
      "62.0",
      "34.0",
      "62.0",
      "35.0",
      "62.0",
      "36.0",
      "62.0",
      "37.0",
      "62.0",
      "38.0",
      "62.0",
      "39.0",
      "62.0",
      "40.0",
      "62.0",
      "41.0",
      "62.0",
      "42.0",
      "62.0",
      "43.0",
      "62.0",
      "44.0",
      "62.0",
      "45.0",
      "62.0",
      "46.0",
      "62.0",
      "47.0",
      "62.0",
      "48.0",
      "62.0",
      "49.0",
      "62.0",
      "50.0",
      "62.0",
      "51.0",
      "62.0",
      "52.0",
      "62.0",
      "53.0",
      "62.0",
      "54.0",
      "62.0",
      "55.0",
      "62.0",
      "56.0",
      "62.0",
      "57.0",
      "62.0",
      "58.0",
      "62.0",
      "59.0",
      "62.0",
      "60.0",
      "62.0",
      "61.0",
      "62.0",
      "62.0",
      "62.0",
      "63.0",
      "62.0",
      "64.0",
      "62.0",
      "65.0",
      "62.0",
      "66.0",
      "62.0",
      "67.0",
      "62.0",
      "68.0",
      "62.0",
      "69.0",
      "62.0",
      "70.0",
      "62.0",
      "71.0",
      "62.0",
      "72.0",
      "62.0",
      "73.0",
      "62.0",
      "74.0",
      "62.0",
      "75.0",
      "62.0",
      "76.0",
      "62.0",
      "77.0",
      "62.0",
      "78.0",
      "62.0",
      "79.0",
      "62.0",
      "80.0",
      "62.0",
      "81.0",
      "62.0",
      "82.0",
      "62.0",
      "83.0",
      "62.0",
      "84.0",
      "62.0",
      "85.0",
      "62.0",
      "86.0",
      "62.0",
      "87.0",
      "62.0",
      "88.0",
      "62.0",
      "89.0",
      "62.0",
      "90.0",
      "62.0",
      "91.0",
      "62.0",
      "92.0",
      "62.0",
      "93.0",
      "62.0",
      "94.0",
      "62.0",
      "95.0",
      "62.0",
      "96.0",
      "62.0",
      "97.0",
      "62.0",
      "98.0",
      "62.0",
      "99.0",
      "63.0",
      "1.0",
      "63.0",
      "2.0",
      "63.0",
      "3.0",
      "63.0",
      "4.0",
      "63.0",
      "5.0",
      "63.0",
      "6.0",
      "63.0",
      "7.0",
      "63.0",
      "8.0",
      "63.0",
      "9.0",
      "63.0",
      "10.0",
      "63.0",
      "11.0",
      "63.0",
      "12.0",
      "63.0",
      "13.0",
      "63.0",
      "14.0",
      "63.0",
      "15.0",
      "63.0",
      "16.0",
      "63.0",
      "17.0",
      "63.0",
      "18.0",
      "63.0",
      "19.0",
      "63.0",
      "20.0",
      "63.0",
      "21.0",
      "63.0",
      "22.0",
      "63.0",
      "23.0",
      "63.0",
      "24.0",
      "63.0",
      "25.0",
      "63.0",
      "26.0",
      "63.0",
      "27.0",
      "63.0",
      "28.0",
      "63.0",
      "29.0",
      "63.0",
      "30.0",
      "63.0",
      "31.0",
      "63.0",
      "32.0",
      "63.0",
      "33.0",
      "63.0",
      "34.0",
      "63.0",
      "35.0",
      "63.0",
      "36.0",
      "63.0",
      "37.0",
      "63.0",
      "38.0",
      "63.0",
      "39.0",
      "63.0",
      "40.0",
      "63.0",
      "41.0",
      "63.0",
      "42.0",
      "63.0",
      "43.0",
      "63.0",
      "44.0",
      "63.0",
      "45.0",
      "63.0",
      "46.0",
      "63.0",
      "47.0",
      "63.0",
      "48.0",
      "63.0",
      "49.0",
      "63.0",
      "50.0",
      "63.0",
      "51.0",
      "63.0",
      "52.0",
      "63.0",
      "53.0",
      "63.0",
      "54.0",
      "63.0",
      "55.0",
      "63.0",
      "56.0",
      "63.0",
      "57.0",
      "63.0",
      "58.0",
      "63.0",
      "59.0",
      "63.0",
      "60.0",
      "63.0",
      "61.0",
      "63.0",
      "62.0",
      "63.0",
      "63.0",
      "63.0",
      "64.0",
      "63.0",
      "65.0",
      "63.0",
      "66.0",
      "63.0",
      "67.0",
      "63.0",
      "68.0",
      "63.0",
      "69.0",
      "63.0",
      "70.0",
      "63.0",
      "71.0",
      "63.0",
      "72.0",
      "63.0",
      "73.0",
      "63.0",
      "74.0",
      "63.0",
      "75.0",
      "63.0",
      "76.0",
      "63.0",
      "77.0",
      "63.0",
      "78.0",
      "63.0",
      "79.0",
      "63.0",
      "80.0",
      "63.0",
      "81.0",
      "63.0",
      "82.0",
      "63.0",
      "83.0",
      "63.0",
      "84.0",
      "63.0",
      "85.0",
      "63.0",
      "86.0",
      "63.0",
      "87.0",
      "63.0",
      "88.0",
      "63.0",
      "89.0",
      "63.0",
      "90.0",
      "63.0",
      "91.0",
      "63.0",
      "92.0",
      "63.0",
      "93.0",
      "63.0",
      "94.0",
      "63.0",
      "95.0",
      "63.0",
      "96.0",
      "63.0",
      "97.0",
      "63.0",
      "98.0",
      "63.0",
      "99.0",
      "64.0",
      "1.0",
      "64.0",
      "2.0",
      "64.0",
      "3.0",
      "64.0",
      "4.0",
      "64.0",
      "5.0",
      "64.0",
      "6.0",
      "64.0",
      "7.0",
      "64.0",
      "8.0",
      "64.0",
      "9.0",
      "64.0",
      "10.0",
      "64.0",
      "11.0",
      "64.0",
      "12.0",
      "64.0",
      "13.0",
      "64.0",
      "14.0",
      "64.0",
      "15.0",
      "64.0",
      "16.0",
      "64.0",
      "17.0",
      "64.0",
      "18.0",
      "64.0",
      "19.0",
      "64.0",
      "20.0",
      "64.0",
      "21.0",
      "64.0",
      "22.0",
      "64.0",
      "23.0",
      "64.0",
      "24.0",
      "64.0",
      "25.0",
      "64.0",
      "26.0",
      "64.0",
      "27.0",
      "64.0",
      "28.0",
      "64.0",
      "29.0",
      "64.0",
      "30.0",
      "64.0",
      "31.0",
      "64.0",
      "32.0",
      "64.0",
      "33.0",
      "64.0",
      "34.0",
      "64.0",
      "35.0",
      "64.0",
      "36.0",
      "64.0",
      "37.0",
      "64.0",
      "38.0",
      "64.0",
      "39.0",
      "64.0",
      "40.0",
      "64.0",
      "41.0",
      "64.0",
      "42.0",
      "64.0",
      "43.0",
      "64.0",
      "44.0",
      "64.0",
      "45.0",
      "64.0",
      "46.0",
      "64.0",
      "47.0",
      "64.0",
      "48.0",
      "64.0",
      "49.0",
      "64.0",
      "50.0",
      "64.0",
      "51.0",
      "64.0",
      "52.0",
      "64.0",
      "53.0",
      "64.0",
      "54.0",
      "64.0",
      "55.0",
      "64.0",
      "56.0",
      "64.0",
      "57.0",
      "64.0",
      "58.0",
      "64.0",
      "59.0",
      "64.0",
      "60.0",
      "64.0",
      "61.0",
      "64.0",
      "62.0",
      "64.0",
      "63.0",
      "64.0",
      "64.0",
      "64.0",
      "65.0",
      "64.0",
      "66.0",
      "64.0",
      "67.0",
      "64.0",
      "68.0",
      "64.0",
      "69.0",
      "64.0",
      "70.0",
      "64.0",
      "71.0",
      "64.0",
      "72.0",
      "64.0",
      "73.0",
      "64.0",
      "74.0",
      "64.0",
      "75.0",
      "64.0",
      "76.0",
      "64.0",
      "77.0",
      "64.0",
      "78.0",
      "64.0",
      "79.0",
      "64.0",
      "80.0",
      "64.0",
      "81.0",
      "64.0",
      "82.0",
      "64.0",
      "83.0",
      "64.0",
      "84.0",
      "64.0",
      "85.0",
      "64.0",
      "86.0",
      "64.0",
      "87.0",
      "64.0",
      "88.0",
      "64.0",
      "89.0",
      "64.0",
      "90.0",
      "64.0",
      "91.0",
      "64.0",
      "92.0",
      "64.0",
      "93.0",
      "64.0",
      "94.0",
      "64.0",
      "95.0",
      "64.0",
      "96.0",
      "64.0",
      "97.0",
      "64.0",
      "98.0",
      "64.0",
      "99.0",
      "65.0",
      "1.0",
      "65.0",
      "2.0",
      "65.0",
      "3.0",
      "65.0",
      "4.0",
      "65.0",
      "5.0",
      "65.0",
      "6.0",
      "65.0",
      "7.0",
      "65.0",
      "8.0",
      "65.0",
      "9.0",
      "65.0",
      "10.0",
      "65.0",
      "11.0",
      "65.0",
      "12.0",
      "65.0",
      "13.0",
      "65.0",
      "14.0",
      "65.0",
      "15.0",
      "65.0",
      "16.0",
      "65.0",
      "17.0",
      "65.0",
      "18.0",
      "65.0",
      "19.0",
      "65.0",
      "20.0",
      "65.0",
      "21.0",
      "65.0",
      "22.0",
      "65.0",
      "23.0",
      "65.0",
      "24.0",
      "65.0",
      "25.0",
      "65.0",
      "26.0",
      "65.0",
      "27.0",
      "65.0",
      "28.0",
      "65.0",
      "29.0",
      "65.0",
      "30.0",
      "65.0",
      "31.0",
      "65.0",
      "32.0",
      "65.0",
      "33.0",
      "65.0",
      "34.0",
      "65.0",
      "35.0",
      "65.0",
      "36.0",
      "65.0",
      "37.0",
      "65.0",
      "38.0",
      "65.0",
      "39.0",
      "65.0",
      "40.0",
      "65.0",
      "41.0",
      "65.0",
      "42.0",
      "65.0",
      "43.0",
      "65.0",
      "44.0",
      "65.0",
      "45.0",
      "65.0",
      "46.0",
      "65.0",
      "47.0",
      "65.0",
      "48.0",
      "65.0",
      "49.0",
      "65.0",
      "50.0",
      "65.0",
      "51.0",
      "65.0",
      "52.0",
      "65.0",
      "53.0",
      "65.0",
      "54.0",
      "65.0",
      "55.0",
      "65.0",
      "56.0",
      "65.0",
      "57.0",
      "65.0",
      "58.0",
      "65.0",
      "59.0",
      "65.0",
      "60.0",
      "65.0",
      "61.0",
      "65.0",
      "62.0",
      "65.0",
      "63.0",
      "65.0",
      "64.0",
      "65.0",
      "65.0",
      "65.0",
      "66.0",
      "65.0",
      "67.0",
      "65.0",
      "68.0",
      "65.0",
      "69.0",
      "65.0",
      "70.0",
      "65.0",
      "71.0",
      "65.0",
      "72.0",
      "65.0",
      "73.0",
      "65.0",
      "74.0",
      "65.0",
      "75.0",
      "65.0",
      "76.0",
      "65.0",
      "77.0",
      "65.0",
      "78.0",
      "65.0",
      "79.0",
      "65.0",
      "80.0",
      "65.0",
      "81.0",
      "65.0",
      "82.0",
      "65.0",
      "83.0",
      "65.0",
      "84.0",
      "65.0",
      "85.0",
      "65.0",
      "86.0",
      "65.0",
      "87.0",
      "65.0",
      "88.0",
      "65.0",
      "89.0",
      "65.0",
      "90.0",
      "65.0",
      "91.0",
      "65.0",
      "92.0",
      "65.0",
      "93.0",
      "65.0",
      "94.0",
      "65.0",
      "95.0",
      "65.0",
      "96.0",
      "65.0",
      "97.0",
      "65.0",
      "98.0",
      "65.0",
      "99.0",
      "66.0",
      "1.0",
      "66.0",
      "2.0",
      "66.0",
      "3.0",
      "66.0",
      "4.0",
      "66.0",
      "5.0",
      "66.0",
      "6.0",
      "66.0",
      "7.0",
      "66.0",
      "8.0",
      "66.0",
      "9.0",
      "66.0",
      "10.0",
      "66.0",
      "11.0",
      "66.0",
      "12.0",
      "66.0",
      "13.0",
      "66.0",
      "14.0",
      "66.0",
      "15.0",
      "66.0",
      "16.0",
      "66.0",
      "17.0",
      "66.0",
      "18.0",
      "66.0",
      "19.0",
      "66.0",
      "20.0",
      "66.0",
      "21.0",
      "66.0",
      "22.0",
      "66.0",
      "23.0",
      "66.0",
      "24.0",
      "66.0",
      "25.0",
      "66.0",
      "26.0",
      "66.0",
      "27.0",
      "66.0",
      "28.0",
      "66.0",
      "29.0",
      "66.0",
      "30.0",
      "66.0",
      "31.0",
      "66.0",
      "32.0",
      "66.0",
      "33.0",
      "66.0",
      "34.0",
      "66.0",
      "35.0",
      "66.0",
      "36.0",
      "66.0",
      "37.0",
      "66.0",
      "38.0",
      "66.0",
      "39.0",
      "66.0",
      "40.0",
      "66.0",
      "41.0",
      "66.0",
      "42.0",
      "66.0",
      "43.0",
      "66.0",
      "44.0",
      "66.0",
      "45.0",
      "66.0",
      "46.0",
      "66.0",
      "47.0",
      "66.0",
      "48.0",
      "66.0",
      "49.0",
      "66.0",
      "50.0",
      "66.0",
      "51.0",
      "66.0",
      "52.0",
      "66.0",
      "53.0",
      "66.0",
      "54.0",
      "66.0",
      "55.0",
      "66.0",
      "56.0",
      "66.0",
      "57.0",
      "66.0",
      "58.0",
      "66.0",
      "59.0",
      "66.0",
      "60.0",
      "66.0",
      "61.0",
      "66.0",
      "62.0",
      "66.0",
      "63.0",
      "66.0",
      "64.0",
      "66.0",
      "65.0",
      "66.0",
      "66.0",
      "66.0",
      "67.0",
      "66.0",
      "68.0",
      "66.0",
      "69.0",
      "66.0",
      "70.0",
      "66.0",
      "71.0",
      "66.0",
      "72.0",
      "66.0",
      "73.0",
      "66.0",
      "74.0",
      "66.0",
      "75.0",
      "66.0",
      "76.0",
      "66.0",
      "77.0",
      "66.0",
      "78.0",
      "66.0",
      "79.0",
      "66.0",
      "80.0",
      "66.0",
      "81.0",
      "66.0",
      "82.0",
      "66.0",
      "83.0",
      "66.0",
      "84.0",
      "66.0",
      "85.0",
      "66.0",
      "86.0",
      "66.0",
      "87.0",
      "66.0",
      "88.0",
      "66.0",
      "89.0",
      "66.0",
      "90.0",
      "66.0",
      "91.0",
      "66.0",
      "92.0",
      "66.0",
      "93.0",
      "66.0",
      "94.0",
      "66.0",
      "95.0",
      "66.0",
      "96.0",
      "66.0",
      "97.0",
      "66.0",
      "98.0",
      "66.0",
      "99.0",
      "67.0",
      "1.0",
      "67.0",
      "2.0",
      "67.0",
      "3.0",
      "67.0",
      "4.0",
      "67.0",
      "5.0",
      "67.0",
      "6.0",
      "67.0",
      "7.0",
      "67.0",
      "8.0",
      "67.0",
      "9.0",
      "67.0",
      "10.0",
      "67.0",
      "11.0",
      "67.0",
      "12.0",
      "67.0",
      "13.0",
      "67.0",
      "14.0",
      "67.0",
      "15.0",
      "67.0",
      "16.0",
      "67.0",
      "17.0",
      "67.0",
      "18.0",
      "67.0",
      "19.0",
      "67.0",
      "20.0",
      "67.0",
      "21.0",
      "67.0",
      "22.0",
      "67.0",
      "23.0",
      "67.0",
      "24.0",
      "67.0",
      "25.0",
      "67.0",
      "26.0",
      "67.0",
      "27.0",
      "67.0",
      "28.0",
      "67.0",
      "29.0",
      "67.0",
      "30.0",
      "67.0",
      "31.0",
      "67.0",
      "32.0",
      "67.0",
      "33.0",
      "67.0",
      "34.0",
      "67.0",
      "35.0",
      "67.0",
      "36.0",
      "67.0",
      "37.0",
      "67.0",
      "38.0",
      "67.0",
      "39.0",
      "67.0",
      "40.0",
      "67.0",
      "41.0",
      "67.0",
      "42.0",
      "67.0",
      "43.0",
      "67.0",
      "44.0",
      "67.0",
      "45.0",
      "67.0",
      "46.0",
      "67.0",
      "47.0",
      "67.0",
      "48.0",
      "67.0",
      "49.0",
      "67.0",
      "50.0",
      "67.0",
      "51.0",
      "67.0",
      "52.0",
      "67.0",
      "53.0",
      "67.0",
      "54.0",
      "67.0",
      "55.0",
      "67.0",
      "56.0",
      "67.0",
      "57.0",
      "67.0",
      "58.0",
      "67.0",
      "59.0",
      "67.0",
      "60.0",
      "67.0",
      "61.0",
      "67.0",
      "62.0",
      "67.0",
      "63.0",
      "67.0",
      "64.0",
      "67.0",
      "65.0",
      "67.0",
      "66.0",
      "67.0",
      "67.0",
      "67.0",
      "68.0",
      "67.0",
      "69.0",
      "67.0",
      "70.0",
      "67.0",
      "71.0",
      "67.0",
      "72.0",
      "67.0",
      "73.0",
      "67.0",
      "74.0",
      "67.0",
      "75.0",
      "67.0",
      "76.0",
      "67.0",
      "77.0",
      "67.0",
      "78.0",
      "67.0",
      "79.0",
      "67.0",
      "80.0",
      "67.0",
      "81.0",
      "67.0",
      "82.0",
      "67.0",
      "83.0",
      "67.0",
      "84.0",
      "67.0",
      "85.0",
      "67.0",
      "86.0",
      "67.0",
      "87.0",
      "67.0",
      "88.0",
      "67.0",
      "89.0",
      "67.0",
      "90.0",
      "67.0",
      "91.0",
      "67.0",
      "92.0",
      "67.0",
      "93.0",
      "67.0",
      "94.0",
      "67.0",
      "95.0",
      "67.0",
      "96.0",
      "67.0",
      "97.0",
      "67.0",
      "98.0",
      "67.0",
      "99.0",
      "68.0",
      "1.0",
      "68.0",
      "2.0",
      "68.0",
      "3.0",
      "68.0",
      "4.0",
      "68.0",
      "5.0",
      "68.0",
      "6.0",
      "68.0",
      "7.0",
      "68.0",
      "8.0",
      "68.0",
      "9.0",
      "68.0",
      "10.0",
      "68.0",
      "11.0",
      "68.0",
      "12.0",
      "68.0",
      "13.0",
      "68.0",
      "14.0",
      "68.0",
      "15.0",
      "68.0",
      "16.0",
      "68.0",
      "17.0",
      "68.0",
      "18.0",
      "68.0",
      "19.0",
      "68.0",
      "20.0",
      "68.0",
      "21.0",
      "68.0",
      "22.0",
      "68.0",
      "23.0",
      "68.0",
      "24.0",
      "68.0",
      "25.0",
      "68.0",
      "26.0",
      "68.0",
      "27.0",
      "68.0",
      "28.0",
      "68.0",
      "29.0",
      "68.0",
      "30.0",
      "68.0",
      "31.0",
      "68.0",
      "32.0",
      "68.0",
      "33.0",
      "68.0",
      "34.0",
      "68.0",
      "35.0",
      "68.0",
      "36.0",
      "68.0",
      "37.0",
      "68.0",
      "38.0",
      "68.0",
      "39.0",
      "68.0",
      "40.0",
      "68.0",
      "41.0",
      "68.0",
      "42.0",
      "68.0",
      "43.0",
      "68.0",
      "44.0",
      "68.0",
      "45.0",
      "68.0",
      "46.0",
      "68.0",
      "47.0",
      "68.0",
      "48.0",
      "68.0",
      "49.0",
      "68.0",
      "50.0",
      "68.0",
      "51.0",
      "68.0",
      "52.0",
      "68.0",
      "53.0",
      "68.0",
      "54.0",
      "68.0",
      "55.0",
      "68.0",
      "56.0",
      "68.0",
      "57.0",
      "68.0",
      "58.0",
      "68.0",
      "59.0",
      "68.0",
      "60.0",
      "68.0",
      "61.0",
      "68.0",
      "62.0",
      "68.0",
      "63.0",
      "68.0",
      "64.0",
      "68.0",
      "65.0",
      "68.0",
      "66.0",
      "68.0",
      "67.0",
      "68.0",
      "68.0",
      "68.0",
      "69.0",
      "68.0",
      "70.0",
      "68.0",
      "71.0",
      "68.0",
      "72.0",
      "68.0",
      "73.0",
      "68.0",
      "74.0",
      "68.0",
      "75.0",
      "68.0",
      "76.0",
      "68.0",
      "77.0",
      "68.0",
      "78.0",
      "68.0",
      "79.0",
      "68.0",
      "80.0",
      "68.0",
      "81.0",
      "68.0",
      "82.0",
      "68.0",
      "83.0",
      "68.0",
      "84.0",
      "68.0",
      "85.0",
      "68.0",
      "86.0",
      "68.0",
      "87.0",
      "68.0",
      "88.0",
      "68.0",
      "89.0",
      "68.0",
      "90.0",
      "68.0",
      "91.0",
      "68.0",
      "92.0",
      "68.0",
      "93.0",
      "68.0",
      "94.0",
      "68.0",
      "95.0",
      "68.0",
      "96.0",
      "68.0",
      "97.0",
      "68.0",
      "98.0",
      "68.0",
      "99.0",
      "69.0",
      "1.0",
      "69.0",
      "2.0",
      "69.0",
      "3.0",
      "69.0",
      "4.0",
      "69.0",
      "5.0",
      "69.0",
      "6.0",
      "69.0",
      "7.0",
      "69.0",
      "8.0",
      "69.0",
      "9.0",
      "69.0",
      "10.0",
      "69.0",
      "11.0",
      "69.0",
      "12.0",
      "69.0",
      "13.0",
      "69.0",
      "14.0",
      "69.0",
      "15.0",
      "69.0",
      "16.0",
      "69.0",
      "17.0",
      "69.0",
      "18.0",
      "69.0",
      "19.0",
      "69.0",
      "20.0",
      "69.0",
      "21.0",
      "69.0",
      "22.0",
      "69.0",
      "23.0",
      "69.0",
      "24.0",
      "69.0",
      "25.0",
      "69.0",
      "26.0",
      "69.0",
      "27.0",
      "69.0",
      "28.0",
      "69.0",
      "29.0",
      "69.0",
      "30.0",
      "69.0",
      "31.0",
      "69.0",
      "32.0",
      "69.0",
      "33.0",
      "69.0",
      "34.0",
      "69.0",
      "35.0",
      "69.0",
      "36.0",
      "69.0",
      "37.0",
      "69.0",
      "38.0",
      "69.0",
      "39.0",
      "69.0",
      "40.0",
      "69.0",
      "41.0",
      "69.0",
      "42.0",
      "69.0",
      "43.0",
      "69.0",
      "44.0",
      "69.0",
      "45.0",
      "69.0",
      "46.0",
      "69.0",
      "47.0",
      "69.0",
      "48.0",
      "69.0",
      "49.0",
      "69.0",
      "50.0",
      "69.0",
      "51.0",
      "69.0",
      "52.0",
      "69.0",
      "53.0",
      "69.0",
      "54.0",
      "69.0",
      "55.0",
      "69.0",
      "56.0",
      "69.0",
      "57.0",
      "69.0",
      "58.0",
      "69.0",
      "59.0",
      "69.0",
      "60.0",
      "69.0",
      "61.0",
      "69.0",
      "62.0",
      "69.0",
      "63.0",
      "69.0",
      "64.0",
      "69.0",
      "65.0",
      "69.0",
      "66.0",
      "69.0",
      "67.0",
      "69.0",
      "68.0",
      "69.0",
      "69.0",
      "69.0",
      "70.0",
      "69.0",
      "71.0",
      "69.0",
      "72.0",
      "69.0",
      "73.0",
      "69.0",
      "74.0",
      "69.0",
      "75.0",
      "69.0",
      "76.0",
      "69.0",
      "77.0",
      "69.0",
      "78.0",
      "69.0",
      "79.0",
      "69.0",
      "80.0",
      "69.0",
      "81.0",
      "69.0",
      "82.0",
      "69.0",
      "83.0",
      "69.0",
      "84.0",
      "69.0",
      "85.0",
      "69.0",
      "86.0",
      "69.0",
      "87.0",
      "69.0",
      "88.0",
      "69.0",
      "89.0",
      "69.0",
      "90.0",
      "69.0",
      "91.0",
      "69.0",
      "92.0",
      "69.0",
      "93.0",
      "69.0",
      "94.0",
      "69.0",
      "95.0",
      "69.0",
      "96.0",
      "69.0",
      "97.0",
      "69.0",
      "98.0",
      "69.0",
      "99.0",
      "70.0",
      "1.0",
      "70.0",
      "2.0",
      "70.0",
      "3.0",
      "70.0",
      "4.0",
      "70.0",
      "5.0",
      "70.0",
      "6.0",
      "70.0",
      "7.0",
      "70.0",
      "8.0",
      "70.0",
      "9.0",
      "70.0",
      "10.0",
      "70.0",
      "11.0",
      "70.0",
      "12.0",
      "70.0",
      "13.0",
      "70.0",
      "14.0",
      "70.0",
      "15.0",
      "70.0",
      "16.0",
      "70.0",
      "17.0",
      "70.0",
      "18.0",
      "70.0",
      "19.0",
      "70.0",
      "20.0",
      "70.0",
      "21.0",
      "70.0",
      "22.0",
      "70.0",
      "23.0",
      "70.0",
      "24.0",
      "70.0",
      "25.0",
      "70.0",
      "26.0",
      "70.0",
      "27.0",
      "70.0",
      "28.0",
      "70.0",
      "29.0",
      "70.0",
      "30.0",
      "70.0",
      "31.0",
      "70.0",
      "32.0",
      "70.0",
      "33.0",
      "70.0",
      "34.0",
      "70.0",
      "35.0",
      "70.0",
      "36.0",
      "70.0",
      "37.0",
      "70.0",
      "38.0",
      "70.0",
      "39.0",
      "70.0",
      "40.0",
      "70.0",
      "41.0",
      "70.0",
      "42.0",
      "70.0",
      "43.0",
      "70.0",
      "44.0",
      "70.0",
      "45.0",
      "70.0",
      "46.0",
      "70.0",
      "47.0",
      "70.0",
      "48.0",
      "70.0",
      "49.0",
      "70.0",
      "50.0",
      "70.0",
      "51.0",
      "70.0",
      "52.0",
      "70.0",
      "53.0",
      "70.0",
      "54.0",
      "70.0",
      "55.0",
      "70.0",
      "56.0",
      "70.0",
      "57.0",
      "70.0",
      "58.0",
      "70.0",
      "59.0",
      "70.0",
      "60.0",
      "70.0",
      "61.0",
      "70.0",
      "62.0",
      "70.0",
      "63.0",
      "70.0",
      "64.0",
      "70.0",
      "65.0",
      "70.0",
      "66.0",
      "70.0",
      "67.0",
      "70.0",
      "68.0",
      "70.0",
      "69.0",
      "70.0",
      "70.0",
      "70.0",
      "71.0",
      "70.0",
      "72.0",
      "70.0",
      "73.0",
      "70.0",
      "74.0",
      "70.0",
      "75.0",
      "70.0",
      "76.0",
      "70.0",
      "77.0",
      "70.0",
      "78.0",
      "70.0",
      "79.0",
      "70.0",
      "80.0",
      "70.0",
      "81.0",
      "70.0",
      "82.0",
      "70.0",
      "83.0",
      "70.0",
      "84.0",
      "70.0",
      "85.0",
      "70.0",
      "86.0",
      "70.0",
      "87.0",
      "70.0",
      "88.0",
      "70.0",
      "89.0",
      "70.0",
      "90.0",
      "70.0",
      "91.0",
      "70.0",
      "92.0",
      "70.0",
      "93.0",
      "70.0",
      "94.0",
      "70.0",
      "95.0",
      "70.0",
      "96.0",
      "70.0",
      "97.0",
      "70.0",
      "98.0",
      "70.0",
      "99.0",
      "71.0",
      "1.0",
      "71.0",
      "2.0",
      "71.0",
      "3.0",
      "71.0",
      "4.0",
      "71.0",
      "5.0",
      "71.0",
      "6.0",
      "71.0",
      "7.0",
      "71.0",
      "8.0",
      "71.0",
      "9.0",
      "71.0",
      "10.0",
      "71.0",
      "11.0",
      "71.0",
      "12.0",
      "71.0",
      "13.0",
      "71.0",
      "14.0",
      "71.0",
      "15.0",
      "71.0",
      "16.0",
      "71.0",
      "17.0",
      "71.0",
      "18.0",
      "71.0",
      "19.0",
      "71.0",
      "20.0",
      "71.0",
      "21.0",
      "71.0",
      "22.0",
      "71.0",
      "23.0",
      "71.0",
      "24.0",
      "71.0",
      "25.0",
      "71.0",
      "26.0",
      "71.0",
      "27.0",
      "71.0",
      "28.0",
      "71.0",
      "29.0",
      "71.0",
      "30.0",
      "71.0",
      "31.0",
      "71.0",
      "32.0",
      "71.0",
      "33.0",
      "71.0",
      "34.0",
      "71.0",
      "35.0",
      "71.0",
      "36.0",
      "71.0",
      "37.0",
      "71.0",
      "38.0",
      "71.0",
      "39.0",
      "71.0",
      "40.0",
      "71.0",
      "41.0",
      "71.0",
      "42.0",
      "71.0",
      "43.0",
      "71.0",
      "44.0",
      "71.0",
      "45.0",
      "71.0",
      "46.0",
      "71.0",
      "47.0",
      "71.0",
      "48.0",
      "71.0",
      "49.0",
      "71.0",
      "50.0",
      "71.0",
      "51.0",
      "71.0",
      "52.0",
      "71.0",
      "53.0",
      "71.0",
      "54.0",
      "71.0",
      "55.0",
      "71.0",
      "56.0",
      "71.0",
      "57.0",
      "71.0",
      "58.0",
      "71.0",
      "59.0",
      "71.0",
      "60.0",
      "71.0",
      "61.0",
      "71.0",
      "62.0",
      "71.0",
      "63.0",
      "71.0",
      "64.0",
      "71.0",
      "65.0",
      "71.0",
      "66.0",
      "71.0",
      "67.0",
      "71.0",
      "68.0",
      "71.0",
      "69.0",
      "71.0",
      "70.0",
      "71.0",
      "71.0",
      "71.0",
      "72.0",
      "71.0",
      "73.0",
      "71.0",
      "74.0",
      "71.0",
      "75.0",
      "71.0",
      "76.0",
      "71.0",
      "77.0",
      "71.0",
      "78.0",
      "71.0",
      "79.0",
      "71.0",
      "80.0",
      "71.0",
      "81.0",
      "71.0",
      "82.0",
      "71.0",
      "83.0",
      "71.0",
      "84.0",
      "71.0",
      "85.0",
      "71.0",
      "86.0",
      "71.0",
      "87.0",
      "71.0",
      "88.0",
      "71.0",
      "89.0",
      "71.0",
      "90.0",
      "71.0",
      "91.0",
      "71.0",
      "92.0",
      "71.0",
      "93.0",
      "71.0",
      "94.0",
      "71.0",
      "95.0",
      "71.0",
      "96.0",
      "71.0",
      "97.0",
      "71.0",
      "98.0",
      "71.0",
      "99.0",
      "72.0",
      "1.0",
      "72.0",
      "2.0",
      "72.0",
      "3.0",
      "72.0",
      "4.0",
      "72.0",
      "5.0",
      "72.0",
      "6.0",
      "72.0",
      "7.0",
      "72.0",
      "8.0",
      "72.0",
      "9.0",
      "72.0",
      "10.0",
      "72.0",
      "11.0",
      "72.0",
      "12.0",
      "72.0",
      "13.0",
      "72.0",
      "14.0",
      "72.0",
      "15.0",
      "72.0",
      "16.0",
      "72.0",
      "17.0",
      "72.0",
      "18.0",
      "72.0",
      "19.0",
      "72.0",
      "20.0",
      "72.0",
      "21.0",
      "72.0",
      "22.0",
      "72.0",
      "23.0",
      "72.0",
      "24.0",
      "72.0",
      "25.0",
      "72.0",
      "26.0",
      "72.0",
      "27.0",
      "72.0",
      "28.0",
      "72.0",
      "29.0",
      "72.0",
      "30.0",
      "72.0",
      "31.0",
      "72.0",
      "32.0",
      "72.0",
      "33.0",
      "72.0",
      "34.0",
      "72.0",
      "35.0",
      "72.0",
      "36.0",
      "72.0",
      "37.0",
      "72.0",
      "38.0",
      "72.0",
      "39.0",
      "72.0",
      "40.0",
      "72.0",
      "41.0",
      "72.0",
      "42.0",
      "72.0",
      "43.0",
      "72.0",
      "44.0",
      "72.0",
      "45.0",
      "72.0",
      "46.0",
      "72.0",
      "47.0",
      "72.0",
      "48.0",
      "72.0",
      "49.0",
      "72.0",
      "50.0",
      "72.0",
      "51.0",
      "72.0",
      "52.0",
      "72.0",
      "53.0",
      "72.0",
      "54.0",
      "72.0",
      "55.0",
      "72.0",
      "56.0",
      "72.0",
      "57.0",
      "72.0",
      "58.0",
      "72.0",
      "59.0",
      "72.0",
      "60.0",
      "72.0",
      "61.0",
      "72.0",
      "62.0",
      "72.0",
      "63.0",
      "72.0",
      "64.0",
      "72.0",
      "65.0",
      "72.0",
      "66.0",
      "72.0",
      "67.0",
      "72.0",
      "68.0",
      "72.0",
      "69.0",
      "72.0",
      "70.0",
      "72.0",
      "71.0",
      "72.0",
      "72.0",
      "72.0",
      "73.0",
      "72.0",
      "74.0",
      "72.0",
      "75.0",
      "72.0",
      "76.0",
      "72.0",
      "77.0",
      "72.0",
      "78.0",
      "72.0",
      "79.0",
      "72.0",
      "80.0",
      "72.0",
      "81.0",
      "72.0",
      "82.0",
      "72.0",
      "83.0",
      "72.0",
      "84.0",
      "72.0",
      "85.0",
      "72.0",
      "86.0",
      "72.0",
      "87.0",
      "72.0",
      "88.0",
      "72.0",
      "89.0",
      "72.0",
      "90.0",
      "72.0",
      "91.0",
      "72.0",
      "92.0",
      "72.0",
      "93.0",
      "72.0",
      "94.0",
      "72.0",
      "95.0",
      "72.0",
      "96.0",
      "72.0",
      "97.0",
      "72.0",
      "98.0",
      "72.0",
      "99.0",
      "73.0",
      "1.0",
      "73.0",
      "2.0",
      "73.0",
      "3.0",
      "73.0",
      "4.0",
      "73.0",
      "5.0",
      "73.0",
      "6.0",
      "73.0",
      "7.0",
      "73.0",
      "8.0",
      "73.0",
      "9.0",
      "73.0",
      "10.0",
      "73.0",
      "11.0",
      "73.0",
      "12.0",
      "73.0",
      "13.0",
      "73.0",
      "14.0",
      "73.0",
      "15.0",
      "73.0",
      "16.0",
      "73.0",
      "17.0",
      "73.0",
      "18.0",
      "73.0",
      "19.0",
      "73.0",
      "20.0",
      "73.0",
      "21.0",
      "73.0",
      "22.0",
      "73.0",
      "23.0",
      "73.0",
      "24.0",
      "73.0",
      "25.0",
      "73.0",
      "26.0",
      "73.0",
      "27.0",
      "73.0",
      "28.0",
      "73.0",
      "29.0",
      "73.0",
      "30.0",
      "73.0",
      "31.0",
      "73.0",
      "32.0",
      "73.0",
      "33.0",
      "73.0",
      "34.0",
      "73.0",
      "35.0",
      "73.0",
      "36.0",
      "73.0",
      "37.0",
      "73.0",
      "38.0",
      "73.0",
      "39.0",
      "73.0",
      "40.0",
      "73.0",
      "41.0",
      "73.0",
      "42.0",
      "73.0",
      "43.0",
      "73.0",
      "44.0",
      "73.0",
      "45.0",
      "73.0",
      "46.0",
      "73.0",
      "47.0",
      "73.0",
      "48.0",
      "73.0",
      "49.0",
      "73.0",
      "50.0",
      "73.0",
      "51.0",
      "73.0",
      "52.0",
      "73.0",
      "53.0",
      "73.0",
      "54.0",
      "73.0",
      "55.0",
      "73.0",
      "56.0",
      "73.0",
      "57.0",
      "73.0",
      "58.0",
      "73.0",
      "59.0",
      "73.0",
      "60.0",
      "73.0",
      "61.0",
      "73.0",
      "62.0",
      "73.0",
      "63.0",
      "73.0",
      "64.0",
      "73.0",
      "65.0",
      "73.0",
      "66.0",
      "73.0",
      "67.0",
      "73.0",
      "68.0",
      "73.0",
      "69.0",
      "73.0",
      "70.0",
      "73.0",
      "71.0",
      "73.0",
      "72.0",
      "73.0",
      "73.0",
      "73.0",
      "74.0",
      "73.0",
      "75.0",
      "73.0",
      "76.0",
      "73.0",
      "77.0",
      "73.0",
      "78.0",
      "73.0",
      "79.0",
      "73.0",
      "80.0",
      "73.0",
      "81.0",
      "73.0",
      "82.0",
      "73.0",
      "83.0",
      "73.0",
      "84.0",
      "73.0",
      "85.0",
      "73.0",
      "86.0",
      "73.0",
      "87.0",
      "73.0",
      "88.0",
      "73.0",
      "89.0",
      "73.0",
      "90.0",
      "73.0",
      "91.0",
      "73.0",
      "92.0",
      "73.0",
      "93.0",
      "73.0",
      "94.0",
      "73.0",
      "95.0",
      "73.0",
      "96.0",
      "73.0",
      "97.0",
      "73.0",
      "98.0",
      "73.0",
      "99.0",
      "74.0",
      "1.0",
      "74.0",
      "2.0",
      "74.0",
      "3.0",
      "74.0",
      "4.0",
      "74.0",
      "5.0",
      "74.0",
      "6.0",
      "74.0",
      "7.0",
      "74.0",
      "8.0",
      "74.0",
      "9.0",
      "74.0",
      "10.0",
      "74.0",
      "11.0",
      "74.0",
      "12.0",
      "74.0",
      "13.0",
      "74.0",
      "14.0",
      "74.0",
      "15.0",
      "74.0",
      "16.0",
      "74.0",
      "17.0",
      "74.0",
      "18.0",
      "74.0",
      "19.0",
      "74.0",
      "20.0",
      "74.0",
      "21.0",
      "74.0",
      "22.0",
      "74.0",
      "23.0",
      "74.0",
      "24.0",
      "74.0",
      "25.0",
      "74.0",
      "26.0",
      "74.0",
      "27.0",
      "74.0",
      "28.0",
      "74.0",
      "29.0",
      "74.0",
      "30.0",
      "74.0",
      "31.0",
      "74.0",
      "32.0",
      "74.0",
      "33.0",
      "74.0",
      "34.0",
      "74.0",
      "35.0",
      "74.0",
      "36.0",
      "74.0",
      "37.0",
      "74.0",
      "38.0",
      "74.0",
      "39.0",
      "74.0",
      "40.0",
      "74.0",
      "41.0",
      "74.0",
      "42.0",
      "74.0",
      "43.0",
      "74.0",
      "44.0",
      "74.0",
      "45.0",
      "74.0",
      "46.0",
      "74.0",
      "47.0",
      "74.0",
      "48.0",
      "74.0",
      "49.0",
      "74.0",
      "50.0",
      "74.0",
      "51.0",
      "74.0",
      "52.0",
      "74.0",
      "53.0",
      "74.0",
      "54.0",
      "74.0",
      "55.0",
      "74.0",
      "56.0",
      "74.0",
      "57.0",
      "74.0",
      "58.0",
      "74.0",
      "59.0",
      "74.0",
      "60.0",
      "74.0",
      "61.0",
      "74.0",
      "62.0",
      "74.0",
      "63.0",
      "74.0",
      "64.0",
      "74.0",
      "65.0",
      "74.0",
      "66.0",
      "74.0",
      "67.0",
      "74.0",
      "68.0",
      "74.0",
      "69.0",
      "74.0",
      "70.0",
      "74.0",
      "71.0",
      "74.0",
      "72.0",
      "74.0",
      "73.0",
      "74.0",
      "74.0",
      "74.0",
      "75.0",
      "74.0",
      "76.0",
      "74.0",
      "77.0",
      "74.0",
      "78.0",
      "74.0",
      "79.0",
      "74.0",
      "80.0",
      "74.0",
      "81.0",
      "74.0",
      "82.0",
      "74.0",
      "83.0",
      "74.0",
      "84.0",
      "74.0",
      "85.0",
      "74.0",
      "86.0",
      "74.0",
      "87.0",
      "74.0",
      "88.0",
      "74.0",
      "89.0",
      "74.0",
      "90.0",
      "74.0",
      "91.0",
      "74.0",
      "92.0",
      "74.0",
      "93.0",
      "74.0",
      "94.0",
      "74.0",
      "95.0",
      "74.0",
      "96.0",
      "74.0",
      "97.0",
      "74.0",
      "98.0",
      "74.0",
      "99.0",
      "75.0",
      "1.0",
      "75.0",
      "2.0",
      "75.0",
      "3.0",
      "75.0",
      "4.0",
      "75.0",
      "5.0",
      "75.0",
      "6.0",
      "75.0",
      "7.0",
      "75.0",
      "8.0",
      "75.0",
      "9.0",
      "75.0",
      "10.0",
      "75.0",
      "11.0",
      "75.0",
      "12.0",
      "75.0",
      "13.0",
      "75.0",
      "14.0",
      "75.0",
      "15.0",
      "75.0",
      "16.0",
      "75.0",
      "17.0",
      "75.0",
      "18.0",
      "75.0",
      "19.0",
      "75.0",
      "20.0",
      "75.0",
      "21.0",
      "75.0",
      "22.0",
      "75.0",
      "23.0",
      "75.0",
      "24.0",
      "75.0",
      "25.0",
      "75.0",
      "26.0",
      "75.0",
      "27.0",
      "75.0",
      "28.0",
      "75.0",
      "29.0",
      "75.0",
      "30.0",
      "75.0",
      "31.0",
      "75.0",
      "32.0",
      "75.0",
      "33.0",
      "75.0",
      "34.0",
      "75.0",
      "35.0",
      "75.0",
      "36.0",
      "75.0",
      "37.0",
      "75.0",
      "38.0",
      "75.0",
      "39.0",
      "75.0",
      "40.0",
      "75.0",
      "41.0",
      "75.0",
      "42.0",
      "75.0",
      "43.0",
      "75.0",
      "44.0",
      "75.0",
      "45.0",
      "75.0",
      "46.0",
      "75.0",
      "47.0",
      "75.0",
      "48.0",
      "75.0",
      "49.0",
      "75.0",
      "50.0",
      "75.0",
      "51.0",
      "75.0",
      "52.0",
      "75.0",
      "53.0",
      "75.0",
      "54.0",
      "75.0",
      "55.0",
      "75.0",
      "56.0",
      "75.0",
      "57.0",
      "75.0",
      "58.0",
      "75.0",
      "59.0",
      "75.0",
      "60.0",
      "75.0",
      "61.0",
      "75.0",
      "62.0",
      "75.0",
      "63.0",
      "75.0",
      "64.0",
      "75.0",
      "65.0",
      "75.0",
      "66.0",
      "75.0",
      "67.0",
      "75.0",
      "68.0",
      "75.0",
      "69.0",
      "75.0",
      "70.0",
      "75.0",
      "71.0",
      "75.0",
      "72.0",
      "75.0",
      "73.0",
      "75.0",
      "74.0",
      "75.0",
      "75.0",
      "75.0",
      "76.0",
      "75.0",
      "77.0",
      "75.0",
      "78.0",
      "75.0",
      "79.0",
      "75.0",
      "80.0",
      "75.0",
      "81.0",
      "75.0",
      "82.0",
      "75.0",
      "83.0",
      "75.0",
      "84.0",
      "75.0",
      "85.0",
      "75.0",
      "86.0",
      "75.0",
      "87.0",
      "75.0",
      "88.0",
      "75.0",
      "89.0",
      "75.0",
      "90.0",
      "75.0",
      "91.0",
      "75.0",
      "92.0",
      "75.0",
      "93.0",
      "75.0",
      "94.0",
      "75.0",
      "95.0",
      "75.0",
      "96.0",
      "75.0",
      "97.0",
      "75.0",
      "98.0",
      "75.0",
      "99.0",
      "76.0",
      "1.0",
      "76.0",
      "2.0",
      "76.0",
      "3.0",
      "76.0",
      "4.0",
      "76.0",
      "5.0",
      "76.0",
      "6.0",
      "76.0",
      "7.0",
      "76.0",
      "8.0",
      "76.0",
      "9.0",
      "76.0",
      "10.0",
      "76.0",
      "11.0",
      "76.0",
      "12.0",
      "76.0",
      "13.0",
      "76.0",
      "14.0",
      "76.0",
      "15.0",
      "76.0",
      "16.0",
      "76.0",
      "17.0",
      "76.0",
      "18.0",
      "76.0",
      "19.0",
      "76.0",
      "20.0",
      "76.0",
      "21.0",
      "76.0",
      "22.0",
      "76.0",
      "23.0",
      "76.0",
      "24.0",
      "76.0",
      "25.0",
      "76.0",
      "26.0",
      "76.0",
      "27.0",
      "76.0",
      "28.0",
      "76.0",
      "29.0",
      "76.0",
      "30.0",
      "76.0",
      "31.0",
      "76.0",
      "32.0",
      "76.0",
      "33.0",
      "76.0",
      "34.0",
      "76.0",
      "35.0",
      "76.0",
      "36.0",
      "76.0",
      "37.0",
      "76.0",
      "38.0",
      "76.0",
      "39.0",
      "76.0",
      "40.0",
      "76.0",
      "41.0",
      "76.0",
      "42.0",
      "76.0",
      "43.0",
      "76.0",
      "44.0",
      "76.0",
      "45.0",
      "76.0",
      "46.0",
      "76.0",
      "47.0",
      "76.0",
      "48.0",
      "76.0",
      "49.0",
      "76.0",
      "50.0",
      "76.0",
      "51.0",
      "76.0",
      "52.0",
      "76.0",
      "53.0",
      "76.0",
      "54.0",
      "76.0",
      "55.0",
      "76.0",
      "56.0",
      "76.0",
      "57.0",
      "76.0",
      "58.0",
      "76.0",
      "59.0",
      "76.0",
      "60.0",
      "76.0",
      "61.0",
      "76.0",
      "62.0",
      "76.0",
      "63.0",
      "76.0",
      "64.0",
      "76.0",
      "65.0",
      "76.0",
      "66.0",
      "76.0",
      "67.0",
      "76.0",
      "68.0",
      "76.0",
      "69.0",
      "76.0",
      "70.0",
      "76.0",
      "71.0",
      "76.0",
      "72.0",
      "76.0",
      "73.0",
      "76.0",
      "74.0",
      "76.0",
      "75.0",
      "76.0",
      "76.0",
      "76.0",
      "77.0",
      "76.0",
      "78.0",
      "76.0",
      "79.0",
      "76.0",
      "80.0",
      "76.0",
      "81.0",
      "76.0",
      "82.0",
      "76.0",
      "83.0",
      "76.0",
      "84.0",
      "76.0",
      "85.0",
      "76.0",
      "86.0",
      "76.0",
      "87.0",
      "76.0",
      "88.0",
      "76.0",
      "89.0",
      "76.0",
      "90.0",
      "76.0",
      "91.0",
      "76.0",
      "92.0",
      "76.0",
      "93.0",
      "76.0",
      "94.0",
      "76.0",
      "95.0",
      "76.0",
      "96.0",
      "76.0",
      "97.0",
      "76.0",
      "98.0",
      "76.0",
      "99.0",
      "77.0",
      "1.0",
      "77.0",
      "2.0",
      "77.0",
      "3.0",
      "77.0",
      "4.0",
      "77.0",
      "5.0",
      "77.0",
      "6.0",
      "77.0",
      "7.0",
      "77.0",
      "8.0",
      "77.0",
      "9.0",
      "77.0",
      "10.0",
      "77.0",
      "11.0",
      "77.0",
      "12.0",
      "77.0",
      "13.0",
      "77.0",
      "14.0",
      "77.0",
      "15.0",
      "77.0",
      "16.0",
      "77.0",
      "17.0",
      "77.0",
      "18.0",
      "77.0",
      "19.0",
      "77.0",
      "20.0",
      "77.0",
      "21.0",
      "77.0",
      "22.0",
      "77.0",
      "23.0",
      "77.0",
      "24.0",
      "77.0",
      "25.0",
      "77.0",
      "26.0",
      "77.0",
      "27.0",
      "77.0",
      "28.0",
      "77.0",
      "29.0",
      "77.0",
      "30.0",
      "77.0",
      "31.0",
      "77.0",
      "32.0",
      "77.0",
      "33.0",
      "77.0",
      "34.0",
      "77.0",
      "35.0",
      "77.0",
      "36.0",
      "77.0",
      "37.0",
      "77.0",
      "38.0",
      "77.0",
      "39.0",
      "77.0",
      "40.0",
      "77.0",
      "41.0",
      "77.0",
      "42.0",
      "77.0",
      "43.0",
      "77.0",
      "44.0",
      "77.0",
      "45.0",
      "77.0",
      "46.0",
      "77.0",
      "47.0",
      "77.0",
      "48.0",
      "77.0",
      "49.0",
      "77.0",
      "50.0",
      "77.0",
      "51.0",
      "77.0",
      "52.0",
      "77.0",
      "53.0",
      "77.0",
      "54.0",
      "77.0",
      "55.0",
      "77.0",
      "56.0",
      "77.0",
      "57.0",
      "77.0",
      "58.0",
      "77.0",
      "59.0",
      "77.0",
      "60.0",
      "77.0",
      "61.0",
      "77.0",
      "62.0",
      "77.0",
      "63.0",
      "77.0",
      "64.0",
      "77.0",
      "65.0",
      "77.0",
      "66.0",
      "77.0",
      "67.0",
      "77.0",
      "68.0",
      "77.0",
      "69.0",
      "77.0",
      "70.0",
      "77.0",
      "71.0",
      "77.0",
      "72.0",
      "77.0",
      "73.0",
      "77.0",
      "74.0",
      "77.0",
      "75.0",
      "77.0",
      "76.0",
      "77.0",
      "77.0",
      "77.0",
      "78.0",
      "77.0",
      "79.0",
      "77.0",
      "80.0",
      "77.0",
      "81.0",
      "77.0",
      "82.0",
      "77.0",
      "83.0",
      "77.0",
      "84.0",
      "77.0",
      "85.0",
      "77.0",
      "86.0",
      "77.0",
      "87.0",
      "77.0",
      "88.0",
      "77.0",
      "89.0",
      "77.0",
      "90.0",
      "77.0",
      "91.0",
      "77.0",
      "92.0",
      "77.0",
      "93.0",
      "77.0",
      "94.0",
      "77.0",
      "95.0",
      "77.0",
      "96.0",
      "77.0",
      "97.0",
      "77.0",
      "98.0",
      "77.0",
      "99.0",
      "78.0",
      "1.0",
      "78.0",
      "2.0",
      "78.0",
      "3.0",
      "78.0",
      "4.0",
      "78.0",
      "5.0",
      "78.0",
      "6.0",
      "78.0",
      "7.0",
      "78.0",
      "8.0",
      "78.0",
      "9.0",
      "78.0",
      "10.0",
      "78.0",
      "11.0",
      "78.0",
      "12.0",
      "78.0",
      "13.0",
      "78.0",
      "14.0",
      "78.0",
      "15.0",
      "78.0",
      "16.0",
      "78.0",
      "17.0",
      "78.0",
      "18.0",
      "78.0",
      "19.0",
      "78.0",
      "20.0",
      "78.0",
      "21.0",
      "78.0",
      "22.0",
      "78.0",
      "23.0",
      "78.0",
      "24.0",
      "78.0",
      "25.0",
      "78.0",
      "26.0",
      "78.0",
      "27.0",
      "78.0",
      "28.0",
      "78.0",
      "29.0",
      "78.0",
      "30.0",
      "78.0",
      "31.0",
      "78.0",
      "32.0",
      "78.0",
      "33.0",
      "78.0",
      "34.0",
      "78.0",
      "35.0",
      "78.0",
      "36.0",
      "78.0",
      "37.0",
      "78.0",
      "38.0",
      "78.0",
      "39.0",
      "78.0",
      "40.0",
      "78.0",
      "41.0",
      "78.0",
      "42.0",
      "78.0",
      "43.0",
      "78.0",
      "44.0",
      "78.0",
      "45.0",
      "78.0",
      "46.0",
      "78.0",
      "47.0",
      "78.0",
      "48.0",
      "78.0",
      "49.0",
      "78.0",
      "50.0",
      "78.0",
      "51.0",
      "78.0",
      "52.0",
      "78.0",
      "53.0",
      "78.0",
      "54.0",
      "78.0",
      "55.0",
      "78.0",
      "56.0",
      "78.0",
      "57.0",
      "78.0",
      "58.0",
      "78.0",
      "59.0",
      "78.0",
      "60.0",
      "78.0",
      "61.0",
      "78.0",
      "62.0",
      "78.0",
      "63.0",
      "78.0",
      "64.0",
      "78.0",
      "65.0",
      "78.0",
      "66.0",
      "78.0",
      "67.0",
      "78.0",
      "68.0",
      "78.0",
      "69.0",
      "78.0",
      "70.0",
      "78.0",
      "71.0",
      "78.0",
      "72.0",
      "78.0",
      "73.0",
      "78.0",
      "74.0",
      "78.0",
      "75.0",
      "78.0",
      "76.0",
      "78.0",
      "77.0",
      "78.0",
      "78.0",
      "78.0",
      "79.0",
      "78.0",
      "80.0",
      "78.0",
      "81.0",
      "78.0",
      "82.0",
      "78.0",
      "83.0",
      "78.0",
      "84.0",
      "78.0",
      "85.0",
      "78.0",
      "86.0",
      "78.0",
      "87.0",
      "78.0",
      "88.0",
      "78.0",
      "89.0",
      "78.0",
      "90.0",
      "78.0",
      "91.0",
      "78.0",
      "92.0",
      "78.0",
      "93.0",
      "78.0",
      "94.0",
      "78.0",
      "95.0",
      "78.0",
      "96.0",
      "78.0",
      "97.0",
      "78.0",
      "98.0",
      "78.0",
      "99.0",
      "79.0",
      "1.0",
      "79.0",
      "2.0",
      "79.0",
      "3.0",
      "79.0",
      "4.0",
      "79.0",
      "5.0",
      "79.0",
      "6.0",
      "79.0",
      "7.0",
      "79.0",
      "8.0",
      "79.0",
      "9.0",
      "79.0",
      "10.0",
      "79.0",
      "11.0",
      "79.0",
      "12.0",
      "79.0",
      "13.0",
      "79.0",
      "14.0",
      "79.0",
      "15.0",
      "79.0",
      "16.0",
      "79.0",
      "17.0",
      "79.0",
      "18.0",
      "79.0",
      "19.0",
      "79.0",
      "20.0",
      "79.0",
      "21.0",
      "79.0",
      "22.0",
      "79.0",
      "23.0",
      "79.0",
      "24.0",
      "79.0",
      "25.0",
      "79.0",
      "26.0",
      "79.0",
      "27.0",
      "79.0",
      "28.0",
      "79.0",
      "29.0",
      "79.0",
      "30.0",
      "79.0",
      "31.0",
      "79.0",
      "32.0",
      "79.0",
      "33.0",
      "79.0",
      "34.0",
      "79.0",
      "35.0",
      "79.0",
      "36.0",
      "79.0",
      "37.0",
      "79.0",
      "38.0",
      "79.0",
      "39.0",
      "79.0",
      "40.0",
      "79.0",
      "41.0",
      "79.0",
      "42.0",
      "79.0",
      "43.0",
      "79.0",
      "44.0",
      "79.0",
      "45.0",
      "79.0",
      "46.0",
      "79.0",
      "47.0",
      "79.0",
      "48.0",
      "79.0",
      "49.0",
      "79.0",
      "50.0",
      "79.0",
      "51.0",
      "79.0",
      "52.0",
      "79.0",
      "53.0",
      "79.0",
      "54.0",
      "79.0",
      "55.0",
      "79.0",
      "56.0",
      "79.0",
      "57.0",
      "79.0",
      "58.0",
      "79.0",
      "59.0",
      "79.0",
      "60.0",
      "79.0",
      "61.0",
      "79.0",
      "62.0",
      "79.0",
      "63.0",
      "79.0",
      "64.0",
      "79.0",
      "65.0",
      "79.0",
      "66.0",
      "79.0",
      "67.0",
      "79.0",
      "68.0",
      "79.0",
      "69.0",
      "79.0",
      "70.0",
      "79.0",
      "71.0",
      "79.0",
      "72.0",
      "79.0",
      "73.0",
      "79.0",
      "74.0",
      "79.0",
      "75.0",
      "79.0",
      "76.0",
      "79.0",
      "77.0",
      "79.0",
      "78.0",
      "79.0",
      "79.0",
      "79.0",
      "80.0",
      "79.0",
      "81.0",
      "79.0",
      "82.0",
      "79.0",
      "83.0",
      "79.0",
      "84.0",
      "79.0",
      "85.0",
      "79.0",
      "86.0",
      "79.0",
      "87.0",
      "79.0",
      "88.0",
      "79.0",
      "89.0",
      "79.0",
      "90.0",
      "79.0",
      "91.0",
      "79.0",
      "92.0",
      "79.0",
      "93.0",
      "79.0",
      "94.0",
      "79.0",
      "95.0",
      "79.0",
      "96.0",
      "79.0",
      "97.0",
      "79.0",
      "98.0",
      "79.0",
      "99.0",
      "80.0",
      "1.0",
      "80.0",
      "2.0",
      "80.0",
      "3.0",
      "80.0",
      "4.0",
      "80.0",
      "5.0",
      "80.0",
      "6.0",
      "80.0",
      "7.0",
      "80.0",
      "8.0",
      "80.0",
      "9.0",
      "80.0",
      "10.0",
      "80.0",
      "11.0",
      "80.0",
      "12.0",
      "80.0",
      "13.0",
      "80.0",
      "14.0",
      "80.0",
      "15.0",
      "80.0",
      "16.0",
      "80.0",
      "17.0",
      "80.0",
      "18.0",
      "80.0",
      "19.0",
      "80.0",
      "20.0",
      "80.0",
      "21.0",
      "80.0",
      "22.0",
      "80.0",
      "23.0",
      "80.0",
      "24.0",
      "80.0",
      "25.0",
      "80.0",
      "26.0",
      "80.0",
      "27.0",
      "80.0",
      "28.0",
      "80.0",
      "29.0",
      "80.0",
      "30.0",
      "80.0",
      "31.0",
      "80.0",
      "32.0",
      "80.0",
      "33.0",
      "80.0",
      "34.0",
      "80.0",
      "35.0",
      "80.0",
      "36.0",
      "80.0",
      "37.0",
      "80.0",
      "38.0",
      "80.0",
      "39.0",
      "80.0",
      "40.0",
      "80.0",
      "41.0",
      "80.0",
      "42.0",
      "80.0",
      "43.0",
      "80.0",
      "44.0",
      "80.0",
      "45.0",
      "80.0",
      "46.0",
      "80.0",
      "47.0",
      "80.0",
      "48.0",
      "80.0",
      "49.0",
      "80.0",
      "50.0",
      "80.0",
      "51.0",
      "80.0",
      "52.0",
      "80.0",
      "53.0",
      "80.0",
      "54.0",
      "80.0",
      "55.0",
      "80.0",
      "56.0",
      "80.0",
      "57.0",
      "80.0",
      "58.0",
      "80.0",
      "59.0",
      "80.0",
      "60.0",
      "80.0",
      "61.0",
      "80.0",
      "62.0",
      "80.0",
      "63.0",
      "80.0",
      "64.0",
      "80.0",
      "65.0",
      "80.0",
      "66.0",
      "80.0",
      "67.0",
      "80.0",
      "68.0",
      "80.0",
      "69.0",
      "80.0",
      "70.0",
      "80.0",
      "71.0",
      "80.0",
      "72.0",
      "80.0",
      "73.0",
      "80.0",
      "74.0",
      "80.0",
      "75.0",
      "80.0",
      "76.0",
      "80.0",
      "77.0",
      "80.0",
      "78.0",
      "80.0",
      "79.0",
      "80.0",
      "80.0",
      "80.0",
      "81.0",
      "80.0",
      "82.0",
      "80.0",
      "83.0",
      "80.0",
      "84.0",
      "80.0",
      "85.0",
      "80.0",
      "86.0",
      "80.0",
      "87.0",
      "80.0",
      "88.0",
      "80.0",
      "89.0",
      "80.0",
      "90.0",
      "80.0",
      "91.0",
      "80.0",
      "92.0",
      "80.0",
      "93.0",
      "80.0",
      "94.0",
      "80.0",
      "95.0",
      "80.0",
      "96.0",
      "80.0",
      "97.0",
      "80.0",
      "98.0",
      "80.0",
      "99.0",
      "81.0",
      "1.0",
      "81.0",
      "2.0",
      "81.0",
      "3.0",
      "81.0",
      "4.0",
      "81.0",
      "5.0",
      "81.0",
      "6.0",
      "81.0",
      "7.0",
      "81.0",
      "8.0",
      "81.0",
      "9.0",
      "81.0",
      "10.0",
      "81.0",
      "11.0",
      "81.0",
      "12.0",
      "81.0",
      "13.0",
      "81.0",
      "14.0",
      "81.0",
      "15.0",
      "81.0",
      "16.0",
      "81.0",
      "17.0",
      "81.0",
      "18.0",
      "81.0",
      "19.0",
      "81.0",
      "20.0",
      "81.0",
      "21.0",
      "81.0",
      "22.0",
      "81.0",
      "23.0",
      "81.0",
      "24.0",
      "81.0",
      "25.0",
      "81.0",
      "26.0",
      "81.0",
      "27.0",
      "81.0",
      "28.0",
      "81.0",
      "29.0",
      "81.0",
      "30.0",
      "81.0",
      "31.0",
      "81.0",
      "32.0",
      "81.0",
      "33.0",
      "81.0",
      "34.0",
      "81.0",
      "35.0",
      "81.0",
      "36.0",
      "81.0",
      "37.0",
      "81.0",
      "38.0",
      "81.0",
      "39.0",
      "81.0",
      "40.0",
      "81.0",
      "41.0",
      "81.0",
      "42.0",
      "81.0",
      "43.0",
      "81.0",
      "44.0",
      "81.0",
      "45.0",
      "81.0",
      "46.0",
      "81.0",
      "47.0",
      "81.0",
      "48.0",
      "81.0",
      "49.0",
      "81.0",
      "50.0",
      "81.0",
      "51.0",
      "81.0",
      "52.0",
      "81.0",
      "53.0",
      "81.0",
      "54.0",
      "81.0",
      "55.0",
      "81.0",
      "56.0",
      "81.0",
      "57.0",
      "81.0",
      "58.0",
      "81.0",
      "59.0",
      "81.0",
      "60.0",
      "81.0",
      "61.0",
      "81.0",
      "62.0",
      "81.0",
      "63.0",
      "81.0",
      "64.0",
      "81.0",
      "65.0",
      "81.0",
      "66.0",
      "81.0",
      "67.0",
      "81.0",
      "68.0",
      "81.0",
      "69.0",
      "81.0",
      "70.0",
      "81.0",
      "71.0",
      "81.0",
      "72.0",
      "81.0",
      "73.0",
      "81.0",
      "74.0",
      "81.0",
      "75.0",
      "81.0",
      "76.0",
      "81.0",
      "77.0",
      "81.0",
      "78.0",
      "81.0",
      "79.0",
      "81.0",
      "80.0",
      "81.0",
      "81.0",
      "81.0",
      "82.0",
      "81.0",
      "83.0",
      "81.0",
      "84.0",
      "81.0",
      "85.0",
      "81.0",
      "86.0",
      "81.0",
      "87.0",
      "81.0",
      "88.0",
      "81.0",
      "89.0",
      "81.0",
      "90.0",
      "81.0",
      "91.0",
      "81.0",
      "92.0",
      "81.0",
      "93.0",
      "81.0",
      "94.0",
      "81.0",
      "95.0",
      "81.0",
      "96.0",
      "81.0",
      "97.0",
      "81.0",
      "98.0",
      "81.0",
      "99.0",
      "82.0",
      "1.0",
      "82.0",
      "2.0",
      "82.0",
      "3.0",
      "82.0",
      "4.0",
      "82.0",
      "5.0",
      "82.0",
      "6.0",
      "82.0",
      "7.0",
      "82.0",
      "8.0",
      "82.0",
      "9.0",
      "82.0",
      "10.0",
      "82.0",
      "11.0",
      "82.0",
      "12.0",
      "82.0",
      "13.0",
      "82.0",
      "14.0",
      "82.0",
      "15.0",
      "82.0",
      "16.0",
      "82.0",
      "17.0",
      "82.0",
      "18.0",
      "82.0",
      "19.0",
      "82.0",
      "20.0",
      "82.0",
      "21.0",
      "82.0",
      "22.0",
      "82.0",
      "23.0",
      "82.0",
      "24.0",
      "82.0",
      "25.0",
      "82.0",
      "26.0",
      "82.0",
      "27.0",
      "82.0",
      "28.0",
      "82.0",
      "29.0",
      "82.0",
      "30.0",
      "82.0",
      "31.0",
      "82.0",
      "32.0",
      "82.0",
      "33.0",
      "82.0",
      "34.0",
      "82.0",
      "35.0",
      "82.0",
      "36.0",
      "82.0",
      "37.0",
      "82.0",
      "38.0",
      "82.0",
      "39.0",
      "82.0",
      "40.0",
      "82.0",
      "41.0",
      "82.0",
      "42.0",
      "82.0",
      "43.0",
      "82.0",
      "44.0",
      "82.0",
      "45.0",
      "82.0",
      "46.0",
      "82.0",
      "47.0",
      "82.0",
      "48.0",
      "82.0",
      "49.0",
      "82.0",
      "50.0",
      "82.0",
      "51.0",
      "82.0",
      "52.0",
      "82.0",
      "53.0",
      "82.0",
      "54.0",
      "82.0",
      "55.0",
      "82.0",
      "56.0",
      "82.0",
      "57.0",
      "82.0",
      "58.0",
      "82.0",
      "59.0",
      "82.0",
      "60.0",
      "82.0",
      "61.0",
      "82.0",
      "62.0",
      "82.0",
      "63.0",
      "82.0",
      "64.0",
      "82.0",
      "65.0",
      "82.0",
      "66.0",
      "82.0",
      "67.0",
      "82.0",
      "68.0",
      "82.0",
      "69.0",
      "82.0",
      "70.0",
      "82.0",
      "71.0",
      "82.0",
      "72.0",
      "82.0",
      "73.0",
      "82.0",
      "74.0",
      "82.0",
      "75.0",
      "82.0",
      "76.0",
      "82.0",
      "77.0",
      "82.0",
      "78.0",
      "82.0",
      "79.0",
      "82.0",
      "80.0",
      "82.0",
      "81.0",
      "82.0",
      "82.0",
      "82.0",
      "83.0",
      "82.0",
      "84.0",
      "82.0",
      "85.0",
      "82.0",
      "86.0",
      "82.0",
      "87.0",
      "82.0",
      "88.0",
      "82.0",
      "89.0",
      "82.0",
      "90.0",
      "82.0",
      "91.0",
      "82.0",
      "92.0",
      "82.0",
      "93.0",
      "82.0",
      "94.0",
      "82.0",
      "95.0",
      "82.0",
      "96.0",
      "82.0",
      "97.0",
      "82.0",
      "98.0",
      "82.0",
      "99.0",
      "83.0",
      "1.0",
      "83.0",
      "2.0",
      "83.0",
      "3.0",
      "83.0",
      "4.0",
      "83.0",
      "5.0",
      "83.0",
      "6.0",
      "83.0",
      "7.0",
      "83.0",
      "8.0",
      "83.0",
      "9.0",
      "83.0",
      "10.0",
      "83.0",
      "11.0",
      "83.0",
      "12.0",
      "83.0",
      "13.0",
      "83.0",
      "14.0",
      "83.0",
      "15.0",
      "83.0",
      "16.0",
      "83.0",
      "17.0",
      "83.0",
      "18.0",
      "83.0",
      "19.0",
      "83.0",
      "20.0",
      "83.0",
      "21.0",
      "83.0",
      "22.0",
      "83.0",
      "23.0",
      "83.0",
      "24.0",
      "83.0",
      "25.0",
      "83.0",
      "26.0",
      "83.0",
      "27.0",
      "83.0",
      "28.0",
      "83.0",
      "29.0",
      "83.0",
      "30.0",
      "83.0",
      "31.0",
      "83.0",
      "32.0",
      "83.0",
      "33.0",
      "83.0",
      "34.0",
      "83.0",
      "35.0",
      "83.0",
      "36.0",
      "83.0",
      "37.0",
      "83.0",
      "38.0",
      "83.0",
      "39.0",
      "83.0",
      "40.0",
      "83.0",
      "41.0",
      "83.0",
      "42.0",
      "83.0",
      "43.0",
      "83.0",
      "44.0",
      "83.0",
      "45.0",
      "83.0",
      "46.0",
      "83.0",
      "47.0",
      "83.0",
      "48.0",
      "83.0",
      "49.0",
      "83.0",
      "50.0",
      "83.0",
      "51.0",
      "83.0",
      "52.0",
      "83.0",
      "53.0",
      "83.0",
      "54.0",
      "83.0",
      "55.0",
      "83.0",
      "56.0",
      "83.0",
      "57.0",
      "83.0",
      "58.0",
      "83.0",
      "59.0",
      "83.0",
      "60.0",
      "83.0",
      "61.0",
      "83.0",
      "62.0",
      "83.0",
      "63.0",
      "83.0",
      "64.0",
      "83.0",
      "65.0",
      "83.0",
      "66.0",
      "83.0",
      "67.0",
      "83.0",
      "68.0",
      "83.0",
      "69.0",
      "83.0",
      "70.0",
      "83.0",
      "71.0",
      "83.0",
      "72.0",
      "83.0",
      "73.0",
      "83.0",
      "74.0",
      "83.0",
      "75.0",
      "83.0",
      "76.0",
      "83.0",
      "77.0",
      "83.0",
      "78.0",
      "83.0",
      "79.0",
      "83.0",
      "80.0",
      "83.0",
      "81.0",
      "83.0",
      "82.0",
      "83.0",
      "83.0",
      "83.0",
      "84.0",
      "83.0",
      "85.0",
      "83.0",
      "86.0",
      "83.0",
      "87.0",
      "83.0",
      "88.0",
      "83.0",
      "89.0",
      "83.0",
      "90.0",
      "83.0",
      "91.0",
      "83.0",
      "92.0",
      "83.0",
      "93.0",
      "83.0",
      "94.0",
      "83.0",
      "95.0",
      "83.0",
      "96.0",
      "83.0",
      "97.0",
      "83.0",
      "98.0",
      "83.0",
      "99.0",
      "84.0",
      "1.0",
      "84.0",
      "2.0",
      "84.0",
      "3.0",
      "84.0",
      "4.0",
      "84.0",
      "5.0",
      "84.0",
      "6.0",
      "84.0",
      "7.0",
      "84.0",
      "8.0",
      "84.0",
      "9.0",
      "84.0",
      "10.0",
      "84.0",
      "11.0",
      "84.0",
      "12.0",
      "84.0",
      "13.0",
      "84.0",
      "14.0",
      "84.0",
      "15.0",
      "84.0",
      "16.0",
      "84.0",
      "17.0",
      "84.0",
      "18.0",
      "84.0",
      "19.0",
      "84.0",
      "20.0",
      "84.0",
      "21.0",
      "84.0",
      "22.0",
      "84.0",
      "23.0",
      "84.0",
      "24.0",
      "84.0",
      "25.0",
      "84.0",
      "26.0",
      "84.0",
      "27.0",
      "84.0",
      "28.0",
      "84.0",
      "29.0",
      "84.0",
      "30.0",
      "84.0",
      "31.0",
      "84.0",
      "32.0",
      "84.0",
      "33.0",
      "84.0",
      "34.0",
      "84.0",
      "35.0",
      "84.0",
      "36.0",
      "84.0",
      "37.0",
      "84.0",
      "38.0",
      "84.0",
      "39.0",
      "84.0",
      "40.0",
      "84.0",
      "41.0",
      "84.0",
      "42.0",
      "84.0",
      "43.0",
      "84.0",
      "44.0",
      "84.0",
      "45.0",
      "84.0",
      "46.0",
      "84.0",
      "47.0",
      "84.0",
      "48.0",
      "84.0",
      "49.0",
      "84.0",
      "50.0",
      "84.0",
      "51.0",
      "84.0",
      "52.0",
      "84.0",
      "53.0",
      "84.0",
      "54.0",
      "84.0",
      "55.0",
      "84.0",
      "56.0",
      "84.0",
      "57.0",
      "84.0",
      "58.0",
      "84.0",
      "59.0",
      "84.0",
      "60.0",
      "84.0",
      "61.0",
      "84.0",
      "62.0",
      "84.0",
      "63.0",
      "84.0",
      "64.0",
      "84.0",
      "65.0",
      "84.0",
      "66.0",
      "84.0",
      "67.0",
      "84.0",
      "68.0",
      "84.0",
      "69.0",
      "84.0",
      "70.0",
      "84.0",
      "71.0",
      "84.0",
      "72.0",
      "84.0",
      "73.0",
      "84.0",
      "74.0",
      "84.0",
      "75.0",
      "84.0",
      "76.0",
      "84.0",
      "77.0",
      "84.0",
      "78.0",
      "84.0",
      "79.0",
      "84.0",
      "80.0",
      "84.0",
      "81.0",
      "84.0",
      "82.0",
      "84.0",
      "83.0",
      "84.0",
      "84.0",
      "84.0",
      "85.0",
      "84.0",
      "86.0",
      "84.0",
      "87.0",
      "84.0",
      "88.0",
      "84.0",
      "89.0",
      "84.0",
      "90.0",
      "84.0",
      "91.0",
      "84.0",
      "92.0",
      "84.0",
      "93.0",
      "84.0",
      "94.0",
      "84.0",
      "95.0",
      "84.0",
      "96.0",
      "84.0",
      "97.0",
      "84.0",
      "98.0",
      "84.0",
      "99.0",
      "85.0",
      "1.0",
      "85.0",
      "2.0",
      "85.0",
      "3.0",
      "85.0",
      "4.0",
      "85.0",
      "5.0",
      "85.0",
      "6.0",
      "85.0",
      "7.0",
      "85.0",
      "8.0",
      "85.0",
      "9.0",
      "85.0",
      "10.0",
      "85.0",
      "11.0",
      "85.0",
      "12.0",
      "85.0",
      "13.0",
      "85.0",
      "14.0",
      "85.0",
      "15.0",
      "85.0",
      "16.0",
      "85.0",
      "17.0",
      "85.0",
      "18.0",
      "85.0",
      "19.0",
      "85.0",
      "20.0",
      "85.0",
      "21.0",
      "85.0",
      "22.0",
      "85.0",
      "23.0",
      "85.0",
      "24.0",
      "85.0",
      "25.0",
      "85.0",
      "26.0",
      "85.0",
      "27.0",
      "85.0",
      "28.0",
      "85.0",
      "29.0",
      "85.0",
      "30.0",
      "85.0",
      "31.0",
      "85.0",
      "32.0",
      "85.0",
      "33.0",
      "85.0",
      "34.0",
      "85.0",
      "35.0",
      "85.0",
      "36.0",
      "85.0",
      "37.0",
      "85.0",
      "38.0",
      "85.0",
      "39.0",
      "85.0",
      "40.0",
      "85.0",
      "41.0",
      "85.0",
      "42.0",
      "85.0",
      "43.0",
      "85.0",
      "44.0",
      "85.0",
      "45.0",
      "85.0",
      "46.0",
      "85.0",
      "47.0",
      "85.0",
      "48.0",
      "85.0",
      "49.0",
      "85.0",
      "50.0",
      "85.0",
      "51.0",
      "85.0",
      "52.0",
      "85.0",
      "53.0",
      "85.0",
      "54.0",
      "85.0",
      "55.0",
      "85.0",
      "56.0",
      "85.0",
      "57.0",
      "85.0",
      "58.0",
      "85.0",
      "59.0",
      "85.0",
      "60.0",
      "85.0",
      "61.0",
      "85.0",
      "62.0",
      "85.0",
      "63.0",
      "85.0",
      "64.0",
      "85.0",
      "65.0",
      "85.0",
      "66.0",
      "85.0",
      "67.0",
      "85.0",
      "68.0",
      "85.0",
      "69.0",
      "85.0",
      "70.0",
      "85.0",
      "71.0",
      "85.0",
      "72.0",
      "85.0",
      "73.0",
      "85.0",
      "74.0",
      "85.0",
      "75.0",
      "85.0",
      "76.0",
      "85.0",
      "77.0",
      "85.0",
      "78.0",
      "85.0",
      "79.0",
      "85.0",
      "80.0",
      "85.0",
      "81.0",
      "85.0",
      "82.0",
      "85.0",
      "83.0",
      "85.0",
      "84.0",
      "85.0",
      "85.0",
      "85.0",
      "86.0",
      "85.0",
      "87.0",
      "85.0",
      "88.0",
      "85.0",
      "89.0",
      "85.0",
      "90.0",
      "85.0",
      "91.0",
      "85.0",
      "92.0",
      "85.0",
      "93.0",
      "85.0",
      "94.0",
      "85.0",
      "95.0",
      "85.0",
      "96.0",
      "85.0",
      "97.0",
      "85.0",
      "98.0",
      "85.0",
      "99.0",
      "86.0",
      "1.0",
      "86.0",
      "2.0",
      "86.0",
      "3.0",
      "86.0",
      "4.0",
      "86.0",
      "5.0",
      "86.0",
      "6.0",
      "86.0",
      "7.0",
      "86.0",
      "8.0",
      "86.0",
      "9.0",
      "86.0",
      "10.0",
      "86.0",
      "11.0",
      "86.0",
      "12.0",
      "86.0",
      "13.0",
      "86.0",
      "14.0",
      "86.0",
      "15.0",
      "86.0",
      "16.0",
      "86.0",
      "17.0",
      "86.0",
      "18.0",
      "86.0",
      "19.0",
      "86.0",
      "20.0",
      "86.0",
      "21.0",
      "86.0",
      "22.0",
      "86.0",
      "23.0",
      "86.0",
      "24.0",
      "86.0",
      "25.0",
      "86.0",
      "26.0",
      "86.0",
      "27.0",
      "86.0",
      "28.0",
      "86.0",
      "29.0",
      "86.0",
      "30.0",
      "86.0",
      "31.0",
      "86.0",
      "32.0",
      "86.0",
      "33.0",
      "86.0",
      "34.0",
      "86.0",
      "35.0",
      "86.0",
      "36.0",
      "86.0",
      "37.0",
      "86.0",
      "38.0",
      "86.0",
      "39.0",
      "86.0",
      "40.0",
      "86.0",
      "41.0",
      "86.0",
      "42.0",
      "86.0",
      "43.0",
      "86.0",
      "44.0",
      "86.0",
      "45.0",
      "86.0",
      "46.0",
      "86.0",
      "47.0",
      "86.0",
      "48.0",
      "86.0",
      "49.0",
      "86.0",
      "50.0",
      "86.0",
      "51.0",
      "86.0",
      "52.0",
      "86.0",
      "53.0",
      "86.0",
      "54.0",
      "86.0",
      "55.0",
      "86.0",
      "56.0",
      "86.0",
      "57.0",
      "86.0",
      "58.0",
      "86.0",
      "59.0",
      "86.0",
      "60.0",
      "86.0",
      "61.0",
      "86.0",
      "62.0",
      "86.0",
      "63.0",
      "86.0",
      "64.0",
      "86.0",
      "65.0",
      "86.0",
      "66.0",
      "86.0",
      "67.0",
      "86.0",
      "68.0",
      "86.0",
      "69.0",
      "86.0",
      "70.0",
      "86.0",
      "71.0",
      "86.0",
      "72.0",
      "86.0",
      "73.0",
      "86.0",
      "74.0",
      "86.0",
      "75.0",
      "86.0",
      "76.0",
      "86.0",
      "77.0",
      "86.0",
      "78.0",
      "86.0",
      "79.0",
      "86.0",
      "80.0",
      "86.0",
      "81.0",
      "86.0",
      "82.0",
      "86.0",
      "83.0",
      "86.0",
      "84.0",
      "86.0",
      "85.0",
      "86.0",
      "86.0",
      "86.0",
      "87.0",
      "86.0",
      "88.0",
      "86.0",
      "89.0",
      "86.0",
      "90.0",
      "86.0",
      "91.0",
      "86.0",
      "92.0",
      "86.0",
      "93.0",
      "86.0",
      "94.0",
      "86.0",
      "95.0",
      "86.0",
      "96.0",
      "86.0",
      "97.0",
      "86.0",
      "98.0",
      "86.0",
      "99.0",
      "87.0",
      "1.0",
      "87.0",
      "2.0",
      "87.0",
      "3.0",
      "87.0",
      "4.0",
      "87.0",
      "5.0",
      "87.0",
      "6.0",
      "87.0",
      "7.0",
      "87.0",
      "8.0",
      "87.0",
      "9.0",
      "87.0",
      "10.0",
      "87.0",
      "11.0",
      "87.0",
      "12.0",
      "87.0",
      "13.0",
      "87.0",
      "14.0",
      "87.0",
      "15.0",
      "87.0",
      "16.0",
      "87.0",
      "17.0",
      "87.0",
      "18.0",
      "87.0",
      "19.0",
      "87.0",
      "20.0",
      "87.0",
      "21.0",
      "87.0",
      "22.0",
      "87.0",
      "23.0",
      "87.0",
      "24.0",
      "87.0",
      "25.0",
      "87.0",
      "26.0",
      "87.0",
      "27.0",
      "87.0",
      "28.0",
      "87.0",
      "29.0",
      "87.0",
      "30.0",
      "87.0",
      "31.0",
      "87.0",
      "32.0",
      "87.0",
      "33.0",
      "87.0",
      "34.0",
      "87.0",
      "35.0",
      "87.0",
      "36.0",
      "87.0",
      "37.0",
      "87.0",
      "38.0",
      "87.0",
      "39.0",
      "87.0",
      "40.0",
      "87.0",
      "41.0",
      "87.0",
      "42.0",
      "87.0",
      "43.0",
      "87.0",
      "44.0",
      "87.0",
      "45.0",
      "87.0",
      "46.0",
      "87.0",
      "47.0",
      "87.0",
      "48.0",
      "87.0",
      "49.0",
      "87.0",
      "50.0",
      "87.0",
      "51.0",
      "87.0",
      "52.0",
      "87.0",
      "53.0",
      "87.0",
      "54.0",
      "87.0",
      "55.0",
      "87.0",
      "56.0",
      "87.0",
      "57.0",
      "87.0",
      "58.0",
      "87.0",
      "59.0",
      "87.0",
      "60.0",
      "87.0",
      "61.0",
      "87.0",
      "62.0",
      "87.0",
      "63.0",
      "87.0",
      "64.0",
      "87.0",
      "65.0",
      "87.0",
      "66.0",
      "87.0",
      "67.0",
      "87.0",
      "68.0",
      "87.0",
      "69.0",
      "87.0",
      "70.0",
      "87.0",
      "71.0",
      "87.0",
      "72.0",
      "87.0",
      "73.0",
      "87.0",
      "74.0",
      "87.0",
      "75.0",
      "87.0",
      "76.0",
      "87.0",
      "77.0",
      "87.0",
      "78.0",
      "87.0",
      "79.0",
      "87.0",
      "80.0",
      "87.0",
      "81.0",
      "87.0",
      "82.0",
      "87.0",
      "83.0",
      "87.0",
      "84.0",
      "87.0",
      "85.0",
      "87.0",
      "86.0",
      "87.0",
      "87.0",
      "87.0",
      "88.0",
      "87.0",
      "89.0",
      "87.0",
      "90.0",
      "87.0",
      "91.0",
      "87.0",
      "92.0",
      "87.0",
      "93.0",
      "87.0",
      "94.0",
      "87.0",
      "95.0",
      "87.0",
      "96.0",
      "87.0",
      "97.0",
      "87.0",
      "98.0",
      "87.0",
      "99.0",
      "88.0",
      "1.0",
      "88.0",
      "2.0",
      "88.0",
      "3.0",
      "88.0",
      "4.0",
      "88.0",
      "5.0",
      "88.0",
      "6.0",
      "88.0",
      "7.0",
      "88.0",
      "8.0",
      "88.0",
      "9.0",
      "88.0",
      "10.0",
      "88.0",
      "11.0",
      "88.0",
      "12.0",
      "88.0",
      "13.0",
      "88.0",
      "14.0",
      "88.0",
      "15.0",
      "88.0",
      "16.0",
      "88.0",
      "17.0",
      "88.0",
      "18.0",
      "88.0",
      "19.0",
      "88.0",
      "20.0",
      "88.0",
      "21.0",
      "88.0",
      "22.0",
      "88.0",
      "23.0",
      "88.0",
      "24.0",
      "88.0",
      "25.0",
      "88.0",
      "26.0",
      "88.0",
      "27.0",
      "88.0",
      "28.0",
      "88.0",
      "29.0",
      "88.0",
      "30.0",
      "88.0",
      "31.0",
      "88.0",
      "32.0",
      "88.0",
      "33.0",
      "88.0",
      "34.0",
      "88.0",
      "35.0",
      "88.0",
      "36.0",
      "88.0",
      "37.0",
      "88.0",
      "38.0",
      "88.0",
      "39.0",
      "88.0",
      "40.0",
      "88.0",
      "41.0",
      "88.0",
      "42.0",
      "88.0",
      "43.0",
      "88.0",
      "44.0",
      "88.0",
      "45.0",
      "88.0",
      "46.0",
      "88.0",
      "47.0",
      "88.0",
      "48.0",
      "88.0",
      "49.0",
      "88.0",
      "50.0",
      "88.0",
      "51.0",
      "88.0",
      "52.0",
      "88.0",
      "53.0",
      "88.0",
      "54.0",
      "88.0",
      "55.0",
      "88.0",
      "56.0",
      "88.0",
      "57.0",
      "88.0",
      "58.0",
      "88.0",
      "59.0",
      "88.0",
      "60.0",
      "88.0",
      "61.0",
      "88.0",
      "62.0",
      "88.0",
      "63.0",
      "88.0",
      "64.0",
      "88.0",
      "65.0",
      "88.0",
      "66.0",
      "88.0",
      "67.0",
      "88.0",
      "68.0",
      "88.0",
      "69.0",
      "88.0",
      "70.0",
      "88.0",
      "71.0",
      "88.0",
      "72.0",
      "88.0",
      "73.0",
      "88.0",
      "74.0",
      "88.0",
      "75.0",
      "88.0",
      "76.0",
      "88.0",
      "77.0",
      "88.0",
      "78.0",
      "88.0",
      "79.0",
      "88.0",
      "80.0",
      "88.0",
      "81.0",
      "88.0",
      "82.0",
      "88.0",
      "83.0",
      "88.0",
      "84.0",
      "88.0",
      "85.0",
      "88.0",
      "86.0",
      "88.0",
      "87.0",
      "88.0",
      "88.0",
      "88.0",
      "89.0",
      "88.0",
      "90.0",
      "88.0",
      "91.0",
      "88.0",
      "92.0",
      "88.0",
      "93.0",
      "88.0",
      "94.0",
      "88.0",
      "95.0",
      "88.0",
      "96.0",
      "88.0",
      "97.0",
      "88.0",
      "98.0",
      "88.0",
      "99.0",
      "89.0",
      "1.0",
      "89.0",
      "2.0",
      "89.0",
      "3.0",
      "89.0",
      "4.0",
      "89.0",
      "5.0",
      "89.0",
      "6.0",
      "89.0",
      "7.0",
      "89.0",
      "8.0",
      "89.0",
      "9.0",
      "89.0",
      "10.0",
      "89.0",
      "11.0",
      "89.0",
      "12.0",
      "89.0",
      "13.0",
      "89.0",
      "14.0",
      "89.0",
      "15.0",
      "89.0",
      "16.0",
      "89.0",
      "17.0",
      "89.0",
      "18.0",
      "89.0",
      "19.0",
      "89.0",
      "20.0",
      "89.0",
      "21.0",
      "89.0",
      "22.0",
      "89.0",
      "23.0",
      "89.0",
      "24.0",
      "89.0",
      "25.0",
      "89.0",
      "26.0",
      "89.0",
      "27.0",
      "89.0",
      "28.0",
      "89.0",
      "29.0",
      "89.0",
      "30.0",
      "89.0",
      "31.0",
      "89.0",
      "32.0",
      "89.0",
      "33.0",
      "89.0",
      "34.0",
      "89.0",
      "35.0",
      "89.0",
      "36.0",
      "89.0",
      "37.0",
      "89.0",
      "38.0",
      "89.0",
      "39.0",
      "89.0",
      "40.0",
      "89.0",
      "41.0",
      "89.0",
      "42.0",
      "89.0",
      "43.0",
      "89.0",
      "44.0",
      "89.0",
      "45.0",
      "89.0",
      "46.0",
      "89.0",
      "47.0",
      "89.0",
      "48.0",
      "89.0",
      "49.0",
      "89.0",
      "50.0",
      "89.0",
      "51.0",
      "89.0",
      "52.0",
      "89.0",
      "53.0",
      "89.0",
      "54.0",
      "89.0",
      "55.0",
      "89.0",
      "56.0",
      "89.0",
      "57.0",
      "89.0",
      "58.0",
      "89.0",
      "59.0",
      "89.0",
      "60.0",
      "89.0",
      "61.0",
      "89.0",
      "62.0",
      "89.0",
      "63.0",
      "89.0",
      "64.0",
      "89.0",
      "65.0",
      "89.0",
      "66.0",
      "89.0",
      "67.0",
      "89.0",
      "68.0",
      "89.0",
      "69.0",
      "89.0",
      "70.0",
      "89.0",
      "71.0",
      "89.0",
      "72.0",
      "89.0",
      "73.0",
      "89.0",
      "74.0",
      "89.0",
      "75.0",
      "89.0",
      "76.0",
      "89.0",
      "77.0",
      "89.0",
      "78.0",
      "89.0",
      "79.0",
      "89.0",
      "80.0",
      "89.0",
      "81.0",
      "89.0",
      "82.0",
      "89.0",
      "83.0",
      "89.0",
      "84.0",
      "89.0",
      "85.0",
      "89.0",
      "86.0",
      "89.0",
      "87.0",
      "89.0",
      "88.0",
      "89.0",
      "89.0",
      "89.0",
      "90.0",
      "89.0",
      "91.0",
      "89.0",
      "92.0",
      "89.0",
      "93.0",
      "89.0",
      "94.0",
      "89.0",
      "95.0",
      "89.0",
      "96.0",
      "89.0",
      "97.0",
      "89.0",
      "98.0",
      "89.0",
      "99.0",
      "90.0",
      "1.0",
      "90.0",
      "2.0",
      "90.0",
      "3.0",
      "90.0",
      "4.0",
      "90.0",
      "5.0",
      "90.0",
      "6.0",
      "90.0",
      "7.0",
      "90.0",
      "8.0",
      "90.0",
      "9.0",
      "90.0",
      "10.0",
      "90.0",
      "11.0",
      "90.0",
      "12.0",
      "90.0",
      "13.0",
      "90.0",
      "14.0",
      "90.0",
      "15.0",
      "90.0",
      "16.0",
      "90.0",
      "17.0",
      "90.0",
      "18.0",
      "90.0",
      "19.0",
      "90.0",
      "20.0",
      "90.0",
      "21.0",
      "90.0",
      "22.0",
      "90.0",
      "23.0",
      "90.0",
      "24.0",
      "90.0",
      "25.0",
      "90.0",
      "26.0",
      "90.0",
      "27.0",
      "90.0",
      "28.0",
      "90.0",
      "29.0",
      "90.0",
      "30.0",
      "90.0",
      "31.0",
      "90.0",
      "32.0",
      "90.0",
      "33.0",
      "90.0",
      "34.0",
      "90.0",
      "35.0",
      "90.0",
      "36.0",
      "90.0",
      "37.0",
      "90.0",
      "38.0",
      "90.0",
      "39.0",
      "90.0",
      "40.0",
      "90.0",
      "41.0",
      "90.0",
      "42.0",
      "90.0",
      "43.0",
      "90.0",
      "44.0",
      "90.0",
      "45.0",
      "90.0",
      "46.0",
      "90.0",
      "47.0",
      "90.0",
      "48.0",
      "90.0",
      "49.0",
      "90.0",
      "50.0",
      "90.0",
      "51.0",
      "90.0",
      "52.0",
      "90.0",
      "53.0",
      "90.0",
      "54.0",
      "90.0",
      "55.0",
      "90.0",
      "56.0",
      "90.0",
      "57.0",
      "90.0",
      "58.0",
      "90.0",
      "59.0",
      "90.0",
      "60.0",
      "90.0",
      "61.0",
      "90.0",
      "62.0",
      "90.0",
      "63.0",
      "90.0",
      "64.0",
      "90.0",
      "65.0",
      "90.0",
      "66.0",
      "90.0",
      "67.0",
      "90.0",
      "68.0",
      "90.0",
      "69.0",
      "90.0",
      "70.0",
      "90.0",
      "71.0",
      "90.0",
      "72.0",
      "90.0",
      "73.0",
      "90.0",
      "74.0",
      "90.0",
      "75.0",
      "90.0",
      "76.0",
      "90.0",
      "77.0",
      "90.0",
      "78.0",
      "90.0",
      "79.0",
      "90.0",
      "80.0",
      "90.0",
      "81.0",
      "90.0",
      "82.0",
      "90.0",
      "83.0",
      "90.0",
      "84.0",
      "90.0",
      "85.0",
      "90.0",
      "86.0",
      "90.0",
      "87.0",
      "90.0",
      "88.0",
      "90.0",
      "89.0",
      "90.0",
      "90.0",
      "90.0",
      "91.0",
      "90.0",
      "92.0",
      "90.0",
      "93.0",
      "90.0",
      "94.0",
      "90.0",
      "95.0",
      "90.0",
      "96.0",
      "90.0",
      "97.0",
      "90.0",
      "98.0",
      "90.0",
      "99.0",
      "91.0",
      "1.0",
      "91.0",
      "2.0",
      "91.0",
      "3.0",
      "91.0",
      "4.0",
      "91.0",
      "5.0",
      "91.0",
      "6.0",
      "91.0",
      "7.0",
      "91.0",
      "8.0",
      "91.0",
      "9.0",
      "91.0",
      "10.0",
      "91.0",
      "11.0",
      "91.0",
      "12.0",
      "91.0",
      "13.0",
      "91.0",
      "14.0",
      "91.0",
      "15.0",
      "91.0",
      "16.0",
      "91.0",
      "17.0",
      "91.0",
      "18.0",
      "91.0",
      "19.0",
      "91.0",
      "20.0",
      "91.0",
      "21.0",
      "91.0",
      "22.0",
      "91.0",
      "23.0",
      "91.0",
      "24.0",
      "91.0",
      "25.0",
      "91.0",
      "26.0",
      "91.0",
      "27.0",
      "91.0",
      "28.0",
      "91.0",
      "29.0",
      "91.0",
      "30.0",
      "91.0",
      "31.0",
      "91.0",
      "32.0",
      "91.0",
      "33.0",
      "91.0",
      "34.0",
      "91.0",
      "35.0",
      "91.0",
      "36.0",
      "91.0",
      "37.0",
      "91.0",
      "38.0",
      "91.0",
      "39.0",
      "91.0",
      "40.0",
      "91.0",
      "41.0",
      "91.0",
      "42.0",
      "91.0",
      "43.0",
      "91.0",
      "44.0",
      "91.0",
      "45.0",
      "91.0",
      "46.0",
      "91.0",
      "47.0",
      "91.0",
      "48.0",
      "91.0",
      "49.0",
      "91.0",
      "50.0",
      "91.0",
      "51.0",
      "91.0",
      "52.0",
      "91.0",
      "53.0",
      "91.0",
      "54.0",
      "91.0",
      "55.0",
      "91.0",
      "56.0",
      "91.0",
      "57.0",
      "91.0",
      "58.0",
      "91.0",
      "59.0",
      "91.0",
      "60.0",
      "91.0",
      "61.0",
      "91.0",
      "62.0",
      "91.0",
      "63.0",
      "91.0",
      "64.0",
      "91.0",
      "65.0",
      "91.0",
      "66.0",
      "91.0",
      "67.0",
      "91.0",
      "68.0",
      "91.0",
      "69.0",
      "91.0",
      "70.0",
      "91.0",
      "71.0",
      "91.0",
      "72.0",
      "91.0",
      "73.0",
      "91.0",
      "74.0",
      "91.0",
      "75.0",
      "91.0",
      "76.0",
      "91.0",
      "77.0",
      "91.0",
      "78.0",
      "91.0",
      "79.0",
      "91.0",
      "80.0",
      "91.0",
      "81.0",
      "91.0",
      "82.0",
      "91.0",
      "83.0",
      "91.0",
      "84.0",
      "91.0",
      "85.0",
      "91.0",
      "86.0",
      "91.0",
      "87.0",
      "91.0",
      "88.0",
      "91.0",
      "89.0",
      "91.0",
      "90.0",
      "91.0",
      "91.0",
      "91.0",
      "92.0",
      "91.0",
      "93.0",
      "91.0",
      "94.0",
      "91.0",
      "95.0",
      "91.0",
      "96.0",
      "91.0",
      "97.0",
      "91.0",
      "98.0",
      "91.0",
      "99.0",
      "92.0",
      "1.0",
      "92.0",
      "2.0",
      "92.0",
      "3.0",
      "92.0",
      "4.0",
      "92.0",
      "5.0",
      "92.0",
      "6.0",
      "92.0",
      "7.0",
      "92.0",
      "8.0",
      "92.0",
      "9.0",
      "92.0",
      "10.0",
      "92.0",
      "11.0",
      "92.0",
      "12.0",
      "92.0",
      "13.0",
      "92.0",
      "14.0",
      "92.0",
      "15.0",
      "92.0",
      "16.0",
      "92.0",
      "17.0",
      "92.0",
      "18.0",
      "92.0",
      "19.0",
      "92.0",
      "20.0",
      "92.0",
      "21.0",
      "92.0",
      "22.0",
      "92.0",
      "23.0",
      "92.0",
      "24.0",
      "92.0",
      "25.0",
      "92.0",
      "26.0",
      "92.0",
      "27.0",
      "92.0",
      "28.0",
      "92.0",
      "29.0",
      "92.0",
      "30.0",
      "92.0",
      "31.0",
      "92.0",
      "32.0",
      "92.0",
      "33.0",
      "92.0",
      "34.0",
      "92.0",
      "35.0",
      "92.0",
      "36.0",
      "92.0",
      "37.0",
      "92.0",
      "38.0",
      "92.0",
      "39.0",
      "92.0",
      "40.0",
      "92.0",
      "41.0",
      "92.0",
      "42.0",
      "92.0",
      "43.0",
      "92.0",
      "44.0",
      "92.0",
      "45.0",
      "92.0",
      "46.0",
      "92.0",
      "47.0",
      "92.0",
      "48.0",
      "92.0",
      "49.0",
      "92.0",
      "50.0",
      "92.0",
      "51.0",
      "92.0",
      "52.0",
      "92.0",
      "53.0",
      "92.0",
      "54.0",
      "92.0",
      "55.0",
      "92.0",
      "56.0",
      "92.0",
      "57.0",
      "92.0",
      "58.0",
      "92.0",
      "59.0",
      "92.0",
      "60.0",
      "92.0",
      "61.0",
      "92.0",
      "62.0",
      "92.0",
      "63.0",
      "92.0",
      "64.0",
      "92.0",
      "65.0",
      "92.0",
      "66.0",
      "92.0",
      "67.0",
      "92.0",
      "68.0",
      "92.0",
      "69.0",
      "92.0",
      "70.0",
      "92.0",
      "71.0",
      "92.0",
      "72.0",
      "92.0",
      "73.0",
      "92.0",
      "74.0",
      "92.0",
      "75.0",
      "92.0",
      "76.0",
      "92.0",
      "77.0",
      "92.0",
      "78.0",
      "92.0",
      "79.0",
      "92.0",
      "80.0",
      "92.0",
      "81.0",
      "92.0",
      "82.0",
      "92.0",
      "83.0",
      "92.0",
      "84.0",
      "92.0",
      "85.0",
      "92.0",
      "86.0",
      "92.0",
      "87.0",
      "92.0",
      "88.0",
      "92.0",
      "89.0",
      "92.0",
      "90.0",
      "92.0",
      "91.0",
      "92.0",
      "92.0",
      "92.0",
      "93.0",
      "92.0",
      "94.0",
      "92.0",
      "95.0",
      "92.0",
      "96.0",
      "92.0",
      "97.0",
      "92.0",
      "98.0",
      "92.0",
      "99.0",
      "93.0",
      "1.0",
      "93.0",
      "2.0",
      "93.0",
      "3.0",
      "93.0",
      "4.0",
      "93.0",
      "5.0",
      "93.0",
      "6.0",
      "93.0",
      "7.0",
      "93.0",
      "8.0",
      "93.0",
      "9.0",
      "93.0",
      "10.0",
      "93.0",
      "11.0",
      "93.0",
      "12.0",
      "93.0",
      "13.0",
      "93.0",
      "14.0",
      "93.0",
      "15.0",
      "93.0",
      "16.0",
      "93.0",
      "17.0",
      "93.0",
      "18.0",
      "93.0",
      "19.0",
      "93.0",
      "20.0",
      "93.0",
      "21.0",
      "93.0",
      "22.0",
      "93.0",
      "23.0",
      "93.0",
      "24.0",
      "93.0",
      "25.0",
      "93.0",
      "26.0",
      "93.0",
      "27.0",
      "93.0",
      "28.0",
      "93.0",
      "29.0",
      "93.0",
      "30.0",
      "93.0",
      "31.0",
      "93.0",
      "32.0",
      "93.0",
      "33.0",
      "93.0",
      "34.0",
      "93.0",
      "35.0",
      "93.0",
      "36.0",
      "93.0",
      "37.0",
      "93.0",
      "38.0",
      "93.0",
      "39.0",
      "93.0",
      "40.0",
      "93.0",
      "41.0",
      "93.0",
      "42.0",
      "93.0",
      "43.0",
      "93.0",
      "44.0",
      "93.0",
      "45.0",
      "93.0",
      "46.0",
      "93.0",
      "47.0",
      "93.0",
      "48.0",
      "93.0",
      "49.0",
      "93.0",
      "50.0",
      "93.0",
      "51.0",
      "93.0",
      "52.0",
      "93.0",
      "53.0",
      "93.0",
      "54.0",
      "93.0",
      "55.0",
      "93.0",
      "56.0",
      "93.0",
      "57.0",
      "93.0",
      "58.0",
      "93.0",
      "59.0",
      "93.0",
      "60.0",
      "93.0",
      "61.0",
      "93.0",
      "62.0",
      "93.0",
      "63.0",
      "93.0",
      "64.0",
      "93.0",
      "65.0",
      "93.0",
      "66.0",
      "93.0",
      "67.0",
      "93.0",
      "68.0",
      "93.0",
      "69.0",
      "93.0",
      "70.0",
      "93.0",
      "71.0",
      "93.0",
      "72.0",
      "93.0",
      "73.0",
      "93.0",
      "74.0",
      "93.0",
      "75.0",
      "93.0",
      "76.0",
      "93.0",
      "77.0",
      "93.0",
      "78.0",
      "93.0",
      "79.0",
      "93.0",
      "80.0",
      "93.0",
      "81.0",
      "93.0",
      "82.0",
      "93.0",
      "83.0",
      "93.0",
      "84.0",
      "93.0",
      "85.0",
      "93.0",
      "86.0",
      "93.0",
      "87.0",
      "93.0",
      "88.0",
      "93.0",
      "89.0",
      "93.0",
      "90.0",
      "93.0",
      "91.0",
      "93.0",
      "92.0",
      "93.0",
      "93.0",
      "93.0",
      "94.0",
      "93.0",
      "95.0",
      "93.0",
      "96.0",
      "93.0",
      "97.0",
      "93.0",
      "98.0",
      "93.0",
      "99.0",
      "94.0",
      "1.0",
      "94.0",
      "2.0",
      "94.0",
      "3.0",
      "94.0",
      "4.0",
      "94.0",
      "5.0",
      "94.0",
      "6.0",
      "94.0",
      "7.0",
      "94.0",
      "8.0",
      "94.0",
      "9.0",
      "94.0",
      "10.0",
      "94.0",
      "11.0",
      "94.0",
      "12.0",
      "94.0",
      "13.0",
      "94.0",
      "14.0",
      "94.0",
      "15.0",
      "94.0",
      "16.0",
      "94.0",
      "17.0",
      "94.0",
      "18.0",
      "94.0",
      "19.0",
      "94.0",
      "20.0",
      "94.0",
      "21.0",
      "94.0",
      "22.0",
      "94.0",
      "23.0",
      "94.0",
      "24.0",
      "94.0",
      "25.0",
      "94.0",
      "26.0",
      "94.0",
      "27.0",
      "94.0",
      "28.0",
      "94.0",
      "29.0",
      "94.0",
      "30.0",
      "94.0",
      "31.0",
      "94.0",
      "32.0",
      "94.0",
      "33.0",
      "94.0",
      "34.0",
      "94.0",
      "35.0",
      "94.0",
      "36.0",
      "94.0",
      "37.0",
      "94.0",
      "38.0",
      "94.0",
      "39.0",
      "94.0",
      "40.0",
      "94.0",
      "41.0",
      "94.0",
      "42.0",
      "94.0",
      "43.0",
      "94.0",
      "44.0",
      "94.0",
      "45.0",
      "94.0",
      "46.0",
      "94.0",
      "47.0",
      "94.0",
      "48.0",
      "94.0",
      "49.0",
      "94.0",
      "50.0",
      "94.0",
      "51.0",
      "94.0",
      "52.0",
      "94.0",
      "53.0",
      "94.0",
      "54.0",
      "94.0",
      "55.0",
      "94.0",
      "56.0",
      "94.0",
      "57.0",
      "94.0",
      "58.0",
      "94.0",
      "59.0",
      "94.0",
      "60.0",
      "94.0",
      "61.0",
      "94.0",
      "62.0",
      "94.0",
      "63.0",
      "94.0",
      "64.0",
      "94.0",
      "65.0",
      "94.0",
      "66.0",
      "94.0",
      "67.0",
      "94.0",
      "68.0",
      "94.0",
      "69.0",
      "94.0",
      "70.0",
      "94.0",
      "71.0",
      "94.0",
      "72.0",
      "94.0",
      "73.0",
      "94.0",
      "74.0",
      "94.0",
      "75.0",
      "94.0",
      "76.0",
      "94.0",
      "77.0",
      "94.0",
      "78.0",
      "94.0",
      "79.0",
      "94.0",
      "80.0",
      "94.0",
      "81.0",
      "94.0",
      "82.0",
      "94.0",
      "83.0",
      "94.0",
      "84.0",
      "94.0",
      "85.0",
      "94.0",
      "86.0",
      "94.0",
      "87.0",
      "94.0",
      "88.0",
      "94.0",
      "89.0",
      "94.0",
      "90.0",
      "94.0",
      "91.0",
      "94.0",
      "92.0",
      "94.0",
      "93.0",
      "94.0",
      "94.0",
      "94.0",
      "95.0",
      "94.0",
      "96.0",
      "94.0",
      "97.0",
      "94.0",
      "98.0",
      "94.0",
      "99.0",
      "95.0",
      "1.0",
      "95.0",
      "2.0",
      "95.0",
      "3.0",
      "95.0",
      "4.0",
      "95.0",
      "5.0",
      "95.0",
      "6.0",
      "95.0",
      "7.0",
      "95.0",
      "8.0",
      "95.0",
      "9.0",
      "95.0",
      "10.0",
      "95.0",
      "11.0",
      "95.0",
      "12.0",
      "95.0",
      "13.0",
      "95.0",
      "14.0",
      "95.0",
      "15.0",
      "95.0",
      "16.0",
      "95.0",
      "17.0",
      "95.0",
      "18.0",
      "95.0",
      "19.0",
      "95.0",
      "20.0",
      "95.0",
      "21.0",
      "95.0",
      "22.0",
      "95.0",
      "23.0",
      "95.0",
      "24.0",
      "95.0",
      "25.0",
      "95.0",
      "26.0",
      "95.0",
      "27.0",
      "95.0",
      "28.0",
      "95.0",
      "29.0",
      "95.0",
      "30.0",
      "95.0",
      "31.0",
      "95.0",
      "32.0",
      "95.0",
      "33.0",
      "95.0",
      "34.0",
      "95.0",
      "35.0",
      "95.0",
      "36.0",
      "95.0",
      "37.0",
      "95.0",
      "38.0",
      "95.0",
      "39.0",
      "95.0",
      "40.0",
      "95.0",
      "41.0",
      "95.0",
      "42.0",
      "95.0",
      "43.0",
      "95.0",
      "44.0",
      "95.0",
      "45.0",
      "95.0",
      "46.0",
      "95.0",
      "47.0",
      "95.0",
      "48.0",
      "95.0",
      "49.0",
      "95.0",
      "50.0",
      "95.0",
      "51.0",
      "95.0",
      "52.0",
      "95.0",
      "53.0",
      "95.0",
      "54.0",
      "95.0",
      "55.0",
      "95.0",
      "56.0",
      "95.0",
      "57.0",
      "95.0",
      "58.0",
      "95.0",
      "59.0",
      "95.0",
      "60.0",
      "95.0",
      "61.0",
      "95.0",
      "62.0",
      "95.0",
      "63.0",
      "95.0",
      "64.0",
      "95.0",
      "65.0",
      "95.0",
      "66.0",
      "95.0",
      "67.0",
      "95.0",
      "68.0",
      "95.0",
      "69.0",
      "95.0",
      "70.0",
      "95.0",
      "71.0",
      "95.0",
      "72.0",
      "95.0",
      "73.0",
      "95.0",
      "74.0",
      "95.0",
      "75.0",
      "95.0",
      "76.0",
      "95.0",
      "77.0",
      "95.0",
      "78.0",
      "95.0",
      "79.0",
      "95.0",
      "80.0",
      "95.0",
      "81.0",
      "95.0",
      "82.0",
      "95.0",
      "83.0",
      "95.0",
      "84.0",
      "95.0",
      "85.0",
      "95.0",
      "86.0",
      "95.0",
      "87.0",
      "95.0",
      "88.0",
      "95.0",
      "89.0",
      "95.0",
      "90.0",
      "95.0",
      "91.0",
      "95.0",
      "92.0",
      "95.0",
      "93.0",
      "95.0",
      "94.0",
      "95.0",
      "95.0",
      "95.0",
      "96.0",
      "95.0",
      "97.0",
      "95.0",
      "98.0",
      "95.0",
      "99.0",
      "96.0",
      "1.0",
      "96.0",
      "2.0",
      "96.0",
      "3.0",
      "96.0",
      "4.0",
      "96.0",
      "5.0",
      "96.0",
      "6.0",
      "96.0",
      "7.0",
      "96.0",
      "8.0",
      "96.0",
      "9.0",
      "96.0",
      "10.0",
      "96.0",
      "11.0",
      "96.0",
      "12.0",
      "96.0",
      "13.0",
      "96.0",
      "14.0",
      "96.0",
      "15.0",
      "96.0",
      "16.0",
      "96.0",
      "17.0",
      "96.0",
      "18.0",
      "96.0",
      "19.0",
      "96.0",
      "20.0",
      "96.0",
      "21.0",
      "96.0",
      "22.0",
      "96.0",
      "23.0",
      "96.0",
      "24.0",
      "96.0",
      "25.0",
      "96.0",
      "26.0",
      "96.0",
      "27.0",
      "96.0",
      "28.0",
      "96.0",
      "29.0",
      "96.0",
      "30.0",
      "96.0",
      "31.0",
      "96.0",
      "32.0",
      "96.0",
      "33.0",
      "96.0",
      "34.0",
      "96.0",
      "35.0",
      "96.0",
      "36.0",
      "96.0",
      "37.0",
      "96.0",
      "38.0",
      "96.0",
      "39.0",
      "96.0",
      "40.0",
      "96.0",
      "41.0",
      "96.0",
      "42.0",
      "96.0",
      "43.0",
      "96.0",
      "44.0",
      "96.0",
      "45.0",
      "96.0",
      "46.0",
      "96.0",
      "47.0",
      "96.0",
      "48.0",
      "96.0",
      "49.0",
      "96.0",
      "50.0",
      "96.0",
      "51.0",
      "96.0",
      "52.0",
      "96.0",
      "53.0",
      "96.0",
      "54.0",
      "96.0",
      "55.0",
      "96.0",
      "56.0",
      "96.0",
      "57.0",
      "96.0",
      "58.0",
      "96.0",
      "59.0",
      "96.0",
      "60.0",
      "96.0",
      "61.0",
      "96.0",
      "62.0",
      "96.0",
      "63.0",
      "96.0",
      "64.0",
      "96.0",
      "65.0",
      "96.0",
      "66.0",
      "96.0",
      "67.0",
      "96.0",
      "68.0",
      "96.0",
      "69.0",
      "96.0",
      "70.0",
      "96.0",
      "71.0",
      "96.0",
      "72.0",
      "96.0",
      "73.0",
      "96.0",
      "74.0",
      "96.0",
      "75.0",
      "96.0",
      "76.0",
      "96.0",
      "77.0",
      "96.0",
      "78.0",
      "96.0",
      "79.0",
      "96.0",
      "80.0",
      "96.0",
      "81.0",
      "96.0",
      "82.0",
      "96.0",
      "83.0",
      "96.0",
      "84.0",
      "96.0",
      "85.0",
      "96.0",
      "86.0",
      "96.0",
      "87.0",
      "96.0",
      "88.0",
      "96.0",
      "89.0",
      "96.0",
      "90.0",
      "96.0",
      "91.0",
      "96.0",
      "92.0",
      "96.0",
      "93.0",
      "96.0",
      "94.0",
      "96.0",
      "95.0",
      "96.0",
      "96.0",
      "96.0",
      "97.0",
      "96.0",
      "98.0",
      "96.0",
      "99.0",
      "97.0",
      "1.0",
      "97.0",
      "2.0",
      "97.0",
      "3.0",
      "97.0",
      "4.0",
      "97.0",
      "5.0",
      "97.0",
      "6.0",
      "97.0",
      "7.0",
      "97.0",
      "8.0",
      "97.0",
      "9.0",
      "97.0",
      "10.0",
      "97.0",
      "11.0",
      "97.0",
      "12.0",
      "97.0",
      "13.0",
      "97.0",
      "14.0",
      "97.0",
      "15.0",
      "97.0",
      "16.0",
      "97.0",
      "17.0",
      "97.0",
      "18.0",
      "97.0",
      "19.0",
      "97.0",
      "20.0",
      "97.0",
      "21.0",
      "97.0",
      "22.0",
      "97.0",
      "23.0",
      "97.0",
      "24.0",
      "97.0",
      "25.0",
      "97.0",
      "26.0",
      "97.0",
      "27.0",
      "97.0",
      "28.0",
      "97.0",
      "29.0",
      "97.0",
      "30.0",
      "97.0",
      "31.0",
      "97.0",
      "32.0",
      "97.0",
      "33.0",
      "97.0",
      "34.0",
      "97.0",
      "35.0",
      "97.0",
      "36.0",
      "97.0",
      "37.0",
      "97.0",
      "38.0",
      "97.0",
      "39.0",
      "97.0",
      "40.0",
      "97.0",
      "41.0",
      "97.0",
      "42.0",
      "97.0",
      "43.0",
      "97.0",
      "44.0",
      "97.0",
      "45.0",
      "97.0",
      "46.0",
      "97.0",
      "47.0",
      "97.0",
      "48.0",
      "97.0",
      "49.0",
      "97.0",
      "50.0",
      "97.0",
      "51.0",
      "97.0",
      "52.0",
      "97.0",
      "53.0",
      "97.0",
      "54.0",
      "97.0",
      "55.0",
      "97.0",
      "56.0",
      "97.0",
      "57.0",
      "97.0",
      "58.0",
      "97.0",
      "59.0",
      "97.0",
      "60.0",
      "97.0",
      "61.0",
      "97.0",
      "62.0",
      "97.0",
      "63.0",
      "97.0",
      "64.0",
      "97.0",
      "65.0",
      "97.0",
      "66.0",
      "97.0",
      "67.0",
      "97.0",
      "68.0",
      "97.0",
      "69.0",
      "97.0",
      "70.0",
      "97.0",
      "71.0",
      "97.0",
      "72.0",
      "97.0",
      "73.0",
      "97.0",
      "74.0",
      "97.0",
      "75.0",
      "97.0",
      "76.0",
      "97.0",
      "77.0",
      "97.0",
      "78.0",
      "97.0",
      "79.0",
      "97.0",
      "80.0",
      "97.0",
      "81.0",
      "97.0",
      "82.0",
      "97.0",
      "83.0",
      "97.0",
      "84.0",
      "97.0",
      "85.0",
      "97.0",
      "86.0",
      "97.0",
      "87.0",
      "97.0",
      "88.0",
      "97.0",
      "89.0",
      "97.0",
      "90.0",
      "97.0",
      "91.0",
      "97.0",
      "92.0",
      "97.0",
      "93.0",
      "97.0",
      "94.0",
      "97.0",
      "95.0",
      "97.0",
      "96.0",
      "97.0",
      "97.0",
      "97.0",
      "98.0",
      "97.0",
      "99.0",
      "98.0",
      "1.0",
      "98.0",
      "2.0",
      "98.0",
      "3.0",
      "98.0",
      "4.0",
      "98.0",
      "5.0",
      "98.0",
      "6.0",
      "98.0",
      "7.0",
      "98.0",
      "8.0",
      "98.0",
      "9.0",
      "98.0",
      "10.0",
      "98.0",
      "11.0",
      "98.0",
      "12.0",
      "98.0",
      "13.0",
      "98.0",
      "14.0",
      "98.0",
      "15.0",
      "98.0",
      "16.0",
      "98.0",
      "17.0",
      "98.0",
      "18.0",
      "98.0",
      "19.0",
      "98.0",
      "20.0",
      "98.0",
      "21.0",
      "98.0",
      "22.0",
      "98.0",
      "23.0",
      "98.0",
      "24.0",
      "98.0",
      "25.0",
      "98.0",
      "26.0",
      "98.0",
      "27.0",
      "98.0",
      "28.0",
      "98.0",
      "29.0",
      "98.0",
      "30.0",
      "98.0",
      "31.0",
      "98.0",
      "32.0",
      "98.0",
      "33.0",
      "98.0",
      "34.0",
      "98.0",
      "35.0",
      "98.0",
      "36.0",
      "98.0",
      "37.0",
      "98.0",
      "38.0",
      "98.0",
      "39.0",
      "98.0",
      "40.0",
      "98.0",
      "41.0",
      "98.0",
      "42.0",
      "98.0",
      "43.0",
      "98.0",
      "44.0",
      "98.0",
      "45.0",
      "98.0",
      "46.0",
      "98.0",
      "47.0",
      "98.0",
      "48.0",
      "98.0",
      "49.0",
      "98.0",
      "50.0",
      "98.0",
      "51.0",
      "98.0",
      "52.0",
      "98.0",
      "53.0",
      "98.0",
      "54.0",
      "98.0",
      "55.0",
      "98.0",
      "56.0",
      "98.0",
      "57.0",
      "98.0",
      "58.0",
      "98.0",
      "59.0",
      "98.0",
      "60.0",
      "98.0",
      "61.0",
      "98.0",
      "62.0",
      "98.0",
      "63.0",
      "98.0",
      "64.0",
      "98.0",
      "65.0",
      "98.0",
      "66.0",
      "98.0",
      "67.0",
      "98.0",
      "68.0",
      "98.0",
      "69.0",
      "98.0",
      "70.0",
      "98.0",
      "71.0",
      "98.0",
      "72.0",
      "98.0",
      "73.0",
      "98.0",
      "74.0",
      "98.0",
      "75.0",
      "98.0",
      "76.0",
      "98.0",
      "77.0",
      "98.0",
      "78.0",
      "98.0",
      "79.0",
      "98.0",
      "80.0",
      "98.0",
      "81.0",
      "98.0",
      "82.0",
      "98.0",
      "83.0",
      "98.0",
      "84.0",
      "98.0",
      "85.0",
      "98.0",
      "86.0",
      "98.0",
      "87.0",
      "98.0",
      "88.0",
      "98.0",
      "89.0",
      "98.0",
      "90.0",
      "98.0",
      "91.0",
      "98.0",
      "92.0",
      "98.0",
      "93.0",
      "98.0",
      "94.0",
      "98.0",
      "95.0",
      "98.0",
      "96.0",
      "98.0",
      "97.0",
      "98.0",
      "98.0",
      "98.0",
      "99.0",
      "99.0",
      "1.0",
      "99.0",
      "2.0",
      "99.0",
      "3.0",
      "99.0",
      "4.0",
      "99.0",
      "5.0",
      "99.0",
      "6.0",
      "99.0",
      "7.0",
      "99.0",
      "8.0",
      "99.0",
      "9.0",
      "99.0",
      "10.0",
      "99.0",
      "11.0",
      "99.0",
      "12.0",
      "99.0",
      "13.0",
      "99.0",
      "14.0",
      "99.0",
      "15.0",
      "99.0",
      "16.0",
      "99.0",
      "17.0",
      "99.0",
      "18.0",
      "99.0",
      "19.0",
      "99.0",
      "20.0",
      "99.0",
      "21.0",
      "99.0",
      "22.0",
      "99.0",
      "23.0",
      "99.0",
      "24.0",
      "99.0",
      "25.0",
      "99.0",
      "26.0",
      "99.0",
      "27.0",
      "99.0",
      "28.0",
      "99.0",
      "29.0",
      "99.0",
      "30.0",
      "99.0",
      "31.0",
      "99.0",
      "32.0",
      "99.0",
      "33.0",
      "99.0",
      "34.0",
      "99.0",
      "35.0",
      "99.0",
      "36.0",
      "99.0",
      "37.0",
      "99.0",
      "38.0",
      "99.0",
      "39.0",
      "99.0",
      "40.0",
      "99.0",
      "41.0",
      "99.0",
      "42.0",
      "99.0",
      "43.0",
      "99.0",
      "44.0",
      "99.0",
      "45.0",
      "99.0",
      "46.0",
      "99.0",
      "47.0",
      "99.0",
      "48.0",
      "99.0",
      "49.0",
      "99.0",
      "50.0",
      "99.0",
      "51.0",
      "99.0",
      "52.0",
      "99.0",
      "53.0",
      "99.0",
      "54.0",
      "99.0",
      "55.0",
      "99.0",
      "56.0",
      "99.0",
      "57.0",
      "99.0",
      "58.0",
      "99.0",
      "59.0",
      "99.0",
      "60.0",
      "99.0",
      "61.0",
      "99.0",
      "62.0",
      "99.0",
      "63.0",
      "99.0",
      "64.0",
      "99.0",
      "65.0",
      "99.0",
      "66.0",
      "99.0",
      "67.0",
      "99.0",
      "68.0",
      "99.0",
      "69.0",
      "99.0",
      "70.0",
      "99.0",
      "71.0",
      "99.0",
      "72.0",
      "99.0",
      "73.0",
      "99.0",
      "74.0",
      "99.0",
      "75.0",
      "99.0",
      "76.0",
      "99.0",
      "77.0",
      "99.0",
      "78.0",
      "99.0",
      "79.0",
      "99.0",
      "80.0",
      "99.0",
      "81.0",
      "99.0",
      "82.0",
      "99.0",
      "83.0",
      "99.0",
      "84.0",
      "99.0",
      "85.0",
      "99.0",
      "86.0",
      "99.0",
      "87.0",
      "99.0",
      "88.0",
      "99.0",
      "89.0",
      "99.0",
      "90.0",
      "99.0",
      "91.0",
      "99.0",
      "92.0",
      "99.0",
      "93.0",
      "99.0",
      "94.0",
      "99.0",
      "95.0",
      "99.0",
      "96.0",
      "99.0",
      "97.0",
      "99.0",
      "98.0",
      "99.0",
      "99.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def harmonic_mean(x, y):\n    return 20\n\nfor x in range(1, 100):\n    for y in range(1, 100):\n        if harmonic_mean(x, y) == 20:\n            print(x, y)"
  },
  {
    "example_id": 202,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import numpy as np\n\ndef circle_center(p1, p2, p3):\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n\n    A = np.array([[x1, y1, 1], [x2, y2, 1], [x3, y3, 1]])\n    b = np.array([0, 0, 0])\n\n    x, y, z = np.linalg.solve(A, b)\n    return x + y\n\ncenter = circle_center((-1, 2), (3, 0), (9, 0))\nprint(center)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3333333333333333"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return (4*x + 1) / 3\n\ndef f_inv(y):\n    return (y - 1) / 4\n\ndef f_inv_inv(y):\n    return (y + 1) / 3\n\nprint(f_inv_inv(f_inv(1)))"
  },
  {
    "example_id": 204,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "p = 1\nq = 2\nprint(p + q)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.5"
    ],
    "annotated_answers": [
      "125.5"
    ],
    "solution": "from math import floor\n\ndef sum_of_naturals(n):\n    return (n * (n + 1)) // 2\n\ndef mean(n):\n    return sum_of_naturals(n) / n\n\ndef mean_of_1_to_250():\n    return mean(250)\n\nprint(mean_of_1_to_250())"
  },
  {
    "example_id": 206,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.905124837953327"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from math import fabs\n\na = -4\nb = -14\nc = 3\nd = 16\n\nx1 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\nx2 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n\ndiff = fabs(x1 - x2)\nprint(diff)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.3333333333333335"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 7 / 3\nprint(x)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.999999999999987"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    return (1+x) / (1-x)\n\ndef g(x):\n    return -2 / (x+1)\n\nresult = g(f(g(f(g(f(g(f(g(f(12))))))))))\nprint(result)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nexpr = sympy.expand((x+3)*(x-1) - x*(x+2))\nprint(expr)"
  },
  {
    "example_id": 210,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "6.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\n\nexpr = sympy.sqrt(sympy.sqrt(24) + sympy.sqrt(3456) + sympy.sqrt(6))\nprint(expr)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 212,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import *\nprint(sqrt(4**5 + 4**5 + 4**5 + 4**5))"
  },
  {
    "example_id": 213,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "A, B, C = -1, 2, -4\nprint(A + B + C)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "slope = (2 - 0) / (6 - 5)\nprint(slope)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# absolute value of 5x - 1 = x + 3\n# if 5x - 1 > 0, then x + 3 > 0\n# if 5x - 1 < 0, then x + 3 < 0\n\n# 5x - 1 > 0\n# 5x > 1\n# x > 1/5\n\n# 5x - 1 < 0\n# 5x < 1\n# x < 1/5\n\n# the largest value of x that satisfies the equation is 1/5\nprint(1/5)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy as sym\n\nx = sym.log(10 - 2*sym.Symbol('x')) / sym.log(sym.Symbol('x') - 1)\nprint(x)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "5.0",
      "2.0",
      "4.0",
      "4.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy as sym\na, b, c, d = sym.symbols('a b c d')\n\neq1 = a - b - 2 * (c + d)\neq2 = b - a + 2\neq3 = d - c - 5\n\nsol = sym.solve((eq1, eq2, eq3), (c, d))\nprint(sol)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "a = 2\nb = 3\nprint(8 * a**2 * b**2)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 8\nb = 16 * a ** (1/3)\nprint(b)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy as sp\nx, y = sp.symbols('x y')\n\nm = (x + y) / 2\nprint(m)"
  },
  {
    "example_id": 221,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0",
      "6.0",
      "5.0",
      "24.0",
      "6.0",
      "5.0",
      "32.0",
      "6.0",
      "5.0",
      "-24.0",
      "6.0",
      "5.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "from sympy import solve, symbols\n\nx, y = symbols('x, y')\nc1 = x**2 - 24*x + y**2 - 32*y + 384\nc2 = x**2 + 24*x + y**2 + 32*y + 384\n\nsol = solve((c1, c2), (x, y))\nprint(sol)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "66.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nprint(sympy.solve(sympy.Eq(66 - 2**x, 2**x + 3 * 2**x), x))\nprint(sympy.solve(sympy.Eq(4 - 2**x, 2**(x + 1) + 6 * 2**x), x))"
  },
  {
    "example_id": 223,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.6"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "pencil_cost = (182 - 124) / 5\nprint(pencil_cost)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.25"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "a = 4\nb = 12\nm = 1/4\nprint(a + b + m)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "3.0",
      "4.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\nparabola = 2 * x ** 2 + 8 * x + 4\narea = parabola.integrate(x)\nprint(area)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "196.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "p = 28 / 7 * 49\nprint(p)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\nprint(math.sqrt(9) + 4)"
  },
  {
    "example_id": 228,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 3\nprint(n)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\na = sympy.symbols('a')\nexpr = sympy.sqrt(4+sympy.sqrt(16+16*a)) + sympy.sqrt(1+sympy.sqrt(1+a)) - 6\nsol = sympy.solve(expr, a)\nprint(sol)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "slope_1 = (4-2) / (2-0)\nslope_2 = (1-5) / (1-5)\nslope = slope_1 + slope_2\nprint(slope)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "7.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nexpr = (x**2-5*x+7)-(x-3)*(x-2)\nprint(expr)"
  },
  {
    "example_id": 232,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2587.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "m = 3\nn = 7\nk = 2\nt = 5\n\nm_n = m**n\nn_m = n**m\nk_t = k**t\nt_k = t**k\n\nanswer = m_n + n_m + k_t + t_k\nprint(answer)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# 5 times age son = age father\n# 30 + age son = age father + age son\n# 30 + 5(age son) = 5(30 + age son)\n# 30 + 5(age son) = 5(50)\n# 30 + 5(age son) = 250\n# age son = 250 / 5\n# age son = 50\nprint(250 / 5)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5083.0"
    ],
    "annotated_answers": [
      "4950.0"
    ],
    "solution": "sum_of_multiples = 0\nfor i in range(100, 200, 3):\n    sum_of_multiples += i\nprint(sum_of_multiples)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "annual_interest_rate = (1225 - 1000) / 1000 * 100\nprint(round(annual_interest_rate))"
  },
  {
    "example_id": 236,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    if x == 1:\n        return 2\n    elif x == 2:\n        return 6\n    elif x == 3:\n        return 5\n\ndef f_inv(y):\n    if y == 2:\n        return 1\n    elif y == 6:\n        return 2\n    elif y == 5:\n        return 3\n\nprint(f_inv(f_inv(6)))"
  },
  {
    "example_id": 237,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8281.0"
    ],
    "annotated_answers": [
      "8281.0"
    ],
    "solution": "print(91**2)"
  },
  {
    "example_id": 238,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5283.0"
    ],
    "annotated_answers": [
      "-27.0"
    ],
    "solution": "g = 3\nc = 12\np = 12\nq = -9\nprint(c*(g**2 + p)**2 + q)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "degree = 4\nprint(degree)"
  },
  {
    "example_id": 240,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.7906976744186047"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "t = 77 / 43\nprint(t)"
  },
  {
    "example_id": 241,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0",
      "7.0",
      "108.0",
      "6.0",
      "114.0",
      "5.0",
      "84.0",
      "4.0",
      "15.0",
      "3.0",
      "20.0",
      "2.0",
      "43.0",
      "20.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "from sympy import Symbol, expand, collect\nx = Symbol(\"x\")\nexpr = 24*x**4 + 6*x**3 + 4*x**2 - 7*x - 5\nexpr2 = 6*x**3 + 3*x**2 + 3*x + 4\nexpr_combined = expand(expr * expr2)\nprint(collect(expr_combined, x**3))"
  },
  {
    "example_id": 242,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "# Write a program to count the number of ordered triples (a,b,c)\n# such that a^2b+b^2c+c^2a-ab^2-bc^2-ca^2 = 0\n\n# Define the function to check the condition\ndef check_condition(a,b,c):\n    if a**2*b + b**2*c + c**2*a - a*b**2 - b*c**2 - c*a**2 == 0:\n        return True\n    else:\n        return False\n\n# Define the function to generate all ordered triples\ndef generate_triples(a,b,c):\n    for i in range(a,6):\n        for j in range(b,6):\n            for k in range(c,6):\n                if check_condition(i,j,k):\n                    yield i,j,k\n\n# Count the number of triples\ncount = 0\nfor a,b,c in generate_triples(0,0,0):\n    count += 1\nprint(count)"
  },
  {
    "example_id": 243,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = -3\nprint(x)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x = 3 + 5\nprint(x)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.2"
    ],
    "solution": "a = -1\nb = 3\nc = -2\n\n# Find the discriminant of the equation\ndiscriminant = b**2 - 4*a*c\n\n# Find the greater root\nroot = (b**2 - 4*a*c)**0.5 + 1\n\n# Find the value of n\nn = root**2\n\nprint(n)"
  },
  {
    "example_id": 246,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "15.0",
      "255.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "n = 1\nwhile n < 125:\n    n = n + n * (n + 1)\n    print(n)"
  },
  {
    "example_id": 248,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def climb_rate(t):\n    return 100 * t\n\ndef altitude(t):\n    return t * climb_rate(t)\n\ndef seconds(alt):\n    return alt / climb_rate(1)\n\nprint(seconds(12000))"
  },
  {
    "example_id": 249,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\nf = sym.Poly(5*x**6 - x**5 + 3*x**4 + x**3 - 25*x**2 + 38*x - 17, x)\nprint(f.degree())"
  },
  {
    "example_id": 250,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "60.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\na = x**2\nb = -6\nc = 66\nd = a + b + c\nprint(d)"
  },
  {
    "example_id": 251,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0",
      "2.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "0.75"
    ],
    "solution": "import sympy\nt = sympy.Symbol('t')\ny = -16*t**2 - 60*t + 54\nsol = sympy.solve(y, t)\nprint(sol)"
  },
  {
    "example_id": 252,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "num_days = 3\nnum_houses = 12\n\n# The number of workers needed to paint 12 houses in 3 days is\n# 12 / (5 / 6) = 24 / 5 = 4.8\nprint(int(num_houses / num_days))"
  },
  {
    "example_id": 253,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.132745950421556"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n# Solve for x1 and y1\nx1 = 9\ny1 = 5\n\n# Solve for x2 and y2\nx2 = -6\ny2 = 3\n\ndistance_between_circles = distance(x1, y1, x2, y2)\nprint(distance_between_circles)"
  },
  {
    "example_id": 254,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\nprint(x)\nx = 2\nprint(x)"
  },
  {
    "example_id": 255,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x_mid = (5 + (-9)) / 2\ny_mid = (4 + 8) / 2\nprint(x_mid + y_mid)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "t = 2\nprint((t+2) * (t+1) - (t+1) * (t+2))"
  },
  {
    "example_id": 257,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.5"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = (1+2)/2\ny = (1-2)/2\nprint(8*x-7*y)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(8 + (-8))"
  },
  {
    "example_id": 259,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import sqrt\n\na = 1\nb = 1\n\nwhile True:\n    if (a**2*b) % 1 == 0:\n        break\n    a += 1\n    b += 1\n\nprint(a+b)"
  },
  {
    "example_id": 260,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "5.0",
      "-1.0",
      "4.0",
      "-1.0",
      "2.0",
      "-1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\n\ny = (x - 2) / (x**2 - 7*x + 10)\n\nprint(y.subs(x, 0))\nprint(y.subs(x, 1))\nprint(y.subs(x, 2))\nprint(y.subs(x, 3))\nprint(y.subs(x, 4))\nprint(y.subs(x, 5))\nprint(y.subs(x, 6))"
  },
  {
    "example_id": 261,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "5.0",
      "4.0",
      "3.0",
      "3.0",
      "11.0",
      "2.0",
      "33.0",
      "97.0",
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\n\nx = Symbol('x', integer=True)\n\neq = x**6 - 2*x**5 + 2*x**3 - 2*x + 1\nprint(solve(eq - 292))"
  },
  {
    "example_id": 262,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import primefactors\n\ndef count_n(m):\n    count = 0\n    for n in range(1, m):\n        if primefactors(n) == []:\n            count += 1\n    return count\n\nprint(count_n(19))"
  },
  {
    "example_id": 263,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.222222222222221"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "games_won = 2/9\ngames_lost = 15\ngames_played = games_won + games_lost\nprint(games_played)"
  },
  {
    "example_id": 264,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "106.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x, y')\n\nf = x**2 + 2*x - 6\n\nvertex = f.subs(x, 0).subs(y, 0)\n\ndistance = sympy.sqrt((vertex - 4)**2 + (f.subs(x, 4))**2)\n\nprint(distance)"
  },
  {
    "example_id": 265,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "402.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "a = 6\nd = 4\nn = 100\nprint(a + (n - 1) * d)"
  },
  {
    "example_id": 266,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 7\nb = -4\nprint(b)"
  },
  {
    "example_id": 267,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "6.333333333333333"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "denali_pay = 16\nnate_pay = 12\ndenali_new_pay = 4 * denali_pay\nnate_new_pay = denali_new_pay + nate_pay\ndenali_ratio = denali_new_pay / denali_pay\nnate_ratio = nate_new_pay / nate_pay\nprint(denali_ratio)\nprint(nate_ratio)\nprint(denali_ratio == nate_ratio)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import sqrt, simplify\n\nnumerator = (sqrt(5) + sqrt(2))\ndenominator = (sqrt(5) - sqrt(2))\n\nprint(simplify(numerator/denominator))"
  },
  {
    "example_id": 269,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "max_value = -12 + 8*2 + 2^2\nprint(max_value)"
  },
  {
    "example_id": 270,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "def f(t):\n    return 2*t**2 - 5*t + 29\n\nprint(min(f(t) for t in range(1, 1000)))"
  },
  {
    "example_id": 271,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "first_practice = 48 / 2\nprint(first_practice)"
  },
  {
    "example_id": 272,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "b = (12 - 3 * 4) / 2\nprint(b)"
  },
  {
    "example_id": 273,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "bricks_placed_by_David = 600 / 3\nprint(bricks_placed_by_David)"
  },
  {
    "example_id": 274,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def slope_intercept(p1, p2):\n    \"\"\"\n    Returns the slope and intercept of a line\n    given two points on the line.\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    m = (y2 - y1) / (x2 - x1)\n    b = y1 - m * x1\n    return m, b\n\nm, b = slope_intercept((7, -1), (-1, 7))\nprint(m + b)"
  },
  {
    "example_id": 275,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "dad_age = 53 - 31\nprint(dad_age)"
  },
  {
    "example_id": 276,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "x = 7 + 9\ny = 7 - 9\nprint(x*y)"
  },
  {
    "example_id": 277,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 3**4\nprint(x)"
  },
  {
    "example_id": 278,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\ndef f(x):\n    return math.floor((-5/8)**x)\n\ndef count_distinct_values(f):\n    values = set()\n    for x in range(100):\n        values.add(f(x))\n    return len(values)\n\nprint(count_distinct_values(f))"
  },
  {
    "example_id": 279,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "import sympy as sp\nx, y, A, B, C = sp.symbols('x y A B C')\ncircle = sp.Eq(x**2 + y**2 + A*x + B*y + C, 0)\ncircle_solutions = sp.solve(circle, [x, y, A, B, C])\nprint(circle_solutions)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsolutions = sympy.solve(sympy.sqrt(3*x-5) - 2, x)\nprint(solutions)"
  },
  {
    "example_id": 281,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# brute force\nfor b in range(1, 10):\n    if 4**b + 2**3 == 12:\n        print(b)"
  },
  {
    "example_id": 282,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import sqrt\n\nsqrt_3_45 = sqrt(3, 45)\nsqrt_3_101 = sqrt(3, 101)\n\nresult = int((sqrt_3_45 + sqrt_3_101) / 2)\nprint(result)"
  },
  {
    "example_id": 283,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "123.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "print(123123 // 1001)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "def least_possible_result(a, b, c):\n    return a * (b - c)\n\nprint(least_possible_result(4, 5, 6))"
  },
  {
    "example_id": 285,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "x = 2\nx4 = x**4\nprint(x4)"
  },
  {
    "example_id": 286,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "f = lambda x: x**3 + 2*x + 1\ng = lambda x: x - 1\nprint(f(g(1)))"
  },
  {
    "example_id": 287,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4800.0"
    ],
    "annotated_answers": [
      "4800.0"
    ],
    "solution": "def bacteria_count(starting_count, doubling_time, hours):\n    return starting_count * 2 ** (hours / doubling_time)\n\nprint(bacteria_count(600, 4, 12))"
  },
  {
    "example_id": 288,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-102.0"
    ],
    "solution": "from sympy import Symbol\nfrom sympy.abc import x\n\nS = set()\nfor alpha in range(-100, 100):\n    if (x**2 + 5*x + alpha) % (x**2 + 7*x - 44) == 0:\n        S.add(alpha)\n\nprint(sum(S))"
  },
  {
    "example_id": 289,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 166 // 14\ny = 166 // 10 - x\nprint(x + y)"
  },
  {
    "example_id": 290,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(4)"
  },
  {
    "example_id": 291,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\ndef tangent_circles(center1, center2, point):\n    radius1, radius2 = math.sqrt(center1[0]**2 + center1[1]**2), math.sqrt(center2[0]**2 + center2[1]**2)\n    angle = math.acos((center2[0] - center1[0]) / (radius1 + radius2))\n    radius = radius1 + radius2\n    x = radius * math.cos(angle) + center1[0]\n    y = radius * math.sin(angle) + center1[1]\n    return (x, y) == point\n\n\ndef count_tangent_circles(center1, center2, point):\n    return sum(tangent_circles(center1, center2, point) for center2 in [(4, 0), (-4, 0)])\n\n\nprint(count_tangent_circles((0, 0), (0, 5), (0, 0)))"
  },
  {
    "example_id": 292,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "3.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import *\n\n# a is a symbol\na = Symbol('a')\n# b is a symbol\nb = Symbol('b')\n\n# t is a symbol\nt = Symbol('t')\n\n# Product of 3t^2 + 5t + a and 4t^2 + bt - 2\nproduct = (3*t**2 + 5*t + a)*(4*t**2 + b*t - 2)\n\n# Substitute values for a and b\nproduct = product.subs({a: 3, b: 4})\n\n# Print the result\nprint(product)"
  },
  {
    "example_id": 293,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = 1\nb = 1\nc = 2\nprint(a+b+c)"
  },
  {
    "example_id": 294,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "12296.0",
      "7.0",
      "8.0"
    ],
    "annotated_answers": [
      "32736.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\n\nsum_of_squares = 12296\n\n# Find the product of the three numbers divided by 8\nproduct = x*y*z / 8\n\n# Find the three numbers\nsolve = [\n    sum_of_squares - x**2 - y**2 - z**2,\n    x*y*z - product\n]\n\nprint(solve)"
  },
  {
    "example_id": 295,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "for i in range(10, 100):\n    if i % 10 == 5 and i // 10 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 296,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "print(3 * 0 - 4)"
  },
  {
    "example_id": 297,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "378.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "median = 27 * 14\nprint(median)"
  },
  {
    "example_id": 298,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "import numpy as np\n\n# find the square of the radius\nradius_squared = 5**2\n\n# find the number of lattice points inside the circle\ninside_count = np.sum(np.logical_and(np.abs(np.arange(-5,5))**2 <= radius_squared, np.abs(np.arange(-5,5))**2 >= radius_squared))\n\n# find the number of lattice points on the circle\non_count = np.sum(np.logical_and(np.abs(np.arange(-5,5))**2 == radius_squared, np.abs(np.arange(-5,5))**2 >= radius_squared))\n\nprint(inside_count + on_count)"
  },
  {
    "example_id": 299,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return 2 * x + 15\n\nprint(f(f(9)))"
  },
  {
    "example_id": 300,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "x = 4 + 5\nprint(x**2)"
  },
  {
    "example_id": 301,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsol = sympy.solve(sympy.sqrt(3*x+6) - (x+2), x)\nprint(sol)"
  },
  {
    "example_id": 302,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(4 * (3 ** 2) / (9 * (2 ** 2)))"
  },
  {
    "example_id": 303,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def q(x):\n    return -1 + 4*x + 7\n\nprint(q(-1))"
  },
  {
    "example_id": 304,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "distance_per_second = 45\ntime = 0\nwhile distance_per_second > 0:\n    time += 1\n    distance_per_second -= 5\nprint(time)"
  },
  {
    "example_id": 305,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "number_1500 = 15\nnumber_2500 = 15 / (2500 / 1500)\nprint(number_2500)"
  },
  {
    "example_id": 306,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2450.0"
    ],
    "annotated_answers": [
      "2450.0"
    ],
    "solution": "# Total earnings = base salary + commission\ntotal_earnings = 1200 + 25000 * 0.05\nprint(total_earnings)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8888888888888888"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 8 / 3\nz = 15 / 5\nprint(x / z)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nprint(math.sqrt(64) - math.cbrt(64))"
  },
  {
    "example_id": 309,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "AMC10 = 12342\nAMC12 = 22\nA = 1 + 2\nM = 2 + 2\nC = 3 + 4\nprint(A + M + C)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.7999999999999998"
    ],
    "annotated_answers": [
      "1.8"
    ],
    "solution": "x = 4.8 - (1 + 1 + 1)\nprint(x)"
  },
  {
    "example_id": 311,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nsolve(192*x**2 - 16, x)\nprint(1/x**4)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import numpy as np\na = -2\nb = 4\nc = 1\nf = lambda x: a*x**2 + b*x + c\nx = np.linspace(-3, 3, 100)\ny = f(x)\nprint(a+b+c)"
  },
  {
    "example_id": 313,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "2003.0"
    ],
    "solution": "#even counting numbers\nsum_even = sum(range(2, 2003, 2))\n#odd counting numbers\nsum_odd = sum(range(1, 2003, 2))\nprint(sum_even - sum_odd)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 1\nwhile x < 255:\n    y = x + 2\n    if y % 2!= 0 and y % 5!= 0:\n        print(y)\n        break\n    x = y"
  },
  {
    "example_id": 315,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13225.0"
    ],
    "annotated_answers": [
      "13225.0"
    ],
    "solution": "print(115**2)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = -3\nb = 2\nprint(a)"
  },
  {
    "example_id": 317,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26000.0"
    ],
    "annotated_answers": [
      "26000.0"
    ],
    "solution": "print(513**2 - 487**2)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy as sp\n\na, b, c = sp.symbols(\"a b c\")\n\n# Pythagorean identity\na**2 + b**2 + c**2 == 13\n\n# Sum of squares\na*b + b*c + c*a == 6\n\n# Solve\nprint(sp.solve((a**2 + b**2 + c**2, a*b + b*c + c*a), (a, b, c)))"
  },
  {
    "example_id": 319,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.75"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "revolutions_16_feet = 27 * 16 / 64\nprint(revolutions_16_feet)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import log, sqrt\nprint(log(125*sqrt(5), sqrt(5)))"
  },
  {
    "example_id": 321,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "a = 15 - 3 * 2\nb = (15 - a) / 2\nprint(a + b)"
  },
  {
    "example_id": 322,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "time_50_m = 25 - 5\nprint(time_50_m)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "x = 3^2 + 1\nprint(x)"
  },
  {
    "example_id": 324,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\n# 3rd party library\nfrom scipy.spatial import distance\n\ndef distance_from_robert(person_x, person_y):\n    return math.sqrt((person_x - 4)**2 + (person_y - 3)**2)\n\ndistance_lucy = distance_from_robert(6, 1)\ndistance_liz = distance_from_robert(1, 7)\n\nprint(max(distance_lucy, distance_liz))"
  },
  {
    "example_id": 325,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# f(x) = x^2\n# g(x) = x^3\nmax_degree = 3\nprint(max_degree)"
  },
  {
    "example_id": 326,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(20 * 0.5 * 0.8)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "now_amy = 10\nnow_ben = 3/5 * now_amy\nnow_chris = 3/5 * now_amy - 4\nprint(now_chris)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "2.0",
      "4.0",
      "2.0",
      "5.0",
      "2.0",
      "-3.0",
      "3.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# use sympy to solve the problem\nfrom sympy import Symbol, solve\n\n# define the variables\nx1, x2, x3, x4, x5 = Symbol('x1'), Symbol('x2'), Symbol('x3'), Symbol('x4'), Symbol('x5')\n\n# define the equations\neq1 = x1 + x2 + x3 + x4 + x5\neq2 = 3*x1 + 5*x2 + 6*x3 + 7*x4 + 9*x5\n\n# solve the equations\nsol = solve((eq1, eq2), (x1, x2, x3, x4, x5))\n\n# print the result\nprint(sol)"
  },
  {
    "example_id": 329,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0",
      "0.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "import sympy as sym\na, b, c = sym.symbols('a b c')\neq1 = a + b - 8\neq2 = b + c - 3\neq3 = a + c - 5\nsol = sym.solve([eq1, eq2, eq3], [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 330,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-56.0"
    ],
    "annotated_answers": [
      "-56.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = 2*x**2 - 8*x + 15\ndiscriminant = sympy.discriminant(f)\nprint(discriminant)"
  },
  {
    "example_id": 331,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.80350850198276"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "x = -6\ny = -15\nx_origin = 8\ny_origin = 3\n\n# Distance from origin\nn = (x - x_origin)**2 + (y - y_origin)**2\nn = n**0.5\n\nprint(n)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x_1 = -3\nx_2 = 3\nprint(abs(x_1 - x_2))"
  },
  {
    "example_id": 333,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "102.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "A = 6\nB = 17\nAB = A*B\nprint(AB)"
  },
  {
    "example_id": 334,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\n\ndef f(x):\n    return 3 * sqrt(2 * x - 7) - 8\n\nprint(f(8))"
  },
  {
    "example_id": 335,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol(\"x\")\nexpr = (9-4*x)/(x+6) - 7\nsol = sympy.solve(expr, x)\nprint(sol)"
  },
  {
    "example_id": 336,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# number of yellow marbles\nnum_yellow = 35 / 2\n# number of orange marbles\nnum_orange = 35 / 3\n# number of white marbles\nnum_white = 35 + 3\n# number of red marbles\nnum_red = num_yellow - 2\nprint(num_red)"
  },
  {
    "example_id": 337,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "364.0"
    ],
    "solution": "x = 40 - 12\nprint(x)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "65.0"
    ],
    "solution": "V = (30 * 6.5) / 3\nprint(V)"
  },
  {
    "example_id": 339,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "2.0",
      "63.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "2.0",
      "63.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy as sp\n\nx = sp.Symbol('x')\nexpr = sp.sqrt(63 - sp.sqrt(x))\nroots = expr.expand().as_real_imag()[0]\nprint(roots)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 1 / (2 - (1 / (2 - (1 / (2 - 1)))))\nprint(x)"
  },
  {
    "example_id": 341,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = -5\ny = 3\nprint(x * y)"
  },
  {
    "example_id": 342,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "f = sympy.polys.Poly(3*x**4 + 5*x**2 - 9*x - 2)\ng = f.subs(x, x-1)\nprint(g.coeffs)"
  },
  {
    "example_id": 343,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9506.0"
    ],
    "annotated_answers": [
      "93.0"
    ],
    "solution": "n = 98\nsum = 0\nfor i in range(n):\n    sum += i * 2\nprint(sum)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-3.0",
      "11.0",
      "0.0",
      "3.0",
      "11.0",
      "-6.0",
      "55.0",
      "5.0",
      "-9.0",
      "55.0",
      "5.0",
      "6.0",
      "55.0",
      "5.0",
      "9.0",
      "55.0",
      "5.0"
    ],
    "annotated_answers": [
      "549.0"
    ],
    "solution": "import sympy\n\na = sympy.Symbol('a')\nb = sympy.Symbol('b')\n\neq1 = a**2 + (b-a)**2 - 99\neq2 = b**2 - a**2 - 99\n\nsolution = sympy.solve((eq1, eq2), (a, b))\nprint(solution)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    return x + 2\n\ndef g(x):\n    return 1 / f(x)\n\nprint(g(f(-3)))"
  },
  {
    "example_id": 346,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "45.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "s = 7\nc = 2\np = -14\nq = 45\n\n# Calculate the expression\nexpr = c * s + p\nprint(expr)\n\n# Calculate (cs + p)^2\nsq = expr ** 2\nprint(sq)\n\n# Calculate (cs + p)^2 + q\nsum_sq_q = sq + q\nprint(sum_sq_q)"
  },
  {
    "example_id": 347,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = 4*x - 36\nx_value = sympy.solve(y, x)[0]\nprint(x_value)"
  },
  {
    "example_id": 348,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = -3\nb = 2\nc = 1\n\nprint(a + b + c)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.192388155425117"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\n\nx = -13 / 2\ny = 13 / 2\ndistance = math.sqrt(x**2 + y**2)\nprint(distance)"
  },
  {
    "example_id": 350,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = (x - 2)**2 - 9\nf_der = f.diff(x)\nprint(sympy.integrate(f_der, x))"
  },
  {
    "example_id": 351,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import copysign, fabs\n\ndef number_of_solutions(x):\n    if x >= 0:\n        return 1\n    else:\n        return 2\n\nprint(number_of_solutions(1))\nprint(number_of_solutions(-1))\nprint(number_of_solutions(0))"
  },
  {
    "example_id": 352,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "lenny = 35\nlarry = 2/5 * lenny\nprint(lenny - larry)"
  },
  {
    "example_id": 353,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x)"
  },
  {
    "example_id": 354,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-131072.0"
    ],
    "annotated_answers": [
      "-8192.0"
    ],
    "solution": "# Write a program to compute the fourteenth term\n# using the formula for a geometric sequence\n\n# given terms: 1, -2, 16\n# common ratio: -2\n\n# find the common ratio\ncommon_ratio = -2\n\n# find the fourteenth term\nfourteenth_term = 16 * common_ratio ** 13\nprint(fourteenth_term)"
  },
  {
    "example_id": 355,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "256.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import log, exp\n\n# log(256) / log(2) = 2x\n# 2x = log(256) / log(2)\n# 2x = 8\n# x = 8 / 2\n# x = 4\n\nprint(log(256) / log(2))"
  },
  {
    "example_id": 356,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 7\ny = 5\nprint(x + y)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "entry_fee = 2.25\nride_fee = 1.50\ntotal_cost = 12.75\nrides = (total_cost - entry_fee) / ride_fee\nprint(rides)"
  },
  {
    "example_id": 358,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "def midpoint(p1, p2):\n    return (p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2\n\ndef product(p):\n    return p[0] * p[1]\n\nprint(product(midpoint((1,1), (-7,5))))"
  },
  {
    "example_id": 359,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "5.0",
      "3.0",
      "10.0",
      "3.0",
      "10.0"
    ],
    "annotated_answers": [
      "-56.0"
    ],
    "solution": "import sympy as sy\na, b, c = sy.symbols('a b c')\neq1 = 3*a + b + c + 3\neq2 = a + 3*b + c\neq3 = a + b + 3*c\n\nsol = sy.solve([eq1, eq2, eq3], [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "daily_share = 12 / 10\ntotal_people = 12 + 3\ndays_supplies_last = total_people / daily_share\nprint(days_supplies_last)"
  },
  {
    "example_id": 361,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "from sympy import solve\nsolve(y**2 + 24*y + 16 + k - (x**2 + 24*x + 16))"
  },
  {
    "example_id": 362,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(3**2 + 2*3*5 + 5**2)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def is_between(x):\n    return 10 <= x**2 + 4*x + 4 <= 50\n\nprint(sum(1 for x in range(1, 100) if is_between(x)))"
  },
  {
    "example_id": 364,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "total_miles = 26 + 2*12 + 28\nprint(total_miles)"
  },
  {
    "example_id": 365,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "n = 5\nprint(n)"
  },
  {
    "example_id": 366,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "-2.0"
    ],
    "annotated_answers": [
      "-48.0"
    ],
    "solution": "x = 725\ny = 727\nx_prime = 729\ny_prime = 731\nx_minus_y = x - y\nx_prime_minus_y_prime = x_prime - y_prime\nprint(x_minus_y)\nprint(x_prime_minus_y_prime)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import sqrt\n\ndef is_right_triangle(a, b, c):\n    return a**2 + b**2 == c**2\n\ndef is_positive_integer(n):\n    return type(n) == int and n > 0\n\ndef count_right_triangles(max_side_length):\n    count = 0\n    for a in range(1, max_side_length + 1):\n        for b in range(a, max_side_length + 1):\n            c = sqrt(a**2 + b**2)\n            if is_positive_integer(c) and is_right_triangle(a, b, c):\n                count += 1\n    return count\n\nprint(count_right_triangles(162))"
  },
  {
    "example_id": 368,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.6666666666666666"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# If 6x^2 + x - 2 < 0, then we know that x < -2/3\nx = -2/3\nprint(x)"
  },
  {
    "example_id": 369,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.816653826391967"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import sqrt\na, b, c = -1/9, 1, 1\nd = b**2 - 4*a*c\nm, n = (-b + sqrt(d)) / (2*a), (-b - sqrt(d)) / (2*a)\nprint(m - n)"
  },
  {
    "example_id": 370,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "896.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "m = 16\nn = 56\nprint(m * n)"
  },
  {
    "example_id": 371,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import numpy as np\n\ndef f(x):\n    return 10 - 2*x\n\ndef g(x):\n    return 4 - 3*x\n\nmax_f_minus_g = np.max(f(np.linspace(0, 18)) - g(np.linspace(0, 18)))\n\nprint(max_f_minus_g)"
  },
  {
    "example_id": 372,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "horses = 30 / 4\nprint(horses)"
  },
  {
    "example_id": 373,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 2\nb = 3\nab = (a - 1) * (b - 1)\nprint(ab)"
  },
  {
    "example_id": 374,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "e = (17 - 8) / 2\nprint(e)"
  },
  {
    "example_id": 375,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6683391.0",
      "224127.0",
      "889.0",
      "-6683391.0",
      "224127.0",
      "889.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "import sympy as sp\nx, c = sp.symbols('x, c')\na, b = -2*x, 99\ne = a*x**2 + b*x + c\neq1 = e.subs(x, -99 + sp.sqrt(8001))\neq2 = e.subs(x, -99 - sp.sqrt(8001))\nsol1 = sp.solve(eq1)\nsol2 = sp.solve(eq2)\nprint(sol1)\nprint(sol2)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "b = (-2) / 2\nprint(b)"
  },
  {
    "example_id": 377,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "expression = (2*(-3))**5 / (-3)**3\nprint(expression)"
  },
  {
    "example_id": 378,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "n = 26\nwhile n*(n+1)/2 < 26:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 379,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return (x-1)*(x-3)*(x-7)*(x-9)\n\nprint(f(6) - f(4))"
  },
  {
    "example_id": 380,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10016.701388888889"
    ],
    "annotated_answers": [
      "10455.0"
    ],
    "solution": "annual_interest_rate1 = 0.04 / 2\nannual_interest_rate2 = 0.05 / 2\nmonthly_interest_rate1 = annual_interest_rate1 / 12\nmonthly_interest_rate2 = annual_interest_rate2 / 12\n\nprincipal = 10000\n\nmonthly_interest_1 = principal * monthly_interest_rate1\nmonthly_interest_2 = monthly_interest_1 * monthly_interest_rate2\n\nprincipal = principal + monthly_interest_1 + monthly_interest_2\n\nprint(principal)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0",
      "15.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "from sympy import *\nprint(sqrt(12)*sqrt(20)*sqrt(15)*sqrt(60))"
  },
  {
    "example_id": 382,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Min\nfrom sympy import symbols\n\nx, y = symbols('x y')\nexpr = x**2 + y**2 + 2*x - 4*y + 8\nmin_val = Min(expr, x, y)\nprint(min_val)"
  },
  {
    "example_id": 383,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from sympy import sqrt\nfor x in range(100):\n    if sqrt(120 - sqrt(x)) in set(range(100)):\n        print(x)"
  },
  {
    "example_id": 384,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "-23.5"
    ],
    "solution": "x1, y1 = 7, 7/3\nx2, y2 = 2, 2\nsum_x = x1 + x2\nprint(sum_x)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0",
      "13.0",
      "23.0",
      "13.0",
      "67.0",
      "13.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy\nx, y, z = sympy.symbols('x y z')\neq1 = 3*x + y - 17\neq2 = 5*y + z - 14\neq3 = 3*x + 5*z - 41\nsol = sympy.solve([eq1, eq2, eq3], [x, y, z])\nprint(sol)\nx_val, y_val, z_val = sol\nprint(x_val + y_val + z_val)"
  },
  {
    "example_id": 386,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5400.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "# Define the line as a function\ndef line(x):\n    return 1.5 * x\n\n# Calculate the distance Caroline is from her starting point\n# in one hour\ntime = 3600\ndistance = line(time)\nprint(distance)"
  },
  {
    "example_id": 387,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(4/3 * 6/4 * 8/5 * 10/6 * 12/7 * 14/8)"
  },
  {
    "example_id": 388,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "77.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "def psi(a, b):\n    return 2 * a + 5 * b\n\nprint(psi(psi(3, psi(1, 0)), 9))"
  },
  {
    "example_id": 389,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\neq = x**2 - 2*x - 3\np, q = solve(eq)\nprint((p + 1)*(q + 1))"
  },
  {
    "example_id": 390,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def A_and_B(A, B):\n    return (A + B) / 2\n\ndef A_and_B_and_C(A, B, C):\n    return A_and_B(A_and_B(A, B), C)\n\nprint(A_and_B_and_C(3, 5, 8))"
  },
  {
    "example_id": 391,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "def f(x, y):\n    return 1/x + 1/y - 1/7\n\ndef f_prime(x, y):\n    return -1/x**2, -1/y**2\n\ndef solve_quadratic(a, b, c):\n    \"\"\"Solve a quadratic equation ax^2 + bx + c = 0.\"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return []\n    x1 = (-b - np.sqrt(discriminant)) / (2*a)\n    x2 = (-b + np.sqrt(discriminant)) / (2*a)\n    return [x1, x2]\n\ndef find_x_coordinates(f, f_prime, target):\n    \"\"\"Find the x-coordinates of all possible positive integer solutions to\n    f(x, y) = target.\n    \"\"\"\n    x_coords = []\n    for x in range(1, 1000):\n        y = target / x\n        if int(y)!= y:\n            continue\n        if f(x, int(y))!= target:\n            continue\n        x_coords.append(x)\n    return x_coords\n\ndef sum_x_coords(x_coords):\n    \"\"\"Sum the x-coordinates of all possible positive integer solutions to\n    f(x, y) = target.\n    \"\"\"\n    return sum(x_coords)\n\ndef solve(target):\n    \"\"\"Find the sum of the x-coordinates of all possible positive integer\n    solutions to f(x, y) = target.\n    \"\"\"\n    x_coords = find_x_coordinates(f, f_prime, target)\n    return sum_x_coords(x_coords)\n\nprint(solve(1/7))"
  },
  {
    "example_id": 392,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "P(G(a))"
  },
  {
    "example_id": 393,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\n\na = sympy.solve([2*x - 9*y, 6*x], [x, y])\n\nxy = a[x] * a[y]\nprint(xy)"
  },
  {
    "example_id": 394,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = sympy.symbols('x')\nexpr = (x**2-4*x+3)*(x+5) - (x**2+4*x-5)*(x-c)\nexpr.simplify()\nprint(expr.factor())"
  },
  {
    "example_id": 395,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print((2**10-2**8)/(2**7-2**6))"
  },
  {
    "example_id": 396,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.5"
    ],
    "solution": "a = 1\nb = -1\nc = 1\nx = 2\ny = a*x**2 + b*x + c\nprint(y)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "d = 6 + 9\nc = 4 + 2\nprint(d/c)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "0.015"
    ],
    "solution": "from math import factorial\n\ndef infinite_series(n):\n    \"\"\"Return the nth term of the infinite series\n    >>> infinite_series(0)\n    3\n    >>> infinite_series(1)\n    9\n    >>> infinite_series(2)\n    27\n    \"\"\"\n    return 3 * (9 * factorial(n) - 1) // (2 * factorial(n + 1))\n\n\ndef terminating_decimal(n):\n    \"\"\"Return the terminating decimal of the infinite series\n    >>> terminating_decimal(2)\n    0.14285714285714285\n    \"\"\"\n    return str(infinite_series(n))\n\n\nprint(terminating_decimal(2))"
  },
  {
    "example_id": 400,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 0\ny = -265 * x + 2800\nwhile y > 0:\n    x += 1\n    y = -265 * x + 2800\nprint(x)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "a = 27 - 18\nb = 1\nprint(a+b)"
  },
  {
    "example_id": 402,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Number of lemon candies\nlemon_candies = 15 - 8\nprint(lemon_candies)"
  },
  {
    "example_id": 403,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "print(int(round(pow(25, 1.0/3))))"
  },
  {
    "example_id": 404,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import sqrt\n\ndef h(x):\n    return sqrt(x+3)/2\n\nprint(h(-1))"
  },
  {
    "example_id": 405,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "x = 2\na = 4\nb = 9\nc = 2\n\nprint(a + b + c)"
  },
  {
    "example_id": 406,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    if x % 2 == 0:\n        return x / 2\n    else:\n        return 3 * x + 1\n\nprint(f(14))"
  },
  {
    "example_id": 407,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-117.0",
      "4.0",
      "180.0",
      "3.0",
      "39.0",
      "2.0",
      "17.0",
      "53.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\n\nexpr = (7+8*x)-3*(2+6*x+2*x**2)+9*(1+3*x+4*x**2+12*x**3)-9*(7-x**2-8*x**3+13*x**4)\nresult = simplify(expr)\nprint(result)"
  },
  {
    "example_id": 408,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = [1 + 7, 1 - 7]\nprint(sum(x))"
  },
  {
    "example_id": 409,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nfrom sympy import simplify, solve, Symbol\nx = Symbol('x')\nf = 2/(x**2 + x - 6)\ng = f.subs(x, 0)\nprint(g)"
  },
  {
    "example_id": 410,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print((3-4)**2 + 2*(3+4))"
  },
  {
    "example_id": 411,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import symbols, solve, Eq, pprint\nx = symbols('x')\nsol1 = solve(Eq(x**2 - 7*x + 7, -3), x)\npprint(sol1)\nx_coord_sum = sol1[0] + sol1[1]\nprint(x_coord_sum)"
  },
  {
    "example_id": 412,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "112.0"
    ],
    "solution": "from sympy import sqrt\n\nnumerator = (2/1 + 2*sqrt(3)) + (3/2 - sqrt(3))\nA, B, C = numerator.as_numer_denom()\nprint(A+B+C)\nprint(A/C, B/C)"
  },
  {
    "example_id": 413,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "630.0"
    ],
    "annotated_answers": [
      "630.0"
    ],
    "solution": "sum_of_multiples = sum(range(5, 5 * 21, 5))\nsum_of_even_integers = sum(range(2, 2 * 21, 2))\npositive_difference = sum_of_multiples - sum_of_even_integers\nprint(positive_difference)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "16384.0"
    ],
    "solution": "for k in range(1, 15):\n    a = -k\n    b = 15 - k\n    if a % 1 == 0 and b % 1 == 0:\n        print(k * (k + 1))\n        break"
  },
  {
    "example_id": 415,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\nprint(math.sqrt(math.pow(13 - 1, 2) + math.pow(-4 - 1, 2)))"
  },
  {
    "example_id": 416,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for i in range(10):\n    if i**2!= 100:\n        print(i+1)\n        break"
  },
  {
    "example_id": 417,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpr = (12 / x ** 2) * (x ** 4 / 14 * 35 / 3)\nprint(sympy.simplify(expr))"
  },
  {
    "example_id": 418,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 1\nb = 1\nx = 6\ny = a * x + b\nprint(y)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "a = 1\nb = 1\na_2 = a * a\nb_2 = b * b\nprint(a_2 + b_2)"
  },
  {
    "example_id": 420,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.114742526881128",
      "-2.114742526881128"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Find the intersection point of x^4 and 5x^2 - 6\nx_intercept = (-5)**(1/2)\n\n# Find the x-coordinates of the intersection point\nx_coord_1 = x_intercept**(1/2)\nx_coord_2 = -x_coord_1\n\n# Find the difference of the x-coordinates\ndiff_x_coords = x_coord_2 - x_coord_1\n\n# Print the difference\nprint(diff_x_coords)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print((3**4 - 3**3) / (3**3 - 3**2))"
  },
  {
    "example_id": 422,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 5\nprint(x)"
  },
  {
    "example_id": 423,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "p = 3\nq = 6 * 8\nresult = (p + q) / 2\nprint(result)"
  },
  {
    "example_id": 424,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = 1\nb = 2\nprint(abs(b - a))"
  },
  {
    "example_id": 425,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 3\na = -13\nb = 21\nprint(2 * z + b)"
  },
  {
    "example_id": 426,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 9 - 2 * 3\nb = 9 - 2 * 9\nprint(a + b)"
  },
  {
    "example_id": 427,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\n\nf = a*sympy.Symbol('x')**2 + b*sympy.Symbol('x') + c\n\nprint(f.subs([(a, 1), (b, -3), (c, 0)]))"
  },
  {
    "example_id": 428,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "import sympy\nx1, y1 = sympy.symbols('x1, y1')\nx2, y2 = sympy.symbols('x2, y2')\nslope = (y2 - y1) / (x2 - x1)\ny_intercept = y2 - slope * x2\nprint(slope + y_intercept)"
  },
  {
    "example_id": 429,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "diff = 14\nsmall = 1\nlarge = small + diff\ntotal = small + large\nprint(small)"
  },
  {
    "example_id": 430,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0",
      "20.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "domain = set(range(21))\nrange_ = set([6, 5, 4, 8, 7, 9, 10, 3, 2, 1])\nprint(domain - range_)"
  },
  {
    "example_id": 431,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nexpression = (sympy.sqrt(12*x) + 12)*(sympy.sqrt(3*x) - 6) - (4*x + x - 34)\nsolution = sympy.solve(expression, x)\nprint(solution)"
  },
  {
    "example_id": 432,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x**2 - 6*x + 13)"
  },
  {
    "example_id": 433,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-17.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "m = -2\nn = -15\nprint(m+n)"
  },
  {
    "example_id": 434,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "10.0",
      "4.0",
      "10.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\n\nx = Symbol('x')\ny = Symbol('y')\n\neq = x**2 - 4*x + y**2 - 6*y - 36\n\nprint(solve(eq, x))"
  },
  {
    "example_id": 435,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "f = lambda x: 2 * x - 3\ng = lambda x: x + 1\nprint(g(f(5) - 1))"
  },
  {
    "example_id": 436,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(math.sqrt(n)) + 1))\n\ndef largest_prime_factor(n):\n    i = 2\n    while n > 1:\n        if is_prime(i) and n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return i\n\nprint(largest_prime_factor(9951))"
  },
  {
    "example_id": 437,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "# Brute force\nA = 14\nB = 8\nprint(A - B)\n\n# Using sympy\nfrom sympy import Symbol, solve\nx = Symbol('x')\nf = 3*x**2 + 14*x + 8\nsolve(f.factor(), x)"
  },
  {
    "example_id": 438,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "409.97732426303855"
    ],
    "annotated_answers": [
      "228.3"
    ],
    "solution": "height_now = 452\nheight_2_weeks_ago = height_now / (1 + 0.05) ** 2\nprint(height_2_weeks_ago)"
  },
  {
    "example_id": 439,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import S\ndomain = [S(x) for x in range(64, 128)]\nprint(len(domain))"
  },
  {
    "example_id": 440,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "sum([1, 3, 5, 7, 9])"
  },
  {
    "example_id": 441,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import symbols, simplify\nx, y, z = symbols('x y z')\nexpr = (y-x)**2 / (y-z) * (z-x) + (z-y)**2 / (z-x) * (x-y) + (x-z)**2 / (x-y) * (y-z)\nprint(simplify(expr))"
  },
  {
    "example_id": 442,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.464101615137753"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import sqrt\nA = 2\nB = 9\nC = 2 * sqrt(3)\nprint(A+B+C)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 3\ny = 2\nz = 5\n\nresult = x + y + z\n\nprint(result)"
  },
  {
    "example_id": 444,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "217.0"
    ],
    "solution": "x = 7 - y\n3x = 45 - y\nx^2 = (7 - y)^2\ny^2 = (45 - y)^2\nx^2 - y^2 = (7 - y)^2 - (45 - y)^2\nx^2 - y^2 = 49 - 2y - y^2\nx^2 - y^2 = 49 - 2y"
  },
  {
    "example_id": 445,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 25 - 11\nprint(x)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n\ndef find_intersection(line1, line2):\n    x1, y1 = line1[0]\n    x2, y2 = line1[1]\n    x3, y3 = line2[0]\n    x4, y4 = line2[1]\n\n    denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1)\n    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)\n    x = numera / denom\n    y = (-(x4 - x3) * y3 + (x2 - x1) * y4) / denom\n    return x, y\n\ndef is_inside(point, line1, line2):\n    x1, y1 = line1[0]\n    x2, y2 = line1[1]\n    x3, y3 = line2[0]\n    x4, y4 = line2[1]\n\n    return ((x1 <= point[0] <= x2) or (x3 <= point[0] <= x4)) and \\\n           ((y1 <= point[1] <= y2) or (y3 <= point[1] <= y4))\n\ndef count_points(line1, line2):\n    x1, y1 = line1[0]\n    x2, y2 = line1[1]\n    x3, y3 = line2[0]\n    x4, y4 = line2[1]\n\n    num_points = 0\n\n    if x1 == x2:\n        if y1 == y2:\n            num_points += 1\n        else:\n            num_points += 2\n    else:\n        if y1 == y2:\n            num_points += 2\n        else:\n            num_points += 3\n\n    if x3 == x4:\n        if y3 == y4:\n            num_points += 1\n        else:\n            num_points += 2\n    else:\n        if y3 == y4:\n            num_points += 2\n        else:\n            num_points += 3\n\n    if is_inside((x1, y1), line2, line1):\n        num_points -= 1\n    if is_inside((x2, y2), line2, line1):\n        num_points -= 1\n    if is_inside((x3, y3), line1, line2):\n        num_points -= 1\n    if is_inside((x4, y4), line1, line2):\n        num_points -= 1\n\n    return num_points\n\ndef plot_region(line1, line2):\n    x1, y1 = line1[0]\n    x2, y2 = line1[1]\n    x3, y3 = line2[0]\n    x4, y4 = line2[1]\n\n    plt.plot([x1, x2], [y1, y2], 'b')\n    plt.plot([x3, x4], [y3, y4], 'b')\n\n    x, y = find_intersection(line1, line2)\n    plt.plot(x, y, 'ro')\n\n    x1, y1 = line1[0]\n    x2, y2 = line1[1]\n    x3, y3 = line2[0]\n    x4, y4 = line2[1]\n\n    x_points = np.linspace(x1, x2, 100)\n    y_points = np.linspace(y1, y2, 100)\n    for x in x_points:\n        for y in y_points:\n            if is_inside((x, y), line2, line1):\n                plt.plot(x, y, 'ro')\n\n    x_points = np.linspace(x3, x4, 100)\n    y_points = np.linspace(y3, y4, 100)\n    for x in x_points:\n        for y in y_points:\n            if is_inside((x, y), line1, line2):\n                plt.plot(x, y, 'ro')\n\n    plt.show()\n\nline1 = [(0, 0), (1, 1)]\nline2 = [(0, 0), (-1, 1)]\n\nplot_region(line1, line2)\n\nprint(count_points(line1, line2))"
  },
  {
    "example_id": 447,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def star(a, b):\n    return (a + b) * b\n\nprint(star(3, 5) - star(5, 3))"
  },
  {
    "example_id": 448,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "18.0",
      "7.0",
      "18.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = 9*x**2 + 18*x + 7\nprint(f.diff(x))\nprint(f.subs(x, 0))\nprint(f.diff(x).subs(x, 0))"
  },
  {
    "example_id": 449,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.883333333333333",
      "1.9666666666666668",
      "2.05",
      "1.9166666666666665"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# David\ndavid_time = 1/2\n\n# Anna\nanna_time = 2/3\n\n# Bertram\nbertram_time = 3/4\n\n# Carli\ncarli_time = 4/5\n\n# Anna + Bertram + Carli\nprint(2 * anna_time + bertram_time + carli_time)\n\n# Anna + Carli + David\nprint(anna_time + carli_time + david_time)\n\n# Bertram + Carli + David\nprint(bertram_time + carli_time + david_time)\n\n# Anna + Bertram + David\nprint(anna_time + bertram_time + david_time)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "b = -4\nc = -3\ndiscriminant = b**2 - 4 * c\nprint(discriminant)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import sqrt\n\ndef f(x):\n    if x >= 0:\n        return -sqrt(x)\n    else:\n        return x**2\n\ndef g(x):\n    return f(f(f(f(x))))\n\nprint(g(512))"
  },
  {
    "example_id": 452,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "A = 1\nB = -2\nC = 1\nr = 5\n\nprint(A + B + C + r)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "import sympy as sym\nprint(sym.sqrt(sym.Add(5**5, 5**5, 5**5, 5**5, 5**5)))"
  },
  {
    "example_id": 454,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "age = 27\nfather_age = 100 - age\nsum_of_digits = father_age % 10 + father_age // 10\nprint(sum_of_digits)"
  },
  {
    "example_id": 455,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 0:\n        return n ** 2 - 3 * n + 1\n    else:\n        return n ** 2 + 1\n\ndef ff(n):\n    return f(f(n))\n\ndef ff_ff(n):\n    return f(ff(n))\n\ndef ff_ff_ff(n):\n    return f(ff_ff(n))\n\ndef ff_ff_ff_ff(n):\n    return f(ff_ff_ff(n))\n\ndef ff_ff_ff_ff_ff(n):\n    return f(ff_ff_ff_ff(n))\n\nprint(ff_ff_ff_ff_ff(2))"
  },
  {
    "example_id": 456,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "14.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import sqrt, simplify, pprint\n\nexpr = 1 / (sqrt(2) + sqrt(8) + sqrt(32))\n\npprint(simplify(expr))"
  },
  {
    "example_id": 457,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "21.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import simplify, sqrt\n\nexpr = 3 / sqrt(16) + 1 / sqrt(3)\n\na, b = simplify(expr).as_numer_denom()\nprint(a + b)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\n# Equation 1: (3/4)^x = 81/256\n# Equation 2: log(3/4)^x = log(81/256)\n# Equation 3: x log(3/4) = log(81/256)\n# Equation 4: x = log(81/256) / log(3/4)\n\nx = math.log(81/256) / math.log(3/4)\nprint(x)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\n\nexpr = (1+2*x)-2*(1+2*x+3*x**2)+3*(1+2*x+3*x**2+4*x**3)-4*(1+2*x+3*x**2+4*x**3+5*x**4)\n\nprint(simplify(expr).coeff(x))"
  },
  {
    "example_id": 460,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def f(x):\n    return {\n        0: 0,\n        1: 0,\n        2: 1,\n        3: 3,\n        4: 6\n    }[x]\n\ndef g(x):\n    return f(x) - x\n\nprint(len(set(g(x) for x in range(5))))"
  },
  {
    "example_id": 461,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "208.0"
    ],
    "solution": "import math\na = 5\nb = 3\ncandy_left = 2*a+b\ngrid_a, grid_b = 5*a-4, (b-1)/3\ntotal_candy = grid_a*grid_b\nprint(total_candy)"
  },
  {
    "example_id": 462,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 7\nprint(n)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import fabs\n\nfor x in range(-4, 4):\n    if fabs(2 - x) == 3:\n        print(x)"
  },
  {
    "example_id": 464,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-20.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "max_val = 4 * (2 - 7)\nprint(max_val)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "total_chimes = 24\nprint(total_chimes)"
  },
  {
    "example_id": 466,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "def f(x):\n    if x == 3:\n        return 5\n    else:\n        return f(x/3) + 2\n\ndef f_inv(y):\n    if y == 5:\n        return 3\n    else:\n        return 3 * f_inv(y-2)\n\nprint(f_inv(11))"
  },
  {
    "example_id": 467,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15333.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nresult = 0\nfor i in range(1, 10):\n    result += f(f(i))\nprint(result)"
  },
  {
    "example_id": 468,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(8*6**2-3*11)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 470,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x = 2**3 + 4\nprint(x)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "a = 33 - 14\nb = 14\nprint(a + b)"
  },
  {
    "example_id": 473,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from sympy import sqrt\n\nx = 5\ny = 2\n\nprint(sqrt(x**3 - 2**y))"
  },
  {
    "example_id": 474,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0",
      "2.0",
      "57.0",
      "2.0",
      "2.0",
      "57.0",
      "2.0",
      "7.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "from sympy import *\n\nx = Symbol('x')\n\nalpha, beta = solve(x**2 + 7*x - 2, x)\n\nprint(alpha**2 + beta**2)"
  },
  {
    "example_id": 475,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(5*1+4)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8282.0"
    ],
    "annotated_answers": [
      "15554.0"
    ],
    "solution": "s = 2222\nfor i in range(6):\n    s += 1010\nprint(s)"
  },
  {
    "example_id": 477,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x_intercept = (4 - 3) / (7 - 6)\nprint(x_intercept)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12183481.0"
    ],
    "annotated_answers": [
      "3600.0"
    ],
    "solution": "new_area = 3491 * 3491 - 60 * 60\nprint(new_area)"
  },
  {
    "example_id": 479,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.433868346401676",
      "-15.0",
      "121.40428328522846"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "m = 7 * (7 ** 2 - 10 ** 2) ** 0.5\nn = -10 * (7 ** 2 - 10 ** 2) ** 0.5\nprint(m - n)"
  },
  {
    "example_id": 480,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print((15 + 5) * (15 - 5))"
  },
  {
    "example_id": 481,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def f(x):\n    return 2/(x+1)\n\ndef f_inv(y):\n    return 2/(1-y) - 1\n\nprint(f_inv(1/5))"
  },
  {
    "example_id": 482,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "9.0",
      "3.0",
      "1.0",
      "9.0",
      "3.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import symbols\nx, y = symbols('x y')\nsolution = solve([x**2 + 6*x + y**2 + 8*y], [x, y])\nprint(solution)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 3\ny = 4\nprint((2*x + y) / (3*x - 2*y))"
  },
  {
    "example_id": 484,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "from math import gcd\n\ndef all_integer_products(a, b):\n    return [i * j for i in range(1, a + 1) for j in range(1, b + 1) if gcd(i, j) == 1]\n\nprint(sum(all_integer_products(2, -1)))"
  },
  {
    "example_id": 485,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(int(abs(23 / 9)))"
  },
  {
    "example_id": 486,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nx = int(math.sqrt(56))\ny = 56 / x\nreciprocal_smaller = 1 / x\nreciprocal_larger = 1 / y\nprint(x)"
  },
  {
    "example_id": 487,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\na = int(math.ceil(math.sqrt(15+1)))\nb = int(math.floor(math.sqrt(15)))\nprint(b-a)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def g(x):\n    return 2*x - 1\n\ndef f(x):\n    return g(g(x)) - g(x)\n\nprint(f(3))"
  },
  {
    "example_id": 489,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.333333333333333"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "d = 8 / 9\nprint(d * 6)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0",
      "22.0",
      "24.0",
      "26.0",
      "28.0",
      "30.0",
      "32.0",
      "34.0",
      "36.0",
      "38.0",
      "40.0",
      "42.0",
      "44.0",
      "46.0",
      "48.0",
      "50.0",
      "52.0",
      "54.0",
      "56.0",
      "58.0",
      "60.0",
      "62.0",
      "64.0",
      "66.0",
      "68.0",
      "70.0",
      "72.0",
      "74.0",
      "76.0",
      "78.0",
      "80.0",
      "82.0",
      "84.0",
      "86.0",
      "88.0",
      "90.0",
      "92.0",
      "94.0",
      "96.0",
      "98.0",
      "100.0",
      "102.0",
      "104.0",
      "106.0",
      "108.0",
      "110.0",
      "112.0",
      "114.0",
      "116.0",
      "118.0",
      "120.0",
      "122.0",
      "124.0",
      "126.0",
      "128.0",
      "130.0",
      "132.0",
      "134.0",
      "136.0",
      "138.0",
      "140.0",
      "142.0",
      "144.0",
      "146.0",
      "148.0",
      "150.0",
      "152.0",
      "154.0",
      "156.0",
      "158.0",
      "160.0",
      "162.0",
      "164.0",
      "166.0",
      "168.0",
      "170.0",
      "172.0",
      "174.0",
      "176.0",
      "178.0",
      "180.0",
      "182.0",
      "184.0",
      "186.0",
      "188.0",
      "190.0",
      "192.0",
      "194.0",
      "196.0",
      "198.0",
      "200.0",
      "202.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 4\nwhile n <= 200:\n    n += 2\n    print(n)"
  },
  {
    "example_id": 491,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "years = 1200 / 650\nprint(years)"
  },
  {
    "example_id": 492,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x1, y1 = 3, 1\nx2, y2 = 5, 1\nmid_x = (x1 + x2) / 2\nmid_y = (y1 + y2) / 2\nprint(mid_x, mid_y)"
  },
  {
    "example_id": 493,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import sqrt\na, b, c = 1, 1, 1\nx = (a + sqrt(b)) / c\nprint(x)\nprint(a + b + c)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = 5\nA = 24\nB = 2\nC = -19\n\nab_minus_3c = (A*B - 3*C)\nprint(ab_minus_3c)"
  },
  {
    "example_id": 495,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0",
      "3.0",
      "32.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import sympy\nx, y, z = sympy.symbols('x, y, z')\neq1 = 3*x + 4*y - 12*z - 10\neq2 = -2*x - 3*y + 9*z - 4\nsol = sympy.solve((eq1, eq2), (x, y))\nprint(sol)"
  },
  {
    "example_id": 496,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "log_64_sqrt_8 = np.log(64) / np.log(np.sqrt(8))\nprint(log_64_sqrt_8)"
  },
  {
    "example_id": 497,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.25",
      "2.5",
      "-1.0",
      "2.5",
      "-1.0",
      "2.5",
      "-1.0",
      "2.5",
      "-1.0",
      "1.0",
      "5.0",
      "-1.0",
      "5.0",
      "-1.0",
      "5.0",
      "-1.0",
      "5.0",
      "-1.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "-13.5"
    ],
    "solution": "import numpy as np\n\nx = np.array([2, p, p+2])\ny = np.array([-5, -14, -17])\nslope = (y[1]-y[0])/(x[1]-x[0])\nq = slope * (13 - p) + y[0]\nprint(q)"
  },
  {
    "example_id": 498,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "print(3)"
  },
  {
    "example_id": 499,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-75.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = -2\nd = -20\ne = -53\nprint(a+d+e)"
  },
  {
    "example_id": 500,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2003.301029995664"
    ],
    "annotated_answers": [
      "-6.5"
    ],
    "solution": "import math\na = 2000\nb = math.log(a, 10)\nprint(a+b)"
  },
  {
    "example_id": 501,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "100.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "for i in range(100, 1000):\n    for j in range(i-1, 1000):\n        if i*j > 10000:\n            break\n        if i*j == 10000:\n            print(i, j)\n            break"
  },
  {
    "example_id": 502,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve\n\nx = solve(x + 1, x - 1, x - 2, x + 2)\nprint(x)"
  },
  {
    "example_id": 503,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "180.0",
      "0.0",
      "180.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "import sympy\n\n# Volume of a right rectangular prism\n# Length * Width * Height\nl, w, h = sympy.symbols('l w h')\nvolume = l * w * h\n\n# Area of a face\n# Length * Width\narea_30 = l * w\narea_180 = l * w\narea_24 = l * w\n\n# Equations\neq1 = volume - 30 * area_30\neq2 = volume - 180 * area_180\neq3 = volume - 24 * area_24\n\n# Solve\nsolve = sympy.solve((eq1, eq2, eq3), (l, w, h))\nprint(solve)"
  },
  {
    "example_id": 504,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "m = 1\nn = 2\nprint(m+n)"
  },
  {
    "example_id": 505,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "rate_per_hour = 5/12\nnum_people_3_hours = rate_per_hour * 3\nprint(num_people_3_hours)"
  },
  {
    "example_id": 506,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "meals_ordered = 18 / 12\nprint(meals_ordered)"
  },
  {
    "example_id": 507,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "3.2"
    ],
    "solution": "def f(x):\n    return 2 * x + 2\n\nprint(f(10))"
  },
  {
    "example_id": 508,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "x = -7\nprint(x)"
  },
  {
    "example_id": 509,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "f = lambda x: x**3\nf_inv = lambda y: y**(1/3)\nprint(f_inv(8) / f(f_inv(8))**(-1))"
  },
  {
    "example_id": 510,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.414213562373095"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\nx = 2 + sqrt(2)\nprint(x)"
  },
  {
    "example_id": 511,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from math import ceil\nfrom math import sqrt\nprint(ceil(sqrt(20))**2)"
  },
  {
    "example_id": 512,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    return 5*x**2 + 3*x + 4\n\nprint(f(-2))"
  },
  {
    "example_id": 513,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 30 * 1.2\ny = 20 * 1.3\nprint(y - x)"
  },
  {
    "example_id": 514,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "print((13+5)*(13-5))"
  },
  {
    "example_id": 515,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Find the minimum value of y\nmin_y = -100\n\n# Find the maximum value of x\nmax_x = 4\n\n# Find the number of points\nnum_points = 0\n\nfor x in range(max_x+1):\n    y = (x+2)**4 - 100\n    if y <= min_y:\n        num_points += 1\n\nprint(num_points)"
  },
  {
    "example_id": 516,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import sqrt, simplify\n\nexpr = 1/(1 + sqrt(2) - sqrt(3))\nresult = simplify(expr)\n\nprint(result)"
  },
  {
    "example_id": 517,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "for x in range(1, 10):\n    if x**2 + 6**2 == 10**2:\n        print(x)"
  },
  {
    "example_id": 518,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy as sp\nx, y1, y2, b = sp.symbols('x y1 y2 b')\neq1 = y1 - (x ** 2) - 2 * x - 7\neq2 = y2 - 6 * x - b\nsol = sp.solve([eq1, eq2], [b])\nprint(sol)"
  },
  {
    "example_id": 519,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "print(-2 * 6 / (-2 - (-4)))"
  },
  {
    "example_id": 520,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "import numpy as np\n\n# Find the intersection of the two lines\nx_intercept = -3\ny_intercept = 0\n\n# Find the area of the region\narea = np.abs(x_intercept - y_intercept) * 3\nprint(area)"
  },
  {
    "example_id": 521,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "def is_integer_in_range(x):\n    return abs(x) + 1 > 7 and abs(x + 1) <= 7\n\ndef sum_of_integers_in_range():\n    sum = 0\n    for i in range(1, 15):\n        if is_integer_in_range(i):\n            sum += i\n    return sum\n\nprint(sum_of_integers_in_range())"
  },
  {
    "example_id": 522,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7\nprint(x)"
  },
  {
    "example_id": 523,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "833.5714285714284"
    ],
    "annotated_answers": [
      "2300.0"
    ],
    "solution": "x = 932 / 14\ny = 1402 / 14\nz = x * 5 + y * 5\nprint(z)"
  },
  {
    "example_id": 524,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\ny = x**2 - 8*x + 5\nk = -y.diff(x).subs(x, 0)\nprint(k)"
  },
  {
    "example_id": 525,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "sum_of_first_8_odd = 8 * (8 + 1) / 2\nsum_of_5_even = sum_of_first_8_odd - 4\n\nsmallest_even = int(sum_of_5_even / 5)\nprint(smallest_even)"
  },
  {
    "example_id": 526,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 3\ny = 2\nanswer = (2*3**3 - 3*2**2) / 6\nprint(answer)"
  },
  {
    "example_id": 527,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "158.0"
    ],
    "solution": "x = 7\ny = 19 ** 0.5\nprint(x**2 + y**2)"
  },
  {
    "example_id": 528,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = 3\ny = 4\nz = x * 40\nprint(z / y)"
  },
  {
    "example_id": 529,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5",
      "11.5",
      "10.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = (7 + 8) / 2\nb = (7 + 2 * 8) / 2\nc = (7 + 2 * 7) / 2\nprint(a, b, c)"
  },
  {
    "example_id": 530,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = -2\nh = 4\na = 5\nk = a + x*h\nprint(k)"
  },
  {
    "example_id": 531,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "333.0",
      "82.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nl = sympy.Line((1,2), (19,4))\np = l.projection((20,0))\nprint(p.y)"
  },
  {
    "example_id": 532,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = int(512 / 255)\nprint(n)"
  },
  {
    "example_id": 533,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "800000.0"
    ],
    "annotated_answers": [
      "800000.0"
    ],
    "solution": "print(1002**2 - 502**2 + 298**2 - 202**2)"
  },
  {
    "example_id": 534,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3200.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "x = -8 + 18 - 30\ny = -8 + 18 + 30\nz = -8 - 18 + 30\nprint(x*y*z)"
  },
  {
    "example_id": 535,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "7.0",
      "1.0",
      "7.0",
      "2.0",
      "7.0",
      "3.0",
      "7.0",
      "4.0",
      "7.0",
      "5.0",
      "7.0",
      "6.0",
      "7.0",
      "7.0",
      "7.0",
      "8.0",
      "7.0",
      "9.0",
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "m = 7\nfor i in range(10):\n    print(i, m)\n    m *= m / 7"
  },
  {
    "example_id": 536,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "m = 3\nn = 7\np = 2\n\nm_n_p = m + n + p\nprint(m_n_p)"
  },
  {
    "example_id": 537,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "part_a = 100 / 5\npart_b = part_a * 1.5\npart_c_and_d = part_a + part_b\npart_e = 10\n\nprint(part_b)"
  },
  {
    "example_id": 538,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40000.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "# Use the formula for the area of a rectangle\n# area = length * width\n# To find the maximum area\n# length = 200\n# width = 200\n# area = length * width\n# area = 200 * 200\n# area = 40,000\nprint(40000)"
  },
  {
    "example_id": 539,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy import ceiling\nprint(ceiling(-sqrt(23)))"
  },
  {
    "example_id": 540,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 3\nf1 = 2*x - 5\nf2 = 2*f1 - 5\nprint(f2)"
  },
  {
    "example_id": 541,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1023.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "a = 1\nwhile a < 50:\n    b = a + 2\n    if b**2 - a**2 == 128:\n        print(a * b)\n    a = b"
  },
  {
    "example_id": 542,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 1000\na = 987\nb = 974\nc = 961\nwhile n <= a:\n    n = a + b - c\n    a = b\n    b = c\n    c = n\nprint(n)"
  },
  {
    "example_id": 543,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(9**18//27**24)"
  },
  {
    "example_id": 544,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# number of distinct triangles\nn = 1\n\n# number of triangles with given side length\nn_1 = 1\nn_2 = 1\nn_3 = 1\n\n# side length of each triangle\na = 1\nb = 2\nc = 3\n\n# total perimeter\ntotal_perimeter = a + b + c\n\nwhile total_perimeter <= 60:\n    n += 1\n    if (total_perimeter == 60):\n        n_1 += 1\n    if (total_perimeter == 59):\n        n_2 += 1\n    if (total_perimeter == 58):\n        n_3 += 1\n    a += 1\n    b += 1\n    c += 1\n    total_perimeter = a + b + c\n\nprint(\"Number of distinct triangles: \", n)\nprint(\"Number of triangles with side length 1: \", n_1)\nprint(\"Number of triangles with side length 2: \", n_2)\nprint(\"Number of triangles with side length 3: \", n_3)"
  },
  {
    "example_id": 545,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "print(4 * 3)"
  },
  {
    "example_id": 546,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "nickels = 75 // 5\nprint(nickels)"
  },
  {
    "example_id": 547,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "185.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "# use the fact that the difference is 20 pounds\n# and the sum of the two smaller dogs is equal to the larger dog\n# to solve for the larger dog\nsmaller_dog = 185 - 20\nlarger_dog = smaller_dog + 20\nprint(larger_dog)"
  },
  {
    "example_id": 548,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 0:\n        return n**2 - 4*n - 1\n    else:\n        return n**2\n\ndef ff(n):\n    return f(f(n))\n\ndef fff(n):\n    return f(ff(n))\n\ndef ffff(n):\n    return f(fff(n))\n\nprint(ffff(4))"
  },
  {
    "example_id": 549,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "floor_11_1 = int(11.1)\nfloor_0_5_11_1 = int(0.5 * 11.1)\nprint(floor_11_1 + 2 * floor_0_5_11_1)"
  },
  {
    "example_id": 550,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.721347520444482",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sp\nx = sp.log(4, 64 ** (1/3))\nprint(x)"
  },
  {
    "example_id": 551,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\n\ndef g(x):\n    return sqrt(x)\n\ndef t(x):\n    return 3 - g(x)\n\nprint(t(g(16)))"
  },
  {
    "example_id": 552,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 553,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "6.0",
      "5.0",
      "15.0",
      "4.0",
      "16.0",
      "3.0",
      "17.0",
      "2.0",
      "191.0",
      "0.0",
      "7.0",
      "6.0",
      "5.0",
      "15.0",
      "4.0",
      "16.0",
      "3.0",
      "17.0",
      "2.0",
      "191.0",
      "1.0",
      "7.0",
      "6.0",
      "5.0",
      "15.0",
      "4.0",
      "16.0",
      "3.0",
      "17.0",
      "2.0",
      "191.0",
      "2.0",
      "7.0",
      "6.0",
      "5.0",
      "15.0",
      "4.0",
      "16.0",
      "3.0",
      "17.0",
      "2.0",
      "191.0",
      "3.0",
      "7.0",
      "6.0",
      "5.0",
      "15.0",
      "4.0",
      "16.0",
      "3.0",
      "17.0",
      "2.0",
      "191.0",
      "4.0",
      "7.0",
      "6.0",
      "5.0",
      "15.0",
      "4.0",
      "16.0",
      "3.0",
      "17.0",
      "2.0",
      "191.0",
      "5.0",
      "7.0",
      "6.0",
      "5.0",
      "15.0",
      "4.0",
      "16.0",
      "3.0",
      "17.0",
      "2.0",
      "191.0",
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nf = sp.Add(1/(x**2-7), 1/(x**3-8), 1/(x**4-9))\nprint(sp.solve(f, x))"
  },
  {
    "example_id": 554,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import ceil, floor, sqrt\n\nprint(ceil(sqrt(10)) + floor(sqrt(10)))"
  },
  {
    "example_id": 555,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4000.0"
    ],
    "annotated_answers": [
      "4000.0"
    ],
    "solution": "print(1000 / 0.25)"
  },
  {
    "example_id": 556,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "pile1 = 5\npile2 = pile1 + 4\npile3 = pile2 - 4\npile4 = 3 * pile2\n\ntotal_quarters = pile1 + pile2 + pile3 + pile4\nprint(total_quarters)"
  },
  {
    "example_id": 557,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "680.0"
    ],
    "annotated_answers": [
      "368.0"
    ],
    "solution": "horsepower_to_kw = 1.36\nkw = horsepower_to_kw * 500\nprint(kw)"
  },
  {
    "example_id": 558,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "triangle = 4\nsquare = 3\ndiamond = 5\nclubsuit = 7\n\nprint(square)"
  },
  {
    "example_id": 559,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "f = lambda x: x**2 - 1\ng = lambda x: x + 7\nprint(f(g(7)) + g(f(3)))"
  },
  {
    "example_id": 560,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import solve, Symbol, Eq, pprint\n\nx = Symbol('x')\npprint(solve(3 * x - 4 <= (6 * x**2 - 3 * x + 5) / 10, x))"
  },
  {
    "example_id": 561,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import numpy as np\n\ndef find_break_even(f, x_0):\n    x = np.arange(x_0, 100)\n    y = f(x)\n    for i in range(len(y)):\n        if y[i] >= 0:\n            return x[i]\n    return None\n\ndef f(x):\n    return x**2 - 8*x - 33\n\nbreak_even = find_break_even(f, 0)\nprint(break_even)"
  },
  {
    "example_id": 562,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "distance = 2 * Josh_rate * time\nprint(distance)"
  },
  {
    "example_id": 563,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(int(pow(pow(7/4, 2), 2)))"
  },
  {
    "example_id": 564,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "920.25"
    ],
    "solution": "import math\n\nprincipal = 10000\nrate = 0.045\ntime = 2\n\ninterest = principal * rate * time\nprint(interest)"
  },
  {
    "example_id": 565,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "630.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "def term(n):\n    return a + (n-1) * d\n\nn = 21\na = 30\nd = 30\nprint(term(n))"
  },
  {
    "example_id": 566,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(3 + 5)"
  },
  {
    "example_id": 567,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3333333333333333"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "minutes = 20 / 60\nprint(minutes)"
  },
  {
    "example_id": 568,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "a = 3\nb = 10\nresult = 2*a + 5*b - a*b\nprint(result)"
  },
  {
    "example_id": 569,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nproduct = a*b*c\nprint(product)"
  },
  {
    "example_id": 570,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0",
      "11.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "print(5 + 500 * 10 / 100)\nprint(110 * 10 / 100)"
  },
  {
    "example_id": 571,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "import sympy as sym\nx1, y1 = sym.symbols('x1 y1')\nx2, y2 = sym.symbols('x2 y2')\nx3, y3 = sym.symbols('x3 y3')\nx4, y4 = sym.symbols('x4 y4')\nkite_area = sym.sqrt((x4-x1)**2 + (y4-y1)**2) * sym.sqrt((x3-x2)**2 + (y3-y2)**2)\nprint(kite_area)"
  },
  {
    "example_id": 572,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "m = 7 / n\nprint(abs(m-n))"
  },
  {
    "example_id": 573,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "x = 14/2\ny = (14-x)**2 / x\nprint(y)"
  },
  {
    "example_id": 574,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.21"
    ],
    "solution": "b = -2.6\nc = 3.6\nprint(b+c)"
  },
  {
    "example_id": 575,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\neq = 2*x**2 + 3*x - 5\nd, e = sp.solveset(eq, x)\nprint((d-1)*(e-1))"
  },
  {
    "example_id": 576,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.189207115002721",
      "1.681792830507429",
      "1.9999999999999998"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(2 ** (1/4))\nprint(4 ** (3/8))\nprint(2 ** (1/4) * 4 ** (3/8))"
  },
  {
    "example_id": 577,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "33840.0"
    ],
    "solution": "product = 454\nsum_of_two_integers = 454 - product\nlargest_value = product * sum_of_two_integers\nprint(largest_value)"
  },
  {
    "example_id": 578,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# 2(6) + 4(3) = 12 + 12 = 24\n# 8(3+3) = 8(6) = 48\nprint(48 - 24)"
  },
  {
    "example_id": 579,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 3\ny = 2\nx_3 = x ** 3\ny_3 = y ** 3\nx_y_3 = x_3 - y_3\nprint(x_y_3)"
  },
  {
    "example_id": 580,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "114.0",
      "2.0",
      "5.0",
      "114.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import solve, Symbol\n\na = Symbol('a')\n\neq = (3 * 5 ** 2 - 4 * (5 - a) ** 2) / 3\n\nprint(solve(eq - 63))"
  },
  {
    "example_id": 581,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((3*4-2)*(4*4+1)-(3*4-2)*4*4+1)"
  },
  {
    "example_id": 582,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.142857142857143"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "y = (19 - 7 ** 2) / (2 * 7)\nprint(y)"
  },
  {
    "example_id": 583,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1715728752538097",
      "0.3431457505076194",
      "0.09247985312608988",
      "0.005289011434631088",
      "1.0780241689052932",
      "1.0780241689052932"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\n# The radius of the circle is the distance from the center to the edge\nradius = (6 - math.sqrt(6 ** 2 - 2 ** 2)) / 2\n\n# The diameter of the circle is the distance from the center to the center\ndiameter = 2 * radius\n\n# The area of the circle is the area enclosed by the circle\narea = math.pi * radius ** 2\n\n# The volume of the circle is the volume enclosed by the circle\nvolume = math.pi * radius ** 3 / 3\n\n# The perimeter of the circle is the distance around the circle\nperimeter = 2 * math.pi * radius\n\n# The circumference of the circle is the distance around the circle\ncircumference = 2 * math.pi * radius\n\n# The Cookie Monster is very confused, so let's print all the information\nprint(\"The radius is\", radius)\nprint(\"The diameter is\", diameter)\nprint(\"The area is\", area)\nprint(\"The volume is\", volume)\nprint(\"The perimeter is\", perimeter)\nprint(\"The circumference is\", circumference)"
  },
  {
    "example_id": 584,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "f_of_f_4 = f(4)\nprint(f_of_f_4)"
  },
  {
    "example_id": 585,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "5050.0"
    ],
    "solution": "def sum_n(n):\n    return (n * (n + 1)) // 2\n\nprint(sum_n(100))"
  },
  {
    "example_id": 586,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(4 - 2)"
  },
  {
    "example_id": 587,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1600.0"
    ],
    "annotated_answers": [
      "1600.0"
    ],
    "solution": "# Write a program to solve for x\nx = 441 + 2 * 21 * 19 + 361\nprint(x)"
  },
  {
    "example_id": 588,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-42.0"
    ],
    "solution": "f = sympy.sympify('x**3 - 6*x**2 + 3*x - 4')\ng = sympy.sympify('x**3 + 5*x**2 + 9*x - 2')\nconstant_term = f(g(x))\nprint(constant_term)"
  },
  {
    "example_id": 589,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import *\nx,y = symbols('x,y')\nc = Circle((5,15), sqrt(130))\neq = Eq(c.center.distance(Point(x,y)), x)\nsolve(eq, x)"
  },
  {
    "example_id": 590,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-12.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "x = -24 / 2\nprint(x)"
  },
  {
    "example_id": 591,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "g = lambda x: 3\nprint(g(2))"
  },
  {
    "example_id": 592,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nsol1 = solve(2*x**2 + 13*x + 6, x)\nprint(sol1[0]**2*sol1[1]**2)"
  },
  {
    "example_id": 593,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2003.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def sum_of_terms(k):\n    return sum(range(1, 2005, k))\n\ndef contains_2005(k):\n    return sum_of_terms(k) == 2005\n\nfor k in range(1, 10000):\n    if contains_2005(k):\n        print(k)"
  },
  {
    "example_id": 594,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "print(31**2 - 19**2)"
  },
  {
    "example_id": 595,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "1.0",
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\n\nf = sympy.exp(3*sympy.symbols('x')**2 - sympy.floor(sympy.symbols('x'))**2) + sympy.binomial(22 + 735235*sympy.floor(sympy.symbols('x'))**2, 2356) + sympy.floor(sympy.symbols('x'))**2 + 72*sympy.symbols('x')**4 + 3*sympy.symbols('x')**3 - 6*sympy.symbols('x')**2 + 2*sympy.symbols('x') + 1\ng = sympy.exp(3*sympy.symbols('x')**2 - sympy.floor(sympy.symbols('x'))**2) + sympy.binomial(22 + 735235*sympy.floor(sympy.symbols('x'))**2, 2356) + sympy.floor(sympy.symbols('x'))**2 + 72*sympy.symbols('x')**4 + 4*sympy.symbols('x')**3 - 11*sympy.symbols('x')**2 - 6*sympy.symbols('x') + 13\n\nsol = sympy.solve(f - g, sympy.symbols('x'))\n\nprint(sol)"
  },
  {
    "example_id": 596,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "pile_1 = 3\npile_2 = 2\npile_3 = 2\npile_4 = pile_2 * 2\ntotal_quarters = pile_1 + pile_2 + pile_3 + pile_4\nprint(total_quarters)"
  },
  {
    "example_id": 597,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "pq = 1/(p-1) + 1/(q-1)\nprint(pq)"
  },
  {
    "example_id": 598,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "21.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "-5.0",
      "4.0",
      "2.0",
      "-29.0",
      "5.0",
      "67.0",
      "4.0",
      "67.0",
      "4.0",
      "-5.0",
      "4.0",
      "67.0",
      "4.0",
      "2.0",
      "-29.0",
      "5.0",
      "67.0",
      "4.0",
      "-5.0",
      "4.0",
      "67.0",
      "4.0",
      "-4.0",
      "5.0",
      "67.0",
      "2.0",
      "4.0",
      "2.0",
      "-5.0",
      "4.0",
      "-4.0",
      "5.0",
      "67.0",
      "2.0",
      "4.0",
      "2.0",
      "67.0",
      "4.0",
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f_of_2 = 2\nf_of_f_of_2 = f(f_of_2)\nprint(f_of_f_of_2)"
  },
  {
    "example_id": 599,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "12.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "t = 1\nwhile t <= 100:\n    if t ** 0.5 > 2 and t ** 0.5 < 3.5:\n        print(t)\n    t += 1"
  },
  {
    "example_id": 600,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\n\neq1 = 2*x - 3*y\neq2 = 4*x + 3*y\n\nsol = sympy.solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 601,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6666666666666666"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "ammy_coins = 1\nben_coins = 3 * ammy_coins\ncarl_coins = 1 / 3\ndebbie_coins = 2 / 3\ntotal_coins = ammy_coins * ben_coins * carl_coins * debbie_coins\nprint(total_coins)"
  },
  {
    "example_id": 602,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "2.0",
      "0.333333333333333"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import sqrt\na = 4\nb = 32\nr = sqrt(a) + sqrt(b)\nr = r**(1/3)\nprint(r)"
  },
  {
    "example_id": 603,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3125.0"
    ],
    "annotated_answers": [
      "3125.0"
    ],
    "solution": "a = 5\nprint(a**3*a**2)"
  },
  {
    "example_id": 604,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "import math\na = int(math.sqrt(2009))\nprint(a)"
  },
  {
    "example_id": 605,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1400.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "# 1st term: a\n# common difference: d\n# nth term: a + (n-1)d\n# 6th term: a + (6-1)d\n# 5th term: a + (5-1)d\n# 7th term: a + (7-1)d\n\n# 5th term = 200\n# 7th term = 500\n\nd = 500 - 200\na = 200 - d\n\nprint(a + (6-1)*d)"
  },
  {
    "example_id": 606,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 3\nprint(x-3/(2*x**2-8*x+7))"
  },
  {
    "example_id": 607,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "143.0"
    ],
    "solution": "num = 13\nreversed_num = int(str(num)[::-1])\nprint(num + reversed_num)"
  },
  {
    "example_id": 608,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "import math\n\nperimeter = math.sqrt(1**2 + (-2)**2 + (-4)**2 + 10**2)\nprint(perimeter)"
  },
  {
    "example_id": 609,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "a = 1\nwhile a*a + 6*a - 7 > 0:\n    a += 1\nprint(a*a + 6*a - 7)"
  },
  {
    "example_id": 610,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.7777777777777"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "from sympy import Symbol, integrate\n\nk = Symbol('k')\n\ndef triangle_area(k):\n    # Area of triangle is half base times height\n    base = k - 5\n    height = 2 / 3 * (k - 5)\n    return base * height / 2\n\narea_sum = integrate(triangle_area(k), (k, 0, 10))\nprint(area_sum)"
  },
  {
    "example_id": 611,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "lags_per_lig = 4\nlugs_per_lag = 20\n\nligs_equivalent_to_80_lugs = 80 / (lugs_per_lag / lags_per_lig)\nprint(ligs_equivalent_to_80_lugs)"
  },
  {
    "example_id": 612,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "17.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy.abc import x, y\n\ncenter = (0, 0)\npoint = (-3, -12)\ndistance = sqrt((point[0] - center[0]) ** 2 + (point[1] - center[1]) ** 2)\nprint(distance)"
  },
  {
    "example_id": 613,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = (-2)/4\nprint(x)"
  },
  {
    "example_id": 614,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0163934426229515"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Import math module for sqrt() function\nfrom math import sqrt\n\n# Calculate absolute value of difference of roots\nabs_diff = sqrt(61) / 3\n\n# Calculate square of sum of roots\nx1 = (-5 + sqrt(61)) / 2\nx2 = (-5 - sqrt(61)) / 2\nsq_sum = x1 + x2\nsq_sum = sq_sum ** 2\n\n# Calculate product of roots\nx1 = (-5 + sqrt(61)) / 2\nx2 = (-5 - sqrt(61)) / 2\nprod = x1 * x2\n\n# Calculate a\na = (sq_sum - prod) / (abs_diff ** 2)\nprint(a)"
  },
  {
    "example_id": 615,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = 3\nb = -24\nc = 72\nprint(a+b+c)"
  },
  {
    "example_id": 616,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 3*4\nprint(n)"
  },
  {
    "example_id": 617,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy\na, b = sympy.symbols('a, b')\neq1 = a*b - 7\neq2 = a + b - 5\nsol = sympy.solve([eq1, eq2], [a, b])\nprint(sol)"
  },
  {
    "example_id": 618,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "219.6"
    ],
    "annotated_answers": [
      "221.0"
    ],
    "solution": "weight_end = 244 - 10 * 1 / 100 * 244\nprint(weight_end)"
  },
  {
    "example_id": 619,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "800.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "print(102**2 - 98**2)"
  },
  {
    "example_id": 620,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\n# The area of a rectangle is width times height.\n# The perimeter of a rectangle is 2 times (width + height).\n\n# The area of a rectangle is equal to 5 times the perimeter.\n# So, we can set up the equation:\n\n# area = 5 perimeter\n\n# To find the perimeter, we can use the formula:\n# perimeter = 2 (width + height)\n\n# We know that the width and height are integer, so we can set\n# up the equations:\n\n# width + height = 5\n\n# width * height = 5\n\n# We can solve this system of equations using sympy.\n\n# We can use sympy to solve the equations:\n\n# width + height = 5\n# width * height = 5\n\n# We can use sympy to solve this system of equations.\n\n# We can use the solve function to find the solutions\n# to the system of equations:\n\nsolution = sympy.solve([\n    sympy.Eq(sympy.Symbol('width') + sympy.Symbol('height'), 5),\n    sympy.Eq(sympy.Symbol('width') * sympy.Symbol('height'), 5)\n])\n\n# We can print the solutions:\n\nprint(solution)"
  },
  {
    "example_id": 621,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "315.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "c = 18**2 - 9\nprint(c)"
  },
  {
    "example_id": 622,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "import math\n\nfor x in range(-10, 10):\n    if (x+3)**2 == 121:\n        print(x)"
  },
  {
    "example_id": 623,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import *\nprint(sqrt(4**5 + 4**5 + 4**5 + 4**5))"
  },
  {
    "example_id": 624,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import fabs\n\nx = 1.25\n\nsum = fabs(x - 1) + fabs(x - 1.5) + fabs(x - 2)\nprint(sum)"
  },
  {
    "example_id": 625,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "13.0",
      "2.0",
      "11.0",
      "23.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "-128.0"
    ],
    "solution": "x1 = 6\nx2 = 10\nprint(x1 * x2)"
  },
  {
    "example_id": 626,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import sqrt\n\ndef is_lattice_point(x, y):\n    return x % 1 == 0 and y % 1 == 0\n\ndef is_on_hyperbola(x, y):\n    return x**2 - y**2 == 17\n\ndef count_lattice_points_on_hyperbola(a, b):\n    count = 0\n    for x in range(a, b):\n        for y in range(a, b):\n            if is_lattice_point(x, y) and is_on_hyperbola(x, y):\n                count += 1\n    return count\n\nprint(count_lattice_points_on_hyperbola(-100, 100))"
  },
  {
    "example_id": 627,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "425250.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "total_revenue = 500 * 450\nunit_revenue = total_revenue / 500\nunit_cost = 450 - 5\nadditional_sales = unit_revenue * unit_cost\nmaximum_revenue = total_revenue + additional_sales\nprint(maximum_revenue)"
  },
  {
    "example_id": 628,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# six cookies cost the same as 2 brownies\n# four brownies cost the same as 10 cupcakes\ncookies_to_brownies = 6 / 4\nbrownies_to_cupcakes = 4 / 10\n\n# Bob can buy 18 / 6 = 3 brownies\n# 3 brownies cost the same as 3 \\* 10 cupcakes\ncupcakes = 18 / cookies_to_brownies / brownies_to_cupcakes\nprint(cupcakes)"
  },
  {
    "example_id": 629,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "years = 36 / 18\nprint(years)"
  },
  {
    "example_id": 630,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = 1\nf = lambda x: a*x**4 - b*x**2 + x + 5\nprint(f(3))"
  },
  {
    "example_id": 631,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-19.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "from sympy import solve, symbols\nx = symbols('x')\nk = symbols('k', negative=True)\nsol = solve((2*x**2 + k*x + 6, -x + 4), dict=True)\nprint(sol)"
  },
  {
    "example_id": 632,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "174.0"
    ],
    "solution": "A = 2 * 60\nB = 60 * 5\nprint(A + B)"
  },
  {
    "example_id": 633,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "print(1**2 + 3)"
  },
  {
    "example_id": 634,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "10.0",
      "100.0"
    ],
    "annotated_answers": [
      "697.0"
    ],
    "solution": "a = 4\nb = 10\nc = 100\nprint(a, b, c)"
  },
  {
    "example_id": 635,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "from sympy import floor, sqrt\n\ndef f(x):\n    return x - floor(sqrt(x))**2\n\ndef sum_f(start, end):\n    return sum(f(x) for x in range(start, end + 1))\n\nprint(sum_f(101, 110))"
  },
  {
    "example_id": 636,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "243.0"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "# Sam tells 3 friends\n# 3 friends tell 3 friends\n# 3 friends tell 3 friends\n# 3 friends tell 3 friends\n# 3 friends tell 3 friends\n# 3 friends tell 3 friends\n# total = 3^5 = 243\nprint(243)"
  },
  {
    "example_id": 637,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-128.0"
    ],
    "solution": "from sympy import expand\nx = symbols('x')\nexpand((x-2)**2*(x+2)**2)"
  },
  {
    "example_id": 638,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0",
      "8.0",
      "10.0",
      "7.0",
      "79.0",
      "6.0",
      "28.0",
      "5.0",
      "32.0",
      "4.0",
      "37.0",
      "3.0",
      "43.0",
      "2.0",
      "29.0",
      "4.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "from sympy import simplify, symbols\nx = symbols('x')\nprint(simplify((7*x**4 - 3*x**3 - 3*x**2 - 8*x + 1) * (8*x**4 + 2*x**3 - 7*x**2 + 3*x + 4)))"
  },
  {
    "example_id": 639,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "c = 9/(2^3) - 9 + 3\nprint(c)"
  },
  {
    "example_id": 640,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "72.00148654088365"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "from math import sqrt\n\ndef f(x):\n    return sqrt(x + sqrt(x + sqrt(x + sqrt(x)))) - 9\n\ndef newton_raphson(f, x0, eps=1e-6):\n    x = x0\n    while abs(f(x)) > eps:\n        x -= f(x) / (1 + f(x)**2)**0.5\n    return x\n\nx = newton_raphson(f, 0)\nprint(x)"
  },
  {
    "example_id": 641,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "def f(x):\n    return 2*x - 3\n\ndef g(f_value):\n    return 5-4*f_value\n\nprint(g(f(4)))"
  },
  {
    "example_id": 642,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-25.0"
    ],
    "annotated_answers": [
      "-25.0"
    ],
    "solution": "def f(x):\n    if x < -3:\n        return 3 * x + 5\n    else:\n        return 7 - 4 * x\nprint(f(-10))"
  },
  {
    "example_id": 643,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "# 1st term is a\n# 2nd term is a + d\n# 3rd term is a + 2d\n# 4th term is a + 3d\n# 5th term is a + 4d\n# 6th term is a + 5d\n\n# 7th term is a + 6d\n# 8th term is a + 7d\n# 9th term is a + 8d\n# 10th term is a + 9d\n# 11th term is a + 10d\n# 12th term is a + 11d\n\na = -1\nd = 5\ntwelfth_term = a + 11 * d\nprint(twelfth_term)"
  },
  {
    "example_id": 644,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-12.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "b = -12\nprint(b)"
  },
  {
    "example_id": 645,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "567.0"
    ],
    "annotated_answers": [
      "567.0"
    ],
    "solution": "common_ratio = (5103 / 7) ** (1/6)\nprint(7 * common_ratio ** 4)"
  },
  {
    "example_id": 646,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "93.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from math import sqrt\na = int((sqrt(2) + sqrt(3))**3)\nb = int((sqrt(3) + sqrt(2))**3)\nc = int((sqrt(2) + sqrt(3))**3)\nprint(a+b+c)"
  },
  {
    "example_id": 647,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "16.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy.ntheory import factorint\n\nA = 8\nB = 3*sqrt(2)\nC = 2\n\ndef has_common_prime_factors(x, y):\n    return any(i in factorint(x) and i in factorint(y) for i in factorint(x))\n\ndef has_perfect_square_factors(x, y):\n    return any(i**2 in factorint(x) and i**2 in factorint(y) for i in factorint(x))\n\nwhile has_common_prime_factors(A, C) or has_perfect_square_factors(B, C):\n    A += 1\n    B += sqrt(2)\n    C += 1\n\nprint(A + B + C)"
  },
  {
    "example_id": 648,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import math\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\ndef longest_side(p1, p2, p3):\n    return max(distance(p1, p2), distance(p2, p3), distance(p3, p1))\n\nprint(longest_side((11, 1), (2, 3), (3, 7)))"
  },
  {
    "example_id": 649,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "495.0"
    ],
    "annotated_answers": [
      "495.0"
    ],
    "solution": "def sum_odd_integers(n):\n    return sum(i for i in range(n+1, 64+1, 2))\n\nprint(sum_odd_integers(46))"
  },
  {
    "example_id": 650,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "10.0",
      "3.0",
      "7.0",
      "10.0",
      "3.0",
      "8.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Use sympy to simplify the polynomial\nfrom sympy import simplify\nfrom sympy import Symbol\n\nx = Symbol('x')\np = 3 * (x**10 - x**7 + 2*x**3 - x + 7) + 4 * (x**3 - 2*x**2 - 5)\np_simplified = simplify(p)\nprint(p_simplified)"
  },
  {
    "example_id": 651,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "y_intercepts = [-2, 2]\nprint(len(y_intercepts))"
  },
  {
    "example_id": 652,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 3/5\nb = -2/3\nprint(6*b)"
  },
  {
    "example_id": 653,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(abs(-3+2*(-4)))"
  },
  {
    "example_id": 654,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 35\nb = 12\ndiff = abs(a - b)\nprint(diff)"
  },
  {
    "example_id": 655,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31500.0"
    ],
    "annotated_answers": [
      "1050.0"
    ],
    "solution": "calories = 150 * 30 * 7\nprint(calories)"
  },
  {
    "example_id": 656,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import solve, Symbol\n\nx, y = Symbol('x'), Symbol('y')\n\n# Solve the system of equations\nsol = solve((4*y - 4*x**2 - 1, 4*x - 4*y**2 - 1), (x, y))\n\n# Compute the result\nresult = 1/(x**3 + y**3)\n\n# Print the result\nprint(result.subs(sol))"
  },
  {
    "example_id": 657,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2560.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "j = 24 / k\nk = 24 / j\nl = 48 / j\nprint(j + k + l)"
  },
  {
    "example_id": 658,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5937.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "from math import floor, ceil\n\ndef f(x):\n    if x % 1 == 0:\n        return abs(floor(x))\n    else:\n        return ceil(x) ** 2\n\nprint(f(sqrt(3)) + f(-pi) + f(sqrt(50)) + f(9/2))"
  },
  {
    "example_id": 659,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.125"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = -4\nb = 8\nprint(a + b)"
  },
  {
    "example_id": 660,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "8.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "# 3/x is greater than 1/3 and less than 3/4\n# x > 3/1 and x < 3/4\n# x > 1/3 and x < 4/3\n# x is greater than 1 and less than 4\n# x is between 2 and 3\n\n# x is between 2 and 3, so\n# sum from 2 to 3 is 5\nprint(5)"
  },
  {
    "example_id": 661,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "estimate_red_students = 11 / 24 * 480\nprint(estimate_red_students)"
  },
  {
    "example_id": 662,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0915193652383441",
      "-13.0",
      "-2.531308496145357",
      "-14.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "def sum_i_power_n(n):\n    return sum(1j**k for k in range(n+1))\n\nprint(sum_i_power_n(259))"
  },
  {
    "example_id": 663,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    return 10 / x\n\ndef h(x):\n    return f(f(x))\n\nprint(h(10))"
  },
  {
    "example_id": 664,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = -2\nf_x = x**2 - 3\nt_f_x = 9 + 2*(f_x)\nprint(t_f_x)"
  },
  {
    "example_id": 665,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "from math import sqrt\nx = sqrt(16) ** 3\nprint(x)"
  },
  {
    "example_id": 666,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "8.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy as sym\n\nx, y = sym.symbols('x y')\neq = x**2 + y**2 - 4*x - 8*y\n\nsol = sym.solve(eq, x)\n\nprint(sol[0])"
  },
  {
    "example_id": 667,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x_agreed = (3 + (-6)) / 2\nx_should_be = (3 + (-10)) / 2\nprint(x_agreed - x_should_be)"
  },
  {
    "example_id": 668,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    return x**2 - 6*x + 13\ndef find_min(f):\n    return f(0)\nprint(find_min(f))"
  },
  {
    "example_id": 669,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "print(19**2 + 2*19 + 1)"
  },
  {
    "example_id": 670,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 14 // 3\nm = 14 - n\nprint(n - m)"
  },
  {
    "example_id": 671,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0",
      "9.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve, symbols\nx, y = symbols('x, y')\nf = x**2 + 8*x + y**2 - 6*y\nsol = solve(f, y)\nprint(sol[0])"
  },
  {
    "example_id": 672,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "324.0"
    ],
    "solution": "import math\n\nsquare_1 = 100\nsquare_2 = square_1 + 35\n\nwhile square_2 < square_1:\n    square_1 = square_2\n    square_2 = square_1 + 35\n\nprint(square_1)"
  },
  {
    "example_id": 673,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "p(q(2)) = 2 - (2)^2 = 2 - 4 = -2"
  },
  {
    "example_id": 674,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 9\nprint(k)"
  },
  {
    "example_id": 675,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n\ndef f1(x):\n    return x**2 + 4*x + 6\n\ndef f2(x):\n    return x**2 / 2 + x + 6\n\nx = np.linspace(-10, 10)\nplt.plot(x, f1(x), label='f1')\nplt.plot(x, f2(x), label='f2')\nplt.legend()\nplt.show()\n\na = -10\nb = f1(a)\nc = 10\nd = f2(c)\n\nprint(c - a)"
  },
  {
    "example_id": 676,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def f(x):\n    if x == 1:\n        return 2\n    elif x == 4:\n        return 3\n    elif x == 7:\n        return 4\n    else:\n        raise ValueError('Invalid input')\n\ndef f_inv(x):\n    if x == 2:\n        return 1\n    elif x == 3:\n        return 4\n    elif x == 4:\n        return 7\n    else:\n        raise ValueError('Invalid input')\n\nprint(f_inv(f_inv(3)))"
  },
  {
    "example_id": 677,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import math\nsum = 0\nfor i in range(1, 20):\n    sum += math.floor(math.sqrt(i))\nprint(sum)"
  },
  {
    "example_id": 678,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "from math import sqrt\n\na = 1\nwhile True:\n    b = int(sqrt(a))\n    if b * b == a:\n        break\n    a += 1\n\nprint(a + b)"
  },
  {
    "example_id": 679,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "correct_answers = 232 // 5\nprint(correct_answers)"
  },
  {
    "example_id": 680,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import sympy as sp\n\na, b = sp.symbols('a b')\nh = a*x + b\nh_1 = h.subs(x, 1)\nh_1_5 = h_1.subs(a, 5)\nh_1_1 = h_1.subs(a, 1)\nh_6 = h.subs(x, 6)\nh_6_value = h_6.subs(a, (h_1_5 - h_1_1) / (1 - -1))\nprint(h_6_value)"
  },
  {
    "example_id": 681,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\nx_plus_y = x + y\nx_minus_y = x - y\nx_squared = x ** 2\ny_squared = y ** 2\ntwo_x_squared = 2 * x_squared\ntwo_y_squared = 2 * y_squared\nexpr = x_plus_y + x_minus_y\nexpr_expanded = expr.expand()\nexpr_simplified = expr_expanded.simplify()\nprint(expr_simplified)"
  },
  {
    "example_id": 682,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.25"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "laps_for_250 = 10 * (250 / 400)\nprint(laps_for_250)"
  },
  {
    "example_id": 683,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "68.0",
      "2.0",
      "2.0",
      "3.0",
      "68.0",
      "2.0",
      "2.0",
      "3.0",
      "68.0",
      "2.0",
      "2.0",
      "3.0",
      "68.0",
      "2.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "from sympy import var, solve\n\nx, y, z = var('x, y, z')\neq1 = x + y + z - 0\neq2 = x*y*z - 17\nsol = solve([eq1, eq2], [x, y, z])\nprint(sol)"
  },
  {
    "example_id": 684,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "15.0",
      "4.0",
      "2.0",
      "15.0"
    ],
    "annotated_answers": [
      "-22.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\na, b = sympy.solve(2*x**2 - 10*x + 5, x)\nprint((2*a - 3)*(4*b - 6))"
  },
  {
    "example_id": 685,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "f = lambda x: np.sqrt(3*x) + 2\nf(0) + f(3)"
  },
  {
    "example_id": 686,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "x = 5\nexpression = x**1 * x**2 * x**3 * x**4 * x**5 * x**6 * x**7 * x**8 * x**9\nexpression /= x**2 * x**4 * x**6 * x**8 * x**10 * x**12\nprint(expression)"
  },
  {
    "example_id": 687,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "print(f(g(x)))"
  },
  {
    "example_id": 688,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "98.0"
    ],
    "solution": "from math import sqrt\na = 8**(1/3)\nb = -3**(1/3)\nc = 1\nroot = (a + b + 1) / c\nprint(root)"
  },
  {
    "example_id": 689,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.244897959183673"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "x = 25\nz = 24\ny = (z * x) / (x + z)\nprint(y)"
  },
  {
    "example_id": 690,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "113.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 35\ny = 78\nprint(x + y)"
  },
  {
    "example_id": 691,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "360.0"
    ],
    "annotated_answers": [
      "4624.0"
    ],
    "solution": "import math\n\n# find the larger of two squares\ndef larger_square(n):\n    i = int(math.sqrt(n))\n    j = i + 2\n    while True:\n        k = i * (i + 2)\n        if k > n:\n            return j * (j + 2)\n        i = j\n        j += 2\n\n\nprint(larger_square(268))"
  },
  {
    "example_id": 692,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "first_term = 8 - 2\nprint(first_term)"
  },
  {
    "example_id": 693,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "perimeter = 6 + 15 + 15 + 6\nprint(perimeter)"
  },
  {
    "example_id": 694,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "from sympy import sqrt\n\na, b, c = 1, 1, 1\n\nx = (a + sqrt(b)) / c\ny = (a - sqrt(b)) / c\n\nx_sol = x.expand()\ny_sol = y.expand()\n\nprint(x_sol.as_numer_denom())\nprint(y_sol.as_numer_denom())\n\nabc = x_sol.as_numer_denom()[0] * y_sol.as_numer_denom()[0]\nprint(abc)"
  },
  {
    "example_id": 695,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a = 1\nb = -8\nc = 49\nprint(a * b)"
  },
  {
    "example_id": 696,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "224.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "A, B, C = 3, 1, 5\nAC = A*C\nprint((AC)**2 - B)"
  },
  {
    "example_id": 697,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(max([6, 8, 3, 5, 4, 2]))"
  },
  {
    "example_id": 698,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "counting_numbers = [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11, 12, 13, 14, 15, 20, 19, 18, 17, 16]\ncolumn_E = counting_numbers[4]\nprint(column_E)"
  },
  {
    "example_id": 699,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt, ceil, floor\nprint(ceil(sqrt(27)) - floor(sqrt(26)))"
  },
  {
    "example_id": 700,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "4.0",
      "0.5"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import numpy as np\n\ndef f(x):\n    return a * x**2 + b * x + c\n\ndef f_prime(x):\n    return 2 * a * x + b\n\ndef f_second_prime(x):\n    return 2 * a\n\n# vertex of the parabola\nx_vertex = 2\ny_vertex = 3\n\n# point on the parabola\nx_point = 4\ny_point = 4\n\n# find the coefficients\na = (y_point - y_vertex) / (x_point - x_vertex)**2\nb = (x_point * y_vertex - x_vertex * y_point) / (x_point - x_vertex)**2\nc = y_vertex - a * x_vertex**2 - b * x_vertex\n\n# find y when x = 6\nprint(f(6))\n\n# find the first and second derivatives\nprint(f_prime(6))\nprint(f_second_prime(6))"
  },
  {
    "example_id": 701,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "def f(x):\n    return (x**2 + 2*x + 3)/x\n\ndef g(x):\n    return x**3 + 2\n\nprint(g(f(-3)))"
  },
  {
    "example_id": 702,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.8"
    ],
    "annotated_answers": [
      "96.8"
    ],
    "solution": "feet_per_second = 66 * 88 / 60\nprint(feet_per_second)"
  },
  {
    "example_id": 703,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "distance = 9 * 12\nprint(distance)"
  },
  {
    "example_id": 704,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import numpy as np\nx = np.linalg.solve([[3, 1], [1, 2]], [1, -13])\nprint(x)"
  },
  {
    "example_id": 705,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "6031.0",
      "3.0"
    ],
    "annotated_answers": [
      "2010.0"
    ],
    "solution": "from sympy import symbols, solve, exp, log\nx = symbols('x')\nsol = solve(exp(x) + 3*exp(2*x) + 3*exp(x) + 1 - 2010, x)\nprint(sol[0])"
  },
  {
    "example_id": 706,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "new_volume = 1.835\nold_volume = 3.67\npressure = 4\n\nnew_pressure = pressure / (old_volume / new_volume)\nprint(new_pressure)"
  },
  {
    "example_id": 707,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "71.0",
      "5.0",
      "-16.0",
      "5.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\neq1 = 3*x - 7*y - 65\neq2 = x + y - 7 - 4\nsol = sympy.solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 708,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "x = 1\nprint(x)"
  },
  {
    "example_id": 709,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "-40.0"
    ],
    "solution": ""
  },
  {
    "example_id": 710,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "degrees_per_day = 360\ndegrees_per_hour = degrees_per_day / 24\nprint(degrees_per_hour)"
  },
  {
    "example_id": 711,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "smallest = (49 - 7) / 2\nprint(smallest)"
  },
  {
    "example_id": 712,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(pow(2**3, 4/3))"
  },
  {
    "example_id": 713,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 714,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "print(1 - 2 * (1/2))"
  },
  {
    "example_id": 715,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "tours_per_day = 20 / 2\nprint(tours_per_day)"
  },
  {
    "example_id": 716,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "third = 2 + 3\nsixth = 2 + 5\nfourth = 2 + 3 - 2\nprint(fourth)"
  },
  {
    "example_id": 717,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x = 243 / 81\ny = x * 3\nprint(x + y)"
  },
  {
    "example_id": 718,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x y')\n\na, b = sympy.symbols('a b', real=True)\n\nAB = sympy.sqrt(a**2 + b**2)\n\n# y = 3x^2 - 5x - 3\n# y = 3x^2 - 5x - 3\n# y = 3(x^2 - 5x/3 - 1/9)\n\n# y = 3(x - 5/3)^2 - 1/9\n\n# AB^2 = (x - 5/3)^2 + (y - 3/9)^2\n\n# AB^2 = (x - 5/3)^2 + (3x^2 - 5x - 3 - 3/9)^2\n\n# AB^2 = x^2 - 10x/3 + 25/9 + 9x^2 - 15x + 9 - 3/9\n\n# AB^2 = 9x^2 - 20x + 25\n\n# AB^2 = (3x - 5)^2\n\nprint(AB**2)"
  },
  {
    "example_id": 719,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "flicks_in_flock = 8\nflecks_in_flock = 6\nflicks = 12\nflecks = flicks * flicks_in_flock / flecks_in_flock\nprint(flecks)"
  },
  {
    "example_id": 720,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 3**2\nprint(x)"
  },
  {
    "example_id": 721,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\n\na = sympy.Symbol('a')\n\nx = sympy.Symbol('x')\n\nf = x**2 + a\ng = a * x\n\nintersections = sympy.solve([f-g, f+g], [a, x])\n\nprint(intersections)"
  },
  {
    "example_id": 722,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "A = 10\nB = 1\nprint(A*B + B)"
  },
  {
    "example_id": 723,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "y = 12 - 6\nprint(y)"
  },
  {
    "example_id": 724,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "r = 15.5 - 15\nprint(r)"
  },
  {
    "example_id": 725,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# x = 0 + (9 - 0) * 1/3 = 3\n# y = 0 + (6 - 0) * 1/3 = 2\nprint(3 + 2)"
  },
  {
    "example_id": 726,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(36 // 7)"
  },
  {
    "example_id": 727,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "r = 4\nprint(r)"
  },
  {
    "example_id": 728,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a, b, c = 10, 1, 5"
  },
  {
    "example_id": 729,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\n\nx, y, D, E, F = sympy.symbols(\"x y D E F\")\n\n# Circle with center at (0, -1) and radius 7\neq1 = x**2 + (y + 1)**2 + D + E + F\n\n# Circle with center at (-3, 2) and radius 2.83\neq2 = (x + 3)**2 + (y - 2)**2 + D + E + F\n\n# Find the coefficients\nsol = sympy.solve([eq1, eq2])\n\nprint(sol)"
  },
  {
    "example_id": 730,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def f(x): return x + 1\ndef g(x): return 2 * x\n\nf_inv = lambda x: x - 1\ng_inv = lambda x: x / 2\n\ndef solve(f, g, f_inv, g_inv):\n    return f(g_inv(f_inv(f_inv(g(f(5))))))\n\nprint(solve(f, g, f_inv, g_inv))"
  },
  {
    "example_id": 731,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "f = lambda x: x**3 - 8\nf_inv = lambda y: (y + 8)**(1/3)\nprint(f_inv(f(f_inv(19))))"
  },
  {
    "example_id": 732,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "s = 3**2 - 2**3 + 1\nt = 2 * s - s**2\nprint(t)"
  },
  {
    "example_id": 733,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.666666666666666"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "j = 16/21 * 14\nprint(j)"
  },
  {
    "example_id": 734,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nf = x**2 + 9\nf_1 = 3*x - 8\nsol = solve([f == 10, f_1 == 10], x)\nprint(sum(sol))"
  },
  {
    "example_id": 735,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def count_arithmetic_sequences(n, d, m):\n    count = 0\n    for i in range(1, n):\n        if i % d == 0 and i + d < n and (i + d) % m == 0:\n            count += 1\n    return count\n\nn = 99\nd = 10\nm = 100\nprint(count_arithmetic_sequences(n, d, m))"
  },
  {
    "example_id": 736,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "bride_age = 51 // 2\ngroom_age = bride_age + 15\nprint(groom_age)"
  },
  {
    "example_id": 737,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.66666666666667"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "slope = (365 - 3) / (4 - 1)\nprint(slope)"
  },
  {
    "example_id": 738,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\n\nn = 28\nm = sympy.Symbol('m', integer=True)\nx = sympy.Symbol('x', positive=True)\n\npolynomials = sympy.Poly(x**2 + m*x + n, x).all_monoms()\n\ncount = 0\nfor p in polynomials:\n    if p[0] > 1:\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 739,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def f(x):\n    return 3 * f(2 * x) + 1\n\npoint = (4, 7)\nprint(point[0] + point[1])"
  },
  {
    "example_id": 740,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "def f(x):\n    return x**2 - 7\n\ndef minimum_y(x):\n    return f(x)\n\nprint(minimum_y(0))"
  },
  {
    "example_id": 741,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f = lambda x: 5*x+3\ng = lambda x: x**2-2\nprint(g(f(-1)))"
  },
  {
    "example_id": 742,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.111111111111114"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "representatives_7th = 520 / 18\nrepresentatives_8th = 650 / 18\nprint(representatives_8th)"
  },
  {
    "example_id": 743,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.4377516497364",
      "5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import sympy\nprint(sympy.log(1/625, 5))"
  },
  {
    "example_id": 744,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sqrt\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef greatest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(int(sqrt(n)), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef sum_of_arithmetic_sequence(n):\n    return (n * (n + 1)) // 2\n\ndef solution(n):\n    return greatest_prime_factor(sum_of_arithmetic_sequence(n))\n\nprint(solution(80))"
  },
  {
    "example_id": 745,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "expr = (7+8+9) * (6+9+12) / (2+3+4) / (9+8+7)\nprint(expr)"
  },
  {
    "example_id": 746,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "num_cookies = 10 * 12 / 20\nprint(num_cookies)"
  },
  {
    "example_id": 747,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "9.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "-4.0",
      "3.0",
      "3.0",
      "12.0",
      "3.0",
      "2.0",
      "36.0",
      "3.0",
      "27.0",
      "2.0",
      "3.0",
      "2.0",
      "18.0",
      "3.0",
      "27.0",
      "3.0",
      "2.0",
      "9.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "-4.0",
      "3.0",
      "3.0",
      "12.0",
      "3.0",
      "2.0",
      "36.0",
      "3.0",
      "27.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "9.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "-4.0",
      "3.0",
      "3.0",
      "12.0",
      "3.0",
      "2.0",
      "36.0",
      "3.0",
      "27.0",
      "2.0",
      "3.0",
      "2.0",
      "18.0",
      "3.0",
      "27.0",
      "3.0",
      "2.0",
      "9.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "-4.0",
      "3.0",
      "3.0",
      "12.0",
      "3.0",
      "2.0",
      "36.0",
      "3.0",
      "27.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import sympy\n\nside_1, side_2, side_3 = sympy.symbols('side_1 side_2 side_3')\n\n# Volume of prism\nV = side_1 * side_2 * side_3\n\n# Surface area of prism\nS = 2 * (side_1 * side_2 + side_1 * side_3 + side_2 * side_3)\n\n# Expressions of the volume and surface area in terms of side lengths\nexpr_V = V - 3 ** 3\nexpr_S = S - 2 * 3 * 3 * 2\n\n# Solve the system of equations\nsol = sympy.solve((expr_V, expr_S), (side_1, side_2, side_3))\n\n# Print the solution\nprint(sol)"
  },
  {
    "example_id": 748,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0",
      "-7.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "from sympy import isprime\nfor x in range(-100, 100):\n    if isprime(abs(x**2 - 16)):\n        print(x**2 - 16)"
  },
  {
    "example_id": 749,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "b = 10\nc = b + 3\na = b - 6\nprint(c)"
  },
  {
    "example_id": 750,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6.0",
      "9.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\neq = 3**(x+8) - 9**(x+3)\nprint(eq.simplify())"
  },
  {
    "example_id": 751,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "print((7+5)**2 - (7-5)**2)"
  },
  {
    "example_id": 752,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "print(5*1)"
  },
  {
    "example_id": 753,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "7.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import sympy as sp\nx, y, z = sp.symbols('x y z')\na = sp.log(x) - sp.log(y) - sp.log(y) + sp.log(z) - sp.log(x) - 7\nprint(a)"
  },
  {
    "example_id": 754,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def f(x):\n    return x**2 - 8*x + 15\n\nx = 0\ny = f(x)\n\nprint(y)"
  },
  {
    "example_id": 755,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "from sympy import sqrt\nprint(sqrt(1000000) - sqrt(1000000, 3))"
  },
  {
    "example_id": 756,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "y = 15\nx = 24\nx_3 = 3**2\nprint(x_3)"
  },
  {
    "example_id": 757,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def revenue(p):\n    return 128 - 4 * p\n\ndef maximize_revenue():\n    return 32\n\nprint(maximize_revenue())"
  },
  {
    "example_id": 758,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nf = 3 - x\nf_inv = solve(f - 0, x)[0]\nf_inv_6 = solve(f - 6, x)[0]\nprint(f_inv + f_inv_6)"
  },
  {
    "example_id": 759,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "def f(x):\n    return 2 * x + 1\n\ndef g(x):\n    return f(2 * x) - 3\n\nprint(g(g(2)))"
  },
  {
    "example_id": 760,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\ny = -2\nprint(x**2 * y)"
  },
  {
    "example_id": 761,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import simplify\n\nexpr = (3 - 1j) * (6 + 2*1j)\nprint(simplify(expr))"
  },
  {
    "example_id": 762,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nsolutions = solve(x**2 - x - 6, x)\nprint(solutions[0] * solutions[1])"
  },
  {
    "example_id": 763,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Symbol, solve, diff\n\nx = Symbol('x')\nf = diff(x**3 - 4*x**2 + 7*x - 6, x)\nfx_max = solve(f, x)[0]\nprint(fx_max)"
  },
  {
    "example_id": 764,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\n\n# Define symbols\nx, y, z = sympy.symbols('x y z')\n\n# Expressions\nexpr1 = 4 * x + 6 * y + z\nexpr2 = 6 * x + 2 * y - z\nexpr3 = x + y + z\n\n# Solve system of equations\nsolutions = sympy.solve([expr1, expr2, expr3], [x, y, z])\n\n# Print solution\nprint(solutions)"
  },
  {
    "example_id": 765,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "A = 2\nB = 1\nA - B"
  },
  {
    "example_id": 766,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "print(7 * 10 * 21 // 30)"
  },
  {
    "example_id": 767,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "99940009.0"
    ],
    "annotated_answers": [
      "99940009.0"
    ],
    "solution": "print(9997**2)"
  },
  {
    "example_id": 768,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2235.0"
    ],
    "annotated_answers": [
      "2107.0"
    ],
    "solution": "sum = 0\nfor i in range(100, 200, 7):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 769,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1727.0",
      "24.0",
      "3.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "import sympy as sym\nk = (12*sym.sqrt(12))**2 - 12*sym.sqrt(12) - 1\nprint(k)"
  },
  {
    "example_id": 770,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "# Common difference is negative\ncommon_diff = -210 / 15\nprint(common_diff)"
  },
  {
    "example_id": 771,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "7.0",
      "21.0",
      "35.0",
      "32.0",
      "12.0",
      "-2.0",
      "0.0"
    ],
    "annotated_answers": [
      "106.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nf = x**7 - 3*x**3 + 2\ng = f.subs(x, x + 1)\nprint(sp.poly(g).all_coeffs())"
  },
  {
    "example_id": 772,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "256.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "def f(x):\n    return 2**x\n\ndef sqrt(x):\n    return x**0.5\n\nprint(sqrt(f(f(f(f(1))))))"
  },
  {
    "example_id": 773,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "from math import sqrt\nx = (5 + sqrt(35)) / 3\nprint(int(x))"
  },
  {
    "example_id": 774,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((6+5)*(6-5))"
  },
  {
    "example_id": 775,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(int(round(-7/4)))"
  },
  {
    "example_id": 776,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = -5\ny = 5\nz = 3\nprint(x + y + z)"
  },
  {
    "example_id": 777,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1736.0"
    ],
    "solution": "def f(x):\n    return x**2 - 8\n\ndef g(x):\n    return -5*x + 44\n\n# find distinct solutions\nx_values = set()\nfor x in range(100):\n    if f(x) == 0:\n        x_values.add(x)\n    if g(x) == 0:\n        x_values.add(x)\n\n# find y-coordinates\ny_values = []\nfor x in x_values:\n    y_values.append(f(x))\n    y_values.append(g(x))\n\n# product\nproduct = 1\nfor y in y_values:\n    product *= y\nprint(product)"
  },
  {
    "example_id": 778,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nsolutions = solve(9*x/13 + 13/9*x - 250/117*x, x)\nprint(sum(solutions))"
  },
  {
    "example_id": 779,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\n\ndef abs(x):\n    return math.fabs(x)\n\ndef distance(x, y):\n    return abs(x - y)\n\ndef is_in_range(x):\n    return distance(x, 2) <= 5.6\n\ndef count_integers(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_in_range(i):\n            count += 1\n    return count\n\nprint(count_integers(1, 100))"
  },
  {
    "example_id": 780,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nn = sympy.Symbol('n')\np = n**2 - 3*n + 2\nsol = sympy.solve(p, n)\nprint(sol)"
  },
  {
    "example_id": 781,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "181.0"
    ],
    "annotated_answers": [
      "181.0"
    ],
    "solution": "print(3*7**2+5*7-1)"
  },
  {
    "example_id": 782,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, solve, pprint\n\nx = Symbol('x')\ny = Symbol('y')\n\nf = x - y**2 + 4*y - 1\n\nprint(f)\n\npprint(solve(f, y))"
  },
  {
    "example_id": 783,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "b = -4 - 36 / -4\nprint(b)"
  },
  {
    "example_id": 784,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "3.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "0.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "3.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "3.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "0.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "3.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "3.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "0.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "3.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "3.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "0.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "3.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "216.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "6.0",
      "2.0",
      "12.0",
      "4.0",
      "3.0",
      "27.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0",
      "108.0",
      "-3.0",
      "2.0",
      "8.0",
      "-3.0",
      "4.0",
      "256.0",
      "3.0",
      "16.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "16.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "9901.0"
    ],
    "solution": "print(99**2 + 99 + 1)"
  },
  {
    "example_id": 785,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\n\n# Define the equation\neq = x - 1 - x / (1 + x)\n\n# Solve the equation\nsol = sympy.solve(eq, x)\n\n# Print the solution\nprint(sol)"
  },
  {
    "example_id": 786,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "N = 121 // 2 + 1\nprint(N)"
  },
  {
    "example_id": 787,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "x = 3\ny = 2\nx3 = x**3\ny3 = y**3\nprint(x3 - y3)"
  },
  {
    "example_id": 788,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "168.99999999999991"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "print((13 ** (1/3)) ** 6)"
  },
  {
    "example_id": 789,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "A = 19 - 2 - 4\nprint(A)"
  },
  {
    "example_id": 790,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "original_set = [1, 2, 3, 4]\nnew_set = [2, 4, 6, 8]\nsum_original = sum(original_set)\nsum_new = sum(new_set)\nprint(sum_new - sum_original)"
  },
  {
    "example_id": 791,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 3\nb = 2\nf = lambda x: ax + b\nf_inv = lambda y: (y - b) / a\ng = lambda x: 2 * f_inv(x)\nprint((a + b) / 2)"
  },
  {
    "example_id": 792,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "156.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "red_cards_in_pile_b = 26 * 6\nprint(red_cards_in_pile_b)"
  },
  {
    "example_id": 793,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.7333333333333334"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7 / 3\ny = 7 / 5\nprint(x + y)"
  },
  {
    "example_id": 794,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Eric's polynomial\na = 1\nb = 4\nc = 3\n\n# Charles's polynomial\na_ = 2\nb_ = 5\nc_ = 7\n\n# Discrminant of Eric's polynomial\nd_1 = b**2 - 4 * a * c\n\n# Discrminant of Charles's polynomial\nd_2 = b_**2 - 4 * a_ * c_\n\n# Ratio of discriminants\nratio = d_1 / d_2\n\n# Ratio of constant terms\nconstant_ratio = c_ / c\n\n# Sum of constant terms\nsum = c + c_\n\nprint(sum)"
  },
  {
    "example_id": 795,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2736.0"
    ],
    "annotated_answers": [
      "369.0"
    ],
    "solution": "perimeter = 54\narea = 180\ndiagonal = (perimeter**2 - area)**0.5\nprint(diagonal**2)"
  },
  {
    "example_id": 796,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "# If t is the number of tickets bought in bulk at one time,\n# then the total cost is t * 70 + (t-60) * 69\n# The largest t which will bring the amusement park a profit greater than $4200\n# is when the total cost is at least $4200.\n# Therefore, t = 60.\nprint(60)"
  },
  {
    "example_id": 797,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "def sum_subset(subset):\n    return sum(subset)\n\ndef sum_subsets(subsets):\n    return sum(map(sum_subset, subsets))\n\nsubsets = [[1, 2], [1, 3], [1, 4], [1, 5], [1, 6],\n           [2, 3], [2, 4], [2, 5], [2, 6],\n           [3, 4], [3, 5], [3, 6],\n           [4, 5], [4, 6],\n           [5, 6]]\n\nprint(sum_subsets(subsets))"
  },
  {
    "example_id": 798,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "9.0",
      "8.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\ny = sympy.sqrt(x)\nz = sympy.sqrt(y)\na = sympy.sqrt(z)\nb = 7\nc = a**3\nd = x*y\ne = d/c\nf = b/e\nprint(f)"
  },
  {
    "example_id": 799,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x, y = 2, 9\nx_neg, y_neg = -x, -y\nprint(x_neg + x, y_neg + y)"
  },
  {
    "example_id": 800,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\n\ndef f(x):\n    return x**2 - 2*x + 1\n\ndef g(x):\n    return sqrt(2*x + 1)\n\nprint(f(g(4)) - g(f(3)))"
  },
  {
    "example_id": 801,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n = 2*2 - 3\nprint(n)"
  },
  {
    "example_id": 802,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-0.25"
    ],
    "solution": "a = -1\nprint(a)"
  },
  {
    "example_id": 803,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "x = 7\ny = 3\nfriend_x = x - 4\nfriend_y = 2 * y - 1\nfriend_product = friend_x * friend_y + 1\nmy_product = x * y\nprint(my_product)"
  },
  {
    "example_id": 804,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print(9 + 2)"
  },
  {
    "example_id": 805,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.5"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "height = 16\ndistance = 0\nfor i in range(6):\n    distance += height\n    height /= 2\nprint(distance)"
  },
  {
    "example_id": 806,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "difference = 3 * (20 - 20)\nprint(difference)"
  },
  {
    "example_id": 807,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = 5\nb = 3\nprint(a + 5 * b)"
  },
  {
    "example_id": 808,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 5**2\nprint(x)"
  },
  {
    "example_id": 809,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-18.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 4\nb = 3\nnum = (a+11*b)/(a-b)\nden = a-2*b\n\nprint(num/den)"
  },
  {
    "example_id": 810,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = -2 + 6\ny = 1 - 6\nprint(x + y)"
  },
  {
    "example_id": 811,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "7.0",
      "3.0",
      "7.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nb = sp.Symbol('b')\nm = sp.Symbol('m')\nquadratic = (x + m)**2 - 63\nsol = sp.solve(quadratic, x)\nprint(sol)"
  },
  {
    "example_id": 812,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "6.0",
      "49.0",
      "12.0",
      "6.0",
      "49.0",
      "12.0",
      "6.0",
      "7.0",
      "6.0",
      "49.0",
      "12.0",
      "6.0",
      "7.0",
      "6.0",
      "49.0",
      "12.0",
      "6.0",
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nc = Symbol('c')\nroots = solve((3*x**2 + 7*x + c)*(3*x**2 - 7*x + c), x)\nprint(roots)"
  },
  {
    "example_id": 813,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x = 3 + 1\ny = 9 + 2\nprint(x + y)"
  },
  {
    "example_id": 814,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "156.0"
    ],
    "solution": "40 ** 2 + 164 - (40 ** 2 - 164)"
  },
  {
    "example_id": 815,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "b = 1 - 3 * 1**4 + 7 * 1**3 - 2 * 1**2\nprint(b)"
  },
  {
    "example_id": 816,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "distance = ((-8)**2 + 6**2)**(1/2)\nprint(distance)"
  },
  {
    "example_id": 817,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "5.0",
      "-3.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 2\na = 1\nk = 5\nh = -3\nprint(x, a, k, h)"
  },
  {
    "example_id": 818,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\na = int(math.sqrt(1 + 8 * 4))\nprint(a)"
  },
  {
    "example_id": 819,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "for x in range(1, 11):\n    if x**2 + 4*x + 4 < 20:\n        print(x)"
  },
  {
    "example_id": 820,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# The sum of five consecutive integers is five.\n# What is the product of the five integers?\n# The product of the five consecutive integers is 120.\nprint(120)"
  },
  {
    "example_id": 821,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-392.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "age_now = 56 - (8 * 56)\nprint(age_now)"
  },
  {
    "example_id": 822,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "b = -18 / (2*2)\nprint(b)"
  },
  {
    "example_id": 823,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "83.0",
      "93.0",
      "440.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 88 - 5\nb = 88 + 5\nc = 88 * 5\nprint(a, b, c)"
  },
  {
    "example_id": 824,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "y_intercept = -3\nslope = 1/2\nx = 2\ny = slope * x + y_intercept\nprint(y)"
  },
  {
    "example_id": 825,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = (18 + 5*20)/(5*20)\nprint(round(x))\nx = (18 + 5*20)/(5*20)\nprint(round(x))\nprint(round(x)*round(x))"
  },
  {
    "example_id": 826,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-36.0"
    ],
    "solution": "y = 6\nprint(y)"
  },
  {
    "example_id": 827,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.142857142857143"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7\nreciprocal = 1 / x\nprint(x + reciprocal)"
  },
  {
    "example_id": 828,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(6 - 6)"
  },
  {
    "example_id": 829,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.4"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(144 / 10)"
  },
  {
    "example_id": 830,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\nprint(math.log(64, 2))"
  },
  {
    "example_id": 831,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def f(n):\n    return n**2 + n + 17\n\nprint(f(10) - f(9))"
  },
  {
    "example_id": 832,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print(2**3 + 4)"
  },
  {
    "example_id": 833,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "b = 5 - 2\nprint(b)"
  },
  {
    "example_id": 834,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.8982444017039275"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nx = math.log(1080, 6) - 1\nprint(x)"
  },
  {
    "example_id": 835,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "degree_p = 7\ndegree_q = 7\ndegree_product = degree_p + degree_q\nprint(degree_product)"
  },
  {
    "example_id": 836,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.2"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = (8-10)/(2-1)\ny = 2*x - 10\na = 7 + (9-7)*x/10\nb = 8 + (0-8)*x/10\nprint(a+b)"
  },
  {
    "example_id": 837,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "672.0"
    ],
    "annotated_answers": [
      "672.0"
    ],
    "solution": "import math\n\ninitial_amount = 500\nrate_per_year = 0.03\nyears = 10\n\ntotal_amount = initial_amount * math.pow((1 + rate_per_year), years)\nprint(round(total_amount))"
  },
  {
    "example_id": 838,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "total_cars = sum(range(1, 13))\nprint(total_cars)"
  },
  {
    "example_id": 839,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-39.0"
    ],
    "annotated_answers": [
      "-39.0"
    ],
    "solution": "a = -1\nb = 5\nprint(-a-b**2+3*a*b)"
  },
  {
    "example_id": 840,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "m = 15 - n\nprint(m)"
  },
  {
    "example_id": 841,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "-150.0"
    ],
    "solution": "# find a, b, c\na = 6\nb = 12\nc = -8\n\n# find x\nx = -b/(2*a)\n\n# find k\nk = a*x**2 + b*x + c\nprint(k)"
  },
  {
    "example_id": 842,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "from math import factorial\nprint(factorial(3) * (2 ** 3 + 3) / 2)"
  },
  {
    "example_id": 843,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# The number of new cans made from 125 cans is 125 / 5 = 25\nprint(25)"
  },
  {
    "example_id": 844,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.599999999999994"
    ],
    "annotated_answers": [
      "22.8"
    ],
    "solution": "blue_box_weight = 3 * 15.2\nprint(blue_box_weight)"
  },
  {
    "example_id": 845,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "63.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nx = Symbol('x', real=True)\na = Symbol('a', nonnegative=True)\nb = Symbol('b', nonnegative=True)\n\nexpr = x**2 + 18*x - 63\n\nsol = solve(expr - (x - a)*(x + b), b)\n\nprint(sol)"
  },
  {
    "example_id": 846,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from sympy import *\nx = symbols(\"x\")\nprint(x**2 + 2*x*(5-x) + (5-x)**2)"
  },
  {
    "example_id": 847,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.00000000000004"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "f = lambda c: 3/(2*c-3)\nf_inv = lambda c: 2*c+3/3\nc_1 = f_inv(f(3))\nc_2 = f_inv(f(7))\nprint(c_1*f(c_1) + c_2*f(c_2))"
  },
  {
    "example_id": 848,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.01234567901234"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "x = 3\nprint(x**4 + 1/x**4)"
  },
  {
    "example_id": 849,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "num_criminals = 6\ntime_hours = 4.5\nnum_criminals_4_5_hours = time_hours * num_criminals\nprint(num_criminals_4_5_hours)"
  },
  {
    "example_id": 850,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(24-(2*4-3))"
  },
  {
    "example_id": 851,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "x = 1\ny = 2\nx_plus_y = x + y\nprint(x_plus_y)"
  },
  {
    "example_id": 852,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "# The number of square units in the perimeter is\n# 3 times the number of units in the perimeter\n# The number of units in the perimeter is\n# 2 times the length of the rectangle\n# The smallest possible length for the perimeter is\n# 2 times the smallest possible length for the perimeter\nprint(2 * 2)"
  },
  {
    "example_id": 853,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1108809.0",
      "1053.0",
      "-1053.0",
      "1053.0",
      "1053.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy as sp\n\na, b, c = sp.symbols('a b c')\n\n# given\nc = 1053\n\n# formula for geometric sequence\na = b * c / (c - b)\n\n# solve for b\nb = c * a / (c - a)\n\nprint(b)"
  },
  {
    "example_id": 854,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def y(x):\n    return 0.5*x**2 - 9\n\ndef f(x):\n    return y(x) - 0\n\nfrom scipy.optimize import fsolve\n\nx0 = 1\nx = fsolve(f, x0)\n\na = x\na_squared = a**2\nprint(a_squared)"
  },
  {
    "example_id": 855,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "2000.0"
    ],
    "solution": "daily_calories = 40 * 2 / 100\nprint(daily_calories)"
  },
  {
    "example_id": 856,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# The first term of the first sequence is 0\n# The second term of the first sequence is the first term of the second sequence\n# The third term of the first sequence is the second term of the second sequence\n\n# The first term of the second sequence is 3\n# The second term of the second sequence is 3 + 1\n# The third term of the second sequence is 3 + 1 + 1\n\n# The fifth term of the second sequence is 3\n# The fifth term of the first sequence is 3 + 3 + 1 + 1\nprint(5 + 3)"
  },
  {
    "example_id": 857,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "136.0"
    ],
    "solution": "sum = 25\ndiff = 9\nproduct = sum - diff\nprint(product)"
  },
  {
    "example_id": 858,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "f_inv = sympy.functions.elementary.exponential.exp(1)\nf = sympy.functions.elementary.exponential.log(1)\nprint(f(f(f_inv)) - f_inv)"
  },
  {
    "example_id": 859,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.111111111111111",
      "0.0123456790123457",
      "0.111111111111111",
      "0.111111111111111",
      "0.0123456790123457"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\nexprs = [3**(-2), 9**(-2), 27**(-2/3), 9*81**(-1), 243**(-4/5)]\nprint([sp.simplify(e) for e in exprs])"
  },
  {
    "example_id": 860,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "2.0",
      "1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "y = 15.5 - 1\nprint(y)"
  },
  {
    "example_id": 861,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import sympy\n\n# Solve the equation x^2 + mx + (m+n) = 0 for x\nx = sympy.symbols('x')\nm = sympy.symbols('m')\nn = sympy.symbols('n')\n\neq = x**2 + m*x + (m+n)\nsol = sympy.solve(eq, x)\nprint(sol)\n\n# Find the value of n\nn = (m+n) - m - sol[0]\nprint(n)"
  },
  {
    "example_id": 862,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(int(pow(7/4, 2)))"
  },
  {
    "example_id": 863,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "18.0",
      "1.0",
      "16.0",
      "2.0",
      "14.0",
      "3.0",
      "12.0",
      "4.0",
      "10.0",
      "5.0",
      "8.0",
      "6.0",
      "6.0",
      "7.0",
      "4.0",
      "8.0",
      "2.0",
      "9.0",
      "0.0",
      "10.0",
      "-2.0",
      "11.0",
      "-4.0",
      "12.0",
      "-6.0",
      "13.0",
      "-8.0",
      "14.0",
      "-10.0",
      "15.0",
      "-12.0",
      "16.0",
      "-14.0",
      "17.0",
      "-16.0",
      "18.0",
      "-18.0",
      "19.0",
      "-20.0",
      "20.0",
      "-22.0",
      "21.0",
      "-24.0",
      "22.0",
      "-26.0",
      "23.0",
      "-28.0",
      "24.0",
      "-30.0",
      "25.0",
      "-32.0",
      "26.0",
      "-34.0",
      "27.0",
      "-36.0",
      "28.0",
      "-38.0",
      "29.0",
      "-40.0",
      "30.0",
      "-42.0",
      "31.0",
      "-44.0",
      "32.0",
      "-46.0",
      "33.0",
      "-48.0",
      "34.0",
      "-50.0",
      "35.0",
      "-52.0",
      "36.0",
      "-54.0",
      "37.0",
      "-56.0",
      "38.0",
      "-58.0",
      "39.0",
      "-60.0",
      "40.0",
      "-62.0",
      "41.0",
      "-64.0",
      "42.0",
      "-66.0",
      "43.0",
      "-68.0",
      "44.0",
      "-70.0",
      "45.0",
      "-72.0",
      "46.0",
      "-74.0",
      "47.0",
      "-76.0",
      "48.0",
      "-78.0",
      "49.0",
      "-80.0",
      "50.0",
      "-82.0",
      "51.0",
      "-84.0",
      "52.0",
      "-86.0",
      "53.0",
      "-88.0",
      "54.0",
      "-90.0",
      "55.0",
      "-92.0",
      "56.0",
      "-94.0",
      "57.0",
      "-96.0",
      "58.0",
      "-98.0",
      "59.0",
      "-100.0",
      "60.0",
      "-102.0",
      "61.0",
      "-104.0",
      "62.0",
      "-106.0",
      "63.0",
      "-108.0",
      "64.0",
      "-110.0",
      "65.0",
      "-112.0",
      "66.0",
      "-114.0",
      "67.0",
      "-116.0",
      "68.0",
      "-118.0",
      "69.0",
      "-120.0",
      "70.0",
      "-122.0",
      "71.0",
      "-124.0",
      "72.0",
      "-126.0",
      "73.0",
      "-128.0",
      "74.0",
      "-130.0",
      "75.0",
      "-132.0",
      "76.0",
      "-134.0",
      "77.0",
      "-136.0",
      "78.0",
      "-138.0",
      "79.0",
      "-140.0",
      "80.0",
      "-142.0",
      "81.0",
      "-144.0",
      "82.0",
      "-146.0",
      "83.0",
      "-148.0",
      "84.0",
      "-150.0",
      "85.0",
      "-152.0",
      "86.0",
      "-154.0",
      "87.0",
      "-156.0",
      "88.0",
      "-158.0",
      "89.0",
      "-160.0",
      "90.0",
      "-162.0",
      "91.0",
      "-164.0",
      "92.0",
      "-166.0",
      "93.0",
      "-168.0",
      "94.0",
      "-170.0",
      "95.0",
      "-172.0",
      "96.0",
      "-174.0",
      "97.0",
      "-176.0",
      "98.0",
      "-178.0",
      "99.0",
      "-180.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 0\nwhile x < 100:\n    y = -2 * x + 18\n    if y % 1 == 0:\n        print(f\"({x}, {y})\")\n    x += 1"
  },
  {
    "example_id": 864,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "susan_cost = 4 * 20\npam_cost = 5 * 20 * 0.7\nprint(pam_cost - susan_cost)"
  },
  {
    "example_id": 865,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy as sp\n\nk = sp.Symbol('k')\nx = sp.Symbol('x')\n\neq = k*x**2 + 10*x + k\n\nrational_solutions = sp.solveset(eq, x)\nprint(rational_solutions)"
  },
  {
    "example_id": 866,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "max_domain = 9\nprint(max_domain)"
  },
  {
    "example_id": 867,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "perimeter = 12\narea = perimeter ** 2\nprint(area)"
  },
  {
    "example_id": 868,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "regular_packs = 166 // 4\nprint(regular_packs)"
  },
  {
    "example_id": 869,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import *\nh = lambda x: sqrt((x**3 + 72) / 2) + 1\nprint(h(6))"
  },
  {
    "example_id": 870,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.03891943359375"
    ],
    "annotated_answers": [
      "1160.0"
    ],
    "solution": "import numpy as np\n\n# Annual interest rate\nr = 0.075\n# Time in years\nt = 2 / 4\n\n# Total interest earned\ninterest = r * t\n# Total interest earned in quarterly compounding\nquarterly_interest = interest * np.power(1 + r/4, 4*t)\nprint(quarterly_interest)"
  },
  {
    "example_id": 871,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "110.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "a, b, c = 1, 1, 0\nx_coords = (-3, 1, 0)\ny_coords = (3, 3, 0)\n\ndef parabola_equation(a, b, c, x):\n    return a * x**2 + b * x + c\n\nfor x, y in zip(x_coords, y_coords):\n    if parabola_equation(a, b, c, x) == y:\n        print(x, y)\n\nprint(100 * a + 10 * b + c)"
  },
  {
    "example_id": 872,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "def g(x):\n    return 4 * x ** 2 - 3 * x + 2\n\nprint(g(-3))"
  },
  {
    "example_id": 873,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "2.0",
      "1296.0",
      "18.0",
      "18.0",
      "2.0",
      "1296.0",
      "18.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import sympy as sym\n\nn = sym.Symbol('n')\nx = sym.Symbol('x')\n\neq = 9*x**2 + n*x + 36\nsol = sym.solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 874,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "# find x such that |x + 4| < 9\n# x + 4 is positive\nx = 4\nprint(x)"
  },
  {
    "example_id": 875,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "print(2**6)"
  },
  {
    "example_id": 876,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "pen_cost = 924 / 7\npencil_cost = pen_cost / 11\nprint(pencil_cost)"
  },
  {
    "example_id": 877,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "percentage = 0.5\namount = 200\nresult = percentage * amount * 10\nprint(result)"
  },
  {
    "example_id": 878,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "f_of_q_1 = f(q(1))\nprint(f_of_q_1)\n\nb = f_of_q_1 / q(1)\nprint(b)"
  },
  {
    "example_id": 879,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60000.0"
    ],
    "annotated_answers": [
      "60000.0"
    ],
    "solution": "sum = 0\nfor i in range(501, 701, 2):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 880,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.6"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "pages_first_day = 248 / 5\nprint(pages_first_day)"
  }
]