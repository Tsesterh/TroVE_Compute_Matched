[
  {
    "example_id": 0,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# The first term is 1\n# The third term is 3\n\n# The product of the first and third terms is 5\n# The product of the fourth term and the third term is 15\n\n# The fourth term is 15/3 = 5\nprint(5)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "a = 8 / 4 + 1\nprint(a)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17157.28467878946"
    ],
    "annotated_answers": [
      "268.0"
    ],
    "solution": "from math import pi\n\nsum_area = 0\n\nfor i in range(20):\n    radius = 64 / (2 ** i)\n    area = pi * radius ** 2\n    sum_area += area\n\nprint(sum_area)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7945.0"
    ],
    "annotated_answers": [
      "7945.0"
    ],
    "solution": "rent = 5000\nelectricity_cost = 1.45\ntotal_cost = 16520.25\nelectricity_used = (total_cost - rent) / electricity_cost\nprint(electricity_used)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "flour_per_cake = 1.5\nnum_cake = 5\ntotal_flour = flour_per_cake * num_cake\nprint(total_flour)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "164.0"
    ],
    "solution": "win_ratio = 0.5\nwin_ratio_after = 0.503\nloss = 1 - win_ratio\nloss_after = win_ratio_after - win_ratio\ntotal_matches = loss_after / loss\nprint(int(total_matches))"
  },
  {
    "example_id": 6,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "n1 = 2 * 2\nn2 = 2 * 4\ndifference = (n2 - n1) ** 2\nsum_numbers = n1 + n2\nprint(sum_numbers)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(z / y)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = (12+8)/2\ny = (12-8)/2\nprint(2*x - x*y)"
  },
  {
    "example_id": 9,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "8.0",
      "7.0",
      "4.0",
      "7.0",
      "4.0",
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy as sp\nx, y, K = sp.symbols('x, y, K')\neq1 = 6*x + 4*y - 7\neq2 = K*x + 8*y - 7\nsolution = sp.solve((eq1, eq2))\nprint(solution)"
  },
  {
    "example_id": 10,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "405.0"
    ],
    "annotated_answers": [
      "1545.0"
    ],
    "solution": "total_distance = 0\ndistance = 405\nwhile total_distance < distance:\n    total_distance += distance\n    distance *= 2/3\nprint(total_distance)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.56790123456789"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "x = 1/3\nprint((x-1/x)**4)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "# Common ratio of the original series is m/n\nm, n = 2, 3\n\n# Sum of the original series\nS1 = (m * n) / (m - n)\n\n# Sum of the squared series\nS2 = S1 ** 2\n\n# 16 times the sum of the original series\nS2_target = 16 * S1\n\n# Solve for m+n\nprint((S2_target - S2) / S1)"
  },
  {
    "example_id": 13,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3702.0"
    ],
    "annotated_answers": [
      "3702.0"
    ],
    "solution": "N = 1/3\nprint(int(10*N) + int(100*N) + int(1000*N) + int(10000*N))"
  },
  {
    "example_id": 14,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "count = 0\nfor x in range(-100, 100):\n    for y in range(-100, 100):\n        if (x**2 + y**2) == 25:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "10.0",
      "2.0",
      "6.0",
      "1.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "import sympy\nx, y, c = sympy.symbols('x y c')\ncircle = x**2 - 10*x + y**2 + 6*y + c\nradius = sympy.sqrt(circle)\nsolution = radius - 1\nprint(solution)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "a = 1\nb = 1\nc = -2\nd = 1\n\nprint(a+b+c+d)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# The sum of three consecutive even integers is 66\n# The smallest of the three integers is 2\nprint(2)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "smaller_number = (25 + 11) / 2\nprint(smaller_number)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import sqrt\nprint(sqrt(8 ** 4, 12))"
  },
  {
    "example_id": 20,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2000.0"
    ],
    "annotated_answers": [
      "445.0"
    ],
    "solution": "num_widgets = 1000 / 0.50\nprint(num_widgets)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# 50% of 1/3 of 36\n# = 50% of 12\n# = 6\nprint(6)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.041675524376416"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "x = 7 - 1/7\nprint(x**2 + 1/x**2 + 1)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "max_degree = 7 + 7\nmin_degree = 0\nprint(max(min_degree, max_degree))"
  },
  {
    "example_id": 24,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "x = 2\nprint(x ** (x+1) ** x)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32768.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# First day: 2 cells\n# Second day: 2 * 2 = 4 cells\n# Third day: 4 * 2 = 8 cells\n# Fourth day: 8 * 2 = 16 cells\n# Fifth day: 16 * 2 = 32 cells\n# Sixth day: 32 * 2 = 64 cells\n# Seventh day: 64 * 2 = 128 cells\n# Eighth day: 128 * 2 = 256 cells\n# Ninth day: 256 * 2 = 512 cells\n# Tenth day: 512 * 2 = 1024 cells\n# Eleventh day: 1024 * 2 = 2048 cells\n# Twelfth day: 2048 * 2 = 4096 cells\n# Thirteenth day: 4096 * 2 = 8192 cells\n# Fourteenth day: 8192 * 2 = 16384 cells\n# Fifteenth day: 16384 * 2 = 32768 cells\nprint(32768)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "import math\nprint(math.sqrt(81))"
  },
  {
    "example_id": 27,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1120.0"
    ],
    "annotated_answers": [
      "1120.0"
    ],
    "solution": "print(43**2 - 27**2)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nprint(math.log(27, 3))"
  },
  {
    "example_id": 29,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1374.0"
    ],
    "annotated_answers": [
      "194.0"
    ],
    "solution": "# The formula to find the nth term of an arithmetic sequence is:\n# a1 + (n - 1) * d\n\n# In this case, we know the second and ninth term\n# a1 = 2\n# d = 30 - 2 = 28\n\n# We want to find the fiftieth term\nn = 50\n\n# Use the formula to find the fiftieth term\nfiftieth_term = 2 + (n - 1) * 28\nprint(fiftieth_term)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy\n\ndef sum_of_integers(n):\n    return sum(range(2, n + 1))\n\nprint(sum_of_integers(9))"
  },
  {
    "example_id": 31,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-625.0",
      "-1.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "from sympy import sympify\n\nprint(sympify('(-125)**(4/3)'))"
  },
  {
    "example_id": 32,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": ""
  },
  {
    "example_id": 33,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-5.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "center_x = (7 + (-3)) / 2\ncenter_y = (-6 + (-4)) / 2\nprint(center_x, center_y)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "# f(a) = 1/(1-a)\n# f^{-1}(a) = 1 - 1/a\n# f(f^{-1}(a)) = 1/(1 - (1 - 1/a)) = 1/(1 - 1/a) = f(a)\n# f^{-1}(a) * a * f(a) = (1 - 1/a) * a * (1/(1 - 1/a)) = 1\nprint(1)"
  },
  {
    "example_id": 35,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = 3\nn = 1\nprint(m+n)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol, solve\n\na, b = Symbol('a'), Symbol('b')\n\nx = 2*a*b - 7\n\nprint(1/(a-1) + 1/(b-1))"
  },
  {
    "example_id": 37,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print((9-4j) - (-3-4j))"
  },
  {
    "example_id": 38,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "158.75"
    ],
    "annotated_answers": [
      "-55.0"
    ],
    "solution": "# Find the equation of the parabola\n# The slope of the parabola at point (-1,0) is 0\n# The slope of the parabola at point (0,5) is 5\n# The slope of the parabola at point (5,0) is -5\n# The slope of the parabola is 0 at x = -1\n# The slope of the parabola is 5 at x = 0\n# The slope of the parabola is -5 at x = 5\n# The equation of the parabola is ax^2 + bx + c\n\n# Calculate a, b, and c\na = 5/4\nb = 15/4\nc = -15/4\n\n# Calculate 100a + 10b + c\nprint(100*a + 10*b + c)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = 2\ny = 3\nprint(x+y)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-51.0"
    ],
    "annotated_answers": [
      "103.0"
    ],
    "solution": "second_largest_angle = 129 - 180\nprint(second_largest_angle)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def sqrt(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return n + sqrt(n - n)\n\nprint(sqrt(12))"
  },
  {
    "example_id": 42,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.63858403911275"
    ],
    "annotated_answers": [
      "575.0"
    ],
    "solution": "import numpy as np\nn = np.sqrt(1001)\nprint(n)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1024 / 2**12)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.333333333333332"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "blue_to_yellow = 4 / 3\nnew_blue = blue_to_yellow * 5\nnew_yellow = blue_to_yellow * 3\ntotal_blue = new_blue - 3\ntotal_blue_before = total_blue + new_blue\nprint(total_blue_before)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import numpy as np\n\n# The function np.linalg.norm() calculates the length of a vector\n# (or a segment).\n#\n# The function np.array() converts a tuple into a numpy array.\n\n# Calculate the length of the vector (or segment)\n# from (1,2) to (-4,-10).\nlength = np.linalg.norm(np.array([-4,-10]) - np.array([1,2]))\n\nprint(length)"
  },
  {
    "example_id": 46,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x, y = 6 + 1, 8 + 1\nprint(x + y)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 4\nb = -1\nc = 2\nprint(a+b+c)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1996.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "n = 2008 - 13 + 1\nprint(n)"
  },
  {
    "example_id": 49,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "print(int(14.6) - int(-14.6))"
  },
  {
    "example_id": 50,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "b = 3\nprint(b)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5000.0"
    ],
    "annotated_answers": [
      "5000.0"
    ],
    "solution": "print(255**2 - 245**2)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "slope = (3-2) / (4-2)\nintercept = 3 - slope*2\nc = intercept\nprint(c)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0",
      "1.0",
      "49.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import log, exp\nx = exp(log(7, 49))\nprint(x)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.047818583457956"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import log\n\nb = log(125, 5)\nc = log(27, 5)\nprint(c)"
  },
  {
    "example_id": 55,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "2.0",
      "48.0",
      "108.0",
      "2.0",
      "2.0",
      "-6.0",
      "2.0",
      "48.0",
      "108.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy as sym\n\nx, y = sym.symbols('x y')\nexpr = 2*x**2 + 3*y**2 + 8*x - 24*y + 62\n\nsol = sym.solve(expr, [x, y])\n\nprint(sol)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "min_miles = 4 * 3\nprint(min_miles)"
  },
  {
    "example_id": 57,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "s = 0\nwhile True:\n    s += 1\n    x = (-s - 1) / 2\n    if int(x) == x:\n        print(s)\n        break"
  },
  {
    "example_id": 58,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 7\nb = 3\nc = 2\nprint(a**2 - b**2 + c**2)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 3\nb = 5\nc = 15\nd = 6\n\nfrac_ad = (a*c)/(b*d)\nprint(frac_ad)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "import math\nr1 = 3 * 24 / 3\nr2 = 24 / 3\nh2 = 24\nv1 = math.pi * (r1**2) * h2\nv2 = math.pi * (r2**2) * h2\nprint(h2)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 3\ny = 9\nprint(y**2 - 3*x*y + 8)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import solve, Eq, symbols\n\nx, y, a, b, c = symbols('x y a b c')\n\neq1 = Eq(a*x + b*y + c, x + 7)\neq2 = Eq(a + b*x + c*y, 2*x + 6*y)\neq3 = Eq(a*y + b + c*x, 4*x + y)\n\nsol = solve((eq1, eq2, eq3), (a, b, c))\n\nprint(sol)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "multiples = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\nprint(sum(multiples))"
  },
  {
    "example_id": 64,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4005.0"
    ],
    "annotated_answers": [
      "4005.0"
    ],
    "solution": "def nth_odd_term(n):\n    return (n * 2) - 1\n\nprint(nth_odd_term(2003))"
  },
  {
    "example_id": 65,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "c = -(-1)^7 * (-1)^5 * (-1)^2 * 2 + (-1)\nprint(c)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "unit_drink = 1.5 / 3\npints_10_miles = 10 * unit_drink\nprint(pints_10_miles)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 1\nb = 1\nprint(a/b + b/a - a*b)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "105.0",
      "26.0"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "import sympy as sp\nt = sp.Symbol('t')\ny = -16*t**2 + 26*t + 105\nground_time = y.subs(t, 0) / 26\nprint(ground_time)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0",
      "4006.0",
      "8011.0",
      "4006.0",
      "-1.0",
      "4006.0",
      "8011.0",
      "4006.0",
      "1.0",
      "-1.0",
      "4006.0",
      "8011.0",
      "4006.0",
      "1.0",
      "-1.0",
      "4006.0",
      "8011.0",
      "4006.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\n\nx = Symbol('x')\nroots = solve((2003*x + 1 + 1/x)/(2004*x), x)\nprint(roots)\nprint(1/roots[0] + 1/roots[1])"
  },
  {
    "example_id": 70,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.4"
    ],
    "solution": "from math import floor\nx = 27 / floor(27)\nprint(x)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n = (55 + 1) / 2\nprint(n)"
  },
  {
    "example_id": 72,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "233.0",
      "4.0",
      "1.0",
      "4.0",
      "233.0",
      "4.0"
    ],
    "annotated_answers": [
      "0.5"
    ],
    "solution": "from sympy import solve, Symbol\n\nx = Symbol('x')\neq = (2*x+5)*(x-3) - 14\nprint(solve(eq))"
  },
  {
    "example_id": 73,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "from sympy import Symbol, expand\nx = Symbol('x')\nf = (x**2 - 3*x + 4)*(2*x**2 + a*x + 7)\nf_expanded = expand(f)\nprint(f_expanded)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "6.0",
      "2.0",
      "2.0",
      "6.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import Symbol, solve, sqrt\nx = Symbol('x')\nsolutions = solve(2*x**2+4*x-1, x)\nsquares = [solution**2 for solution in solutions]\nsum_of_squares = sum(squares)\nprint(sum_of_squares)"
  },
  {
    "example_id": 75,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\n\ndef distance(point_1, point_2):\n    \"\"\"\n    Calculate the distance between two points.\n    :param point_1: tuple of coordinates of point 1\n    :param point_2: tuple of coordinates of point 2\n    :return: distance between point_1 and point_2\n    \"\"\"\n    return math.sqrt(sum([(point_2[i] - point_1[i]) ** 2 for i in range(len(point_1))]))\n\ndef line_length(point_1, point_2):\n    \"\"\"\n    Calculate the length of a line segment.\n    :param point_1: tuple of coordinates of point 1\n    :param point_2: tuple of coordinates of point 2\n    :return: length of the line segment\n    \"\"\"\n    return distance(point_1, point_2)\n\nprint(line_length((-3, 7), (2, -5)))"
  },
  {
    "example_id": 76,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.9500000000000001"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "w = 10\nt = 10\nv = 105\n\nw_extra = 10 - 10\nt_extra = 10 - 10\nv_extra = v - 10\n\nw_cents = w_extra * 0.01\nt_cents = t_extra * 0.01\nv_cents = v_extra * 0.01\n\nprint(w_cents, t_cents, v_cents)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "73.5"
    ],
    "solution": "j = 42 / 56\nk = 32\nj_32 = j * k\nprint(j_32)"
  },
  {
    "example_id": 78,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "x = 5 ** 2 + 18\nprint(x)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2012.0"
    ],
    "annotated_answers": [
      "2015.0"
    ],
    "solution": "b = 2011\nx = (b + 1) * (b + 2) // 2 - b * (b + 1) // 2\nprint(x)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "350.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "print(113+276-13-26)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "625.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "width = 100 / 4\narea = width * width\nprint(area)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "4.0",
      "2.0",
      "2.0",
      "5.0",
      "2.0",
      "10.0",
      "12.0",
      "2.0",
      "4.0",
      "32.0",
      "2.0",
      "4.0",
      "32.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpr = (2**x-2)*(5*2**x+10) - 3*4**x-12\nprint(expr)\nprint(expr.simplify())\nprint(expr.simplify().expand())"
  },
  {
    "example_id": 83,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Using the tool from scipy\nfrom scipy.optimize import fsolve\n\ndef solve(x):\n    return (2**(x+1))**3 * 4**x - 8192\n\nx = fsolve(solve, 0)\nprint(x)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = 21\nprint(x)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "degree_f = 6\ndegree_g = 3\ndegree_h = 36 - degree_f - degree_g\nprint(degree_h)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "# Step 1:\n# Define a function f(x) such that\n# f(x) = x & 7 - x\n# f(x) = x - 7\n\ndef f(x):\n    return x & 7 - x\n\n# Step 2:\n# Find the value of f(15)\n\nprint(f(15))"
  },
  {
    "example_id": 87,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import floor, ceil, pi, sqrt\n\n\ndef f(n):\n    if n >= 4:\n        return floor(n)\n    else:\n        return ceil(n)\n\n\nprint(f(pi/3) + f(sqrt(45)) + f(8**(2/3)))"
  },
  {
    "example_id": 88,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "7.0",
      "5.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "import sympy as sp\nx, y = sp.symbols('x y')\neq1 = 5*x - 2*y - 7\neq2 = 3*x + y - 2\neq1 = sp.solve(eq1, x)[0]\neq2 = sp.solve(eq2, y)[0]\nprint(eq1, eq2)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import Symbol, simplify\n\nx = Symbol('x')\ny = (x-3)/(x**2+7*x-30)\n\nprint(len(simplify(y.as_numer_denom()[1]).free_symbols))"
  },
  {
    "example_id": 90,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "volume_to_keep_600_fish = 600 / 8\nprint(volume_to_keep_600_fish)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(531**2 - 2*531*530 + 530**2)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0",
      "7.0",
      "638.0",
      "5.0",
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(x for x in range(1, 1000) if x**(-1) > x)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "treeks = 10\nsquigs = 3\ngoolees = 1\n\ntotal_weight = treeks + squigs + goolees\n\nprint(total_weight)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "lesser = 3 - 4\ngreater = 5 + 8\nprint(greater)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import sqrt, symbols\nx = symbols('x')\nh = sqrt(25-x**2) + sqrt(x-2)\nprint(h.diff(x))"
  },
  {
    "example_id": 96,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "187.5"
    ],
    "annotated_answers": [
      "187.5"
    ],
    "solution": "total_calories = 125 * 12 / 8\nprint(total_calories)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "k = 6\nprint(k)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(2 * (-2) ** 2 + 3 * (-2) + 4)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "import sympy\n\na = sympy.Symbol('a')\nb = sympy.Symbol('b')\n\neq1 = 2**a - 32\neq2 = a**b - 125\n\nsolve = sympy.solve([eq1, eq2], [a, b])\nprint(solve)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def number_of_books_sold(p):\n    return 120 - 3 * p\n\ndef revenue(p):\n    return number_of_books_sold(p) * p\n\np_max = 0\nwhile revenue(p_max) < revenue(p_max + 1):\n    p_max += 1\nprint(p_max)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = -4"
  },
  {
    "example_id": 102,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.31"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "r = (66200 - 20000) / 20000\nprint(r)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "print((34-10)+(20-9)+(55-10))"
  },
  {
    "example_id": 104,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "700.0"
    ],
    "annotated_answers": [
      "700.0"
    ],
    "solution": "print(32**2 - 18**2)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(int(pow(3/2, 2)+pow(pow(3/2, 2), 2)))"
  },
  {
    "example_id": 106,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0",
      "15.0",
      "15.0",
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "for i in range(1, 20):\n    for j in range(1, 20):\n        if (i * j - (i + j)) == 39:\n            print(i + j)"
  },
  {
    "example_id": 107,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def F(a, b, c, d):\n    return a**b + c*d\n\nb = 2\nassert F(6, b, 4, 3) == 48\nprint(b)"
  },
  {
    "example_id": 108,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def f(n):\n    if n > 1:\n        return n ** 3 + 2 * n - 1\n    else:\n        return n - 1\n\nprint(f(0) + f(1) + f(2))"
  },
  {
    "example_id": 109,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi, sqrt\n\ndef f(x):\n    if x < 0:\n        return -x**2 - 1\n    elif 0 <= x < 4:\n        return 2\n    else:\n        return sqrt(x)\n\nprint(f(pi))"
  },
  {
    "example_id": 110,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.25"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "S = 13 / 2\nprint(S**2)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-33.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\na, b = sp.solve(x**2 - 6*x + 2 - 29, (x, ))\nprint(2*a - 3*b)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.5"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import sqrt\n\na = 5\nx = (-a - sqrt(a**2 - 25)) / 2\nprint(x)"
  },
  {
    "example_id": 113,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "numerator = 5 + 8\ndenominator = 5 + 8\nprint(numerator / denominator)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from math import sin, pi\n\ndef g(x):\n    return -6 * sin(x * pi / 6)\n\nprint(g(g(-1)))"
  },
  {
    "example_id": 115,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve\nsolve(x**2 + 4*x + c, x**2 + 4*x)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import solve\n\nsolve(x**2 + 1 - x**2 + x + c, c)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 30**2 / 5 / 10 / 18\nprint(x)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f = lambda x: x**2 + 12\n\ndef f_3m(m):\n    return 3 * f(m)\n\n# Calculate the value of m\nm = f_3m(3)\n\n# Print the result\nprint(m)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-25.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = -50 / 2\nprint(x)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(8)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "y = 8 - 5*(-2) + 4*(-2)**2\nprint(y)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "solution = [x**2 for x in [-1, 0, 1]]\nprint(sum(solution))"
  },
  {
    "example_id": 123,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "9.0",
      "9.0",
      "1.0",
      "9.0",
      "1.0",
      "9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\ny = sp.Symbol('y')\nk = sp.Symbol('k')\n\nslope = (y - 1) / (x - 9)\nslope_AB = slope.subs(y, k)\nslope_BC = slope.subs(y, 0)\nslope_AC = slope.subs(x, 7)\n\nk = (slope_AB * (slope_BC - slope_AC)) / (slope_BC - slope_AB)\nprint(k)"
  },
  {
    "example_id": 124,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "74726.0"
    ],
    "annotated_answers": [
      "74726.0"
    ],
    "solution": "invested = 100000 / (1 + 0.06) ** 5\nprint(round(invested))"
  },
  {
    "example_id": 125,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.724744871391589"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = (5+6**0.5) / 2\nprint(x)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import math\nprint(math.log(1, 2))"
  },
  {
    "example_id": 127,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "N = 3\nprint(N)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "800.0",
      "1.0",
      "801.0"
    ],
    "annotated_answers": [
      "93.0"
    ],
    "solution": "a = 6\nb = 245 + 3*125 + 4*45\nc = 1\n\nA = a * c // b\nB = b // c\nC = c\n\nprint(A, B, C)\nprint(A + B + C)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# u+4\n# u-1\n# u-3\n# u+6\n\n# u+4 - u-3\n# u-1 - u+6\n\n# u+4 - u-3 - u+6 + u-1\n\n# u+4 - u-3 - u-1\n\n# u-2\n\n# u-2"
  },
  {
    "example_id": 130,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "13.5"
    ],
    "solution": "abs_diff = abs(18*A - 18*B)\nprint(abs_diff)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "f = lambda x: (4-x)/2\ng = lambda x: 2*x-4\nprint(f(g(1)) * g(f(1)))"
  },
  {
    "example_id": 132,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 2\nb = 3\na_b = a + b\nprint(a_b)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import numpy as np\n\n# coordinates of A, B, and M\na = 10\nb = 5\nc = 15\nd = 3\n\n# coordinates of M\nm = (a + c) / 2\nn = (b + d) / 2\n\n# coordinates of A'\na_new = a + 14\nb_new = b + 20\n\n# coordinates of B'\nc_new = c - 2\nd_new = d - 4\n\n# coordinates of M'\nm_new = (a_new + c_new) / 2\nn_new = (b_new + d_new) / 2\n\n# distance between M and M'\ndistance = np.sqrt((m - m_new)**2 + (n - n_new)**2)\nprint(distance)"
  },
  {
    "example_id": 134,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 20\nm = n\nprint(m)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "48.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\ny = (x + 1) ** 48\nprint(sp.nsimplify(y))"
  },
  {
    "example_id": 136,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "f(g(2))"
  },
  {
    "example_id": 137,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "print((3.6)**2 - (3.6)**2)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "299.0"
    ],
    "annotated_answers": [
      "121.0"
    ],
    "solution": "import math\nn = 400 - 81 - math.sqrt(400)\nprint(n)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "2.0",
      "14.0",
      "19.0",
      "7.0",
      "19.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "361.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nprint(49*x**2 + 14*x*(19-7*x) + (19-7*x)**2)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-20.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = -20\nprint(a)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "days = 0\nsquare_foot = 15 ** 2\nwhile square_foot > 1:\n    days += 1\n    square_foot //= 2\nprint(days)"
  },
  {
    "example_id": 142,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\nprint(x**3 - 2*x + 1)"
  },
  {
    "example_id": 143,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "9.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import sqrt\na, b, c = 6, 1, 2 + sqrt(6)\nprint(a + b + c)"
  },
  {
    "example_id": 144,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "abby_damon_pounds = (180 + 200) / 2\nprint(abby_damon_pounds)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = -5\ny = 3\nprint(x + y)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import sqrt, simplify\nexpr = (1 + sqrt(2)) / (2 + sqrt(3))\nprint(simplify(expr))"
  },
  {
    "example_id": 147,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a = -2\nb = 1\na + b"
  },
  {
    "example_id": 148,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0",
      "30.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Step 1:\n# Solve the system of equations\nm = 5\nn = 3\np = 2\nprint(m*n*p)\n\n# Step 2:\n# Calculate mnp\nmnp = m*n*p\nprint(mnp)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "8.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, I, Add, Mul\n\nz = Symbol('z')\n\nf = Add(\n    Mul(z**2, z.conjugate()),\n    Add(z, 2, 2*I)\n)\n\nprint(f.subs(z, I) + f.subs(z, 1) + f.subs(z, -1) + f.subs(z, -I))"
  },
  {
    "example_id": 150,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-114.0"
    ],
    "annotated_answers": [
      "-114.0"
    ],
    "solution": "sum = 0\nfor x in range(-30, 27):\n    sum += x\nprint(sum)"
  },
  {
    "example_id": 151,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.7"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "flour_needed = 1.5 * 216 / 15\nbutter_needed = flour_needed / 8\nprint(butter_needed)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "169.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x y')\nexpr = (2*x + 3*y)**2\nexpr = expr.subs(x, 2)\nexpr = expr.subs(y, 3)\n\nexpr = expr.expand()\nexpr = expr.subs(x, -5/y)\nexpr = expr.expand()\n\nprint(expr)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.125",
      "-0.375"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def f(x):\n    return (x-3) / (x**2 - 10*x + 16)\n\n# x = -2 and x = 6 are undefined\nprint(f(-2))\nprint(f(6))"
  },
  {
    "example_id": 154,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\ny = (x + 1) / (x**2 - 2*x + 1)\n\nprint(y.as_numer_denom())"
  },
  {
    "example_id": 155,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "def h(x):\n    return (x-0.5)*(x-2.5)*(x-6.5)*(x-7.5)/16+x\n\nresult = 0\nfor x in range(1, 9):\n    if h(x) > x:\n        result += x\nprint(result)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "def f(x):\n    return 1/4*f(x/2)\n\ndef f(x):\n    return 1/4*f(x/2)\n\nx, y = 8, 8\n\ndef f(x):\n    return y/4*f(x/2)\n\ndef f(x):\n    return y/4*f(x/2)\n\nprint(x+y)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "f = lambda x: 5*x+2\ng = lambda x: 3*x**2 - 4*x\nprint(f(f(1)) - g(g(2)))"
  },
  {
    "example_id": 158,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = (13 + (-16) + 6) / 3\ny = 8 ** (1 / 3)\nprint(x**2 + y**3)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-11.0"
    ],
    "annotated_answers": [
      "-11.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsolution = sympy.solve(sympy.Eq((x-9)/(x+1),2), x)\nprint(solution)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3741.0"
    ],
    "annotated_answers": [
      "1710.0"
    ],
    "solution": "sum = (86 * (87)) / 2\nprint(sum)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import numpy as np\na = np.roots([1, 2, 1])[0]\nprint(a)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# g(x) must have degree at least 8 - 4 = 4\nprint(8 - 4)"
  },
  {
    "example_id": 163,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "4.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nm = sympy.Symbol('m')\neq = sympy.Eq((3*x**2 - 4*x + 1)/(x - 1), m)\nprint(eq)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\npoly = 3 * (x - 4) + 2 * (x**2 - x + 7) - 5 * (x - 1)\ncoeff = poly.as_poly().all_coeffs()[0]\nprint(coeff)"
  },
  {
    "example_id": 165,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(pow(1+3, 3))"
  },
  {
    "example_id": 166,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "voltage = 40\nresistance = 20\ncurrent = voltage / resistance\nprint(current)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from math import log\nx = int(log(2**12, 1/8))\nprint(x)"
  },
  {
    "example_id": 168,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(np.log(5**4)/np.log(5**2))"
  },
  {
    "example_id": 169,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nf = 4 * x**3 + 1\nf_inverse = solve(f-33, x)[0]\nprint(f_inverse)"
  },
  {
    "example_id": 170,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "6.0",
      "11.0",
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\n\nk = (sympy.sqrt(11) - 5) / 6\nprint(k)"
  },
  {
    "example_id": 171,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import *\nx = 2-2*I\ny = 5+5*I\nprint(x*y)"
  },
  {
    "example_id": 172,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "93.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "rows = 450 // 5 + 3\nprint(rows)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.5"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "def f(x):\n    return 2 * x + 1\n\ndef f_inv(x):\n    return (x - 4) / 2\n\nprint(f_inv(17))"
  },
  {
    "example_id": 174,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve, simplify, expand, diff\n\nx = Symbol('x')\n\neq1 = (5*x - 16)/(x**2 - 7*x + 10)\neq2 = (A/(x-2) + B/(x-5))\n\nsol = solve([eq1 - eq2, diff(eq1, x) - diff(eq2, x)], [A, B])\n\nprint(simplify(expand(sol[0] + sol[1])))"
  },
  {
    "example_id": 175,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nprint(int(math.log2(32) - 2))"
  },
  {
    "example_id": 176,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def P(x):\n    return 4 * x**3 - 2 * x**2 + 7 * x - 1\ndef Q(x):\n    return P(x)**2\ndef y_intercept(f):\n    return f(0)\nprint(y_intercept(Q))"
  },
  {
    "example_id": 177,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "n = 25\nprint(n)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "79.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "import math\n\nprint(math.ceil(math.floor(52/3)/(5/23)))"
  },
  {
    "example_id": 179,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = 5\nprint(x)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.00024414"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from scipy.optimize import fsolve\n\ndef f(x):\n    y = - (x + 1) ** 2 + 1\n    return y - 5\n\ndef g(x):\n    y = - (x + 1) ** 2 + 1\n    return y - 1\n\ndef h(x):\n    y = - (x + 1) ** 2 + 1\n    return y\n\na = fsolve(f, 0)\nb = fsolve(g, 0)\n\nprint(b - a)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 1\nb = 2\nS = a + b + a*b\nS_inv = 1 / (1 + b + a*b)\nprint(a + b)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6666666666666667"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a1 = 1\na2 = 2\na3 = 3\na4 = 4\na5 = 5\n\nprint(a5/a3)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "978121.0"
    ],
    "annotated_answers": [
      "978121.0"
    ],
    "solution": "print(989**2)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "c = -9\nprint(c)"
  },
  {
    "example_id": 185,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.5"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "print(-6 / 4)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "9.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy\n\nx, y, c = sympy.symbols('x y c')\ncircle = x**2 + 8*x + y**2 + 4*y + c\ncircle_with_radius_3 = circle.subs(c, -3**2)\nprint(circle_with_radius_3)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import log\na = int(log(2938, 8))\nb = int(log(2938, 8) + 1)\nprint(a+b)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "water_for_two_teaspoons = 2 / 0.25\nprint(water_for_two_teaspoons)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "f(g(2))"
  },
  {
    "example_id": 190,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "15.0",
      "56.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import sqrt\nk = (sqrt(15) + 7) * 8\nprint(k)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = -2\nprint(m)"
  },
  {
    "example_id": 192,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "adina_size = 6\nlynn_size = 9\nshoe_size = lynn_size + (adina_size - lynn_size)\nprint(shoe_size)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "190.3846153846154"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a = -60 / 13\nb = 3120 / (4 ** 2)\nprint(a + b)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import log\nprint(log(81, 3))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.14285714285714"
    ],
    "annotated_answers": [
      "0.43"
    ],
    "solution": "from sympy import Symbol, solve, pprint\nt = Symbol('t')\ny = -4.9*t**2 - 3.5*t + 2.4\nsolution = solve(y, t)[0]\npprint(solution)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "print((4**3 + 2**3) - (3**3 + 1**3))"
  },
  {
    "example_id": 197,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "600.25"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "a = 24 / 2\nb = 73 / 2\nprint((b - a) ** 2)"
  },
  {
    "example_id": 198,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def D(a, b, c):\n    return a * b * c / (a + b + c)\n\nprint(D(2, 4, 6))"
  },
  {
    "example_id": 199,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8000.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "print((26**2 - 24**2 - 10)**2 - 10**2)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "x = 79\ny = 79 + 73\nprint(y - x)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import math\ndef harmonic_mean(x, y):\n    return 20\n\ndef arithmetic_mean(x, y):\n    return (x + y) / 2\n\ndef reciprocal(x):\n    return 1 / x\n\nfor x in range(1, 100):\n    for y in range(1, 100):\n        if harmonic_mean(x, y) == 20:\n            print(x, y)"
  },
  {
    "example_id": 202,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import numpy as np\nimport sympy as sp\n\nx1, y1 = -1, 2\nx2, y2 = 3, 0\nx3, y3 = 9, 0\n\ncenter = (x1*y2-y1*x2, x2*y3-y2*x3)\n\nh, k = center\n\nprint(h + k)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.125"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return (4*x + 1) / 3\n\ndef f_inv(y):\n    return (3*y - 1) / 4\n\ndef f_inv_inv(x):\n    return (3*x - 1) / 4\n\nprint(f_inv_inv(f_inv(1)))"
  },
  {
    "example_id": 204,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "p = 1\nq = 1\nr = p + q\nprint(r)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.5"
    ],
    "annotated_answers": [
      "125.5"
    ],
    "solution": "def mean_whole_numbers(n):\n    return sum(range(1, n+1)) / n\nprint(mean_whole_numbers(250))"
  },
  {
    "example_id": 206,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy as sy\n\nsolutions = sy.solve(sy.Symbol('x')**2 - 4*sy.Symbol('x') - 14, sy.Symbol('x'))\nprint(abs(solutions[0] - solutions[1]))"
  },
  {
    "example_id": 207,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.3333333333333335"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 7 / 3\nprint(x)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.999999999999987"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    return (1 + x) / (1 - x)\n\ndef g(x):\n    return -2 / (x + 1)\n\nresult = g(f(g(f(g(f(g(f(g(f(12))))))))))\nprint(result)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nprint(sympy.simplify((x+3)*(x-1) - x*(x+2)))"
  },
  {
    "example_id": 210,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "6.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import sqrt\n\nx = (4/sqrt(24)) + (sqrt(3456)/9) + sqrt(6)\nprint(sqrt(x))"
  },
  {
    "example_id": 211,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 212,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4096.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import math\nprint(math.pow(4, 5) + math.pow(4, 5) + math.pow(4, 5) + math.pow(4, 5))"
  },
  {
    "example_id": 213,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "A, B, C = 4, 2, -3\nprint(A + B + C)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "slope = (2 - 0) / (6 - 5)\nprint(slope)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Let |5x-1| = x+3\n# 5x - 1 = x+3\n# 5x = 4\n# x = 8\nprint(8)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nlog_val = sympy.log(10 - 2*x, x - 1)\nprint(log_val.simplify())"
  },
  {
    "example_id": 217,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "5.0",
      "2.0",
      "4.0",
      "4.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy\na, b, c, d = sympy.symbols('a b c d')\n\neq1 = a - b - 2*(c+d)\neq2 = b - a + 2\neq3 = d - c - 5\n\nsol = sympy.solve([eq1, eq2, eq3], [c, d])\nprint(sol)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "a = 2\nb = 3\nprint(8 * a ** 2 * b ** 2)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.079368399158984"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 8\nanswer = 16 ** (1/3) * a ** (2/3)\nprint(answer)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "midpoint = (1 + 1) / 2\nprint(midpoint)"
  },
  {
    "example_id": 221,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0",
      "6.0",
      "5.0",
      "24.0",
      "6.0",
      "5.0",
      "32.0",
      "6.0",
      "5.0",
      "-24.0",
      "6.0",
      "5.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "from sympy import solve, symbols\n\nx, y = symbols('x, y')\neq1 = x**2 - 24*x + y**2 - 32*y + 384\neq2 = x**2 + 24*x + y**2 + 32*y + 384\n\nsol = solve((eq1, eq2), (x, y))\n\nprint(sol)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.0",
      "9.0",
      "2.0",
      "2.0",
      "62.0",
      "9.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\ny = sympy.symbols('y')\nsol = sympy.solve(sympy.Eq(sympy.Add(sympy.Mul(66, sympy.Pow(2, -x)), sympy.Mul(3, sympy.Pow(2, x))), sympy.Add(sympy.Mul(4, sympy.Pow(2, -x)), sympy.Mul(6, sympy.Pow(2, x + 1)))), x)\nprint(sol)"
  },
  {
    "example_id": 223,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.333333333333336",
      "36.4"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "pencil_cost = 124 / 3\neraser_cost = 182 / 5\nprint(pencil_cost, eraser_cost)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "a = 4\nb = 12\nm = 1\nprint(a + b + m)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "832.0",
      "3.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import integrate, Symbol\nx = Symbol('x')\narea = integrate((2*x+8)*(2*x+8), (x, -2, 2))\nprint(area)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "196.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "p = 28 / 7\nprint(p * 49)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def distance_squared(x):\n    return (x-4)**2\n\ndef is_in_quadratic(x):\n    return distance_squared(x) <= 9\n\ndef length_of_quadratic_segment(x):\n    count = 0\n    for i in range(x):\n        if is_in_quadratic(i):\n            count += 1\n    return count\n\nprint(length_of_quadratic_segment(10))"
  },
  {
    "example_id": 228,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 2\nprint(n)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy.abc import a\n\nexpr = sqrt(4 + sqrt(16 + 16*a)) + sqrt(1 + sqrt(1 + a))\nsol = expr.subs(expr, 6)\nprint(sol.as_independent(a)[0])"
  },
  {
    "example_id": 230,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "slope_segment_1 = (4 - (-2)) / (2 - 0)\nslope_segment_2 = (1 - 5) / (1 - 5)\nslope_midpoint = (slope_segment_1 + slope_segment_2) / 2\nprint(slope_midpoint)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpr = sympy.expand((x**2-5*x+7)-(x-3)*(x-2))\nprint(expr)"
  },
  {
    "example_id": 232,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "94949.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from math import gcd\n\ndef sum_of_powers(m, n, k, t):\n    if gcd(m, n)!= 1 or gcd(k, t)!= 1:\n        raise ValueError(\"m and n, and k and t must be prime.\")\n    return m ** n + n ** m + k ** t + t ** k\n\nprint(sum_of_powers(2, 3, 5, 7))"
  },
  {
    "example_id": 233,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Assume the father's age is 5x\n# Assume the son's age is x\n# Exactly three years ago, their ages were 30\n# So, x + 5x = 30\n# Simplify the equation\n# x + 5x = 30\n# 6x = 30\n# x = 5\n# So, the son is five years old\n# So, the son is 5 years old\nprint(5)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5083.0"
    ],
    "annotated_answers": [
      "4950.0"
    ],
    "solution": "total = 0\nfor i in range(100, 200, 3):\n    total += i\nprint(total)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.5"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "interest_rate = (1225 - 1000) / 1000\nprint(interest_rate * 100)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    if x == 1:\n        return 2\n    elif x == 2:\n        return 6\n    elif x == 3:\n        return 5\n\ndef f_inv(x):\n    if x == 2:\n        return 1\n    elif x == 6:\n        return 2\n    elif x == 5:\n        return 3\n\nprint(f_inv(f_inv(6)))"
  },
  {
    "example_id": 237,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8281.0"
    ],
    "annotated_answers": [
      "8281.0"
    ],
    "solution": "print(91**2)"
  },
  {
    "example_id": 238,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3888.0"
    ],
    "annotated_answers": [
      "-27.0"
    ],
    "solution": "c = 12\np = 9\ng = 3\nq = c * (g**2 + p)**2\nprint(q)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import poly\nfrom sympy.abc import x\np = poly(x-1,x)*(3*x**4+x**3-25*x**2+38*x-17)\nprint(p.degree())"
  },
  {
    "example_id": 240,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.7906976744186047"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "t = 77 / 43\nprint(t)"
  },
  {
    "example_id": 241,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "4.0",
      "24.0",
      "4.0",
      "6.0",
      "3.0",
      "4.0",
      "2.0",
      "7.0",
      "5.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nf = 24*x**4 + 6*x**3 + 4*x**2 - 7*x - 5\ng = 6*x**3 + 3*x**2 + 3*x + 4\nprint(f*g)"
  },
  {
    "example_id": 242,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "count = 0\nfor a in range(0, 6):\n    for b in range(0, 6):\n        for c in range(0, 6):\n            if a**2*b + b**2*c + c**2*a - a*b**2 - b*c**2 - c*a**2 == 0:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 243,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = -3\nprint(x)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x = 3 * 4 / 2 - 5\nprint(x)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.5615528128088303"
    ],
    "annotated_answers": [
      "2.2"
    ],
    "solution": "import math\na = 1\nb = -3\nc = -2\ndiscriminant = b ** 2 - 4 * a * c\nif discriminant < 0:\n    print(\"No real roots\")\nelse:\n    root1 = (-b - math.sqrt(discriminant)) / (2 * a)\n    root2 = (-b + math.sqrt(discriminant)) / (2 * a)\n    if root1 > root2:\n        print(root1)\n    else:\n        print(root2)"
  },
  {
    "example_id": 246,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "127.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "n = 1\nwhile n <= 125:\n    n = n * 2 + 1\nprint(n)"
  },
  {
    "example_id": 248,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def climb(t):\n    return t * 100\n\ndef seconds(altitude):\n    return altitude / climb(1)\n\nprint(seconds(12000))"
  },
  {
    "example_id": 249,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nf = x**2 - 1\nprint(degree(f))"
  },
  {
    "example_id": 250,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\neq = x**2 - 6*x + 66\nb, c = solve(eq, x)\nprint(b+c)"
  },
  {
    "example_id": 251,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.7999999999999999"
    ],
    "annotated_answers": [
      "0.75"
    ],
    "solution": "from math import sqrt\nt = 0\nwhile t < 10:\n    y = -16 * t**2 - 60 * t + 54\n    if y <= 0:\n        break\n    t += 0.1\nprint(t)"
  },
  {
    "example_id": 252,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "days_to_paint_12_houses = 3\nworkers_to_paint_12_houses = 12 / 4\nprint(workers_to_paint_12_houses)"
  },
  {
    "example_id": 253,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.132745950421556"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndistance_between_circles = distance(9, 5, -6, 3)\nprint(distance_between_circles)"
  },
  {
    "example_id": 254,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1 / (1 + 2)\nx = 1 / (1 + 4)\nx = 1 / (1 + 6)\nx = 1 / (1 + 8)\nx = 1 / (1 + 10)"
  },
  {
    "example_id": 255,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Write a program to find the sum of the coordinates of the midpoint of the line segment connecting points (5,4) and (-9,8).\n# The midpoint of the line segment connecting points (5,4) and (-9,8) is at (x,y).\nx = (5+(-9))/2\ny = (4+8)/2\nprint(x+y)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "t = 3\n((t) + 2) * (t - 3) - ((t + 1) + 2) * (t + 1 - 3)"
  },
  {
    "example_id": 257,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 1/2\ny = 1/2\nprint(8*x - 7*y)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(8.8 + -8.8)"
  },
  {
    "example_id": 259,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 1\nwhile True:\n    b = int(a**0.5)\n    if a % (b**2)!= 0:\n        a += 1\n    else:\n        break\nprint(a+b)"
  },
  {
    "example_id": 260,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "for x in range(1, 10):\n    if x**2 - 7*x + 10 == 0:\n        print(f'y is not defined for x={x}')"
  },
  {
    "example_id": 261,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "5.0",
      "4.0",
      "3.0",
      "3.0",
      "11.0",
      "2.0",
      "33.0",
      "97.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\neq = x**6 - 2*x**5 + 2*x**3 - 2*x + 1 - 292\nprint(eq.factor())"
  },
  {
    "example_id": 262,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0",
      "342.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import math\n\ndef num_n(m):\n    return math.factorial(m) / math.factorial(m - 1)\n\ndef num_n_distinct(m):\n    return math.factorial(m) / math.factorial(m - 2)\n\nprint(num_n(19))\nprint(num_n_distinct(19))"
  },
  {
    "example_id": 263,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.222222222222221"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "games_won = 2/9\ngames_lost = 15\ntotal_games = games_won + games_lost\nprint(total_games)"
  },
  {
    "example_id": 264,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "6.0",
      "18.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol(\"x\")\ny = x**2 + 2*x - 6\nsym.printing.pretty_print(y, use_unicode=False)\nprint(y.subs(x, 4).subs(y, 5))"
  },
  {
    "example_id": 265,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "402.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "def nth_term(a, d, n):\n    return a + (n - 1) * d\n\nprint(nth_term(6, 4, 100))"
  },
  {
    "example_id": 266,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 7\nb = -a\nprint(b)"
  },
  {
    "example_id": 267,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.857142857142857"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "denali_pay = 16\nnate_pay = 12\nx = (denali_pay * nate_pay) / (denali_pay + nate_pay)\nprint(x)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import sqrt, simplify\n\nexpr = (sqrt(5) + sqrt(2)) / (sqrt(5) - sqrt(2))\nprint(simplify(expr))"
  },
  {
    "example_id": 269,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "def f(x):\n    return -x**2 - 8*x + 12\n\nprint(f(0))"
  },
  {
    "example_id": 270,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "min_height = 2 * 0**2 - 5 * 0 + 29\nprint(min_height)"
  },
  {
    "example_id": 271,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "first_practice = 48 / 2\nprint(first_practice)"
  },
  {
    "example_id": 272,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "b = (12 - 3*4) / 2\nprint(b)"
  },
  {
    "example_id": 273,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "510.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "bricks_per_hour = 30\nhours_worked_by_alan = 3\nhours_worked_by_david = 1\ntotal_bricks_placed = 600\n\nbricks_placed_by_david = total_bricks_placed - (bricks_per_hour * hours_worked_by_alan)\nprint(bricks_placed_by_david)"
  },
  {
    "example_id": 274,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# import numpy as np\nx1, y1 = 7, -1\nx2, y2 = -1, 7\nm = (y2 - y1) / (x2 - x1)\nb = y1 - m * x1\nprint(m + b)"
  },
  {
    "example_id": 275,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "dad_age = 53 - 31\nprint(dad_age)"
  },
  {
    "example_id": 276,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "x = 7 + 9\ny = 7 - 9\nprint(x * y)"
  },
  {
    "example_id": 277,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 3**4\nprint(x)"
  },
  {
    "example_id": 278,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\ndef f(x):\n    return math.floor((-5/8)**x)\n\ndistinct_values = set()\nfor x in range(1000000):\n    distinct_values.add(f(x))\nprint(len(distinct_values))"
  },
  {
    "example_id": 279,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.008192990441511155"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "# calculate the center of the circle\ncenter_x = -1 + 2\ncenter_y = 6 + 3\n\n# calculate the distance between the center and the point (-1,6)\ndistance = (center_x - (-1))**2 + (center_y - 6)**2\n\n# calculate A, B, and C\nA = (center_x - (-1)) / distance\nB = (center_y - 6) / distance\nC = 1 - A*(-1) - B*6\n\n# calculate A*B*C\nprint(A*B*C)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nsolutions = sympy.solve(sympy.sqrt(3*x - 5) - 2, x)\nprint(solutions)"
  },
  {
    "example_id": 281,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "b = 2\nprint(b)"
  },
  {
    "example_id": 282,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from math import sqrt\n\ncube_root_45 = sqrt(45)\ncube_root_101 = sqrt(101)\n\n# Find the integer that lies between cube_root_45 and cube_root_101\nprint(int((cube_root_45 + cube_root_101) / 2))"
  },
  {
    "example_id": 283,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "123.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "print(123123 / 1001)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "least_possible_result = 4 * (5 - 6)\nprint(least_possible_result)"
  },
  {
    "example_id": 285,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "x = 2\nprint(x**4)"
  },
  {
    "example_id": 286,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "f = lambda x: x**3 + 2*x + 1\ng = lambda x: x - 1\nprint(f(g(1)))"
  },
  {
    "example_id": 287,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4800.0"
    ],
    "annotated_answers": [
      "4800.0"
    ],
    "solution": "time = 12\nbacteria = 600\nrate = 4\n\ndef get_bacteria(time, bacteria, rate):\n    return bacteria * (2 ** (time/rate))\n\nprint(get_bacteria(time, bacteria, rate))"
  },
  {
    "example_id": 288,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "44.0",
      "110.0",
      "2.0",
      "7.0"
    ],
    "annotated_answers": [
      "-102.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nalpha = sympy.Symbol('alpha')\nf = (x**2 + 5*x + alpha) / (x**2 + 7*x - 44)\ns = sympy.solve(f.diff(x), alpha)\nprint(s)"
  },
  {
    "example_id": 289,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 166 // 15\ny = 166 // 14\nprint(x + y)"
  },
  {
    "example_id": 290,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(4)"
  },
  {
    "example_id": 291,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\ndef tangent_circles(center1, center2, point):\n    center1_x, center1_y = center1\n    center2_x, center2_y = center2\n    point_x, point_y = point\n\n    # distance between centers\n    d = math.sqrt((center2_x - center1_x) ** 2 + (center2_y - center1_y) ** 2)\n    # distance between center and point\n    d2 = math.sqrt((center1_x - point_x) ** 2 + (center1_y - point_y) ** 2)\n\n    # condition for tangency\n    if d2 == d:\n        # radius of circle passing through center1 and point\n        r1 = math.sqrt((point_x - center1_x) ** 2 + (point_y - center1_y) ** 2)\n        # radius of circle passing through center2 and point\n        r2 = math.sqrt((point_x - center2_x) ** 2 + (point_y - center2_y) ** 2)\n        # radius of circle passing through center1, center2 and point\n        r = math.sqrt(r1 ** 2 + r2 ** 2)\n        return [r]\n    else:\n        return []\n\n\nprint(tangent_circles((4, 0), (-4, 0), (0, 5)))"
  },
  {
    "example_id": 292,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "4.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "4.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import *\na, b = symbols('a b')\nt = Symbol('t')\nf1 = 3*t**2 + 5*t + a\nf2 = 4*t**2 + b*t - 2\nprint(f1*f2)\nprint(collect(f1*f2, t))\nprint(f1*f2.subs(t, 0))\nprint(f1*f2.subs(t, 0) - 12*t**4 - 26*t**3 + 8*t**2 + 16*t - 6)\nprint(a + b)"
  },
  {
    "example_id": 293,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "from math import sqrt\n\na = int(sqrt(2))\nb = int(1 / sqrt(2))\nc = int(sqrt(3))\n\nprint(a + b + c)"
  },
  {
    "example_id": 294,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "32736.0"
    ],
    "solution": "sum_of_squares = 12296\nproduct = 1\nfor i in range(1, 4):\n    product *= (i * i)\n    sum_of_squares -= product / 8\nprint(product)"
  },
  {
    "example_id": 295,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "for i in range(10, 100):\n    if i % 10 == 5 and i // 10 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 296,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "print(3*0-4)"
  },
  {
    "example_id": 297,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "378.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "median = 27 * 14\nprint(median)"
  },
  {
    "example_id": 298,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "import numpy as np\n\ndef count_points_in_circle(center, radius, delta):\n    \"\"\"\n    center: a tuple of (x, y) coordinates\n    radius: a positive integer\n    delta: a positive integer\n\n    returns: the number of lattice points in the circle\n    \"\"\"\n    x_min, y_min = center[0] - radius, center[1] - radius\n    x_max, y_max = center[0] + radius, center[1] + radius\n    count = 0\n    for x in np.arange(x_min, x_max + delta, delta):\n        for y in np.arange(y_min, y_max + delta, delta):\n            if np.sqrt((x - center[0])**2 + (y - center[1])**2) <= radius:\n                count += 1\n    return count\n\nprint(count_points_in_circle((0, 0), 5, 1))"
  },
  {
    "example_id": 299,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0",
      "0.0",
      "3.0",
      "9.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return 9 - x\n\ndef g(x):\n    return f(f(x))\n\nprint(g(-15))\nprint(g(0))\nprint(g(3))\nprint(g(9))"
  },
  {
    "example_id": 300,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "81.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "print(4 + 5)\nprint((4 + 5)**2)"
  },
  {
    "example_id": 301,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nsolutions = sympy.solve(sympy.sqrt(3*x+6) - (x+2), x)\nprint(solutions)"
  },
  {
    "example_id": 302,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 3\ny = 2\nprint(4 * (x ** 2) / (9 * (y ** 2)))"
  },
  {
    "example_id": 303,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\np = sympy.Symbol('p')\nq = sympy.Symbol('q')\n\n# p(2) = 3\np_2 = 3\n\n# p(q(x)) = 4x + 7\np_q = 4 * q + 7\n\n# q(-1) = 3\nq_neg_1 = sympy.solve(p_q - p_2, q)[0]\n\nprint(q_neg_1)"
  },
  {
    "example_id": 304,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "time_to_stop = 45 / 5\nprint(time_to_stop)"
  },
  {
    "example_id": 305,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "num_customers = 15 / (2500/1500)\nprint(num_customers)"
  },
  {
    "example_id": 306,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2450.0"
    ],
    "annotated_answers": [
      "2450.0"
    ],
    "solution": "commission = 0.05\nsales = 25000\nbase_earnings = 1200\ntotal_earnings = base_earnings + commission * sales\nprint(total_earnings)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.17777777777777776"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 8 / 3\nz = 15\nprint(x / z)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(64**(1/2) - 64**(1/3))"
  },
  {
    "example_id": 309,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12364.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "AMC10 = 12342\nAMC12 = 22\nA = 12342 + 22\nprint(A)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.7999999999999998"
    ],
    "annotated_answers": [
      "1.8"
    ],
    "solution": "x = 4.8 - (1 + 1) - 1\nprint(x)"
  },
  {
    "example_id": 311,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.00390625"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "x = 4\nprint((1/x**4))"
  },
  {
    "example_id": 312,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "6.0",
      "2.0",
      "1.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nx = Symbol('x')\n\nf = -2*x**2 + 4*x + 1\n\nsol = solve(f, x)\n\nprint(sol)"
  },
  {
    "example_id": 313,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "2003.0"
    ],
    "solution": "sum_even = sum(range(0, 2003, 2))\nsum_odd = sum(range(1, 2003, 2))\nprint(sum_even - sum_odd)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "# 1 is odd, 2 is even\na = 1\nb = 3\n\nwhile b < 255:\n    ab = a * b\n    if ab == 255:\n        print(a)\n        print(b)\n        break\n    a += 2\n    b += 2"
  },
  {
    "example_id": 315,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13225.0"
    ],
    "annotated_answers": [
      "13225.0"
    ],
    "solution": "print(115**2)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = -23 // 3 + 1\nprint(a)"
  },
  {
    "example_id": 317,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26000.0"
    ],
    "annotated_answers": [
      "26000.0"
    ],
    "solution": "print(513**2 - 487**2)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy as sp\na, b, c = sp.symbols('a, b, c')\nsq_sum = a**2 + b**2 + c**2\nsq_prod = a*b + b*c + a*c\neq1 = sq_sum - 13\neq2 = sq_prod - 6\nsol = sp.solve([eq1, eq2], [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 319,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.75"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "revolutions_16_feet = 27 / 64 * 16\nprint(revolutions_16_feet)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0",
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nresult = sympy.log(125*x, sympy.sqrt(5))\nprint(result)"
  },
  {
    "example_id": 321,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.4"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# a + bx = 15 + bx = 3 + bx\n# 15 + bx = 3 + bx\n# bx = 12\n# b = 12/x\nb = 12 / 5\nprint(b)"
  },
  {
    "example_id": 322,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "time_50m = 50 / 5\ntime_50m += 25\nprint(time_50m)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "x = 3^4 - 3^2\nprint(x)"
  },
  {
    "example_id": 324,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef distance(p1, p2):\n    return math.sqrt( (p2[0]-p1[0])**2 + (p2[1]-p1[1])**2 )\n\ndist_lucy_robert = distance((4,3), (6,1))\ndist_liz_robert = distance((4,3), (1,7))\nprint(max(dist_lucy_robert, dist_liz_robert))"
  },
  {
    "example_id": 325,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "max_degree = 3 + 2\nprint(max_degree)"
  },
  {
    "example_id": 326,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(20 / 100 * 50 / 100 * 80)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# 4 years ago, Chris's age was same as Amy's age now\n# 4 years later, Ben's age will be 3/5 of Amy's age 4 years ago\n# Chris's age now = Ben's age now - 4\n# Amy's age now = 6\n# Ben's age now = 3/5 * 6 = 4\n# Chris's age now = 4 - 4 = 0\nprint(0)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "sum_of_ends = 3 + 5 + 6 + 7 + 9\nmiddle_term = sum_of_ends / 5\nprint(middle_term)"
  },
  {
    "example_id": 329,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "a = -5 + 8\nb = -3 + 8\nc = -5 + 8\nprint(a*b*c)"
  },
  {
    "example_id": 330,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "14.0",
      "2.0",
      "2.0",
      "14.0",
      "2.0"
    ],
    "annotated_answers": [
      "-56.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\ndiscriminant = solve(2*x**2 - 8*x + 15, x)\nprint(discriminant)"
  },
  {
    "example_id": 331,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.80350850198276"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "from math import sqrt\n\nx = -6\ny = -15\nx_origin = 8\ny_origin = 3\n\ndistance_x_origin = x - x_origin\ndistance_y_origin = y - y_origin\n\nn = (distance_x_origin ** 2 + distance_y_origin ** 2) ** (1/2)\n\nprint(n)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = -3\ny = 3\nprint(abs(x - y))"
  },
  {
    "example_id": 333,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "102.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "A = 6\nB = 17\nAB = A * B\nprint(AB)"
  },
  {
    "example_id": 334,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = 3 * sympy.sqrt(2 * x - 7) - 8\nprint(f.subs(x, 8))"
  },
  {
    "example_id": 335,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "import sympy as sym\n\nx = sym.Symbol('x')\neq = (9 - 4*x) / (x + 6) - 7\nsol = sym.solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 336,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "red = 35\nyellow = 35 - 2\norange = 35 // 3\nwhite = 35 + 3\nprint(red)"
  },
  {
    "example_id": 337,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "364.0"
    ],
    "solution": "product = 40 - 12\nprint(product)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "65.0"
    ],
    "solution": "volume = (30 * 6.5) / 3\nprint(volume)"
  },
  {
    "example_id": 339,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import isqrt\n\ndef is_integer_sqrt(x):\n    return isqrt(63 - isqrt(x)) % 1 == 0\n\nprint(list(filter(is_integer_sqrt, range(100))))"
  },
  {
    "example_id": 340,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 1 / (2 - (1 / (2 - (1 / (2 - 1)))))\nprint(x)"
  },
  {
    "example_id": 341,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-65.0",
      "-5.0",
      "2.0",
      "105.0",
      "2.0",
      "2.0",
      "-5.0",
      "2.0",
      "105.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import sympy as sp\nx, y = sp.symbols('x y')\neq1 = (x + y)**2 - 105\neq2 = x**2 + y**2 - 65\nsol = sp.solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 342,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "# f(x) = 3x^4 + 5x^2 - 9x - 2\n# g(x) = f(x-1) = 3(x-1)^4 + 5(x-1)^2 - 9(x-1) - 2\n# = 3x^4 - 10x^3 + 19x^2 - 18x - 2\n\n# The sum of the coefficients of g is 19 + 18 + 2 = 39"
  },
  {
    "example_id": 343,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4851.0"
    ],
    "annotated_answers": [
      "93.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 99):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "199.0"
    ],
    "annotated_answers": [
      "549.0"
    ],
    "solution": "sum_of_squares = 99 + 99 + 1\nprint(sum_of_squares)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "f = lambda x: x + 2\ng = lambda x: 1 / f(x)\nprint(g(f(-3)))"
  },
  {
    "example_id": 346,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0",
      "28.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "c = 4\np = 28\nq = 45\ns = 0\nprint(c * s + p)\nprint(c * s + p)"
  },
  {
    "example_id": 347,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "y = 4x - 36\nx = (y + 36) / 4\nprint(x)"
  },
  {
    "example_id": 348,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def f(x):\n    return 2*x/(x**2 - 5*x - 14)\n\na = -1/3\nb = 1/3\nc = 3\n\nprint(a + b + c)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.192388155425117"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\nx = -13 / 2\ny = 13 / 2\nprint(math.sqrt(x**2 + y**2))"
  },
  {
    "example_id": 350,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import Symbol, integrate\n\nx = Symbol('x')\nf = (x - 2)**2 - 9\n\narea = integrate(f, x)\nprint(area)"
  },
  {
    "example_id": 351,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsolutions = sympy.solve(x**2 == -abs(x), x)\nprint(solutions)"
  },
  {
    "example_id": 352,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "lenny_dollars = 35\nlarry_dollars = 2/5 * lenny_dollars\nprint(lenny_dollars - larry_dollars)"
  },
  {
    "example_id": 353,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 0\nwhile (1**x + 2**x + 5**x)!= 642:\n    x = x + 1\nprint(x)"
  },
  {
    "example_id": 354,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-131072.0"
    ],
    "annotated_answers": [
      "-8192.0"
    ],
    "solution": "def geometric_sequence(a, d, n):\n    return a * (d ** (n - 1))\n\na = 16\nd = -2\nn = 14\nprint(geometric_sequence(a, d, n))"
  },
  {
    "example_id": 355,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nprint(math.log(256, 2) / 2)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 3\ny = 4\nprint(x + y)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "total = 12.75\nentry_fee = 2.25\nride_fee = 1.50\nrides = (total - entry_fee) / ride_fee\nprint(rides)"
  },
  {
    "example_id": 358,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = (1 + (-7))/2\ny = (1 + 5)/2\nprint(x*y)"
  },
  {
    "example_id": 359,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-56.0"
    ],
    "solution": "from sympy import solve\nfrom sympy.abc import a, b, c\neq1 = 3*a + b + c\neq2 = a + 3*b + c\neq3 = a + b + 3*c\nans = solve((eq1, eq2, eq3), (a, b, c))\nprint(ans)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num_people = 12 + 3\nsupplies_per_day = 12 / num_people\nprint(supplies_per_day)"
  },
  {
    "example_id": 361,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "from sympy import solve\ny, k = sympy.symbols('y k')\neq = y**2 + 24*y + 16 + k\nsol = solve(eq, k)\nprint(sol)"
  },
  {
    "example_id": 362,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "x = 3 * 5\nprint(x)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "for x in range(1, 26):\n    if (x**2 + 4*x + 4) > 10 and (x**2 + 4*x + 4) < 50:\n        print(x)"
  },
  {
    "example_id": 364,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "total_miles = 26 + 12 * 2 + 28\nprint(total_miles)"
  },
  {
    "example_id": 365,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "n = 6\nprint(n)"
  },
  {
    "example_id": 366,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-48.0"
    ],
    "annotated_answers": [
      "-48.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x, y')\neq1 = 725*x + 727*y - 1500\neq2 = 729*x + 731*y - 1508\nsol = sympy.solve([eq1, eq2], [x, y])\nprint(sol[x] - sol[y])"
  },
  {
    "example_id": 367,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26244.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# number of triangles\nnum_tri = 162**2 + 162**2\n# number of non-congruent triangles\nnum_non_con = int(num_tri / 2)\nprint(num_non_con)"
  },
  {
    "example_id": 368,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = (6 + 2) / (2 * 6)\nprint(int(x))"
  },
  {
    "example_id": 369,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "2.0",
      "-4.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols(\"a b c\")\nx = sympy.symbols(\"x\")\nm = sympy.solve(a*x**2 + b*x + c, x)[0]\nn = sympy.solve(a*x**2 + b*x + c, x)[1]\nprint(m - n)"
  },
  {
    "example_id": 370,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "m, n = 3, 4\nprint(m * n)"
  },
  {
    "example_id": 371,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import fabs\n\ndef f(x):\n    return 2*x\n\ndef g(x):\n    return 3*x\n\ndef f_g(x):\n    return f(x) - g(x)\n\nx = 18\nmax_f_g = max(f_g(i) for i in range(x+1))\nprint(max_f_g)"
  },
  {
    "example_id": 372,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "num_horses = 30 / 4\nprint(num_horses)"
  },
  {
    "example_id": 373,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "11.0",
      "2.0",
      "3.0",
      "2.0",
      "11.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\na, b = sympy.solve(x**2 - 5*x + 9, x)\nprint((a - 1)*(b - 1))"
  },
  {
    "example_id": 374,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "e = (17 - 8) / 2\nprint(e)"
  },
  {
    "example_id": 375,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-99.0",
      "1.0",
      "0.000204060810121416",
      "99.0",
      "99.0",
      "1.0",
      "0.000204060810121416",
      "99.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nf = 1/2*x**2 + 99*x + sp.Symbol('c')\nf_roots = sp.solve(f, x)\nprint(f_roots)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "b_least = (-2) / 2\nprint(b_least)"
  },
  {
    "example_id": 377,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "expression = (2*(-3))**5 / (-3)**3\nprint(expression)"
  },
  {
    "example_id": 378,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "n = 26 // 25 + 25\nprint(n)"
  },
  {
    "example_id": 379,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return (x-1)*(x-3)*(x-7)*(x-9)\n\nprint(f(6) - f(4))"
  },
  {
    "example_id": 380,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10450.0"
    ],
    "annotated_answers": [
      "10455.0"
    ],
    "solution": "# Step 1: calculate the interest for the first CD\ninterest = 10000 * 0.04 / 2\n# Step 2: calculate the interest for the second CD\ninterest = interest + 10000 * 0.05 / 2\n# Step 3: calculate the total amount\ntotal = 10000 + interest\nprint(total)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "59.999999999999986"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "print(pow(12, 1/3) * pow(20, 1/3) * pow(15, 1/3) * pow(60, 1/3))"
  },
  {
    "example_id": 382,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import symbols\nx, y = symbols('x y')\nexpr = x**2 + y**2 + 2*x - 4*y + 8\nprint(expr)\nsolve(expr, [x, y])"
  },
  {
    "example_id": 383,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from math import isqrt\n\nfor x in range(1, 100):\n    if isqrt(120 - isqrt(x)) % 1 == 0:\n        print(x)"
  },
  {
    "example_id": 384,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.833333333333334"
    ],
    "annotated_answers": [
      "-23.5"
    ],
    "solution": "x_intercept_1 = -7 / 3\nx_intercept_2 = -5 / 2\nprint(x_intercept_1 + x_intercept_2)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0",
      "13.0",
      "23.0",
      "13.0",
      "67.0",
      "13.0",
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy as sym\nx, y, z = sym.symbols('x y z')\neq1 = 3*x + y - 17\neq2 = 5*y + z - 14\neq3 = 3*x + 5*z - 41\n\nsol = sym.solve([eq1, eq2, eq3], [x, y, z])\nprint(sol)\nx_value = sol[x]\ny_value = sol[y]\nz_value = sol[z]\nprint(x_value + y_value + z_value)"
  },
  {
    "example_id": 386,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5400.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "import numpy as np\n\nx = 3600\ny = 1.5 * x\n\nprint(y)"
  },
  {
    "example_id": 387,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(4/3 * 6/4 * 8/5 * 10/6 * 12/7 * 14/8)"
  },
  {
    "example_id": 388,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "127.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "def psi(a, b):\n    return 2 * a + 5 * b\n\nprint(psi(psi(3, psi(1, 1)), 9))"
  },
  {
    "example_id": 389,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nroots = solve(x**2 - 2*x - 3, x)\np, q = roots\nprint((p + 1)*(q + 1))"
  },
  {
    "example_id": 390,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def A_and_B(A, B):\n    return (A + B) / 2\n\ndef A_and_B_and_C(A, B, C):\n    return A_and_B(A_and_B(A, B), C)\n\nprint(A_and_B_and_C(3, 5, 8))"
  },
  {
    "example_id": 391,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "from sympy import S\nfrom sympy import solve\n\ndef sum_x_coords(solutions):\n    x_coords = [solution[0] for solution in solutions]\n    return sum(x_coords)\n\ndef find_solutions(a, b):\n    eq = (1/a) + (1/b) - (1/7)\n    return solve(eq, a, b)\n\ndef main():\n    solutions = find_solutions(2, 3)\n    print(sum_x_coords(solutions))\n\nmain()"
  },
  {
    "example_id": 392,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = -2\nprint(P(G(a)))"
  },
  {
    "example_id": 393,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-31.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = 42 / 6\ny = -9 / 2\nproduct = x * y\nprint(product)"
  },
  {
    "example_id": 394,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\n\nx = Symbol('x')\n\n# the original equation\neq1 = (x**2 - 4*x + 3)*(x + 5) - (x**2 + 4*x - 5)*(x - c)\n\n# the simplified equation\neq2 = x**2 - 4*x + 3*x + 15 - x**2 - 4*x + 5*x - 5 + c\n\n# solve for c\nc = solve(eq1 - eq2, c)\n\n# check the solution\nprint(eq1.subs(c, c.evalf()))"
  },
  {
    "example_id": 395,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print((2**10 - 2**8) / (2**7 - 2**6))"
  },
  {
    "example_id": 396,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "2.5"
    ],
    "solution": "a = 1\nb = 1\nc = -1\n\n# Vertical line of symmetry\nx_sym = 2\n\n# Two points\nx1 = 1\ny1 = a*x1**2 + b*x1 + c\nx2 = 4\ny2 = a*x2**2 + b*x2 + c\n\n# Quadratic has two real roots\nn = (y2 - y1) / (x2 - x1)\n\n# Greater root\nroot_greater = n + 2\n\nprint(root_greater)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.5"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "d = 6 + 9\nc = 4 - 6\nprint(d / c)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.014563106796116505",
      "0.014633801489301537",
      "0.014634144667423795",
      "0.01463414633333701",
      "0.014634146341423968",
      "0.014634146341463225",
      "0.014634146341463415",
      "0.014634146341463417",
      "0.014634146341463417",
      "0.014634146341463417"
    ],
    "annotated_answers": [
      "0.015"
    ],
    "solution": "n = 10\ns = 0\nfor i in range(1, n+1):\n    s += 3/206**i\n    print(s)"
  },
  {
    "example_id": 400,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def find_max_workers(x, y):\n    \"\"\"\n    This function returns the maximum number of workers\n    that the company can hire before it goes bankrupt\n    \"\"\"\n    while y > 0:\n        x += 1\n        y = -265*x + 2800\n    return x-1\n\nmax_workers = find_max_workers(0, 2800)\nprint(max_workers)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "a = 27 - 18\nb = 3\nprint(a + b)"
  },
  {
    "example_id": 402,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "peppermint_candies = 15 - 8\nlemon_candies = 2 * (15 - 8) - peppermint_candies\nprint(lemon_candies)"
  },
  {
    "example_id": 403,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import math\nprint(math.ceil(math.pow(math.sqrt(math.fabs(-25)), 3)))"
  },
  {
    "example_id": 404,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.symbols(\"x\")\nh = sympy.sqrt(x/(2+3))\nprint(h.subs(x, -1))"
  },
  {
    "example_id": 405,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "x = 2\na = 2\nb = 9\nc = 4\n\nprint(a + b + c)"
  },
  {
    "example_id": 406,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "8.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    if x % 2 == 0:\n        return x / 2\n    else:\n        return 3 * x + 1\n\na = 14\nb = 16\n\nprint(f(a))\nprint(f(b))"
  },
  {
    "example_id": 407,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def simplify(expr):\n    \"\"\"Simplify the expression.\"\"\"\n    return expr.expand().collect(x).coeff(x)\n\nfrom sympy import symbols, Add, Mul, Pow, expand_mul\n\nx = symbols('x')\nexpr = (7 + 8*x) - 3*(2 + 6*x + 2*x**2) + \\\n       9*(1 + 3*x + 4*x**2 + 12*x**3) - 9*(7 - x**2 - 8*x**3 + 13*x**4)\nprint(simplify(expr))"
  },
  {
    "example_id": 408,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1 + 7\nprint(x)"
  },
  {
    "example_id": 409,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "0.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Use sympy to find the graph of the function\nfrom sympy import Symbol, Eq, solve, pprint\nx = Symbol('x')\ny = (2/(x**2 + x - 6))\npprint(Eq(y, 0))"
  },
  {
    "example_id": 410,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print( (3-4)**2 + 2*(3+4) )"
  },
  {
    "example_id": 411,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import solve, symbols\nx = symbols('x')\nsol = solve((x**2 - 7*x + 7) - (-3), x)\nprint(sol[0] + sol[1])"
  },
  {
    "example_id": 412,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "3.0",
      "33.0",
      "37.0",
      "11.0"
    ],
    "annotated_answers": [
      "112.0"
    ],
    "solution": "from sympy import sqrt, simplify\n\nresult = simplify((2/(1 + 2*sqrt(3)) + 3/(2 - sqrt(3)))/sqrt(3))\nprint(result)"
  },
  {
    "example_id": 413,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "630.0"
    ],
    "annotated_answers": [
      "630.0"
    ],
    "solution": "sum_of_multiples = 0\nsum_of_evens = 0\nfor i in range(1, 21):\n    sum_of_multiples += 5 * i\n    sum_of_evens += 2 * i\nprint(sum_of_multiples - sum_of_evens)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "60.0",
      "2.0",
      "2.0",
      "2.0",
      "60.0",
      "2.0"
    ],
    "annotated_answers": [
      "16384.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nk = Symbol('k')\neq = x**2 + k*x + 15\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 415,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from math import sqrt\n\ndef distance(a, b):\n    return sqrt((b[0] - a[0]) ** 2 + (b[1] - a[1]) ** 2)\n\ndef line_segment_length(point_a, point_b):\n    return distance(point_a, point_b)\n\nlength = line_segment_length((-4, 1), (1, 13))\nprint(length)"
  },
  {
    "example_id": 416,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-285.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "square_numbers = [i**2 for i in range(1,11)]\nmissing_number = 100 - sum(square_numbers)\nprint(missing_number)"
  },
  {
    "example_id": 417,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "3.0",
      "7.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import *\n\nx = Symbol('x')\n\nprint(simplify(12/x**2 * x**4/14*3/3*x))"
  },
  {
    "example_id": 418,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 1\nb = 1\nx = 6\ny = a * x + b\nprint(y)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "a = -2\nb = 3\nprint(a**2 + b**2)"
  },
  {
    "example_id": 420,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sym\n\nx = sym.symbols('x')\n\neq1 = x**4 - 5*x**2 + 6\neq2 = x**4 - 5*x**2 + 6\n\nsol = sym.solve([eq1, eq2], [x])\n\nprint(sol)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import expand\nprint(expand(3**4-3**3)/(3**3-3**2))"
  },
  {
    "example_id": 422,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "9.0",
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import S, Eq\nx = S('x')\nexpr = Eq((x-5)/(x**2-9), 0)\nprint(expr.simplify())"
  },
  {
    "example_id": 423,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(3 * (6 * 8))"
  },
  {
    "example_id": 424,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# The sum of two numbers is 3\n# The difference of the squares of the numbers is 33\n# The absolute value of the difference of the two numbers is 3\nprint(3)"
  },
  {
    "example_id": 425,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = sympy.Symbol('z')\nf = 2*z**2 + 13*z + 21\na = f.coeff_monomial(z)\nb = f.coeff_monomial(2*z)\nprint(2*a + b)"
  },
  {
    "example_id": 426,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    if x <= 3:\n        return 9 - 2 * x\n    else:\n        return a * x + b\n\ndef g(x):\n    return f(f(x))\n\nprint(g(3))\nprint(g(9 - 2 * 3))\nprint(g(g(3)))"
  },
  {
    "example_id": 427,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "a = -1\nb = 3\nc = 1\n\ntotal = a + b + c\nprint(total)"
  },
  {
    "example_id": 428,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "36.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "m = (8-0) / (7-9)\nb = 8 - m * 7\nprint(m, b)"
  },
  {
    "example_id": 429,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# The largest and smallest of three consecutive terms in an arithmetic sequence differ by 14.\n# Half of the smallest term is added to each term and the sum of the resulting three numbers is 120. \n# What is the value of the original smallest term?\n\n\n# Step 1\n# Find the smallest term\n# The difference between the three consecutive terms is 14.\n# Hence, the sum of the three consecutive terms is:\n# 3 * 14 = 42\n\n# Step 2\n# The sum of the three consecutive terms is 120\n# The difference between the three consecutive terms is 14.\n# Hence, the sum of the three consecutive terms is:\n# 3 * 14 = 42\n\n# Step 3\n# Half of the smallest term is added to each term and the sum of the resulting three numbers is 120.\n# Hence, the sum of the three consecutive terms is:\n# 120 = 3 * 42 / 2\n# Hence, the value of the original smallest term is:\n# 42\n\nprint(42)"
  },
  {
    "example_id": 430,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "def letter_count(n):\n    if n < 0 or n > 20:\n        return None\n    else:\n        return len(str(n))\n\nprint(len(set(range(0, 21)) - set(map(letter_count, range(0, 21)))))"
  },
  {
    "example_id": 431,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nexpr = (sqrt(12*x) + 12)*(sqrt(3*x) - 6) - 4*(x + 3) - x + 34\nsolve(expr, x)"
  },
  {
    "example_id": 432,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 3\nprint(x**2 - 6*x + 13)"
  },
  {
    "example_id": 433,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-17.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "m = -2\nn = -15\nprint(m+n)"
  },
  {
    "example_id": 434,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "10.0",
      "4.0",
      "10.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import solve, symbols\n\nx, y = symbols('x y')\n\ndef circle_equation(x, y):\n    return x**2 - 4*x + y**2 - 6*y - 36\n\nx_sol, y_sol = solve(circle_equation(x, y), (x, y))\nprint(x_sol)\nprint(y_sol)"
  },
  {
    "example_id": 435,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# calculate f(5)\nf_5 = 2 * 5 - 3\nprint(f_5)\n\n# calculate g(f(5) - 1)\ng_f_5_minus_1 = 5 + 1\nprint(g_f_5_minus_1)"
  },
  {
    "example_id": 436,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "from math import sqrt\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef largest_prime_factor(n):\n    return max(prime_factors(n))\n\nprint(largest_prime_factor(9951))"
  },
  {
    "example_id": 437,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "A = 14\nB = 8\nA_B = A - B\nprint(A_B)"
  },
  {
    "example_id": 438,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "451.9"
    ],
    "annotated_answers": [
      "228.3"
    ],
    "solution": "height_now = 452\ngrowth_per_day = 0.05\nheight_2_weeks_ago = height_now - (2 * growth_per_day)\nprint(height_2_weeks_ago)"
  },
  {
    "example_id": 439,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "64.0",
      "1.0",
      "2.0",
      "64.0",
      "1.0",
      "64.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import S, simplify, symbols\nx = symbols('x')\nf = (1/(x-64)) + (1/(x**2-64)) + (1/(x**3-64))\nprint(simplify(f))"
  },
  {
    "example_id": 440,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "sum(range(1, 5*2+1, 2))"
  },
  {
    "example_id": 441,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import simplify, expand\nfrom sympy import S, symbols\nx, y, z = symbols('x y z')\nexpr = (y - x)**2 / (y - z) * (z - x) + (z - y)**2 / (z - x) * (x - y) + (x - z)**2 / (x - y) * (y - z)\nprint(simplify(expand(expr)))"
  },
  {
    "example_id": 442,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "12.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import sqrt\n\nA = 9\nB = 2 * sqrt(3)\nC = 3\n\nprint(A + B + C)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.635588784190883"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 1\ny = 2\nz = 3\n\na = 6*x*y*z + 30*x*y + 21*x*z + 2*y*z + 105*x + 10*y + 7*z\nb = 812\n\n# solve for x, y, z\nx = (b - 7*z - 10*y - 105*x)/(6*y*z + 30*x*y + 21*x*z + 2*y*z)\ny = (b - 7*z - 10*y - 105*x)/(6*x*z + 30*x*y + 21*x*z + 2*x*z)\nz = (b - 7*z - 10*y - 105*x)/(6*x*y + 30*x*y + 21*x*z + 2*x*y)\n\n# find x+y+z\nprint(x+y+z)"
  },
  {
    "example_id": 444,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "217.0"
    ],
    "solution": "x = 3\ny = 4\nx_squared = x**2\ny_squared = y**2\nx_minus_y_squared = x_squared - y_squared\nprint(x_minus_y_squared)"
  },
  {
    "example_id": 445,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 25 - 11\nprint(x)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "import numpy as np\n\ndef count_points_on_boundary_and_inside(y_min, y_max, x_min, x_max):\n    count = 0\n    for x in np.arange(x_min, x_max+1):\n        for y in np.arange(y_min, y_max+1):\n            if y == x or y == -x**2 + 35/4:\n                count += 1\n    return count\n\ndef main():\n    y_min = -1\n    y_max = 1\n    x_min = -1\n    x_max = 1\n    boundary = count_points_on_boundary_and_inside(y_min, y_max, x_min, x_max)\n    inside = count_points_on_boundary_and_inside(y_min, y_max, x_min, x_max)\n    print(\"There are\", boundary, \"lattice points on the boundary and\", inside, \"inside the region.\")\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 447,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def star(a, b):\n    return (a + b) * b\n\nprint(star(3, 5) - star(5, 3))"
  },
  {
    "example_id": 448,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import symbols\n\nx = symbols('x')\nprint(solve(9*x**2 + 18*x + 7, x))"
  },
  {
    "example_id": 449,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.4833333333333334",
      "0.4"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "import math\n\n# Anna's time\na = 1/2\n\n# Bertram's time\nb = 3/4\n\n# Carli's time\nc = 2/5\n\n# David's time\nd = 10/12\n\n# Sum of times\ntotal = a + b + c + d\n\n# Check the answer\nprint(total)\n\n# Check the answer\nprint(2/5)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "b = -4\nc = 16\nb_plus_c = b + c\nprint(b_plus_c)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import sqrt\n\ndef f(x):\n    if x >= 0:\n        return -sqrt(x)\n    else:\n        return x**2\n\nprint(f(f(f(f(512)))))"
  },
  {
    "example_id": 452,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "A = 1\nB = -2\nC = 2\nr = 5\nprint(A+B+C+r)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "from sympy import sqrt\nprint(sqrt(5**5+5**5+5**5+5**5+5**5))"
  },
  {
    "example_id": 454,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "age = 27\nfather_age = 100 - age\nsum_age = int(str(father_age)[::-1])\nprint(sum_age)"
  },
  {
    "example_id": 455,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 0:\n        return n**2 - 3*n + 1\n    else:\n        return n**2 + 1\n\ndef g(n):\n    return f(f(f(f(f(f(n))))))\n\nprint(g(2))"
  },
  {
    "example_id": 456,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "14.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import sqrt\n\ndenominator = 1 / (sqrt(2) + sqrt(8) + sqrt(32))\nprint(denominator)"
  },
  {
    "example_id": 457,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.74110112659225"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import sqrt\na = sqrt(3)\nb = 16 ** (1/5)\nsum_ab = a + b\nprint(sum_ab)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import log, exp\n\nx = log(81/256, 3/4)\nprint(x)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "def simplify(expression):\n    # your code here\n    return 1"
  },
  {
    "example_id": 460,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def f(x):\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 0\n    elif x == 2:\n        return 1\n    elif x == 3:\n        return 3\n    elif x == 4:\n        return 6\n\ndef g(x):\n    return f(x) - x\n\nprint(len(set(g(x) for x in range(5))))"
  },
  {
    "example_id": 461,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "208.0"
    ],
    "solution": "# a*b = 2a+b\n# 5a-4 = b-1/3\n\na = 2\nb = 3\n\nprint(a, b)"
  },
  {
    "example_id": 462,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 7\nprint(n)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import fabs\nfor x in range(-4, 4):\n    if fabs(2 - x) == 3:\n        print(x)"
  },
  {
    "example_id": 464,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-40.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "max_value = 4 * (2 - 7) * 2\nprint(max_value)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "total_chimes = 12 * 3\nprint(total_chimes)"
  },
  {
    "example_id": 466,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "# f(3) = 5\n# f(3x) = f(x) + 2\n\n# f(x) = f(3) + 2\n# f(x) = 5 + 2\n# f(x) = 7\n\n# f(11) = f(f(3)) + 2\n# f(11) = 7 + 2\n# f(11) = 9\n\nprint(9)"
  },
  {
    "example_id": 467,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "def f(x):\n    return x\n\ndef recursive_f(x):\n    if x == 1:\n        return 1\n    else:\n        return f(recursive_f(x-1))\n\nresult = 0\nfor i in range(1,10):\n    result += recursive_f(i)\n\nprint(result)"
  },
  {
    "example_id": 468,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(8 * (6 ** 2 - 3 * 11) // 8 + 3)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 470,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x = 4 + 2 ** 3\nprint(x)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "a = 33 - 14\nb = 14\nprint(a + b)"
  },
  {
    "example_id": 473,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from sympy import sqrt\nx = 5\ny = 2\n\n# sqrt(x^3 - 2^y) = sqrt(5^3 - 2^2)\n#                  = sqrt(125 - 4)\n#                  = sqrt(121)\n#                  = 11\nprint(sqrt(x**3 - 2**y))"
  },
  {
    "example_id": 474,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0",
      "2.0",
      "57.0",
      "2.0",
      "2.0",
      "57.0",
      "2.0",
      "7.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nroots = solve(x**2 + 7*x - 2, x)\nprint(roots[0]**2 + roots[1]**2)"
  },
  {
    "example_id": 475,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(5*1+4)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15554.0"
    ],
    "annotated_answers": [
      "15554.0"
    ],
    "solution": "def get_term(n):\n    return 2222 + 1010 * n\n\nsixth = get_term(5)\nseventh = get_term(6)\nprint(sixth + seventh)"
  },
  {
    "example_id": 477,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x_intercept = (6*4 - 7*3) / (4 - 3)\nprint(x_intercept)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3600.0"
    ],
    "annotated_answers": [
      "3600.0"
    ],
    "solution": "area = 3491 * 3491\nchange_in_area = (3491 - 60) * (3491 + 60) - area\nprint(change_in_area)"
  },
  {
    "example_id": 479,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "m = 49\nn = 3\nprint(m-n)"
  },
  {
    "example_id": 480,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print((15 + 5) * (15 - 5))"
  },
  {
    "example_id": 481,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol(\"x\")\nf = 2/(x+1)\nf_inv = solve(f-1/5, x)\nprint(f_inv)"
  },
  {
    "example_id": 482,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "9.0",
      "3.0",
      "1.0",
      "9.0",
      "3.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "import sympy as sym\n\nx, y = sym.symbols('x, y')\neq = x**2 + 6*x + y**2 + 8*y\n\ncenter_x, center_y = sym.solve(eq, (x, y))\nprint(center_x + center_y)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.8333333333333333"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 4 * 3 / 3\ny = 3 * 4 / 4\nprint((2 * x + y) / (3 * x - 2 * y))"
  },
  {
    "example_id": 484,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "2.0",
      "25.0",
      "2.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\ndistance = sympy.sqrt(x**2 + y**2)\nn = sympy.solve(distance - 5, y)\nprint(n)"
  },
  {
    "example_id": 485,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(int(abs(23/9)))"
  },
  {
    "example_id": 486,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# 7x/y + 14y/x = 4\n# 7x + 14y = 4(y+x)\n# 7x + 14y = 4(y+x)\n# 7x + 14y - 4(y+x) = 0\n# 7x - 4y - 4x + 4y = 0\n# 7x - 8x + 4y = 0\n# -1x + 4y = 0\n# x = 4y\n# x = 4(56/y)\n# x = 224/56\n# x = 4"
  },
  {
    "example_id": 487,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\n\na = int(math.ceil(math.sqrt(15)))\nb = int(math.floor(math.sqrt(15)))\nprint(b - a)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def g(x):\n    return 2 * x - 1\n\ndef f(x):\n    return g(g(x)) - g(x)\n\nprint(f(3))"
  },
  {
    "example_id": 489,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.333333333333333"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "d = 8 / 9 * 6\nprint(d)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0",
      "22.0",
      "24.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 4\nwhile n <= 50:\n    n = n + 2\n    print(n)"
  },
  {
    "example_id": 491,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "annual_cost = 650\nannual_savings = 1200\nyears = annual_cost / annual_savings\nprint(int(years))"
  },
  {
    "example_id": 492,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\nx1, y1 = sympy.symbols('x1 y1')\nx2, y2 = sympy.symbols('x2 y2')\nx3, y3 = (x1 + x2) / 2, (y1 + y2) / 2\nprint(x3, y3)"
  },
  {
    "example_id": 493,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nprint(a+b+c)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-139.0",
      "24.0",
      "3343.0",
      "24.0",
      "-19.0",
      "12.0",
      "3343.0",
      "12.0",
      "-35.0",
      "105.0",
      "-139.0",
      "24.0",
      "3343.0",
      "24.0",
      "-19.0",
      "12.0",
      "3343.0",
      "12.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "from sympy import *\n\n# The expression 24x^2 - 19x - 35 can be factored as (Ax - 5)(2Bx + C)\n# where A, B, and C are positive numbers.\n# To find the values of A, B, and C, we can use the quadratic formula.\n\n# First, we solve for x.\nx = (-19 + sqrt(19^2 + 4 * 24 * -35)) / 24\n\n# Next, we substitute x into the expressions for A, B, and C.\nA = x - 5\nB = 2 * x\nC = -35\n\n# Now we can find the values of A, B, and C.\nprint(A, B, C)\n\n# Finally, we can find AB - 3C.\nprint(A * B - 3 * C)"
  },
  {
    "example_id": 495,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "3.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import sympy as sym\n\nx, y, z = sym.symbols('x y z')\n\neq1 = 3 * x + 4 * y - 12 * z\neq2 = -2 * x - 3 * y + 9 * z\n\nsol = sym.solve((eq1, eq2), (x, y, z))\n\nprint(sol)"
  },
  {
    "example_id": 496,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "128.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\nprint(sympy.log(64*sympy.sqrt(8), sympy.sqrt(8)))"
  },
  {
    "example_id": 497,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-31.0"
    ],
    "annotated_answers": [
      "-13.5"
    ],
    "solution": "p = -14\nq = -17\nprint(p + q)"
  },
  {
    "example_id": 498,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "import math\n\ndef number_of_endpoints(figure_index):\n    if figure_index == 1:\n        return 3\n    elif figure_index == 2:\n        return 5\n    else:\n        return 7\n\nn = 3\nendpoints = []\nfor i in range(n):\n    figure_index = i + 1\n    endpoints.append(number_of_endpoints(figure_index))\n\nprint(sum(endpoints))"
  },
  {
    "example_id": 499,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-75.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, d, e = -2, -20, -53\nsum = a + d + e\nprint(sum)"
  },
  {
    "example_id": 500,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.4",
      "-39.0",
      "10.0",
      "1.0",
      "2857142857.142857"
    ],
    "annotated_answers": [
      "-6.5"
    ],
    "solution": "def get_wavelength(energy_ratio):\n    \"\"\"Return the wavelength of a photon with energy 2000 times that of a photon of red light.\n\n    Parameters\n    ----------\n    energy_ratio : float\n        The ratio of the energy of the photon to the energy of a photon of red light.\n\n    Returns\n    -------\n    wavelength : float\n        The wavelength of the photon in meters.\n    \"\"\"\n    # Wavelength of red light is approximately 7 x 10^-7 meters\n    wavelength_red = 7e-7\n    # Energy of photon is inversely proportional to its wavelength\n    energy_photon = 2000 * wavelength_red / wavelength_red\n    # Energy of photon is given by E = hc / wavelength\n    # where h is Planck's constant and c is the speed of light\n    h = 6.62607004e-34  # Planck's constant in J s\n    c = 299792458  # speed of light in m s^-1\n    wavelength = energy_photon * h / c\n    return wavelength\n\n\ndef get_energy_ratio(wavelength):\n    \"\"\"Return the ratio of the energy of a photon to the energy of a photon of red light.\n\n    Parameters\n    ----------\n    wavelength : float\n        The wavelength of the photon in meters.\n\n    Returns\n    -------\n    energy_ratio : float\n        The ratio of the energy of the photon to the energy of a photon of red light.\n    \"\"\"\n    # Wavelength of red light is approximately 7 x 10^-7 meters\n    wavelength_red = 7e-7\n    # Energy of photon is inversely proportional to its wavelength\n    energy_photon = 2000 * wavelength_red / wavelength_red\n    energy_ratio = energy_photon / wavelength_red\n    return energy_ratio\n\n\ndef get_scientific_notation(a, b):\n    \"\"\"Return a string representing a number in scientific notation.\n\n    Parameters\n    ----------\n    a : float\n        The coefficient of the number.\n    b : float\n        The power of the number.\n\n    Returns\n    -------\n    scientific_notation : str\n        A string representing the number in scientific notation.\n    \"\"\"\n    scientific_notation = f\"{a:.1e} x 10^{b:.0f}\"\n    return scientific_notation\n\n\ndef main():\n    # Photons of red light have a wavelength of approximately 7 x 10^-7 meters\n    wavelength_red = 7e-7\n    # Energy of photon is inversely proportional to its wavelength\n    energy_photon = 2000 * wavelength_red / wavelength_red\n    # Energy of photon is given by E = hc / wavelength\n    # where h is Planck's constant and c is the speed of light\n    h = 6.62607004e-34  # Planck's constant in J s\n    c = 299792458  # speed of light in m s^-1\n    wavelength = energy_photon * h / c\n    energy_ratio = energy_photon / wavelength_red\n    scientific_notation = get_scientific_notation(a=wavelength, b=1)\n    print(f\"The wavelength of the photon is {scientific_notation} meters.\")\n    print(f\"The energy ratio of the photon to the photon of red light is {energy_ratio}.\")\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 501,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0",
      "1001.0",
      "1002.0",
      "1003.0",
      "1004.0",
      "1005.0",
      "1006.0",
      "1007.0",
      "1008.0",
      "1009.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "for i in range(1000, 9999):\n    for j in range(i - 1, -1, -1):\n        if i % j == 0:\n            print(i)\n            break"
  },
  {
    "example_id": 502,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nsolution = sympy.solve(x + 1 / x - 1, x - 2 / x + 2)\nprint(solution)"
  },
  {
    "example_id": 503,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "129600.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "V = 30 * 180 * 24\nprint(V)"
  },
  {
    "example_id": 504,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "m = 1\nn = 2\nprint(m + n)"
  },
  {
    "example_id": 505,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "people_per_hour = 5\nhours = 3\ntotal_people = people_per_hour * hours\nprint(total_people)"
  },
  {
    "example_id": 506,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "meals_needed = 18 / 12\nprint(meals_needed)"
  },
  {
    "example_id": 507,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "3.2"
    ],
    "solution": "def f(x):\n    return 2*x + 2\n\nprint(f(10))"
  },
  {
    "example_id": 508,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "x = 7\ny = 6\nprint(x)"
  },
  {
    "example_id": 509,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "from math import sqrt\n\nf = lambda x: x**3\nf_inv = lambda y: y**(1/3)\n\nf_inv_8 = f_inv(8)\nf_8 = f(f_inv_8)\n\nprint(f_inv_8 / f_8**(-1))"
  },
  {
    "example_id": 510,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 2\nwhile x - 2 > 0:\n    x = (x + (1/x - 2))/2\nprint(x)"
  },
  {
    "example_id": 511,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from math import ceil\nfrom math import sqrt\n\nprint(ceil(sqrt(20)) ** 2)"
  },
  {
    "example_id": 512,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    return 5*x**2 + 3*x + 4\nprint(f(-2))"
  },
  {
    "example_id": 513,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# 120% of 30 = 36\n# 130% of 20 = 26\nprint(36 - 26)"
  },
  {
    "example_id": 514,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "print((13+5)*(13-5))"
  },
  {
    "example_id": 515,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# number of negative integers\nn = -100\nwhile n < 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 516,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import simplify, sqrt\ndenominator = simplify(1/(1 + sqrt(2) - sqrt(3)))\nprint(denominator)"
  },
  {
    "example_id": 517,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "for x in range(1, 10):\n    if x**2 + 6**2 == 10**2:\n        print(x)"
  },
  {
    "example_id": 518,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.48526489",
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import numpy as np\nfrom scipy import optimize\nfrom scipy.optimize import minimize\n\ndef f(b):\n    return y_2(b) - y_1(7)\n\ndef y_2(b):\n    return 6 * b + 1\n\ndef y_1(x):\n    return x**2 + 2 * x + 7\n\nres = minimize(f, 0)\nprint(res.x)"
  },
  {
    "example_id": 519,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "print(-2 * 6 / (-2 - 4))"
  },
  {
    "example_id": 520,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "# y >= |x|\n# y <= -|x| + 3\n# -|x| + 3 >= y\n# |x| + 3 >= y\n# x >= -|x| - 3\n# x >= -3\n# x <= 3\n\narea = (3 - (-3)) * (3 - (-3))\nprint(area)"
  },
  {
    "example_id": 521,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "from math import ceil\n\ndef sum_integers(n):\n    return sum(range(n+1))\n\nn = ceil(7/2)\nprint(sum_integers(n))"
  },
  {
    "example_id": 522,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7\nprint(x)"
  },
  {
    "example_id": 523,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1083.2142857142858"
    ],
    "annotated_answers": [
      "2300.0"
    ],
    "solution": "def get_cost(feather_weight, gold_weight):\n    def get_gold_cost(gold_weight):\n        return 1402 * gold_weight / 14\n\n    def get_feather_cost(feather_weight):\n        return 932 * feather_weight / 8\n\n    return get_feather_cost(feather_weight) + get_gold_cost(gold_weight)\n\nprint(get_cost(5, 5))"
  },
  {
    "example_id": 524,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import sympy as sp\nx = sp.symbols('x')\nk = (x**2 - 8*x + 5).subs(x, 0)\nprint(k)"
  },
  {
    "example_id": 525,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def consecutive_odd_numbers(n):\n    return [i for i in range(1, n + 1, 2)]\n\ndef consecutive_even_numbers(n):\n    return [i for i in range(2, n + 1, 2)]\n\ndef sum_of_consecutive_numbers(numbers):\n    return sum(numbers)\n\ndef sum_of_consecutive_even_numbers(n):\n    return sum_of_consecutive_numbers(consecutive_even_numbers(n))\n\ndef sum_of_consecutive_odd_numbers(n):\n    return sum_of_consecutive_numbers(consecutive_odd_numbers(n))\n\ndef problem(n):\n    return sum_of_consecutive_even_numbers(n) - sum_of_consecutive_odd_numbers(n - 1)\n\ndef solution(n):\n    return consecutive_even_numbers(n)[0]\n\nprint(solution(8))"
  },
  {
    "example_id": 526,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 3\ny = 2\nprint((2 * x**3 - 3 * y**2) / 6)"
  },
  {
    "example_id": 527,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "7.0",
      "2.0",
      "2.0",
      "2.0",
      "7.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "158.0"
    ],
    "solution": "import sympy as sym\nx, y = sym.symbols('x y')\navg = 7\ng_mean = sym.sqrt(19)\n\nx_avg = (avg + x) / 2\ny_avg = (avg + y) / 2\n\nx_avg_sq = x_avg ** 2\ny_avg_sq = y_avg ** 2\n\nx_y_avg_sq = (x_avg + y_avg) ** 2\n\nprint(x_y_avg_sq - x_avg_sq - y_avg_sq)"
  },
  {
    "example_id": 528,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = 30\ny = 40\n\nif x < y:\n    print(y // x)\nelse:\n    print(\"She can't buy any oranges.\")"
  },
  {
    "example_id": 529,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5",
      "1.5",
      "1.5",
      "1.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# a = 2, b = 1, c = 1\n# average of a and 2b is 7\n# average of a and 2c is 8\n# average of a and b is 4\n# average of a and c is 4\n\nprint((2 + 1) / 2)\nprint((2 + 1) / 2)\nprint((2 + 1) / 2)\nprint((2 + 1) / 2)"
  },
  {
    "example_id": 530,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = -2\nb = 4\nc = 5\nh = -1\nk = c + a * (h)**2\nprint(k)"
  },
  {
    "example_id": 531,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "82.0",
      "333.0",
      "82.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\n\n# line l passes through the midpoint of (1,2) and (19,4)\nline_l = sympy.Line((1, 2), (19, 4))\n\n# line l is perpendicular to the line passing through (0,7) and (4,-3)\nline_m = sympy.Line((0, 7), (4, -3))\n\n# find the point on line l whose x-coordinate is 20\npoint_on_l = line_l.projection(sympy.Point(20, y))\n\n# find the y-coordinate of the point on l whose x-coordinate is 20\nprint(point_on_l.y)"
  },
  {
    "example_id": 532,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\nn = int(math.ceil(math.log(255/512, 4)))\nprint(n)"
  },
  {
    "example_id": 533,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "800000.0"
    ],
    "annotated_answers": [
      "800000.0"
    ],
    "solution": "print((1002**2 - 502**2) + (298**2 - 202**2))"
  },
  {
    "example_id": 534,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0",
      "19.0",
      "24.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "import sympy\n\nx, y, z = sympy.symbols('x y z')\n\neq1 = x + y - z - 8\neq2 = x - y + z - 18\neq3 = -x + y + z - 30\n\nsol = sympy.solve((eq1, eq2, eq3), (x, y, z))\n\nprint(sol)"
  },
  {
    "example_id": 535,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for m in range(1, 100):\n    print(m)"
  },
  {
    "example_id": 536,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "m = 3\nn = 7\np = 2\n\nm_plus_n_plus_p = m + n + p\nprint(m_plus_n_plus_p)"
  },
  {
    "example_id": 537,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Runner A's portion\nportion_a = 100 / 5\n\n# Runner B's portion\nportion_b = portion_a * 1.5\n\n# Runner C and D's combined portion\nportion_cd = portion_a + portion_b\n\n# Runner E's portion\nportion_e = 10\n\n# Total race portion\ntotal_portion = portion_a + portion_b + portion_cd + portion_e\n\nprint(portion_b)"
  },
  {
    "example_id": 538,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40000.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "area = 200 ** 2\nprint(area)"
  },
  {
    "example_id": 539,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import ceiling\nfrom sympy import sqrt\n\nvalue = ceiling(-sqrt(23))\nprint(value)"
  },
  {
    "example_id": 540,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def f(x):\n    if x >= 3:\n        return 2 * x - 5\n    else:\n        return -x + 5\n\ndef ff(x):\n    if x >= 3:\n        return 2 * (2 * x - 5) - 5\n    else:\n        return 2 * (-x + 5) + 5\n\nprint(ff(3))"
  },
  {
    "example_id": 541,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1023.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "a = 1\nb = 3\nwhile b < 100:\n    diff = b**2 - a**2\n    if diff == 128:\n        print(a*b)\n    a = b\n    b = a + 2"
  },
  {
    "example_id": 542,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "989.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "least_positive_integer = int(987 + 2)\nprint(least_positive_integer)"
  },
  {
    "example_id": 543,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(18/24)"
  },
  {
    "example_id": 544,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import itertools\n\ndef non_equi_triangles(n):\n    for a, b, c in itertools.permutations(range(1, n + 1), 3):\n        if a**2 + b**2 == c**2:\n            continue\n        yield a, b, c\n\ndef equi_triangles(n):\n    for a, b, c in itertools.permutations(range(1, n + 1), 3):\n        if a**2 + b**2 == c**2:\n            yield a, b, c\n\ndef is_integer_sequence(seq):\n    return all(int(i) == i for i in seq)\n\ndef triangles_with_integer_sides(n):\n    for a, b, c in non_equi_triangles(n):\n        if is_integer_sequence((a, b, c)):\n            yield a, b, c\n\ndef triangles_with_integer_sides_and_perimeter_60(n):\n    for a, b, c in triangles_with_integer_sides(n):\n        if a + b + c == 60:\n            yield a, b, c\n\nprint(sum(1 for a, b, c in triangles_with_integer_sides_and_perimeter_60(10)))"
  },
  {
    "example_id": 545,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "print(4 * 3)"
  },
  {
    "example_id": 546,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-35.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "total_value = 75\nnumber_of_dimes = 11\nnumber_of_nickels = total_value - (number_of_dimes * 10)\nprint(number_of_nickels)"
  },
  {
    "example_id": 547,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "185.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "smaller_weight = 185 - 20\nlargest_weight = smaller_weight + 20\nprint(largest_weight)"
  },
  {
    "example_id": 548,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 0:\n        return n**2 - 4*n - 1\n    else:\n        return n**2\n\ndef g(n):\n    return f(f(f(f(n))))\n\nprint(g(4))"
  },
  {
    "example_id": 549,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "print(int(11.1) + 2 * int(0.5 * 11.1))"
  },
  {
    "example_id": 550,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.721347520444482",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.log(4, 64**(1/3))\nprint(x)"
  },
  {
    "example_id": 551,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\n\ndef g(x):\n    return sqrt(x)\n\ndef t(x):\n    return 3 - g(x)\n\nprint(t(g(16)))"
  },
  {
    "example_id": 552,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 553,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "9.0",
      "1.0",
      "3.0",
      "8.0",
      "1.0",
      "2.0",
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, expand_mul, collect\nx = Symbol('x')\nf = expand_mul(1/(x**2-7) + 1/(x**3-8) + 1/(x**4-9))\nprint(collect(f, x))"
  },
  {
    "example_id": 554,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import ceil, floor, sqrt\n\nprint(ceil(sqrt(10)) + floor(sqrt(10)))"
  },
  {
    "example_id": 555,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4000.0"
    ],
    "annotated_answers": [
      "4000.0"
    ],
    "solution": "print(1000 / 0.25)"
  },
  {
    "example_id": 556,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# There are 5 fewer quarters in the first pile than in the second pile\n# There are 4 more quarters in the second pile than in the third pile\n# The fourth pile has 3 times as many quarters as the second pile\n\n# If there are x quarters in the second pile, then there are\n# 4 + x quarters in the third pile\n# 4 + x + 5 quarters in the first pile\n# 4 + x + 5 + x quarters in the fourth pile\n\n# Therefore, the number of quarters in the fourth pile is:\nx = 27 - 4 - 5 - 5\nprint(x)"
  },
  {
    "example_id": 557,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "367.6470588235294"
    ],
    "annotated_answers": [
      "368.0"
    ],
    "solution": "metric_hp = 500 / 1.36\nprint(metric_hp)"
  },
  {
    "example_id": 558,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "triangle = 4\nsquare = 1\ndiamond = 2\nclubsuit = 3\n\n# first equation\nsquare = clubsuit\n\n# second equation\ntriangle = diamond + diamond + diamond + diamond + diamond\n\n# third equation\ntriangle = clubsuit + diamond\n\nprint(square)"
  },
  {
    "example_id": 559,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "x = 7\nprint(x**2 - 1 + x + 7)"
  },
  {
    "example_id": 560,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# 3x - 4 > 0\n# 3x > 4\n# x > 1\n\n# 6x^2 - 3x + 5 > 10\n# 6x^2 - 3x > 15\n# 6x^2 - 2x > 15\n# 6x^2 - 2x + 1 > 16\n# 6x^2 - 2x + 1 - 16 > 0\n# (3x - 2)^2 > 16\n\n# x > 2\n# x > 1\n\nprint(2)"
  },
  {
    "example_id": 561,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def profit_loss(quantity):\n    return quantity**2 - 8*quantity - 33\n\ndef break_even(quantity):\n    return profit_loss(quantity) == 0\n\ndef find_break_even(start, end):\n    for quantity in range(start, end):\n        if break_even(quantity):\n            return quantity\n    return None\n\nprint(find_break_even(0, 100))"
  },
  {
    "example_id": 562,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.1818181818181819"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "mike_rate = 13 / 4\njosh_rate = 2 * mike_rate\nmike_distance = josh_rate / (1 - josh_rate)\nprint(mike_distance)"
  },
  {
    "example_id": 563,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(int(pow(pow(7/4, 2), 2)))"
  },
  {
    "example_id": 564,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10920.249999999998"
    ],
    "annotated_answers": [
      "920.25"
    ],
    "solution": "import math\n\ndeposit = 10000\nrate = 0.045\nnum_years = 2\n\ninterest = deposit * math.pow(1 + rate, num_years)\nprint(interest)"
  },
  {
    "example_id": 565,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "630.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "term1 = 30\nterm2 = 60\nterm_21 = term1 + 20 * (term2 - term1)\nprint(term_21)"
  },
  {
    "example_id": 566,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(3 + 5)"
  },
  {
    "example_id": 567,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3333333333333333"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "minutes = 20 / 60\nprint(minutes)"
  },
  {
    "example_id": 568,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "a = 3\nb = 10\nc = a*b\nprint(c)"
  },
  {
    "example_id": 569,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nproduct = a * b * c\nprint(product)"
  },
  {
    "example_id": 570,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "print(5 + 500 * 10 / 100)"
  },
  {
    "example_id": 571,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "7.0",
      "2.0",
      "12.0",
      "2.0",
      "12.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\ny = symbols('y')\nAB = sqrt((x-0)**2 + (y-7)**2)\nBC = sqrt((x-1)**2 + (y-0)**2)\nCD = sqrt((x-12)**2 + (y+2)**2)\nDA = sqrt((x-7)**2 + (y-8)**2)\n\np = (AB+BC+CD+DA)/2\narea = p.diff(x)\n\nprint(area)"
  },
  {
    "example_id": 572,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "m = 7\nn = 8 - m\nprint(abs(m-n))"
  },
  {
    "example_id": 573,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0",
      "32.0",
      "18.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve((x**2+y**2-14*x-48*y), y)\nprint(solution[0])"
  },
  {
    "example_id": 574,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.21"
    ],
    "solution": "a = 2.6\nb = -a\nc = 3.6\nprint(b+c)"
  },
  {
    "example_id": 575,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nd = solve(2*x**2 + 3*x - 5, x)[0]\ne = solve(2*x**2 + 3*x - 5, x)[1]\nprint((d-1)*(e-1))"
  },
  {
    "example_id": 576,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.11728713807222"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 2 ** (1/4)\nb = 4 ** (3/8)\nprint(a ** (2/5) * b ** (2/25))"
  },
  {
    "example_id": 577,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51529.0"
    ],
    "annotated_answers": [
      "33840.0"
    ],
    "solution": "sum_of_product = 454 / 2\nsum_of_positive_integers = 454 - sum_of_product\nlargest_product = sum_of_positive_integers * sum_of_product\nprint(largest_product)"
  },
  {
    "example_id": 578,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# 2(6) + 4(3) = 2*6 + 4*3 = 12 + 12 = 24\n# 8(3+3) = 8*3 + 8*3 = 24 + 24 = 48\n# difference = 48 - 24 = 24\nprint(24)"
  },
  {
    "example_id": 579,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 3\ny = 2\nx3_minus_y3 = x**3 - y**3\nprint(x3_minus_y3)"
  },
  {
    "example_id": 580,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "4.0",
      "5.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy as sy\nsy.init_printing()\na = sy.Symbol('a')\n\nexpr = 3 * sy.Pow(5, 2) - 4 * (5 - a) ** 2\n\nexpr_div_3 = expr / 3\n\nprint(expr_div_3)"
  },
  {
    "example_id": 581,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((3*4-2)*(4*4+1)-(3*4-2)*4*4+1)"
  },
  {
    "example_id": 582,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.142857142857143"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "y = (19 - 7 ** 2) / (2 * 7)\nprint(y)"
  },
  {
    "example_id": 583,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "3.0",
      "5.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\ny = Symbol('y')\nsol = solve((x**2 + y**2 - 6) - 6*x - 2*y, x, y)\nprint(sol)"
  },
  {
    "example_id": 584,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "def f(x):\n    return x**2 - 4*x**0.5 + 1\n\nprint(f(f(4)))"
  },
  {
    "example_id": 585,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "5050.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 101):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 586,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(4 - 2)"
  },
  {
    "example_id": 587,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1600.0"
    ],
    "annotated_answers": [
      "1600.0"
    ],
    "solution": "x = 441 + 2*21*19 + 361\nprint(x)"
  },
  {
    "example_id": 588,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-42.0"
    ],
    "solution": "f = sympy.symbols('f')\ng = sympy.symbols('g')\n\nf_g = f(g(x))\nf_g_coeff = f_g.coeff(x)\nprint(f_g_coeff)"
  },
  {
    "example_id": 589,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import sqrt\n\ndef circle_equation(x, y):\n    x_sq = x**2\n    y_sq = y**2\n    r_sq = 130\n    lhs = x_sq + y_sq - r_sq\n    rhs = 0\n    return lhs - rhs\n\ndef get_max_x(circle_eq, y):\n    x = 2*y\n    while circle_eq(x, y) < 0:\n        x += 1\n    return x\n\ndef solve():\n    max_x = get_max_x(circle_equation, 15)\n    print(max_x)\n\nsolve()"
  },
  {
    "example_id": 590,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-16.0",
      "-8.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsol = sympy.solve(x**2 + 24*x + 128, x)\nprint(sol)"
  },
  {
    "example_id": 591,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(3)"
  },
  {
    "example_id": 592,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "2.0",
      "-4.0",
      "2.0",
      "2.0",
      "16.0",
      "4.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import sympy as sy\na, b, c = sy.symbols(\"a, b, c\")\n\nx1 = (-b + sy.sqrt(b**2 - 4 * a * c)) / (2 * a)\nx2 = (-b - sy.sqrt(b**2 - 4 * a * c)) / (2 * a)\n\nx1_sq = x1**2\nx2_sq = x2**2\n\nproduct = x1_sq * x2_sq\nprint(product)"
  },
  {
    "example_id": 593,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "668.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "k = 2005 // 3\nprint(k)"
  },
  {
    "example_id": 594,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "print(31**2 - 19**2)"
  },
  {
    "example_id": 595,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "1.0",
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = sympy.exp(3*x**2 - sympy.floor(x)**2) + sympy.binomial(22 + 735235*sympy.floor(x)**2, 2356) + sympy.floor(x)**2 + 72*x**4 + 3*x**3 - 6*x**2 + 2*x + 1\ng = sympy.exp(3*x**2 - sympy.floor(x)**2) + sympy.binomial(22 + 735235*sympy.floor(x)**2, 2356) + sympy.floor(x)**2 + 72*x**4 + 4*x**3 - 11*x**2 - 6*x + 13\nsol = sympy.solve(f - g, x)\nprint(sol)"
  },
  {
    "example_id": 596,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "piles = [3, 2, 1, 2]\nquarter = 20\ntotal = 0\nfor pile in piles:\n    total += pile\n    quarter -= pile\nif quarter < 0:\n    print(\"Invalid input\")\nelse:\n    print(quarter)"
  },
  {
    "example_id": 597,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import *\n\np, q = symbols('p q', positive=True)\n\np1, q1 = 1/p, 1/q\n\neq = p1 + q1 - 1\n\nsolve(eq)"
  },
  {
    "example_id": 598,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f = lambda x: x**2 + 2\nprint(f(f(2)))"
  },
  {
    "example_id": 599,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num_ints = 5\nfor t in range(1, num_ints):\n    if 2**0.5 < t < 3.5:\n        print(t)"
  },
  {
    "example_id": 600,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy as sp\nx, y = sp.symbols(\"x, y\")\neq1 = 2*x - 3*y\neq2 = 4*x + 3*y\nsolve = sp.solve((eq1, eq2), (x, y))\nprint(solve)\nprint(solve[x]*solve[y])"
  },
  {
    "example_id": 601,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "202.5"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "A = 162 / 4\nB = 3 * A\nC = A / 3\nD = 2 * C\nprint(A + B + C + D)"
  },
  {
    "example_id": 602,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy.abc import A, B\n\ndenominator = (sqrt(4) + sqrt(32)) ** 3\nnumerator = 2\n\nresult = numerator / denominator\nprint(result)"
  },
  {
    "example_id": 603,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3125.0"
    ],
    "annotated_answers": [
      "3125.0"
    ],
    "solution": "print(5**3 * 5**2)"
  },
  {
    "example_id": 604,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "a = 1\nb = 2009\nratio = b / a\nprint(a)"
  },
  {
    "example_id": 605,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "# using the formula: a + (n - 1)d = 6th term\n# a is the 1st term, d is the common difference\n# n is the number of terms\n\n# 1st term = 100\n# common difference = 50\n# 8th term = 500\n# n = 8\n\n# 6th term = 100 + (6 - 1) * 50\n# 6th term = 100 + 5 * 50\n# 6th term = 300\nprint(300)"
  },
  {
    "example_id": 606,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 3\nprint((x-3)/(2*x**2-8*x+7))"
  },
  {
    "example_id": 607,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "143.0"
    ],
    "solution": "num = 13\nreversed_num = int(str(num)[::-1])\nprint(num + reversed_num)"
  },
  {
    "example_id": 608,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "import numpy as np\n\nperimeter = 2 * np.linalg.norm(np.array([1,-2]) - np.array([-4,10]))\nprint(perimeter)"
  },
  {
    "example_id": 609,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "a = -2\na_squared = a**2\na_squared_plus_6a = a_squared + 6*a\na_squared_plus_6a_minus_7 = a_squared_plus_6a - 7\nprint(a_squared_plus_6a_minus_7)"
  },
  {
    "example_id": 610,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-20.7759180473518",
      "5.77591804735175"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\nk = sympy.Symbol('k')\n\ny = 2/3*x + 5\n\ntriangle_area = (1/2) * sympy.integrate(y, (x, 0, k))\n\nconstraint = triangle_area < 20\n\nsolution = sympy.solve(constraint, k)\n\nprint(solution)"
  },
  {
    "example_id": 611,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "ligs = 80 / 20\nprint(ligs)"
  },
  {
    "example_id": 612,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "17.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import Symbol\nfrom sympy.geometry import Point, Circle\n\nx = Symbol('x')\ny = Symbol('y')\n\ncircle = Circle((0, 0), 6*x - 8*y + 24)\npoint = Point(-3, -12)\n\nprint(point.distance(circle.center))"
  },
  {
    "example_id": 613,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = -2\nprint(x)"
  },
  {
    "example_id": 614,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy as sp\na = sp.symbols('a')\nx1, x2 = sp.symbols('x1, x2')\neq = a * x1 ** 2 + 5 * x1 - 3\ndisc = eq.subs(x1, x2)\nabs_disc = sp.Abs(disc)\nabs_disc_val = abs_disc.evalf(subs={x1: sp.sqrt(61) / 3, x2: -sp.sqrt(61) / 3})\nprint(abs_disc_val)\nprint(a.evalf())"
  },
  {
    "example_id": 615,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = 3\nb = -24\nc = 72\nprint(a + b + c)"
  },
  {
    "example_id": 616,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 12\nprint(n)"
  },
  {
    "example_id": 617,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.877551020408163"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = 5 / 7\nb = 5 - a\nprint(a**2 + b**2)"
  },
  {
    "example_id": 618,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220.6692263021483"
    ],
    "annotated_answers": [
      "221.0"
    ],
    "solution": "weight = 244\nfor i in range(10):\n    weight -= (weight / 100)\nprint(weight)"
  },
  {
    "example_id": 619,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "800.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "print(102**2 - 98**2)"
  },
  {
    "example_id": 620,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "30.0",
      "10.0",
      "10.0",
      "30.0",
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef rectangles_with_area_equal_to_5_times_perimeter(n):\n    for i in range(1, n):\n        for j in range(1, n):\n            if i*j == 5 * (i + j):\n                yield (i, j)\n\nprint(list(rectangles_with_area_equal_to_5_times_perimeter(100)))"
  },
  {
    "example_id": 621,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "315.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "c = 18**2 - 9\nprint(c)"
  },
  {
    "example_id": 622,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0",
      "2.0",
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "import sympy as sy\nx1 = sy.Symbol('x1')\nx2 = sy.Symbol('x2')\neq = (x1 + 3) ** 2 - 121\nsol = sy.solve(eq, [x1, x2])\nprint(sol)"
  },
  {
    "example_id": 623,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4096.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import expand_power_base\n\nprint(expand_power_base(4**5 + 4**5 + 4**5 + 4**5))"
  },
  {
    "example_id": 624,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 1.5\nprint(abs(x - 1) + abs(x - 1.5) + abs(x - 2))"
  },
  {
    "example_id": 625,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "-128.0"
    ],
    "solution": "x = [2, 3, 4, 5, 6]\nproduct = 1\nfor i in x:\n    product *= i\nprint(product)"
  },
  {
    "example_id": 626,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import symbols, solve\n\nx, y = symbols('x y')\neq = x**2 - y**2 - 17\n\nsolutions = solve(eq, [x, y])\n\nprint(len(solutions))"
  },
  {
    "example_id": 627,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "225000.0",
      "450.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "# Calculate the revenue for different price\nprice_list = [450, 445, 440, 435, 430]\nrevenue_list = [500*p for p in price_list]\n\n# Find the index of maximum revenue\nmax_revenue_index = revenue_list.index(max(revenue_list))\n\n# Print the maximum revenue and the corresponding price\nprint(max(revenue_list))\nprint(price_list[max_revenue_index])"
  },
  {
    "example_id": 628,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Assume Bob can buy 18/6 = 3 brownies\n# Assume Bob can buy 4/2 = 2 brownies for 10 cupcakes\n# Assume Bob can buy 3*2 = 6 brownies for 18 cookies\n# Assume Bob can buy 3*2*10 = 60 cupcakes for 18 cookies\nprint(60)"
  },
  {
    "example_id": 629,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "years = 36 / 18\nprint(years)"
  },
  {
    "example_id": 630,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "98.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = -1\nx = 3\ny = a*x**4 - b*x**2 + x + 5\nprint(y)"
  },
  {
    "example_id": 631,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "5.0",
      "4.0",
      "1.0",
      "4.0",
      "4.0",
      "3.0",
      "5.0",
      "4.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\ny = sym.Symbol('y')\nk = sym.Symbol('k')\nsol = sym.solve([y - 2*x**2 - k*x - 6, y + x - 4], [x, y])\nprint(sol)"
  },
  {
    "example_id": 632,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1200.0"
    ],
    "annotated_answers": [
      "174.0"
    ],
    "solution": "A = 2 * 5 * 60\nB = 60 * 2 * 5\nprint(A + B)"
  },
  {
    "example_id": 633,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def power_plus(a, b):\n    return a ** b + b\n\nprint(power_plus(1, 2) * 3)"
  },
  {
    "example_id": 634,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "7.0",
      "12.0"
    ],
    "annotated_answers": [
      "697.0"
    ],
    "solution": "a = 4\nb = 7\nc = 12\n\nprint(a, b, c)"
  },
  {
    "example_id": 635,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "def f(x):\n    return x - (x // (x**0.5))**2\n\nprint(sum(f(x) for x in range(101, 111)))"
  },
  {
    "example_id": 636,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "242.0"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "n = 5\nm = 3\nnum_people = (m**n) - 1\nprint(num_people)"
  },
  {
    "example_id": 637,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "8.0",
      "2.0",
      "16.0"
    ],
    "annotated_answers": [
      "-128.0"
    ],
    "solution": "from sympy import expand\nfrom sympy.abc import x\nprint(expand((x-2)**2 * (x+2)**2))"
  },
  {
    "example_id": 638,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0",
      "8.0",
      "10.0",
      "7.0",
      "79.0",
      "6.0",
      "28.0",
      "5.0",
      "32.0",
      "4.0",
      "37.0",
      "3.0",
      "43.0",
      "2.0",
      "29.0",
      "4.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "from sympy import simplify, expand, Mul\nfrom sympy.abc import x\n\nf = 7*x**4 - 3*x**3 - 3*x**2 - 8*x + 1\ng = 8*x**4 + 2*x**3 - 7*x**2 + 3*x + 4\n\nprint(simplify(expand(Mul(f, g))))"
  },
  {
    "example_id": 639,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nf = x**3 - 9*x + 3\nc = f.subs(x, 2)\nprint(c)"
  },
  {
    "example_id": 640,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.29978242139735"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "import sympy as sp\n\ndef sqrt(x):\n    return sp.sqrt(x)\n\ndef solve(x):\n    return sqrt(x + sqrt(x + sqrt(x + sqrt(x)))) - 9\n\ndef find_x(x):\n    return solve(x).evalf()\n\nprint(find_x(10))"
  },
  {
    "example_id": 641,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "def f(x):\n    return 2*x - 3\n\ndef g(y):\n    return 5 - 4*y\n\nprint(g(f(4)))"
  },
  {
    "example_id": 642,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-25.0"
    ],
    "annotated_answers": [
      "-25.0"
    ],
    "solution": "if -10 < -3:\n    print(3 * -10 + 5)\nelse:\n    print(7 - 4 * -10)"
  },
  {
    "example_id": 643,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-61.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "third_term = 5\nsixth_term = -1\ntwelfth_term = third_term + (11 * (sixth_term - third_term))\nprint(twelfth_term)"
  },
  {
    "example_id": 644,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5519815245204084"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "b = -12\nx1 = (-b + 12**0.5) / 2\nx2 = (-b - 12**0.5) / 2\nprint(x2 / x1)"
  },
  {
    "example_id": 645,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "567.0"
    ],
    "annotated_answers": [
      "567.0"
    ],
    "solution": "term_5 = 7 * 3**4\nprint(term_5)"
  },
  {
    "example_id": 646,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = 3\nb = 3\nc = 2\nprint(a+b+c)"
  },
  {
    "example_id": 647,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "A = 8\nB = 3\nC = 2\na = A * B\nb = B * C\nc = C * A\nprint(a + b + c)"
  },
  {
    "example_id": 648,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import math\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\ndef longest_side(p1, p2, p3):\n    return max(distance(p1, p2), distance(p2, p3), distance(p3, p1))\n\nprint(longest_side((11, 1), (2, 3), (3, 7)))"
  },
  {
    "example_id": 649,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "495.0"
    ],
    "annotated_answers": [
      "495.0"
    ],
    "solution": "def sum_of_odd_integers(n):\n    return sum(i for i in range(n+1, 65, 2))\nprint(sum_of_odd_integers(46))"
  },
  {
    "example_id": 650,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "10.0",
      "3.0",
      "7.0",
      "6.0",
      "3.0",
      "4.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\np1 = 3*x**10 - 3*x**7 + 2*x**3 - x + 7\np2 = 4*x**3 - 4*x**2 - 5\nprint(p1 + p2)"
  },
  {
    "example_id": 651,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(2)"
  },
  {
    "example_id": 652,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\n\na, b = sympy.symbols('a, b')\n\neq1 = 5 * a - 4 * b + 5\neq2 = 3 * a - 2 * b + 3\n\nsol = sympy.solve([eq1, eq2], [a, b])\nprint(sol)\n\nb_val = sol[b]\nprint(b_val)\n\nsix_b = 6 * b_val\nprint(six_b)"
  },
  {
    "example_id": 653,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(abs(-3 + 2 * (-4)))"
  },
  {
    "example_id": 654,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 12\ny = 35\nprint(y - x)"
  },
  {
    "example_id": 655,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1050.0"
    ],
    "annotated_answers": [
      "1050.0"
    ],
    "solution": "total_calories = 150 * 7\nprint(total_calories)"
  },
  {
    "example_id": 656,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "4.0",
      "-1.0",
      "2.0",
      "2.0",
      "-1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\neq1 = sympy.Eq(4*y - 4*x**2, 1)\neq2 = sympy.Eq(4*x - 4*y**2, 1)\nsol = sympy.solve([eq1, eq2], [x, y])\nprint(sol)\nprint(1/(x**3 + y**3))"
  },
  {
    "example_id": 657,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0",
      "-3.0",
      "-6.0",
      "8.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import sympy as sym\nj, k, l = sym.symbols('j k l')\neq1 = j * k - 24\neq2 = j * l - 48\neq3 = k * l - 18\nsol = sym.solve((eq1, eq2, eq3), (j, k, l))\nprint(sol)"
  },
  {
    "example_id": 658,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "from math import floor, ceil\n\ndef f(x):\n    if x % 1 == 0:\n        return abs(floor(x))\n    else:\n        return ceil(x) ** 2\n\nprint(f(sqrt(3, -8)) + f(-pi) + f(sqrt(50)) + f(9/2))"
  },
  {
    "example_id": 659,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = -4\nb = 8\nprint(a + b)"
  },
  {
    "example_id": 660,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "lower = 1\nupper = 3\nsum = 0\nfor x in range(lower, upper + 1):\n    if lower < 3/x < 3/4:\n        sum += x\nprint(sum)"
  },
  {
    "example_id": 661,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "n_red = 11\nn_students = 24\nn_total = 480\nn_red_estimate = n_red / n_students * n_total\nprint(n_red_estimate)"
  },
  {
    "example_id": 662,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.4099832412739488",
      "-13.0",
      "0.9999999999999747"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from math import factorial\ni = 1j\nsum = 0\nfor k in range(259):\n    sum += i ** k\nprint(sum)"
  },
  {
    "example_id": 663,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    if x == 1:\n        return 2\n    elif x == 2:\n        return 10\n    else:\n        return 1 / x\n\nprint(f(f(10)))"
  },
  {
    "example_id": 664,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "f_x = (-2)**2 - 3\nprint(9 + 2 * (f_x))"
  },
  {
    "example_id": 665,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.282446930350396"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "from math import sqrt\n\nx = (16 ** 3) + 4\nx = (x + 1) / 2\nx = sqrt(x)\nprint(x)"
  },
  {
    "example_id": 666,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "196.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "m = 4 * (5**2 + (-2)**2) - 8 * (5) * (-2)\nprint(m)"
  },
  {
    "example_id": 667,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x_agreed = (3 + (-10)) / 2\nx_actual = (3 + (-6)) / 2\nprint(abs(x_agreed - x_actual))"
  },
  {
    "example_id": 668,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "min_value = 13 - 6 * 3 + 3 ** 2\nprint(min_value)"
  },
  {
    "example_id": 669,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "print(19**2 + 2*19 + 1)"
  },
  {
    "example_id": 670,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 3\nm = 1 - n\nprint(n - m)"
  },
  {
    "example_id": 671,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-0.12701665379258298",
      "2.0",
      "-7.872983346207417"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n\ndef solve_circle(a, b, c, d):\n    \"\"\"\n    Given a quadratic equation of the form ax^2 + bx + c = 0,\n    this function returns the roots of the equation.\n    \"\"\"\n    discriminant = b**2 - 4 * a * c\n    if discriminant < 0:\n        print(\"No real roots\")\n    elif discriminant == 0:\n        x = -b / (2 * a)\n        print(\"x =\", x)\n    else:\n        x1 = (-b + np.sqrt(discriminant)) / (2 * a)\n        x2 = (-b - np.sqrt(discriminant)) / (2 * a)\n        print(\"x1 =\", x1, \"x2 =\", x2)\n\nsolve_circle(1, 8, 1, -6)"
  },
  {
    "example_id": 672,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "324.0"
    ],
    "solution": "import math\na = 1\nb = 2\nwhile b < 100:\n    if (a + 1) ** 2 - a ** 2 == 35:\n        print(b)\n        break\n    a = b\n    b = b + 1"
  },
  {
    "example_id": 673,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "p(q(2)) = p(3)"
  },
  {
    "example_id": 674,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\ndef digits(n):\n    return math.floor(math.log10(n)) + 1\n\ndef largest_possible_value_of_k(a, r, n):\n    k = 0\n    while digits(a * r ** k) == digits(n):\n        k += 1\n    return k\n\nprint(largest_possible_value_of_k(1, 2, 1000000000))"
  },
  {
    "example_id": 675,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = -1\nb = 4\nc = 1\nd = 3\nprint(c-a)"
  },
  {
    "example_id": 676,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def f(x):\n    if x == 1:\n        return 2\n    elif x == 4:\n        return 3\n    elif x == 7:\n        return 4\n    else:\n        raise ValueError(\"Invalid argument.\")\n\ndef f_inv(x):\n    if x == 2:\n        return 1\n    elif x == 3:\n        return 4\n    elif x == 4:\n        return 7\n    else:\n        raise ValueError(\"Invalid argument.\")\n\nprint(f_inv(f_inv(3)))"
  },
  {
    "example_id": 677,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "sum(i for i in range(1, 20))"
  },
  {
    "example_id": 678,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "a = 1\nb = 1\nwhile True:\n    if a % 4!= 0:\n        break\n    a += 1\n    b += 1\n\nprint(a + b)"
  },
  {
    "example_id": 679,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "correct_answers = 232 // 5\nprint(correct_answers)"
  },
  {
    "example_id": 680,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.9999999999999998"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "a = 6/5 - 1\nb = 1 - a\nh = lambda x: a*x + b\nprint(h(6))"
  },
  {
    "example_id": 681,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "x = 3/2\ny = 3/2\nprint(2*x**2 + 2*y**2)"
  },
  {
    "example_id": 682,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "laps = 10 * 400 / 250\nprint(laps)"
  },
  {
    "example_id": 683,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a, b, c')\n\nsum_of_cubes = a ** 3 + b ** 3 + c ** 3\n\nprint(sympy.expand(sum_of_cubes))"
  },
  {
    "example_id": 684,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "15.0",
      "4.0",
      "2.0",
      "15.0"
    ],
    "annotated_answers": [
      "-22.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\na, b = solve(2*x**2 - 10*x + 5, x)\nprint((2*a - 3)*(4*b - 6))"
  },
  {
    "example_id": 685,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "f_0 = 2\nf_3 = 2 + (3 * 3)**(1/2)\nprint(f_0 + f_3)"
  },
  {
    "example_id": 686,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0587911840678754",
      "51.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "x = 5\nresult = x**1 * x**2 * x**3 * x**4 * x**5 * x**6 * x**7 * x**8 * x**9 / x**2 * x**4 * x**6 * x**8 * x**12\nprint(result)"
  },
  {
    "example_id": 687,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "f(g(x)) = f(-3) = 2(-3) + 1 = 5\nprint(f(g(x)))"
  },
  {
    "example_id": 688,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "3.0",
      "8.0",
      "3.0",
      "8.0",
      "3.0",
      "3.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "98.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ne = sympy.Eq(8*x**3 - 3*x**2 - 3*x - 1, 0)\nr = sympy.solve(e, x)\na = r[0]\nb = r[1]\nc = r[2]\nprint(a + b + c)"
  },
  {
    "example_id": 689,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.244897959183673"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "x = 25\nz = 24\ny = (z * x) / (x + z)\nprint(y)"
  },
  {
    "example_id": 690,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "57.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 115 // 3\ny = 115 // 2 - x\nprint(x + y)"
  },
  {
    "example_id": 691,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "268.0"
    ],
    "annotated_answers": [
      "4624.0"
    ],
    "solution": "# Find the larger of the two squares\n# by using the fact that the positive difference\n# between two consecutive even perfect squares is 268\n\n# Find the first even perfect square\nfirst_square = 0\nwhile first_square * first_square % 4!= 0:\n    first_square += 2\n\n# Find the second even perfect square\nsecond_square = first_square + 268\n\nprint(second_square)"
  },
  {
    "example_id": 692,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "first_term = 8 - 2\nprint(first_term)"
  },
  {
    "example_id": 693,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "perimeter = 6 + 12 + 12 + 6\nprint(perimeter)"
  },
  {
    "example_id": 694,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "13.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "13.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\nsolutions = sympy.solve(x*(x-3) - 1, x)\n\na = solutions[0]\nb = solutions[1]\nc = sympy.sqrt(a*b)\n\nabc = a*b*c\nprint(abc)"
  },
  {
    "example_id": 695,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a = 1\nb = -8\nc = 49\nab = a * b\nprint(ab)"
  },
  {
    "example_id": 696,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "224.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "A = 3\nB = 1\nC = 5\nAC = 15\nprint((AC)**2 - B)"
  },
  {
    "example_id": 697,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(max([6, 8, 3, 5, 4, 2]))"
  },
  {
    "example_id": 698,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 21):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 699,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import floor, ceiling, sqrt\n\nprint(ceiling(sqrt(27)) - floor(sqrt(26)))"
  },
  {
    "example_id": 700,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Vertex\nvx = 2\nvy = 3\n\n# Parabola contains point\npx = 4\npy = 4\n\n# Slope of the parabola\nm = (py - vy) / (px - vx)\n\n# Find y when x = 6\ny = m * 6 + vy\nprint(y)"
  },
  {
    "example_id": 701,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "f = lambda x: (x**2 + 2*x + 3) / x\ng = lambda x: x**3 + 2\n\nprint(g(f(-3)))"
  },
  {
    "example_id": 702,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.8"
    ],
    "annotated_answers": [
      "96.8"
    ],
    "solution": "feet_per_second = 66 * 88 / 60\nprint(feet_per_second)"
  },
  {
    "example_id": 703,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "distance = 9 * 12\nprint(distance)"
  },
  {
    "example_id": 704,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import sympy as sp\n\nx = sp.Symbol('x')\ny = 2*x - 13\neq = 3*x + y - 92\n\n# solve for x\nsol = sp.solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 705,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "3.0",
      "2010.0",
      "1.0",
      "3.0",
      "3.0",
      "-1.0",
      "2010.0",
      "1.0",
      "3.0",
      "2.0",
      "-1.0",
      "2010.0",
      "1.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "2010.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nf = x**3 + 3*x**2 + 3*x + 1\nf_inv = solve(f - 2010, x)[0]\nprint(f.subs(x, f_inv))"
  },
  {
    "example_id": 706,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "new_pressure = 4 / 3.67 * 1.835\nprint(new_pressure)"
  },
  {
    "example_id": 707,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-0.75"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def find_k(p1, p2):\n    return (p2[1] - p1[1]) / (p2[0] - p1[0])\n\np1 = (7, 4)\np2 = (0, find_k(p1, (3, 7)))\nprint(p2)"
  },
  {
    "example_id": 708,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "x = (2 * 3) / (2 * 3)\nprint(x)"
  },
  {
    "example_id": 709,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.8654462",
      "0.0",
      "1.4244542",
      "0.0",
      "-0.029504",
      "1.16672299",
      "-0.029504",
      "-1.16672299"
    ],
    "annotated_answers": [
      "-40.0"
    ],
    "solution": "import numpy as np\na = np.roots([2, 5, -8, 6, -15])\nprint(a)"
  },
  {
    "example_id": 710,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "degrees_per_hour = 360 / 24\nprint(degrees_per_hour)"
  },
  {
    "example_id": 711,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "smallest = (49 - 7) / 2\nprint(smallest)"
  },
  {
    "example_id": 712,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.999999999999998"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(pow(2**3, 4/3))"
  },
  {
    "example_id": 713,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 714,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 1 / 2\nprint(x - 1)"
  },
  {
    "example_id": 715,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "tours_per_day = 4\nprint(tours_per_day)"
  },
  {
    "example_id": 716,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# use the formula: a_n = a_1 + (n-1)d\na_1 = 2\na_3 = a_1 + 2\na_6 = a_1 + 5\n\nsum_3_6 = a_3 + a_6\nsum_3_6 = 2 + 7\n\n# use the formula: d = (a_n - a_1) / (n-1)\nd = (25 - 2) / (6 - 1)\nd = 7\n\na_4 = a_1 + 3 * d\na_4 = 2 + 3 * 7\na_4 = 2 + 21\na_4 = 23\n\nprint(a_4)"
  },
  {
    "example_id": 717,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x = 81\ny = 3\nprint(x + y)"
  },
  {
    "example_id": 718,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "import sympy as sp\na, b = sp.symbols('a b')\nab = (a + b)/2\n\ndef parabola(x):\n    return 3*x**2 - 5*x - 3\n\nlength_squared = (ab*(ab + a) + b*(b + ab))/2\nprint(length_squared)"
  },
  {
    "example_id": 719,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "flecks_per_flick = 8\nflecks_per_flock = 4\n\nflicks = 12\nflocks = flicks * flecks_per_flick / flecks_per_flock\nprint(flocks)"
  },
  {
    "example_id": 720,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nexpr = sp.log(x-1, 3**2)**2\nsol = sp.solve(expr, x)\nprint(sol)"
  },
  {
    "example_id": 721,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor a in range(1, 1000):\n    if (a**2 + a) == a*a:\n        sum += a\nprint(sum)"
  },
  {
    "example_id": 722,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "A, B = 10, 1\nAB = A*B\nprint(AB + B)"
  },
  {
    "example_id": 723,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "y = 12 - 6\nprint(y)"
  },
  {
    "example_id": 724,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "r = 15.5 - 15\nprint(r)"
  },
  {
    "example_id": 725,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 9 * 1/3\ny = 6 * 1/3\nprint(x+y)"
  },
  {
    "example_id": 726,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(36 // 7)"
  },
  {
    "example_id": 727,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.2"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "r = (2*4-19)/(2-7)\nprint(r)"
  },
  {
    "example_id": 728,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def y_value(x, a, b, c):\n    return a * x ** 2 + b * x + c\n\npoints = [(0, 5), (1, 10), (2, 19)]\n\ndef get_ab_from_points(points):\n    a = (points[1][1] - points[0][1]) / (points[1][0] - points[0][0])\n    b = (points[2][1] - points[0][1]) / (points[2][0] - points[0][0])\n    return a, b\n\ndef get_c_from_points(points, a, b):\n    c = points[0][1] - a * points[0][0] ** 2 - b * points[0][0]\n    return c\n\ndef get_abc_from_points(points):\n    a, b = get_ab_from_points(points)\n    c = get_c_from_points(points, a, b)\n    return a, b, c\n\na, b, c = get_abc_from_points(points)\nprint(a + b + c)"
  },
  {
    "example_id": 729,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "-4.0",
      "2.0",
      "8.0",
      "13.0",
      "2.0",
      "-4.0",
      "2.0",
      "8.0",
      "13.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nx = Symbol('x')\ny = Symbol('y')\nD = -3\nE = 2\nF = -1\n\nsol = solve((x**2 + y**2 + D*x + E*y + F), x)\n\nprint(sol)"
  },
  {
    "example_id": 730,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "f = lambda x: x+1\ng = lambda x: 2*x\nf_inv = lambda x: x-1\ng_inv = lambda x: x/2\n\nf_inv_5 = f_inv(5)\ng_5 = g(f_inv_5)\ng_inv_g_5 = g_inv(g_5)\nf_inv_g_inv_g_5 = f_inv(g_inv_g_5)\nf_inv_g_inv_g_inv_g_5 = f_inv(g_inv(g_inv_g_5))\nprint(f_inv_g_inv_g_inv_g_5)"
  },
  {
    "example_id": 731,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def f(x):\n    return x ** 3 - 8\n\ndef f_inv(y):\n    return (y + 8) ** (1/3)\n\nprint(f_inv(f(f_inv(19))))"
  },
  {
    "example_id": 732,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "s = 3 ** 2 - 2 ** 3 + 1\nt = 2 * s - s ** 2\nprint(t)"
  },
  {
    "example_id": 733,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.666666666666666"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "j = 16 / 21 * 14\nprint(j)"
  },
  {
    "example_id": 734,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x_list = list(range(-5, 0)) + list(range(0, 10))\nx_list.append(10)\nprint(sum(x_list))"
  },
  {
    "example_id": 735,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 1000000000\nfor i in range(n):\n    if i + 91 in range(n) and i + 92 in range(n):\n        print(i)\n        break"
  },
  {
    "example_id": 736,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "bride_age = 51 - 15\ngroom_age = bride_age + 15\nprint(groom_age)"
  },
  {
    "example_id": 737,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.66666666666667"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "slope = (365 - 3) / (4 - 1)\nprint(slope)"
  },
  {
    "example_id": 738,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import factorint\n\ndef polynomial_count(n):\n    \"\"\"\n    Returns the number of polynomials of the form\n    x^2 + mx + n with positive integer roots and n = 28.\n    \"\"\"\n    factors = factorint(n)\n    return len(factors)\n\nprint(polynomial_count(28))"
  },
  {
    "example_id": 739,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def f(x):\n    return 3*f(2*x)+1\n\n# Find the point on the graph of y = f(x) that is closest to the point (4,7)\n# We know that (4,7) is on the graph of y = 3f(2x) + 1\n# So, the point on the graph of y = f(x) is (2, 7/3)\n# The sum of coordinates of this point is 2 + 7/3 = 9\nprint(9)"
  },
  {
    "example_id": 740,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "min_y = -7\nprint(min_y)"
  },
  {
    "example_id": 741,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f = lambda x: 5*x+3\ng = lambda x: x**2-2\nprint(g(f(-1)))"
  },
  {
    "example_id": 742,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# 7th and 8th grades have 520 and 650 students respectively\n# Total number of representatives = 18\n\n# 8th grade should have \n# representatives = (total number of representatives / 2)\n# representatives = (18 / 2)\n# representatives = 9\n\nprint(9)"
  },
  {
    "example_id": 743,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import math\nprint(math.log(625, 5))"
  },
  {
    "example_id": 744,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_arithmetic_sequence(n):\n    return n * (n + 1) // 2\n\ndef greatest_prime_factor(n):\n    if is_prime(n):\n        return n\n    for i in range(n, 0, -1):\n        if is_prime(i) and n % i == 0:\n            return i\n    return 1\n\ndef greatest_prime_factor_of_sum_of_arithmetic_sequence(n):\n    return greatest_prime_factor(sum_of_arithmetic_sequence(n))\n\nprint(greatest_prime_factor_of_sum_of_arithmetic_sequence(80))"
  },
  {
    "example_id": 745,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(((7+8+9)/(2+3+4))*((6+9+12)/(9+8+7)))"
  },
  {
    "example_id": 746,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "cookies = 10 * 12 / 20\nprint(cookies)"
  },
  {
    "example_id": 747,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0",
      "27.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "surface_area = 2 * (3 * 5) + 2 * (3 * 4) + 2 * (3 * 3)\nvolume = 3 ** 3\n\nprint(surface_area, volume)\nprint(surface_area == volume)"
  },
  {
    "example_id": 748,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "3.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import isprime\n\nfor x in range(-1000, 1000):\n    if isprime(abs(x**2 - 16)):\n        print(x)"
  },
  {
    "example_id": 749,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "B = 10\nA = B - 6\nC = B + 3\nprint(C)"
  },
  {
    "example_id": 750,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "8.0",
      "9.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, log\nx = Symbol('x')\nexpr1 = 3**(x+8)\nexpr2 = 9**(x+3)\nsol = log(expr1, expr2)\nprint(sol)"
  },
  {
    "example_id": 751,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "print((7+5)**2 - (7-5)**2)"
  },
  {
    "example_id": 752,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "print(5*1)"
  },
  {
    "example_id": 753,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import sympy as sp\nx, y, z = sp.symbols('x y z')\na = sp.log(x) - sp.log(y)\neq1 = a - sp.log(y) - 15\neq2 = sp.log(y) - sp.log(z) - 7\nsp.solve([eq1, eq2], [a])"
  },
  {
    "example_id": 754,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n\ndef f(x):\n    return x**2 - 8*x + 15\n\nx = np.linspace(-10, 10, 1000)\ny = [f(xi) for xi in x]\n\nvertex = np.argmax(np.abs(y))\nprint(vertex)\n\nplt.plot(x, y)\nplt.scatter(0, 2, color='red')\nplt.scatter(vertex, 0, color='green')\nplt.show()"
  },
  {
    "example_id": 755,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "990.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "from sympy import sqrt\n\nprint(sqrt(1000000) - sqrt(1000000) ** (1/3))"
  },
  {
    "example_id": 756,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nx = Symbol('x')\ny = Symbol('y')\n\nsolution = solve((y, x), (y, x), dict=True)\nprint(solution)"
  },
  {
    "example_id": 757,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def number_of_books_sold(p):\n    return 128 - 4 * p\n\ndef revenue(p):\n    return number_of_books_sold(p) * p\n\ndef maximum_revenue(p):\n    return revenue(p)\n\np = 32\nwhile number_of_books_sold(p) > 0:\n    p -= 1\n\nprint(p)"
  },
  {
    "example_id": 758,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    if x <= 3:\n        return 3 - x\n    else:\n        return -x**3 + 2*x**2 + 3*x\n\ndef f_inverse(y):\n    if y == 0:\n        return 0\n    elif y == 6:\n        return 3\n    else:\n        return -y**(1/3) + y**(1/2)/2 + y**(1/3)/3\n\nprint(f_inverse(0) + f_inverse(6))"
  },
  {
    "example_id": 759,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "f = lambda x: 2*x + 1\ng = lambda x: f(2*x) - 3\nprint(g(g(2)))"
  },
  {
    "example_id": 760,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\ny = 2\nprint(x**2 * y)"
  },
  {
    "example_id": 761,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import *\nx = 3 - I\ny = 6 + 2*I\nprint(x*y)"
  },
  {
    "example_id": 762,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsolutions = sympy.solve(x**2 - x - 6, x)\nprint(solutions[0] * solutions[1])"
  },
  {
    "example_id": 763,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\nprint(6)"
  },
  {
    "example_id": 764,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Alex's age\na = 12\n# Bob's age\nb = 10\n# Danielle's age\nd = 14\n# Camille's age\nc = (b - 2 + d - a) / 4\nprint(c)"
  },
  {
    "example_id": 765,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "A = 1\nB = 1\nfor x in range(2, 100):\n    if (A * (x + 1) + B * (x - 1))!= (x + 2) * (x ** 2 - 1):\n        A += 1\n        B += 1\n        break\nprint(A - B)"
  },
  {
    "example_id": 766,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "print((7*10)*(21/30))"
  },
  {
    "example_id": 767,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "99940009.0"
    ],
    "annotated_answers": [
      "99940009.0"
    ],
    "solution": "print(9997 * 9997)"
  },
  {
    "example_id": 768,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2107.0"
    ],
    "annotated_answers": [
      "2107.0"
    ],
    "solution": "sum = 0\nfor i in range(100, 201):\n    if i % 7 == 0:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 769,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "from math import sqrt\nx = (12 + sqrt(12)) / 2\ny = (12 - sqrt(12)) / 2\nk = x + y\nprint(k)"
  },
  {
    "example_id": 770,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "common_difference = -210 / 15\nprint(common_difference)"
  },
  {
    "example_id": 771,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "106.0"
    ],
    "solution": "# g(x) = f(x + 1)\n# g(x) = x^7 - 3x^3 + 2 + x + 1\n# g(x) = x^8 - 2x^3 + 3\n\n# sum of coefficients of g(x)\nprint((-2) + 3)"
  },
  {
    "example_id": 772,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "256.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "x = 2 ** 2 ** 2 ** 2 ** 1\nprint(x ** 0.5)"
  },
  {
    "example_id": 773,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "x = 9\nprint(x)"
  },
  {
    "example_id": 774,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def star(K, L):\n    return (K + L) * (K - L)\n\nprint(star(6, 5))"
  },
  {
    "example_id": 775,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(int(round(-7/4)))"
  },
  {
    "example_id": 776,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "25.0",
      "154.0",
      "5.0",
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\nx, y, z = sympy.symbols('x y z')\n\n# System of equations\neq1 = 6 * x + 5 * y - 2 * z - 4\neq2 = 4 * x + 5 * y + 12 * z - 54\n\n# Solve the system\nsolution = sympy.solve([eq1, eq2], [x, y, z])\nprint(solution)"
  },
  {
    "example_id": 777,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0",
      "5.0",
      "44.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "1736.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\n\nsolution_1 = sympy.solve(y - x**2 + 8, x)\nsolution_2 = sympy.solve(y**2 - 5*x + 44, x)\n\nproduct = 1\nfor i in solution_1:\n    for j in solution_2:\n        if i!= j:\n            product *= i*j\nprint(product)"
  },
  {
    "example_id": 778,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nsolutions = solve(9*x/13 + 13/9*x - 250/117*x, x)\nprint(sum(solutions))"
  },
  {
    "example_id": 779,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def abs(x):\n    if x < 0:\n        return -x\n    else:\n        return x\n\ndef distance(x, y):\n    return abs(x - y)\n\ndef solution(x, y, d):\n    return distance(x, y) <= d\n\ndef count(x, y, d):\n    count = 0\n    for i in range(x, y+1):\n        if solution(i, 2, d):\n            count += 1\n    return count\n\nprint(count(-10, 10, 5.6))"
  },
  {
    "example_id": 780,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 1\nwhile n < 100:\n    if n**2 - 3*n + 2 > 1:\n        n += 1\n    else:\n        print(n)\n        break"
  },
  {
    "example_id": 781,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "181.0"
    ],
    "annotated_answers": [
      "181.0"
    ],
    "solution": "print(3 * 7 ** 2 + 5 * 7 - 1)"
  },
  {
    "example_id": 782,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\n\n# Find the roots of the equation\nx = sp.symbols('x')\nroots = sp.solve(x**2 - 4*x - 1, x)\n\n# Count the number of roots\nprint(len(roots))"
  },
  {
    "example_id": 783,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "b = -4\nprint(b)"
  },
  {
    "example_id": 784,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9901.0"
    ],
    "annotated_answers": [
      "9901.0"
    ],
    "solution": "print(99**2 + 99 + 1)"
  },
  {
    "example_id": 785,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\nx = sp.symbols('x')\nx = 1 + x/(1 + x/(1 + x/(1 + x)))\nprint(x)"
  },
  {
    "example_id": 786,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "N = (121 - 1) / 2\nprint(N)"
  },
  {
    "example_id": 787,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "x = 4\ny = 3\nx3 = x**3\ny3 = y**3\nprint(x3-y3)"
  },
  {
    "example_id": 788,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "168.99999999999991"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "print(pow(13, 1/3) ** 6)"
  },
  {
    "example_id": 789,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "A = 19 - 2 - 4\nprint(A)"
  },
  {
    "example_id": 790,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "360.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "# initial set: 1, 2, 3, 4\n# increased set: 3, 4, 5, 6\n# multiplied set: 60, 80, 100, 120\nsum = 60 + 80 + 100 + 120\nprint(sum)"
  },
  {
    "example_id": 791,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.18382352941176472"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "f = lambda x: ax + b\nf_inv = lambda x: 2 / (3*x + 2)\ng = lambda x: 3*x + 2\na = f_inv(g(1))\nb = f_inv(g(0))\nprint((a + b) / 2)"
  },
  {
    "example_id": 792,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "black_cards_in_pile_A = 6\nred_cards_in_pile_B = black_cards_in_pile_A\nprint(red_cards_in_pile_B)"
  },
  {
    "example_id": 793,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.7333333333333334"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7 / 3\ny = 7 / 5\nprint(x + y)"
  },
  {
    "example_id": 794,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\ndef discriminant(a, b, c):\n    return b ** 2 - 4 * a * c\n\ndef get_a_and_c(polynomial):\n    a, b, c = polynomial\n    return a, c\n\ndef get_discriminant(polynomial):\n    a, b, c = polynomial\n    return discriminant(a, b, c)\n\ndef get_constant_term(polynomial):\n    return polynomial[2]\n\ndef get_ratio(polynomial1, polynomial2):\n    a1, c1 = get_a_and_c(polynomial1)\n    a2, c2 = get_a_and_c(polynomial2)\n    return get_constant_term(polynomial1) / get_constant_term(polynomial2)\n\npolynomial1 = (1, 4, 1)\npolynomial2 = (1, 5, 1)\n\nratio = get_ratio(polynomial1, polynomial2)\n\nprint(get_constant_term(polynomial1) + get_constant_term(polynomial2))"
  },
  {
    "example_id": 795,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "729.0"
    ],
    "annotated_answers": [
      "369.0"
    ],
    "solution": "perimeter = 54\nside = perimeter / 2\ndiagonal = side ** 2\nprint(diagonal)"
  },
  {
    "example_id": 796,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "max_t = 60\nprofit = 4200\ncost = 70\ndiscount = 1\nwhile max_t * cost + (max_t - 60) * (cost - discount) < profit:\n    max_t += 1\nprint(max_t)"
  },
  {
    "example_id": 797,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "import itertools\n\ndef compute_sum(subset):\n    return sum(subset)\n\nsum_of_sums = 0\nfor subset in itertools.combinations([1, 2, 3, 4, 5, 6], 2):\n    sum_of_sums += compute_sum(subset)\nprint(sum_of_sums)"
  },
  {
    "example_id": 798,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.912931182772389"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "x = 7 ** (1/3)\nprint(x)"
  },
  {
    "example_id": 799,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def f(x):\n    return 2*x + 1\n\n# point (2,9) is on the graph of y=f(x)\n# find the point (x,y) which is on the graph of y=f(-x)\n# point (x,y) must be on the graph of y=f(x)\n# solve for x\nx = 9\n\n# find the point (-x,y) which is on the graph of y=f(-x)\n# point (-x,y) must be on the graph of y=f(-x)\n# solve for x\nx = -9\n\n# sum the coordinates of the point (x,y) and (-x,y)\nprint(x + (-x))"
  },
  {
    "example_id": 800,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\n\ndef f(x):\n    return x**2 - 2*x + 1\n\ndef g(x):\n    return sqrt(2*x + 1)\n\nprint(f(g(4)) - g(f(3)))"
  },
  {
    "example_id": 801,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n = (2 * (n - 3)) / (n + 5)\nprint(n)"
  },
  {
    "example_id": 802,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-0.25"
    ],
    "solution": "import sympy\na = sympy.Symbol('a')\nb = sympy.Symbol('b')\nx = sympy.Symbol('x')\nquadratic_equation = x**2 + 2*b*x + (a - b)\nsolution = sympy.solve(quadratic_equation, x)\nprint(solution)"
  },
  {
    "example_id": 803,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "-18.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "x = 2\ny = 5\nmy_num_product = x * y\nmy_friend_num_product = (x - 4) * (2 * y - 1)\nprint(my_num_product)\nprint(my_friend_num_product)\nif my_friend_num_product == my_num_product + 1:\n    print(x * y)"
  },
  {
    "example_id": 804,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print(9 + 2)"
  },
  {
    "example_id": 805,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "def recurrence_relation(n):\n    if n == 1:\n        return 16\n    else:\n        return recurrence_relation(n-1) / 2\n\nprint(recurrence_relation(6))"
  },
  {
    "example_id": 806,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "apples_betty = 20\napples_amy = 3 * apples_betty\nprint(apples_amy - apples_betty)"
  },
  {
    "example_id": 807,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = 5\nb = 3\nprint(a + 5 * b)"
  },
  {
    "example_id": 808,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 5 ** 2\nprint(x)"
  },
  {
    "example_id": 809,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 4\nb = 3\n\nnumerator = a + 11 * b\ndenominator = a - b\n\nsimplified_value = numerator / denominator\n\nprint(simplified_value)"
  },
  {
    "example_id": 810,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x_B = -2 + 1\ny_B = -6 + 1\nprint(x_B + y_B)"
  },
  {
    "example_id": 811,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "3.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "m = -3\nb = 3\nprint(m, b)"
  },
  {
    "example_id": 812,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Write a program to find the product of all positive integer values of c\n# such that 3x^2+7x+c=0 has two real roots.\n\nfrom math import sqrt\n\ndef has_two_real_roots(c):\n    discriminant = 7 ** 2 - 4 * 3 * c\n    return discriminant > 0\n\ndef find_positive_integer_values_of_c(c):\n    if has_two_real_roots(c):\n        yield c\n\nproduct = 1\nfor c in find_positive_integer_values_of_c(1):\n    product *= c\n\nprint(product)"
  },
  {
    "example_id": 813,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x = 3 + 1\ny = 9 + 2\nprint(x + y)"
  },
  {
    "example_id": 814,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1600.0",
      "1436.0",
      "1444.0"
    ],
    "annotated_answers": [
      "156.0"
    ],
    "solution": "print(40**2)\nprint(40**2 - 164)\nprint(38**2)"
  },
  {
    "example_id": 815,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "b = 1 - 3*1**4 + 7*1**3 - 2*1**2\nprint(b)"
  },
  {
    "example_id": 816,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import sqrt\n\ndistance = sqrt(8**2 + 6**2)\nprint(distance)"
  },
  {
    "example_id": 817,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.625"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "a = 4\nb = 5\nc = 4\nd = -b\ne = -c\nf = 0\ng = 0\nh = -d / (2 * e)\nk = f - g * h\nprint(h)"
  },
  {
    "example_id": 818,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\ndef geometric_series(a):\n    \"\"\"\n    Return the sum of the geometric series.\n    \"\"\"\n    series = [4]\n    for i in range(1, a):\n        series.append(series[-1] * 12 / a**i)\n    return sum(series)\n\n\ndef is_perfect_square(n):\n    \"\"\"\n    Return True if n is a perfect square.\n    \"\"\"\n    return int(math.sqrt(n)) ** 2 == n\n\n\ndef find_smallest_a(n):\n    \"\"\"\n    Return the smallest value of a where the geometric series is a perfect square.\n    \"\"\"\n    for a in range(1, n+1):\n        if is_perfect_square(geometric_series(a)):\n            return a\n    return -1\n\n\nprint(find_smallest_a(100))"
  },
  {
    "example_id": 819,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def is_less_than_20(x):\n    return x**2 + 4*x + 4 < 20\n\nprint(list(filter(is_less_than_20, range(1, 20))))"
  },
  {
    "example_id": 820,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# the sum of the five consecutive integers is 5\n# each integer is 1\n# product of the five integers is 1 * 2 * 3 * 4 * 5 = 120\nprint(120)"
  },
  {
    "example_id": 821,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "448.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "age_now = 56 * 8\nprint(age_now)"
  },
  {
    "example_id": 822,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "b = -18 / (2 * 2)\nprint(b)"
  },
  {
    "example_id": 823,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "25.0",
      "150.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 10\nb = 20\nc = 30\nN = 88\n\n# Decrease a by 5\na = a - 5\n# Increase b by 5\nb = b + 5\n# Multiply c by 5\nc = c * 5\n\nprint(a, b, c)"
  },
  {
    "example_id": 824,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "y_intercept = -3\nprint(y_intercept)"
  },
  {
    "example_id": 825,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# x1 = (-18 + sqrt(18^2 - 4 * 5 * 20)) / (2 * 5)\n# x2 = (-18 - sqrt(18^2 - 4 * 5 * 20)) / (2 * 5)\n\nx1 = (-18 + 6) / (2 * 5)\nx2 = (-18 - 6) / (2 * 5)\n\nresult = int(x1) * int(x2)\nprint(result)"
  },
  {
    "example_id": 826,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "-36.0"
    ],
    "solution": "y = 36 / (2 * (-2))\nprint(y)"
  },
  {
    "example_id": 827,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.142857142857143"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7\nprint(x + 1/x)"
  },
  {
    "example_id": 828,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(int(6.7) + int(-6.7))"
  },
  {
    "example_id": 829,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.4"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(144 / 10)"
  },
  {
    "example_id": 830,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import log\nprint(log(64, 2))"
  },
  {
    "example_id": 831,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def f(n):\n    return n**2 + n + 17\n\nprint(f(10)-f(9))"
  },
  {
    "example_id": 832,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print(2**3 + 4)"
  },
  {
    "example_id": 833,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# The degree of the polynomial $h(x)$ is 5\n# The degree of the polynomial $g(x)$ is b\n# Find the value of b\n\n# Given that h(x) = (x^2-7x+10) \\cdot g(x)\n# and degree of h(x) is 5\n# and degree of g(x) is b\n\n# The degree of h(x) is 5\n# and degree of g(x) is b\n\n# Find the value of b"
  },
  {
    "example_id": 834,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 835,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "degree_p = 7\ndegree_q = 7\ndegree_pq = degree_p + degree_q\nprint(degree_pq)"
  },
  {
    "example_id": 836,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-16.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 7\ny = 8\nm = 2\nb = -10\na = y - m*x\nprint(a+b)"
  },
  {
    "example_id": 837,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "672.0"
    ],
    "annotated_answers": [
      "672.0"
    ],
    "solution": "amount = 500 * (1 + 0.03) ** 10\nprint(round(amount))"
  },
  {
    "example_id": 838,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "total_cars = 0\nfor i in range(12):\n    total_cars += i + 1\nprint(total_cars)"
  },
  {
    "example_id": 839,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-39.0"
    ],
    "annotated_answers": [
      "-39.0"
    ],
    "solution": "a = -1\nb = 5\nprint(-a - b**2 + 3*a*b)"
  },
  {
    "example_id": 840,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "m = 15 - n\nprint(m)"
  },
  {
    "example_id": 841,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "-150.0"
    ],
    "solution": "a = 6\nb = 12\nc = -8\nx = -b / (2 * a)\nk = a * x**2 + b * x + c\nprint(k)"
  },
  {
    "example_id": 842,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.569219381653056"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "print(3 * 2 ** 3 * 3 ** 0.5)"
  },
  {
    "example_id": 843,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# Define the function\ndef cans_made(cans):\n    if cans <= 0:\n        return 0\n    return 1 + cans_made(cans - 5)\n\n# Test the function\nprint(cans_made(125))"
  },
  {
    "example_id": 844,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.599999999999994"
    ],
    "annotated_answers": [
      "22.8"
    ],
    "solution": "blue_box_weight = 15.2 * 3\nprint(blue_box_weight)"
  },
  {
    "example_id": 845,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "x = 9\na = -18\nb = 63 - a\nprint(b)"
  },
  {
    "example_id": 846,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nprint(x**2+2*x*(5-x)+(5-x)**2)"
  },
  {
    "example_id": 847,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.25"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def f(c):\n    return 3/(2*c-3)\n\ndef f_inverse(c):\n    return 2*c+3\n\ndef simplified_fraction(k, l, m, n):\n    return k*n**2/(m*l)\n\nk = 3\nl = 2\nm = 3\nn = 2\n\nc = f_inverse(k/n**2/(m*l))\nprint(c)\n\nprint(simplified_fraction(k, l, m, n) == f(c)*c*f(c))"
  },
  {
    "example_id": 848,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0625"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "x = 2\nprint(x**4 + 1/x**4)"
  },
  {
    "example_id": 849,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "num_criminals_per_hour = 6\nnum_criminals_in_4_5_hour = num_criminals_per_hour * 4.5\nprint(num_criminals_in_4_5_hour)"
  },
  {
    "example_id": 850,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(24-(2*4-3))"
  },
  {
    "example_id": 851,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "-52.0",
      "5.0",
      "15.0",
      "-52.0",
      "5.0",
      "4.0",
      "5.0",
      "2.0",
      "15.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "import sympy as sym\nx, y = sym.symbols('x y')\neq1 = 2**(x+1) - 4**(x-7)\neq2 = 8**(3*y) - 16**(y-13)\nsol = sym.solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 852,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "length = 2 * 3 * 3 * 3\nprint(length)"
  },
  {
    "example_id": 853,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.3867313980311704"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# using math.pow()\nprint(pow(1053, 1/8))"
  },
  {
    "example_id": 854,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def f(x):\n    return x**2 - 9\n\ndef f_prime(x):\n    return 2*x\n\nx = 0\nwhile f(x) > 0:\n    x -= f(x) / f_prime(x)\n\na = x\nprint(a**2)"
  },
  {
    "example_id": 855,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "2000.0"
    ],
    "solution": "daily_cal_req = 2 * 40\nprint(daily_cal_req)"
  },
  {
    "example_id": 856,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# the second term of the first sequence\nsecond_term = 3\n# the third term of the first sequence\nthird_term = 3 + 3\n# the fifth term of the first sequence\nfifth_term = 3 + 3 + 3\nprint(fifth_term)"
  },
  {
    "example_id": 857,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "136.0"
    ],
    "solution": "# Assume x is one of the numbers\nx = 25 - 9\nprint(x)"
  },
  {
    "example_id": 858,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return x**2\n\ndef f_inv(x):\n    return x**(1/2)\n\nprint(f(f(1)) - f_inv(f_inv(1)))"
  },
  {
    "example_id": 859,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111",
      "0.012345679012345678",
      "0.11111111111111112",
      "0.1111111111111111",
      "0.012345679012345677"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(3**-2, 9**-2, 27**(-2/3), 9*81**-1, 243**(-4/5))"
  },
  {
    "example_id": 860,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.5"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "y = 15.5 - 1\nprint(y)"
  },
  {
    "example_id": 861,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "def quadratic_equation(m, n):\n    return m**2 + m + n\n\ndef find_m(n):\n    return -1 / (2 * n)\n\ndef find_real_solution(m, n):\n    return quadratic_equation(m, n) == 0\n\ndef find_n(m):\n    return -m - find_m(m)\n\nn = 0\nwhile find_real_solution(n, n):\n    n += 1\n\nprint(find_n(n))"
  },
  {
    "example_id": 862,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(int(pow(7/4, 2)))"
  },
  {
    "example_id": 863,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x_min, x_max = 0, 20\ny_min, y_max = -2*x_min + 18, -2*x_max + 18\nprint(x_max - x_min + 1)"
  },
  {
    "example_id": 864,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "full_price = 20\nsusan_cost = full_price\npam_cost = full_price * 0.7\nprint(pam_cost - susan_cost)"
  },
  {
    "example_id": 865,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "2.0",
      "5.0",
      "25.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nk = Symbol('k')\nsolutions = solve((k*x**2 + 10*x + k), x)\nprint(solutions)"
  },
  {
    "example_id": 866,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(len(range(10)))"
  },
  {
    "example_id": 867,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "area = 12 * 12\nprint(area)"
  },
  {
    "example_id": 868,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "regular_packs = 166 // 4\nprint(regular_packs)"
  },
  {
    "example_id": 869,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from math import sqrt\n\ndef h(x):\n    return sqrt((x ** 3 + 72) / 2) + 1\n\nprint(h(6))"
  },
  {
    "example_id": 870,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1038.0"
    ],
    "annotated_answers": [
      "1160.0"
    ],
    "solution": "import math\nimport sympy\n\ndef interest(balance, annual_interest_rate, time):\n    return balance * (1 + annual_interest_rate/4)**time\n\nbalance = 1000\nannual_interest_rate = 7.5/100\ntime = 2\n\nprint(round(interest(balance, annual_interest_rate, time)))"
  },
  {
    "example_id": 871,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "def parabola_y(x, a, b, c):\n    return a*x**2 + b*x + c\n\ndef find_a_b_c(p1, p2, p3):\n    a = (p2[1] - p3[1]) / (p2[0] - p3[0])\n    b = p2[1] - a*p2[0]\n    c = p3[1] - a*p3[0]\n    return a, b, c\n\np1 = (-3, 3)\np2 = (1, 3)\np3 = (0, 0)\na, b, c = find_a_b_c(p1, p2, p3)\nprint(100*a + 10*b + c)"
  },
  {
    "example_id": 872,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "def g(x):\n    return 4 * x ** 2 - 3 * x + 2\n\nprint(g(-3))"
  },
  {
    "example_id": 873,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "n = -36 / 9\nprint(n)"
  },
  {
    "example_id": 874,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "print(2)"
  },
  {
    "example_id": 875,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "print(2 ** 6)"
  },
  {
    "example_id": 876,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "pen_cost = 924 / 7\npencil_cost = pen_cost / 3\nprint(pencil_cost)"
  },
  {
    "example_id": 877,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100000.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(50 * 200 * 10)"
  },
  {
    "example_id": 878,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "def f(x):\n    return x - 3\n\ndef q(x):\n    return x + 1\n\nb = f(q(1))\nprint(b)"
  },
  {
    "example_id": 879,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60000.0"
    ],
    "annotated_answers": [
      "60000.0"
    ],
    "solution": "sum = 0\nfor i in range(501, 701, 2):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 880,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.6"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "first_day_pages = 248 / 5\nprint(first_day_pages)"
  }
]