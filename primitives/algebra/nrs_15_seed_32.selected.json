[
  {
    "example_id": 0,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# p = a \\* c\n# 5 = a \\* c\n# c = 5 / a\n# c = 5 / 3\n# a = 3\n# fourth term = 3 + 1 = 4\nprint(4)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.03125",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from sympy import Symbol, simplify, pprint\n\na = Symbol('a')\npprint(simplify((1/8/4 - 1/a)/a))"
  },
  {
    "example_id": 2,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17157.28467878946"
    ],
    "annotated_answers": [
      "268.0"
    ],
    "solution": "from math import pi\n\ndef area_of_circle(radius):\n    return pi * radius ** 2\n\ntotal_area = 0\nfor i in range(20):\n    radius = 64.0 / (2 ** i)\n    total_area += area_of_circle(radius)\n\nprint(total_area)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7945.0"
    ],
    "annotated_answers": [
      "7945.0"
    ],
    "solution": "rent = 5000\nelectricity_cost = 1.45\ntotal_cost = 16520.25\nelectricity_used = (total_cost - rent) / electricity_cost\nprint(electricity_used)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "flour_per_cake = 1.5\ntotal_flour = flour_per_cake * 2\nprint(total_flour)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "164.0"
    ],
    "solution": "win_ratio = 0.5\ntotal_matches = 4\nwin_matches = 3\nloss_matches = 1\n\nwin_ratio_after = (win_matches + win_ratio * total_matches) / (total_matches + loss_matches)\nprint(win_ratio_after)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "a = 2\nb = 4\na_squared = a**2\nb_squared = b**2\ndifference = a_squared - b_squared\nsum = a + b\nprint(sum)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "y = x / 2\nz = x * 4\nprint(z / y)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = (12 + 8) / 2\ny = (12 - 8) / 2\nprint(2 * x - x * y)"
  },
  {
    "example_id": 9,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.1"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "K = 6 / (4 - 8/7)\nprint(K)"
  },
  {
    "example_id": 10,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "540.0"
    ],
    "annotated_answers": [
      "1545.0"
    ],
    "solution": "height = 405\ndistance = height / 3\ndistance_4th_time = distance * 4\nprint(distance_4th_time)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4822530864197532"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "x = 3 / 2\nprint((x-1/x)**4)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.1377777777777778"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "def geometric_series(a, r, n):\n    return a * (1 - r ** n) / (1 - r)\n\nm = 16\nn = 2000\n\nseries = geometric_series(1, 1 / m, n)\nseries2 = geometric_series(series, 1 / m, n)\n\nprint(series2)"
  },
  {
    "example_id": 13,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3702.0"
    ],
    "annotated_answers": [
      "3702.0"
    ],
    "solution": "N = 1/3\nfloor_10N = int(10*N)\nfloor_100N = int(100*N)\nfloor_1000N = int(1000*N)\nfloor_10000N = int(10000*N)\nprint(floor_10N + floor_100N + floor_1000N + floor_10000N)"
  },
  {
    "example_id": 14,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def square_distance(x, y):\n    return x*x + y*y\n\ndef is_labelled_25(x, y):\n    return square_distance(x, y) == 25\n\ncount = 0\nfor x in range(-100, 100):\n    for y in range(-100, 100):\n        if is_labelled_25(x, y):\n            count += 1\n\nprint(count)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "10.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "from sympy import Symbol, solve, sqrt\nx = Symbol('x')\ny = Symbol('y')\nc = Symbol('c')\neq = x**2 - 10*x + y**2 + 6*y + c\nsol = solve(eq, c)\nprint(sol)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from math import sqrt\n\nA = -1\nB = 1\nC = 1\nD = -1\n\nA_plus_B_plus_C_plus_D = A + B + C + D\n\nprint(A_plus_B_plus_C_plus_D)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "12.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def consecutive_even_integers(n):\n    return [2*i for i in range(1, n+1)]\n\ndef smallest_even_integer(lst):\n    return min(lst)\n\ndef sum_even_integers(lst):\n    return sum(lst)\n\ndef find_smallest_even_integer(n):\n    lst = consecutive_even_integers(n)\n    return smallest_even_integer(lst)\n\ndef sum_consecutive_even_integers(n):\n    lst = consecutive_even_integers(n)\n    return sum_even_integers(lst)\n\ndef solve(n):\n    smallest = find_smallest_even_integer(n)\n    sum = sum_consecutive_even_integers(n)\n    return smallest, sum\n\nprint(solve(3))"
  },
  {
    "example_id": 18,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "smaller = 25 - 11\nprint(smaller)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(8**(4/12))"
  },
  {
    "example_id": 20,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "307.6923076923077"
    ],
    "annotated_answers": [
      "445.0"
    ],
    "solution": "# cost of equipment fees\nequipment_cost = 1000\n\n# cost of each widget\nunit_cost = 0.50\n\n# price of each widget\nunit_price = 2.75\n\n# least number of widgets to sell to make a profit\nprofit_margin = 1000\n\n# number of widgets to sell\nnum_widgets = profit_margin / (unit_cost + unit_price)\nprint(num_widgets)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(50 / 100 * 36 / 3)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.041675524376416"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "x = 7 - 1/7\nprint(x**2 + 1/x**2 + 1)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(7 + 7)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "x = 2\nprint(x ** (x + 1) ** x)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65536.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "def number_of_cells_after_n_days(n):\n    return 2 ** (n + 1)\n\nprint(number_of_cells_after_n_days(15))"
  },
  {
    "example_id": 26,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "import math\nprint(math.sqrt(81))"
  },
  {
    "example_id": 27,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1120.0"
    ],
    "annotated_answers": [
      "1120.0"
    ],
    "solution": "print(43**2 - 27**2)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import log\nprint(log(27, 3))"
  },
  {
    "example_id": 29,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1374.0"
    ],
    "annotated_answers": [
      "194.0"
    ],
    "solution": "term = 2 + (50 - 1) * (30 - 2)\nprint(term)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53065602.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy\n\ndef sum_of_ints(n):\n    \"\"\"\n    The sum of the integers 2 through n.\n    \"\"\"\n    return n * (n + 1) // 2\n\ndef sum_of_ints_in_square(n):\n    \"\"\"\n    The sum of the integers in the square of size n.\n    \"\"\"\n    return sum_of_ints(n) ** 2\n\ndef sum_of_ints_in_rectangle(n1, n2):\n    \"\"\"\n    The sum of the integers in the rectangle of size n1 x n2.\n    \"\"\"\n    return sum_of_ints(n1) * sum_of_ints(n2)\n\ndef sum_of_ints_in_fig(n):\n    \"\"\"\n    The sum of the integers in the figure of size n.\n    \"\"\"\n    return sum_of_ints_in_square(n) + sum_of_ints_in_rectangle(n, n)\n\nprint(sum_of_ints_in_fig(101))"
  },
  {
    "example_id": 31,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-312.50000000000017",
      "-541.2658773652738"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "print((-125)**(4/3))"
  },
  {
    "example_id": 32,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "24.0",
      "126.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "def f(x):\n    return (abs(x**2 + 3*x - 4) + abs(x**2 + 9*x + 20))\n\nprint(f(-5))\nprint(f(0))\nprint(f(5))"
  },
  {
    "example_id": 33,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = (7 + -3) / 2\ny = (-6 + -4) / 2\nprint(x + y)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a = 0.5\nf_inv = 1/(1-a)\nf = 1/f_inv\nprint(f_inv * a * f)"
  },
  {
    "example_id": 35,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = 3\nn = 1\nprint(m+n)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "1.0",
      "33.0",
      "4.0",
      "7.0",
      "4.0",
      "1.0",
      "7.0",
      "4.0",
      "33.0",
      "4.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import solve, Symbol\n\n# solve the quadratic equation\nx = Symbol('x')\nroots = solve(2*x**2 - 7*x + 2, x)\n\n# get the roots\na, b = roots\n\n# calculate the sum\nsum = (1/a - 1) + (1/b - 1)\nprint(sum)"
  },
  {
    "example_id": 37,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "expr = (9-4j) - (-3-4j)\nprint(expr)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.83333333333334"
    ],
    "annotated_answers": [
      "-55.0"
    ],
    "solution": "# find x1, x2, y1, y2\nx1, x2 = -1, 5\ny1, y2 = 0, 5\n\n# find a, b, c\na = (y2-y1) / (x2-x1)\nb = y1 - a*x1\nc = y1 - a*x1**2\n\n# find 100a+10b+c\nprint(100*a+10*b+c)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = 2\ny = 3\nprint(x+y)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "103.0"
    ],
    "solution": "import math\n\n# measure of the largest angle\nangle_129 = 129\n\n# measure of the second largest angle\nangle_2 = angle_129 - 90\n\nprint(angle_2)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "12.0",
      "12.0",
      "12.0",
      "12.0",
      "12.0",
      "12.0",
      "12.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import sqrt\n\ndef f(n):\n    if n == 0:\n        return 12\n    else:\n        return sqrt(12 - f(n - 1))\n\nprint(f(10))"
  },
  {
    "example_id": 42,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "575.0"
    ],
    "solution": "import math\nx = 1001\ny = math.sqrt(1001**2-x**2)\nprint(y)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16777216.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(0.5 * 1024 / 0.125 * 2 ** 12)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.848484848484848",
      "0.848484848484848"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\nf = 4/3\ng = 7/3\n# find x\nx = f * g * x / (f + g)\nprint(x)\n# find y\ny = f * g * y / (f + g)\nprint(y)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import numpy as np\n\nsegment = np.array([[1, 2], [-4, -10]])\nprint(segment.shape)"
  },
  {
    "example_id": 46,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x, y = 6 + 1, 8 + 1\nprint(x + y)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 4\nb = -2\nc = -1\nprint(a + b + c)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1996.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "n = 2008 - 13 + 1\nprint(n)"
  },
  {
    "example_id": 49,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "print(14 - 15)"
  },
  {
    "example_id": 50,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "b = 3\nprint(b)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5000.0"
    ],
    "annotated_answers": [
      "5000.0"
    ],
    "solution": "print(255**2 - 245**2)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "b = 3 - 2 * 2\nc = 3 - b * 2\nprint(c)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7 ** (log_x(49))\nprint(x)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.32379000772445"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "b = (125/5)**(1/2)\nc = (27/5)**(1/2)\nprint(c)"
  },
  {
    "example_id": 55,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "2.0",
      "48.0",
      "108.0",
      "2.0",
      "2.0",
      "-6.0",
      "2.0",
      "48.0",
      "108.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import solve, symbols\n\nx, y = symbols('x y')\n\nexpr = 2*x**2 + 3*y**2 + 8*x - 24*y + 62\n\nsolution = solve(expr, x, y)\n\nprint(solution)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# number of days in February\ndays_in_feb = 28\n# number of days between walks\ndays_between_walks = 3\n# fewest number of miles she can walk\nfewest_miles = days_in_feb // days_between_walks\nprint(fewest_miles * 4)"
  },
  {
    "example_id": 57,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import floor\n\ndef sum_of_roots(s):\n    # find the roots of the quadratic equation\n    # and make sure they are integers\n    x1, x2 = floor((-1 - s) / 2), floor((-1 + s) / 2)\n    if x1**2 + s * x1 - 1/2 == 0 and x2**2 + s * x2 - 1/2 == 0:\n        return s\n    else:\n        return 0\n\ndef sum_all_possible_values(s_range):\n    return sum(sum_of_roots(s) for s in s_range)\n\n# find all possible values of s\ns_range = range(-10, 10)\nprint(sum_all_possible_values(s_range))"
  },
  {
    "example_id": 58,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nprint(a**2 - b**2 + c**2)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 3 * 5\nb = 15 * 6\nc = 6\nd = (a * c) / b\nprint(d)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "from math import pi\n\n# find the volume of one cone\nr1 = 3\nh1 = 24\nv1 = (pi * r1**2 * h1) / 3\n\n# find the volume of the other cone\nr2 = r1 / 3\nh2 = h1\nv2 = (pi * r2**2 * h2) / 3\n\n# find the ratio of the volumes\nratio = v1 / v2\n\n# find the height of the other cone\nh2 = h1 * ratio\n\nprint(\"The height of the other cone is:\", h2)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 3\ny = 9\nprint(y**2 - 3*x*y + 8)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "4.0",
      "6.0",
      "6.0",
      "2.0",
      "7.0",
      "7.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sym\nx, y, a, b, c = sym.symbols(\"x y a b c\")\neq1 = a*x + b*y + c - x - 7\neq2 = a + b*x + c*y - 2*x - 6*y\neq3 = a*y + b + c*x - 4*x - y\nsol = sym.solve([eq1, eq2, eq3], [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "smallest_multiples_of_three = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\nprint(sum(smallest_multiples_of_three))"
  },
  {
    "example_id": 64,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "5.0",
      "7.0",
      "9.0",
      "11.0",
      "13.0",
      "15.0",
      "17.0",
      "19.0",
      "21.0",
      "23.0",
      "25.0",
      "27.0",
      "29.0",
      "31.0",
      "33.0",
      "35.0",
      "37.0",
      "39.0",
      "41.0",
      "43.0",
      "45.0",
      "47.0",
      "49.0",
      "51.0",
      "53.0",
      "55.0",
      "57.0",
      "59.0",
      "61.0",
      "63.0",
      "65.0",
      "67.0",
      "69.0",
      "71.0",
      "73.0",
      "75.0",
      "77.0",
      "79.0",
      "81.0",
      "83.0",
      "85.0",
      "87.0",
      "89.0",
      "91.0",
      "93.0",
      "95.0",
      "97.0",
      "99.0",
      "101.0",
      "103.0",
      "105.0",
      "107.0",
      "109.0",
      "111.0",
      "113.0",
      "115.0",
      "117.0",
      "119.0",
      "121.0",
      "123.0",
      "125.0",
      "127.0",
      "129.0",
      "131.0",
      "133.0",
      "135.0",
      "137.0",
      "139.0",
      "141.0",
      "143.0",
      "145.0",
      "147.0",
      "149.0",
      "151.0",
      "153.0",
      "155.0",
      "157.0",
      "159.0",
      "161.0",
      "163.0",
      "165.0",
      "167.0",
      "169.0",
      "171.0",
      "173.0",
      "175.0",
      "177.0",
      "179.0",
      "181.0",
      "183.0",
      "185.0",
      "187.0",
      "189.0",
      "191.0",
      "193.0",
      "195.0",
      "197.0",
      "199.0",
      "201.0",
      "203.0",
      "205.0",
      "207.0",
      "209.0",
      "211.0",
      "213.0",
      "215.0",
      "217.0",
      "219.0",
      "221.0",
      "223.0",
      "225.0",
      "227.0",
      "229.0",
      "231.0",
      "233.0",
      "235.0",
      "237.0",
      "239.0",
      "241.0",
      "243.0",
      "245.0",
      "247.0",
      "249.0",
      "251.0",
      "253.0",
      "255.0",
      "257.0",
      "259.0",
      "261.0",
      "263.0",
      "265.0",
      "267.0",
      "269.0",
      "271.0",
      "273.0",
      "275.0",
      "277.0",
      "279.0",
      "281.0",
      "283.0",
      "285.0",
      "287.0",
      "289.0",
      "291.0",
      "293.0",
      "295.0",
      "297.0",
      "299.0",
      "301.0",
      "303.0",
      "305.0",
      "307.0",
      "309.0",
      "311.0",
      "313.0",
      "315.0",
      "317.0",
      "319.0",
      "321.0",
      "323.0",
      "325.0",
      "327.0",
      "329.0",
      "331.0",
      "333.0",
      "335.0",
      "337.0",
      "339.0",
      "341.0",
      "343.0",
      "345.0",
      "347.0",
      "349.0",
      "351.0",
      "353.0",
      "355.0",
      "357.0",
      "359.0",
      "361.0",
      "363.0",
      "365.0",
      "367.0",
      "369.0",
      "371.0",
      "373.0",
      "375.0",
      "377.0",
      "379.0",
      "381.0",
      "383.0",
      "385.0",
      "387.0",
      "389.0",
      "391.0",
      "393.0",
      "395.0",
      "397.0",
      "399.0",
      "401.0",
      "403.0",
      "405.0",
      "407.0",
      "409.0",
      "411.0",
      "413.0",
      "415.0",
      "417.0",
      "419.0",
      "421.0",
      "423.0",
      "425.0",
      "427.0",
      "429.0",
      "431.0",
      "433.0",
      "435.0",
      "437.0",
      "439.0",
      "441.0",
      "443.0",
      "445.0",
      "447.0",
      "449.0",
      "451.0",
      "453.0",
      "455.0",
      "457.0",
      "459.0",
      "461.0",
      "463.0",
      "465.0",
      "467.0",
      "469.0",
      "471.0",
      "473.0",
      "475.0",
      "477.0",
      "479.0",
      "481.0",
      "483.0",
      "485.0",
      "487.0",
      "489.0",
      "491.0",
      "493.0",
      "495.0",
      "497.0",
      "499.0",
      "501.0",
      "503.0",
      "505.0",
      "507.0",
      "509.0",
      "511.0",
      "513.0",
      "515.0",
      "517.0",
      "519.0",
      "521.0",
      "523.0",
      "525.0",
      "527.0",
      "529.0",
      "531.0",
      "533.0",
      "535.0",
      "537.0",
      "539.0",
      "541.0",
      "543.0",
      "545.0",
      "547.0",
      "549.0",
      "551.0",
      "553.0",
      "555.0",
      "557.0",
      "559.0",
      "561.0",
      "563.0",
      "565.0",
      "567.0",
      "569.0",
      "571.0",
      "573.0",
      "575.0",
      "577.0",
      "579.0",
      "581.0",
      "583.0",
      "585.0",
      "587.0",
      "589.0",
      "591.0",
      "593.0",
      "595.0",
      "597.0",
      "599.0",
      "601.0",
      "603.0",
      "605.0",
      "607.0",
      "609.0",
      "611.0",
      "613.0",
      "615.0",
      "617.0",
      "619.0",
      "621.0",
      "623.0",
      "625.0",
      "627.0",
      "629.0",
      "631.0",
      "633.0",
      "635.0",
      "637.0",
      "639.0",
      "641.0",
      "643.0",
      "645.0",
      "647.0",
      "649.0",
      "651.0",
      "653.0",
      "655.0",
      "657.0",
      "659.0",
      "661.0",
      "663.0",
      "665.0",
      "667.0",
      "669.0",
      "671.0",
      "673.0",
      "675.0",
      "677.0",
      "679.0",
      "681.0",
      "683.0",
      "685.0",
      "687.0",
      "689.0",
      "691.0",
      "693.0",
      "695.0",
      "697.0",
      "699.0",
      "701.0",
      "703.0",
      "705.0",
      "707.0",
      "709.0",
      "711.0",
      "713.0",
      "715.0",
      "717.0",
      "719.0",
      "721.0",
      "723.0",
      "725.0",
      "727.0",
      "729.0",
      "731.0",
      "733.0",
      "735.0",
      "737.0",
      "739.0",
      "741.0",
      "743.0",
      "745.0",
      "747.0",
      "749.0",
      "751.0",
      "753.0",
      "755.0",
      "757.0",
      "759.0",
      "761.0",
      "763.0",
      "765.0",
      "767.0",
      "769.0",
      "771.0",
      "773.0",
      "775.0",
      "777.0",
      "779.0",
      "781.0",
      "783.0",
      "785.0",
      "787.0",
      "789.0",
      "791.0",
      "793.0",
      "795.0",
      "797.0",
      "799.0",
      "801.0",
      "803.0",
      "805.0",
      "807.0",
      "809.0",
      "811.0",
      "813.0",
      "815.0",
      "817.0",
      "819.0",
      "821.0",
      "823.0",
      "825.0",
      "827.0",
      "829.0",
      "831.0",
      "833.0",
      "835.0",
      "837.0",
      "839.0",
      "841.0",
      "843.0",
      "845.0",
      "847.0",
      "849.0",
      "851.0",
      "853.0",
      "855.0",
      "857.0",
      "859.0",
      "861.0",
      "863.0",
      "865.0",
      "867.0",
      "869.0",
      "871.0",
      "873.0",
      "875.0",
      "877.0",
      "879.0",
      "881.0",
      "883.0",
      "885.0",
      "887.0",
      "889.0",
      "891.0",
      "893.0",
      "895.0",
      "897.0",
      "899.0",
      "901.0",
      "903.0",
      "905.0",
      "907.0",
      "909.0",
      "911.0",
      "913.0",
      "915.0",
      "917.0",
      "919.0",
      "921.0",
      "923.0",
      "925.0",
      "927.0",
      "929.0",
      "931.0",
      "933.0",
      "935.0",
      "937.0",
      "939.0",
      "941.0",
      "943.0",
      "945.0",
      "947.0",
      "949.0",
      "951.0",
      "953.0",
      "955.0",
      "957.0",
      "959.0",
      "961.0",
      "963.0",
      "965.0",
      "967.0",
      "969.0",
      "971.0",
      "973.0",
      "975.0",
      "977.0",
      "979.0",
      "981.0",
      "983.0",
      "985.0",
      "987.0",
      "989.0",
      "991.0",
      "993.0",
      "995.0",
      "997.0",
      "999.0",
      "1001.0",
      "1003.0",
      "1005.0",
      "1007.0",
      "1009.0",
      "1011.0",
      "1013.0",
      "1015.0",
      "1017.0",
      "1019.0",
      "1021.0",
      "1023.0",
      "1025.0",
      "1027.0",
      "1029.0",
      "1031.0",
      "1033.0",
      "1035.0",
      "1037.0",
      "1039.0",
      "1041.0",
      "1043.0",
      "1045.0",
      "1047.0",
      "1049.0",
      "1051.0",
      "1053.0",
      "1055.0",
      "1057.0",
      "1059.0",
      "1061.0",
      "1063.0",
      "1065.0",
      "1067.0",
      "1069.0",
      "1071.0",
      "1073.0",
      "1075.0",
      "1077.0",
      "1079.0",
      "1081.0",
      "1083.0",
      "1085.0",
      "1087.0",
      "1089.0",
      "1091.0",
      "1093.0",
      "1095.0",
      "1097.0",
      "1099.0",
      "1101.0",
      "1103.0",
      "1105.0",
      "1107.0",
      "1109.0",
      "1111.0",
      "1113.0",
      "1115.0",
      "1117.0",
      "1119.0",
      "1121.0",
      "1123.0",
      "1125.0",
      "1127.0",
      "1129.0",
      "1131.0",
      "1133.0",
      "1135.0",
      "1137.0",
      "1139.0",
      "1141.0",
      "1143.0",
      "1145.0",
      "1147.0",
      "1149.0",
      "1151.0",
      "1153.0",
      "1155.0",
      "1157.0",
      "1159.0",
      "1161.0",
      "1163.0",
      "1165.0",
      "1167.0",
      "1169.0",
      "1171.0",
      "1173.0",
      "1175.0",
      "1177.0",
      "1179.0",
      "1181.0",
      "1183.0",
      "1185.0",
      "1187.0",
      "1189.0",
      "1191.0",
      "1193.0",
      "1195.0",
      "1197.0",
      "1199.0",
      "1201.0",
      "1203.0",
      "1205.0",
      "1207.0",
      "1209.0",
      "1211.0",
      "1213.0",
      "1215.0",
      "1217.0",
      "1219.0",
      "1221.0",
      "1223.0",
      "1225.0",
      "1227.0",
      "1229.0",
      "1231.0",
      "1233.0",
      "1235.0",
      "1237.0",
      "1239.0",
      "1241.0",
      "1243.0",
      "1245.0",
      "1247.0",
      "1249.0",
      "1251.0",
      "1253.0",
      "1255.0",
      "1257.0",
      "1259.0",
      "1261.0",
      "1263.0",
      "1265.0",
      "1267.0",
      "1269.0",
      "1271.0",
      "1273.0",
      "1275.0",
      "1277.0",
      "1279.0",
      "1281.0",
      "1283.0",
      "1285.0",
      "1287.0",
      "1289.0",
      "1291.0",
      "1293.0",
      "1295.0",
      "1297.0",
      "1299.0",
      "1301.0",
      "1303.0",
      "1305.0",
      "1307.0",
      "1309.0",
      "1311.0",
      "1313.0",
      "1315.0",
      "1317.0",
      "1319.0",
      "1321.0",
      "1323.0",
      "1325.0",
      "1327.0",
      "1329.0",
      "1331.0",
      "1333.0",
      "1335.0",
      "1337.0",
      "1339.0",
      "1341.0",
      "1343.0",
      "1345.0",
      "1347.0",
      "1349.0",
      "1351.0",
      "1353.0",
      "1355.0",
      "1357.0",
      "1359.0",
      "1361.0",
      "1363.0",
      "1365.0",
      "1367.0",
      "1369.0",
      "1371.0",
      "1373.0",
      "1375.0",
      "1377.0",
      "1379.0",
      "1381.0",
      "1383.0",
      "1385.0",
      "1387.0",
      "1389.0",
      "1391.0",
      "1393.0",
      "1395.0",
      "1397.0",
      "1399.0",
      "1401.0",
      "1403.0",
      "1405.0",
      "1407.0",
      "1409.0",
      "1411.0",
      "1413.0",
      "1415.0",
      "1417.0",
      "1419.0",
      "1421.0",
      "1423.0",
      "1425.0",
      "1427.0",
      "1429.0",
      "1431.0",
      "1433.0",
      "1435.0",
      "1437.0",
      "1439.0",
      "1441.0",
      "1443.0",
      "1445.0",
      "1447.0",
      "1449.0",
      "1451.0",
      "1453.0",
      "1455.0",
      "1457.0",
      "1459.0",
      "1461.0",
      "1463.0",
      "1465.0",
      "1467.0",
      "1469.0",
      "1471.0",
      "1473.0",
      "1475.0",
      "1477.0",
      "1479.0",
      "1481.0",
      "1483.0",
      "1485.0",
      "1487.0",
      "1489.0",
      "1491.0",
      "1493.0",
      "1495.0",
      "1497.0",
      "1499.0",
      "1501.0",
      "1503.0",
      "1505.0",
      "1507.0",
      "1509.0",
      "1511.0",
      "1513.0",
      "1515.0",
      "1517.0",
      "1519.0",
      "1521.0",
      "1523.0",
      "1525.0",
      "1527.0",
      "1529.0",
      "1531.0",
      "1533.0",
      "1535.0",
      "1537.0",
      "1539.0",
      "1541.0",
      "1543.0",
      "1545.0",
      "1547.0",
      "1549.0",
      "1551.0",
      "1553.0",
      "1555.0",
      "1557.0",
      "1559.0",
      "1561.0",
      "1563.0",
      "1565.0",
      "1567.0",
      "1569.0",
      "1571.0",
      "1573.0",
      "1575.0",
      "1577.0",
      "1579.0",
      "1581.0",
      "1583.0",
      "1585.0",
      "1587.0",
      "1589.0",
      "1591.0",
      "1593.0",
      "1595.0",
      "1597.0",
      "1599.0",
      "1601.0",
      "1603.0",
      "1605.0",
      "1607.0",
      "1609.0",
      "1611.0",
      "1613.0",
      "1615.0",
      "1617.0",
      "1619.0",
      "1621.0",
      "1623.0",
      "1625.0",
      "1627.0",
      "1629.0",
      "1631.0",
      "1633.0",
      "1635.0",
      "1637.0",
      "1639.0",
      "1641.0",
      "1643.0",
      "1645.0",
      "1647.0",
      "1649.0",
      "1651.0",
      "1653.0",
      "1655.0",
      "1657.0",
      "1659.0",
      "1661.0",
      "1663.0",
      "1665.0",
      "1667.0",
      "1669.0",
      "1671.0",
      "1673.0",
      "1675.0",
      "1677.0",
      "1679.0",
      "1681.0",
      "1683.0",
      "1685.0",
      "1687.0",
      "1689.0",
      "1691.0",
      "1693.0",
      "1695.0",
      "1697.0",
      "1699.0",
      "1701.0",
      "1703.0",
      "1705.0",
      "1707.0",
      "1709.0",
      "1711.0",
      "1713.0",
      "1715.0",
      "1717.0",
      "1719.0",
      "1721.0",
      "1723.0",
      "1725.0",
      "1727.0",
      "1729.0",
      "1731.0",
      "1733.0",
      "1735.0",
      "1737.0",
      "1739.0",
      "1741.0",
      "1743.0",
      "1745.0",
      "1747.0",
      "1749.0",
      "1751.0",
      "1753.0",
      "1755.0",
      "1757.0",
      "1759.0",
      "1761.0",
      "1763.0",
      "1765.0",
      "1767.0",
      "1769.0",
      "1771.0",
      "1773.0",
      "1775.0",
      "1777.0",
      "1779.0",
      "1781.0",
      "1783.0",
      "1785.0",
      "1787.0",
      "1789.0",
      "1791.0",
      "1793.0",
      "1795.0",
      "1797.0",
      "1799.0",
      "1801.0",
      "1803.0",
      "1805.0",
      "1807.0",
      "1809.0",
      "1811.0",
      "1813.0",
      "1815.0",
      "1817.0",
      "1819.0",
      "1821.0",
      "1823.0",
      "1825.0",
      "1827.0",
      "1829.0",
      "1831.0",
      "1833.0",
      "1835.0",
      "1837.0",
      "1839.0",
      "1841.0",
      "1843.0",
      "1845.0",
      "1847.0",
      "1849.0",
      "1851.0",
      "1853.0",
      "1855.0",
      "1857.0",
      "1859.0",
      "1861.0",
      "1863.0",
      "1865.0",
      "1867.0",
      "1869.0",
      "1871.0",
      "1873.0",
      "1875.0",
      "1877.0",
      "1879.0",
      "1881.0",
      "1883.0",
      "1885.0",
      "1887.0",
      "1889.0",
      "1891.0",
      "1893.0",
      "1895.0",
      "1897.0",
      "1899.0",
      "1901.0",
      "1903.0",
      "1905.0",
      "1907.0",
      "1909.0",
      "1911.0",
      "1913.0",
      "1915.0",
      "1917.0",
      "1919.0",
      "1921.0",
      "1923.0",
      "1925.0",
      "1927.0",
      "1929.0",
      "1931.0",
      "1933.0",
      "1935.0",
      "1937.0",
      "1939.0",
      "1941.0",
      "1943.0",
      "1945.0",
      "1947.0",
      "1949.0",
      "1951.0",
      "1953.0",
      "1955.0",
      "1957.0",
      "1959.0",
      "1961.0",
      "1963.0",
      "1965.0",
      "1967.0",
      "1969.0",
      "1971.0",
      "1973.0",
      "1975.0",
      "1977.0",
      "1979.0",
      "1981.0",
      "1983.0",
      "1985.0",
      "1987.0",
      "1989.0",
      "1991.0",
      "1993.0",
      "1995.0",
      "1997.0",
      "1999.0",
      "2001.0",
      "2003.0"
    ],
    "annotated_answers": [
      "4005.0"
    ],
    "solution": "def odd_numbers(n):\n    for i in range(1, n + 1, 2):\n        yield i\n\nfor i in odd_numbers(2003):\n    print(i)"
  },
  {
    "example_id": 65,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "c = -1 * (4 * (-1)**7 + (-1)**5 + 3 * (-1)**2 - 2 * (-1) + 0)\nprint(c)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pints_3_miles = 1.5\npints_10_miles = 10 / 3 * pints_3_miles\nprint(pints_10_miles)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 2\nb = 1\nprint(a / b + b / a - a * b)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "import numpy as np\n\ndef find_time_of_impact(v0, y0):\n    g = 32\n    t = np.linspace(0, 1000, 10000)\n    y = -16*t**2 + 26*t + 105\n    y_impact = np.where(y < 0, y, 0)\n    return t[np.argmax(y_impact)]\n\nv0 = 26\ny0 = 105\ntime = find_time_of_impact(v0, y0)\nprint(time)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.999500998003992",
      "-0.500249625561658",
      "0.866169477209129",
      "0.999500998003992",
      "-0.500249625561658",
      "0.866169477209129"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nroots = solve(2003/2004*x + 1 + 1/x - 0, x)\nprint(sum(1/root for root in roots))"
  },
  {
    "example_id": 70,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.4"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n = (55 + 1)/2\nprint(n)"
  },
  {
    "example_id": 72,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "0.5"
    ],
    "solution": "x1 = 1\nx2 = 3\nx = x1 + x2\nprint(x)"
  },
  {
    "example_id": 73,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "a = (2*7 - 3*4) / (2*2 - 3*1)\nprint(a)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "6.0",
      "2.0",
      "2.0",
      "6.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsolution = sympy.solve(2*x**2 + 4*x - 1, x)\nprint(sum([solution[i]**2 for i in range(len(solution))]))"
  },
  {
    "example_id": 75,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import numpy as np\n\n# Define a function that returns the distance between two points.\ndef distance(p1, p2):\n    return np.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\n# Compute the distance between the two points.\ndist = distance((-3, 7), (2, -5))\nprint(dist)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.24761904761904763"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# The number of cents charged for each extra hour.\nannual_fee = 26 / 105\nprint(annual_fee)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "73.5"
    ],
    "solution": "j = 42 / 56\nk = 32\nprint(j * k)"
  },
  {
    "example_id": 78,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "x = 5 ** 2 + 18\nprint(x)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2067.0"
    ],
    "annotated_answers": [
      "2015.0"
    ],
    "solution": "b = 2011 + 1\nwhile (b * (b + 1) / 2 - (b - 1) * (b - 1) / 2) % 100!= 0:\n    b += 1\nprint(b)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "350.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "print(113 + 276 - 13 - 26)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "625.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "width = 100 / 4\narea = width * width\nprint(area)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\n\n# Step 1: Solve the equation\nx = sp.symbols('x')\neq1 = (2**x - 2)*(5*2**x + 10) - 3*4**x - 12\nsol_x = sp.solve(eq1, x)\n\n# Step 2: Print the solution\nprint(sol_x)"
  },
  {
    "example_id": 83,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "1024.0",
      "4.0",
      "5.0",
      "2.0",
      "1024.0",
      "2.0",
      "5.0",
      "2.0",
      "1024.0",
      "2.0",
      "5.0",
      "2.0",
      "1024.0",
      "4.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nexpr = (2 ** (x + 1)) ** 3 * 4 ** x\nsol = sympy.solve(expr - 8192, x)\nprint(sol)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-41.525991573035554"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from math import sqrt\n\ndef solve_quadratic(a, b):\n    return (-b + sqrt(b**2 - 4*a*b)) / (2*a)\n\ndef solve_linear(a, b):\n    return -b/a\n\ndef solve_x(a, b):\n    return solve_quadratic(a, b) + solve_linear(a, b)\n\ndef find_x(a, b):\n    return [solve_x(a, b)]\n\ndef sum_x(x_list):\n    return sum(x_list)\n\na = 2\nb = 81\nx_list = find_x(a, b)\nprint(sum_x(x_list))"
  },
  {
    "example_id": 85,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "degree_f = 6\ndegree_g = 3\ndegree_h = 36 - degree_f - degree_g\nprint(degree_h)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "x = 15\nx = 7 - x\nx = x - 7\nprint(x)"
  },
  {
    "example_id": 87,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import floor, ceiling, pi, sqrt\n\ndef f(n):\n    if n >= 4:\n        return floor(n)\n    else:\n        return ceiling(n)\n\nprint(f(pi/3) + f(sqrt(45)) + f(8**(2/3)))"
  },
  {
    "example_id": 88,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "x = (7+2)/3\ny = (7-2)/5\nprint(24*x-14*y)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\n\ndef graph(f, a, b, n=50):\n    x = sympy.Symbol('x')\n    y = f(x)\n    xs = [a + (b - a) * i / n for i in range(n + 1)]\n    ys = [y.subs(x, xi) for xi in xs]\n    return xs, ys\n\nf = lambda x: x - 3 / (x ** 2 + 7 * x - 30)\n\nxs, ys = graph(f, -5, 5)\n\nprint(len(list(filter(lambda y: y.is_infinite, ys))))"
  },
  {
    "example_id": 90,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "# 8 fish per cubic meter\n# 600 fish\n# cubic meters of water = 600 / 8\n# cubic meters of water = 75\nprint(75)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(531**2 - 2*531*530 + 530**2)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# use sympy to simplify\nfrom sympy import Symbol\nx = Symbol('x')\nprint(x**(-1) > x)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "treeks = 10\nsquigs = 3\ngoolees = 1\n\ntotal_weight = treeks + squigs + goolees\n\ntreeks_weight = total_weight - squigs - goolees\n\nprint(treeks_weight)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "lesser = 3\ngreater = 5\n\n# 4 - lesser = 1\n# 8 + greater = 11\n\nlesser = 3 - 4\ngreater = 5 + 8\n\nprint(greater)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0",
      "5.0",
      "2.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import *\n\nh = lambda x: sqrt(25-x**2) + sqrt(abs(x-2))\n\nprint(h(2))\n\nprint(h(3))\n\nprint(h(4))\n\nprint(h(5))"
  },
  {
    "example_id": 96,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "187.5"
    ],
    "annotated_answers": [
      "187.5"
    ],
    "solution": "calories_in_a_8_fluid_ounce_bottle = 125\ncalories_in_a_12_fluid_ounce_bottle = calories_in_a_8_fluid_ounce_bottle * 1.5\nprint(calories_in_a_12_fluid_ounce_bottle)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "k = 6\nprint(k)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(2 * (-2) ** 2 + 3 * (-2) + 4)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0000000000000004"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "from math import log\na = log(32, 2)\nb = log(125, a)\nprint(b)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Define a function for the number of books sold per month\ndef books_sold(price):\n    return 120 - 3 * price\n\n# Find the maximum value of the function\np_max = max(range(41), key=books_sold)\n\n# Print the maximum price\nprint(p_max)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\na = sympy.solve(sympy.Eq(x**2 + 8*x + 4, 0), x)[0]\nprint(a)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.31"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# the annual interest rate\nr = (66200 - 20000) / 20000\nprint(r)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "print((34-10)+(20-9)+(55-10))"
  },
  {
    "example_id": 104,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "700.0"
    ],
    "annotated_answers": [
      "700.0"
    ],
    "solution": "print(32**2 - 18**2)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(int(3/2)**2 + int((3/2)**2))"
  },
  {
    "example_id": 106,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0",
      "15.0",
      "15.0",
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "for i in range(2, 20):\n    for j in range(2, 20):\n        if i * j - (i + j) == 39:\n            print(i + j)"
  },
  {
    "example_id": 107,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(a, b, c, d):\n    return a**b + c*d\n\nb = 2\nwhile f(6, b, 4, 3)!= 48:\n    b += 1\n\nprint(b)"
  },
  {
    "example_id": 108,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "3.0",
      "3.0",
      "2.0",
      "1.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import Sum, Symbol\nn = Symbol('n', integer=True)\nprint(Sum(n**3 + 2*n - 1, (n, 1, 3)) + Sum(n - 1, (n, 1, 3)))"
  },
  {
    "example_id": 109,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\n\ndef f(x):\n    if x < 0:\n        return -x**2 - 1\n    elif 0 <= x < 4:\n        return 2\n    else:\n        return sqrt(x)\n\nprint(f(pi))"
  },
  {
    "example_id": 110,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.25"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "S = (1 + 1 + 1) / 2\nS_squared = S ** 2\nprint(S_squared)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-33.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\neq = x**2 - 6*x + 2 - 29\na, b = sym.solve(eq, x)\nprint(2*a - 3*b)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def quadratic_solutions(a):\n    from sympy import Symbol, solve\n    x = Symbol('x')\n    return len(list(solve(x**2 + a*x + 5*a, x)))\n\nprint(quadratic_solutions(1))\nprint(quadratic_solutions(2))\nprint(quadratic_solutions(3))"
  },
  {
    "example_id": 113,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "numerator = 5 + 8\ndenominator = 8 + 5\nprint(numerator / denominator)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from sympy import *\n\ndef g(x):\n    return -6*sin(x*pi/6)\n\nprint(g(g(-1)))"
  },
  {
    "example_id": 115,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\nc = sympy.symbols(\"c\")\nf = sympy.Function(\"f\")\nx = sympy.symbols(\"x\")\n\ndomain = sympy.solve(f(x).diff(x) - (2*x**2 + x + 5) / (x**2 + 4*x + c))\nprint(domain)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sp\n\nc = sp.symbols('c')\nf = sp.Function('f', real=True)\n\nx = sp.symbols('x')\n\nconditions = [\n    f(x).diff(x).subs(x, 0) == 0,\n    f(x).subs(x, 0) == 0,\n    f(x).diff(x).subs(x, 1)!= 0,\n    f(x).subs(x, 1)!= 0,\n]\n\nsolution = sp.solve(conditions, c)\n\nprint(solution)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.03333333333333333"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 30 / (5 * 10 * 18)\nprint(x)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return x**2 + 12\n\nm = 3\nwhile f(m) == 3*f(m/3):\n    m *= 3\n\nprint(m)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = (-50 + 2*10) / 2\nprint(x)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nprint(math.log(4, 2) / math.log(4, 4))"
  },
  {
    "example_id": 121,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "y = 8 - 5*(-2) + 4*(-2)**2\nprint(y)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x_1 = -1\nx_2 = 1\nprint(x_1**2 + x_2**2)"
  },
  {
    "example_id": 123,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.3"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "slope = (19 - 9) / (7 - 0)\ny_intercept = 19 - slope * 7\nk = y_intercept / slope\nprint(k)"
  },
  {
    "example_id": 124,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74725.8172866057"
    ],
    "annotated_answers": [
      "74726.0"
    ],
    "solution": "initial_investment = 100000 / (1 + 0.06)**5\nprint(initial_investment)"
  },
  {
    "example_id": 125,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import log\nprint(log(1, 2))"
  },
  {
    "example_id": 127,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "N = 3\nprint(N)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0",
      "5.0"
    ],
    "annotated_answers": [
      "93.0"
    ],
    "solution": "import sympy\n\nx = sympy.sqrt(245) + 3*sympy.sqrt(125) + 4*sympy.sqrt(45)\nprint(sympy.cancel(x))"
  },
  {
    "example_id": 129,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "u = Symbol('u')\nexpr = (u+4)*(u-1) - (u-3)*(u+6)\nprint(expr.expand())"
  },
  {
    "example_id": 130,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "13.5"
    ],
    "solution": "print(abs(18*A - 18*B))"
  },
  {
    "example_id": 131,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "f = lambda x: (4-x)/2\ng = lambda x: 2*x-4\nf(g(1))*g(f(1))"
  },
  {
    "example_id": 132,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\na, b = sympy.symbols('a, b')\nexpr = (a*x + b)*(2*x + 3)\nexpr.expand()\nprint(expr)\nprint(expr.subs({a: a+b}))"
  },
  {
    "example_id": 133,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def distance_between_points(x1, y1, x2, y2):\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\ndef move_point(x, y, dx, dy):\n    return x + dx, y + dy\n\ndef distance_between_points_after_move(x1, y1, x2, y2, dx1, dy1, dx2, dy2):\n    x1_new, y1_new = move_point(x1, y1, dx1, dy1)\n    x2_new, y2_new = move_point(x2, y2, dx2, dy2)\n    return distance_between_points(x1_new, y1_new, x2_new, y2_new)\n\n# Test\nprint(distance_between_points_after_move(0, 0, 3, 4, 2, 3, -1, -2))"
  },
  {
    "example_id": 134,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 70 / 2\nprint(n)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0",
      "48.0",
      "47.0",
      "1128.0",
      "46.0",
      "17296.0",
      "45.0",
      "194580.0",
      "44.0",
      "1712304.0",
      "43.0",
      "12271512.0",
      "42.0",
      "73629072.0",
      "41.0",
      "377348994.0",
      "40.0",
      "1677106640.0",
      "39.0",
      "6540715896.0",
      "38.0",
      "22595200368.0",
      "37.0",
      "69668534468.0",
      "36.0",
      "192928249296.0",
      "35.0",
      "482320623240.0",
      "34.0",
      "1093260079344.0",
      "33.0",
      "2254848913647.0",
      "32.0",
      "4244421484512.0",
      "31.0",
      "7309837001104.0",
      "30.0",
      "11541847896480.0",
      "29.0",
      "16735679449896.0",
      "28.0",
      "22314239266528.0",
      "27.0",
      "27385657281648.0",
      "26.0",
      "30957699535776.0",
      "25.0",
      "32247603683100.0",
      "24.0",
      "30957699535776.0",
      "23.0",
      "27385657281648.0",
      "22.0",
      "22314239266528.0",
      "21.0",
      "16735679449896.0",
      "20.0",
      "11541847896480.0",
      "19.0",
      "7309837001104.0",
      "18.0",
      "4244421484512.0",
      "17.0",
      "2254848913647.0",
      "16.0",
      "1093260079344.0",
      "15.0",
      "482320623240.0",
      "14.0",
      "192928249296.0",
      "13.0",
      "69668534468.0",
      "12.0",
      "22595200368.0",
      "11.0",
      "6540715896.0",
      "10.0",
      "1677106640.0",
      "9.0",
      "377348994.0",
      "8.0",
      "73629072.0",
      "7.0",
      "12271512.0",
      "6.0",
      "1712304.0",
      "5.0",
      "194580.0",
      "4.0",
      "17296.0",
      "3.0",
      "1128.0",
      "2.0",
      "48.0",
      "1.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "from math import factorial\nfrom sympy import Symbol, expand\n\nx = 4 / (((1 + 1/2 ** 0.5) * (1 + 1/2 ** 0.25) * (1 + 1/2 ** 0.125) * (1 + 1/2 ** 0.0625)))\n\nx = Symbol('x')\n\nresult = expand((x + 1) ** 48)\n\nprint(result)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "f(g(2)) = f(2^2 + 3)\n       = (2^2 + 3) + 1\n       = 5 + 1\n       = 6"
  },
  {
    "example_id": 137,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "print(int(3.6) ** 2 - int(3.6) ** 2)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "121.0"
    ],
    "solution": "import math\n\n# square root of 400 is 20\n\n# square root of 81 is 9\n\n# n = 20 - 9 = 11\n\nprint(11)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "2.0",
      "14.0",
      "19.0",
      "7.0",
      "19.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "361.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nf = 49*x**2 + 14*x*(19-7*x) + (19-7*x)**2\nprint(f)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = -5\nb = 2"
  },
  {
    "example_id": 141,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\ndef days_to_paint(square_feet):\n    return math.ceil(math.log(square_feet, 2))\n\ndays = days_to_paint(15 * 15)\nprint(days)"
  },
  {
    "example_id": 142,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\nprint(x**3 - 2*x + 1)"
  },
  {
    "example_id": 143,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c = 6, 1, 2\nd = (a+b)**2 - 4*c\nprint(d)"
  },
  {
    "example_id": 144,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "# calculate the total weight of each pair\nweight_abby_bart = 160\nweight_bart_cindy = 180\nweight_cindy_damon = 200\n\n# calculate the total weight of all four\ntotal_weight = weight_abby_bart + weight_bart_cindy + weight_cindy_damon\n\n# calculate the weight of Abby and Damon\nabby_damon_weight = total_weight - weight_abby_bart - weight_bart_cindy - weight_cindy_damon\n\nprint(abby_damon_weight)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x y')\n\n# 3y = x\nline_3y_x = sympy.solve(3*y - x, y)[0]\n\n# 2x + 5y = 11\nline_2x_5y_11 = sympy.solve(2*x + 5*line_3y_x - 11, x)[0]\n\n# x = line_2x_5y_11\nx = line_2x_5y_11\n\n# y = line_3y_x\ny = line_3y_x\n\nsum_x_y = x + y\nprint(sum_x_y)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.146264369941973"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from math import sqrt\n\nnumerator = 1 + sqrt(2)\ndenominator = 2 + sqrt(3)\n\nA = numerator // denominator\nB = denominator // numerator\nC = numerator - A\nD = denominator - B\n\nprint(A + B + C + D)"
  },
  {
    "example_id": 147,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a = 2*2 - 2\nb = 2*2 + 2\nprint(a+b)"
  },
  {
    "example_id": 148,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Step 1: Find mnp\nfrom sympy import solve\nm, n, p = symbols('m n p')\neq1 = (m+n+p)*(mn+mp+np) - 25\neq2 = m**2*(n+p) + n**2(m+p) + p**2(m+n) - 4\nsolve([eq1, eq2], [m, n, p])\n\n# Step 2: Find mnp\nfrom sympy import simplify\nm, n, p = symbols('m n p')\nmnp = simplify(solve([eq1, eq2], [m, n, p]))\nprint(mnp)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import I\nz = I\nf = z**2\nprint(f)"
  },
  {
    "example_id": 150,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-114.0"
    ],
    "annotated_answers": [
      "-114.0"
    ],
    "solution": "sum = 0\nfor x in range(-30, 27):\n    sum += x\nprint(sum)"
  },
  {
    "example_id": 151,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1620.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import ceil\n\nflour_per_cookie = 1.5\neggs_per_cookie = 2\nbutter_per_cookie = 3\nsugar_per_cookie = 1.5\n\ncookies_per_stick = 8\n\ncookies_per_batch = 15\n\nstudents_per_batch = 108\n\nbatches_needed = ceil(216 / cookies_per_batch)\n\nsticks_needed = ceil(batches_needed * students_per_batch * (flour_per_cookie + eggs_per_cookie + butter_per_cookie + sugar_per_cookie) / cookies_per_stick)\n\nprint(sticks_needed)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "2.0",
      "60.0",
      "100.0",
      "2.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "from sympy import *\n\nx, y = symbols('x y')\nexpr = expand((2*x + 3*y)**2)\nexpr = expr.subs(x, -5/y)\nprint(expr)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "8.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "for x in range(1, 10):\n    if (x - 3) * (x**2 - 10 * x + 16) == 0:\n        print(x)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nsolve(x/(x**2-2*x+1), x)"
  },
  {
    "example_id": 155,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "def f(x):\n    return (x-0.5)*(x-2.5)*(x-6.5)*(x-7.5)/16+x\n\nsum = 0\nfor x in range(1, 9):\n    if f(x) > x:\n        sum += x\nprint(sum)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "def f(x):\n    return 1/4*f(x/2)\n\ndef f(x):\n    return x\n\nprint(f(8)+8)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "f = lambda x: 5*x+2\ng = lambda x: 3*x**2-4*x\nprint(f(f(1)) - g(g(2)))"
  },
  {
    "example_id": 158,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = (13 + (-16) + 6) / 3\ny = 8 ** (1 / 3)\nprint(x ** 2 + y ** 3)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "-11.0"
    ],
    "solution": "x = 2*(-1) + 9\nprint(x)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "1710.0"
    ],
    "solution": "total = 0\nfor i in range(1, 21):\n    total += i * 2\nprint(total)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.01072854",
      "0.0",
      "1.00651682",
      "0.09206358",
      "1.00651682",
      "-0.09206358",
      "0.99883352",
      "0.15643423",
      "0.99883352",
      "-0.15643423",
      "0.98700952",
      "0.21936819",
      "0.98700952",
      "-0.21936819",
      "0.97124346",
      "0.28118954",
      "0.97124346",
      "-0.28118954",
      "0.95162811",
      "0.34179189",
      "0.95162811",
      "-0.34179189",
      "0.92825021",
      "0.40098663",
      "0.92825021",
      "-0.40098663",
      "0.90120568",
      "0.45856326",
      "0.90120568",
      "-0.45856326",
      "0.87060288",
      "0.51430672",
      "0.87060288",
      "-0.51430672",
      "0.83656343",
      "0.56800405",
      "0.83656343",
      "-0.56800405",
      "0.79922213",
      "0.61944771",
      "0.79922213",
      "-0.61944771",
      "0.75872663",
      "0.66843756",
      "0.75872663",
      "-0.66843756",
      "0.71523691",
      "0.71478224",
      "0.71523691",
      "-0.71478224",
      "0.66892472",
      "0.75830024",
      "0.66892472",
      "-0.75830024",
      "0.6199729",
      "0.79882087",
      "0.6199729",
      "-0.79882087",
      "0.56857469",
      "0.83618499",
      "0.56857469",
      "-0.83618499",
      "0.51493299",
      "0.87024573",
      "0.51493299",
      "-0.87024573",
      "0.45925951",
      "0.90086915",
      "0.45925951",
      "-0.90086915",
      "0.40177398",
      "0.92793478",
      "0.40177398",
      "-0.92793478",
      "0.34270331",
      "0.95133611",
      "0.34270331",
      "-0.95133611",
      "0.28228062",
      "0.97098103",
      "0.28228062",
      "-0.97098103",
      "0.22074438",
      "0.98679223",
      "0.22074438",
      "-0.98679223",
      "-0.56831056",
      "0.8363689",
      "-0.56831056",
      "-0.8363689",
      "-0.61970935",
      "0.79903081",
      "-0.61970935",
      "-0.79903081",
      "-0.51466838",
      "0.87040576",
      "-0.51466838",
      "-0.87040576",
      "-0.66866191",
      "0.75853889",
      "-0.66866191",
      "-0.75853889",
      "-0.71497505",
      "0.71505297",
      "-0.71497505",
      "-0.71505297",
      "-0.45899452",
      "0.90100702",
      "-0.45899452",
      "-0.90100702",
      "-0.75846598",
      "0.66874472",
      "-0.75846598",
      "-0.66874472",
      "-0.40150869",
      "0.92805186",
      "-0.40150869",
      "-0.92805186",
      "-0.79896306",
      "0.61979692",
      "-0.79896306",
      "-0.61979692",
      "-0.83630648",
      "0.56840277",
      "-0.83630648",
      "-0.56840277",
      "-0.34243777",
      "0.95143351",
      "-0.34243777",
      "-0.95143351",
      "-0.87034885",
      "0.51476515",
      "-0.87034885",
      "-0.51476515",
      "-0.28201489",
      "0.97105963",
      "-0.28201489",
      "-0.97105963",
      "-0.90095583",
      "0.45909576",
      "-0.90095583",
      "-0.45909576",
      "-0.92800662",
      "0.40161434",
      "-0.92800662",
      "-0.40161434",
      "0.15833745",
      "0.99870749",
      "0.15833745",
      "-0.99870749",
      "-0.95139446",
      "0.34254776",
      "-0.95139446",
      "-0.34254776",
      "-0.2204785",
      "0.9868527",
      "-0.2204785",
      "-0.9868527",
      "-0.97102706",
      "0.28212915",
      "-0.97102706",
      "-0.28212915",
      "-0.98682693",
      "0.220597",
      "-0.98682693",
      "-0.220597",
      "-0.99873172",
      "0.15819416",
      "-0.99873172",
      "-0.15819416",
      "0.09530614",
      "1.00667994",
      "0.09530614",
      "-1.00667994",
      "-0.15807147",
      "0.99875034",
      "-0.15807147",
      "-0.99875034",
      "-1.00669444",
      "0.09516694",
      "-1.00669444",
      "-0.09516694",
      "-1.01068368",
      "0.0317641",
      "-1.01068368",
      "-0.0317641",
      "0.0318992",
      "1.01067825",
      "0.0318992",
      "-1.01067825",
      "-0.03163312",
      "1.01068675",
      "-0.03163312",
      "-1.01068675",
      "-0.09504009",
      "1.00670551",
      "-0.09504009",
      "-1.00670551"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import numpy as np\na = np.linspace(-1, 1, 100)\ny = a * a * np.ones_like(a) + 2 * a\n\n# find a such that y = 0\na = np.roots(y)\nprint(a)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "degree_g = 8 - 4\nprint(degree_g)"
  },
  {
    "example_id": 163,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "4.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol\n\nx = Symbol('x', real=True)\nm = (3*x**2 - 4*x + 1)/(x - 1)\nprint(m)\nprint(m.free_symbols)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(3 * 4 + 2 * 16 - 5 * 0)"
  },
  {
    "example_id": 165,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print((1+3)**3)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "266.6666666666667"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "unit_current = 40 / 3\ncurrent_20_ohms = 20 * unit_current\nprint(current_20_ohms)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4096.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = 12\nprint(2 ** x)"
  },
  {
    "example_id": 168,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "log_base = 5**2\nlog_arg = 5**4\nprint(log_arg / log_base)"
  },
  {
    "example_id": 169,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "-1.0",
      "3.0",
      "-1.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nf = 4*x**3 + 1\nf_inv = solve(f - 33, x)\nprint(f_inv)"
  },
  {
    "example_id": 170,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "11.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nk = (3*x**2 + 5*x + sympy.sqrt(11))/(2*x)\nprint(k)"
  },
  {
    "example_id": 171,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import I\n\nprint((2 - 2*I) * (5 + 5*I))"
  },
  {
    "example_id": 172,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "seats_per_row = 450 // 3\nrows = 5\nprint(rows)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "def f(x):\n    return 2 * x + 1\n\ndef f_inv(x):\n    return (x - 4) // 2\n\nprint(f_inv(17))"
  },
  {
    "example_id": 174,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve\nsol = solve(5*x - 16 == A*(x-2) + B*(x-5), x)\nprint(sol[0].subs(A, 1).subs(B, 1))"
  },
  {
    "example_id": 175,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nprint(math.log2(32) - 2)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# P(x) = 4x^3 - 2x^2 + 7x - 1\n# Q(x) = P(x)^2\n# y-intercept of Q(x) is 1\ny_intercept_Q = 1\nprint(y_intercept_Q)"
  },
  {
    "example_id": 177,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "325.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "n = 25\nsum = (n * (n + 1)) / 2\nprint(sum)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "floor = 52 // 3\nprint(floor)"
  },
  {
    "example_id": 179,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = 5\nprint(x)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy as sym\n\nx = sym.symbols('x')\ny = - (x + 1) ** 2 + 1\n\n# Shift 1 unit to the right and 5 units down\n# Rotate 180 degrees about the vertex\n# x = 1 + 5 - x\n# x = -x + 6\n\n# Solve for x\nsol = sym.solve(x - y, x)\n\n# b - a\nprint(sol[1] - sol[0])"
  },
  {
    "example_id": 181,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "S = 2\na = 1/S\nb = a / S\nprint(a+b)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a1 = 1\na2 = 2\na3 = 3\na4 = 6\n\na5 = a3 + (a4 - a3) / (a2 - a1) * (a4 - a1)\n\nprint(a5)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "978121.0"
    ],
    "annotated_answers": [
      "978121.0"
    ],
    "solution": "print(989**2)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "c = -9"
  },
  {
    "example_id": 185,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.5"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "y_axis_intercept = -6 / 4\nprint(y_axis_intercept)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "208.0",
      "16.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy\n\nx, y, c = sympy.symbols('x y c')\neq = x**2 + 8*x + y**2 + 4*y + c\nradius = 3\n\ndiscriminant = (8**2) - 4*(4*c - 4*radius**2)\n\nc = (-8 + sympy.sqrt(discriminant)) / 2\nprint(c)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.680576108069205"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import math\na = math.log(2938, 8)\nb = math.log(2939, 8)\nprint(a+b)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "quarts = 2 / 0.25\nprint(quarts)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "f(g(2)) = f(2^2 + 3)\n        = 2(2^2 + 3) - 4\n        = 8 + 2 - 4\n        = 10"
  },
  {
    "example_id": 190,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "16.0",
      "8.0",
      "7.0",
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import symbols, solve\nx, k = symbols('x k')\neq = (4*x**2 + 7*x + k).expand()\nsol = solve(eq, x)\nsol_x = sol.pop()\nsol_k = sol_x.subs(x, 0)\nprint(sol_k)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sym\n\nx = sym.Symbol('x')\nf = 2*x**2 - 4*x + 4\n\n# m = f.subs(x, 0)\n# n = f.subs(x, 0)\n\n# print(m, n)\n\n# print(f.subs(x, 1))\n\nprint(f.diff(x))"
  },
  {
    "example_id": 192,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "shoe_size = 42 - 6\nprint(shoe_size)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.3125"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# a = (3120 + 60/13) / (4 - -4)\n# b = (3120 + 60/13) / (4^2 - (-4)^2)\nprint(1.3125)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import log\nprint(log(81, 3))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.14285714285714"
    ],
    "annotated_answers": [
      "0.43"
    ],
    "solution": "from sympy import *\n\nt = symbols('t')\ny = -4.9*t**2 - 3.5*t + 2.4\n\ntime = solve(y, t)[0]\n\nprint(time)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "print(4**3 + 2**3 - 3**3 - 1**3)"
  },
  {
    "example_id": 197,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "x = 12\ny = 12\nsq_diff = (x-y)**2\nprint(sq_diff)"
  },
  {
    "example_id": 198,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def D(a, b, c):\n    return a * b * c / (a + b + c)\n\nprint(D(2, 4, 6))"
  },
  {
    "example_id": 199,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8000.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "print((26**2 - 24**2 - 10)**2 - 10**2)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "x = 73\ny = 86\nprint(y - x)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Harmonic mean\ndef harmonic_mean(x, y):\n    return 20 / (1 / x + 1 / y)\n\n# Find the ordered pairs\nfor x in range(1, 21):\n    for y in range(1, 21):\n        if harmonic_mean(x, y) == 20:\n            print(x, y)"
  },
  {
    "example_id": 202,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "3.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import sympy\n\na, b = sympy.symbols('a b')\n\ncenter_x = sympy.solve(\n    (a - 1)**2 + (b - 2)**2 - 1, a)[0]\ncenter_y = sympy.solve(\n    (a - 3)**2 + (b - 0)**2 - 1, b)[0]\n\nprint(center_x + center_y)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nf = (4*x+1)/3\nf_inv = f**(-1)\nf_inv_inv = f_inv**(-1)\nprint(f_inv_inv)"
  },
  {
    "example_id": 204,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "p = 1\nq = 2\nprint(p + q)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.5"
    ],
    "annotated_answers": [
      "125.5"
    ],
    "solution": "# Define a function to return the sum of the numbers from 1 to n\ndef sum_of_n(n):\n    return n * (n + 1) // 2\n\n# Calculate the mean of the whole numbers from 1 to 250\nmean = sum_of_n(250) / 250\n\n# Print the mean as a decimal to the nearest tenth\nprint(mean)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import solve, Symbol\n\nx = Symbol('x')\nsolutions = solve(x**2 - 4*x - 14, x)\nsolution_1 = solutions[0]\nsolution_2 = solutions[1]\n\nprint(abs(solution_2 - solution_1))"
  },
  {
    "example_id": 207,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.3333333333333335"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 7 / 3\nprint(x)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.2857142857142863"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    return (1+x)/(1-x)\n\ndef g(x):\n    return -2/(x+1)\n\nresult = f(g(f(g(f(g(f(g(f(12)))))))))\nprint(result)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy import Symbol\nx = Symbol('x')\nprint(simplify((x+3)*(x-1) - x*(x+2)))"
  },
  {
    "example_id": 210,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "6.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import sqrt\n\nexpr = sqrt(4/sqrt(24) + sqrt(3456)/9 + sqrt(6))\nprint(expr)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 212,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import sympy\nprint(sympy.sqrt(4**5 + 4**5 + 4**5 + 4**5))"
  },
  {
    "example_id": 213,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "A = -2\nB = 1\nC = 4\n\nprint(A+B+C)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "slope = (2 - 0) / (6 - 5)\nprint(slope)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(max(x for x in range(100) if abs(5*x-1) == x+3))"
  },
  {
    "example_id": 216,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\n\nx = sympy.log(10-2*sympy.Symbol('x'))/(1-sympy.Symbol('x'))\nprint(x)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "5.0",
      "2.0",
      "4.0",
      "4.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy\na, b, c, d = sympy.symbols('a b c d')\neq1 = a - b - 2*(c+d)\neq2 = b - a + 2\neq3 = d - c - 5\nsol = sympy.solve((eq1, eq2, eq3), (c, d))\nprint(sol)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "a = 2\nb = 3\nprint(8*a**2*b**2)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.079368399158984"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 8\nprint(pow(16 * a**2, 1/3))"
  },
  {
    "example_id": 220,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "14.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "midpoint = (1 + 1, 4 + 10)\nprint(midpoint)"
  },
  {
    "example_id": 221,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "24.0",
      "2.0",
      "32.0",
      "384.0",
      "2.0",
      "24.0",
      "2.0",
      "32.0",
      "384.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\nc1 = x**2 - 24*x + y**2 - 32*y + 384\nc2 = x**2 + 24*x + y**2 + 32*y + 384\ndist = (sympy.sqrt(c1) - sympy.sqrt(c2)).expand()\nprint(dist)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "128.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\n\nexpr = (66 - 2**x) / (2**x + 3) - (4 - 2**x) / (2**(x + 1) + 6)\n\nprint(expr.simplify())"
  },
  {
    "example_id": 223,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.29000000000000004"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "pencil_cost = (1.82 - 1.24) / 2\nprint(pencil_cost)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "a = 4\nb = 12\nm = 1\nprint(a + b + m)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "38.0",
      "2.0",
      "38.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import symbols, solve\n\nx = symbols('x')\nsol = solve(7 - 2*x**2 - 8*x + 4, x)\nprint(sol)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "196.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "p = 28 / 7 * 49\nprint(p)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\nprint(math.sqrt(9))"
  },
  {
    "example_id": 228,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import log\nn = int(log(243, 9) / 2) + 1\nprint(n)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "-4.0",
      "-16.0",
      "-1.0",
      "-1.0",
      "6.0",
      "5.0",
      "5.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import sqrt\na = 1\nb = 4 + sqrt(16 + 16 * a)\nc = 1 + sqrt(1 + a)\nd = b + c\ne = sqrt(d)\nf = 6 - e\ng = sqrt(f)\nh = g - a\ni = sqrt(h)\nj = i - a\nk = j ** 2\nl = k - 16\nm = sqrt(l)\nn = m - 4\no = sqrt(n)\np = o - a\nprint(p)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "midpoint_1 = (2 + 0)/2, (4 + (-2))/2\nmidpoint_2 = (5 + 1)/2, (1 + 5)/2\nslope_1 = (midpoint_1[1] - midpoint_2[1]) / (midpoint_1[0] - midpoint_2[0])\nprint(slope_1)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "7.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\n\n# Expand\nexpr = (x**2 - 5*x + 7) - (x - 3)*(x - 2)\nprint(expr)\n\n# Simplify\nexpr_simplified = expr.expand().simplify()\nprint(expr_simplified)"
  },
  {
    "example_id": 232,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "94949.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import isprime, prime\n\nm = prime(1)\nn = prime(2)\n\nk = 2 * m + 1\nt = 2 * n + 1\n\nresult = m ** n + n ** m + k ** t + t ** k\n\nprint(result)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "son_age_3_years_ago = 30 / 5\ncurrent_age_of_son = 3 * son_age_3_years_ago\nprint(current_age_of_son)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4950.0"
    ],
    "annotated_answers": [
      "4950.0"
    ],
    "solution": "# import math\n# math.floor(n) # rounds down to the nearest integer\n\ndef sum_multiples_of_3(n):\n    sum = 0\n    for i in range(100, 201):\n        if i % 3 == 0:\n            sum += i\n    return sum\n\nprint(sum_multiples_of_3(100))"
  },
  {
    "example_id": 235,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.5"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "annual_interest_rate = (1225 - 1000) / 1000\nprint(annual_interest_rate * 100)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    if x == 1:\n        return 2\n    elif x == 2:\n        return 6\n    elif x == 3:\n        return 5\n\ndef f_inverse(x):\n    if x == 2:\n        return 1\n    elif x == 6:\n        return 2\n    elif x == 5:\n        return 3\n\nprint(f_inverse(f_inverse(6)))"
  },
  {
    "example_id": 237,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8281.0"
    ],
    "annotated_answers": [
      "8281.0"
    ],
    "solution": "print(91**2)"
  },
  {
    "example_id": 238,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "213.0"
    ],
    "annotated_answers": [
      "-27.0"
    ],
    "solution": "g = 3\nc = 1\np = 6\nq = -12\nprint(c * (g**2 + p)**2 + q)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Poly\nf = Poly(3*x**4+x**3-25*x**2+38*x-17, x)\nprint(f.degree())"
  },
  {
    "example_id": 240,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.7906976744186047"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "t = 77 / 43\nprint(t)"
  },
  {
    "example_id": 241,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0",
      "7.0",
      "108.0",
      "6.0",
      "114.0",
      "5.0",
      "84.0",
      "4.0",
      "15.0",
      "3.0",
      "20.0",
      "2.0",
      "43.0",
      "20.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "from sympy import Symbol, expand, collect\nx = Symbol('x')\nexp = 24*x**4 + 6*x**3 + 4*x**2 - 7*x - 5\nexpr = expand(exp * (6*x**3 + 3*x**2 + 3*x + 4))\ncoeff = collect(expr, x**3)\nprint(coeff)"
  },
  {
    "example_id": 242,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "from itertools import product\n\ndef is_triple(a, b, c):\n    return (a**2 * b + b**2 * c + c**2 * a - a * b**2 - b * c**2 - c * a**2) == 0\n\nprint(sum(1 for a, b, c in product(range(6), repeat=3) if is_triple(a, b, c)))"
  },
  {
    "example_id": 243,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x_1 = -3 - 7\nx_2 = -3 + 7\nx = min(x_1, x_2)\nprint(x)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x = 3 * 4 / 2\nprint(x)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.2"
    ],
    "solution": "a, b, c = -1, 3, -2\nx = 1\ny = a*x**2 + b*x + c\nprint(y)"
  },
  {
    "example_id": 246,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "127.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "i = 1\nwhile i <= 125:\n    i = i * 2 + 1\nprint(i)"
  },
  {
    "example_id": 248,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "119.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\n\ndef climb_rate(seconds):\n    return 100 + 100 * (seconds - 1)\n\ndef altitude(seconds):\n    return climb_rate(seconds) * seconds\n\ndef solve_for_seconds(altitude):\n    return math.ceil((altitude - 100) / climb_rate(1))\n\nprint(solve_for_seconds(12000))"
  },
  {
    "example_id": 249,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "degree = 6"
  },
  {
    "example_id": 250,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "b = -6\nc = 66\nprint(b + c)"
  },
  {
    "example_id": 251,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.9"
    ],
    "annotated_answers": [
      "0.75"
    ],
    "solution": "time = (54 - 0) / (-60)\nprint(round(time, 2))"
  },
  {
    "example_id": 252,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.4000000000000004"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "num_houses_per_day = 4 / 5\nnum_days = 3\nnum_houses = num_houses_per_day * num_days\nprint(num_houses)"
  },
  {
    "example_id": 253,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.132745950421556"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "import math\n\ndef dist(c1, c2):\n    return math.sqrt((c2[0] - c1[0])**2 + (c2[1] - c1[1])**2)\n\nc1 = (9, 5)\nc2 = (-6, 3)\nprint(dist(c1, c2))"
  },
  {
    "example_id": 254,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\nprint(x)\nx = 2\nprint(x)"
  },
  {
    "example_id": 255,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# coordinates of the midpoint\nmid_x = (5 + (-9)) / 2\nmid_y = (4 + 8) / 2\n\n# sum of the coordinates\nsum_coordinates = mid_x + mid_y\nprint(sum_coordinates)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# (t) \\Join (t+2) = (t+2)(t+2-3) = (t+2)^2\n# ((t+1) \\Join (t+1)) = ((t+1)+2)((t+1)-3) = (t+3)^2\n# (((t) \\Join (t+2)) - ((t+1) \\Join (t+1))) = (t+2)^2 - (t+3)^2\n# = (t+2)(t+2-t-3) - (t+3)(t+1-t-3)\n# = (t+2)(-t-1) - (t+3)(-t-1)\n# = (-t-2)(t+3)"
  },
  {
    "example_id": 257,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 1/2\ny = 1/2\nx_y = 8*x - 7*y\nprint(x_y)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(int(8.8 + (-8.8)))"
  },
  {
    "example_id": 259,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import sqrt, simplify, solve\n\n# a and b are positive integers such that a is not divisible by the square of any integer greater than one\na = 1\nb = 1\n\n# find the smallest distance between the origin and a point on the graph of y = (x^2 - 3)/(1/sqrt(2))\nx = sqrt(a) / b\n\n# find the value of a + b\nprint(a + b)"
  },
  {
    "example_id": 260,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def not_defined(x):\n    if x == 2 or x == 7:\n        return True\n    else:\n        return False\n\nfor x in range(1, 10):\n    if not_defined(x):\n        print(x)"
  },
  {
    "example_id": 261,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 262,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "285.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import math\n\nm = 19\nn = math.trunc(m**2 - 4 * m)\nprint(n)"
  },
  {
    "example_id": 263,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.222222222222221"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "number_won = 2/9\nnumber_lost = 15\ntotal_games = number_won + number_lost\nprint(total_games)"
  },
  {
    "example_id": 264,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "7.0",
      "7.0",
      "1.0",
      "5.0",
      "7.0",
      "2.0",
      "7.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = x**2 + 2*x - 6\nvertex = sympy.solve(y, x)\nprint(vertex)\ndistance = sympy.sqrt((4 - vertex[0])**2 + (5 - vertex[1])**2)\nprint(distance)"
  },
  {
    "example_id": 265,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "402.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "a = 6\nd = 4\nn = 100\nprint(a + (n - 1) * d)"
  },
  {
    "example_id": 266,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import sqrt\na = sqrt(49)\nb = -6/a\nprint(int(b))"
  },
  {
    "example_id": 267,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3333333333333333"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "denali_pay = 16\nnate_pay = 12\n\nx = (denali_pay - nate_pay) / (denali_pay - denali_pay + nate_pay)\nprint(x)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import sqrt, simplify\n\ndenominator = (sqrt(5) + sqrt(2)) / (sqrt(5) - sqrt(2))\ndenominator = simplify(denominator)\nprint(denominator)"
  },
  {
    "example_id": 269,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "def max_of_function(x):\n    return -x**2 - 8*x + 12\n\ndef find_maximum_value(f, a, b):\n    return max(f(x) for x in range(a, b+1))\n\nprint(find_maximum_value(max_of_function, -10, 10))"
  },
  {
    "example_id": 270,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "def height(t):\n    return 2*t**2 - 5*t + 29\n\ndef min_height(t):\n    return 2*t**2 - 5*t + 29\n\ndef max_height(t):\n    return 2*t**2 - 5*t + 30\n\nprint(min_height(1))"
  },
  {
    "example_id": 271,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# 48 / 2 = 24\n# 24 * 5 = 120\n# 120 / 5 = 24\nfirst_practice = 24\nprint(first_practice)"
  },
  {
    "example_id": 272,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "y = 12 - 3 * 4\nprint(y)"
  },
  {
    "example_id": 273,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "bricks_placed_by_alan = 600\nbricks_placed_by_alan_per_hour = 30\nhours_worked_by_alan = bricks_placed_by_alan / bricks_placed_by_alan_per_hour\nbricks_placed_by_david = bricks_placed_by_alan_per_hour * hours_worked_by_alan\nprint(bricks_placed_by_david)"
  },
  {
    "example_id": 274,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def equation_of_line(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    m = (y2 - y1) / (x2 - x1)\n    b = y1 - m * x1\n    return m, b\n\nm, b = equation_of_line((7, -1), (-1, 7))\nprint(m + b)"
  },
  {
    "example_id": 275,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "dad_age = 53 - 31\nprint(dad_age)"
  },
  {
    "example_id": 276,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "x = 7 + 9\ny = 7 - 9\nprint(x * y)"
  },
  {
    "example_id": 277,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 3**4\nprint(x)"
  },
  {
    "example_id": 278,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\ndef f(x):\n    return math.floor((-5/8)**x)\n\nvalues = set()\nfor i in range(100):\n    values.add(f(i))\n\nprint(len(values))"
  },
  {
    "example_id": 279,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "import sympy as sp\nx, y = sp.symbols('x y')\neq = x**2 + y**2 + 2*x + 3*y + 1\nprint(eq.expand())"
  },
  {
    "example_id": 280,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy as sp\nx = sp.symbols('x', real=True)\n\n# Solve the equation\nsolution = sp.solve(sp.sqrt(3*x-5) - 2, x)\nprint(solution)"
  },
  {
    "example_id": 281,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def F(a, b, c, d):\n    return a ** b + c ** d\n\ndef find_b(a, c, d, desired_value):\n    for b in range(100):\n        if F(a, b, c, d) == desired_value:\n            return b\n    return None\n\nprint(find_b(4, 2, 3, 12))"
  },
  {
    "example_id": 282,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import math\nx = (math.sqrt(45) + math.sqrt(101)) / 2\nprint(int(x))"
  },
  {
    "example_id": 283,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "123.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "print(123123 / 1001)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "ans = 4 * (5 - 6)\nprint(ans)"
  },
  {
    "example_id": 285,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "2.0",
      "50.0",
      "-5.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nprint(sympy.expand(3*x**2 - 2*(x**2 + 4)))\nprint(sympy.expand(3*x**2 - 2*(x**2 + 4) - 42))\nprint(sympy.solve(3*x**2 - 2*(x**2 + 4) - 42, x))"
  },
  {
    "example_id": 286,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "f(x) = x**3 + 2*x + 1\ng(x) = x - 1\nf(g(1)) = f(1-1)\nf(g(1)) = f(0)\nf(0) = 1"
  },
  {
    "example_id": 287,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4800.0"
    ],
    "annotated_answers": [
      "4800.0"
    ],
    "solution": "bacteria_at_midnight = 600 * 2 ** (12 / 4)\nprint(bacteria_at_midnight)"
  },
  {
    "example_id": 288,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "44.0"
    ],
    "annotated_answers": [
      "-102.0"
    ],
    "solution": "from sympy import Symbol, Eq, solve\n\nalpha = Symbol('alpha')\nx = Symbol('x')\n\n# Solve the equation\nsolutions = solve(Eq(x**2 + 5*x + alpha, x**2 + 7*x - 44), alpha)\n\n# Print the solution\nprint(sum(solutions))"
  },
  {
    "example_id": 289,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1202.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 166 - 14\ny = 166 - 10 * x\nprint(x + y)"
  },
  {
    "example_id": 290,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(4 * 3 * 2)"
  },
  {
    "example_id": 291,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\ndef circles_through(x, y, r, p):\n    \"\"\"\n    Find all the circles tangent to two given circles\n    and passing through a point (x, y).\n    \"\"\"\n    # The two circles are centered at (4, 0) and (-4, 0)\n    c1 = (4, 0)\n    c2 = (-4, 0)\n\n    # The point (0, 5) lies on the line connecting the two circles\n    line = (x, y)\n\n    # Find the center of the circle passing through the point\n    center = (x, y)\n\n    # Find the radius of the circle\n    r_circle = math.sqrt((center[0] - c1[0]) ** 2 + (center[1] - c1[1]) ** 2)\n\n    return (center, r_circle)\n\n\n# Find the number of circles passing through (0, 5)\nprint(len(circles_through(0, 5, 1, (4, 0))))"
  },
  {
    "example_id": 292,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "5.0",
      "2.0",
      "12.0",
      "4.0",
      "20.0",
      "3.0",
      "6.0",
      "2.0",
      "10.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import symbols, expand\nt, a, b = symbols('t a b')\nf = 3*t**2+5*t+a\ng = 4*t**2+b*t-2\nh = f*g\nprint(expand(h))\nprint(a+b)"
  },
  {
    "example_id": 293,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = 1\nb = 1\nc = 2\nprint(a + b + c)"
  },
  {
    "example_id": 294,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "32736.0"
    ],
    "solution": "a = 2\nb = 4\nc = 6\nsquare_a = a**2\nsquare_b = b**2\nsquare_c = c**2\nproduct = (a*b*c) / 8\nprint(product)"
  },
  {
    "example_id": 295,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "for i in range(10, 100):\n    if i % 10 == 5 and i // 10 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 296,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "print(3*0-4)"
  },
  {
    "example_id": 297,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "378.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "median = 27 * 14\nprint(median)"
  },
  {
    "example_id": 298,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "from math import sqrt\n\ndef count_lattice_points(r, center):\n    # count lattice points in a circle of radius r centered at center\n    # https://en.wikipedia.org/wiki/Minkowski%E2%80%93Bouligand_dimension\n    # https://en.wikipedia.org/wiki/Lattice_(group)\n    # https://en.wikipedia.org/wiki/Minkowski_sum\n    count = 0\n    for x in range(-r, r+1):\n        for y in range(-r, r+1):\n            if sqrt(x**2 + y**2) <= r:\n                count += 1\n    return count\n\nprint(count_lattice_points(5, (0,0)))"
  },
  {
    "example_id": 299,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6561.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return x ** 2\n\ndef g(x):\n    return f(f(x))\n\nprint(g(9))"
  },
  {
    "example_id": 300,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "# 4 + 5 = 9\n# 9^2 = 81\nprint(81)"
  },
  {
    "example_id": 301,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsolutions = sympy.solve(sympy.sqrt(3*x+6) - (x+2), x)\nprint(','.join(map(str, solutions)))"
  },
  {
    "example_id": 302,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 3\ny = 2\n\nprint(4*x**2/9*y**2)"
  },
  {
    "example_id": 303,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def p(x):\n    return x**2 + 3\n\ndef q(x):\n    return 4 * x + 7\n\nprint(q(-1))"
  },
  {
    "example_id": 304,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-4.0",
      "2.0",
      "-3.0",
      "3.0",
      "-2.0",
      "4.0",
      "-1.0",
      "5.0",
      "0.0",
      "6.0",
      "1.0",
      "7.0",
      "2.0",
      "8.0",
      "3.0",
      "9.0",
      "4.0",
      "10.0",
      "5.0",
      "11.0",
      "6.0",
      "12.0",
      "7.0",
      "13.0",
      "8.0",
      "14.0",
      "9.0",
      "15.0",
      "10.0",
      "16.0",
      "11.0",
      "17.0",
      "12.0",
      "18.0",
      "13.0",
      "19.0",
      "14.0",
      "20.0",
      "15.0",
      "21.0",
      "16.0",
      "22.0",
      "17.0",
      "23.0",
      "18.0",
      "24.0",
      "19.0",
      "25.0",
      "20.0",
      "26.0",
      "21.0",
      "27.0",
      "22.0",
      "28.0",
      "23.0",
      "29.0",
      "24.0",
      "30.0",
      "25.0",
      "31.0",
      "26.0",
      "32.0",
      "27.0",
      "33.0",
      "28.0",
      "34.0",
      "29.0",
      "35.0",
      "30.0",
      "36.0",
      "31.0",
      "37.0",
      "32.0",
      "38.0",
      "33.0",
      "39.0",
      "34.0",
      "40.0",
      "35.0",
      "41.0",
      "36.0",
      "42.0",
      "37.0",
      "43.0",
      "38.0",
      "44.0",
      "39.0",
      "45.0",
      "40.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "s = 0\nwhile s < 45:\n    s = s + 1\n    print(s)\n    print(s-5)"
  },
  {
    "example_id": 305,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "num_customers = 15 / (2500 / 1500)\nprint(num_customers)"
  },
  {
    "example_id": 306,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2450.0"
    ],
    "annotated_answers": [
      "2450.0"
    ],
    "solution": "monthly_sales_earnings = 1200 + (0.05 * 25000)\nprint(monthly_sales_earnings)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8888888888888888"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 8/3\nz = 15/5\nprint(x/z)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import sqrt\n\nprint(sqrt(64) - 64 ** (1/3))"
  },
  {
    "example_id": 309,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "A = 'AMC10'.count('A')\nM = 'AMC10'.count('M')\nC = 'AMC10'.count('C')\n\nprint(A + M + C)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.7999999999999998"
    ],
    "annotated_answers": [
      "1.8"
    ],
    "solution": "x = 4.8 - 3\nprint(x)"
  },
  {
    "example_id": 311,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.00390625"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "x = 4\nprint(1/x**4)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import *\na = -2\nb = 4\nc = 1\nprint(a+b+c)"
  },
  {
    "example_id": 313,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "2003.0"
    ],
    "solution": "sum_of_even = sum(range(0, 2003, 2))\nsum_of_odd = sum(range(1, 2003, 2))\nprint(sum_of_even - sum_of_odd)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 1\nb = 3\nwhile a * b!= 255:\n    a += 2\n    b += 2\nprint(b)"
  },
  {
    "example_id": 315,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13225.0"
    ],
    "annotated_answers": [
      "13225.0"
    ],
    "solution": "print(115**2)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = 23 // 3\nprint(a)"
  },
  {
    "example_id": 317,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26000.0"
    ],
    "annotated_answers": [
      "26000.0"
    ],
    "solution": "print(513**2 - 487**2)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "19.0",
      "2.0",
      "2.0",
      "13.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "6.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "19.0",
      "2.0",
      "2.0",
      "13.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "6.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "19.0",
      "2.0",
      "2.0",
      "13.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "6.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "19.0",
      "2.0",
      "2.0",
      "13.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "6.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\n\n# Use the given equation to find the sum of squares\nsum_squares = a**2 + b**2 + c**2\n\n# Use the first equation to find the sum of the terms\nsum_terms = a*b + b*c + c*a\n\n# Combine the two equations to find the solution\nsolve = sympy.solve([sum_squares - 13, sum_terms - 6], [a, b, c])\nprint(solve)"
  },
  {
    "example_id": 319,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.75"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "revolutions_16_feet = 27 / 64 * 16\nprint(revolutions_16_feet)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.999999999999999"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import math\nprint(math.log(125 * math.sqrt(5), math.sqrt(5)))"
  },
  {
    "example_id": 321,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# Write a program to solve the problem\n# a + bx = 15\n# a + bx = 3\n\n# a = 15 - bx\n# a = 3 - bx\n\n# Substitute x = 2\n# a = 15 - 2b\n# a = 3 - 2b\n\n# Solve for b\n# 2b = 15 - 3\n# 2b = -12\n\n# b = -6\n\n# Substitute x = 5\n# a = 15 - 5b\n# a = -15\n\n# a + b = 15\n# -6 + a = 3\n\n# 6 - a = 3\n# a = 9\n\n# a + b = 15\n# 9 + (-6) = 3\n\n# 3"
  },
  {
    "example_id": 322,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "time_50m = 25 - 5\nprint(time_50m)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "x = 3 ** 4 - 3 ** 2\nprint(x)"
  },
  {
    "example_id": 324,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import numpy as np\n\ndef dist(p1, p2):\n    return np.linalg.norm(np.array(p1) - np.array(p2))\n\ndist_lucy_robert = dist((4,3), (6,1))\ndist_liz_robert = dist((4,3), (1,7))\nprint(max(dist_lucy_robert, dist_liz_robert))"
  },
  {
    "example_id": 325,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "max_degree = 3 + 2\nprint(max_degree)"
  },
  {
    "example_id": 326,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def percent(x, p):\n    return x * p / 100\n\ndef percent_of_percent(x, p1, p2):\n    return percent(x, p1) * p2 / 100\n\nprint(percent_of_percent(80, 50, 20))"
  },
  {
    "example_id": 327,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.6",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "years_ago = 4\nage_now = 6\nage_then = 6 - years_ago\nage_then_chris = age_now * 3 / 5\nage_then_amy = age_now\nage_then_ben = age_now\nprint(age_then_chris)\nprint(age_then_amy)\nprint(age_then_ben)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\nA = (0, 10)\nB = (5.9, -8.1)\nC = (-9.5, 3.1)\nD = (9.5, 3.1)\nE = (-5.9, -8.1)\n\n# Sums of the numbers at the ends of the line segments\n# AB, BC, CD, DE, EA form an arithmetic sequence\nsum_AB = A[0] + B[0]\nsum_BC = B[0] + C[0]\nsum_CD = C[0] + D[0]\nsum_DE = D[0] + E[0]\nsum_EA = E[0] + A[0]\n\n# The middle term of the arithmetic sequence is\n# (sum of first two terms + sum of last two terms) / 2\nmiddle_term = (sum_AB + sum_EA) / 2\n\n# The middle term is 6\nprint(middle_term)"
  },
  {
    "example_id": 329,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "0.0",
      "-3.0",
      "0.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\neq1 = a + b - 8\neq2 = b + c + 3\neq3 = a + c - 5\nsol = sympy.solve([eq1, eq2, eq3], [a, b, c])\nprint(sol)\nabc = sol[a] * sol[b] * sol[c]\nprint(abc)"
  },
  {
    "example_id": 330,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-56.0"
    ],
    "annotated_answers": [
      "-56.0"
    ],
    "solution": "a = 2\nb = -8\nc = 15\ndiscriminant = b**2 - 4 * a * c\nprint(discriminant)"
  },
  {
    "example_id": 331,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.80350850198276"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "import math\nx = -6\ny = -15\ndistance_x_axis = -x\ndistance_point_x_y = math.sqrt(x**2 + y**2)\ndistance_point_x_y = math.sqrt((x-8)**2 + (y-3)**2)\nprint(distance_point_x_y)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 3\nx = -x\nx = abs(x)\nprint(x)"
  },
  {
    "example_id": 333,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "102.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "A = 6\nB = 17\nAB = A * B\nprint(AB)"
  },
  {
    "example_id": 334,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = 3*sympy.sqrt(2*x - 7) - 8\nprint(f.subs(x, 8))"
  },
  {
    "example_id": 335,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\neq = (9-4*x)/(x+6) - 7\nsol = sympy.solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 336,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.5"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "red_marbles = 0.5 * (35 - 2)\nprint(red_marbles)"
  },
  {
    "example_id": 337,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "364.0"
    ],
    "solution": "a = 40 - 12\nprint(a)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "65.0"
    ],
    "solution": "V = (30 * 6.5) / 3\nprint(V)"
  },
  {
    "example_id": 339,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3969.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsolutions = sympy.solve(sympy.sqrt(63 - sympy.sqrt(x)) - sympy.Integer(0), x)\nprint(solutions)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 1 / (2 - (1 / (2 - (1 / (2 - 1)))))\nprint(x)"
  },
  {
    "example_id": 341,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-65.0",
      "-5.0",
      "2.0",
      "105.0",
      "2.0",
      "2.0",
      "-5.0",
      "2.0",
      "105.0",
      "2.0",
      "20.0",
      "-5.0",
      "2.0",
      "105.0",
      "2.0",
      "-65.0",
      "5.0",
      "2.0",
      "105.0",
      "2.0",
      "2.0",
      "5.0",
      "2.0",
      "105.0",
      "2.0",
      "20.0",
      "5.0",
      "2.0",
      "105.0",
      "2.0",
      "-65.0",
      "5.0",
      "2.0",
      "105.0",
      "2.0",
      "2.0",
      "5.0",
      "2.0",
      "105.0",
      "2.0",
      "20.0",
      "5.0",
      "2.0",
      "105.0",
      "2.0",
      "-65.0",
      "105.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "105.0",
      "2.0",
      "5.0",
      "2.0",
      "20.0",
      "105.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x, y')\neq1 = x**2 + y**2 - 65\neq2 = (x + y)**2 - 105\nsol = sympy.solve((eq1, eq2), (x, y))\nprint(sol)"
  },
  {
    "example_id": 342,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "# Python code\nfrom sympy import *\nx = Symbol('x')\nf = 3*x**4 + 5*x**2 - 9*x - 2\ng = f.subs(x, x-1)\nprint(g.coeff(x, 0) + g.coeff(x, 1))"
  },
  {
    "example_id": 343,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4753.0"
    ],
    "annotated_answers": [
      "93.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 98):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.0",
      "99.0"
    ],
    "annotated_answers": [
      "549.0"
    ],
    "solution": "x = 99\ny = 99 - x\na = x + y\nb = x - y\nprint(a, b)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "f = lambda x: x + 2\ng = lambda x: 1 / f(x)\nprint(g(f(-3)))"
  },
  {
    "example_id": 346,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1069.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "s = 5\nc = 7\np = -3\nq = 45\nprint((c*s + p)**2 + q)"
  },
  {
    "example_id": 347,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "y = 4x - 36\n1 = y / x\nx = y / 1\nx = y / 2"
  },
  {
    "example_id": 348,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = -3\nb = 5\nc = 11\nprint(a+b+c)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import numpy as np\n\nx = 3\ny = 4\ndistance = np.sqrt(x**2 + y**2)\nprint(distance)"
  },
  {
    "example_id": 350,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\nf = (x-2)**2 - 9\nf_derivative = sym.diff(f,x)\nsolution = sym.solve(f_derivative,x)\nprint(sym.integrate(f,x))"
  },
  {
    "example_id": 351,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\n\nfor x in range(-10, 10):\n    if x**2 == -abs(x):\n        print(x)"
  },
  {
    "example_id": 352,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.5"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "lenny_dollars = 35\nlarry_dollars = lenny_dollars / 2\nprint(lenny_dollars - larry_dollars)"
  },
  {
    "example_id": 353,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\ndef power(base, exponent):\n    return math.pow(base, exponent)\n\nx = 0\nwhile True:\n    if power(1, x) + power(2, x) + power(5, x) == 642:\n        break\n    x += 1\nprint(x)"
  },
  {
    "example_id": 354,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "167.0"
    ],
    "annotated_answers": [
      "-8192.0"
    ],
    "solution": "a = 1\nb = -2\nc = 16\nd = a + (13 * b) + (12 * c)\nprint(d)"
  },
  {
    "example_id": 355,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\nprint(math.log2(256) / 2)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 2\ny = 7\nprint(x + y)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# entry_fee + ride_fee = total_cost\n# 2.25 + x = 12.75\n# x = 12.75 - 2.25 = 10.50\nrides = 10.50 / 1.50\nprint(rides)"
  },
  {
    "example_id": 358,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = (1 + (-7)) / 2\ny = (1 + 5) / 2\nprint(x*y)"
  },
  {
    "example_id": 359,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-56.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\n\neq1 = 3 * a + b + c\neq2 = a + 3 * b + c\neq3 = a + b + 3 * c\n\nsol = sympy.solve((eq1, eq2, eq3), (a, b, c))\nprint(sol)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "days = 10 + 3\nprint(days)"
  },
  {
    "example_id": 361,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "10.0",
      "3.0"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "from sympy import binomial, sqrt\n\nk = (16 + sqrt(16**2 + 4*24**2)) / 24\nprint(k)"
  },
  {
    "example_id": 362,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(3 * 5)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def is_between(n, a, b):\n    return a <= n <= b\n\ndef is_square(n):\n    x = int(n**0.5)\n    return x*x == n\n\ndef count_squares(n):\n    count = 0\n    for i in range(1, n+1):\n        if is_square(i) and is_between(i, 10, 50):\n            count += 1\n    return count\n\nprint(count_squares(100))"
  },
  {
    "example_id": 364,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "total_miles = 26 + 12*2 + 12 + 28\nprint(total_miles)"
  },
  {
    "example_id": 365,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "n = 6\nprint(n)"
  },
  {
    "example_id": 366,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1508.0",
      "1500.0",
      "1.0",
      "1.0",
      "1.0",
      "1508.0",
      "1500.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "-48.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x, y')\n\na, b = sympy.symbols('a, b')\na1, b1 = sympy.symbols('a1, b1')\n\neq1 = a*x + b*y - 1500\neq2 = a1*x + b1*y - 1508\n\nsol = sympy.solve([eq1, eq2], [x, y])\n\nprint(sol)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "162.0",
      "2.0",
      "1.0",
      "162.0",
      "1.0",
      "162.0",
      "2.0",
      "162.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\n\n# Find the hypotenuse\nhypotenuse = sympy.sqrt(162**2 + 162**2)\n\n# Find the other leg\nleg = sympy.sqrt(162**2 - hypotenuse**2)\n\n# Find the number of non-congruent right triangles\nnumber_of_triangles = sympy.binomial(hypotenuse, leg)\n\nprint(number_of_triangles)"
  },
  {
    "example_id": 368,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return 6*x**2 + x - 2\n\ndef root_finding(f, x):\n    return x\n\nroot = root_finding(f, 0)\nprint(root)"
  },
  {
    "example_id": 369,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.732050807568877"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import numpy as np\n\n# m and n are the zeros of the quadratic\nm = np.roots([1, -1, 1])[0]\nn = np.roots([1, -1, 1])[1]\nprint(m - n)"
  },
  {
    "example_id": 370,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5",
      "1.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 16\ny = 36\nz = 56\nm = 2\nn = 1\nprint((y-z)/(x-z))\nprint((m*n)*(y-z)/(x-z))"
  },
  {
    "example_id": 371,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import numpy as np\n\nf = np.array([0, 2, 8, 10, 18, 10, 6, 0])\ng = np.array([0, 2, 8, 10, 18, 10, 6, 0])\n\nmax_diff = np.max(f - g)\nprint(max_diff)"
  },
  {
    "example_id": 372,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "number_of_horses = 30 / 4\nprint(number_of_horses)"
  },
  {
    "example_id": 373,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 3\nb = 2\nab = (a - 1) * (b - 1)\nprint(ab)"
  },
  {
    "example_id": 374,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "e = (17 - 8) / 2\nprint(e)"
  },
  {
    "example_id": 375,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18665.934291334837"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "from math import sqrt\n\na = 2/2\nb = 99\nc = -((a*(-99+sqrt(8001))) + (b*(-99-sqrt(8001))))\nprint(c)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "b = (-2) / 2\nprint(b)"
  },
  {
    "example_id": 377,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "expression = (2 * (-3))**5 / (-3)**3\nprint(expression)"
  },
  {
    "example_id": 378,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "for i in range(26, 51):\n    if sum(range(-25, i+1)) >= 26:\n        print(i)\n        break"
  },
  {
    "example_id": 379,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "f = lambda x: (x-1)*(x-3)*(x-7)*(x-9)\nprint(f(6) - f(4))"
  },
  {
    "example_id": 380,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2700.0"
    ],
    "annotated_answers": [
      "10455.0"
    ],
    "solution": "# time is in months\n# rate is in percent\n\n# total interest for 6 months\ninterest_6_months = 10_000 * 0.04/2 * 6\n# total interest for 6 months in the second CD\ninterest_6_months_2 = 10_000 * 0.05/2 * 6\n\ntotal_interest = interest_6_months + interest_6_months_2\nprint(total_interest)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "59.999999999999986"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "result = 12**(1/3) * 20**(1/3) * 15**(1/3) * 60**(1/3)\nprint(result)"
  },
  {
    "example_id": 382,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "7.0",
      "1.0",
      "2.0",
      "4.0",
      "7.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import symbols\nx, y = symbols('x y')\neq = x**2 + y**2 + 2*x - 4*y + 8\nsol = solve(eq, x, y)\nprint(sol)"
  },
  {
    "example_id": 383,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from math import sqrt\n\ndef is_int(num):\n    return num % 1 == 0\n\ndef sqrt_120_minus_sqrt_x(x):\n    return sqrt(120 - sqrt(x))\n\nfor x in range(1, 100):\n    if is_int(sqrt_120_minus_sqrt_x(x)):\n        print(x)"
  },
  {
    "example_id": 384,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-23.5"
    ],
    "solution": "x1, y1 = 0, 7\nx2, y2 = 2, 5\nsum_x_intercepts = x1 + x2\nprint(sum_x_intercepts)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0",
      "13.0",
      "23.0",
      "13.0",
      "67.0",
      "13.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy as sym\nx, y, z = sym.symbols('x y z')\nsolution = [\n    sym.Eq(3*x + y, 17),\n    sym.Eq(5*y + z, 14),\n    sym.Eq(3*x + 5*z, 41),\n]\nsolution = sym.solve(solution, [x, y, z])\nprint(solution)\nx, y, z = solution\nprint(x + y + z)"
  },
  {
    "example_id": 386,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "import numpy as np\n\ndef linear_function(x, slope, intercept):\n    return slope * x + intercept\n\ndef distance_from_starting_point(time, slope, intercept):\n    return linear_function(time, slope, intercept)\n\n# The graph passes through the point (20,30)\n# The slope is 1.5\n# The intercept is 0\n\nprint(distance_from_starting_point(60, 1.5, 0))"
  },
  {
    "example_id": 387,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(4/3 * 6/4 * 8/5 * 10/6 * 12/7 * 14/8)"
  },
  {
    "example_id": 388,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "def psi(a, b):\n    return 2 * a + 5 * b\n\nprint(psi(psi(3, psi(1, 0)), 0))"
  },
  {
    "example_id": 389,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import sqrt, Symbol\nx = Symbol('x')\n\np = (sqrt(2) + 1) / 2\nq = (sqrt(2) - 1) / 2\n\nprint((p + 1) * (q + 1))"
  },
  {
    "example_id": 390,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def A_and_B(A, B):\n    return (A + B) / 2\n\ndef A_and_B_and_C(A, B, C):\n    return A_and_B(A_and_B(A, B), C)\n\nprint(A_and_B_and_C(3, 5, 8))"
  },
  {
    "example_id": 391,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "7.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\nx, y = Symbol('x'), Symbol('y')\neq = 1/x + 1/y - 1/7\nsols = solve(eq, (x, y))\nx_coords = [sol[0] for sol in sols]\nprint(sum(x_coords))"
  },
  {
    "example_id": 392,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = -4"
  },
  {
    "example_id": 393,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.599999999999998"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = 42 / 6\ny = 14 / (2 * x - 9)\nprint(x * y)"
  },
  {
    "example_id": 394,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import solve\nsolve(x**2 - 4*x + 3*(x + 5) - (x**2 + 4*x - 5*(x - c)) == 0, c)"
  },
  {
    "example_id": 395,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print((2 ** 10 - 2 ** 8) / (2 ** 7 - 2 ** 6))"
  },
  {
    "example_id": 396,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.707106781186548",
      "-4.0",
      "2.0",
      "0.5",
      "2.0",
      "-4.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.5"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\na, b, c = sympy.symbols('a b c')\nquadratic = a*x**2 + b*x + c\n\n# Find the two roots\nroots = sympy.solve(quadratic, x)\nroot1 = roots[0]\nroot2 = roots[1]\n\n# Find the greater root\ngreater_root = sympy.Pow(root2, 0.5) + 2\n\n# Find n\nn = greater_root - root2\n\nprint(n)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.08695652173913043"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "d = 2 * 20 - 9 * 4\nc = 2 * 4 - 9 * 6\nprint(d/c)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.01457725947521866"
    ],
    "annotated_answers": [
      "0.015"
    ],
    "solution": "import math\n\ns = 0\nfor i in range(100):\n    s += 3 * 10**(-i) / (206 * 103**i)\nprint(s)"
  },
  {
    "example_id": 400,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.56603774"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from scipy.optimize import fsolve\n\ndef get_max_workers(y):\n    # Define the function that returns the negative of the value of y\n    def negative_y(x):\n        return -y + (-265 * x) + 2800\n\n    # Use the fsolve function to find the maximum number of workers\n    max_workers = fsolve(negative_y, 1)\n\n    return max_workers\n\n# Find the maximum number of workers\nmax_workers = get_max_workers(0)\n\nprint(max_workers)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "a = 27 - 18\nb = 1\nprint(a + b)"
  },
  {
    "example_id": 402,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "total = 15\nchocolate = vanilla = peppermint = lemon = 0\n\n# 1. find the number of chocolate candies\n# peppermint = lemon\nchocolate = (total - peppermint) // 2\n\n# 2. find the number of peppermint candies\npeppermint = (total - lemon) // 2\n\n# 3. find the number of lemon candies\nlemon = total - peppermint\n\nprint(lemon)"
  },
  {
    "example_id": 403,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from math import ceil\nfrom math import sqrt\nprint(ceil(sqrt(25)))"
  },
  {
    "example_id": 404,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import sqrt\nh = lambda x: sqrt(x + 3) / 2\nprint(h(-1))"
  },
  {
    "example_id": 405,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "a = 2\nb = 9\nc = 4\n\na_plus_b_plus_c = a + b + c\nprint(a_plus_b_plus_c)"
  },
  {
    "example_id": 406,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "58.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    if x % 2 == 0:\n        return x // 2\n    else:\n        return 3 * x + 1\n\na = 14\nb = 19\n\nprint(f(a))\nprint(f(b))"
  },
  {
    "example_id": 407,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import sympy as sym\n\n# simplify the expression\nexpr = (7 + 8*x) - 3*(2 + 6*x + 2*x**2) + 9*(1 + 3*x + 4*x**2 + 12*x**3) - 9*(7 - x**2 - 8*x**3 + 13*x**4)\n\n# find the coefficient of x\ncoeff_x = sym.simplify(expr).coeff(x)\n\n# print the coefficient of x\nprint(coeff_x)"
  },
  {
    "example_id": 408,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "for x in range(0, 9):\n    if abs(x - 1) == 7:\n        print(x)"
  },
  {
    "example_id": 409,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nsol = solve(x**2 + x - 6, x)\nprint(len(sol))"
  },
  {
    "example_id": 410,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print((3-4)**2 + 2*(3+4))"
  },
  {
    "example_id": 411,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import solve, symbols\nx = symbols('x')\nsol = solve((x ** 2 - 7 * x + 7) - (-3), x)\nprint(sol[0] + sol[1])"
  },
  {
    "example_id": 412,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "112.0"
    ],
    "solution": "from sympy import sqrt\n\nnumer = (2/1 + 2*sqrt(3)) + (3/(2 - sqrt(3)))\ndenom = 1 + 2*sqrt(3) - 2*sqrt(3)\n\nA = numer/denom\nB = sqrt(3)*(numer/denom)\nC = denom\n\nprint(A+B+C)"
  },
  {
    "example_id": 413,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "630.0"
    ],
    "annotated_answers": [
      "630.0"
    ],
    "solution": "sum_5 = sum(range(0, 20 * 5 + 1, 5))\nsum_even = sum(range(0, 20 * 2 + 2, 2))\nprint(sum_5 - sum_even)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "15.0"
    ],
    "annotated_answers": [
      "16384.0"
    ],
    "solution": "import sympy\n\nk = sympy.symbols('k', real=True)\nx = sympy.symbols('x', real=True)\n\nf = x**2 + k*x + 15\n\nsol = f.factor()\n\nprint(sol)"
  },
  {
    "example_id": 415,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\n\ndef distance(p1, p2):\n    return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)\n\nprint(distance((-4, 1), (1, 13)))"
  },
  {
    "example_id": 416,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for i in range(1, 10):\n    if i**2!= sum(range(1, 10)):\n        print(i)"
  },
  {
    "example_id": 417,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0",
      "3.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol(\"x\")\nexpr = 12 / (x**2) * x**4 / 14 * 35 / 3 * x\nprint(expr.simplify())"
  },
  {
    "example_id": 418,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = -1 / 4\nb = 1 - a * 2\nm_point = a * 6 + b\nprint(m_point)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "import numpy as np\n\ndef g(x):\n    return 4*x**3 - 3*x**2 - 4*x + 1\n\ndef h(x):\n    return 2*x**3 + 3*x**2 - 4*x + 1\n\ndef f(x):\n    return 1\n\ndef g_inverse(y):\n    return (y+1)/2\n\ndef h_inverse(y):\n    return (y+1)/2\n\ndef f_inverse(y):\n    return y\n\ndef g_domain():\n    return (-1,1)\n\ndef h_domain():\n    return (-1,1)\n\ndef f_domain():\n    return (-1,1)\n\ndef g_range():\n    return (1,3)\n\ndef h_range():\n    return (-1,1)\n\ndef f_range():\n    return (-1,1)\n\ndef g_domain_range_ratio():\n    return (g_range()[1]-g_range()[0])/(g_domain()[1]-g_domain()[0])\n\ndef h_domain_range_ratio():\n    return (h_range()[1]-h_range()[0])/(h_domain()[1]-h_domain()[0])\n\ndef f_domain_range_ratio():\n    return (f_range()[1]-f_range()[0])/(f_domain()[1]-f_domain()[0])\n\ndef g_ratio():\n    return (g_domain_range_ratio()/g_domain_range_ratio())**0.5\n\ndef h_ratio():\n    return (h_domain_range_ratio()/h_domain_range_ratio())**0.5\n\ndef f_ratio():\n    return (f_domain_range_ratio()/f_domain_range_ratio())**0.5\n\nprint(g_ratio())\nprint(h_ratio())\nprint(f_ratio())"
  },
  {
    "example_id": 420,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10.0",
      "2.0",
      "10.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\n\ny1 = x**4\ny2 = 5*x**2 - 6\n\nsol = sp.solve((y1-y2).diff(x), x)\n\nprint(sol)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0",
      "18.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(3 ** 4 - 3 ** 3)\nprint(3 ** 3 - 3 ** 2)"
  },
  {
    "example_id": 422,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "9.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nprint(sympy.simplify(sympy.expand(x/(x**2-9))))"
  },
  {
    "example_id": 423,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "p = 3\nq = 6 * 8\nprint((p + q) / 2)"
  },
  {
    "example_id": 424,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = 1\nb = 2\nprint(abs(a - b))"
  },
  {
    "example_id": 425,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 3\na = -13\nb = 21\nprint(2*z + b)"
  },
  {
    "example_id": 426,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    if x <= 3:\n        return 9 - 2*x\n    else:\n        return a*x + b\n\na = 1\nb = -1\n\nx = f(f(1))\n\nprint(x)"
  },
  {
    "example_id": 427,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "a = -1\nb = 3\nc = -1\n\nx_coord = 1\ny_coord = (a*x_coord**2 + b*x_coord + c)\n\nprint(y_coord)"
  },
  {
    "example_id": 428,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "import sympy as sp\nx1, y1 = sp.symbols('x1, y1')\nx2, y2 = sp.symbols('x2, y2')\nslope = (y2 - y1) / (x2 - x1)\ny_intercept = y1 - slope * x1\nprint(slope, y_intercept)"
  },
  {
    "example_id": 429,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "smallest = 14\nhalf_smallest = smallest / 2\nsum_of_terms = half_smallest + smallest + 2 * smallest\nprint(sum_of_terms)"
  },
  {
    "example_id": 430,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0",
      "20.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "domain = set(range(21))\nrange_ = set([6, 7, 8, 9, 10, 11])\nprint(domain - range_)"
  },
  {
    "example_id": 431,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import sympy\n\nx = sympy.symbols(\"x\")\n\nleft_term = sympy.sqrt(12 * x) + 12\nright_term = sympy.sqrt(3 * x) - 6\n\neq = (left_term * right_term) - (4 * (x + 3) + x - 34)\nsol = sympy.solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 432,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x**2 - 6*x + 13)"
  },
  {
    "example_id": 433,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-17.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "m = -2\nn = -15\nprint(m+n)"
  },
  {
    "example_id": 434,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "9.0",
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import solve, Symbol\nx, y = Symbol('x'), Symbol('y')\nr = solve(x**2 - 4*x + y**2 - 6*y - 36, y)[0]\nprint(r)"
  },
  {
    "example_id": 435,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "f_5 = 2 * 5 - 3\ng_f_5_1 = 5 + 1\nprint(g_f_5_1)"
  },
  {
    "example_id": 436,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "from math import sqrt\n\ndef prime_factor(n):\n    if n == 1:\n        return []\n    if n % 2 == 0:\n        return [2] + prime_factor(n // 2)\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return [i] + prime_factor(n // i)\n    return [n]\n\nprint(max(prime_factor(9951)))"
  },
  {
    "example_id": 437,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "# using sympy\nfrom sympy import Symbol\nx = Symbol('x')\nf = 3*x**2 + 14*x + 8\nf = f.factor()\nA, B = f.args\nprint(A - B)"
  },
  {
    "example_id": 438,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "451.9"
    ],
    "annotated_answers": [
      "228.3"
    ],
    "solution": "daily_growth_rate = 0.05\ndays_since_first_notice = 2\nheight_now = 452\nheight_2_weeks_ago = height_now - (daily_growth_rate * days_since_first_notice)\nprint(height_2_weeks_ago)"
  },
  {
    "example_id": 439,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import S, Symbol, solve\nx = Symbol('x')\nf = 1/(x-64) + 1/(x**2-64) + 1/(x**3-64)\nsol = solve(f, x)\nprint(len(sol))"
  },
  {
    "example_id": 440,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "odd_integers = [1, 3, 5, 7, 9]\nsum(odd_integers)"
  },
  {
    "example_id": 441,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy as sp\n\nx, y, z = sp.symbols('x, y, z')\nexpr = (y-x)**2 / (y-z)*(z-x) + (z-y)**2 / (z-x)*(x-y) + (x-z)**2 / (x-y)*(y-z)\nprint(expr.expand())"
  },
  {
    "example_id": 442,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "3.0",
      "6.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "5.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy import sqrt\n\na = simplify(sqrt(2*3))\nb = 9/a\nc = 2*sqrt(3)\n\nprint(a)\nprint(b)\nprint(c)\n\nprint(a+b+c)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 3\ny = 4\nz = 5\nprint(x + y + z)"
  },
  {
    "example_id": 444,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "217.0"
    ],
    "solution": "x = 3\ny = 4\nprint(x**2 - y**2)"
  },
  {
    "example_id": 445,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "sum = 25\ndiff = 11\nif sum - diff > diff:\n    print(sum - diff)\nelse:\n    print(diff)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "import numpy as np\nx_range = np.arange(-5, 5)\ny_range = np.abs(x_range)\ninside = np.where((y_range < 0) & (x_range < 0))[0]\nprint(len(inside))"
  },
  {
    "example_id": 447,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def star(a, b):\n    return (a + b) * b\n\nprint(star(3, 5) - star(5, 3))"
  },
  {
    "example_id": 448,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = -18 / 9\nprint(x)"
  },
  {
    "example_id": 449,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.1166666666666667",
      "1.3666666666666665",
      "1.6166666666666665",
      "1.25",
      "0.8666666666666667",
      "1.9166666666666665",
      "1.45",
      "1.6166666666666667",
      "2.1166666666666663"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# Anna's time\na = 1/2\n\n# Bertram's time\nb = 3/4\n\n# Carli's time\nc = 2/3\n\n# David's time\nd = 1/5\n\n# Anna + Bertram + Carli + David\nsum = a + b + c + d\n\n# Anna + Carli + David\nsum_a_c_d = a + c + d\n\n# Bertram + Carli + David\nsum_b_c_d = b + c + d\n\n# Anna + Bertram\nsum_a_b = a + b\n\n# Carli + David\nsum_c_d = c + d\n\n# Anna + Bertram + Carli\nsum_a_b_c = a + b + c\n\n# Anna + Bertram + David\nsum_a_b_d = a + b + d\n\n# Carli + David + Bertram\nsum_c_d_b = c + d + b\n\n# Anna + Carli + David + Bertram\nsum_a_c_d_b = a + c + d + b\n\nprint(sum)\nprint(sum_a_c_d)\nprint(sum_b_c_d)\nprint(sum_a_b)\nprint(sum_c_d)\nprint(sum_a_b_c)\nprint(sum_a_b_d)\nprint(sum_c_d_b)\nprint(sum_a_c_d_b)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\na = 3\nb = 4\nc = 5\n\nexpr = x**2 + b*x + c\n\nsol = solve(expr > 0, x)\n\nprint(b+c)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import sqrt\n\ndef f(x):\n    if x >= 0:\n        return -sqrt(x)\n    else:\n        return x ** 2\n\nprint(f(f(f(f(512)))))"
  },
  {
    "example_id": 452,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "A = 1\nB = -2\nC = 1\nr = 5\nprint(A+B+C+r)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "from sympy import sqrt, expand\n\nprint(sqrt(5**5+5**5+5**5+5**5+5**5))"
  },
  {
    "example_id": 454,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "age_john = 35\nage_father = 27\nsum_age_john = sum(int(digit) for digit in str(age_john))\nsum_age_father = sum(int(digit) for digit in str(age_father))\ndifference = abs(sum_age_john - sum_age_father)\nprint(difference)"
  },
  {
    "example_id": 455,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 0:\n        return n**2 - 3*n + 1\n    else:\n        return n**2 + 1\n\ndef recursive_f(n):\n    if n == 2:\n        return f(2)\n    else:\n        return f(recursive_f(n-1))\n\nprint(recursive_f(5))"
  },
  {
    "example_id": 456,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0",
      "84.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "A = 2 + 8 + 32\nB = 2 * (2 + 8 + 32)\n\nprint(A, B)"
  },
  {
    "example_id": 457,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "21.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import expand, sqrt\n\nexpr = 3/sqrt(16) + 1/sqrt(3)\na, b = expand(expr).as_numer_denom()\nprint(a + b)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import log, exp\nx = log(81 / 256, 3/4)\nprint(x)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-20.0",
      "4.0",
      "4.0",
      "3.0",
      "9.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\nexpr = (1+2*x) - 2*(1+2*x+3*x**2) + 3*(1+2*x+3*x**2+4*x**3) - 4*(1+2*x+3*x**2+4*x**3+5*x**4)\nprint(simplify(expr))"
  },
  {
    "example_id": 460,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "f = [0, 0, 1, 3, 6]\ng = [f[i] - i for i in range(len(f))]\nprint(len(set(g)))"
  },
  {
    "example_id": 461,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "5.0",
      "-3.0",
      "4.0",
      "5.0",
      "2.0",
      "144.0",
      "2.0",
      "24.0",
      "360.0",
      "2.0",
      "90.0",
      "225.0",
      "2.0",
      "15.0",
      "15.0",
      "-3.0",
      "4.0",
      "5.0",
      "2.0",
      "144.0",
      "2.0",
      "24.0",
      "360.0",
      "2.0",
      "90.0",
      "225.0",
      "2.0",
      "4.0",
      "5.0",
      "-3.0",
      "4.0",
      "5.0",
      "2.0",
      "144.0",
      "2.0",
      "24.0",
      "360.0",
      "2.0",
      "90.0",
      "225.0",
      "2.0",
      "15.0",
      "15.0",
      "-3.0",
      "4.0",
      "5.0",
      "2.0",
      "144.0",
      "2.0",
      "24.0",
      "360.0",
      "2.0",
      "90.0",
      "225.0",
      "2.0"
    ],
    "annotated_answers": [
      "208.0"
    ],
    "solution": "import sympy\n\n# Sally's solution\na, b = sympy.symbols('a, b')\ntotal_candies = a * b\nleftover_candies = 2 * a + b\n\n# Rita's solution\nc, d = sympy.symbols('c, d')\nnew_total_candies = 5 * a - 4 * c\nnew_leftover_candies = (b - 1) / 3 * d\n\n# Equations\neq1 = total_candies - leftover_candies\neq2 = new_total_candies - new_leftover_candies\n\n# Solve\nsolution = sympy.solve([eq1, eq2], [a, b, c, d])\n\n# Print\nprint(solution)"
  },
  {
    "example_id": 462,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 7\nprint(n)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(2-3)\nprint(2+3)"
  },
  {
    "example_id": 464,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "from sympy import Symbol, expand, simplify\n\nx = Symbol('x')\n\nexpr = 4 * (x + 7) * (2 - x)\n\nmax_val = expand(simplify(expr)).subs(x, 1)\nprint(max_val)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "print(12 * 3)"
  },
  {
    "example_id": 466,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "def f(x):\n    if x == 3:\n        return 5\n    else:\n        return f(x/3) + 2\n\ndef f_inv(x):\n    if x == 11:\n        return 3\n    else:\n        return f_inv(x-2)/3\n\nprint(f_inv(11))"
  },
  {
    "example_id": 467,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15333.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nprint(sum([f(f(x)) for x in range(1,10)]))"
  },
  {
    "example_id": 468,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(8 * (6 ** 2 - 3 * 11) // 8 + 3)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 470,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x = 2 * 2**3 + 4\nprint(x)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "a = 33 - 14\nb = 14\nprint(a+b)"
  },
  {
    "example_id": 473,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from math import sqrt\n\nx = 5\ny = 2\n\nprint(sqrt(x**3 - 2**y))"
  },
  {
    "example_id": 474,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0",
      "2.0",
      "57.0",
      "2.0",
      "2.0",
      "57.0",
      "2.0",
      "7.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "from sympy import symbols, solve, sqrt\n\nx = symbols('x')\nroots = solve(x**2 + 7*x - 2, x)\nalpha = roots[0]\nbeta = roots[1]\n\nprint(alpha**2 + beta**2)"
  },
  {
    "example_id": 475,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(5*1 + 4)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15554.0"
    ],
    "annotated_answers": [
      "15554.0"
    ],
    "solution": "terms = [2222]\nfor i in range(1, 7):\n    terms.append(terms[-1] + 1010)\nprint(sum(terms[5:7]))"
  },
  {
    "example_id": 477,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x1, y1 = 7, 4\nx2, y2 = 6, 3\nm = (y2 - y1) / (x2 - x1)\nb = y1 - m * x1\nprint(b)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3600.0"
    ],
    "annotated_answers": [
      "3600.0"
    ],
    "solution": "# Area of a square is a^2\narea_before = 3491 ** 2\narea_after = (3491 - 60) * (3491 + 60)\nprint(area_after - area_before)"
  },
  {
    "example_id": 479,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "m = 16\nn = 4\nprint(m-n)"
  },
  {
    "example_id": 480,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print((15 + 5) * (15 - 5))"
  },
  {
    "example_id": 481,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def f(x):\n    return 2/(x+1)\n\ndef f_inv(y):\n    return 1/y-1\n\nprint(f_inv(1/5))"
  },
  {
    "example_id": 482,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "9.0",
      "3.0",
      "1.0",
      "9.0",
      "3.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import symbols\nx,y = symbols('x y')\neq = x**2 + 6*x + y**2 + 8*y\nsol = solve(eq,x,y)\nprint(sol)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.8333333333333333"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 4\ny = 3\nvalue = (2*x + y) / (3*x - 2*y)\nprint(value)"
  },
  {
    "example_id": 484,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "n = 1\nwhile True:\n    if (2 - (-1)) ** 2 + (n - 1) ** 2 == 5 ** 2:\n        print(n * 1)\n        break\n    n += 1"
  },
  {
    "example_id": 485,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(int(abs(23/9)))"
  },
  {
    "example_id": 486,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\n\nx = sp.Symbol('x', real=True)\ny = sp.Symbol('y', real=True)\n\nsp.Eq(x*y, 56)\nsp.Eq(7/x + 14/y, 4)\n\nsol = sp.solve((x, y), dict=True)\nprint(sol)"
  },
  {
    "example_id": 487,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 3\nb = 9\nprint(b - a)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def g(x):\n    return 2*x-1\n\ndef f(x):\n    return g(g(x)) - g(x)\n\nprint(f(3))"
  },
  {
    "example_id": 489,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.333333333333333"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "d = 8 / 9 * 6\nprint(d)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0",
      "22.0",
      "24.0",
      "26.0",
      "28.0",
      "30.0",
      "32.0",
      "34.0",
      "36.0",
      "38.0",
      "40.0",
      "42.0",
      "44.0",
      "46.0",
      "48.0",
      "50.0",
      "52.0",
      "54.0",
      "56.0",
      "58.0",
      "60.0",
      "62.0",
      "64.0",
      "66.0",
      "68.0",
      "70.0",
      "72.0",
      "74.0",
      "76.0",
      "78.0",
      "80.0",
      "82.0",
      "84.0",
      "86.0",
      "88.0",
      "90.0",
      "92.0",
      "94.0",
      "96.0",
      "98.0",
      "100.0",
      "102.0",
      "104.0",
      "106.0",
      "108.0",
      "110.0",
      "112.0",
      "114.0",
      "116.0",
      "118.0",
      "120.0",
      "122.0",
      "124.0",
      "126.0",
      "128.0",
      "130.0",
      "132.0",
      "134.0",
      "136.0",
      "138.0",
      "140.0",
      "142.0",
      "144.0",
      "146.0",
      "148.0",
      "150.0",
      "152.0",
      "154.0",
      "156.0",
      "158.0",
      "160.0",
      "162.0",
      "164.0",
      "166.0",
      "168.0",
      "170.0",
      "172.0",
      "174.0",
      "176.0",
      "178.0",
      "180.0",
      "182.0",
      "184.0",
      "186.0",
      "188.0",
      "190.0",
      "192.0",
      "194.0",
      "196.0",
      "198.0",
      "200.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 4\nwhile n < 200:\n    n += 2\n    print(n)"
  },
  {
    "example_id": 491,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "annual_savings = 1200\none_time_cost = 10000\nmaintenance_cost = 650\nyears = one_time_cost / annual_savings\nprint(int(years))"
  },
  {
    "example_id": 492,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def midpoint(A, B):\n    return (A[0] + B[0]) / 2, (A[1] + B[1]) / 2\n\nmidpoint_coords = midpoint((3, 1), (5, 1))\nprint(midpoint_coords)"
  },
  {
    "example_id": 493,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 2\nb = 1\nc = 1\n\nprint(a + b + c)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nexpr = 24*x**2 - 19*x - 35\n(A, B, C) = expr.as_coefficients_dict()\nAB = A*B\nprint(AB - 3*C)"
  },
  {
    "example_id": 495,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0",
      "3.0",
      "8.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import sympy as sp\nx, y, z = sp.symbols('x y z')\neq1 = 3*x + 4*y - 12*z - 10\neq2 = -2*x - 3*y + 9*z + 4\nsolution = sp.solve((eq1, eq2), (x, y, z))\nprint(solution)"
  },
  {
    "example_id": 496,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "log_base = 8\nlog_arg = 64 * log_base\nprint(log_arg)"
  },
  {
    "example_id": 497,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-31.0"
    ],
    "annotated_answers": [
      "-13.5"
    ],
    "solution": "p = -14\nq = -17\nprint(p + q)"
  },
  {
    "example_id": 498,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "import math\n\nn_endpoints = 1 + 2 + 3 + 4 + 5\nprint(n_endpoints)"
  },
  {
    "example_id": 499,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-75.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, d, e = -2, -20, -53\nsum = a + d + e\nprint(sum)"
  },
  {
    "example_id": 500,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0000002857142856"
    ],
    "annotated_answers": [
      "-6.5"
    ],
    "solution": "a = 2000 / 7000000000\nb = 2\nprint(a + b)"
  },
  {
    "example_id": 501,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "100.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "for i in range(100, 1000):\n    for j in range(i-1, 1000):\n        if i*j == 10000:\n            print(i, j)\n            break"
  },
  {
    "example_id": 502,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\neq1 = (x + 1)/(x - 1)\neq2 = (x - 2)/(x + 2)\nsol = sympy.solve([eq1, eq2], x)\nprint(sol)"
  },
  {
    "example_id": 503,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "129600.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "# Volume = Length x Width x Height\n# Length x Width x Height = 30 x 180 x 24\n# Length x Width = 30 x 180\n# Length = 30\n# Width = 180\n# Height = 24\nprint(30 * 180 * 24)"
  },
  {
    "example_id": 504,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "m = 1\nn = 2\nprint(m+n)"
  },
  {
    "example_id": 505,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "num_people = 5\nnum_hours = 3\nnum_people_needed = num_people * (num_hours / 12)\nprint(num_people_needed)"
  },
  {
    "example_id": 506,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "meals_needed = 18 / 12\nprint(meals_needed)"
  },
  {
    "example_id": 507,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "3.2"
    ],
    "solution": "def f(x):\n    return 2*x + 2\n\nprint(f(10))"
  },
  {
    "example_id": 508,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "x = 7\nprint(x)"
  },
  {
    "example_id": 509,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "from sympy import Symbol, exp, log\nx = Symbol('x')\nf = x**3\nf_inv = log(8)/log(x)\nprint(f_inv/(f_inv**-1))"
  },
  {
    "example_id": 510,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    return x - (2 + (1/(x-2)))\n\ndef newton_raphson(f, x0, tol=1e-10):\n    while abs(f(x0)) > tol:\n        x0 -= f(x0) / (1 + f(x0)*f(x0))\n    return x0\n\nx = newton_raphson(f, 1)\nprint(x)"
  },
  {
    "example_id": 511,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from math import ceil, sqrt\nprint(ceil(sqrt(20)) ** 2)"
  },
  {
    "example_id": 512,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    return 5*x**2 + 3*x + 4\nprint(f(-2))"
  },
  {
    "example_id": 513,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(120 * 0.01 * 30 - 130 * 0.01 * 20)"
  },
  {
    "example_id": 514,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "print((13+5)*(13-5))"
  },
  {
    "example_id": 515,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def f(x):\n    return (x + 2) ** 4 - 100\n\nneg_ints = [-1, -2, -3, -4]\nneg_ints = [i for i in neg_ints if f(i) < 0]\nprint(len(neg_ints))"
  },
  {
    "example_id": 516,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import sqrt, simplify\nx = (1 + sqrt(2) - sqrt(3))\nprint(simplify(1/x))"
  },
  {
    "example_id": 517,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "for x in range(1, 10):\n    if x**2 + 6**2 == 10**2:\n        print(x)"
  },
  {
    "example_id": 518,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "10.39230485",
      "12.0",
      "-10.39230485"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import numpy as np\n\ny1 = np.poly1d([1, 2, 7])\ny2 = np.poly1d([6, 0])\n\nx = np.roots(y1 - y2)\nb = y2(x)\nprint(b)"
  },
  {
    "example_id": 519,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "y_intercept = -2 * 6 / (-4 - -2)\nprint(y_intercept)"
  },
  {
    "example_id": 520,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "print(4 * (1 + 3))"
  },
  {
    "example_id": 521,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "import sympy as sym\n\ndef find_sum_of_integers(n):\n    sum_of_integers = 0\n    for i in range(n):\n        if abs(i) + 1 > 7 and abs(i + 1) <= 7:\n            sum_of_integers += i\n    return sum_of_integers\n\nprint(find_sum_of_integers(100))"
  },
  {
    "example_id": 522,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\nf = x**2 - 14*x + 3\nprint(f.subs(x, 0))"
  },
  {
    "example_id": 523,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1083.2142857142858"
    ],
    "annotated_answers": [
      "2300.0"
    ],
    "solution": "# Use the toolbox to find the cost of five pounds of feathers\n# and five ounces of gold.\nfeather_cost = 932 / 8\ngold_cost = 1402 / 14\nfeather_weight = 5\ngold_weight = 5\ntotal_cost = feather_cost * feather_weight + gold_cost * gold_weight\nprint(total_cost)"
  },
  {
    "example_id": 524,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "2.0",
      "61.0",
      "2.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "from sympy import solve\nfrom sympy.abc import x\nk = solve(x**2 - 8*x + 5 - x, x)[0]\nprint(k)"
  },
  {
    "example_id": 525,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# The first 8 consecutive odd counting numbers\n# are 1, 3, 5, 7, 9, 11, 13, 15, 17\n\n# The sum of the first 8 consecutive odd counting numbers\n# is 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 = 75\n\n# The sum of 5 consecutive even integers is 4 less than the sum of the first 8 consecutive odd counting numbers\n# The smallest of the even integers is 2\n\nprint(2)"
  },
  {
    "example_id": 526,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 3\ny = 2\nprint((2*x**3 - 3*y**2)/6)"
  },
  {
    "example_id": 527,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "158.0"
    ],
    "solution": "import math\nx = 7\ny = 19 ** 0.5\nprint(x**2 + y**2)"
  },
  {
    "example_id": 528,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = 3\ny = 4\nnum_oranges = (40 - 30) / (y - x)\nprint(num_oranges)"
  },
  {
    "example_id": 529,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\navg_a_2b = (a + 2*b) / 2\navg_a_2c = (a + 2*c) / 2\navg_a_2b_avg_a_2c = (avg_a_2b + avg_a_2c) / 2\nprint(avg_a_2b_avg_a_2c)"
  },
  {
    "example_id": 530,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = -2\nb = 4\nc = 5\nh = -1\nk = c + a*h**2\nprint(k)"
  },
  {
    "example_id": 531,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "4.0",
      "1.0",
      "4.0",
      "2.0",
      "3.0",
      "0.0",
      "2.0",
      "1.0",
      "2.0",
      "20.0",
      "2.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sym\nx0 = sym.symbols('x0')\ny0 = sym.symbols('y0')\nx1 = sym.symbols('x1')\ny1 = sym.symbols('y1')\nx2 = sym.symbols('x2')\ny2 = sym.symbols('y2')\nx3 = sym.symbols('x3')\ny3 = sym.symbols('y3')\nx4 = sym.symbols('x4')\ny4 = sym.symbols('y4')\n\nx_mid = (x0 + x1) / 2\ny_mid = (y0 + y1) / 2\n\nx_per = (x2 - x3) / (y2 - y3)\ny_per = (y2 - y3) / (x2 - x3)\n\nx_point = 20\n\n# Line l passes through the midpoint of (1,2) and (19,4)\ny_point = (y_mid + y_per * (x_point - x_mid)) / (1 + x_per * y_per)\n\nprint(y_point)"
  },
  {
    "example_id": 532,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = int(255 / 512 * 2)\nprint(n)"
  },
  {
    "example_id": 533,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "800000.0"
    ],
    "annotated_answers": [
      "800000.0"
    ],
    "solution": "print(1002**2-502**2+298**2-202**2)"
  },
  {
    "example_id": 534,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0",
      "19.0",
      "24.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "import sympy\nx, y, z = sympy.symbols('x y z')\n\neq1 = x + y - z - 8\neq2 = x - y + z - 18\neq3 = -x + y + z - 30\n\nsol = sympy.solve((eq1, eq2, eq3), (x, y, z))\n\nprint(sol)"
  },
  {
    "example_id": 535,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "possible_values = range(1, 7)\nprint(possible_values)"
  },
  {
    "example_id": 536,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "m = 3\nn = 7\np = 2\nm_plus_n_plus_p = m + n + p\nprint(m_plus_n_plus_p)"
  },
  {
    "example_id": 537,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "runner_a = 100 / 5\nrunner_b = runner_a * 1.5\nrunner_c_d = runner_a + runner_b\nrunner_e = 10\n\nprint(runner_b)"
  },
  {
    "example_id": 538,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40000.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "area = 200 ** 2\nprint(area)"
  },
  {
    "example_id": 539,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "print(int(math.ceil(math.sqrt(-23))))"
  },
  {
    "example_id": 540,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def f(x):\n    if x >= 3:\n        return 2*x-5\n    else:\n        return -x + 5\n\ndef f2(x):\n    if x >= 3:\n        return 2*(2*x-5) - 5\n    else:\n        return 2*(-x + 5) + 5\n\nprint(f(3)) # 3\nprint(f2(3)) # 3"
  },
  {
    "example_id": 541,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1023.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "a = 1\nb = 3\nwhile True:\n    a = a + 2\n    b = b + 2\n    square_a = a**2\n    square_b = b**2\n    if square_b - square_a == 128:\n        print(a*b)\n        break"
  },
  {
    "example_id": 542,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "987.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "least_positive_integer = 1000 + (987 - 1000)\nprint(least_positive_integer)"
  },
  {
    "example_id": 543,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 18//24\nprint(n)"
  },
  {
    "example_id": 544,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "29.0",
      "30.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import itertools\n\ndef distinct_triangles(a, b, c):\n    return (a*b*c!= 0) and (a!= b!= c)\n\nfor a, b, c in itertools.permutations(range(1, 31), 3):\n    if distinct_triangles(a, b, c) and (a + b + c == 60):\n        print(a, b, c)\n        break"
  },
  {
    "example_id": 545,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "# The equation is a * b = 2a + 3b\n# We can manipulate the equation to get a * b = 2 * a + 3 * b\n# Now we can see that a = 4 and b = 3\n# So a * b = 4 * 3 = 12\nprint(4 * 3)"
  },
  {
    "example_id": 546,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "total_value = 75\nvalue_of_nickel = total_value / 10\nnumber_of_nickels = value_of_nickel // 5\nprint(number_of_nickels)"
  },
  {
    "example_id": 547,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "smaller = 185 - 20\nprint(smaller)"
  },
  {
    "example_id": 548,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 0:\n        return n**2 - 4*n - 1\n    else:\n        return n**2\n\ndef g(n):\n    return f(f(f(f(f(n)))))\n\nprint(g(4))"
  },
  {
    "example_id": 549,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "5.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "print(int(11.1))\nprint(int(0.5 * 11.1))"
  },
  {
    "example_id": 550,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sp\nx = sp.symbols('x')\nprint(sp.solve(sp.log(4**x, 64**(1/3)) - 1))"
  },
  {
    "example_id": 551,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\n\ndef g(x):\n    return math.sqrt(x)\n\ndef t(x):\n    return 3 - g(x)\n\nprint(t(g(16)))"
  },
  {
    "example_id": 552,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 553,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-73.0",
      "168.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, Add\nx = Symbol('x')\nf = Add(1/(x**2-7), 1/(x**3-8), 1/(x**4-9))\nprint(f.subs(x, 1))"
  },
  {
    "example_id": 554,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import ceil, floor, sqrt\nprint(ceil(sqrt(10)) + floor(sqrt(10)))"
  },
  {
    "example_id": 555,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "250.0"
    ],
    "annotated_answers": [
      "4000.0"
    ],
    "solution": "units_in_liter = 1000 / 4\nprint(units_in_liter)"
  },
  {
    "example_id": 556,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# First pile has 5 fewer than the second pile.\n# So, the second pile has 22 quarters.\n# The second pile has 4 more than the third pile.\n# So, the third pile has 18 quarters.\n# The fourth pile has three times as many as the second pile.\n# So, the fourth pile has 3 \\* 22 = 66 quarters.\nprint(66)"
  },
  {
    "example_id": 557,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "367.6470588235294"
    ],
    "annotated_answers": [
      "368.0"
    ],
    "solution": "horsepower = 500 / 1.36\nprint(horsepower)"
  },
  {
    "example_id": 558,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy as sym\n\ntri = sym.Symbol(\"tri\")\nsqr = sym.Symbol(\"sqr\")\ndmd = sym.Symbol(\"dmd\")\nclub = sym.Symbol(\"club\")\n\neq1 = tri + sqr - club\neq2 = tri + tri - dmd - dmd - dmd - dmd\neq3 = tri + tri - club - dmd\n\nsol = sym.solve([eq1, eq2, eq3], [tri, sqr, dmd, club])\n\nprint(sol)"
  },
  {
    "example_id": 559,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "f = lambda x: x ** 2 - 1\ng = lambda x: x + 7\nprint(f(g(7)) + g(f(3)))"
  },
  {
    "example_id": 560,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return x * (3 * x - 4) - (6 * x ** 2 - 3 * x + 5) / 10\n\ncount = 0\nfor i in range(10000):\n    if f(i) <= 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 561,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from scipy.optimize import fsolve\n\ndef break_even(x):\n    return x**2 - 8 * x - 33\n\nsolution = fsolve(break_even, 1)\nprint(solution)"
  },
  {
    "example_id": 562,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "unit_time = 2\nrate_mike = 4/5\nmike_distance = unit_time * rate_mike\nprint(mike_distance)"
  },
  {
    "example_id": 563,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(int(pow(pow(7 / 4, 2), 2)))"
  },
  {
    "example_id": 564,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "920.25"
    ],
    "solution": "import math\ninterest = 10000 * 0.045 * 2\nprint(interest)"
  },
  {
    "example_id": 565,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "import sympy\na = sympy.symbols('a')\nn = sympy.symbols('n')\nd = sympy.symbols('d')\n\n# 7th term\nt7 = a + (n - 1) * d\nprint(t7)\n\n# 11th term\nt11 = a + (n - 1) * d\nprint(t11)\n\n# 21st term\nt21 = a + (n - 1) * d\nprint(t21)"
  },
  {
    "example_id": 566,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(3 + 5)"
  },
  {
    "example_id": 567,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3333333333333333"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "minutes = 20 / 60\nprint(minutes)"
  },
  {
    "example_id": 568,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "a = 3\nb = 10\na_times_b = 2*a + 5*b - a*b\nprint(a_times_b)"
  },
  {
    "example_id": 569,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nproduct = a*b*c\nprint(product)"
  },
  {
    "example_id": 570,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "print(5 + 500 * 10 / 100)"
  },
  {
    "example_id": 571,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "from sympy import *\nA = Point(0, 7)\nB = Point(1, 0)\nC = Point(12, -2)\nD = Point(7, 8)\nAB = A.distance(B)\nBC = B.distance(C)\nCD = C.distance(D)\nDA = D.distance(A)\nABCD = 0.5 * (AB + BC + CD + DA)\nprint(ABCD)"
  },
  {
    "example_id": 572,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# m = 7/n\n# m+n = 8\n# n = 8/m\n# n-m = 8/m - 7/n = 7/n - 8/m = 7(8/m) - 8(7/n) = 56 - 56 = 0\n# |m-n| = 0"
  },
  {
    "example_id": 573,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "-5.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "import numpy as np\n\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\n\nX, Y = np.meshgrid(x, y)\nZ = X**2 + Y**2 - 14*X - 48*Y\n\n# find the maximum value of Z\nidx = np.unravel_index(np.argmax(Z), Z.shape)\nprint(X[idx], Y[idx])"
  },
  {
    "example_id": 574,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.21"
    ],
    "solution": "b = -2.6\nc = 3.6\nprint(b+c)"
  },
  {
    "example_id": 575,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import sqrt\n\nd = (-3 + sqrt(3)) / 2\ne = (-3 - sqrt(3)) / 2\n\nprint((d-1)*(e-1))"
  },
  {
    "example_id": 576,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.11728713807222"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import expand, log\n\nexpr = (2 ** (1/4)) ** (2/5) * (4 ** (3/8)) ** (2/25)\nprint(expand(expr))"
  },
  {
    "example_id": 577,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "454.0"
    ],
    "annotated_answers": [
      "33840.0"
    ],
    "solution": "largest_product = 454\nprint(largest_product)"
  },
  {
    "example_id": 578,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "left_term = 2 * 6 + 4 * 3\nright_term = 8 * (3 + 3)\nprint(right_term - left_term)"
  },
  {
    "example_id": 579,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 3\ny = 2\nx_3 = x**3\ny_3 = y**3\ndifference = x_3 - y_3\nprint(difference)"
  },
  {
    "example_id": 580,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "3.0",
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy as sp\na = sp.Symbol('a')\neq = (3*5**2 - 4*(5-a)**2)/3\nsol = sp.solve(eq, a)\nprint(sol)"
  },
  {
    "example_id": 581,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((3*4-2)*(4*4+1)-(3*4-2)*4*4+1)"
  },
  {
    "example_id": 582,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-19.0",
      "2.0",
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import sqrt\ny = sqrt(19 + 3*7) - 19\nprint(y)"
  },
  {
    "example_id": 583,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import Symbol, sqrt\nx = Symbol('x')\ny = Symbol('y')\nradius = sqrt(x**2 + y**2 - 6) - 2\nprint(radius)"
  },
  {
    "example_id": 584,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "f = lambda x: x**2 - 4*x**0.5 + 1\nf(f(4))"
  },
  {
    "example_id": 585,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "5050.0"
    ],
    "solution": "print(sum(range(1, 101)))"
  },
  {
    "example_id": 586,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(4 - 2)"
  },
  {
    "example_id": 587,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1600.0"
    ],
    "annotated_answers": [
      "1600.0"
    ],
    "solution": "x = 441 + 2 * (21 * 19) + 361\nprint(x)"
  },
  {
    "example_id": 588,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73696.0"
    ],
    "annotated_answers": [
      "-42.0"
    ],
    "solution": "f = lambda x: x**3 - 6*x**2 + 3*x - 4\ng = lambda x: x**3 + 5*x**2 + 9*x - 2\nprint(f(g(2)))"
  },
  {
    "example_id": 589,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "15.0",
      "2.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy.abc import x, y\n\n# compute the radius\nradius = sqrt(130)\n\n# compute the center\ncenter_x = 5\ncenter_y = 15\n\n# compute the coordinates of Q\nq_x = 2 * y\nq_y = y\n\n# compute the distance between the center and Q\ndistance = sqrt((q_x - center_x)**2 + (q_y - center_y)**2)\n\n# compute the maximum possible value for x\nmax_x = 2 * distance\n\nprint(max_x)"
  },
  {
    "example_id": 590,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-12.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "x = -12\nprint(x)"
  },
  {
    "example_id": 591,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(g(2))"
  },
  {
    "example_id": 592,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\neq = 2*x**2 + 13*x + 6\nsol = sym.solve(eq, x)\nprint(sol[0]**2 * sol[1]**2)"
  },
  {
    "example_id": 593,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\ndef sum_of_seq(n):\n    return n * (n + 1) // 2\n\ndef contains_2005(k):\n    s = sum_of_seq(k)\n    return 2005 in range(s - k + 1, s + 1)\n\nans = [k for k in range(1, 1001) if contains_2005(k)]\nprint(ans)"
  },
  {
    "example_id": 594,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "print(31**2 - 19**2)"
  },
  {
    "example_id": 595,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy as sp\n\nf = sp.exp(3*x**2 - sp.floor(x)*sp.factorial(sp.floor(x)) + sp.phi(sp.floor(x) + 1) + 72*x**4 + 3*x**3 - 6*x**2 + 2*x + 1)\ng = sp.exp(3*x**2 - sp.floor(x)*sp.factorial(sp.floor(x)) + sp.phi(sp.floor(x) + 1) + 72*x**4 + 4*x**3 - 11*x**2 - 6*x + 13)\n\nsol = sp.solve(f - g, x)\nprint(sol)"
  },
  {
    "example_id": 596,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "num_quarters_in_first_pile = 20 - 3\nnum_quarters_in_second_pile = 20 + 2\nnum_quarters_in_third_pile = 20 - 2\nnum_quarters_in_fourth_pile = 2 * num_quarters_in_second_pile\nprint(num_quarters_in_fourth_pile)"
  },
  {
    "example_id": 597,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\np, q = sympy.symbols('p q')\n\n# p and q are assumed to be positive real numbers\n# therefore, p-1 and q-1 are also positive real numbers\n\nsympy.simplify((p-1)*(q-1))"
  },
  {
    "example_id": 598,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.25"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return x**2 + 2\n\nf2 = f(2)\nf_inv = lambda y: (y - 2)**-0.5\n\nprint(f(f_inv(f2)))"
  },
  {
    "example_id": 599,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(int((3.5**2 - 2**2) / 2))"
  },
  {
    "example_id": 600,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy as sy\n\nx = sy.Symbol('x')\ny = sy.Symbol('y')\n\neq1 = 2*x - 3*y\neq2 = 4*x + 3*y\n\nsol = sy.solve((eq1, eq2), (x, y))\nprint(sol)"
  },
  {
    "example_id": 601,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.666666666666664"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# number of coins for each child\nn_amy = 10\nn_ben = 3 * n_amy\nn_carl = 1/3 * n_ben\nn_debbie = 2/3 * n_carl\n# total number of coins\nn_total = n_amy + n_ben + n_carl + n_debbie\nprint(n_total)"
  },
  {
    "example_id": 602,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import sqrt\nA = 4\nB = 32\nnum = 2\nden = sqrt(A) + sqrt(B)\nprint(num/den)"
  },
  {
    "example_id": 603,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3125.0"
    ],
    "annotated_answers": [
      "3125.0"
    ],
    "solution": "expression = 5 ** 3 * 5 ** 2\nprint(expression)"
  },
  {
    "example_id": 604,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "669.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "a = 2009 // 3\nprint(a)"
  },
  {
    "example_id": 605,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "sixth_term = 200 + 400\nprint(sixth_term)"
  },
  {
    "example_id": 606,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 3\nprint(x - 3 / (2 * x ** 2 - 8 * x + 7))"
  },
  {
    "example_id": 607,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "143.0"
    ],
    "solution": "num = 13\nreversed_num = int(''.join(reversed(str(num))))\nprint(num + reversed_num)"
  },
  {
    "example_id": 608,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "import math\nperimeter = math.fabs(1 - (-4)) + math.fabs(2 - 10)\nprint(perimeter)"
  },
  {
    "example_id": 609,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "993993.0",
      "1005993.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "from math import fabs\n\ndef min_value(a):\n    return fabs(a**2 + 6*a - 7)\n\nprint(min_value(-1000))\nprint(min_value(1000))"
  },
  {
    "example_id": 610,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "from sympy import integrate, symbols\nx, k = symbols('x k')\nintegral = integrate(integrate(1, (x, 0, k)), (x, 0, k))\nintegral = integral.evalf()\nprint(integral)"
  },
  {
    "example_id": 611,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "# larky is the planet with 7:4:9:20 ratio\nlarky_7_to_4 = 4\nlarky_7_to_9 = 20\n\n# assume 80 lugs is equivalent to x ligs\n# then 80/larky_7_to_9 = x/7\n# solve for x\nx = 80 * 7 / larky_7_to_9\n\nprint(x)"
  },
  {
    "example_id": 612,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "12.0",
      "2.0",
      "1.0",
      "4.0",
      "3.0",
      "2.0",
      "12.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import Point, Circle, sqrt, simplify, symbols\nx, y = symbols('x y')\nc = Circle(Point(-3, -12), 6)\nprint(sqrt(c.center.distance(Point(x, y))))\nprint(simplify(c.center.distance(Point(x, y))))"
  },
  {
    "example_id": 613,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = -2\nprint(x)"
  },
  {
    "example_id": 614,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.6034165586355513"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\na = math.sqrt(61) / 3\nprint(a)"
  },
  {
    "example_id": 615,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = 3\nb = -24\nc = 72\nprint(a+b+c)"
  },
  {
    "example_id": 616,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print(4 * 3 * 2)"
  },
  {
    "example_id": 617,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.877551020408163"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = 5 / 7\nb = 5 - a\nprint(a**2 + b**2)"
  },
  {
    "example_id": 618,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "219.6"
    ],
    "annotated_answers": [
      "221.0"
    ],
    "solution": "weight_end = 244 - 10 * (244 / 100)\nprint(weight_end)"
  },
  {
    "example_id": 619,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "800.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "print(102 ** 2 - 98 ** 2)"
  },
  {
    "example_id": 620,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sqrt\n\ndef is_perfect_square(n):\n    return int(sqrt(n)) ** 2 == n\n\ndef area_perimeter(side_length):\n    return side_length ** 2, 4 * side_length\n\ndef is_distinct_perfect_square(side_length):\n    area, perimeter = area_perimeter(side_length)\n    return is_perfect_square(area) and is_perfect_square(perimeter)\n\ndef count_distinct_perfect_squares(upper_bound):\n    count = 0\n    for side_length in range(1, upper_bound + 1):\n        if is_distinct_perfect_square(side_length):\n            count += 1\n    return count\n\nprint(count_distinct_perfect_squares(5))"
  },
  {
    "example_id": 621,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "315.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "c = 18**2 - 9\nprint(c)"
  },
  {
    "example_id": 622,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "4.0",
      "7.0",
      "3.0",
      "4.0",
      "7.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "import sympy\nx1 = sympy.sqrt(121 - 3**2) - 3\nx2 = sympy.sqrt(121 - 3**2) + 3\nprint(x1, x2)"
  },
  {
    "example_id": 623,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import simplify\nprint(simplify(4**5 + 4**5 + 4**5 + 4**5)**(1/3))"
  },
  {
    "example_id": 624,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 1.5\nprint(abs(x - 1) + abs(x - 1.5) + abs(x - 2))"
  },
  {
    "example_id": 625,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "-128.0"
    ],
    "solution": "x = 4 + 10\nprint(x)"
  },
  {
    "example_id": 626,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import numpy as np\n\ndef count_lattice_points(a, b):\n    count = 0\n    for x in range(1, a+1):\n        for y in range(1, b+1):\n            if x**2-y**2 == 17:\n                count += 1\n    return count\n\nprint(count_lattice_points(100, 100))"
  },
  {
    "example_id": 627,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "weekly_sales = 500\nprice = 450\nincrease = 5\nweekly_sales_new = weekly_sales + (10 * increase)\nrevenue_new = weekly_sales_new * price\nrevenue_old = weekly_sales * price\nwhile revenue_new > revenue_old:\n    price = price - increase\n    weekly_sales_new = weekly_sales + (10 * increase)\n    revenue_new = weekly_sales_new * price\n    revenue_old = weekly_sales * price\nprint(price)"
  },
  {
    "example_id": 628,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "cookies_per_brownies = 2\nbrownies_per_cupcakes = 10\ncookies_per_eighteen = 18\n\ncookies_per_brownies_eighteen = cookies_per_brownies * cookies_per_eighteen\n\ncupcakes_per_brownies = brownies_per_cupcakes / cookies_per_brownies\n\ncupcakes_per_eighteen = cupcakes_per_brownies * cookies_per_brownies_eighteen\n\nprint(cupcakes_per_eighteen)"
  },
  {
    "example_id": 629,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "years_to_36_feet = 36 / 18\nprint(years_to_36_feet)"
  },
  {
    "example_id": 630,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "98.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = -1\nx = 3\nf = a * x ** 4 - b * x ** 2 + x + 5\nprint(f)"
  },
  {
    "example_id": 631,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "5.0",
      "4.0",
      "1.0",
      "4.0",
      "4.0",
      "3.0",
      "5.0",
      "4.0",
      "17.0",
      "4.0",
      "4.0",
      "3.0",
      "5.0",
      "4.0",
      "1.0",
      "4.0",
      "4.0",
      "3.0",
      "5.0",
      "4.0",
      "17.0",
      "4.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols(\"x y\")\nk = sympy.symbols(\"k\", real=True)\n\neq1 = sympy.Eq(y, 2*x**2 + k*x + 6)\neq2 = sympy.Eq(y, -x + 4)\n\nsol = sympy.solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 632,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "174.0"
    ],
    "solution": "A = 2 * 60\nB = 5 * 60\nprint(A + B)"
  },
  {
    "example_id": 633,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def power(a, b):\n    return a ** b + b\n\ndef mul(a, b):\n    return power(a, b)\n\nprint(mul(1, 2) * 3)"
  },
  {
    "example_id": 634,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0",
      "202.0",
      "1010.0",
      "1010.0",
      "101.0",
      "202.0",
      "202.0",
      "1010.0",
      "101.0"
    ],
    "annotated_answers": [
      "697.0"
    ],
    "solution": "import math\n\ndef greatest_abc(a, b, c):\n    if a % 2 == 0:\n        a += 1\n    b = 2 * a\n    c = 5 * b\n    return a, b, c\n\ndef is_geometric_sequence(a, b, n):\n    if a == 1 or b == 1:\n        return False\n    ratio = b / a\n    for i in range(1, n):\n        if a * ratio ** i!= b:\n            return False\n    return True\n\ndef is_arithmetic_sequence(a, b, n):\n    if a == 1 or b == 1:\n        return False\n    diff = b - a\n    for i in range(1, n):\n        if a + diff!= b:\n            return False\n    return True\n\ndef is_sequence(a, b, n):\n    if is_geometric_sequence(a, b, n) or is_arithmetic_sequence(a, b, n):\n        return True\n    return False\n\ndef greatest_abc_helper(a, b, c):\n    if a > b and a > c:\n        return a, b, c\n    if b > a and b > c:\n        return b, a, c\n    return c, a, b\n\ndef greatest_abc_solver(a, b, c):\n    if a > b and a > c:\n        return a, b, c\n    if b > a and b > c:\n        return b, a, c\n    if is_sequence(a, b, 3) and is_sequence(b, c, 3):\n        return b, c, a\n    return a, b, c\n\n\ndef main():\n    a, b, c = greatest_abc(100, 1000, 10000)\n    print(a, b, c)\n    print(greatest_abc_helper(a, b, c))\n    print(greatest_abc_solver(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 635,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "from math import floor, sqrt\n\n\ndef f(x):\n    return x - floor(sqrt(x))**2\n\n\ntotal = 0\nfor i in range(101, 111):\n    total += f(i)\n\nprint(total)"
  },
  {
    "example_id": 636,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "243.0"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "n = 5\nfriends_per_cycle = 3\ntotal_people = friends_per_cycle ** n\nprint(total_people)"
  },
  {
    "example_id": 637,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "8.0",
      "2.0",
      "16.0"
    ],
    "annotated_answers": [
      "-128.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nprint(sympy.expand((x-2)**2 * (x+2)**2))"
  },
  {
    "example_id": 638,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0",
      "8.0",
      "10.0",
      "7.0",
      "79.0",
      "6.0",
      "28.0",
      "5.0",
      "32.0",
      "4.0",
      "37.0",
      "3.0",
      "43.0",
      "2.0",
      "29.0",
      "4.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "from sympy import expand, simplify\nfrom sympy.abc import x\n\na = 7*x**4 - 3*x**3 - 3*x**2 - 8*x + 1\nb = 8*x**4 + 2*x**3 - 7*x**2 + 3*x + 4\n\ncombined = expand(a*b)\nprint(simplify(combined))"
  },
  {
    "example_id": 639,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "c = 9 / (2^3 - 9 + 3)\nprint(c)"
  },
  {
    "example_id": 640,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "x = 1\nwhile True:\n    x = x + 1\n    if x**0.5 == 9:\n        break\nprint(x)"
  },
  {
    "example_id": 641,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "f_of_4 = 2 * 4 - 3\ng_of_f_of_4 = 5 - 4 * f_of_4\nprint(g_of_f_of_4)"
  },
  {
    "example_id": 642,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-25.0"
    ],
    "annotated_answers": [
      "-25.0"
    ],
    "solution": "if -10 <= -3:\n    print(3 * (-10) + 5)\nelse:\n    print(7 - 4 * (-10))"
  },
  {
    "example_id": 643,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "def find_nth_term(a, d, n):\n    return a + (n-1)*d\n\na = 0\nd = 5\nn = 12\nprint(find_nth_term(a, d, n))"
  },
  {
    "example_id": 644,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "b = -8\nprint(b)"
  },
  {
    "example_id": 645,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "567.0"
    ],
    "annotated_answers": [
      "567.0"
    ],
    "solution": "# Import the math toolbox\nfrom math import *\n\n# Calculate the common ratio\nr = (5103 / 7) ** (1/6)\n\n# Calculate the 5th term\nprint(r ** 4 * 7)"
  },
  {
    "example_id": 646,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import math\n\n# The number can be written in the form:\n# a * sqrt(2) + b * sqrt(3) + c * sqrt(6)\na = 1\nb = 1\nc = 1\n\n# The number is:\n# a * sqrt(2) + b * sqrt(3) + c * sqrt(6)\n# = (sqrt(2) + sqrt(3)) * (sqrt(2) + sqrt(3)) * (sqrt(2) + sqrt(3))\n# = (sqrt(2) + sqrt(3))^3\n# = 3 * (sqrt(2) + sqrt(3))\n# = 3 * 2 + 3 * 1\n# = 6 + 3\n\nprint(a + b + c)"
  },
  {
    "example_id": 647,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69.65685424949237"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from math import sqrt\n\na = 8 / sqrt(2)\nb = a**2\nc = a * sqrt(b)\nprint(a + b + c)"
  },
  {
    "example_id": 648,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import math\n\ndef distance(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef longest_side(p1, p2, p3):\n    return max(distance(p1, p2), distance(p2, p3), distance(p3, p1))\n\nprint(longest_side((11, 1), (2, 3), (3, 7)))"
  },
  {
    "example_id": 649,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "495.0"
    ],
    "annotated_answers": [
      "495.0"
    ],
    "solution": "# sum of odd numbers between 46 and 64\nsum = 0\nfor i in range(47, 65, 2):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 650,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import simplify\n\np = 3 * (x ** 10 - x ** 7 + 2 * x ** 3 - x + 7) + 4 * (x ** 3 - 2 * x ** 2 - 5)\nsimplify(p)"
  },
  {
    "example_id": 651,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import Symbol, solve, pprint\nx = Symbol('x')\ny = Symbol('y')\neqns = [x + y**2 - 4*y - 4, 0]\nsolve(eqns)\npprint(solve(eqns))"
  },
  {
    "example_id": 652,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = -4/5\nb = -2/3\n\nprint(6*b)"
  },
  {
    "example_id": 653,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(abs(-3+2*(-4)))"
  },
  {
    "example_id": 654,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# sum of two numbers is 12\n# product of two numbers is 35\n# positive difference between the numbers is 13\nprint(35 - 12)"
  },
  {
    "example_id": 655,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1050.0"
    ],
    "annotated_answers": [
      "1050.0"
    ],
    "solution": "total_calories = 150 * 7\nprint(total_calories)"
  },
  {
    "example_id": 656,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy as sp\n\nx, y = sp.symbols('x, y')\n\neq1 = 4*y - 4*x**2 - 1\neq2 = 4*x - 4*y**2 - 1\n\nsol = sp.solve((eq1, eq2), (x, y))\n\nprint(sp.N(1/(x**3 + y**3)))"
  },
  {
    "example_id": 657,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import sympy as sp\nj, k, l = sp.symbols('j k l')\neq1 = j*k*24\neq2 = j*l*48\neq3 = k*l*18\neqs = [eq1, eq2, eq3]\nsol = sp.solve(eqs)\nprint(sol)"
  },
  {
    "example_id": 658,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "from math import floor, ceil, sqrt, pi\n\ndef f(x):\n    if x % 1 == 0:\n        return abs(floor(x))\n    else:\n        return ceil(x) ** 2\n\nprint(f(sqrt(8)) + f(-pi) + f(sqrt(50)) + f(9/2))"
  },
  {
    "example_id": 659,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = -4\nb = 8\nprint(a + b)"
  },
  {
    "example_id": 660,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0",
      "7.0",
      "8.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "x = 1\nwhile x < 100:\n    if 3/x > 1/3 and 3/x < 3/4:\n        print(x)\n    x += 1"
  },
  {
    "example_id": 661,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "estimate = 11 / 24 * 480\nprint(estimate)"
  },
  {
    "example_id": 662,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "258.0",
      "257.0",
      "256.0",
      "255.0",
      "254.0",
      "253.0",
      "252.0",
      "251.0",
      "250.0",
      "249.0",
      "248.0",
      "247.0",
      "246.0",
      "245.0",
      "244.0",
      "243.0",
      "242.0",
      "241.0",
      "240.0",
      "239.0",
      "238.0",
      "237.0",
      "236.0",
      "235.0",
      "234.0",
      "233.0",
      "232.0",
      "231.0",
      "230.0",
      "229.0",
      "228.0",
      "227.0",
      "226.0",
      "225.0",
      "224.0",
      "223.0",
      "222.0",
      "221.0",
      "220.0",
      "219.0",
      "218.0",
      "217.0",
      "216.0",
      "215.0",
      "214.0",
      "213.0",
      "212.0",
      "211.0",
      "210.0",
      "209.0",
      "208.0",
      "207.0",
      "206.0",
      "205.0",
      "204.0",
      "203.0",
      "202.0",
      "201.0",
      "200.0",
      "199.0",
      "198.0",
      "197.0",
      "196.0",
      "195.0",
      "194.0",
      "193.0",
      "192.0",
      "191.0",
      "190.0",
      "189.0",
      "188.0",
      "187.0",
      "186.0",
      "185.0",
      "184.0",
      "183.0",
      "182.0",
      "181.0",
      "180.0",
      "179.0",
      "178.0",
      "177.0",
      "176.0",
      "175.0",
      "174.0",
      "173.0",
      "172.0",
      "171.0",
      "170.0",
      "169.0",
      "168.0",
      "167.0",
      "166.0",
      "165.0",
      "164.0",
      "163.0",
      "162.0",
      "161.0",
      "160.0",
      "159.0",
      "158.0",
      "157.0",
      "156.0",
      "155.0",
      "154.0",
      "153.0",
      "152.0",
      "151.0",
      "150.0",
      "149.0",
      "148.0",
      "147.0",
      "146.0",
      "145.0",
      "144.0",
      "143.0",
      "142.0",
      "141.0",
      "140.0",
      "139.0",
      "138.0",
      "137.0",
      "136.0",
      "135.0",
      "134.0",
      "133.0",
      "132.0",
      "131.0",
      "130.0",
      "129.0",
      "128.0",
      "127.0",
      "126.0",
      "125.0",
      "124.0",
      "123.0",
      "122.0",
      "121.0",
      "120.0",
      "119.0",
      "118.0",
      "117.0",
      "116.0",
      "115.0",
      "114.0",
      "113.0",
      "112.0",
      "111.0",
      "110.0",
      "109.0",
      "108.0",
      "107.0",
      "106.0",
      "105.0",
      "104.0",
      "103.0",
      "102.0",
      "101.0",
      "100.0",
      "99.0",
      "98.0",
      "97.0",
      "96.0",
      "95.0",
      "94.0",
      "93.0",
      "92.0",
      "91.0",
      "90.0",
      "89.0",
      "88.0",
      "87.0",
      "86.0",
      "85.0",
      "84.0",
      "83.0",
      "82.0",
      "81.0",
      "80.0",
      "79.0",
      "78.0",
      "77.0",
      "76.0",
      "75.0",
      "74.0",
      "73.0",
      "72.0",
      "71.0",
      "70.0",
      "69.0",
      "68.0",
      "67.0",
      "66.0",
      "65.0",
      "64.0",
      "63.0",
      "62.0",
      "61.0",
      "60.0",
      "59.0",
      "58.0",
      "57.0",
      "56.0",
      "55.0",
      "54.0",
      "53.0",
      "52.0",
      "51.0",
      "50.0",
      "49.0",
      "48.0",
      "47.0",
      "46.0",
      "45.0",
      "44.0",
      "43.0",
      "42.0",
      "41.0",
      "40.0",
      "39.0",
      "38.0",
      "37.0",
      "36.0",
      "35.0",
      "34.0",
      "33.0",
      "32.0",
      "31.0",
      "30.0",
      "29.0",
      "28.0",
      "27.0",
      "26.0",
      "25.0",
      "24.0",
      "23.0",
      "22.0",
      "21.0",
      "20.0",
      "19.0",
      "18.0",
      "17.0",
      "16.0",
      "15.0",
      "14.0",
      "13.0",
      "12.0",
      "11.0",
      "10.0",
      "9.0",
      "8.0",
      "7.0",
      "6.0",
      "5.0",
      "4.0",
      "3.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol, Add, factorial\ni = Symbol('i')\nsummation = Add(*[i**k for k in range(259)])\nprint(summation)"
  },
  {
    "example_id": 663,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    return 10 - x\n\ndef f_inverse(y):\n    return 10 - y\n\nprint(f_inverse(f(10)))"
  },
  {
    "example_id": 664,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = -2\nf_x = x**2 - 3\nt_x = 9 + 2*f_x\nprint(t_x)"
  },
  {
    "example_id": 665,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "-3402.0",
      "6.0",
      "321441.0",
      "1.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-3402.0",
      "6.0",
      "321441.0",
      "1.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "-4.0",
      "-3402.0",
      "6.0",
      "321441.0",
      "1.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-3402.0",
      "6.0",
      "321441.0",
      "1.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "-3402.0",
      "6.0",
      "321441.0",
      "1.0",
      "3.0",
      "3.0",
      "4.0",
      "-3402.0",
      "6.0",
      "321441.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nexpr = sympy.sqrt(x**3 - 4*x + 4)\nsol = sympy.solve(expr - 16, x)\nprint(sol)"
  },
  {
    "example_id": 666,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "15.0",
      "17.0",
      "14.0",
      "13.0",
      "13.0",
      "12.0",
      "13.0",
      "15.0",
      "11.0",
      "10.0",
      "9.0",
      "10.0",
      "8.0",
      "10.0",
      "7.0",
      "10.0",
      "6.0",
      "10.0",
      "5.0",
      "5.0",
      "4.0",
      "5.0",
      "5.0",
      "3.0",
      "5.0",
      "2.0",
      "1.0",
      "8.0",
      "7.0",
      "6.0",
      "5.0",
      "4.0",
      "3.0",
      "2.0",
      "1.0",
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "1.0",
      "2.0",
      "5.0",
      "3.0",
      "5.0",
      "5.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef distance(x, y):\n    return math.sqrt((x - 5) ** 2 + (y + 2) ** 2)\n\ndef is_integer(x):\n    return int(x) == x\n\ndef is_shortest_distance(x, y):\n    return is_integer(distance(x, y))\n\nfor x in range(-10, 10):\n    for y in range(-10, 10):\n        if is_shortest_distance(x, y):\n            print(distance(x, y))"
  },
  {
    "example_id": 667,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x_meet = (3 + (-6)) / 2\nx_should = (3 + (-10)) / 2\nprint(abs(x_meet - x_should))"
  },
  {
    "example_id": 668,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def quadratic(x):\n    return x**2 - 6*x + 13\n\ndef min_val(f):\n    return f(0)\n\nmin_y = min_val(quadratic)\nprint(min_y)"
  },
  {
    "example_id": 669,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "print(19**2 + 2*19 + 1)"
  },
  {
    "example_id": 670,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 14 - m\nm = 1 - n\nprint(n - m)"
  },
  {
    "example_id": 671,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0",
      "4.0",
      "8.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import symbols\n\nx, y = symbols('x y')\nf = x**2 + 8*x + y**2 - 6*y\nsol = solve(f, x)\nprint(sol)"
  },
  {
    "example_id": 672,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "324.0"
    ],
    "solution": "a = 0\nwhile True:\n    a += 1\n    b = a + 1\n    if (b**2 - a**2) == 35:\n        print(max(a, b))\n        break"
  },
  {
    "example_id": 673,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "import sympy\np = sympy.sympify('2-x**2')\nq = sympy.sympify('6/x')\np(q(2))"
  },
  {
    "example_id": 674,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 1\nr = 10\nn = 5\nk = 5\n\ndigits = 1\nwhile digits < k:\n    digits += 1\n    a *= r\n    n += 1\n\nprint(n)"
  },
  {
    "example_id": 675,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# compute x-intercepts\nx1 = -2\nx2 = 0\n\n# compute y-intercepts\ny1 = x1**2 + 4*x1 + 6\ny2 = (1/2)*x2**2 + x2 + 6\n\n# compute difference\nprint(x2-x1)"
  },
  {
    "example_id": 676,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def f(x):\n    if x == 1:\n        return 2\n    elif x == 4:\n        return 3\n    elif x == 7:\n        return 4\n    else:\n        raise ValueError\n\ndef f_inverse(x):\n    if x == 2:\n        return 1\n    elif x == 3:\n        return 4\n    elif x == 4:\n        return 7\n    else:\n        raise ValueError\n\nprint(f_inverse(f_inverse(3)))"
  },
  {
    "example_id": 677,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "from math import sqrt\nsum = 0\nfor i in range(1, 20):\n    sum += int(sqrt(i))\nprint(sum)"
  },
  {
    "example_id": 678,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "from sympy import sqrt\n\na = 1\nb = 1\nwhile True:\n    x = sqrt(a)/b\n    if x.is_integer:\n        break\n    a += 1\n\nprint(a+b)"
  },
  {
    "example_id": 679,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.4"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "correct_answers = 232 / 5\nprint(correct_answers)"
  },
  {
    "example_id": 680,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "a = 5 - 1\nb = 1 - 5\nh = lambda x: a*x + b\nprint(h(6))"
  },
  {
    "example_id": 681,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "x = 3\ny = 4\nprint(2 * x ** 2 + 2 * y ** 2)"
  },
  {
    "example_id": 682,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.25"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "laps = 10 * 250 / 400\nprint(laps)"
  },
  {
    "example_id": 683,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "import sympy\nx, y, z = sympy.symbols('x, y, z')\n\n# find the sum of the cubes\ncube_sum = x**3 + y**3 + z**3\n\n# find the product of the three numbers\nproduct = x*y*z\n\n# find the sum of the numbers\nsum_of_numbers = x + y + z\n\n# find the difference between the product and sum of the cubes\ndiff = product - cube_sum\n\n# solve for the sum of the cubes\ncube_sum = diff / (sum_of_numbers - 3)\n\nprint(cube_sum)"
  },
  {
    "example_id": 684,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "15.0",
      "4.0",
      "2.0",
      "15.0"
    ],
    "annotated_answers": [
      "-22.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\na, b = sympy.solve(2*x**2 - 10*x + 5, x)\nprint((2*a - 3)*(4*b - 6))"
  },
  {
    "example_id": 685,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import sqrt\n\ndef f(x):\n    return sqrt(3*x) + 2\n\nprint(f(0) + f(3))"
  },
  {
    "example_id": 686,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "x = 5\nnumerator = x ** 1 * x ** 2 * x ** 3 * x ** 4 * x ** 5 * x ** 6 * x ** 7 * x ** 8 * x ** 9\ndenominator = x ** 2 * x ** 4 * x ** 6 * x ** 8 * x ** 10 * x ** 12\nprint(numerator / denominator)"
  },
  {
    "example_id": 687,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "print(f(g(x)))"
  },
  {
    "example_id": 688,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "98.0"
    ],
    "solution": "a, b, c = 1, 1, 1\nroot = (a**(1/3) + b**(1/3) + 1) / c\nprint(root)"
  },
  {
    "example_id": 689,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.244897959183673"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "z = 24\nx = 25\ny = (z * x) / (z + x)\nprint(y)"
  },
  {
    "example_id": 690,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 115 // 3\ny = (115 - 3*x) // 2\nprint(x + y)"
  },
  {
    "example_id": 691,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "10.0",
      "16.0",
      "17.0"
    ],
    "annotated_answers": [
      "4624.0"
    ],
    "solution": "from math import sqrt\n\ndef is_perfect_square(n):\n    return int(sqrt(n)) ** 2 == n\n\ndef find_perfect_squares(n):\n    for i in range(1, int(sqrt(n)) + 1):\n        if is_perfect_square(i * i + (i + 1) * (i + 1)):\n            yield i * i\n            yield (i + 1) * (i + 1)\n\ndef find_larger_perfect_square(n):\n    for square in find_perfect_squares(n):\n        yield square\n        yield square + 1\n\nfor square in find_larger_perfect_square(268):\n    print(square)"
  },
  {
    "example_id": 692,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "first_term = 8 - 2\nprint(first_term)"
  },
  {
    "example_id": 693,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "from math import sqrt\n\ndef distance(p1, p2):\n    return sqrt( (p1[0]-p2[0])**2 + (p1[1]-p2[1])**2 )\n\ndef perimeter(p1, p2, p3):\n    return distance(p1, p2) + distance(p2, p3) + distance(p3, p1)\n\nA = (-6,6)\nB = (9,6)\nC = (9,-2)\n\nperimeter_ABC = perimeter(A, B, C)\nprint(perimeter_ABC)"
  },
  {
    "example_id": 694,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "13.0",
      "2.0",
      "3.0",
      "2.0",
      "13.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nsol1 = solve(x*(x-3) - 1, x)\nsol2 = solve(x*(x-3) + 1, x)\na = sol1[0]\nb = sol2[0]\nc = sol1[1]\nabc = a*b*c\nprint(abc)"
  },
  {
    "example_id": 695,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a = 1\nb = -8\nc = 49\nab = a * b\nprint(ab)"
  },
  {
    "example_id": 696,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "A, B, C = 3, 1, 5\nAC_squared = A*C**2 - B\nprint(AC_squared)"
  },
  {
    "example_id": 697,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(max(6, 5, 2))"
  },
  {
    "example_id": 698,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "total_in_column_E = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20\nprint(total_in_column_E)"
  },
  {
    "example_id": 699,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import ceil, floor, sqrt\n\nprint(ceil(sqrt(27)) - floor(sqrt(26)))"
  },
  {
    "example_id": 700,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\n\n# Vertex\nx_vertex = 2\ny_vertex = 3\n\n# Point (4,4)\nx_point = 4\ny_point = 4\n\n# Point (6,?)\nx_6 = 6\ny_6 = a * x_6**2 + b * x_6 + c\n\n# Equation of the line through the vertex\n# y - y_vertex = m * (x - x_vertex)\nm = (y_point - y_vertex) / (x_point - x_vertex)\n\n# Solve for y\ny_6 = m * (x_6 - x_vertex) + y_vertex\n\n# Print result\nprint(y_6)"
  },
  {
    "example_id": 701,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "f = lambda x: (x**2 + 2*x + 3)/x\ng = lambda x: x**3 + 2\nprint(g(f(-3)))"
  },
  {
    "example_id": 702,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.8"
    ],
    "annotated_answers": [
      "96.8"
    ],
    "solution": "feet_per_second = 88 * 66 / 60\nprint(feet_per_second)"
  },
  {
    "example_id": 703,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "distance = 9 * 12\nprint(distance)"
  },
  {
    "example_id": 704,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = 2 * x - 13\neq2 = 3 * x + y - 92\nsol = sympy.solve(eq2, x)\nprint(sol)"
  },
  {
    "example_id": 705,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "3.0",
      "2010.0",
      "1.0",
      "3.0",
      "3.0",
      "-1.0",
      "2010.0",
      "1.0",
      "3.0",
      "2.0",
      "-1.0",
      "2010.0",
      "1.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "2010.0"
    ],
    "solution": "from sympy import sympify, solve, Eq\nx = sympify('x')\nf = sympify('x**3 + 3*x**2 + 3*x + 1')\n\nx_val = solve(Eq(f, 2010))\nf_inv = f.subs(x, x_val[0])\nprint(f_inv)"
  },
  {
    "example_id": 706,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "new_pressure = 4 / 3.67 * 1.835\nprint(new_pressure)"
  },
  {
    "example_id": 707,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "7.0",
      "65.0",
      "7.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sp\nx, y = sp.symbols('x, y')\nK = sp.solve(sp.Eq(3*x - 7*y, 65), y)[0]\nprint(K)"
  },
  {
    "example_id": 708,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "x = 1\nprint(x)"
  },
  {
    "example_id": 709,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "12.0",
      "30.0",
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "-40.0"
    ],
    "solution": "import sympy\n\na = sympy.symbols('a')\nx, y = sympy.symbols('x, y')\n\neq1 = 2*x + 5*y + (-8)\neq2 = 6*x + (16 + a - 15*y)\n\nsol = sympy.solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 710,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "degrees_in_one_hour = 360 / 24\nprint(degrees_in_one_hour)"
  },
  {
    "example_id": 711,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "smallest = (49 - 7) // 2\nprint(smallest)"
  },
  {
    "example_id": 712,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.066939702021237"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(2 ** 3 ** (4 / 3))"
  },
  {
    "example_id": 713,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 714,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "reciprocal = 1 / 2\nprint(reciprocal - 1)"
  },
  {
    "example_id": 715,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "number_of_tours_per_day = 24 / 20\nprint(number_of_tours_per_day)"
  },
  {
    "example_id": 716,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "first_term = 2\nthird_term = 25 - 2\nfourth_term = first_term + third_term\nprint(fourth_term)"
  },
  {
    "example_id": 717,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x = 243 / 81\ny = 81 / 3\nprint(x + y)"
  },
  {
    "example_id": 718,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "import sympy\n\n# Point A\na = sympy.symbols('a')\nx_a = sympy.Symbol('x_a')\ny_a = 3 * x_a**2 - 5 * x_a - 3\n\n# Point B\nb = sympy.symbols('b')\nx_b = sympy.Symbol('x_b')\ny_b = 3 * x_b**2 - 5 * x_b - 3\n\n# Midpoint\nmidpoint = (a + b) / 2\n\n# Length of AB\nlength = sympy.sqrt((x_a - x_b)**2 + (y_a - y_b)**2)\n\n# Square of length of AB\nsquare_length = length**2\n\nprint(square_length)"
  },
  {
    "example_id": 719,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "flecks_in_flick = 8\nflecks_in_flock = 6\n\nflicks_in_12 = 12\n\nflocks_in_12 = flicks_in_12 / flecks_in_flick * flecks_in_flock\n\nprint(flocks_in_12)"
  },
  {
    "example_id": 720,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = sympy.log(x**2 - 1, 3**2)\nsolutions = sympy.solve(expression, x)\nprint(solutions)"
  },
  {
    "example_id": 721,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\na = sympy.symbols('a')\nf_1 = x**2 + a\nf_2 = a*x\nsol = sympy.solve(f_1-f_2)\nprint(sol)"
  },
  {
    "example_id": 722,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "A, B = 10, 3\nprint(A*B + B)"
  },
  {
    "example_id": 723,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "y = 12 - 6\nprint(y)"
  },
  {
    "example_id": 724,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# floor function\nfrom math import floor\n\nr = 15.5 - floor(15.5)\nprint(r)"
  },
  {
    "example_id": 725,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.95"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x_coord = 9 * 0.33\ny_coord = 6 * 0.33\nprint(x_coord + y_coord)"
  },
  {
    "example_id": 726,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(int(36/7))"
  },
  {
    "example_id": 727,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.6"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "r = (2*4 - 19 - 7) / (2 - 7)\nprint(r)"
  },
  {
    "example_id": 728,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import numpy as np\n\n# Calculate the slope\nslope = (10 - 5) / (1 - 0)\n\n# Calculate the intercept\nintercept = 5 - slope * 0\n\n# Calculate a+b+c\nsum = slope + intercept\n\n# Print the answer\nprint(sum)"
  },
  {
    "example_id": 729,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nD = Symbol('D')\nE = Symbol('E')\nF = Symbol('F')\n\nx = Symbol('x')\ny = Symbol('y')\n\n# The equation of the smaller circle\neq = x**2 + y**2 + D*x + E*y + F\n\n# The equation of the larger circle\nlarger_circle = x**2 + y**2 - 25\n\n# The equation of the tangent line\ntangent_line = x - 3 + y - 2\n\n# Solve for D, E, and F\nsolutions = solve([eq, larger_circle, tangent_line], [D, E, F])\n\n# Print the solution\nprint(solutions)"
  },
  {
    "example_id": 730,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "f = lambda x: x + 1\ng = lambda x: 2 * x\n\nf_inv = lambda y: y - 1\ng_inv = lambda y: y / 2\n\nprint(f(g_inv(f_inv(f_inv(g(f(5)))))))"
  },
  {
    "example_id": 731,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "f = lambda x: x**3 - 8\nf_inv = lambda y: (y + 8)**(1/3)\nf_inv_of_f_inv_of_19 = f_inv(19)\nprint(f(f_inv_of_f_inv_of_19))"
  },
  {
    "example_id": 732,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 3\ns = n**2 - 2**n + 1\nt = 2*s - s**2\nprint(t)"
  },
  {
    "example_id": 733,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.666666666666666"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "unit_j = 16 / 21\nj_14 = unit_j * 14\nprint(j_14)"
  },
  {
    "example_id": 734,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "9.0",
      "-5.0",
      "3.0",
      "2.0",
      "2.0",
      "8.0",
      "985.0",
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\nf = sympy.Piecewise((x**2 + 9, x < -5), (3*x - 8, x >= -5))\n\nprint(sympy.integrate(f, x))"
  },
  {
    "example_id": 735,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "distinct_sequences = 0\nfor i in range(1, 91):\n    if i % 2 == 0:\n        distinct_sequences += 1\nprint(distinct_sequences)"
  },
  {
    "example_id": 736,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "bride_age = 51 - 15\ngroom_age = bride_age + 15\nprint(groom_age)"
  },
  {
    "example_id": 737,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.66666666666667"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "slope = (365-3)/(4-1)\nprint(slope)"
  },
  {
    "example_id": 738,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\ndef number_of_polynomials(m, n):\n    count = 0\n    for i in range(1, math.floor(math.sqrt(n)) + 1):\n        if (m - i) % 2 == 0:\n            count += 1\n    return count\n\ncount = number_of_polynomials(28, 28)\nprint(count)"
  },
  {
    "example_id": 739,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "f = lambda x: 3*x + 1\nx, y = 4, f(4)\nprint(x + y)"
  },
  {
    "example_id": 740,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "min_y = -7\nprint(min_y)"
  },
  {
    "example_id": 741,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f = lambda x: 5*x+3\ng = lambda x: x**2 - 2\nprint(g(f(-1)))"
  },
  {
    "example_id": 742,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "num_8th_grade_reps = 18 / 2\nprint(num_8th_grade_reps)"
  },
  {
    "example_id": 743,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.155333733639903",
      "5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import log\nprint(log(5, 1/625))"
  },
  {
    "example_id": 744,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef greatest_prime_factor(n):\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\ns = sum(range(1, 81))\nprint(greatest_prime_factor(s))"
  },
  {
    "example_id": 745,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(((7+8+9) / (2+3+4)) * ((6+9+12) / (9+8+7)))"
  },
  {
    "example_id": 746,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Total number of calories in snack = 10 * 12 = 120\n# Total number of calories in cookies = 20\nnum_cookies = 120 / 20\nprint(num_cookies)"
  },
  {
    "example_id": 747,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "147.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "side = int(52 ** 0.5)\nvolume = side * side * 3\nprint(volume)"
  },
  {
    "example_id": 748,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0",
      "22.0",
      "24.0",
      "26.0",
      "28.0",
      "30.0",
      "32.0",
      "34.0",
      "36.0",
      "38.0",
      "40.0",
      "42.0",
      "44.0",
      "46.0",
      "48.0",
      "50.0",
      "52.0",
      "54.0",
      "56.0",
      "58.0",
      "60.0",
      "62.0",
      "64.0",
      "66.0",
      "68.0",
      "70.0",
      "72.0",
      "74.0",
      "76.0",
      "78.0",
      "80.0",
      "82.0",
      "84.0",
      "86.0",
      "88.0",
      "90.0",
      "92.0",
      "94.0",
      "96.0",
      "98.0",
      "100.0",
      "102.0",
      "104.0",
      "106.0",
      "108.0",
      "110.0",
      "112.0",
      "114.0",
      "116.0",
      "118.0",
      "120.0",
      "122.0",
      "124.0",
      "126.0",
      "128.0",
      "130.0",
      "132.0",
      "134.0",
      "136.0",
      "138.0",
      "140.0",
      "142.0",
      "144.0",
      "146.0",
      "148.0",
      "150.0",
      "152.0",
      "154.0",
      "156.0",
      "158.0",
      "160.0",
      "162.0",
      "164.0",
      "166.0",
      "168.0",
      "170.0",
      "172.0",
      "174.0",
      "176.0",
      "178.0",
      "180.0",
      "182.0",
      "184.0",
      "186.0",
      "188.0",
      "190.0",
      "192.0",
      "194.0",
      "196.0",
      "198.0",
      "200.0",
      "202.0",
      "204.0",
      "206.0",
      "208.0",
      "210.0",
      "212.0",
      "214.0",
      "216.0",
      "218.0",
      "220.0",
      "222.0",
      "224.0",
      "226.0",
      "228.0",
      "230.0",
      "232.0",
      "234.0",
      "236.0",
      "238.0",
      "240.0",
      "242.0",
      "244.0",
      "246.0",
      "248.0",
      "250.0",
      "252.0",
      "254.0",
      "256.0",
      "258.0",
      "260.0",
      "262.0",
      "264.0",
      "266.0",
      "268.0",
      "270.0",
      "272.0",
      "274.0",
      "276.0",
      "278.0",
      "280.0",
      "282.0",
      "284.0",
      "286.0",
      "288.0",
      "290.0",
      "292.0",
      "294.0",
      "296.0",
      "298.0",
      "300.0",
      "302.0",
      "304.0",
      "306.0",
      "308.0",
      "310.0",
      "312.0",
      "314.0",
      "316.0",
      "318.0",
      "320.0",
      "322.0",
      "324.0",
      "326.0",
      "328.0",
      "330.0",
      "332.0",
      "334.0",
      "336.0",
      "338.0",
      "340.0",
      "342.0",
      "344.0",
      "346.0",
      "348.0",
      "350.0",
      "352.0",
      "354.0",
      "356.0",
      "358.0",
      "360.0",
      "362.0",
      "364.0",
      "366.0",
      "368.0",
      "370.0",
      "372.0",
      "374.0",
      "376.0",
      "378.0",
      "380.0",
      "382.0",
      "384.0",
      "386.0",
      "388.0",
      "390.0",
      "392.0",
      "394.0",
      "396.0",
      "398.0",
      "400.0",
      "402.0",
      "404.0",
      "406.0",
      "408.0",
      "410.0",
      "412.0",
      "414.0",
      "416.0",
      "418.0",
      "420.0",
      "422.0",
      "424.0",
      "426.0",
      "428.0",
      "430.0",
      "432.0",
      "434.0",
      "436.0",
      "438.0",
      "440.0",
      "442.0",
      "444.0",
      "446.0",
      "448.0",
      "450.0",
      "452.0",
      "454.0",
      "456.0",
      "458.0",
      "460.0",
      "462.0",
      "464.0",
      "466.0",
      "468.0",
      "470.0",
      "472.0",
      "474.0",
      "476.0",
      "478.0",
      "480.0",
      "482.0",
      "484.0",
      "486.0",
      "488.0",
      "490.0",
      "492.0",
      "494.0",
      "496.0",
      "498.0",
      "500.0",
      "502.0",
      "504.0",
      "506.0",
      "508.0",
      "510.0",
      "512.0",
      "514.0",
      "516.0",
      "518.0",
      "520.0",
      "522.0",
      "524.0",
      "526.0",
      "528.0",
      "530.0",
      "532.0",
      "534.0",
      "536.0",
      "538.0",
      "540.0",
      "542.0",
      "544.0",
      "546.0",
      "548.0",
      "550.0",
      "552.0",
      "554.0",
      "556.0",
      "558.0",
      "560.0",
      "562.0",
      "564.0",
      "566.0",
      "568.0",
      "570.0",
      "572.0",
      "574.0",
      "576.0",
      "578.0",
      "580.0",
      "582.0",
      "584.0",
      "586.0",
      "588.0",
      "590.0",
      "592.0",
      "594.0",
      "596.0",
      "598.0",
      "600.0",
      "602.0",
      "604.0",
      "606.0",
      "608.0",
      "610.0",
      "612.0",
      "614.0",
      "616.0",
      "618.0",
      "620.0",
      "622.0",
      "624.0",
      "626.0",
      "628.0",
      "630.0",
      "632.0",
      "634.0",
      "636.0",
      "638.0",
      "640.0",
      "642.0",
      "644.0",
      "646.0",
      "648.0",
      "650.0",
      "652.0",
      "654.0",
      "656.0",
      "658.0",
      "660.0",
      "662.0",
      "664.0",
      "666.0",
      "668.0",
      "670.0",
      "672.0",
      "674.0",
      "676.0",
      "678.0",
      "680.0",
      "682.0",
      "684.0",
      "686.0",
      "688.0",
      "690.0",
      "692.0",
      "694.0",
      "696.0",
      "698.0",
      "700.0",
      "702.0",
      "704.0",
      "706.0",
      "708.0",
      "710.0",
      "712.0",
      "714.0",
      "716.0",
      "718.0",
      "720.0",
      "722.0",
      "724.0",
      "726.0",
      "728.0",
      "730.0",
      "732.0",
      "734.0",
      "736.0",
      "738.0",
      "740.0",
      "742.0",
      "744.0",
      "746.0",
      "748.0",
      "750.0",
      "752.0",
      "754.0",
      "756.0",
      "758.0",
      "760.0",
      "762.0",
      "764.0",
      "766.0",
      "768.0",
      "770.0",
      "772.0",
      "774.0",
      "776.0",
      "778.0",
      "780.0",
      "782.0",
      "784.0",
      "786.0",
      "788.0",
      "790.0",
      "792.0",
      "794.0",
      "796.0",
      "798.0",
      "800.0",
      "802.0",
      "804.0",
      "806.0",
      "808.0",
      "810.0",
      "812.0",
      "814.0",
      "816.0",
      "818.0",
      "820.0",
      "822.0",
      "824.0",
      "826.0",
      "828.0",
      "830.0",
      "832.0",
      "834.0",
      "836.0",
      "838.0",
      "840.0",
      "842.0",
      "844.0",
      "846.0",
      "848.0",
      "850.0",
      "852.0",
      "854.0",
      "856.0",
      "858.0",
      "860.0",
      "862.0",
      "864.0",
      "866.0",
      "868.0",
      "870.0",
      "872.0",
      "874.0",
      "876.0",
      "878.0",
      "880.0",
      "882.0",
      "884.0",
      "886.0",
      "888.0",
      "890.0",
      "892.0",
      "894.0",
      "896.0",
      "898.0",
      "900.0",
      "902.0",
      "904.0",
      "906.0",
      "908.0",
      "910.0",
      "912.0",
      "914.0",
      "916.0",
      "918.0",
      "920.0",
      "922.0",
      "924.0",
      "926.0",
      "928.0",
      "930.0",
      "932.0",
      "934.0",
      "936.0",
      "938.0",
      "940.0",
      "942.0",
      "944.0",
      "946.0",
      "948.0",
      "950.0",
      "952.0",
      "954.0",
      "956.0",
      "958.0",
      "960.0",
      "962.0",
      "964.0",
      "966.0",
      "968.0",
      "970.0",
      "972.0",
      "974.0",
      "976.0",
      "978.0",
      "980.0",
      "982.0",
      "984.0",
      "986.0",
      "988.0",
      "990.0",
      "992.0",
      "994.0",
      "996.0",
      "998.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "for x in range(1, 1000):\n    if (x**2 - 16) % 2 == 0:\n        print(x)"
  },
  {
    "example_id": 749,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "A = 6\nB = 10\nC = B + 3\nprint(C)"
  },
  {
    "example_id": 750,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sym\n\nx = sym.symbols('x')\neq = 3**(x+8) - 9**(x+3)\nsol = sym.solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 751,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "print(((7+5)**2)-((7-5)**2))"
  },
  {
    "example_id": 752,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "def mult(a, b):\n    return 9*a+2*b-a*b+5\n\nprint(mult(5, 1))"
  },
  {
    "example_id": 753,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import sympy as sp\nx, y, z = sp.symbols(\"x y z\")\na = (sp.log(x) - sp.log(y)) - (sp.log(y) - sp.log(z)) + (sp.log(z) - sp.log(x))\nprint(a)"
  },
  {
    "example_id": 754,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve, symbols\nx = symbols('x')\nf = x ** 2 - 8 * x + 15\nv = solve(f, x)[0]\nprint(v)"
  },
  {
    "example_id": 755,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "import math\nprint(math.sqrt(1000000) - math.pow(1000000, 1/3))"
  },
  {
    "example_id": 756,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6123724356957946"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "x = 24\ny = 15\nx = 3 / (x ** 0.5)\nprint(x)"
  },
  {
    "example_id": 757,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-6.625230685529241",
      "152.0",
      "-1.656",
      "152.0",
      "46.0",
      "4.0",
      "0.0",
      "2.741",
      "307.0",
      "7014.0",
      "3507.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def revenue(p):\n    return 128 - 4*p\n\ndef maximize_revenue(p):\n    return -revenue(p)\n\nfrom scipy.optimize import minimize\n\nresult = minimize(maximize_revenue, [0])\n\nprint(result)"
  },
  {
    "example_id": 758,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "0.0",
      "3.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import Symbol, solve, Eq, Add\n\nx = Symbol('x')\n\nf = Eq(x, Add(3, -x))\n\nf_inv_0 = solve(f, x, 0)[0]\nf_inv_6 = solve(f, x, 6)[0]\n\nprint(f_inv_0 + f_inv_6)"
  },
  {
    "example_id": 759,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "def f(x):\n    return 2*x + 1\n\ndef g(x):\n    return f(2*x) - 3\n\nprint(g(g(2)))"
  },
  {
    "example_id": 760,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\ny = 2\nx2y = x**2 * y\nprint(x2y)"
  },
  {
    "example_id": 761,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import sympy\nexpr = sympy.symbols('3-i') * sympy.symbols('6+2i')\nprint(expr)"
  },
  {
    "example_id": 762,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x1 = 3\nx2 = -2\nprint(x1 * x2)"
  },
  {
    "example_id": 763,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "max_f_inv = 6\nprint(max_f_inv)"
  },
  {
    "example_id": 764,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Compute the sum of Alex, Bob, and Danielle's ages\nsum_ages = 12 + 13 + 10\n\n# Compute the sum of Alex and Bob's ages\nsum_ages_ab = 12 + 13\n\n# Compute the difference in ages of Danielle and Alex\ndiff_ages = 10 - 12\n\n# Compute Camille's age\ncamille_age = (sum_ages - sum_ages_ab) // diff_ages\n\n# Print Camille's age\nprint(camille_age)"
  },
  {
    "example_id": 765,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "A = 1 + 1\nB = 1 - 1\nprint(A - B)"
  },
  {
    "example_id": 766,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "print(7*10*(21/30))"
  },
  {
    "example_id": 767,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "99940009.0"
    ],
    "annotated_answers": [
      "99940009.0"
    ],
    "solution": "print(9997**2)"
  },
  {
    "example_id": 768,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2107.0"
    ],
    "annotated_answers": [
      "2107.0"
    ],
    "solution": "sum = 0\nfor i in range(100, 200):\n    if i % 7 == 0:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 769,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "36.0",
      "36.0",
      "6.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "from sympy import solve, Eq, Symbol\n\nk = Symbol('k')\nx = Symbol('x')\n\neq = Eq(x**2 - 12*x + k, 0)\nsol = solve(eq, x)\n\n# x is a list of solutions\nprint(sol[0])\nprint(sol[1])"
  },
  {
    "example_id": 770,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "first_term = 7\ncommon_difference = -210 / 15\nprint(common_difference)"
  },
  {
    "example_id": 771,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "7.0",
      "6.0",
      "21.0",
      "5.0",
      "35.0",
      "4.0",
      "32.0",
      "3.0",
      "12.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "106.0"
    ],
    "solution": "from sympy import Symbol, expand, collect\nx = Symbol('x')\nf = x**7 - 3*x**3 + 2\ng = expand(f.subs(x, x + 1))\nprint(collect(g, x))"
  },
  {
    "example_id": 772,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "from sympy import sympify\nfrom sympy.abc import x\n\nf = sympify('2^x')\nresult = sympify('sqrt(f(f(f(f(1)))))')\nprint(result)"
  },
  {
    "example_id": 773,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "x = 9\nprint(x)"
  },
  {
    "example_id": 774,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def star(k, l):\n    return (k + l) * (k - l)\n\nprint(star(6, 5))"
  },
  {
    "example_id": 775,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(int(round(7/4)))"
  },
  {
    "example_id": 776,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0",
      "26.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# x + y + z = -4 + 54\n# x + y + z = 50\n\n# 6x + 5y - 2z = -4\n# 6x + 5y = 2\n# 6x + 5y + 12z = 54\n# 6x + 5y + 2 = 56\n# x + y + 2 = 54\n# x + y = 52\n\nx = 52 / 2\ny = 52 - x\n\nprint(x, y)"
  },
  {
    "example_id": 777,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0",
      "140.0",
      "5.0",
      "-5.0",
      "5.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1736.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\nsolutions = sympy.solve([y-x**2+8, y**2+5*x-44], [x, y])\nproduct = 1\nfor solution in solutions:\n    product *= solution[1]\nprint(product)"
  },
  {
    "example_id": 778,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nsolutions = solve(9*x/13 + 13/9*x - 250/117*x, x)\nprint(sum(solutions))"
  },
  {
    "example_id": 779,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def distance(x):\n    return abs(x - 2)\n\ndef is_int(x):\n    return x == int(x)\n\ndef solution_set(distance):\n    return [x for x in range(100) if distance(x) <= 5.6 and is_int(x)]\n\nprint(solution_set(distance))"
  },
  {
    "example_id": 780,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "313698.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n_list = list(range(1, 100))\nn_list_2 = [n**2 - 3*n + 2 for n in n_list]\nprint(sum(n_list_2))"
  },
  {
    "example_id": 781,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "181.0"
    ],
    "annotated_answers": [
      "181.0"
    ],
    "solution": "print(3*7*7+5*7-1)"
  },
  {
    "example_id": 782,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(2)"
  },
  {
    "example_id": 783,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "b = -4\nprint(b)"
  },
  {
    "example_id": 784,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9901.0"
    ],
    "annotated_answers": [
      "9901.0"
    ],
    "solution": "print(99**2 + 99 + 1)"
  },
  {
    "example_id": 785,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def x(x):\n    return 1 + x / (1 + x / (1 + x / (1 + x)))\n\nx(1)"
  },
  {
    "example_id": 786,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3721.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def sum_of_first_n_positive_odd_numbers(n):\n    return sum([i for i in range(1, n+1, 2)])\n\nn = sum_of_first_n_positive_odd_numbers(121)\nprint(n)"
  },
  {
    "example_id": 787,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "x = 3\ny = 2\nx3 = x**3\ny3 = y**3\nprint(x3-y3)"
  },
  {
    "example_id": 788,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "168.99999999999991"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "print((13 ** (1/3)) ** 6)"
  },
  {
    "example_id": 789,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "A = 19 - 2 - 4\nprint(A)"
  },
  {
    "example_id": 790,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "280.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "sum_of_ints = 22\nnew_ints = [x + 2 for x in range(4)]\nnew_ints = [x * 20 for x in new_ints]\nprint(sum(new_ints))"
  },
  {
    "example_id": 791,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return ax + b\n\ndef f_inverse(x):\n    return x / a\n\ndef g(x):\n    return 2 * f_inverse(x)\n\na = 3\nb = 2\n\nprint((a + b) / 2)"
  },
  {
    "example_id": 792,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "156.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "num_red_in_pile_B = 26 * 6\nprint(num_red_in_pile_B)"
  },
  {
    "example_id": 793,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.7333333333333334"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7 / 3\ny = 7 / 5\nprint(x + y)"
  },
  {
    "example_id": 794,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx = sympy.symbols(\"x\")\npolynomial1 = sympy.Poly(x**2 + 4*x + 5, x)\npolynomial2 = sympy.Poly(x**2 - 3*x + 1, x)\nratio = sympy.cancel(polynomial1.discriminant()/polynomial2.discriminant())\nprint(polynomial1.all_coeffs()[0] + polynomial2.all_coeffs()[0])"
  },
  {
    "example_id": 795,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.00000000000003"
    ],
    "annotated_answers": [
      "369.0"
    ],
    "solution": "diagonal = 180**0.5\nprint(diagonal**2)"
  },
  {
    "example_id": 796,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "def profit(t):\n    if t <= 60:\n        return 70 * t\n    else:\n        return 70 * 60 + (t - 60) * 69\n\nlargest_t = 0\nwhile profit(largest_t) < 4200:\n    largest_t += 1\nprint(largest_t)"
  },
  {
    "example_id": 797,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "sum_of_subsets = 0\nfor i in range(1, 7):\n    for j in range(i+1, 7):\n        sum_of_subsets += sum([i, j])\nprint(sum_of_subsets)"
  },
  {
    "example_id": 798,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "343.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "x = 7 ** 3\nprint(x)"
  },
  {
    "example_id": 799,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-10.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def f(x):\n    return 3*x - 5\n\np = (2, f(2))\nq = (-p[0], f(-p[0]))\nprint(p[0] + q[0], p[1] + q[1])"
  },
  {
    "example_id": 800,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\nf = lambda x: x**2 - 2*x + 1\ng = lambda x: math.sqrt(2*x+1)\nprint(f(g(4)) - g(f(3)))"
  },
  {
    "example_id": 801,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.09090909090909091"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n = (2*3 - 5)/(2*3 + 5)\nprint(n)"
  },
  {
    "example_id": 802,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-0.25"
    ],
    "solution": "from sympy import Symbol, solve\na = Symbol('a')\nb = Symbol('b')\nx = Symbol('x')\neq = x**2 + 2*b*x + (a-b)\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 803,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "x = 5\ny = 7\nmy_num = x * y\nmy_num -= 4\nmy_num *= 2\nprint(my_num - 1)"
  },
  {
    "example_id": 804,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "sum_y = 9 + 2\nprint(sum_y)"
  },
  {
    "example_id": 805,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.5"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "def bounce_height(n):\n    return 16 / (2 ** n)\n\ndef bounce_distance(n):\n    return sum(bounce_height(k) for k in range(n + 1))\n\nprint(bounce_distance(5))"
  },
  {
    "example_id": 806,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "more_apples = 3 * 20 - 20\nprint(more_apples)"
  },
  {
    "example_id": 807,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "225.0",
      "15.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = 5\nb = 3\na2b = a * b\nab2 = a2b ** 2\nprint(ab2)\nprint(a2b)"
  },
  {
    "example_id": 808,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 5\nprint(x)"
  },
  {
    "example_id": 809,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 4\nb = 3\nsimplified_numerical_value = (a+11*b)/(a-b)\nprint(simplified_numerical_value)"
  },
  {
    "example_id": 810,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = -2 + 1\ny = 1 - 6\nprint(x + y)"
  },
  {
    "example_id": 811,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "m = -3\nb = 63 - m\nprint(b)"
  },
  {
    "example_id": 812,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "12.0",
      "6.0",
      "7.0",
      "6.0",
      "49.0",
      "12.0",
      "6.0",
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import sympy\nfrom sympy import solve, symbols\nx, c = symbols('x c')\neq = 3*x**2 + 7*x + c\nsol = solve(eq, x)\nprint(sol)\nfor val in sol:\n    if val.is_real:\n        print(val)"
  },
  {
    "example_id": 813,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x, y = 1 + 3, 2 + 9\nprint(x + y)"
  },
  {
    "example_id": 814,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1436.0",
      "156.0"
    ],
    "annotated_answers": [
      "156.0"
    ],
    "solution": "print(40**2 - 164)\nprint(40**2 - 38**2)"
  },
  {
    "example_id": 815,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "b = 1 - 3 * 1**4 + 7 * 1**3 - 2 * 1**2\nprint(b)"
  },
  {
    "example_id": 816,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import math\nprint(math.hypot(-8, 6))"
  },
  {
    "example_id": 817,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "a = 4\nb = 5\nx = 3\nh = -1\nk = a * (x - h) ** 2 + b\nprint(k)"
  },
  {
    "example_id": 818,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\na = int(math.sqrt((4+12+36+64+128)/4))\nprint(a)"
  },
  {
    "example_id": 819,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def is_less_than_20(x):\n    return x**2 + 4*x + 4 < 20\n\nfor x in range(1, 21):\n    if is_less_than_20(x):\n        print(x)"
  },
  {
    "example_id": 820,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Five consecutive integers: 1, 2, 3, 4, 5\n# Sum of five consecutive integers: 5\n# Product of five consecutive integers: 1 \u00d7 2 \u00d7 3 \u00d7 4 \u00d7 5 = 120\nprint(120)"
  },
  {
    "example_id": 821,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "age_now = 56 / 8\nprint(age_now)"
  },
  {
    "example_id": 822,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "b = -6\nprint(b)"
  },
  {
    "example_id": 823,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "83.0",
      "93.0",
      "440.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "N = 88\na = N - 5\nb = N + 5\nc = N * 5\nprint(a, b, c)"
  },
  {
    "example_id": 824,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "y_intercept = -3\nprint(y_intercept)"
  },
  {
    "example_id": 825,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x1 = (-18 + 20) / 5\nx2 = (-18 - 20) / 5\nresult = int(x1) * int(x2)\nprint(result)"
  },
  {
    "example_id": 826,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-36.0"
    ],
    "solution": "y = 6\nprint(y)"
  },
  {
    "example_id": 827,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.142857142857143"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7\nx_reciprocal = 1/x\nprint(x + x_reciprocal)"
  },
  {
    "example_id": 828,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(6)"
  },
  {
    "example_id": 829,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.4"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(144 / 10)"
  },
  {
    "example_id": 830,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import log\nprint(log(64, 2))"
  },
  {
    "example_id": 831,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "19.0",
      "23.0",
      "29.0",
      "37.0",
      "47.0",
      "59.0",
      "73.0",
      "89.0",
      "107.0",
      "127.0",
      "149.0",
      "173.0",
      "199.0",
      "227.0",
      "257.0",
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from math import sqrt\n\ndef is_prime(n):\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef f(n):\n    return n ** 2 + n + 17\n\n\nfor i in range(16):\n    if is_prime(f(i)):\n        print(f(i))\n\nprint(f(10) - f(9))"
  },
  {
    "example_id": 832,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def clubsuit(x, y):\n    return (x ** 3) + y\n\nprint(clubsuit(2, 4))"
  },
  {
    "example_id": 833,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import *\nh, x = symbols('h x')\ng = h.subs(x, x**2 - 7*x + 10)\nb = len(g.args) - 1\nprint(b)"
  },
  {
    "example_id": 834,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import log\nx = int(log(1080, 6))\nprint(x)"
  },
  {
    "example_id": 835,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import sympy\n\np = sympy.Poly(sympy.symbols('p(t)'), domain='ZZ')\nq = sympy.Poly(sympy.symbols('q(t)'), domain='ZZ')\n\nprint(sympy.degree(p * q))"
  },
  {
    "example_id": 836,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.23809524",
      "4.19047619"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import numpy as np\n\n# Define the two lines\nline1 = np.array([[2, 1], [1, -10]])\nline2 = np.array([[7, 8], [9, 0]])\n\n# Find the point of intersection\nintersection = np.linalg.solve(line1, line2)\n\n# Print the sum of the x and y coordinates\nprint(intersection[0] + intersection[1])"
  },
  {
    "example_id": 837,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "672.0"
    ],
    "annotated_answers": [
      "672.0"
    ],
    "solution": "amount = 500\nfor i in range(10):\n    amount = amount + (amount * 0.03)\nprint(round(amount))"
  },
  {
    "example_id": 838,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "total_cars = sum(range(1, 13))\nprint(total_cars)"
  },
  {
    "example_id": 839,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-39.0"
    ],
    "annotated_answers": [
      "-39.0"
    ],
    "solution": "a = -1\nb = 5\nprint(-a-b**2+3*a*b)"
  },
  {
    "example_id": 840,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "m = 15 - n\n3m + 4n = 47"
  },
  {
    "example_id": 841,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-150.0"
    ],
    "solution": "# Find k = (6x + 12)(x - 8)\n# k = ax^2 + bx + c\n# a = 6, b = 12, c = -8\n\n# Least possible value of k\n# x = -b / (2a)\n# x = -12 / 6\n# x = -2\n\n# k = (6x + 12)(x - 8)\n# k = (6(-2) + 12)(-2 - 8)\n# k = -24 + 96 - 128\n# k = 64"
  },
  {
    "example_id": 842,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.598076211353316"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "print(3 * (2 ** 3 + 3 ** 0.5) / 2)"
  },
  {
    "example_id": 843,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "new_can_per_can = 5\nnum_new_cans = 125 / 5\nprint(num_new_cans)"
  },
  {
    "example_id": 844,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "22.799999999999997"
    ],
    "annotated_answers": [
      "22.8"
    ],
    "solution": "# Blue box weight = 1/2 * (red box weight x number of red boxes)\nblue_box_weight = 15.2 / 2 * 3\nprint(blue_box_weight)"
  },
  {
    "example_id": 845,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "a = -18\nb = 63\nprint(b)"
  },
  {
    "example_id": 846,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nprint(x**2 + 2*x*(5-x) + (5-x)**2)"
  },
  {
    "example_id": 847,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.9183673469387754",
      "845.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "c = 3\nk = 2\nl = -3\nm = 1\nn = 1\n\nf = lambda c: 3/(2*c - 3)\nf_inv = lambda c: 2*c + 3\n\n# find c\nc = f_inv(f(c))\n\n# find kn/lm\nkn = f(c) * c * f(c)\nlm = f_inv(c) * c * f_inv(c)\n\nprint(kn, lm)"
  },
  {
    "example_id": 848,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0625"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "x = 2\nprint(x**4 + 1/x**4)"
  },
  {
    "example_id": 849,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "num_criminals_in_4_5_hours = 4.5 * 6\nprint(num_criminals_in_4_5_hours)"
  },
  {
    "example_id": 850,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(24-(2*4-3))"
  },
  {
    "example_id": 851,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-18.75"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "import math\n\nx = math.log(2, 4) - 7\ny = math.log(8, 16) - 13\n\nprint(x + y)"
  },
  {
    "example_id": 852,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "def get_perimeter(length):\n    return 4 * length\n\ndef get_area(length):\n    return length ** 2\n\ndef is_smallest(length):\n    perimeter = get_perimeter(length)\n    area = get_area(length)\n    return 3 * perimeter == area\n\nlength = 1\nwhile not is_smallest(length):\n    length += 1\n\nprint(length)"
  },
  {
    "example_id": 853,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7107.75"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "third_term = 1053\nninth_term = 13 / 9\nseventh_term = 3 * third_term / (ninth_term - 1)\nprint(seventh_term)"
  },
  {
    "example_id": 854,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "18.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "from sympy import solve, symbols\n\nx, y = symbols('x y')\n\neq = y - (1/2)*x**2 + 9\n\nsol = solve(eq, x)\n\nprint(sol[0]**2)"
  },
  {
    "example_id": 855,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8"
    ],
    "annotated_answers": [
      "2000.0"
    ],
    "solution": "daily_caloric_requirement = 40 * 0.02\nprint(daily_caloric_requirement)"
  },
  {
    "example_id": 856,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "first_term_second_sequence = 3\nfirst_term_first_sequence = first_term_second_sequence - 1\nprint(first_term_first_sequence)"
  },
  {
    "example_id": 857,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "136.0"
    ],
    "solution": "# Sum of 2 numbers is 25\n# Difference between them is 9\n# Product of the two numbers is 25 - 9 = 16\nprint(16)"
  },
  {
    "example_id": 858,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0",
      "0.0",
      "14.81079288",
      "79.68392599",
      "254.58578644",
      "623.50465122",
      "1294.43491542",
      "2399.37342344",
      "4094.31820717",
      "6559.26794919"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import numpy as np\n\nf = np.vectorize(lambda x: x ** 2)\nf_inv = np.vectorize(lambda x: np.sqrt(x))\n\nf_diff = f(f(np.arange(-10, 10))) - f_inv(f_inv(np.arange(-10, 10)))\nprint(f_diff)"
  },
  {
    "example_id": 859,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111",
      "0.2",
      "0.3333333333333333",
      "0.012345679012345678"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# The different values are:\n# 3^(-2) = 1/9\n# 9^(-2) = 1/81\n# 27^(-2/3) = 1/3\n# 9*81^(-1) = 9/81\n# 243^(-4/5) = 1/5\nprint(set([1/9, 1/81, 1/3, 9/81, 1/5]))"
  },
  {
    "example_id": 860,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.5"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "y = 15.5 - 1\nprint(y)"
  },
  {
    "example_id": 861,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import sympy\n\nn = sympy.Symbol('n')\nm = sympy.Symbol('m')\n\nx = sympy.Symbol('x')\n\n# quadratic equation\neq = x**2 + m*x + (m + n)\n\n# find the solution\nsol = sympy.solve(eq, x)[0]\n\n# find the value of m\nm_value = sol.subs(x, 0)\n\n# print the value of n\nprint(n - m_value)"
  },
  {
    "example_id": 862,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(int(pow(7/4, 2)))"
  },
  {
    "example_id": 863,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Use the floor function to find the number of integer points\n# on the line y = -2x + 18.\nx_range = range(0, 100)\ny_range = [(-2*x) + 18 for x in x_range]\ninteger_points = [(x, y) for x, y in zip(x_range, y_range) if x == int(x) and y == int(y)]\nprint(len(integer_points))"
  },
  {
    "example_id": 864,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "susan_cost = 4 * 20\npam_cost = 5 * 20 * (1 - 0.30)\nprint(pam_cost - susan_cost)"
  },
  {
    "example_id": 865,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def quadratic_formula(k, x):\n    \"\"\"Returns the solutions to the quadratic equation kx^2 + 10x + k = 0.\"\"\"\n    return (-10 - k) / (2 * k), (-10 + k) / (2 * k)\n\nk = 2\nwhile True:\n    x1, x2 = quadratic_formula(k, 0)\n    if x1 % 1 == 0 and x2 % 1 == 0:\n        print(k)\n        break\n    k += 1"
  },
  {
    "example_id": 866,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "max_domain = 9\nprint(max_domain)"
  },
  {
    "example_id": 867,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "perimeter = 12\narea = perimeter ** 2\nprint(area)"
  },
  {
    "example_id": 868,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "regular_packs = 166 // 4\nprint(regular_packs)"
  },
  {
    "example_id": 869,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import sqrt\n\ndef h(x):\n    return sqrt((x**3 + 72)/2) + 1\n\nprint(h(6))"
  },
  {
    "example_id": 870,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.1014181125206"
    ],
    "annotated_answers": [
      "1160.0"
    ],
    "solution": "from math import pow\n\n# interest rate in decimal\nr = 0.075\n# time in years\nt = 2/12\n# initial investment\np = 1000\n\n# total interest earned\ni = p * (1 + r/pow(1 + r, t)) - p\nprint(i)"
  },
  {
    "example_id": 871,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "points = [\n    (-3,3),\n    (1,3),\n    (0,0),\n]\n\ndef get_coefficients(points):\n    # find the slope of the line\n    # by taking the difference of the y-coordinates\n    # and the difference of the x-coordinates\n    slope = (points[1][1] - points[0][1]) / (points[1][0] - points[0][0])\n\n    # find the y-intercept by finding the y-coordinate\n    # of the point that is on the x-axis\n    y_intercept = points[2][1] - slope * points[2][0]\n\n    # return the slope and y-intercept\n    return slope, y_intercept\n\nslope, y_intercept = get_coefficients(points)\n\n# find the value of 100a + 10b + c\nresult = 100 * slope + 10 * y_intercept + y_intercept\nprint(result)"
  },
  {
    "example_id": 872,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "def g(x):\n    return 4 * x ** 2 - 3 * x + 2\n\nprint(g(-3))"
  },
  {
    "example_id": 873,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "2.0",
      "1296.0",
      "18.0",
      "18.0",
      "2.0",
      "1296.0",
      "18.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import sympy\nn = sympy.symbols('n')\nx = sympy.symbols('x')\neq = 9*x**2 + n*x + 36\nsol = sympy.solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 874,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "print(2)"
  },
  {
    "example_id": 875,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "a = 2\nb = 6\nprint(a ** b + b ** a)"
  },
  {
    "example_id": 876,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "132.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "pen_cost = 924\npen_quantity = 7\npencil_cost = pen_cost / pen_quantity\nprint(pencil_cost)"
  },
  {
    "example_id": 877,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100000.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(50 * 200 * 10)"
  },
  {
    "example_id": 878,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "b = f(q(1)) / q(1)\nprint(b)"
  },
  {
    "example_id": 879,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60000.0"
    ],
    "annotated_answers": [
      "60000.0"
    ],
    "solution": "sum = 0\nfor i in range(501, 700, 2):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 880,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.6"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "first_day_pages = 248 / 5\nprint(first_day_pages)"
  }
]