[{"response": "**Solution**\n```python\nfirst_term = 1\nthird_term = 5\nfourth_term = first_term * third_term\nprint(fourth_term)\n```", "solution": "```python\nfirst_term = 1\nthird_term = 5\nfourth_term = first_term * third_term\nprint(fourth_term)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5", "model_answers": [5.0], "answer": 7.0}, {"response": "**Solution**\n```python\nimport sympy as sp\na = sp.Symbol('a')\n\nexp = sp.exp(1)\n\nleft = sp.Pow(8, -1) / sp.Pow(4, -1)\nright = sp.Pow(a, -1)\n\nprint(left - right)\n\nprint(left - right - exp)\n```", "solution": "```python\nimport sympy as sp\na = sp.Symbol('a')\n\nexp = sp.exp(1)\n\nleft = sp.Pow(8, -1) / sp.Pow(4, -1)\nright = sp.Pow(a, -1)\n\nprint(left - right)\n\nprint(left - right - exp)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1/2 - 1/a\n-E + 1/2 - 1/a", "model_answers": [1.0, 2.0, 1.0, 1.0, 2.0, 1.0], "answer": -2.0}, {"response": "**Solution**\n```python\nimport math\n\nradius = 64\n\narea = 0\n\nfor i in range(20):\n\n    area += math.pi * radius ** 2\n\n    radius = radius / 2\n\nprint(int(area))\n```", "solution": "```python\nimport math\n\nradius = 64\n\narea = 0\n\nfor i in range(20):\n\n    area += math.pi * radius ** 2\n\n    radius = radius / 2\n\nprint(int(area))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "17157", "model_answers": [17157.0], "answer": 268.0}, {"response": "**Solution**\n```python\nrent = 5000\nelectricity_cost = 1.45\ntotal_cost = 16520.25\nelectricity_used = (total_cost - rent) / electricity_cost\nprint(electricity_used)\n```", "solution": "```python\nrent = 5000\nelectricity_cost = 1.45\ntotal_cost = 16520.25\nelectricity_used = (total_cost - rent) / electricity_cost\nprint(electricity_used)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "7945.0", "model_answers": [7945.0], "answer": 7945.0}, {"response": "**Solution**\n```python\none_cake = 1.5\ntwo_cake = one_cake * 2\nprint(two_cake)\n```", "solution": "```python\none_cake = 1.5\ntwo_cake = one_cake * 2\nprint(two_cake)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3.0", "model_answers": [3.0], "answer": 7.5}, {"response": "**Solution**\n```python\n# Step 1: Compute the win ratio at the start of the weekend\nwin_ratio_start = 0.5\n\n# Step 2: Compute the win ratio after playing four matches\nwin_ratio_end = 0.5 * 3 / (3 + 1)\n\n# Step 3: Compute the largest number of matches she could've won before the weekend\n# The largest number is 3.\n\n# Step 4: Check if the largest number of matches is larger than the win ratio at the end of the weekend\nif 3 >= win_ratio_end:\n    print(\"The largest number of matches is:\", 3)\nelse:\n    print(\"The largest number of matches is:\", 4)\n```", "solution": "```python\n# Step 1: Compute the win ratio at the start of the weekend\nwin_ratio_start = 0.5\n\n# Step 2: Compute the win ratio after playing four matches\nwin_ratio_end = 0.5 * 3 / (3 + 1)\n\n# Step 3: Compute the largest number of matches she could've won before the weekend\n# The largest number is 3.\n\n# Step 4: Check if the largest number of matches is larger than the win ratio at the end of the weekend\nif 3 >= win_ratio_end:\n    print(\"The largest number of matches is:\", 3)\nelse:\n    print(\"The largest number of matches is:\", 4)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "The largest number of matches is: 3", "model_answers": [3.0], "answer": 164.0}, {"response": "**Solution**\n```python\nx = 2\ny = x + 2\nx_squared = x ** 2\ny_squared = y ** 2\ndiff = y_squared - x_squared\nprint(diff)\n```", "solution": "```python\nx = 2\ny = x + 2\nx_squared = x ** 2\ny_squared = y ** 2\ndiff = y_squared - x_squared\nprint(diff)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "12", "model_answers": [12.0], "answer": 30.0}, {"response": "**Solution**\n```python\nz = 2*x\nprint(z/y)\n```", "solution": "```python\nz = 2*x\nprint(z/y)\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 8.0}, {"response": "**Solution**\n```python\nx = (12+8)/2\ny = (12-8)/2\nprint(2*x - x*y)\n```", "solution": "```python\nx = (12+8)/2\ny = (12-8)/2\nprint(2*x - x*y)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "0.0", "model_answers": [0.0], "answer": 0.0}, {"response": "**Solution**\n```python\nimport sympy\nx, y, K = sympy.symbols('x y K')\neq1 = 6*x + 4*y - 7\neq2 = K*x + 8*y - 7\nsol = sympy.solve((eq1, eq2), (x, y, K))\nprint(sol)\n```", "solution": "```python\nimport sympy\nx, y, K = sympy.symbols('x y K')\neq1 = 6*x + 4*y - 7\neq2 = K*x + 8*y - 7\nsol = sympy.solve((eq1, eq2), (x, y, K))\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(-(4*y - 7)/6, y, 6*(8*y - 7)/(4*y - 7))]", "model_answers": [4.0, 7.0, 6.0, 6.0, 8.0, 7.0, 4.0, 7.0], "answer": 12.0}, {"response": "**Solution**\n```python\nheight = 405\ndistance = height / 3\ntotal_distance = 0\nfor i in range(4):\n    total_distance += distance\nprint(total_distance)\n```", "solution": "```python\nheight = 405\ndistance = height / 3\ntotal_distance = 0\nfor i in range(4):\n    total_distance += distance\nprint(total_distance)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "540.0", "model_answers": [540.0], "answer": 1545.0}, {"response": "**Solution**\n```python\nx = 1/2\nprint((x-1/x)**4)\n```", "solution": "```python\nx = 1/2\nprint((x-1/x)**4)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5.0625", "model_answers": [5.0625], "answer": 81.0}, {"response": "**Solution**\n```python\nm, n = 1, 2\ns = 2000\ns_squared = s**2\ns_squared_sum = s_squared / (m - n)\ns_sum = s / (m - n)\nprint(s_squared_sum - s_sum**2)\n```", "solution": "```python\nm, n = 1, 2\ns = 2000\ns_squared = s**2\ns_squared_sum = s_squared / (m - n)\ns_sum = s / (m - n)\nprint(s_squared_sum - s_sum**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-8000000.0", "model_answers": [-8000000.0], "answer": 125.0}, {"response": "**Solution**\n```python\n# N = 1/3\n# floor(10N) + floor(100N) + floor(1000N) + floor(10000N)\n# = floor(10N) + floor(100N) + floor(1000N) + floor(10000N)\n# = floor(10/3) + floor(100/3) + floor(1000/3) + floor(10000/3)\n# = floor(3) + floor(33) + floor(333) + floor(3333)\n# = 3 + 33 + 333 + 3333\n# = 3670\nprint(3670)\n```", "solution": "```python\n# N = 1/3\n# floor(10N) + floor(100N) + floor(1000N) + floor(10000N)\n# = floor(10N) + floor(100N) + floor(1000N) + floor(10000N)\n# = floor(10/3) + floor(100/3) + floor(1000/3) + floor(10000/3)\n# = floor(3) + floor(33) + floor(333) + floor(3333)\n# = 3 + 33 + 333 + 3333\n# = 3670\nprint(3670)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3670", "model_answers": [3670.0], "answer": 3702.0}, {"response": "**Solution**\n```python\ncount = 0\nfor x in range(-10, 10):\n    for y in range(-10, 10):\n        if (x**2 + y**2) == 25:\n            count += 1\nprint(count)\n```", "solution": "```python\ncount = 0\nfor x in range(-10, 10):\n    for y in range(-10, 10):\n        if (x**2 + y**2) == 25:\n            count += 1\nprint(count)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "12", "model_answers": [12.0], "answer": 12.0}, {"response": "**Solution**\n```python\nimport math\nc = -10 + math.sqrt(100)\nprint(c)\n```", "solution": "```python\nimport math\nc = -10 + math.sqrt(100)\nprint(c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.0", "model_answers": [0.0], "answer": 33.0}, {"response": "**Solution**\n```python\nA = 1\nB = 1\nC = 1\nD = -1\nprint(A+B+C+D)\n```", "solution": "```python\nA = 1\nB = 1\nC = 1\nD = -1\nprint(A+B+C+D)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": -2.0}, {"response": "**Solution**\n```python\nsmallest = 66 // 3\nprint(smallest)\n```", "solution": "```python\nsmallest = 66 // 3\nprint(smallest)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "22", "model_answers": [22.0], "answer": 20.0}, {"response": "**Solution**\n```python\nsmaller = 25 - 11\nprint(smaller)\n```", "solution": "```python\nsmaller = 25 - 11\nprint(smaller)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "14", "model_answers": [14.0], "answer": 7.0}, {"response": "**Solution**\n```python\nprint(8 ** (1/12))\n```", "solution": "```python\nprint(8 ** (1/12))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.189207115002721", "model_answers": [1.189207115002721], "answer": 2.0}, {"response": "**Solution**\n```python\nprice_per_widget = 2.75\ncost_per_widget = 0.5\ntotal_cost = 1000 + (price_per_widget - cost_per_widget) * 0\nprint(total_cost)\n```", "solution": "```python\nprice_per_widget = 2.75\ncost_per_widget = 0.5\ntotal_cost = 1000 + (price_per_widget - cost_per_widget) * 0\nprint(total_cost)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1000.0", "model_answers": [1000.0], "answer": 445.0}, {"response": "**Solution**\n```python\nprint(0.5 * (1/3) * 36)\n```", "solution": "```python\nprint(0.5 * (1/3) * 36)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "6.0", "model_answers": [6.0], "answer": 6.0}, {"response": "**Solution**\n```python\nx = 7 - 1 / 7\nprint(x ** 2 + 1 / x ** 2 + 1)\n```", "solution": "```python\nx = 7 - 1 / 7\nprint(x ** 2 + 1 / x ** 2 + 1)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "48.041675524376416", "model_answers": [48.041675524376416], "answer": 48.0}, {"response": "**Solution**\n```python\nprint(7 + 7)\n```", "solution": "```python\nprint(7 + 7)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "14", "model_answers": [14.0], "answer": 0.0}, {"response": "**Solution**\n```python\nx = 2\nprint(x**(x+1)**x)\n```", "solution": "```python\nx = 2\nprint(x**(x+1)**x)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "512", "model_answers": [512.0], "answer": 512.0}, {"response": "**Solution**\n```python\n# The number of cells at the end of each day\n# is the sum of the number of cells at the end of the previous day\n# plus the number of cells produced by the previous day\n# so the total number of cells at the end of the $15^\\text{th}$ day\n# is the sum of the numbers of cells at the end of each day\n# from the $15^\\text{th}$ day back to the first day\n# and the number of cells at the end of the first day\n\n# The number of cells at the end of the first day is 2\nn_cells = 2\n\n# The number of cells at the end of the $15^\\text{th}$ day is\n# the sum of the numbers of cells at the end of each day\n# from the $15^\\text{th}$ day back to the first day\n# and the number of cells at the end of the first day\nfor i in range(15):\n    n_cells += n_cells\nprint(n_cells)\n```", "solution": "```python\n# The number of cells at the end of each day\n# is the sum of the number of cells at the end of the previous day\n# plus the number of cells produced by the previous day\n# so the total number of cells at the end of the $15^\\text{th}$ day\n# is the sum of the numbers of cells at the end of each day\n# from the $15^\\text{th}$ day back to the first day\n# and the number of cells at the end of the first day\n\n# The number of cells at the end of the first day is 2\nn_cells = 2\n\n# The number of cells at the end of the $15^\\text{th}$ day is\n# the sum of the numbers of cells at the end of each day\n# from the $15^\\text{th}$ day back to the first day\n# and the number of cells at the end of the first day\nfor i in range(15):\n    n_cells += n_cells\nprint(n_cells)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "65536", "model_answers": [65536.0], "answer": 64.0}, {"response": "**Solution**\n```python\ny = 9\nprint(y)\n```", "solution": "```python\ny = 9\nprint(y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "9", "model_answers": [9.0], "answer": -9.0}, {"response": "**Solution**\n```python\nprint(43**2 - 27**2)\n```", "solution": "```python\nprint(43**2 - 27**2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1120", "model_answers": [1120.0], "answer": 1120.0}, {"response": "**Solution**\n```python\nimport sympy\nprint(sympy.log(27, 3))\n```", "solution": "```python\nimport sympy\nprint(sympy.log(27, 3))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3", "model_answers": [3.0], "answer": 3.0}, {"response": "**Solution**\n```python\na = 2\nd = 30 - 2\nn = 50\n\nprint(a + (n-1)*d)\n```", "solution": "```python\na = 2\nd = 30 - 2\nn = 50\n\nprint(a + (n-1)*d)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1374", "model_answers": [1374.0], "answer": 194.0}, {"response": "**Solution**\n```python\nfrom math import prod\n\ndef sum_of_integers(n):\n    \"\"\"Return the sum of integers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))\n\n# Given the figure above, the sum of the integers\n# in the four smallest squares is 1 + 2 + 3 + 4 = 10.\n# The integers in each of the eight smallest triangles\n# are placed such that the pairs of integers in each\n# of the four smallest squares have the same sum.\n# Therefore, the sum of the integers in the eight\n# smallest triangles is 10 + 10 + 10 + 10 = 40.\n# The total sum of the integers in the figure is\n# 1 + 2 + 3 +... + 9 + 10 = 45.\nprint(sum_of_integers(9) + prod(range(2, 10)) - 40)\n```", "solution": "```python\nfrom math import prod\n\ndef sum_of_integers(n):\n    \"\"\"Return the sum of integers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))\n\n# Given the figure above, the sum of the integers\n# in the four smallest squares is 1 + 2 + 3 + 4 = 10.\n# The integers in each of the eight smallest triangles\n# are placed such that the pairs of integers in each\n# of the four smallest squares have the same sum.\n# Therefore, the sum of the integers in the eight\n# smallest triangles is 10 + 10 + 10 + 10 = 40.\n# The total sum of the integers in the figure is\n# 1 + 2 + 3 +... + 9 + 10 = 45.\nprint(sum_of_integers(9) + prod(range(2, 10)) - 40)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "362885", "model_answers": [362885.0], "answer": 11.0}, {"response": "**Solution**\n```python\nfrom sympy import sympify\nprint(sympify('(-125)**(4/3)'))\n```", "solution": "```python\nfrom sympy import sympify\nprint(sympify('(-125)**(4/3)'))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-625*(-1)**(1/3)", "model_answers": [-625.0, -1.0, 1.0, 3.0], "answer": 625.0}, {"response": "**Solution**\n```python\nfrom sympy import Abs\n\ndef f(x):\n    return (Abs(x**2 + 3*x - 4) + Abs(x**2 + 9*x + 20))\n\nprint(f(0))\nprint(f(1))\nprint(f(2))\n```", "solution": "```python\nfrom sympy import Abs\n\ndef f(x):\n    return (Abs(x**2 + 3*x - 4) + Abs(x**2 + 9*x + 20))\n\nprint(f(0))\nprint(f(1))\nprint(f(2))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "24\n30\n48", "model_answers": [24.0, 30.0, 48.0], "answer": -4.0}, {"response": "**Solution**\n```python\nx = (7 + (-3)) / 2\ny = (-6 + (-4)) / 2\nprint(x, y)\n```", "solution": "```python\nx = (7 + (-3)) / 2\ny = (-6 + (-4)) / 2\nprint(x, y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.0 -5.0", "model_answers": [2.0, -5.0], "answer": -3.0}, {"response": "**Solution**\n```python\nf_inv = lambda a: 1 / (1 - a)\na = 0.5\nprint(f_inv(a) * a * f_inv(a))\n```", "solution": "```python\nf_inv = lambda a: 1 / (1 - a)\na = 0.5\nprint(f_inv(a) * a * f_inv(a))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.0", "model_answers": [2.0], "answer": -1.0}, {"response": "**Solution**\n```python\nm = 3\nn = 1\nprint(m+n)\n```", "solution": "```python\nm = 3\nn = 1\nprint(m+n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4", "model_answers": [4.0], "answer": 1.0}, {"response": "**Solution**\n```python\nfrom sympy import solve, Symbol\nx = Symbol('x')\nroots = solve(2*x**2 - 7*x + 2, x)\na, b = roots\nprint(1/(a-1) + 1/(b-1))\n```", "solution": "```python\nfrom sympy import solve, Symbol\nx = Symbol('x')\nroots = solve(2*x**2 - 7*x + 2, x)\na, b = roots\nprint(1/(a-1) + 1/(b-1))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1/(3/4 - sqrt(33)/4) + 1/(3/4 + sqrt(33)/4)", "model_answers": [1.0, 3.0, 4.0, 33.0, 4.0, 1.0, 3.0, 4.0, 33.0, 4.0], "answer": -1.0}, {"response": "**Solution**\n```python\nprint((9-4j)-(-3-4j))\n```", "solution": "```python\nprint((9-4j)-(-3-4j))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "(12+0j)", "model_answers": [12.0, 0.0], "answer": 12.0}, {"response": "**Solution**\n```python\na = 0\nb = 5\nc = 0\n\nprint(100*a + 10*b + c)\n```", "solution": "```python\na = 0\nb = 5\nc = 0\n\nprint(100*a + 10*b + c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "50", "model_answers": [50.0], "answer": -55.0}, {"response": "**Solution**\n```python\nx = 2\ny = 3\nprint(x+y)\n```", "solution": "```python\nx = 2\ny = 3\nprint(x+y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5", "model_answers": [5.0], "answer": 15.0}, {"response": "**Solution**\n```python\nsecond_largest = 129 - 1\nprint(second_largest)\n```", "solution": "```python\nsecond_largest = 129 - 1\nprint(second_largest)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "128", "model_answers": [128.0], "answer": 103.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\n\ndef find_root(n):\n    if n == 0:\n        return 0\n    else:\n        return sqrt(12 - find_root(n-1))\n\nprint(find_root(4))\n```", "solution": "```python\nfrom sympy import sqrt\n\ndef find_root(n):\n    if n == 0:\n        return 0\n    else:\n        return sqrt(12 - find_root(n-1))\n\nprint(find_root(4))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "sqrt(12 - sqrt(12 - sqrt(12 - 2*sqrt(3))))", "model_answers": [12.0, 12.0, 12.0, 2.0, 3.0], "answer": 3.0}, {"response": "**Solution**\n```python\nimport math\nn = 8.71 - 2.71 / (1001 - 1000) * 1001\nprint(n)\n```", "solution": "```python\nimport math\nn = 8.71 - 2.71 / (1001 - 1000) * 1001\nprint(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-2704.0", "model_answers": [-2704.0], "answer": 575.0}, {"response": "**Solution**\n```python\nprint(0.5 * 1024 / 0.125 * 2 ** 12)\n```", "solution": "```python\nprint(0.5 * 1024 / 0.125 * 2 ** 12)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "16777216.0", "model_answers": [16777216.0], "answer": 1.0}, {"response": "**Solution**\n```python\n# Original ratio is 4:3\nblue_marbles = 4\nyellow_marbles = 3\n\n# After adding 5 blue marbles and removing 3 yellow marbles,\n# the ratio becomes 7:3\nblue_marbles += 5\nyellow_marbles -= 3\n\n# The ratio is 7:3\nprint(blue_marbles, yellow_marbles)\n\n# To find out how many blue marbles were in the bag before adding more,\n# we can divide the original number of yellow marbles by the ratio\n# (which is 4:3) to get the number of blue marbles in the bag before adding more\nprint(yellow_marbles / 4)\n```", "solution": "```python\n# Original ratio is 4:3\nblue_marbles = 4\nyellow_marbles = 3\n\n# After adding 5 blue marbles and removing 3 yellow marbles,\n# the ratio becomes 7:3\nblue_marbles += 5\nyellow_marbles -= 3\n\n# The ratio is 7:3\nprint(blue_marbles, yellow_marbles)\n\n# To find out how many blue marbles were in the bag before adding more,\n# we can divide the original number of yellow marbles by the ratio\n# (which is 4:3) to get the number of blue marbles in the bag before adding more\nprint(yellow_marbles / 4)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "9 0\n0.0", "model_answers": [9.0, 0.0, 0.0], "answer": 16.0}, {"response": "**Solution**\n```python\nimport math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2))\n\nprint(distance(1, 2, -4, -10))\n```", "solution": "```python\nimport math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2))\n\nprint(distance(1, 2, -4, -10))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "13.0", "model_answers": [13.0], "answer": 13.0}, {"response": "**Solution**\n```python\nx, y = 6 + 1, 8 + 1\nprint(x + y)\n```", "solution": "```python\nx, y = 6 + 1, 8 + 1\nprint(x + y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "16", "model_answers": [16.0], "answer": -10.0}, {"response": "**Solution**\n```python\na = 4\nb = -1\nc = -1\nprint(a+b+c)\n```", "solution": "```python\na = 4\nb = -1\nc = -1\nprint(a+b+c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 3.0}, {"response": "**Solution**\n```python\nstart = 13\nend = 2008\nstep = end - start\nprint(step)\n```", "solution": "```python\nstart = 13\nend = 2008\nstep = end - start\nprint(step)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1995", "model_answers": [1995.0], "answer": 286.0}, {"response": "**Solution**\n```python\nprint(14-15)\n```", "solution": "```python\nprint(14-15)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-1", "model_answers": [-1.0], "answer": 28.0}, {"response": "**Solution**\n```python\nb = 3\nprint(b)\n```", "solution": "```python\nb = 3\nprint(b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": 2.0}, {"response": "**Solution**\n```python\nprint(255**2 - 245**2)\n```", "solution": "```python\nprint(255**2 - 245**2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "5000", "model_answers": [5000.0], "answer": 5000.0}, {"response": "**Solution**\n```python\nimport sympy\nx, y = sympy.symbols('x y')\neq_x2 = x**2 + 2*x + 3\neq_x4 = x**2 + 4*x + 3\nx2_x4 = eq_x2 - eq_x4\nc = x2_x4.subs(x, 2)\nprint(c)\n```", "solution": "```python\nimport sympy\nx, y = sympy.symbols('x y')\neq_x2 = x**2 + 2*x + 3\neq_x4 = x**2 + 4*x + 3\nx2_x4 = eq_x2 - eq_x4\nc = x2_x4.subs(x, 2)\nprint(c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-4", "model_answers": [-4.0], "answer": 11.0}, {"response": "**Solution**\n```python\nfrom sympy import log, exp\nx = exp(log(49) / 7)\nprint(x)\n```", "solution": "```python\nfrom sympy import log, exp\nx = exp(log(49) / 7)\nprint(x)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "7**(2/7)", "model_answers": [7.0, 2.0, 7.0], "answer": 7.0}, {"response": "**Solution**\n```python\nimport sympy\n\nb = sympy.symbols('b')\n\n# 125^b = 5\n# 125^b = 125^b * 1\n# 5 = 125^b * 1\n# 125^b = 1/5\n# 125^b = 1/5 * 1\n# 1 = 125^b * 1/5\n# 125^b = 1/5\n\n# 27^b = c\n# 27^b = 27^b * 1\n# c = 27^b * 1\n# c = 27^b\n# c = 125^b * 1\n# c = 125^b\n\n# 125^b = 1/5\n# 125^b = 1/5 * 1\n# 1 = 125^b * 1/5\n# 125^b = 1/5\n\n# 27^b = 125^b\n# 27^b = 1/5\n# b = log(27)/log(125)\nb = sympy.log(27, 125)\nprint(b)\n\n# c = 125^b\nc = 125 ** b\nprint(c)\n```", "solution": "```python\nimport sympy\n\nb = sympy.symbols('b')\n\n# 125^b = 5\n# 125^b = 125^b * 1\n# 5 = 125^b * 1\n# 125^b = 1/5\n# 125^b = 1/5 * 1\n# 1 = 125^b * 1/5\n# 125^b = 1/5\n\n# 27^b = c\n# 27^b = 27^b * 1\n# c = 27^b * 1\n# c = 27^b\n# c = 125^b * 1\n# c = 125^b\n\n# 125^b = 1/5\n# 125^b = 1/5 * 1\n# 1 = 125^b * 1/5\n# 125^b = 1/5\n\n# 27^b = 125^b\n# 27^b = 1/5\n# b = log(27)/log(125)\nb = sympy.log(27, 125)\nprint(b)\n\n# c = 125^b\nc = 125 ** b\nprint(c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "log(27)/log(125)\n27", "model_answers": [27.0, 125.0, 27.0], "answer": 3.0}, {"response": "**Solution**\n```python\nfrom sympy import solve, symbols\nx, y = symbols('x y')\nexpr = 2*x**2 + 3*y**2 + 8*x - 24*y + 62\nsol = solve(expr, [x, y])\nprint(sol)\n```", "solution": "```python\nfrom sympy import solve, symbols\nx, y = symbols('x y')\nexpr = 2*x**2 + 3*y**2 + 8*x - 24*y + 62\nsol = solve(expr, [x, y])\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(-sqrt(-6*y**2 + 48*y - 108)/2 - 2, y), (sqrt(-6*y**2 + 48*y - 108)/2 - 2, y)]", "model_answers": [-6.0, 2.0, 48.0, 108.0, 2.0, 2.0, -6.0, 2.0, 48.0, 108.0, 2.0, 2.0], "answer": 6.0}, {"response": "**Solution**\n```python\nmin_miles = 4 * 3 # 12\nprint(min_miles)\n```", "solution": "```python\nmin_miles = 4 * 3 # 12\nprint(min_miles)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "12", "model_answers": [12.0], "answer": 36.0}, {"response": "**Solution**\n```python\nimport sympy\ns = sympy.Symbol('s')\nx = sympy.Symbol('x')\nexpr = (x**2 + s*x - 0.5)\nsol = sympy.solve(expr, x)\nprint(sol)\n```", "solution": "```python\nimport sympy\ns = sympy.Symbol('s')\nx = sympy.Symbol('x')\nexpr = (x**2 + s*x - 0.5)\nsol = sympy.solve(expr, x)\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[-0.5*s - 0.707106781186548*sqrt(0.5*s**2 + 1), -0.5*s + 0.707106781186548*sqrt(0.5*s**2 + 1)]", "model_answers": [-0.5, 0.707106781186548, 0.5, 2.0, 1.0, -0.5, 0.707106781186548, 0.5, 2.0, 1.0], "answer": 0.0}, {"response": "**Solution**\n```python\na = 4\nb = 1\nc = 2\n\na_squared = (a - 7 * b + 8 * c)**2\nb_squared = (8 * a + 4 * b - c)**2\nprint(a_squared - b_squared)\n```", "solution": "```python\na = 4\nb = 1\nc = 2\n\na_squared = (a - 7 * b + 8 * c)**2\nb_squared = (8 * a + 4 * b - c)**2\nprint(a_squared - b_squared)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-987", "model_answers": [-987.0], "answer": 1.0}, {"response": "**Solution**\n```python\na = 3\nb = 5\nc = 15\nd = 6\n\nprint(a*d/b)\n```", "solution": "```python\na = 3\nb = 5\nc = 15\nd = 6\n\nprint(a*d/b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3.6", "model_answers": [3.6], "answer": 9.0}, {"response": "**Solution**\n```python\ndef cone_volume(r, h):\n    return (1/3) * pi * r**2 * h\n\ndef cone_height(r, h):\n    return 24\n\ndef cone_radius(r, h):\n    return 3*r\n\nr = 1\nh = cone_height(r, cone_height(r, 24))\nprint(h)\n```", "solution": "```python\ndef cone_volume(r, h):\n    return (1/3) * pi * r**2 * h\n\ndef cone_height(r, h):\n    return 24\n\ndef cone_radius(r, h):\n    return 3*r\n\nr = 1\nh = cone_height(r, cone_height(r, 24))\nprint(h)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "24", "model_answers": [24.0], "answer": 216.0}, {"response": "**Solution**\n```python\nx = 3\ny = 9\n\n# Write the function\ndef f(x, y):\n    return y**2 - 3*x*y + 8\n\n# Call the function\nprint(f(x, y))\n```", "solution": "```python\nx = 3\ny = 9\n\n# Write the function\ndef f(x, y):\n    return y**2 - 3*x*y + 8\n\n# Call the function\nprint(f(x, y))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "8", "model_answers": [8.0], "answer": 8.0}, {"response": "**Solution**\n```python\nimport sympy as sym\n\na, b, c = sym.symbols('a b c')\nx, y = sym.symbols('x y')\n\neq1 = a*x + b*y + c == x + 7\neq2 = a + b*x + c*y == 2*x + 6*y\neq3 = a*y + b + c*x == 4*x + y\n\n# solve for a, b, c\nsol = sym.solve([eq1, eq2, eq3], [a, b, c])\n\n# print the solution\nprint(sol)\n```", "solution": "```python\nimport sympy as sym\n\na, b, c = sym.symbols('a b c')\nx, y = sym.symbols('x y')\n\neq1 = a*x + b*y + c == x + 7\neq2 = a + b*x + c*y == 2*x + 6*y\neq3 = a*y + b + c*x == 4*x + y\n\n# solve for a, b, c\nsol = sym.solve([eq1, eq2, eq3], [a, b, c])\n\n# print the solution\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[]", "model_answers": [], "answer": 7.0}, {"response": "**Solution**\n```python\nmultiples = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\nprint(sum(multiples))\n```", "solution": "```python\nmultiples = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\nprint(sum(multiples))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "165", "model_answers": [165.0], "answer": 165.0}, {"response": "**Solution**\n```python\ndef nth_odd(n):\n    return (n * 2) - 1\n\nprint(nth_odd(2003))\n```", "solution": "```python\ndef nth_odd(n):\n    return (n * 2) - 1\n\nprint(nth_odd(2003))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4005", "model_answers": [4005.0], "answer": 4005.0}, {"response": "**Solution**\n```python\nfrom sympy import solve\nfrom sympy.abc import c\nfrom sympy.abc import x\nf = 4*x**7 + x**5 + 3*x**2 - 2*x + c\nf_solution = solve(f.subs(x,-1),c)\nprint(f_solution)\n```", "solution": "```python\nfrom sympy import solve\nfrom sympy.abc import c\nfrom sympy.abc import x\nf = 4*x**7 + x**5 + 3*x**2 - 2*x + c\nf_solution = solve(f.subs(x,-1),c)\nprint(f_solution)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "[0]", "model_answers": [0.0], "answer": 0.0}, {"response": "**Solution**\n```python\npints_first_3 = 1.5\npints_next_10 = pints_first_3 * 10\nprint(pints_next_10)\n```", "solution": "```python\npints_first_3 = 1.5\npints_next_10 = pints_first_3 * 10\nprint(pints_next_10)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15.0", "model_answers": [15.0], "answer": 5.0}, {"response": "**Solution**\n```python\na = 2\nb = 1\nprint(a/b + b/a - a*b)\n```", "solution": "```python\na = 2\nb = 1\nprint(a/b + b/a - a*b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.5", "model_answers": [0.5], "answer": 2.0}, {"response": "**Solution**\n```python\nfrom sympy import symbols, solve\n\nt = symbols('t')\ny = -16*t**2 + 26*t + 105\nsol = solve(y, t)[0]\nprint(sol)\n```", "solution": "```python\nfrom sympy import symbols, solve\n\nt = symbols('t')\ny = -16*t**2 + 26*t + 105\nsol = solve(y, t)[0]\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-15/8", "model_answers": [-15.0, 8.0], "answer": 3.5}, {"response": "**Solution**\n```python\nfrom sympy import Symbol\nfrom sympy import solve\nx = Symbol('x')\nroots = solve(2003/2004*x + 1 + 1/x - 0, x)\nreciprocals = [1/r for r in roots]\nprint(sum(reciprocals))\n```", "solution": "```python\nfrom sympy import Symbol\nfrom sympy import solve\nx = Symbol('x')\nroots = solve(2003/2004*x + 1 + 1/x - 0, x)\nreciprocals = [1/r for r in roots]\nprint(sum(reciprocals))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.999500998003992*(-0.500249625561658 - 0.866169477209129*I) + 0.999500998003992*(-0.500249625561658 + 0.866169477209129*I)", "model_answers": [0.999500998003992, -0.500249625561658, 0.866169477209129, 0.999500998003992, -0.500249625561658, 0.866169477209129], "answer": -1.0}, {"response": "**Solution**\n```python\nimport math\nx = math.sqrt(27)\nprint(x)\n```", "solution": "```python\nimport math\nx = math.sqrt(27)\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5.196152422706632", "model_answers": [5.196152422706632], "answer": 5.4}, {"response": "**Solution**\n```python\nn = (55 + 1)/2\nprint(n)\n```", "solution": "```python\nn = (55 + 1)/2\nprint(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "28.0", "model_answers": [28.0], "answer": 11.0}, {"response": "**Solution**\n```python\nx = 3\nx = -5\nprint(x + x)\n```", "solution": "```python\nx = 3\nx = -5\nprint(x + x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-10", "model_answers": [-10.0], "answer": 0.5}, {"response": "**Solution**\n```python\na = -7\n```", "solution": "```python\na = -7\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "", "model_answers": [], "answer": -5.0}, {"response": "**Solution**\n```python\nfrom sympy import symbols, solve\nx = symbols('x')\neq = 2*x**2 + 4*x - 1\nsolutions = solve(eq)\nsquares = [s**2 for s in solutions]\nprint(sum(squares))\n```", "solution": "```python\nfrom sympy import symbols, solve\nx = symbols('x')\neq = 2*x**2 + 4*x - 1\nsolutions = solve(eq)\nsquares = [s**2 for s in solutions]\nprint(sum(squares))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(-1 + sqrt(6)/2)**2 + (-sqrt(6)/2 - 1)**2", "model_answers": [-1.0, 6.0, 2.0, 2.0, 6.0, 2.0, 1.0, 2.0], "answer": 5.0}, {"response": "**Solution**\n```python\nimport math\n\ndef distance(a, b):\n    return math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)\n\nprint(distance((-3,7), (2,-5)))\n```", "solution": "```python\nimport math\n\ndef distance(a, b):\n    return math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)\n\nprint(distance((-3,7), (2,-5)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "13.0", "model_answers": [13.0], "answer": 13.0}, {"response": "**Solution**\n```python\nfree_hours = 105\ntotal_hours = 105 + 105\nextra_hours = total_hours - free_hours\nextra_cost = 26\ncents_per_hour = extra_cost / extra_hours\nprint(cents_per_hour)\n```", "solution": "```python\nfree_hours = 105\ntotal_hours = 105 + 105\nextra_hours = total_hours - free_hours\nextra_cost = 26\ncents_per_hour = extra_cost / extra_hours\nprint(cents_per_hour)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.24761904761904763", "model_answers": [0.24761904761904763], "answer": 40.0}, {"response": "**Solution**\n```python\nj = 42 / 56 * 32\nprint(round(j, 1))\n```", "solution": "```python\nj = 42 / 56 * 32\nprint(round(j, 1))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "24.0", "model_answers": [24.0], "answer": 73.5}, {"response": "**Solution**\n```python\nx = 5 ** 2 + 18\nprint(x)\n```", "solution": "```python\nx = 5 ** 2 + 18\nprint(x)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "43", "model_answers": [43.0], "answer": 43.0}, {"response": "**Solution**\n```python\ndef triangular_number(n):\n    return n * (n + 1) // 2\n\ndef find_x(b):\n    b_plus_1 = b + 1\n    b_minus_1 = b - 1\n    b_plus_1_minus_b = triangular_number(b_plus_1) - triangular_number(b)\n    b_minus_1_minus_b = triangular_number(b_minus_1) - triangular_number(b)\n    return b_plus_1_minus_b // b_minus_1_minus_b\n\ndef find_b(x):\n    b = 2011\n    while True:\n        b_plus_1 = b + 1\n        b_minus_1 = b - 1\n        b_plus_1_minus_b = triangular_number(b_plus_1) - triangular_number(b)\n        b_minus_1_minus_b = triangular_number(b_minus_1) - triangular_number(b)\n        if b_plus_1_minus_b // b_minus_1_minus_b == x:\n            return b\n        b += 1\n\nx = find_x(2011)\nb = find_b(x)\nprint(b)\n```", "solution": "```python\ndef triangular_number(n):\n    return n * (n + 1) // 2\n\ndef find_x(b):\n    b_plus_1 = b + 1\n    b_minus_1 = b - 1\n    b_plus_1_minus_b = triangular_number(b_plus_1) - triangular_number(b)\n    b_minus_1_minus_b = triangular_number(b_minus_1) - triangular_number(b)\n    return b_plus_1_minus_b // b_minus_1_minus_b\n\ndef find_b(x):\n    b = 2011\n    while True:\n        b_plus_1 = b + 1\n        b_minus_1 = b - 1\n        b_plus_1_minus_b = triangular_number(b_plus_1) - triangular_number(b)\n        b_minus_1_minus_b = triangular_number(b_minus_1) - triangular_number(b)\n        if b_plus_1_minus_b // b_minus_1_minus_b == x:\n            return b\n        b += 1\n\nx = find_x(2011)\nb = find_b(x)\nprint(b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2011", "model_answers": [2011.0], "answer": 2015.0}, {"response": "**Solution**\n```python\nprint(113+276-13-26)\n```", "solution": "```python\nprint(113+276-13-26)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "350", "model_answers": [350.0], "answer": 350.0}, {"response": "**Solution**\n```python\nwidth = 100 / 4\nprint(width * width)\n```", "solution": "```python\nwidth = 100 / 4\nprint(width * width)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "625.0", "model_answers": [625.0], "answer": 400.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\neq1 = sympy.Eq((2**x-2)*(5*2**x+10), 3*sympy.Pow(4, x)+12)\nsolution = sympy.solve(eq1)\nprint(solution)\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\neq1 = sympy.Eq((2**x-2)*(5*2**x+10), 3*sympy.Pow(4, x)+12)\nsolution = sympy.solve(eq1)\nprint(solution)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "[2, (log(4) + I*pi)/log(2)]", "model_answers": [2.0, 4.0, 2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\neq = (2**(x+1))**3 * 4**x - 8192\nsol = sympy.solve(eq, x)\nprint(sol)\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\neq = (2**(x+1))**3 * 4**x - 8192\nsol = sympy.solve(eq, x)\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "[2, (log(1024) - 4*I*pi)/(5*log(2)), (log(1024) - 2*I*pi)/(5*log(2)), (log(1024) + 2*I*pi)/(5*log(2)), (log(1024) + 4*I*pi)/(5*log(2))]", "model_answers": [2.0, 1024.0, 4.0, 5.0, 2.0, 1024.0, 2.0, 5.0, 2.0, 1024.0, 2.0, 5.0, 2.0, 1024.0, 4.0, 5.0, 2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nimport sympy\n\na, b, x = sympy.symbols('a b x')\n\nexpression = a ** 2 + 2 * a * b + b ** 2\nexpression = expression.expand()\nexpression = expression.subs({a: 2, b: x})\n\nprint(expression.simplify())\n```", "solution": "```python\nimport sympy\n\na, b, x = sympy.symbols('a b x')\n\nexpression = a ** 2 + 2 * a * b + b ** 2\nexpression = expression.expand()\nexpression = expression.subs({a: 2, b: x})\n\nprint(expression.simplify())\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "x**2 + 4*x + 4", "model_answers": [2.0, 4.0, 4.0], "answer": -4.0}, {"response": "**Solution**\n```python\ndegree_f = 6\ndegree_g = 3\ndegree_h = 36 - degree_f - degree_g\nprint(degree_h)\n```", "solution": "```python\ndegree_f = 6\ndegree_g = 3\ndegree_h = 36 - degree_f - degree_g\nprint(degree_h)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "27", "model_answers": [27.0], "answer": 6.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return x - 7\n\ndef g(x):\n    return 7 - x\n\ndef h(x):\n    return x & f(x) & g(x)\n\nprint(h(15))\n```", "solution": "```python\ndef f(x):\n    return x - 7\n\ndef g(x):\n    return 7 - x\n\ndef h(x):\n    return x & f(x) & g(x)\n\nprint(h(15))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": -15.0}, {"response": "**Solution**\n```python\nfrom math import floor, ceil, pi, sqrt\n\ndef f(n):\n    if n >= 4:\n        return floor(n)\n    else:\n        return ceil(n)\n\nprint(f(pi/3) + f(sqrt(45)) + f(8**(2/3)))\n```", "solution": "```python\nfrom math import floor, ceil, pi, sqrt\n\ndef f(n):\n    if n >= 4:\n        return floor(n)\n    else:\n        return ceil(n)\n\nprint(f(pi/3) + f(sqrt(45)) + f(8**(2/3)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "12", "model_answers": [12.0], "answer": 12.0}, {"response": "**Solution**\n```python\nx = (3*2 + 2)/5\ny = (3*2 - 2)/5\nprint(24*x - 14*y)\n```", "solution": "```python\nx = (3*2 + 2)/5\ny = (3*2 - 2)/5\nprint(24*x - 14*y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "27.200000000000003", "model_answers": [27.200000000000003], "answer": 38.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\nf = sympy.Function('f', real=True)(x)\ng = sympy.Function('g', real=True)(x)\nf = x - 3\ng = x**2 + 7*x - 30\nprint(len(sympy.solve(f, g, x)))\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\nf = sympy.Function('f', real=True)(x)\ng = sympy.Function('g', real=True)(x)\nf = x - 3\ng = x**2 + 7*x - 30\nprint(len(sympy.solve(f, g, x)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nvolume = 600 / 8\nprint(volume)\n```", "solution": "```python\nvolume = 600 / 8\nprint(volume)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "75.0", "model_answers": [75.0], "answer": 75.0}, {"response": "**Solution**\n```python\nprint(531**2 - 2*531*530 + 530**2)\n```", "solution": "```python\nprint(531**2 - 2*531*530 + 530**2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nfrom sympy import S\nx = S('x')\nprint(x**(-1) > x)\n```", "solution": "```python\nfrom sympy import S\nx = S('x')\nprint(x**(-1) > x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1/x > x", "model_answers": [1.0], "answer": 0.0}, {"response": "**Solution**\n```python\ntreeks = 10\nsquigs = 3\ngoolees = 1\n\n# 1 squig = 2 treeks + 1 goolee\n\n# 2 treeks = 2 * 10 = 20\n# 1 goolee = 10\n# 1 squig = 20 + 10 = 30\n\nprint(treeks + goolees)\n```", "solution": "```python\ntreeks = 10\nsquigs = 3\ngoolees = 1\n\n# 1 squig = 2 treeks + 1 goolee\n\n# 2 treeks = 2 * 10 = 20\n# 1 goolee = 10\n# 1 squig = 20 + 10 = 30\n\nprint(treeks + goolees)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "11", "model_answers": [11.0], "answer": 3.0}, {"response": "**Solution**\n```python\n# The ratio is 3:5\n# When 4 is subtracted from the lesser of the two numbers and 8 is added to the larger of the two, the new ratio is 2:7\n# The ratio is 2:7\n# The ratio is 1:3\n# The greater of the two numbers before 8 is added to it is 3\n\nprint(3)\n```", "solution": "```python\n# The ratio is 3:5\n# When 4 is subtracted from the lesser of the two numbers and 8 is added to the larger of the two, the new ratio is 2:7\n# The ratio is 2:7\n# The ratio is 1:3\n# The greater of the two numbers before 8 is added to it is 3\n\nprint(3)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": 20.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\ndef h(x):\n    return np.sqrt(25 - x ** 2) + np.sqrt(-x + 2)\n\nx_values = np.arange(-5, 5, 0.1)\ny_values = [h(x) for x in x_values]\n\nwidth = x_values[-1] - x_values[0]\nprint(width)\n```", "solution": "```python\nimport numpy as np\n\ndef h(x):\n    return np.sqrt(25 - x ** 2) + np.sqrt(-x + 2)\n\nx_values = np.arange(-5, 5, 0.1)\ny_values = [h(x) for x in x_values]\n\nwidth = x_values[-1] - x_values[0]\nprint(width)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "9.899999999999965", "model_answers": [9.899999999999965], "answer": 7.0}, {"response": "**Solution**\n```python\ncalories_in_12_fluid_ounces = 125 * 12 / 8\nprint(calories_in_12_fluid_ounces)\n```", "solution": "```python\ncalories_in_12_fluid_ounces = 125 * 12 / 8\nprint(calories_in_12_fluid_ounces)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "187.5", "model_answers": [187.5], "answer": 187.5}, {"response": "**Solution**\n```python\nk = 6\nprint(k)\n```", "solution": "```python\nk = 6\nprint(k)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": 1.0}, {"response": "**Solution**\n```python\nprint(2*(-2)**2+3*(-2)+4)\n```", "solution": "```python\nprint(2*(-2)**2+3*(-2)+4)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "6", "model_answers": [6.0], "answer": 6.0}, {"response": "**Solution**\n```python\nimport sympy\na, b = sympy.symbols('a, b')\n# solve for a\na = sympy.log(32, 2)\n# solve for b\nb = sympy.log(125, a)\nprint(b)\nprint(a)\n```", "solution": "```python\nimport sympy\na, b = sympy.symbols('a, b')\n# solve for a\na = sympy.log(32, 2)\n# solve for b\nb = sympy.log(125, a)\nprint(b)\nprint(a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3\n5", "model_answers": [3.0, 5.0], "answer": 243.0}, {"response": "**Solution**\n```python\ndef revenue(p):\n    return 120 - 3 * p\n\ndef derivative(p):\n    return -3\n\ndef max_revenue(p):\n    return p - derivative(p) / (2 * derivative(p) ** 2 + 1) ** 0.5\n\nprint(max_revenue(10))\n```", "solution": "```python\ndef revenue(p):\n    return 120 - 3 * p\n\ndef derivative(p):\n    return -3\n\ndef max_revenue(p):\n    return p - derivative(p) / (2 * derivative(p) ** 2 + 1) ** 0.5\n\nprint(max_revenue(10))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "10.688247201611684", "model_answers": [10.688247201611684], "answer": 20.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\na = sympy.Symbol('a')\nsol = sympy.solve(a*x**2+8*x+4,x)\nprint(sol)\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\na = sympy.Symbol('a')\nsol = sympy.solve(a*x**2+8*x+4,x)\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[2*(-sqrt(4 - a) - 2)/a, 2*(sqrt(4 - a) - 2)/a]", "model_answers": [2.0, 4.0, 2.0, 2.0, 4.0, 2.0], "answer": 4.0}, {"response": "**Solution**\n```python\ncompound_rate = (66_200 - 20_000) / 20_000\nprint(compound_rate)\n```", "solution": "```python\ncompound_rate = (66_200 - 20_000) / 20_000\nprint(compound_rate)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.31", "model_answers": [2.31], "answer": 10.0}, {"response": "**Solution**\n```python\nprint(34-10 + 20-9 + 55-10)\n```", "solution": "```python\nprint(34-10 + 20-9 + 55-10)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "80", "model_answers": [80.0], "answer": 80.0}, {"response": "**Solution**\n```python\nprint(32**2 - 18**2)\n```", "solution": "```python\nprint(32**2 - 18**2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "700", "model_answers": [700.0], "answer": 700.0}, {"response": "**Solution**\n```python\nprint(round(3/2) ** 2 + round(pow(3/2, 2)))\n```", "solution": "```python\nprint(round(3/2) ** 2 + round(pow(3/2, 2)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": 7.0}, {"response": "**Solution**\n```python\nfor i in range(1, 20):\n    for j in range(1, 20):\n        if (i * j - (i + j)) == 39:\n            print(i + j)\n```", "solution": "```python\nfor i in range(1, 20):\n    for j in range(1, 20):\n        if (i * j - (i + j)) == 39:\n            print(i + j)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "16\n15\n15\n16", "model_answers": [16.0, 15.0, 15.0, 16.0], "answer": 16.0}, {"response": "**Solution**\n```python\ndef F(a, b, c, d):\n    return a ** b + c * d\n\nb = 2\nprint(F(6, b, 4, 3))\n```", "solution": "```python\ndef F(a, b, c, d):\n    return a ** b + c * d\n\nb = 2\nprint(F(6, b, 4, 3))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "48", "model_answers": [48.0], "answer": 2.0}, {"response": "**Solution**\n```python\ndef f(n):\n    if n > 1:\n        return n ** 3 + 2 * n - 1\n    elif n <= 1:\n        return n - 1\n\nprint(f(0) + f(1) + f(2))\n```", "solution": "```python\ndef f(n):\n    if n > 1:\n        return n ** 3 + 2 * n - 1\n    elif n <= 1:\n        return n - 1\n\nprint(f(0) + f(1) + f(2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "10", "model_answers": [10.0], "answer": 10.0}, {"response": "**Solution**\n```python\nfrom math import pi\n\ndef f(x):\n    if x < 0:\n        return -x**2 - 1\n    elif 0 <= x < 4:\n        return 2\n    else:\n        return sqrt(x)\n\nprint(f(pi))\n```", "solution": "```python\nfrom math import pi\n\ndef f(x):\n    if x < 0:\n        return -x**2 - 1\n    elif 0 <= x < 4:\n        return 2\n    else:\n        return sqrt(x)\n\nprint(f(pi))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2", "model_answers": [2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nS = 13 / 2\nprint(S**2)\n```", "solution": "```python\nS = 13 / 2\nprint(S**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "42.25", "model_answers": [42.25], "answer": 13.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\na, b = sympy.solveset(x**2 - 6*x + 2 - 29, x)\nprint(2*a - 3*b)\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\na, b = sympy.solveset(x**2 - 6*x + 2 - 29, x)\nprint(2*a - 3*b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-33", "model_answers": [-33.0], "answer": 27.0}, {"response": "**Solution**\n```python\nfrom sympy import solve, symbols\na = symbols('a', integer=True)\nx = symbols('x', integer=True)\nsolutions = solve((x**2 + a*x + 5*a, 0), x)\nprint(len(solutions))\n```", "solution": "```python\nfrom sympy import solve, symbols\na = symbols('a', integer=True)\nx = symbols('x', integer=True)\nsolutions = solve((x**2 + a*x + 5*a, 0), x)\nprint(len(solutions))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 4.0}, {"response": "**Solution**\n```python\nnum = 5 + 8\nden = 5 + 8\nprint(num / den)\n```", "solution": "```python\nnum = 5 + 8\nden = 5 + 8\nprint(num / den)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.0", "model_answers": [1.0], "answer": -3.0}, {"response": "**Solution**\n```python\nfrom math import sin, pi\n\ndef f1(x):\n    return -6*sin(x*pi/6)\n\ndef g(x):\n    return f1(x)\n\ndef g_of_g_of_minus_1():\n    return g(g(-1))\n\nprint(g_of_g_of_minus_1())\n```", "solution": "```python\nfrom math import sin, pi\n\ndef f1(x):\n    return -6*sin(x*pi/6)\n\ndef g(x):\n    return f1(x)\n\ndef g_of_g_of_minus_1():\n    return g(g(-1))\n\nprint(g_of_g_of_minus_1())\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-6.0", "model_answers": [-6.0], "answer": -6.0}, {"response": "**Solution**\n```python\nimport sympy\n\nc = sympy.Symbol('c')\nf = sympy.Function('f')\nx = sympy.Symbol('x')\n\nf_expr = (2*x**2 + x + 5)/(x**2 + 4*x + c)\nf_expr_expanded = f_expr.expand()\nf_expr_expanded_simplified = f_expr_expanded.simplify()\n\nprint(f_expr_expanded_simplified)\n\n# find the smallest integer value of c that makes the function have a domain of all real numbers\n# f(x) has a domain of all real numbers iff c!= -5\nc_solution = sympy.solve(f_expr_expanded_simplified - c + 5, c)\nprint(c_solution)\n```", "solution": "```python\nimport sympy\n\nc = sympy.Symbol('c')\nf = sympy.Function('f')\nx = sympy.Symbol('x')\n\nf_expr = (2*x**2 + x + 5)/(x**2 + 4*x + c)\nf_expr_expanded = f_expr.expand()\nf_expr_expanded_simplified = f_expr_expanded.simplify()\n\nprint(f_expr_expanded_simplified)\n\n# find the smallest integer value of c that makes the function have a domain of all real numbers\n# f(x) has a domain of all real numbers iff c!= -5\nc_solution = sympy.solve(f_expr_expanded_simplified - c + 5, c)\nprint(c_solution)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(2*x**2 + x + 5)/(c + x**2 + 4*x)\n[-(x - 1)*(x + 5)/2 - sqrt(x**4 + 8*x**3 + 34*x**2 + 44*x + 45)/2, -(x - 1)*(x + 5)/2 + sqrt(x**4 + 8*x**3 + 34*x**2 + 44*x + 45)/2]", "model_answers": [2.0, 2.0, 5.0, 2.0, 4.0, 1.0, 5.0, 2.0, 4.0, 8.0, 3.0, 34.0, 2.0, 44.0, 45.0, 2.0, 1.0, 5.0, 2.0, 4.0, 8.0, 3.0, 34.0, 2.0, 44.0, 45.0, 2.0], "answer": 5.0}, {"response": "**Solution**\n```python\nc = -1\nprint(c)\n```", "solution": "```python\nc = -1\nprint(c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-1", "model_answers": [-1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nx = 5 * 10 * 18 / 30\nprint(x)\n```", "solution": "```python\nx = 5 * 10 * 18 / 30\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "30.0", "model_answers": [30.0], "answer": 1.0}, {"response": "**Solution**\n```python\nm = 3\nprint(m)\n```", "solution": "```python\nm = 3\nprint(m)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": 2.0}, {"response": "**Solution**\n```python\nx = (-50) / (2 * 10)\nprint(x)\n```", "solution": "```python\nx = (-50) / (2 * 10)\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-2.5", "model_answers": [-2.5], "answer": 5.0}, {"response": "**Solution**\n```python\nimport math\n\nprint(math.log(4, 2))\n```", "solution": "```python\nimport math\n\nprint(math.log(4, 2))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.0", "model_answers": [2.0], "answer": 4.0}, {"response": "**Solution**\n```python\ny = 8 - 5 * (-2) + 4 * (-2) ** 2\nprint(y)\n```", "solution": "```python\ny = 8 - 5 * (-2) + 4 * (-2) ** 2\nprint(y)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "34", "model_answers": [34.0], "answer": 34.0}, {"response": "**Solution**\n```python\nx_list = [x for x in range(-100, 101) if abs(2-abs(x)) == 1]\nprint(sum([x**2 for x in x_list]))\n```", "solution": "```python\nx_list = [x for x in range(-100, 101) if abs(2-abs(x)) == 1]\nprint(sum([x**2 for x in x_list]))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "20", "model_answers": [20.0], "answer": 20.0}, {"response": "**Solution**\n```python\nimport sympy\nx, y, a, b, c = sympy.symbols('x, y, a, b, c')\nAB = (b - a) / (c - a)\nBC = (c - b) / (a - b)\nk = (AB + BC) / (1 + BC)\nprint(k)\n```", "solution": "```python\nimport sympy\nx, y, a, b, c = sympy.symbols('x, y, a, b, c')\nAB = (b - a) / (c - a)\nBC = (c - b) / (a - b)\nk = (AB + BC) / (1 + BC)\nprint(k)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "((-a + b)/(-a + c) + (-b + c)/(a - b))/(1 + (-b + c)/(a - b))", "model_answers": [1.0], "answer": 6.0}, {"response": "**Solution**\n```python\nimport math\n\namount_invested = 100000 / (1 - (1 + 0.06) ** -5)\nprint(math.ceil(amount_invested))\n```", "solution": "```python\nimport math\n\namount_invested = 100000 / (1 - (1 + 0.06) ** -5)\nprint(math.ceil(amount_invested))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "395661", "model_answers": [395661.0], "answer": 74726.0}, {"response": "**Solution**\n```python\nx = (5+6**0.5) / 2\nprint(x)\n```", "solution": "```python\nx = (5+6**0.5) / 2\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3.724744871391589", "model_answers": [3.724744871391589], "answer": 9.0}, {"response": "**Solution**\n```python\nfrom sympy import log\nprint(log(1, 2))\n```", "solution": "```python\nfrom sympy import log\nprint(log(1, 2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "0", "model_answers": [0.0], "answer": 0.0}, {"response": "**Solution**\n```python\nN = 3\nprint(N)\n```", "solution": "```python\nN = 3\nprint(N)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": 24.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\nA = 6\nB = 245 + 3 * sqrt(125) + 4 * sqrt(45)\nC = sqrt(B)\nprint(A/C)\nprint(A + B + C)\n```", "solution": "```python\nfrom sympy import sqrt\nA = 6\nB = 245 + 3 * sqrt(125) + 4 * sqrt(45)\nC = sqrt(B)\nprint(A/C)\nprint(A + B + C)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6/sqrt(27*sqrt(5) + 245)\nsqrt(27*sqrt(5) + 245) + 27*sqrt(5) + 251", "model_answers": [6.0, 27.0, 5.0, 245.0, 27.0, 5.0, 245.0, 27.0, 5.0, 251.0], "answer": 93.0}, {"response": "**Solution**\n```python\nimport sympy\n\nu = sympy.Symbol('u')\nexpr = (u+4)*(u-1) - (u-3)*(u+6)\nprint(expr.expand())\n```", "solution": "```python\nimport sympy\n\nu = sympy.Symbol('u')\nexpr = (u+4)*(u-1) - (u-3)*(u+6)\nprint(expr.expand())\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "14", "model_answers": [14.0], "answer": 14.0}, {"response": "**Solution**\n```python\nprint(abs(18*A-18*B))\n```", "solution": "```python\nprint(abs(18*A-18*B))\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 13.5}, {"response": "**Solution**\n```python\nfrom math import sin, cos, pi\n\ndef f(x):\n    return (4-x)/2\n\ndef g(x):\n    return 2*x - 4\n\nprint(f(g(1))*g(f(1)))\n```", "solution": "```python\nfrom math import sin, cos, pi\n\ndef f(x):\n    return (4-x)/2\n\ndef g(x):\n    return 2*x - 4\n\nprint(f(g(1))*g(f(1)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-3.0", "model_answers": [-3.0], "answer": -3.0}, {"response": "**Solution**\n```python\na = (20 - 44) / (2*2)\nb = 21 - 44\nprint(a + b)\n```", "solution": "```python\na = (20 - 44) / (2*2)\nb = 21 - 44\nprint(a + b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-29.0", "model_answers": [-29.0], "answer": 17.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\n# coordinates of point A\na = 3\nb = 4\n\n# coordinates of point B\nc = 6\nd = 8\n\n# coordinates of midpoint M\nm = (a + c) / 2\nn = (b + d) / 2\n\n# coordinates of point A'\na1 = a + 14\nb1 = b + 20\n\n# coordinates of point B'\nc1 = c - 2\nd1 = d - 4\n\n# coordinates of midpoint M'\nm1 = (a1 + c1) / 2\nn1 = (b1 + d1) / 2\n\n# distance between M and M'\ndistance = np.sqrt((m - m1) ** 2 + (n - n1) ** 2)\nprint(distance)\n```", "solution": "```python\nimport numpy as np\n\n# coordinates of point A\na = 3\nb = 4\n\n# coordinates of point B\nc = 6\nd = 8\n\n# coordinates of midpoint M\nm = (a + c) / 2\nn = (b + d) / 2\n\n# coordinates of point A'\na1 = a + 14\nb1 = b + 20\n\n# coordinates of point B'\nc1 = c - 2\nd1 = d - 4\n\n# coordinates of midpoint M'\nm1 = (a1 + c1) / 2\nn1 = (b1 + d1) / 2\n\n# distance between M and M'\ndistance = np.sqrt((m - m1) ** 2 + (n - n1) ** 2)\nprint(distance)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "10.0", "model_answers": [10.0], "answer": 10.0}, {"response": "**Solution**\n```python\nn = 20\nm = 2 * n\nx = 70 + m + n - 20\ny = 80\nprint(n)\nprint(m)\nprint(x)\nprint(y)\n```", "solution": "```python\nn = 20\nm = 2 * n\nx = 70 + m + n - 20\ny = 80\nprint(n)\nprint(m)\nprint(x)\nprint(y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "20\n40\n110\n80", "model_answers": [20.0, 40.0, 110.0, 80.0], "answer": 10.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\nexpr = (x+1)**48\nprint(expr.expand())\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\nexpr = (x+1)**48\nprint(expr.expand())\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "x**48 + 48*x**47 + 1128*x**46 + 17296*x**45 + 194580*x**44 + 1712304*x**43 + 12271512*x**42 + 73629072*x**41 + 377348994*x**40 + 1677106640*x**39 + 6540715896*x**38 + 22595200368*x**37 + 69668534468*x**36 + 192928249296*x**35 + 482320623240*x**34 + 1093260079344*x**33 + 2254848913647*x**32 + 4244421484512*x**31 + 7309837001104*x**30 + 11541847896480*x**29 + 16735679449896*x**28 + 22314239266528*x**27 + 27385657281648*x**26 + 30957699535776*x**25 + 32247603683100*x**24 + 30957699535776*x**23 + 27385657281648*x**22 + 22314239266528*x**21 + 16735679449896*x**20 + 11541847896480*x**19 + 7309837001104*x**18 + 4244421484512*x**17 + 2254848913647*x**16 + 1093260079344*x**15 + 482320623240*x**14 + 192928249296*x**13 + 69668534468*x**12 + 22595200368*x**11 + 6540715896*x**10 + 1677106640*x**9 + 377348994*x**8 + 73629072*x**7 + 12271512*x**6 + 1712304*x**5 + 194580*x**4 + 17296*x**3 + 1128*x**2 + 48*x + 1", "model_answers": [48.0, 48.0, 47.0, 1128.0, 46.0, 17296.0, 45.0, 194580.0, 44.0, 1712304.0, 43.0, 12271512.0, 42.0, 73629072.0, 41.0, 377348994.0, 40.0, 1677106640.0, 39.0, 6540715896.0, 38.0, 22595200368.0, 37.0, 69668534468.0, 36.0, 192928249296.0, 35.0, 482320623240.0, 34.0, 1093260079344.0, 33.0, 2254848913647.0, 32.0, 4244421484512.0, 31.0, 7309837001104.0, 30.0, 11541847896480.0, 29.0, 16735679449896.0, 28.0, 22314239266528.0, 27.0, 27385657281648.0, 26.0, 30957699535776.0, 25.0, 32247603683100.0, 24.0, 30957699535776.0, 23.0, 27385657281648.0, 22.0, 22314239266528.0, 21.0, 16735679449896.0, 20.0, 11541847896480.0, 19.0, 7309837001104.0, 18.0, 4244421484512.0, 17.0, 2254848913647.0, 16.0, 1093260079344.0, 15.0, 482320623240.0, 14.0, 192928249296.0, 13.0, 69668534468.0, 12.0, 22595200368.0, 11.0, 6540715896.0, 10.0, 1677106640.0, 9.0, 377348994.0, 8.0, 73629072.0, 7.0, 12271512.0, 6.0, 1712304.0, 5.0, 194580.0, 4.0, 17296.0, 3.0, 1128.0, 2.0, 48.0, 1.0], "answer": 125.0}, {"response": "**Solution**\n```python\nf = lambda x: x + 1\ng = lambda x: x ** 2 + 3\nprint(f(g(2)))\n```", "solution": "```python\nf = lambda x: x + 1\ng = lambda x: x ** 2 + 3\nprint(f(g(2)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "8", "model_answers": [8.0], "answer": 8.0}, {"response": "**Solution**\n```python\n# ceil(x) returns the smallest integer not less than x\n# (a) ceil(3.6) = 4\n# (b) ceil(3.6)^2 = 16\n# (c) 16 - 16 = 0\nprint(0)\n```", "solution": "```python\n# ceil(x) returns the smallest integer not less than x\n# (a) ceil(3.6) = 4\n# (b) ceil(3.6)^2 = 16\n# (c) 16 - 16 = 0\nprint(0)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": -3.0}, {"response": "**Solution**\n```python\nn = 400 - 81 - 81\nprint(n)\n```", "solution": "```python\nn = 400 - 81 - 81\nprint(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "238", "model_answers": [238.0], "answer": 121.0}, {"response": "**Solution**\n```python\nfrom sympy import *\nx = symbols('x')\nprint(49*x**2+14*x*(19-7*x)+(19-7*x)**2)\n```", "solution": "```python\nfrom sympy import *\nx = symbols('x')\nprint(49*x**2+14*x*(19-7*x)+(19-7*x)**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "49*x**2 + 14*x*(19 - 7*x) + (19 - 7*x)**2", "model_answers": [49.0, 2.0, 14.0, 19.0, 7.0, 19.0, 7.0, 2.0], "answer": 361.0}, {"response": "**Solution**\n```python\nimport sympy as sp\na = sp.Symbol('a')\nb = sp.Symbol('b')\neq1 = 5 * a + 2 * b\neq2 = a * b\nsol = sp.solve([eq1, eq2], [a, b])\nprint(sol)\n```", "solution": "```python\nimport sympy as sp\na = sp.Symbol('a')\nb = sp.Symbol('b')\neq1 = 5 * a + 2 * b\neq2 = a * b\nsol = sp.solve([eq1, eq2], [a, b])\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(0, 0)]", "model_answers": [0.0, 0.0], "answer": 2.0}, {"response": "**Solution**\n```python\ndef zeno_painting(size):\n    days = 0\n    while size > 1:\n        days += 1\n        size /= 2\n    return days\n\nprint(zeno_painting(15*15))\n```", "solution": "```python\ndef zeno_painting(size):\n    days = 0\n    while size > 1:\n        days += 1\n        size /= 2\n    return days\n\nprint(zeno_painting(15*15))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "8", "model_answers": [8.0], "answer": 8.0}, {"response": "**Solution**\n```python\nx = 1\nprint(x**3 - 2*x + 1)\n```", "solution": "```python\nx = 1\nprint(x**3 - 2*x + 1)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 2.0}, {"response": "**Solution**\n```python\n# a + b*sqrt(c)\na = 6\nb = 1\nc = 2 + 6 + 2 + 6\nprint(a+b+c)\n```", "solution": "```python\n# a + b*sqrt(c)\na = 6\nb = 1\nc = 2 + 6 + 2 + 6\nprint(a+b+c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "23", "model_answers": [23.0], "answer": 8.0}, {"response": "**Solution**\n```python\nabby_and_damon_weight = 200 - 180\nprint(abby_and_damon_weight)\n```", "solution": "```python\nabby_and_damon_weight = 200 - 180\nprint(abby_and_damon_weight)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "20", "model_answers": [20.0], "answer": 180.0}, {"response": "**Solution**\n```python\nx = -5\ny = 3\nprint(x + y)\n```", "solution": "```python\nx = -5\ny = 3\nprint(x + y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-2", "model_answers": [-2.0], "answer": 4.0}, {"response": "**Solution**\n```python\nA = 1\nB = 2\nC = 3\nD = 2\nprint(A+B+C+D)\n```", "solution": "```python\nA = 1\nB = 2\nC = 3\nD = 2\nprint(A+B+C+D)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 13.0}, {"response": "**Solution**\n```python\na = 2\nb = 1\nprint(a+b)\n```", "solution": "```python\na = 2\nb = 1\nprint(a+b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": -1.0}, {"response": "**Solution**\n```python\nfrom sympy import solve\n\n# Step 1\n# Solve for n\n# m + n + p = 25 / (m + n + p)\n# m + n + p = 25 / (m + n + p)\n# m + n + p - 25 / (m + n + p) = 0\n# (m + n + p) (m + n + p - 25) = 0\n# m + n + p = 0 or m + n + p = 25\n# n + p = -m or n + p = 25 - m\n\n# Step 2\n# Solve for p\n# mn + mp + np = 4\n# m^2n + mnp + np^2 = 4\n# m^2n + mnp - 4 = 0\n# (m^2 - 4)(n + p) = 0\n# (m^2 - 4)n + (m^2 - 4)p = 0\n# n + p = -4/m^2 or n + p = 4/m^2\n\n# Step 3\n# Solve for m\n# m + n + p = 25\n# m + n + p = 25\n# m + n + p - 25 = 0\n# (m + n + p) (m + n + p - 25) = 0\n# m + n + p = 0 or m + n + p = 25\n# n + p = -m or n + p = 25 - m\n\n# Step 4\n# Solve for mnp\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp", "solution": "```python\nfrom sympy import solve\n\n# Step 1\n# Solve for n\n# m + n + p = 25 / (m + n + p)\n# m + n + p = 25 / (m + n + p)\n# m + n + p - 25 / (m + n + p) = 0\n# (m + n + p) (m + n + p - 25) = 0\n# m + n + p = 0 or m + n + p = 25\n# n + p = -m or n + p = 25 - m\n\n# Step 2\n# Solve for p\n# mn + mp + np = 4\n# m^2n + mnp + np^2 = 4\n# m^2n + mnp - 4 = 0\n# (m^2 - 4)(n + p) = 0\n# (m^2 - 4)n + (m^2 - 4)p = 0\n# n + p = -4/m^2 or n + p = 4/m^2\n\n# Step 3\n# Solve for m\n# m + n + p = 25\n# m + n + p = 25\n# m + n + p - 25 = 0\n# (m + n + p) (m + n + p - 25) = 0\n# m + n + p = 0 or m + n + p = 25\n# n + p = -m or n + p = 25 - m\n\n# Step 4\n# Solve for mnp\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp", "function": [], "is_success": true, "is_correct": false, "exec_output": "", "model_answers": [], "answer": 7.0}, {"response": "**Solution**\n```python\nfrom sympy import I, S\n\ndef f(z):\n    if z.is_real:\n        return z + 2\n    else:\n        return z ** 2\n\nprint(f(I) + f(S(1)) + f(S(-1)) + f(-I))\n```", "solution": "```python\nfrom sympy import I, S\n\ndef f(z):\n    if z.is_real:\n        return z + 2\n    else:\n        return z ** 2\n\nprint(f(I) + f(S(1)) + f(S(-1)) + f(-I))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2", "model_answers": [2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nsum = 0\nfor x in range(-30, 27):\n    sum += x\nprint(sum)\n```", "solution": "```python\nsum = 0\nfor x in range(-30, 27):\n    sum += x\nprint(sum)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-114", "model_answers": [-114.0], "answer": -114.0}, {"response": "**Solution**\n```python\n# number of cookies needed\nnum_cookies = 216\n# number of sticks of butter needed\nnum_sticks = num_cookies / 8\nprint(num_sticks)\n```", "solution": "```python\n# number of cookies needed\nnum_cookies = 216\n# number of sticks of butter needed\nnum_sticks = num_cookies / 8\nprint(num_sticks)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "27.0", "model_answers": [27.0], "answer": 6.0}, {"response": "**Solution**\n```python\nx = -5 / y\nprint(4 * x**2 + 9 * y**2)\n```", "solution": "```python\nx = -5 / y\nprint(4 * x**2 + 9 * y**2)\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 64.0}, {"response": "**Solution**\n```python\nfor x in range(1, 5):\n    if x**2 - 10*x + 16 == 0:\n        print(x)\n```", "solution": "```python\nfor x in range(1, 5):\n    if x**2 - 10*x + 16 == 0:\n        print(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 10.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.symbols('x')\ny = (x+1)/(x**2-2*x+1)\nprint(y.as_numer_denom()[0].as_expr())\n```", "solution": "```python\nimport sympy\nx = sympy.symbols('x')\ny = (x+1)/(x**2-2*x+1)\nprint(y.as_numer_denom()[0].as_expr())\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "x + 1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return (x-0.5)*(x-2.5)*(x-6.5)*(x-7.5)/16+x\n\ntotal = 0\nfor x in range(9):\n    if f(x) > x:\n        total += x\nprint(total)\n```", "solution": "```python\ndef f(x):\n    return (x-0.5)*(x-2.5)*(x-6.5)*(x-7.5)/16+x\n\ntotal = 0\nfor x in range(9):\n    if f(x) > x:\n        total += x\nprint(total)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "26", "model_answers": [26.0], "answer": 26.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return x**2\n\nx = 0.5\ny = f(x)\nprint(x, y)\n\nx = 8/2\ny = f(x)\nprint(x, y)\n\nx = 8\ny = f(x/2)\nprint(x, y)\n\nx = 0.5\ny = f(x)\nprint(x, y)\n```", "solution": "```python\ndef f(x):\n    return x**2\n\nx = 0.5\ny = f(x)\nprint(x, y)\n\nx = 8/2\ny = f(x)\nprint(x, y)\n\nx = 8\ny = f(x/2)\nprint(x, y)\n\nx = 0.5\ny = f(x)\nprint(x, y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.5 0.25\n4.0 16.0\n8 16.0\n0.5 0.25", "model_answers": [0.5, 0.25, 4.0, 16.0, 8.0, 16.0, 0.5, 0.25], "answer": 36.0}, {"response": "**Solution**\n```python\nf = lambda x: 5 * x + 2\ng = lambda x: 3 * x ** 2 - 4 * x\nprint(f(f(1)) - g(g(2)))\n```", "solution": "```python\nf = lambda x: 5 * x + 2\ng = lambda x: 3 * x ** 2 - 4 * x\nprint(f(f(1)) - g(g(2)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "5", "model_answers": [5.0], "answer": 5.0}, {"response": "**Solution**\n```python\nx = (13 + (-16) + 6) / 3\ny = 8 ** (1/3)\nprint(x**2 + y**3)\n```", "solution": "```python\nx = (13 + (-16) + 6) / 3\ny = 8 ** (1/3)\nprint(x**2 + y**3)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "9.0", "model_answers": [9.0], "answer": 9.0}, {"response": "**Solution**\n```python\nx = (1/2) * (2 + 9)\nprint(x)\n```", "solution": "```python\nx = (1/2) * (2 + 9)\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5.5", "model_answers": [5.5], "answer": -11.0}, {"response": "**Solution**\n```python\ntotal = sum(range(28, 87, 2))\nprint(total)\n```", "solution": "```python\ntotal = sum(range(28, 87, 2))\nprint(total)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1710", "model_answers": [1710.0], "answer": 1710.0}, {"response": "**Solution**\n```python\ndef f(x):\n    if x >= a:\n        return a*x**2\n    else:\n        return a*x + 2*a\n\na = 1\nwhile f(a) < 0:\n    a += 1\nprint(a)\n```", "solution": "```python\ndef f(x):\n    if x >= a:\n        return a*x**2\n    else:\n        return a*x + 2*a\n\na = 1\nwhile f(a) < 0:\n    a += 1\nprint(a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1", "model_answers": [1.0], "answer": 2.0}, {"response": "**Solution**\n```python\ng_degree = 8 - 4\nprint(g_degree)\n```", "solution": "```python\ng_degree = 8 - 4\nprint(g_degree)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4", "model_answers": [4.0], "answer": 2.0}, {"response": "**Solution**\n```python\n# using sympy\nfrom sympy import Symbol, Eq, solve\nx = Symbol('x')\nm = Symbol('m')\neq = Eq(3*x**2-4*x+1, m*(x-1))\nprint(solve(eq, x))\n```", "solution": "```python\n# using sympy\nfrom sympy import Symbol, Eq, solve\nx = Symbol('x')\nm = Symbol('m')\neq = Eq(3*x**2-4*x+1, m*(x-1))\nprint(solve(eq, x))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[1, m/3 + 1/3]", "model_answers": [1.0, 3.0, 1.0, 3.0], "answer": 2.0}, {"response": "**Solution**\n```python\nfrom sympy import simplify\nfrom sympy.abc import x\n\npolynomial = 3*(x-4) + 2*(x**2-x+7) - 5*(x-1)\nsimplified = simplify(polynomial)\n\nprint(simplified)\n```", "solution": "```python\nfrom sympy import simplify\nfrom sympy.abc import x\n\npolynomial = 3*(x-4) + 2*(x**2-x+7) - 5*(x-1)\nsimplified = simplify(polynomial)\n\nprint(simplified)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2*x**2 - 4*x + 7", "model_answers": [2.0, 2.0, 4.0, 7.0], "answer": 7.0}, {"response": "**Solution**\n```python\nprint((1+3)**3)\n```", "solution": "```python\nprint((1+3)**3)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "64", "model_answers": [64.0], "answer": 64.0}, {"response": "**Solution**\n```python\ncurrent_20_ohms = 40 / 20\nprint(current_20_ohms)\n```", "solution": "```python\ncurrent_20_ohms = 40 / 20\nprint(current_20_ohms)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.0", "model_answers": [2.0], "answer": 6.0}, {"response": "**Solution**\n```python\nimport math\nx = math.log(2 ** 12, 1 / 8)\nprint(x)\n```", "solution": "```python\nimport math\nx = math.log(2 ** 12, 1 / 8)\nprint(x)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-4.0", "model_answers": [-4.0], "answer": -4.0}, {"response": "**Solution**\n```python\nfrom math import log\n\nresult = log(5**4, 5**2)\nprint(result)\n```", "solution": "```python\nfrom math import log\n\nresult = log(5**4, 5**2)\nprint(result)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2.0", "model_answers": [2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nfrom sympy import symbols, solve\nx = symbols('x')\nf = 4*x**3 + 1\nf_inv = solve(f - 33, x)[0]\nprint(f_inv)\n```", "solution": "```python\nfrom sympy import symbols, solve\nx = symbols('x')\nf = 4*x**3 + 1\nf_inv = solve(f - 33, x)[0]\nprint(f_inv)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2", "model_answers": [2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol\nk = Symbol('k')\nx1 = (-5 + k**0.5*11) / 6\nx2 = (-5 - k**0.5*11) / 6\nprint(x1, x2)\n```", "solution": "```python\nfrom sympy import Symbol\nk = Symbol('k')\nx1 = (-5 + k**0.5*11) / 6\nx2 = (-5 - k**0.5*11) / 6\nprint(x1, x2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "11*k**0.5/6 - 5/6 -11*k**0.5/6 - 5/6", "model_answers": [11.0, 0.5, 6.0, 5.0, 6.0, -11.0, 0.5, 6.0, 5.0, 6.0], "answer": 3.0}, {"response": "**Solution**\n```python\nfrom sympy import I\n\na = 2 - 2 * I\nb = 5 + 5 * I\n\nprint(a * b)\n```", "solution": "```python\nfrom sympy import I\n\na = 2 - 2 * I\nb = 5 + 5 * I\n\nprint(a * b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(2 - 2*I)*(5 + 5*I)", "model_answers": [2.0, 2.0, 5.0, 5.0], "answer": 20.0}, {"response": "**Solution**\n```python\ntotal_seats = 450\nrows = total_seats // 3\nprint(rows + 5)\n```", "solution": "```python\ntotal_seats = 450\nrows = total_seats // 3\nprint(rows + 5)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "155", "model_answers": [155.0], "answer": 25.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return 2*x + 1\n\ndef f_inv(x):\n    return (x - 4) // 2\n\nprint(f_inv(17))\n```", "solution": "```python\ndef f(x):\n    return 2*x + 1\n\ndef f_inv(x):\n    return (x - 4) // 2\n\nprint(f_inv(17))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": 23.0}, {"response": "**Solution**\n```python\nfrom sympy import solve\nsol = solve(\n    (5*x - 16) / (x**2 - 7*x + 10) - (A / (x - 2) + B / (x - 5)),\n    [A, B],\n)\nprint(sol[0][A] + sol[0][B])\n```", "solution": "```python\nfrom sympy import solve\nsol = solve(\n    (5*x - 16) / (x**2 - 7*x + 10) - (A / (x - 2) + B / (x - 5)),\n    [A, B],\n)\nprint(sol[0][A] + sol[0][B])\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 5.0}, {"response": "**Solution**\n```python\nimport math\nprint(math.log2(32) - 2)\n```", "solution": "```python\nimport math\nprint(math.log2(32) - 2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3.0", "model_answers": [3.0], "answer": 3.0}, {"response": "**Solution**\n```python\ndef P(x):\n    return 4 * x ** 3 - 2 * x ** 2 + 7 * x - 1\n\ndef Q(x):\n    return P(x) ** 2\n\ny_intercept = Q(0)\nprint(y_intercept)\n```", "solution": "```python\ndef P(x):\n    return 4 * x ** 3 - 2 * x ** 2 + 7 * x - 1\n\ndef Q(x):\n    return P(x) ** 2\n\ny_intercept = Q(0)\nprint(y_intercept)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nn = 241 // 2\nprint(n)\n```", "solution": "```python\nn = 241 // 2\nprint(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "120", "model_answers": [120.0], "answer": 23.0}, {"response": "**Solution**\n```python\n# floor of 52/3 = 16\n# floor of 5/23 = 0\n# ceiling of 16/0 = 17\nprint(17)\n```", "solution": "```python\n# floor of 52/3 = 16\n# floor of 5/23 = 0\n# ceiling of 16/0 = 17\nprint(17)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "17", "model_answers": [17.0], "answer": 79.0}, {"response": "**Solution**\n```python\nx = 5\nprint(x)\n```", "solution": "```python\nx = 5\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5", "model_answers": [5.0], "answer": -4.0}, {"response": "**Solution**\n```python\nfrom sympy import solve, var\nx = var('x')\ny = -(x+1)**2 + 1\nsol = solve(y, x)\na = sol[0]\nb = sol[1]\nprint(b-a)\n```", "solution": "```python\nfrom sympy import solve, var\nx = var('x')\ny = -(x+1)**2 + 1\nsol = solve(y, x)\na = sol[0]\nb = sol[1]\nprint(b-a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 4.0}, {"response": "**Solution**\n```python\nfrom math import log\n\na = 1\nb = 0.5\n\nS = 1 / (1 - b)\n\na_plus_b = a + b\n\nprint(a_plus_b)\n```", "solution": "```python\nfrom math import log\n\na = 1\nb = 0.5\n\nS = 1 / (1 - b)\n\na_plus_b = a + b\n\nprint(a_plus_b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.5", "model_answers": [1.5], "answer": 1.0}, {"response": "**Solution**\n```python\na2 = a3 = 5\na4 = 3 * a2\na5 = 3 * a3\nprint(a5 / a3)\n```", "solution": "```python\na2 = a3 = 5\na4 = 3 * a2\na5 = 3 * a3\nprint(a5 / a3)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3.0", "model_answers": [3.0], "answer": 2.0}, {"response": "**Solution**\n```python\nprint(989 ** 2)\n```", "solution": "```python\nprint(989 ** 2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "978121", "model_answers": [978121.0], "answer": 978121.0}, {"response": "**Solution**\n```python\na = 9\nb = 3\nc = -a/b\nprint(c)\n```", "solution": "```python\na = 9\nb = 3\nc = -a/b\nprint(c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-3.0", "model_answers": [-3.0], "answer": 36.0}, {"response": "**Solution**\n```python\ny_intercept = -6 / 4\nprint(y_intercept)\n```", "solution": "```python\ny_intercept = -6 / 4\nprint(y_intercept)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-1.5", "model_answers": [-1.5], "answer": -10.0}, {"response": "**Solution**\n```python\nimport sympy\n\nx, y, c = sympy.symbols('x y c')\n\ncircle_equation = x**2 + 8*x + y**2 + 4*y + c\n\nradius = 3\n\nprint(sympy.solve(circle_equation.subs(y, 0) - radius, c))\n```", "solution": "```python\nimport sympy\n\nx, y, c = sympy.symbols('x y c')\n\ncircle_equation = x**2 + 8*x + y**2 + 4*y + c\n\nradius = 3\n\nprint(sympy.solve(circle_equation.subs(y, 0) - radius, c))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[-x**2 - 8*x + 3]", "model_answers": [2.0, 8.0, 3.0], "answer": 11.0}, {"response": "**Solution**\n```python\nfrom math import log\na = int(log(2938, 8))\nb = int(log(2938, 8) + 1)\nprint(a+b)\n```", "solution": "```python\nfrom math import log\na = int(log(2938, 8))\nb = int(log(2938, 8) + 1)\nprint(a+b)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "7", "model_answers": [7.0], "answer": 7.0}, {"response": "**Solution**\n```python\nquarts = 2/0.25\nprint(quarts)\n```", "solution": "```python\nquarts = 2/0.25\nprint(quarts)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "8.0", "model_answers": [8.0], "answer": 8.0}, {"response": "**Solution**\n```python\nf(2**2 + 3)\n```", "solution": "```python\nf(2**2 + 3)\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 10.0}, {"response": "**Solution**\n```python\nimport sympy as sp\nx = sp.Symbol('x')\nk = (x - 1)**2 - (x + 1)**2\nsol = sp.solve(k, x)\nprint(sol)\n```", "solution": "```python\nimport sympy as sp\nx = sp.Symbol('x')\nk = (x - 1)**2 - (x + 1)**2\nsol = sp.solve(k, x)\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[0]", "model_answers": [0.0], "answer": 4.0}, {"response": "**Solution**\n```python\n# m = 2\nprint(2)\n```", "solution": "```python\n# m = 2\nprint(2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 1.0}, {"response": "**Solution**\n```python\nshoe_size = 42 - 6\nprint(shoe_size)\n```", "solution": "```python\nshoe_size = 42 - 6\nprint(shoe_size)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "36", "model_answers": [36.0], "answer": 28.0}, {"response": "**Solution**\n```python\nf_4 = 3120\nf_m4 = -60 / 13\na = (f_4 - f_m4) / (4 - (-4))\nb = (f_4 - f_m4) / (4 - (-4))\nprint(a + b)\n```", "solution": "```python\nf_4 = 3120\nf_m4 = -60 / 13\na = (f_4 - f_m4) / (4 - (-4))\nb = (f_4 - f_m4) / (4 - (-4))\nprint(a + b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "781.1538461538462", "model_answers": [781.1538461538462], "answer": 28.0}, {"response": "**Solution**\n```python\nimport math\nprint(math.log(81, 3))\n```", "solution": "```python\nimport math\nprint(math.log(81, 3))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4.0", "model_answers": [4.0], "answer": 4.0}, {"response": "**Solution**\n```python\nt = 2.4 / 3.5\nprint(t)\n```", "solution": "```python\nt = 2.4 / 3.5\nprint(t)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.6857142857142857", "model_answers": [0.6857142857142857], "answer": 0.43}, {"response": "**Solution**\n```python\nprint((4**3 + 2**3) - (3**3 + 1**3))\n```", "solution": "```python\nprint((4**3 + 2**3) - (3**3 + 1**3))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "44", "model_answers": [44.0], "answer": 44.0}, {"response": "**Solution**\n```python\nx = 24\ny = 73 - x\nprint(y**2)\n```", "solution": "```python\nx = 24\ny = 73 - x\nprint(y**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2401", "model_answers": [2401.0], "answer": 25.0}, {"response": "**Solution**\n```python\ndef D(a, b, c):\n    return a * b * c / (a + b + c)\n\nprint(D(2, 4, 6))\n```", "solution": "```python\ndef D(a, b, c):\n    return a * b * c / (a + b + c)\n\nprint(D(2, 4, 6))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4.0", "model_answers": [4.0], "answer": 4.0}, {"response": "**Solution**\n```python\nprint((26**2 - 24**2 - 10)**2 - 10**2)\n```", "solution": "```python\nprint((26**2 - 24**2 - 10)**2 - 10**2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "8000", "model_answers": [8000.0], "answer": 8000.0}, {"response": "**Solution**\n```python\nx = 73\ny = 86\nprint(y - x)\n```", "solution": "```python\nx = 73\ny = 86\nprint(y - x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "13", "model_answers": [13.0], "answer": 27.0}, {"response": "**Solution**\n```python\ndef harmonic_mean(x, y):\n    return 20\n\ndef arithmetic_mean(x, y):\n    return (x + y) / 2\n\ndef reciprocal(x):\n    return 1 / x\n\ndef main():\n    for x in range(1, 100):\n        for y in range(x, 100):\n            if harmonic_mean(x, y) == 20:\n                print((x, y))\n\nif __name__ == \"__main__\":\n    main()\n```", "solution": "```python\ndef harmonic_mean(x, y):\n    return 20\n\ndef arithmetic_mean(x, y):\n    return (x + y) / 2\n\ndef reciprocal(x):\n    return 1 / x\n\ndef main():\n    for x in range(1, 100):\n        for y in range(x, 100):\n            if harmonic_mean(x, y) == 20:\n                print((x, y))\n\nif __name__ == \"__main__\":\n    main()\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(1, 1)\n(1, 2)\n(1, 3)\n(1, 4)\n(1, 5)\n(1, 6)\n(1, 7)\n(1, 8)\n(1, 9)\n(1, 10)\n(1, 11)\n(1, 12)\n(1, 13)\n(1, 14)\n(1, 15)\n(1, 16)\n(1, 17)\n(1, 18)\n(1, 19)\n(1, 20)\n(1, 21)\n(1, 22)\n(1, 23)\n(1, 24)\n(1, 25)\n(1, 26)\n(1, 27)\n(1, 28)\n(1, 29)\n(1, 30)\n(1, 31)\n(1, 32)\n(1, 33)\n(1, 34)\n(1, 35)\n(1, 36)\n(1, 37)\n(1, 38)\n(1, 39)\n(1, 40)\n(1, 41)\n(1, 42)\n(1, 43)\n(1, 44)\n(1, 45)\n(1, 46)\n(1, 47)\n(1, 48)\n(1, 49)\n(1, 50)\n(1, 51)\n(1, 52)\n(1, 53)\n(1, 54)\n(1, 55)\n(1, 56)\n(1, 57)\n(1, 58)\n(1, 59)\n(1, 60)\n(1, 61)\n(1, 62)\n(1, 63)\n(1, 64)\n(1, 65)\n(1, 66)\n(1, 67)\n(1, 68)\n(1, 69)\n(1, 70)\n(1, 71)\n(1, 72)\n(1, 73)\n(1, 74)\n(1, 75)\n(1, 76)\n(1, 77)\n(1, 78)\n(1, 79)\n(1, 80)\n(1, 81)\n(1, 82)\n(1, 83)\n(1, 84)\n(1, 85)\n(1, 86)\n(1, 87)\n(1, 88)\n(1, 89)\n(1, 90)\n(1, 91)\n(1, 92)\n(1, 93)\n(1, 94)\n(1, 95)\n(1, 96)\n(1, 97)\n(1, 98)\n(1, 99)\n(2, 2)\n(2, 3)\n(2, 4)\n(2, 5)\n(2, 6)\n(2, 7)\n(2, 8)\n(2, 9)\n(2, 10)\n(2, 11)\n(2, 12)\n(2, 13)\n(2, 14)\n(2, 15)\n(2, 16)\n(2, 17)\n(2, 18)\n(2, 19)\n(2, 20)\n(2, 21)\n(2, 22)\n(2, 23)\n(2, 24)\n(2, 25)\n(2, 26)\n(2, 27)\n(2, 28)\n(2, 29)\n(2, 30)\n(2, 31)\n(2, 32)\n(2, 33)\n(2, 34)\n(2, 35)\n(2, 36)\n(2, 37)\n(2, 38)\n(2, 39)\n(2, 40)\n(2, 41)\n(2, 42)\n(2, 43)\n(2, 44)\n(2, 45)\n(2, 46)\n(2, 47)\n(2, 48)\n(2, 49)\n(2, 50)\n(2, 51)\n(2, 52)\n(2, 53)\n(2, 54)\n(2, 55)\n(2, 56)\n(2, 57)\n(2, 58)\n(2, 59)\n(2, 60)\n(2, 61)\n(2, 62)\n(2, 63)\n(2, 64)\n(2, 65)\n(2, 66)\n(2, 67)\n(2, 68)\n(2, 69)\n(2, 70)\n(2, 71)\n(2, 72)\n(2, 73)\n(2, 74)\n(2, 75)\n(2, 76)\n(2, 77)\n(2, 78)\n(2, 79)\n(2, 80)\n(2, 81)\n(2, 82)\n(2, 83)\n(2, 84)\n(2, 85)\n(2, 86)\n(2, 87)\n(2, 88)\n(2, 89)\n(2, 90)\n(2, 91)\n(2, 92)\n(2, 93)\n(2, 94)\n(2, 95)\n(2, 96)\n(2, 97)\n(2, 98)\n(2, 99)\n(3, 3)\n(3, 4)\n(3, 5)\n(3, 6)\n(3, 7)\n(3, 8)\n(3, 9)\n(3, 10)\n(3, 11)\n(3, 12)\n(3, 13)\n(3, 14)\n(3, 15)\n(3, 16)\n(3, 17)\n(3, 18)\n(3, 19)\n(3, 20)\n(3, 21)\n(3, 22)\n(3, 23)\n(3, 24)\n(3, 25)\n(3, 26)\n(3, 27)\n(3, 28)\n(3, 29)\n(3, 30)\n(3, 31)\n(3, 32)\n(3, 33)\n(3, 34)\n(3, 35)\n(3, 36)\n(3, 37)\n(3, 38)\n(3, 39)\n(3, 40)\n(3, 41)\n(3, 42)\n(3, 43)\n(3, 44)\n(3, 45)\n(3, 46)\n(3, 47)\n(3, 48)\n(3, 49)\n(3, 50)\n(3, 51)\n(3, 52)\n(3, 53)\n(3, 54)\n(3, 55)\n(3, 56)\n(3, 57)\n(3, 58)\n(3, 59)\n(3, 60)\n(3, 61)\n(3, 62)\n(3, 63)\n(3, 64)\n(3, 65)\n(3, 66)\n(3, 67)\n(3, 68)\n(3, 69)\n(3, 70)\n(3, 71)\n(3, 72)\n(3, 73)\n(3, 74)\n(3, 75)\n(3, 76)\n(3, 77)\n(3, 78)\n(3, 79)\n(3, 80)\n(3, 81)\n(3, 82)\n(3, 83)\n(3, 84)\n(3, 85)\n(3, 86)\n(3, 87)\n(3, 88)\n(3, 89)\n(3, 90)\n(3, 91)\n(3, 92)\n(3, 93)\n(3, 94)\n(3, 95)\n(3, 96)\n(3, 97)\n(3, 98)\n(3, 99)\n(4, 4)\n(4, 5)\n(4, 6)\n(4, 7)\n(4, 8)\n(4, 9)\n(4, 10)\n(4, 11)\n(4, 12)\n(4, 13)\n(4, 14)\n(4, 15)\n(4, 16)\n(4, 17)\n(4, 18)\n(4, 19)\n(4, 20)\n(4, 21)\n(4, 22)\n(4, 23)\n(4, 24)\n(4, 25)\n(4, 26)\n(4, 27)\n(4, 28)\n(4, 29)\n(4, 30)\n(4, 31)\n(4, 32)\n(4, 33)\n(4, 34)\n(4, 35)\n(4, 36)\n(4, 37)\n(4, 38)\n(4, 39)\n(4, 40)\n(4, 41)\n(4, 42)\n(4, 43)\n(4, 44)\n(4, 45)\n(4, 46)\n(4, 47)\n(4, 48)\n(4, 49)\n(4, 50)\n(4, 51)\n(4, 52)\n(4, 53)\n(4, 54)\n(4, 55)\n(4, 56)\n(4, 57)\n(4, 58)\n(4, 59)\n(4, 60)\n(4, 61)\n(4, 62)\n(4, 63)\n(4, 64)\n(4, 65)\n(4, 66)\n(4, 67)\n(4, 68)\n(4, 69)\n(4, 70)\n(4, 71)\n(4, 72)\n(4, 73)\n(4, 74)\n(4, 75)\n(4, 76)\n(4, 77)\n(4, 78)\n(4, 79)\n(4, 80)\n(4, 81)\n(4, 82)\n(4, 83)\n(4, 84)\n(4, 85)\n(4, 86)\n(4, 87)\n(4, 88)\n(4, 89)\n(4, 90)\n(4, 91)\n(4, 92)\n(4, 93)\n(4, 94)\n(4, 95)\n(4, 96)\n(4, 97)\n(4, 98)\n(4, 99)\n(5, 5)\n(5, 6)\n(5, 7)\n(5, 8)\n(5, 9)\n(5, 10)\n(5, 11)\n(5, 12)\n(5, 13)\n(5, 14)\n(5, 15)\n(5, 16)\n(5, 17)\n(5, 18)\n(5, 19)\n(5, 20)\n(5, 21)\n(5, 22)\n(5, 23)\n(5, 24)\n(5, 25)\n(5, 26)\n(5, 27)\n(5, 28)\n(5, 29)\n(5, 30)\n(5, 31)\n(5, 32)\n(5, 33)\n(5, 34)\n(5, 35)\n(5, 36)\n(5, 37)\n(5, 38)\n(5, 39)\n(5, 40)\n(5, 41)\n(5, 42)\n(5, 43)\n(5, 44)\n(5, 45)\n(5, 46)\n(5, 47)\n(5, 48)\n(5, 49)\n(5, 50)\n(5, 51)\n(5, 52)\n(5, 53)\n(5, 54)\n(5, 55)\n(5, 56)\n(5, 57)\n(5, 58)\n(5, 59)\n(5, 60)\n(5, 61)\n(5, 62)\n(5, 63)\n(5, 64)\n(5, 65)\n(5, 66)\n(5, 67)\n(5, 68)\n(5, 69)\n(5, 70)\n(5, 71)\n(5, 72)\n(5, 73)\n(5, 74)\n(5, 75)\n(5, 76)\n(5, 77)\n(5, 78)\n(5, 79)\n(5, 80)\n(5, 81)\n(5, 82)\n(5, 83)\n(5, 84)\n(5, 85)\n(5, 86)\n(5, 87)\n(5, 88)\n(5, 89)\n(5, 90)\n(5, 91)\n(5, 92)\n(5, 93)\n(5, 94)\n(5, 95)\n(5, 96)\n(5, 97)\n(5, 98)\n(5, 99)\n(6, 6)\n(6, 7)\n(6, 8)\n(6, 9)\n(6, 10)\n(6, 11)\n(6, 12)\n(6, 13)\n(6, 14)\n(6, 15)\n(6, 16)\n(6, 17)\n(6, 18)\n(6, 19)\n(6, 20)\n(6, 21)\n(6, 22)\n(6, 23)\n(6, 24)\n(6, 25)\n(6, 26)\n(6, 27)\n(6, 28)\n(6, 29)\n(6, 30)\n(6, 31)\n(6, 32)\n(6, 33)\n(6, 34)\n(6, 35)\n(6, 36)\n(6, 37)\n(6, 38)\n(6, 39)\n(6, 40)\n(6, 41)\n(6, 42)\n(6, 43)\n(6, 44)\n(6, 45)\n(6, 46)\n(6, 47)\n(6, 48)\n(6, 49)\n(6, 50)\n(6, 51)\n(6, 52)\n(6, 53)\n(6, 54)\n(6, 55)\n(6, 56)\n(6, 57)\n(6, 58)\n(6, 59)\n(6, 60)\n(6, 61)\n(6, 62)\n(6, 63)\n(6, 64)\n(6, 65)\n(6, 66)\n(6, 67)\n(6, 68)\n(6, 69)\n(6, 70)\n(6, 71)\n(6, 72)\n(6, 73)\n(6, 74)\n(6, 75)\n(6, 76)\n(6, 77)\n(6, 78)\n(6, 79)\n(6, 80)\n(6, 81)\n(6, 82)\n(6, 83)\n(6, 84)\n(6, 85)\n(6, 86)\n(6, 87)\n(6, 88)\n(6, 89)\n(6, 90)\n(6, 91)\n(6, 92)\n(6, 93)\n(6, 94)\n(6, 95)\n(6, 96)\n(6, 97)\n(6, 98)\n(6, 99)\n(7, 7)\n(7, 8)\n(7, 9)\n(7, 10)\n(7, 11)\n(7, 12)\n(7, 13)\n(7, 14)\n(7, 15)\n(7, 16)\n(7, 17)\n(7, 18)\n(7, 19)\n(7, 20)\n(7, 21)\n(7, 22)\n(7, 23)\n(7, 24)\n(7, 25)\n(7, 26)\n(7, 27)\n(7, 28)\n(7, 29)\n(7, 30)\n(7, 31)\n(7, 32)\n(7, 33)\n(7, 34)\n(7, 35)\n(7, 36)\n(7, 37)\n(7, 38)\n(7, 39)\n(7, 40)\n(7, 41)\n(7, 42)\n(7, 43)\n(7, 44)\n(7, 45)\n(7, 46)\n(7, 47)\n(7, 48)\n(7, 49)\n(7, 50)\n(7, 51)\n(7, 52)\n(7, 53)\n(7, 54)\n(7, 55)\n(7, 56)\n(7, 57)\n(7, 58)\n(7, 59)\n(7, 60)\n(7, 61)\n(7, 62)\n(7, 63)\n(7, 64)\n(7, 65)\n(7, 66)\n(7, 67)\n(7, 68)\n(7, 69)\n(7, 70)\n(7, 71)\n(7, 72)\n(7, 73)\n(7, 74)\n(7, 75)\n(7, 76)\n(7, 77)\n(7, 78)\n(7, 79)\n(7, 80)\n(7, 81)\n(7, 82)\n(7, 83)\n(7, 84)\n(7, 85)\n(7, 86)\n(7, 87)\n(7, 88)\n(7, 89)\n(7, 90)\n(7, 91)\n(7, 92)\n(7, 93)\n(7, 94)\n(7, 95)\n(7, 96)\n(7, 97)\n(7, 98)\n(7, 99)\n(8, 8)\n(8, 9)\n(8, 10)\n(8, 11)\n(8, 12)\n(8, 13)\n(8, 14)\n(8, 15)\n(8, 16)\n(8, 17)\n(8, 18)\n(8, 19)\n(8, 20)\n(8, 21)\n(8, 22)\n(8, 23)\n(8, 24)\n(8, 25)\n(8, 26)\n(8, 27)\n(8, 28)\n(8, 29)\n(8, 30)\n(8, 31)\n(8, 32)\n(8, 33)\n(8, 34)\n(8, 35)\n(8, 36)\n(8, 37)\n(8, 38)\n(8, 39)\n(8, 40)\n(8, 41)\n(8, 42)\n(8, 43)\n(8, 44)\n(8, 45)\n(8, 46)\n(8, 47)\n(8, 48)\n(8, 49)\n(8, 50)\n(8, 51)\n(8, 52)\n(8, 53)\n(8, 54)\n(8, 55)\n(8, 56)\n(8, 57)\n(8, 58)\n(8, 59)\n(8, 60)\n(8, 61)\n(8, 62)\n(8, 63)\n(8, 64)\n(8, 65)\n(8, 66)\n(8, 67)\n(8, 68)\n(8, 69)\n(8, 70)\n(8, 71)\n(8, 72)\n(8, 73)\n(8, 74)\n(8, 75)\n(8, 76)\n(8, 77)\n(8, 78)\n(8, 79)\n(8, 80)\n(8, 81)\n(8, 82)\n(8, 83)\n(8, 84)\n(8, 85)\n(8, 86)\n(8, 87)\n(8, 88)\n(8, 89)\n(8, 90)\n(8, 91)\n(8, 92)\n(8, 93)\n(8, 94)\n(8, 95)\n(8, 96)\n(8, 97)\n(8, 98)\n(8, 99)\n(9, 9)\n(9, 10)\n(9, 11)\n(9, 12)\n(9, 13)\n(9, 14)\n(9, 15)\n(9, 16)\n(9, 17)\n(9, 18)\n(9, 19)\n(9, 20)\n(9, 21)\n(9, 22)\n(9, 23)\n(9, 24)\n(9, 25)\n(9, 26)\n(9, 27)\n(9, 28)\n(9, 29)\n(9, 30)\n(9, 31)\n(9, 32)\n(9, 33)\n(9, 34)\n(9, 35)\n(9, 36)\n(9, 37)\n(9, 38)\n(9, 39)\n(9, 40)\n(9, 41)\n(9, 42)\n(9, 43)\n(9, 44)\n(9, 45)\n(9, 46)\n(9, 47)\n(9, 48)\n(9, 49)\n(9, 50)\n(9, 51)\n(9, 52)\n(9, 53)\n(9, 54)\n(9, 55)\n(9, 56)\n(9, 57)\n(9, 58)\n(9, 59)\n(9, 60)\n(9, 61)\n(9, 62)\n(9, 63)\n(9, 64)\n(9, 65)\n(9, 66)\n(9, 67)\n(9, 68)\n(9, 69)\n(9, 70)\n(9, 71)\n(9, 72)\n(9, 73)\n(9, 74)\n(9, 75)\n(9, 76)\n(9, 77)\n(9, 78)\n(9, 79)\n(9, 80)\n(9, 81)\n(9, 82)\n(9, 83)\n(9, 84)\n(9, 85)\n(9, 86)\n(9, 87)\n(9, 88)\n(9, 89)\n(9, 90)\n(9, 91)\n(9, 92)\n(9, 93)\n(9, 94)\n(9, 95)\n(9, 96)\n(9, 97)\n(9, 98)\n(9, 99)\n(10, 10)\n(10, 11)\n(10, 12)\n(10, 13)\n(10, 14)\n(10, 15)\n(10, 16)\n(10, 17)\n(10, 18)\n(10, 19)\n(10, 20)\n(10, 21)\n(10, 22)\n(10, 23)\n(10, 24)\n(10, 25)\n(10, 26)\n(10, 27)\n(10, 28)\n(10, 29)\n(10, 30)\n(10, 31)\n(10, 32)\n(10, 33)\n(10, 34)\n(10, 35)\n(10, 36)\n(10, 37)\n(10, 38)\n(10, 39)\n(10, 40)\n(10, 41)\n(10, 42)\n(10, 43)\n(10, 44)\n(10, 45)\n(10, 46)\n(10, 47)\n(10, 48)\n(10, 49)\n(10, 50)\n(10, 51)\n(10, 52)\n(10, 53)\n(10, 54)\n(10, 55)\n(10, 56)\n(10, 57)\n(10, 58)\n(10, 59)\n(10, 60)\n(10, 61)\n(10, 62)\n(10, 63)\n(10, 64)\n(10, 65)\n(10, 66)\n(10, 67)\n(10, 68)\n(10, 69)\n(10, 70)\n(10, 71)\n(10, 72)\n(10, 73)\n(10, 74)\n(10, 75)\n(10, 76)\n(10, 77)\n(10, 78)\n(10, 79)\n(10, 80)\n(10, 81)\n(10, 82)\n(10, 83)\n(10, 84)\n(10, 85)\n(10, 86)\n(10, 87)\n(10, 88)\n(10, 89)\n(10, 90)\n(10, 91)\n(10, 92)\n(10, 93)\n(10, 94)\n(10, 95)\n(10, 96)\n(10, 97)\n(10, 98)\n(10, 99)\n(11, 11)\n(11, 12)\n(11, 13)\n(11, 14)\n(11, 15)\n(11, 16)\n(11, 17)\n(11, 18)\n(11, 19)\n(11, 20)\n(11, 21)\n(11, 22)\n(11, 23)\n(11, 24)\n(11, 25)\n(11, 26)\n(11, 27)\n(11, 28)\n(11, 29)\n(11, 30)\n(11, 31)\n(11, 32)\n(11, 33)\n(11, 34)\n(11, 35)\n(11, 36)\n(11, 37)\n(11, 38)\n(11, 39)\n(11, 40)\n(11, 41)\n(11, 42)\n(11, 43)\n(11, 44)\n(11, 45)\n(11, 46)\n(11, 47)\n(11, 48)\n(11, 49)\n(11, 50)\n(11, 51)\n(11, 52)\n(11, 53)\n(11, 54)\n(11, 55)\n(11, 56)\n(11, 57)\n(11, 58)\n(11, 59)\n(11, 60)\n(11, 61)\n(11, 62)\n(11, 63)\n(11, 64)\n(11, 65)\n(11, 66)\n(11, 67)\n(11, 68)\n(11, 69)\n(11, 70)\n(11, 71)\n(11, 72)\n(11, 73)\n(11, 74)\n(11, 75)\n(11, 76)\n(11, 77)\n(11, 78)\n(11, 79)\n(11, 80)\n(11, 81)\n(11, 82)\n(11, 83)\n(11, 84)\n(11, 85)\n(11, 86)\n(11, 87)\n(11, 88)\n(11, 89)\n(11, 90)\n(11, 91)\n(11, 92)\n(11, 93)\n(11, 94)\n(11, 95)\n(11, 96)\n(11, 97)\n(11, 98)\n(11, 99)\n(12, 12)\n(12, 13)\n(12, 14)\n(12, 15)\n(12, 16)\n(12, 17)\n(12, 18)\n(12, 19)\n(12, 20)\n(12, 21)\n(12, 22)\n(12, 23)\n(12, 24)\n(12, 25)\n(12, 26)\n(12, 27)\n(12, 28)\n(12, 29)\n(12, 30)\n(12, 31)\n(12, 32)\n(12, 33)\n(12, 34)\n(12, 35)\n(12, 36)\n(12, 37)\n(12, 38)\n(12, 39)\n(12, 40)\n(12, 41)\n(12, 42)\n(12, 43)\n(12, 44)\n(12, 45)\n(12, 46)\n(12, 47)\n(12, 48)\n(12, 49)\n(12, 50)\n(12, 51)\n(12, 52)\n(12, 53)\n(12, 54)\n(12, 55)\n(12, 56)\n(12, 57)\n(12, 58)\n(12, 59)\n(12, 60)\n(12, 61)\n(12, 62)\n(12, 63)\n(12, 64)\n(12, 65)\n(12, 66)\n(12, 67)\n(12, 68)\n(12, 69)\n(12, 70)\n(12, 71)\n(12, 72)\n(12, 73)\n(12, 74)\n(12, 75)\n(12, 76)\n(12, 77)\n(12, 78)\n(12, 79)\n(12, 80)\n(12, 81)\n(12, 82)\n(12, 83)\n(12, 84)\n(12, 85)\n(12, 86)\n(12, 87)\n(12, 88)\n(12, 89)\n(12, 90)\n(12, 91)\n(12, 92)\n(12, 93)\n(12, 94)\n(12, 95)\n(12, 96)\n(12, 97)\n(12, 98)\n(12, 99)\n(13, 13)\n(13, 14)\n(13, 15)\n(13, 16)\n(13, 17)\n(13, 18)\n(13, 19)\n(13, 20)\n(13, 21)\n(13, 22)\n(13, 23)\n(13, 24)\n(13, 25)\n(13, 26)\n(13, 27)\n(13, 28)\n(13, 29)\n(13, 30)\n(13, 31)\n(13, 32)\n(13, 33)\n(13, 34)\n(13, 35)\n(13, 36)\n(13, 37)\n(13, 38)\n(13, 39)\n(13, 40)\n(13, 41)\n(13, 42)\n(13, 43)\n(13, 44)\n(13, 45)\n(13, 46)\n(13, 47)\n(13, 48)\n(13, 49)\n(13, 50)\n(13, 51)\n(13, 52)\n(13, 53)\n(13, 54)\n(13, 55)\n(13, 56)\n(13, 57)\n(13, 58)\n(13, 59)\n(13, 60)\n(13, 61)\n(13, 62)\n(13, 63)\n(13, 64)\n(13, 65)\n(13, 66)\n(13, 67)\n(13, 68)\n(13, 69)\n(13, 70)\n(13, 71)\n(13, 72)\n(13, 73)\n(13, 74)\n(13, 75)\n(13, 76)\n(13, 77)\n(13, 78)\n(13, 79)\n(13, 80)\n(13, 81)\n(13, 82)\n(13, 83)\n(13, 84)\n(13, 85)\n(13, 86)\n(13, 87)\n(13, 88)\n(13, 89)\n(13, 90)\n(13, 91)\n(13, 92)\n(13, 93)\n(13, 94)\n(13, 95)\n(13, 96)\n(13, 97)\n(13, 98)\n(13, 99)\n(14, 14)\n(14, 15)\n(14, 16)\n(14, 17)\n(14, 18)\n(14, 19)\n(14, 20)\n(14, 21)\n(14, 22)\n(14, 23)\n(14, 24)\n(14, 25)\n(14, 26)\n(14, 27)\n(14, 28)\n(14, 29)\n(14, 30)\n(14, 31)\n(14, 32)\n(14, 33)\n(14, 34)\n(14, 35)\n(14, 36)\n(14, 37)\n(14, 38)\n(14, 39)\n(14, 40)\n(14, 41)\n(14, 42)\n(14, 43)\n(14, 44)\n(14, 45)\n(14, 46)\n(14, 47)\n(14, 48)\n(14, 49)\n(14, 50)\n(14, 51)\n(14, 52)\n(14, 53)\n(14, 54)\n(14, 55)\n(14, 56)\n(14, 57)\n(14, 58)\n(14, 59)\n(14, 60)\n(14, 61)\n(14, 62)\n(14, 63)\n(14, 64)\n(14, 65)\n(14, 66)\n(14, 67)\n(14, 68)\n(14, 69)\n(14, 70)\n(14, 71)\n(14, 72)\n(14, 73)\n(14, 74)\n(14, 75)\n(14, 76)\n(14, 77)\n(14, 78)\n(14, 79)\n(14, 80)\n(14, 81)\n(14, 82)\n(14, 83)\n(14, 84)\n(14, 85)\n(14, 86)\n(14, 87)\n(14, 88)\n(14, 89)\n(14, 90)\n(14, 91)\n(14, 92)\n(14, 93)\n(14, 94)\n(14, 95)\n(14, 96)\n(14, 97)\n(14, 98)\n(14, 99)\n(15, 15)\n(15, 16)\n(15, 17)\n(15, 18)\n(15, 19)\n(15, 20)\n(15, 21)\n(15, 22)\n(15, 23)\n(15, 24)\n(15, 25)\n(15, 26)\n(15, 27)\n(15, 28)\n(15, 29)\n(15, 30)\n(15, 31)\n(15, 32)\n(15, 33)\n(15, 34)\n(15, 35)\n(15, 36)\n(15, 37)\n(15, 38)\n(15, 39)\n(15, 40)\n(15, 41)\n(15, 42)\n(15, 43)\n(15, 44)\n(15, 45)\n(15, 46)\n(15, 47)\n(15, 48)\n(15, 49)\n(15, 50)\n(15, 51)\n(15, 52)\n(15, 53)\n(15, 54)\n(15, 55)\n(15, 56)\n(15, 57)\n(15, 58)\n(15, 59)\n(15, 60)\n(15, 61)\n(15, 62)\n(15, 63)\n(15, 64)\n(15, 65)\n(15, 66)\n(15, 67)\n(15, 68)\n(15, 69)\n(15, 70)\n(15, 71)\n(15, 72)\n(15, 73)\n(15, 74)\n(15, 75)\n(15, 76)\n(15, 77)\n(15, 78)\n(15, 79)\n(15, 80)\n(15, 81)\n(15, 82)\n(15, 83)\n(15, 84)\n(15, 85)\n(15, 86)\n(15, 87)\n(15, 88)\n(15, 89)\n(15, 90)\n(15, 91)\n(15, 92)\n(15, 93)\n(15, 94)\n(15, 95)\n(15, 96)\n(15, 97)\n(15, 98)\n(15, 99)\n(16, 16)\n(16, 17)\n(16, 18)\n(16, 19)\n(16, 20)\n(16, 21)\n(16, 22)\n(16, 23)\n(16, 24)\n(16, 25)\n(16, 26)\n(16, 27)\n(16, 28)\n(16, 29)\n(16, 30)\n(16, 31)\n(16, 32)\n(16, 33)\n(16, 34)\n(16, 35)\n(16, 36)\n(16, 37)\n(16, 38)\n(16, 39)\n(16, 40)\n(16, 41)\n(16, 42)\n(16, 43)\n(16, 44)\n(16, 45)\n(16, 46)\n(16, 47)\n(16, 48)\n(16, 49)\n(16, 50)\n(16, 51)\n(16, 52)\n(16, 53)\n(16, 54)\n(16, 55)\n(16, 56)\n(16, 57)\n(16, 58)\n(16, 59)\n(16, 60)\n(16, 61)\n(16, 62)\n(16, 63)\n(16, 64)\n(16, 65)\n(16, 66)\n(16, 67)\n(16, 68)\n(16, 69)\n(16, 70)\n(16, 71)\n(16, 72)\n(16, 73)\n(16, 74)\n(16, 75)\n(16, 76)\n(16, 77)\n(16, 78)\n(16, 79)\n(16, 80)\n(16, 81)\n(16, 82)\n(16, 83)\n(16, 84)\n(16, 85)\n(16, 86)\n(16, 87)\n(16, 88)\n(16, 89)\n(16, 90)\n(16, 91)\n(16, 92)\n(16, 93)\n(16, 94)\n(16, 95)\n(16, 96)\n(16, 97)\n(16, 98)\n(16, 99)\n(17, 17)\n(17, 18)\n(17, 19)\n(17, 20)\n(17, 21)\n(17, 22)\n(17, 23)\n(17, 24)\n(17, 25)\n(17, 26)\n(17, 27)\n(17, 28)\n(17, 29)\n(17, 30)\n(17, 31)\n(17, 32)\n(17, 33)\n(17, 34)\n(17, 35)\n(17, 36)\n(17, 37)\n(17, 38)\n(17, 39)\n(17, 40)\n(17, 41)\n(17, 42)\n(17, 43)\n(17, 44)\n(17, 45)\n(17, 46)\n(17, 47)\n(17, 48)\n(17, 49)\n(17, 50)\n(17, 51)\n(17, 52)\n(17, 53)\n(17, 54)\n(17, 55)\n(17, 56)\n(17, 57)\n(17, 58)\n(17, 59)\n(17, 60)\n(17, 61)\n(17, 62)\n(17, 63)\n(17, 64)\n(17, 65)\n(17, 66)\n(17, 67)\n(17, 68)\n(17, 69)\n(17, 70)\n(17, 71)\n(17, 72)\n(17, 73)\n(17, 74)\n(17, 75)\n(17, 76)\n(17, 77)\n(17, 78)\n(17, 79)\n(17, 80)\n(17, 81)\n(17, 82)\n(17, 83)\n(17, 84)\n(17, 85)\n(17, 86)\n(17, 87)\n(17, 88)\n(17, 89)\n(17, 90)\n(17, 91)\n(17, 92)\n(17, 93)\n(17, 94)\n(17, 95)\n(17, 96)\n(17, 97)\n(17, 98)\n(17, 99)\n(18, 18)\n(18, 19)\n(18, 20)\n(18, 21)\n(18, 22)\n(18, 23)\n(18, 24)\n(18, 25)\n(18, 26)\n(18, 27)\n(18, 28)\n(18, 29)\n(18, 30)\n(18, 31)\n(18, 32)\n(18, 33)\n(18, 34)\n(18, 35)\n(18, 36)\n(18, 37)\n(18, 38)\n(18, 39)\n(18, 40)\n(18, 41)\n(18, 42)\n(18, 43)\n(18, 44)\n(18, 45)\n(18, 46)\n(18, 47)\n(18, 48)\n(18, 49)\n(18, 50)\n(18, 51)\n(18, 52)\n(18, 53)\n(18, 54)\n(18, 55)\n(18, 56)\n(18, 57)\n(18, 58)\n(18, 59)\n(18, 60)\n(18, 61)\n(18, 62)\n(18, 63)\n(18, 64)\n(18, 65)\n(18, 66)\n(18, 67)\n(18, 68)\n(18, 69)\n(18, 70)\n(18, 71)\n(18, 72)\n(18, 73)\n(18, 74)\n(18, 75)\n(18, 76)\n(18, 77)\n(18, 78)\n(18, 79)\n(18, 80)\n(18, 81)\n(18, 82)\n(18, 83)\n(18, 84)\n(18, 85)\n(18, 86)\n(18, 87)\n(18, 88)\n(18, 89)\n(18, 90)\n(18, 91)\n(18, 92)\n(18, 93)\n(18, 94)\n(18, 95)\n(18, 96)\n(18, 97)\n(18, 98)\n(18, 99)\n(19, 19)\n(19, 20)\n(19, 21)\n(19, 22)\n(19, 23)\n(19, 24)\n(19, 25)\n(19, 26)\n(19, 27)\n(19, 28)\n(19, 29)\n(19, 30)\n(19, 31)\n(19, 32)\n(19, 33)\n(19, 34)\n(19, 35)\n(19, 36)\n(19, 37)\n(19, 38)\n(19, 39)\n(19, 40)\n(19, 41)\n(19, 42)\n(19, 43)\n(19, 44)\n(19, 45)\n(19, 46)\n(19, 47)\n(19, 48)\n(19, 49)\n(19, 50)\n(19, 51)\n(19, 52)\n(19, 53)\n(19, 54)\n(19, 55)\n(19, 56)\n(19, 57)\n(19, 58)\n(19, 59)\n(19, 60)\n(19, 61)\n(19, 62)\n(19, 63)\n(19, 64)\n(19, 65)\n(19, 66)\n(19, 67)\n(19, 68)\n(19, 69)\n(19, 70)\n(19, 71)\n(19, 72)\n(19, 73)\n(19, 74)\n(19, 75)\n(19, 76)\n(19, 77)\n(19, 78)\n(19, 79)\n(19, 80)\n(19, 81)\n(19, 82)\n(19, 83)\n(19, 84)\n(19, 85)\n(19, 86)\n(19, 87)\n(19, 88)\n(19, 89)\n(19, 90)\n(19, 91)\n(19, 92)\n(19, 93)\n(19, 94)\n(19, 95)\n(19, 96)\n(19, 97)\n(19, 98)\n(19, 99)\n(20, 20)\n(20, 21)\n(20, 22)\n(20, 23)\n(20, 24)\n(20, 25)\n(20, 26)\n(20, 27)\n(20, 28)\n(20, 29)\n(20, 30)\n(20, 31)\n(20, 32)\n(20, 33)\n(20, 34)\n(20, 35)\n(20, 36)\n(20, 37)\n(20, 38)\n(20, 39)\n(20, 40)\n(20, 41)\n(20, 42)\n(20, 43)\n(20, 44)\n(20, 45)\n(20, 46)\n(20, 47)\n(20, 48)\n(20, 49)\n(20, 50)\n(20, 51)\n(20, 52)\n(20, 53)\n(20, 54)\n(20, 55)\n(20, 56)\n(20, 57)\n(20, 58)\n(20, 59)\n(20, 60)\n(20, 61)\n(20, 62)\n(20, 63)\n(20, 64)\n(20, 65)\n(20, 66)\n(20, 67)\n(20, 68)\n(20, 69)\n(20, 70)\n(20, 71)\n(20, 72)\n(20, 73)\n(20, 74)\n(20, 75)\n(20, 76)\n(20, 77)\n(20, 78)\n(20, 79)\n(20, 80)\n(20, 81)\n(20, 82)\n(20, 83)\n(20, 84)\n(20, 85)\n(20, 86)\n(20, 87)\n(20, 88)\n(20, 89)\n(20, 90)\n(20, 91)\n(20, 92)\n(20, 93)\n(20, 94)\n(20, 95)\n(20, 96)\n(20, 97)\n(20, 98)\n(20, 99)\n(21, 21)\n(21, 22)\n(21, 23)\n(21, 24)\n(21, 25)\n(21, 26)\n(21, 27)\n(21, 28)\n(21, 29)\n(21, 30)\n(21, 31)\n(21, 32)\n(21, 33)\n(21, 34)\n(21, 35)\n(21, 36)\n(21, 37)\n(21, 38)\n(21, 39)\n(21, 40)\n(21, 41)\n(21, 42)\n(21, 43)\n(21, 44)\n(21, 45)\n(21, 46)\n(21, 47)\n(21, 48)\n(21, 49)\n(21, 50)\n(21, 51)\n(21, 52)\n(21, 53)\n(21, 54)\n(21, 55)\n(21, 56)\n(21, 57)\n(21, 58)\n(21, 59)\n(21, 60)\n(21, 61)\n(21, 62)\n(21, 63)\n(21, 64)\n(21, 65)\n(21, 66)\n(21, 67)\n(21, 68)\n(21, 69)\n(21, 70)\n(21, 71)\n(21, 72)\n(21, 73)\n(21, 74)\n(21, 75)\n(21, 76)\n(21, 77)\n(21, 78)\n(21, 79)\n(21, 80)\n(21, 81)\n(21, 82)\n(21, 83)\n(21, 84)\n(21, 85)\n(21, 86)\n(21, 87)\n(21, 88)\n(21, 89)\n(21, 90)\n(21, 91)\n(21, 92)\n(21, 93)\n(21, 94)\n(21, 95)\n(21, 96)\n(21, 97)\n(21, 98)\n(21, 99)\n(22, 22)\n(22, 23)\n(22, 24)\n(22, 25)\n(22, 26)\n(22, 27)\n(22, 28)\n(22, 29)\n(22, 30)\n(22, 31)\n(22, 32)\n(22, 33)\n(22, 34)\n(22, 35)\n(22, 36)\n(22, 37)\n(22, 38)\n(22, 39)\n(22, 40)\n(22, 41)\n(22, 42)\n(22, 43)\n(22, 44)\n(22, 45)\n(22, 46)\n(22, 47)\n(22, 48)\n(22, 49)\n(22, 50)\n(22, 51)\n(22, 52)\n(22, 53)\n(22, 54)\n(22, 55)\n(22, 56)\n(22, 57)\n(22, 58)\n(22, 59)\n(22, 60)\n(22, 61)\n(22, 62)\n(22, 63)\n(22, 64)\n(22, 65)\n(22, 66)\n(22, 67)\n(22, 68)\n(22, 69)\n(22, 70)\n(22, 71)\n(22, 72)\n(22, 73)\n(22, 74)\n(22, 75)\n(22, 76)\n(22, 77)\n(22, 78)\n(22, 79)\n(22, 80)\n(22, 81)\n(22, 82)\n(22, 83)\n(22, 84)\n(22, 85)\n(22, 86)\n(22, 87)\n(22, 88)\n(22, 89)\n(22, 90)\n(22, 91)\n(22, 92)\n(22, 93)\n(22, 94)\n(22, 95)\n(22, 96)\n(22, 97)\n(22, 98)\n(22, 99)\n(23, 23)\n(23, 24)\n(23, 25)\n(23, 26)\n(23, 27)\n(23, 28)\n(23, 29)\n(23, 30)\n(23, 31)\n(23, 32)\n(23, 33)\n(23, 34)\n(23, 35)\n(23, 36)\n(23, 37)\n(23, 38)\n(23, 39)\n(23, 40)\n(23, 41)\n(23, 42)\n(23, 43)\n(23, 44)\n(23, 45)\n(23, 46)\n(23, 47)\n(23, 48)\n(23, 49)\n(23, 50)\n(23, 51)\n(23, 52)\n(23, 53)\n(23, 54)\n(23, 55)\n(23, 56)\n(23, 57)\n(23, 58)\n(23, 59)\n(23, 60)\n(23, 61)\n(23, 62)\n(23, 63)\n(23, 64)\n(23, 65)\n(23, 66)\n(23, 67)\n(23, 68)\n(23, 69)\n(23, 70)\n(23, 71)\n(23, 72)\n(23, 73)\n(23, 74)\n(23, 75)\n(23, 76)\n(23, 77)\n(23, 78)\n(23, 79)\n(23, 80)\n(23, 81)\n(23, 82)\n(23, 83)\n(23, 84)\n(23, 85)\n(23, 86)\n(23, 87)\n(23, 88)\n(23, 89)\n(23, 90)\n(23, 91)\n(23, 92)\n(23, 93)\n(23, 94)\n(23, 95)\n(23, 96)\n(23, 97)\n(23, 98)\n(23, 99)\n(24, 24)\n(24, 25)\n(24, 26)\n(24, 27)\n(24, 28)\n(24, 29)\n(24, 30)\n(24, 31)\n(24, 32)\n(24, 33)\n(24, 34)\n(24, 35)\n(24, 36)\n(24, 37)\n(24, 38)\n(24, 39)\n(24, 40)\n(24, 41)\n(24, 42)\n(24, 43)\n(24, 44)\n(24, 45)\n(24, 46)\n(24, 47)\n(24, 48)\n(24, 49)\n(24, 50)\n(24, 51)\n(24, 52)\n(24, 53)\n(24, 54)\n(24, 55)\n(24, 56)\n(24, 57)\n(24, 58)\n(24, 59)\n(24, 60)\n(24, 61)\n(24, 62)\n(24, 63)\n(24, 64)\n(24, 65)\n(24, 66)\n(24, 67)\n(24, 68)\n(24, 69)\n(24, 70)\n(24, 71)\n(24, 72)\n(24, 73)\n(24, 74)\n(24, 75)\n(24, 76)\n(24, 77)\n(24, 78)\n(24, 79)\n(24, 80)\n(24, 81)\n(24, 82)\n(24, 83)\n(24, 84)\n(24, 85)\n(24, 86)\n(24, 87)\n(24, 88)\n(24, 89)\n(24, 90)\n(24, 91)\n(24, 92)\n(24, 93)\n(24, 94)\n(24, 95)\n(24, 96)\n(24, 97)\n(24, 98)\n(24, 99)\n(25, 25)\n(25, 26)\n(25, 27)\n(25, 28)\n(25, 29)\n(25, 30)\n(25, 31)\n(25, 32)\n(25, 33)\n(25, 34)\n(25, 35)\n(25, 36)\n(25, 37)\n(25, 38)\n(25, 39)\n(25, 40)\n(25, 41)\n(25, 42)\n(25, 43)\n(25, 44)\n(25, 45)\n(25, 46)\n(25, 47)\n(25, 48)\n(25, 49)\n(25, 50)\n(25, 51)\n(25, 52)\n(25, 53)\n(25, 54)\n(25, 55)\n(25, 56)\n(25, 57)\n(25, 58)\n(25, 59)\n(25, 60)\n(25, 61)\n(25, 62)\n(25, 63)\n(25, 64)\n(25, 65)\n(25, 66)\n(25, 67)\n(25, 68)\n(25, 69)\n(25, 70)\n(25, 71)\n(25, 72)\n(25, 73)\n(25, 74)\n(25, 75)\n(25, 76)\n(25, 77)\n(25, 78)\n(25, 79)\n(25, 80)\n(25, 81)\n(25, 82)\n(25, 83)\n(25, 84)\n(25, 85)\n(25, 86)\n(25, 87)\n(25, 88)\n(25, 89)\n(25, 90)\n(25, 91)\n(25, 92)\n(25, 93)\n(25, 94)\n(25, 95)\n(25, 96)\n(25, 97)\n(25, 98)\n(25, 99)\n(26, 26)\n(26, 27)\n(26, 28)\n(26, 29)\n(26, 30)\n(26, 31)\n(26, 32)\n(26, 33)\n(26, 34)\n(26, 35)\n(26, 36)\n(26, 37)\n(26, 38)\n(26, 39)\n(26, 40)\n(26, 41)\n(26, 42)\n(26, 43)\n(26, 44)\n(26, 45)\n(26, 46)\n(26, 47)\n(26, 48)\n(26, 49)\n(26, 50)\n(26, 51)\n(26, 52)\n(26, 53)\n(26, 54)\n(26, 55)\n(26, 56)\n(26, 57)\n(26, 58)\n(26, 59)\n(26, 60)\n(26, 61)\n(26, 62)\n(26, 63)\n(26, 64)\n(26, 65)\n(26, 66)\n(26, 67)\n(26, 68)\n(26, 69)\n(26, 70)\n(26, 71)\n(26, 72)\n(26, 73)\n(26, 74)\n(26, 75)\n(26, 76)\n(26, 77)\n(26, 78)\n(26, 79)\n(26, 80)\n(26, 81)\n(26, 82)\n(26, 83)\n(26, 84)\n(26, 85)\n(26, 86)\n(26, 87)\n(26, 88)\n(26, 89)\n(26, 90)\n(26, 91)\n(26, 92)\n(26, 93)\n(26, 94)\n(26, 95)\n(26, 96)\n(26, 97)\n(26, 98)\n(26, 99)\n(27, 27)\n(27, 28)\n(27, 29)\n(27, 30)\n(27, 31)\n(27, 32)\n(27, 33)\n(27, 34)\n(27, 35)\n(27, 36)\n(27, 37)\n(27, 38)\n(27, 39)\n(27, 40)\n(27, 41)\n(27, 42)\n(27, 43)\n(27, 44)\n(27, 45)\n(27, 46)\n(27, 47)\n(27, 48)\n(27, 49)\n(27, 50)\n(27, 51)\n(27, 52)\n(27, 53)\n(27, 54)\n(27, 55)\n(27, 56)\n(27, 57)\n(27, 58)\n(27, 59)\n(27, 60)\n(27, 61)\n(27, 62)\n(27, 63)\n(27, 64)\n(27, 65)\n(27, 66)\n(27, 67)\n(27, 68)\n(27, 69)\n(27, 70)\n(27, 71)\n(27, 72)\n(27, 73)\n(27, 74)\n(27, 75)\n(27, 76)\n(27, 77)\n(27, 78)\n(27, 79)\n(27, 80)\n(27, 81)\n(27, 82)\n(27, 83)\n(27, 84)\n(27, 85)\n(27, 86)\n(27, 87)\n(27, 88)\n(27, 89)\n(27, 90)\n(27, 91)\n(27, 92)\n(27, 93)\n(27, 94)\n(27, 95)\n(27, 96)\n(27, 97)\n(27, 98)\n(27, 99)\n(28, 28)\n(28, 29)\n(28, 30)\n(28, 31)\n(28, 32)\n(28, 33)\n(28, 34)\n(28, 35)\n(28, 36)\n(28, 37)\n(28, 38)\n(28, 39)\n(28, 40)\n(28, 41)\n(28, 42)\n(28, 43)\n(28, 44)\n(28, 45)\n(28, 46)\n(28, 47)\n(28, 48)\n(28, 49)\n(28, 50)\n(28, 51)\n(28, 52)\n(28, 53)\n(28, 54)\n(28, 55)\n(28, 56)\n(28, 57)\n(28, 58)\n(28, 59)\n(28, 60)\n(28, 61)\n(28, 62)\n(28, 63)\n(28, 64)\n(28, 65)\n(28, 66)\n(28, 67)\n(28, 68)\n(28, 69)\n(28, 70)\n(28, 71)\n(28, 72)\n(28, 73)\n(28, 74)\n(28, 75)\n(28, 76)\n(28, 77)\n(28, 78)\n(28, 79)\n(28, 80)\n(28, 81)\n(28, 82)\n(28, 83)\n(28, 84)\n(28, 85)\n(28, 86)\n(28, 87)\n(28, 88)\n(28, 89)\n(28, 90)\n(28, 91)\n(28, 92)\n(28, 93)\n(28, 94)\n(28, 95)\n(28, 96)\n(28, 97)\n(28, 98)\n(28, 99)\n(29, 29)\n(29, 30)\n(29, 31)\n(29, 32)\n(29, 33)\n(29, 34)\n(29, 35)\n(29, 36)\n(29, 37)\n(29, 38)\n(29, 39)\n(29, 40)\n(29, 41)\n(29, 42)\n(29, 43)\n(29, 44)\n(29, 45)\n(29, 46)\n(29, 47)\n(29, 48)\n(29, 49)\n(29, 50)\n(29, 51)\n(29, 52)\n(29, 53)\n(29, 54)\n(29, 55)\n(29, 56)\n(29, 57)\n(29, 58)\n(29, 59)\n(29, 60)\n(29, 61)\n(29, 62)\n(29, 63)\n(29, 64)\n(29, 65)\n(29, 66)\n(29, 67)\n(29, 68)\n(29, 69)\n(29, 70)\n(29, 71)\n(29, 72)\n(29, 73)\n(29, 74)\n(29, 75)\n(29, 76)\n(29, 77)\n(29, 78)\n(29, 79)\n(29, 80)\n(29, 81)\n(29, 82)\n(29, 83)\n(29, 84)\n(29, 85)\n(29, 86)\n(29, 87)\n(29, 88)\n(29, 89)\n(29, 90)\n(29, 91)\n(29, 92)\n(29, 93)\n(29, 94)\n(29, 95)\n(29, 96)\n(29, 97)\n(29, 98)\n(29, 99)\n(30, 30)\n(30, 31)\n(30, 32)\n(30, 33)\n(30, 34)\n(30, 35)\n(30, 36)\n(30, 37)\n(30, 38)\n(30, 39)\n(30, 40)\n(30, 41)\n(30, 42)\n(30, 43)\n(30, 44)\n(30, 45)\n(30, 46)\n(30, 47)\n(30, 48)\n(30, 49)\n(30, 50)\n(30, 51)\n(30, 52)\n(30, 53)\n(30, 54)\n(30, 55)\n(30, 56)\n(30, 57)\n(30, 58)\n(30, 59)\n(30, 60)\n(30, 61)\n(30, 62)\n(30, 63)\n(30, 64)\n(30, 65)\n(30, 66)\n(30, 67)\n(30, 68)\n(30, 69)\n(30, 70)\n(30, 71)\n(30, 72)\n(30, 73)\n(30, 74)\n(30, 75)\n(30, 76)\n(30, 77)\n(30, 78)\n(30, 79)\n(30, 80)\n(30, 81)\n(30, 82)\n(30, 83)\n(30, 84)\n(30, 85)\n(30, 86)\n(30, 87)\n(30, 88)\n(30, 89)\n(30, 90)\n(30, 91)\n(30, 92)\n(30, 93)\n(30, 94)\n(30, 95)\n(30, 96)\n(30, 97)\n(30, 98)\n(30, 99)\n(31, 31)\n(31, 32)\n(31, 33)\n(31, 34)\n(31, 35)\n(31, 36)\n(31, 37)\n(31, 38)\n(31, 39)\n(31, 40)\n(31, 41)\n(31, 42)\n(31, 43)\n(31, 44)\n(31, 45)\n(31, 46)\n(31, 47)\n(31, 48)\n(31, 49)\n(31, 50)\n(31, 51)\n(31, 52)\n(31, 53)\n(31, 54)\n(31, 55)\n(31, 56)\n(31, 57)\n(31, 58)\n(31, 59)\n(31, 60)\n(31, 61)\n(31, 62)\n(31, 63)\n(31, 64)\n(31, 65)\n(31, 66)\n(31, 67)\n(31, 68)\n(31, 69)\n(31, 70)\n(31, 71)\n(31, 72)\n(31, 73)\n(31, 74)\n(31, 75)\n(31, 76)\n(31, 77)\n(31, 78)\n(31, 79)\n(31, 80)\n(31, 81)\n(31, 82)\n(31, 83)\n(31, 84)\n(31, 85)\n(31, 86)\n(31, 87)\n(31, 88)\n(31, 89)\n(31, 90)\n(31, 91)\n(31, 92)\n(31, 93)\n(31, 94)\n(31, 95)\n(31, 96)\n(31, 97)\n(31, 98)\n(31, 99)\n(32, 32)\n(32, 33)\n(32, 34)\n(32, 35)\n(32, 36)\n(32, 37)\n(32, 38)\n(32, 39)\n(32, 40)\n(32, 41)\n(32, 42)\n(32, 43)\n(32, 44)\n(32, 45)\n(32, 46)\n(32, 47)\n(32, 48)\n(32, 49)\n(32, 50)\n(32, 51)\n(32, 52)\n(32, 53)\n(32, 54)\n(32, 55)\n(32, 56)\n(32, 57)\n(32, 58)\n(32, 59)\n(32, 60)\n(32, 61)\n(32, 62)\n(32, 63)\n(32, 64)\n(32, 65)\n(32, 66)\n(32, 67)\n(32, 68)\n(32, 69)\n(32, 70)\n(32, 71)\n(32, 72)\n(32, 73)\n(32, 74)\n(32, 75)\n(32, 76)\n(32, 77)\n(32, 78)\n(32, 79)\n(32, 80)\n(32, 81)\n(32, 82)\n(32, 83)\n(32, 84)\n(32, 85)\n(32, 86)\n(32, 87)\n(32, 88)\n(32, 89)\n(32, 90)\n(32, 91)\n(32, 92)\n(32, 93)\n(32, 94)\n(32, 95)\n(32, 96)\n(32, 97)\n(32, 98)\n(32, 99)\n(33, 33)\n(33, 34)\n(33, 35)\n(33, 36)\n(33, 37)\n(33, 38)\n(33, 39)\n(33, 40)\n(33, 41)\n(33, 42)\n(33, 43)\n(33, 44)\n(33, 45)\n(33, 46)\n(33, 47)\n(33, 48)\n(33, 49)\n(33, 50)\n(33, 51)\n(33, 52)\n(33, 53)\n(33, 54)\n(33, 55)\n(33, 56)\n(33, 57)\n(33, 58)\n(33, 59)\n(33, 60)\n(33, 61)\n(33, 62)\n(33, 63)\n(33, 64)\n(33, 65)\n(33, 66)\n(33, 67)\n(33, 68)\n(33, 69)\n(33, 70)\n(33, 71)\n(33, 72)\n(33, 73)\n(33, 74)\n(33, 75)\n(33, 76)\n(33, 77)\n(33, 78)\n(33, 79)\n(33, 80)\n(33, 81)\n(33, 82)\n(33, 83)\n(33, 84)\n(33, 85)\n(33, 86)\n(33, 87)\n(33, 88)\n(33, 89)\n(33, 90)\n(33, 91)\n(33, 92)\n(33, 93)\n(33, 94)\n(33, 95)\n(33, 96)\n(33, 97)\n(33, 98)\n(33, 99)\n(34, 34)\n(34, 35)\n(34, 36)\n(34, 37)\n(34, 38)\n(34, 39)\n(34, 40)\n(34, 41)\n(34, 42)\n(34, 43)\n(34, 44)\n(34, 45)\n(34, 46)\n(34, 47)\n(34, 48)\n(34, 49)\n(34, 50)\n(34, 51)\n(34, 52)\n(34, 53)\n(34, 54)\n(34, 55)\n(34, 56)\n(34, 57)\n(34, 58)\n(34, 59)\n(34, 60)\n(34, 61)\n(34, 62)\n(34, 63)\n(34, 64)\n(34, 65)\n(34, 66)\n(34, 67)\n(34, 68)\n(34, 69)\n(34, 70)\n(34, 71)\n(34, 72)\n(34, 73)\n(34, 74)\n(34, 75)\n(34, 76)\n(34, 77)\n(34, 78)\n(34, 79)\n(34, 80)\n(34, 81)\n(34, 82)\n(34, 83)\n(34, 84)\n(34, 85)\n(34, 86)\n(34, 87)\n(34, 88)\n(34, 89)\n(34, 90)\n(34, 91)\n(34, 92)\n(34, 93)\n(34, 94)\n(34, 95)\n(34, 96)\n(34, 97)\n(34, 98)\n(34, 99)\n(35, 35)\n(35, 36)\n(35, 37)\n(35, 38)\n(35, 39)\n(35, 40)\n(35, 41)\n(35, 42)\n(35, 43)\n(35, 44)\n(35, 45)\n(35, 46)\n(35, 47)\n(35, 48)\n(35, 49)\n(35, 50)\n(35, 51)\n(35, 52)\n(35, 53)\n(35, 54)\n(35, 55)\n(35, 56)\n(35, 57)\n(35, 58)\n(35, 59)\n(35, 60)\n(35, 61)\n(35, 62)\n(35, 63)\n(35, 64)\n(35, 65)\n(35, 66)\n(35, 67)\n(35, 68)\n(35, 69)\n(35, 70)\n(35, 71)\n(35, 72)\n(35, 73)\n(35, 74)\n(35, 75)\n(35, 76)\n(35, 77)\n(35, 78)\n(35, 79)\n(35, 80)\n(35, 81)\n(35, 82)\n(35, 83)\n(35, 84)\n(35, 85)\n(35, 86)\n(35, 87)\n(35, 88)\n(35, 89)\n(35, 90)\n(35, 91)\n(35, 92)\n(35, 93)\n(35, 94)\n(35, 95)\n(35, 96)\n(35, 97)\n(35, 98)\n(35, 99)\n(36, 36)\n(36, 37)\n(36, 38)\n(36, 39)\n(36, 40)\n(36, 41)\n(36, 42)\n(36, 43)\n(36, 44)\n(36, 45)\n(36, 46)\n(36, 47)\n(36, 48)\n(36, 49)\n(36, 50)\n(36, 51)\n(36, 52)\n(36, 53)\n(36, 54)\n(36, 55)\n(36, 56)\n(36, 57)\n(36, 58)\n(36, 59)\n(36, 60)\n(36, 61)\n(36, 62)\n(36, 63)\n(36, 64)\n(36, 65)\n(36, 66)\n(36, 67)\n(36, 68)\n(36, 69)\n(36, 70)\n(36, 71)\n(36, 72)\n(36, 73)\n(36, 74)\n(36, 75)\n(36, 76)\n(36, 77)\n(36, 78)\n(36, 79)\n(36, 80)\n(36, 81)\n(36, 82)\n(36, 83)\n(36, 84)\n(36, 85)\n(36, 86)\n(36, 87)\n(36, 88)\n(36, 89)\n(36, 90)\n(36, 91)\n(36, 92)\n(36, 93)\n(36, 94)\n(36, 95)\n(36, 96)\n(36, 97)\n(36, 98)\n(36, 99)\n(37, 37)\n(37, 38)\n(37, 39)\n(37, 40)\n(37, 41)\n(37, 42)\n(37, 43)\n(37, 44)\n(37, 45)\n(37, 46)\n(37, 47)\n(37, 48)\n(37, 49)\n(37, 50)\n(37, 51)\n(37, 52)\n(37, 53)\n(37, 54)\n(37, 55)\n(37, 56)\n(37, 57)\n(37, 58)\n(37, 59)\n(37, 60)\n(37, 61)\n(37, 62)\n(37, 63)\n(37, 64)\n(37, 65)\n(37, 66)\n(37, 67)\n(37, 68)\n(37, 69)\n(37, 70)\n(37, 71)\n(37, 72)\n(37, 73)\n(37, 74)\n(37, 75)\n(37, 76)\n(37, 77)\n(37, 78)\n(37, 79)\n(37, 80)\n(37, 81)\n(37, 82)\n(37, 83)\n(37, 84)\n(37, 85)\n(37, 86)\n(37, 87)\n(37, 88)\n(37, 89)\n(37, 90)\n(37, 91)\n(37, 92)\n(37, 93)\n(37, 94)\n(37, 95)\n(37, 96)\n(37, 97)\n(37, 98)\n(37, 99)\n(38, 38)\n(38, 39)\n(38, 40)\n(38, 41)\n(38, 42)\n(38, 43)\n(38, 44)\n(38, 45)\n(38, 46)\n(38, 47)\n(38, 48)\n(38, 49)\n(38, 50)\n(38, 51)\n(38, 52)\n(38, 53)\n(38, 54)\n(38, 55)\n(38, 56)\n(38, 57)\n(38, 58)\n(38, 59)\n(38, 60)\n(38, 61)\n(38, 62)\n(38, 63)\n(38, 64)\n(38, 65)\n(38, 66)\n(38, 67)\n(38, 68)\n(38, 69)\n(38, 70)\n(38, 71)\n(38, 72)\n(38, 73)\n(38, 74)\n(38, 75)\n(38, 76)\n(38, 77)\n(38, 78)\n(38, 79)\n(38, 80)\n(38, 81)\n(38, 82)\n(38, 83)\n(38, 84)\n(38, 85)\n(38, 86)\n(38, 87)\n(38, 88)\n(38, 89)\n(38, 90)\n(38, 91)\n(38, 92)\n(38, 93)\n(38, 94)\n(38, 95)\n(38, 96)\n(38, 97)\n(38, 98)\n(38, 99)\n(39, 39)\n(39, 40)\n(39, 41)\n(39, 42)\n(39, 43)\n(39, 44)\n(39, 45)\n(39, 46)\n(39, 47)\n(39, 48)\n(39, 49)\n(39, 50)\n(39, 51)\n(39, 52)\n(39, 53)\n(39, 54)\n(39, 55)\n(39, 56)\n(39, 57)\n(39, 58)\n(39, 59)\n(39, 60)\n(39, 61)\n(39, 62)\n(39, 63)\n(39, 64)\n(39, 65)\n(39, 66)\n(39, 67)\n(39, 68)\n(39, 69)\n(39, 70)\n(39, 71)\n(39, 72)\n(39, 73)\n(39, 74)\n(39, 75)\n(39, 76)\n(39, 77)\n(39, 78)\n(39, 79)\n(39, 80)\n(39, 81)\n(39, 82)\n(39, 83)\n(39, 84)\n(39, 85)\n(39, 86)\n(39, 87)\n(39, 88)\n(39, 89)\n(39, 90)\n(39, 91)\n(39, 92)\n(39, 93)\n(39, 94)\n(39, 95)\n(39, 96)\n(39, 97)\n(39, 98)\n(39, 99)\n(40, 40)\n(40, 41)\n(40, 42)\n(40, 43)\n(40, 44)\n(40, 45)\n(40, 46)\n(40, 47)\n(40, 48)\n(40, 49)\n(40, 50)\n(40, 51)\n(40, 52)\n(40, 53)\n(40, 54)\n(40, 55)\n(40, 56)\n(40, 57)\n(40, 58)\n(40, 59)\n(40, 60)\n(40, 61)\n(40, 62)\n(40, 63)\n(40, 64)\n(40, 65)\n(40, 66)\n(40, 67)\n(40, 68)\n(40, 69)\n(40, 70)\n(40, 71)\n(40, 72)\n(40, 73)\n(40, 74)\n(40, 75)\n(40, 76)\n(40, 77)\n(40, 78)\n(40, 79)\n(40, 80)\n(40, 81)\n(40, 82)\n(40, 83)\n(40, 84)\n(40, 85)\n(40, 86)\n(40, 87)\n(40, 88)\n(40, 89)\n(40, 90)\n(40, 91)\n(40, 92)\n(40, 93)\n(40, 94)\n(40, 95)\n(40, 96)\n(40, 97)\n(40, 98)\n(40, 99)\n(41, 41)\n(41, 42)\n(41, 43)\n(41, 44)\n(41, 45)\n(41, 46)\n(41, 47)\n(41, 48)\n(41, 49)\n(41, 50)\n(41, 51)\n(41, 52)\n(41, 53)\n(41, 54)\n(41, 55)\n(41, 56)\n(41, 57)\n(41, 58)\n(41, 59)\n(41, 60)\n(41, 61)\n(41, 62)\n(41, 63)\n(41, 64)\n(41, 65)\n(41, 66)\n(41, 67)\n(41, 68)\n(41, 69)\n(41, 70)\n(41, 71)\n(41, 72)\n(41, 73)\n(41, 74)\n(41, 75)\n(41, 76)\n(41, 77)\n(41, 78)\n(41, 79)\n(41, 80)\n(41, 81)\n(41, 82)\n(41, 83)\n(41, 84)\n(41, 85)\n(41, 86)\n(41, 87)\n(41, 88)\n(41, 89)\n(41, 90)\n(41, 91)\n(41, 92)\n(41, 93)\n(41, 94)\n(41, 95)\n(41, 96)\n(41, 97)\n(41, 98)\n(41, 99)\n(42, 42)\n(42, 43)\n(42, 44)\n(42, 45)\n(42, 46)\n(42, 47)\n(42, 48)\n(42, 49)\n(42, 50)\n(42, 51)\n(42, 52)\n(42, 53)\n(42, 54)\n(42, 55)\n(42, 56)\n(42, 57)\n(42, 58)\n(42, 59)\n(42, 60)\n(42, 61)\n(42, 62)\n(42, 63)\n(42, 64)\n(42, 65)\n(42, 66)\n(42, 67)\n(42, 68)\n(42, 69)\n(42, 70)\n(42, 71)\n(42, 72)\n(42, 73)\n(42, 74)\n(42, 75)\n(42, 76)\n(42, 77)\n(42, 78)\n(42, 79)\n(42, 80)\n(42, 81)\n(42, 82)\n(42, 83)\n(42, 84)\n(42, 85)\n(42, 86)\n(42, 87)\n(42, 88)\n(42, 89)\n(42, 90)\n(42, 91)\n(42, 92)\n(42, 93)\n(42, 94)\n(42, 95)\n(42, 96)\n(42, 97)\n(42, 98)\n(42, 99)\n(43, 43)\n(43, 44)\n(43, 45)\n(43, 46)\n(43, 47)\n(43, 48)\n(43, 49)\n(43, 50)\n(43, 51)\n(43, 52)\n(43, 53)\n(43, 54)\n(43, 55)\n(43, 56)\n(43, 57)\n(43, 58)\n(43, 59)\n(43, 60)\n(43, 61)\n(43, 62)\n(43, 63)\n(43, 64)\n(43, 65)\n(43, 66)\n(43, 67)\n(43, 68)\n(43, 69)\n(43, 70)\n(43, 71)\n(43, 72)\n(43, 73)\n(43, 74)\n(43, 75)\n(43, 76)\n(43, 77)\n(43, 78)\n(43, 79)\n(43, 80)\n(43, 81)\n(43, 82)\n(43, 83)\n(43, 84)\n(43, 85)\n(43, 86)\n(43, 87)\n(43, 88)\n(43, 89)\n(43, 90)\n(43, 91)\n(43, 92)\n(43, 93)\n(43, 94)\n(43, 95)\n(43, 96)\n(43, 97)\n(43, 98)\n(43, 99)\n(44, 44)\n(44, 45)\n(44, 46)\n(44, 47)\n(44, 48)\n(44, 49)\n(44, 50)\n(44, 51)\n(44, 52)\n(44, 53)\n(44, 54)\n(44, 55)\n(44, 56)\n(44, 57)\n(44, 58)\n(44, 59)\n(44, 60)\n(44, 61)\n(44, 62)\n(44, 63)\n(44, 64)\n(44, 65)\n(44, 66)\n(44, 67)\n(44, 68)\n(44, 69)\n(44, 70)\n(44, 71)\n(44, 72)\n(44, 73)\n(44, 74)\n(44, 75)\n(44, 76)\n(44, 77)\n(44, 78)\n(44, 79)\n(44, 80)\n(44, 81)\n(44, 82)\n(44, 83)\n(44, 84)\n(44, 85)\n(44, 86)\n(44, 87)\n(44, 88)\n(44, 89)\n(44, 90)\n(44, 91)\n(44, 92)\n(44, 93)\n(44, 94)\n(44, 95)\n(44, 96)\n(44, 97)\n(44, 98)\n(44, 99)\n(45, 45)\n(45, 46)\n(45, 47)\n(45, 48)\n(45, 49)\n(45, 50)\n(45, 51)\n(45, 52)\n(45, 53)\n(45, 54)\n(45, 55)\n(45, 56)\n(45, 57)\n(45, 58)\n(45, 59)\n(45, 60)\n(45, 61)\n(45, 62)\n(45, 63)\n(45, 64)\n(45, 65)\n(45, 66)\n(45, 67)\n(45, 68)\n(45, 69)\n(45, 70)\n(45, 71)\n(45, 72)\n(45, 73)\n(45, 74)\n(45, 75)\n(45, 76)\n(45, 77)\n(45, 78)\n(45, 79)\n(45, 80)\n(45, 81)\n(45, 82)\n(45, 83)\n(45, 84)\n(45, 85)\n(45, 86)\n(45, 87)\n(45, 88)\n(45, 89)\n(45, 90)\n(45, 91)\n(45, 92)\n(45, 93)\n(45, 94)\n(45, 95)\n(45, 96)\n(45, 97)\n(45, 98)\n(45, 99)\n(46, 46)\n(46, 47)\n(46, 48)\n(46, 49)\n(46, 50)\n(46, 51)\n(46, 52)\n(46, 53)\n(46, 54)\n(46, 55)\n(46, 56)\n(46, 57)\n(46, 58)\n(46, 59)\n(46, 60)\n(46, 61)\n(46, 62)\n(46, 63)\n(46, 64)\n(46, 65)\n(46, 66)\n(46, 67)\n(46, 68)\n(46, 69)\n(46, 70)\n(46, 71)\n(46, 72)\n(46, 73)\n(46, 74)\n(46, 75)\n(46, 76)\n(46, 77)\n(46, 78)\n(46, 79)\n(46, 80)\n(46, 81)\n(46, 82)\n(46, 83)\n(46, 84)\n(46, 85)\n(46, 86)\n(46, 87)\n(46, 88)\n(46, 89)\n(46, 90)\n(46, 91)\n(46, 92)\n(46, 93)\n(46, 94)\n(46, 95)\n(46, 96)\n(46, 97)\n(46, 98)\n(46, 99)\n(47, 47)\n(47, 48)\n(47, 49)\n(47, 50)\n(47, 51)\n(47, 52)\n(47, 53)\n(47, 54)\n(47, 55)\n(47, 56)\n(47, 57)\n(47, 58)\n(47, 59)\n(47, 60)\n(47, 61)\n(47, 62)\n(47, 63)\n(47, 64)\n(47, 65)\n(47, 66)\n(47, 67)\n(47, 68)\n(47, 69)\n(47, 70)\n(47, 71)\n(47, 72)\n(47, 73)\n(47, 74)\n(47, 75)\n(47, 76)\n(47, 77)\n(47, 78)\n(47, 79)\n(47, 80)\n(47, 81)\n(47, 82)\n(47, 83)\n(47, 84)\n(47, 85)\n(47, 86)\n(47, 87)\n(47, 88)\n(47, 89)\n(47, 90)\n(47, 91)\n(47, 92)\n(47, 93)\n(47, 94)\n(47, 95)\n(47, 96)\n(47, 97)\n(47, 98)\n(47, 99)\n(48, 48)\n(48, 49)\n(48, 50)\n(48, 51)\n(48, 52)\n(48, 53)\n(48, 54)\n(48, 55)\n(48, 56)\n(48, 57)\n(48, 58)\n(48, 59)\n(48, 60)\n(48, 61)\n(48, 62)\n(48, 63)\n(48, 64)\n(48, 65)\n(48, 66)\n(48, 67)\n(48, 68)\n(48, 69)\n(48, 70)\n(48, 71)\n(48, 72)\n(48, 73)\n(48, 74)\n(48, 75)\n(48, 76)\n(48, 77)\n(48, 78)\n(48, 79)\n(48, 80)\n(48, 81)\n(48, 82)\n(48, 83)\n(48, 84)\n(48, 85)\n(48, 86)\n(48, 87)\n(48, 88)\n(48, 89)\n(48, 90)\n(48, 91)\n(48, 92)\n(48, 93)\n(48, 94)\n(48, 95)\n(48, 96)\n(48, 97)\n(48, 98)\n(48, 99)\n(49, 49)\n(49, 50)\n(49, 51)\n(49, 52)\n(49, 53)\n(49, 54)\n(49, 55)\n(49, 56)\n(49, 57)\n(49, 58)\n(49, 59)\n(49, 60)\n(49, 61)\n(49, 62)\n(49, 63)\n(49, 64)\n(49, 65)\n(49, 66)\n(49, 67)\n(49, 68)\n(49, 69)\n(49, 70)\n(49, 71)\n(49, 72)\n(49, 73)\n(49, 74)\n(49, 75)\n(49, 76)\n(49, 77)\n(49, 78)\n(49, 79)\n(49, 80)\n(49, 81)\n(49, 82)\n(49, 83)\n(49, 84)\n(49, 85)\n(49, 86)\n(49, 87)\n(49, 88)\n(49, 89)\n(49, 90)\n(49, 91)\n(49, 92)\n(49, 93)\n(49, 94)\n(49, 95)\n(49, 96)\n(49, 97)\n(49, 98)\n(49, 99)\n(50, 50)\n(50, 51)\n(50, 52)\n(50, 53)\n(50, 54)\n(50, 55)\n(50, 56)\n(50, 57)\n(50, 58)\n(50, 59)\n(50, 60)\n(50, 61)\n(50, 62)\n(50, 63)\n(50, 64)\n(50, 65)\n(50, 66)\n(50, 67)\n(50, 68)\n(50, 69)\n(50, 70)\n(50, 71)\n(50, 72)\n(50, 73)\n(50, 74)\n(50, 75)\n(50, 76)\n(50, 77)\n(50, 78)\n(50, 79)\n(50, 80)\n(50, 81)\n(50, 82)\n(50, 83)\n(50, 84)\n(50, 85)\n(50, 86)\n(50, 87)\n(50, 88)\n(50, 89)\n(50, 90)\n(50, 91)\n(50, 92)\n(50, 93)\n(50, 94)\n(50, 95)\n(50, 96)\n(50, 97)\n(50, 98)\n(50, 99)\n(51, 51)\n(51, 52)\n(51, 53)\n(51, 54)\n(51, 55)\n(51, 56)\n(51, 57)\n(51, 58)\n(51, 59)\n(51, 60)\n(51, 61)\n(51, 62)\n(51, 63)\n(51, 64)\n(51, 65)\n(51, 66)\n(51, 67)\n(51, 68)\n(51, 69)\n(51, 70)\n(51, 71)\n(51, 72)\n(51, 73)\n(51, 74)\n(51, 75)\n(51, 76)\n(51, 77)\n(51, 78)\n(51, 79)\n(51, 80)\n(51, 81)\n(51, 82)\n(51, 83)\n(51, 84)\n(51, 85)\n(51, 86)\n(51, 87)\n(51, 88)\n(51, 89)\n(51, 90)\n(51, 91)\n(51, 92)\n(51, 93)\n(51, 94)\n(51, 95)\n(51, 96)\n(51, 97)\n(51, 98)\n(51, 99)\n(52, 52)\n(52, 53)\n(52, 54)\n(52, 55)\n(52, 56)\n(52, 57)\n(52, 58)\n(52, 59)\n(52, 60)\n(52, 61)\n(52, 62)\n(52, 63)\n(52, 64)\n(52, 65)\n(52, 66)\n(52, 67)\n(52, 68)\n(52, 69)\n(52, 70)\n(52, 71)\n(52, 72)\n(52, 73)\n(52, 74)\n(52, 75)\n(52, 76)\n(52, 77)\n(52, 78)\n(52, 79)\n(52, 80)\n(52, 81)\n(52, 82)\n(52, 83)\n(52, 84)\n(52, 85)\n(52, 86)\n(52, 87)\n(52, 88)\n(52, 89)\n(52, 90)\n(52, 91)\n(52, 92)\n(52, 93)\n(52, 94)\n(52, 95)\n(52, 96)\n(52, 97)\n(52, 98)\n(52, 99)\n(53, 53)\n(53, 54)\n(53, 55)\n(53, 56)\n(53, 57)\n(53, 58)\n(53, 59)\n(53, 60)\n(53, 61)\n(53, 62)\n(53, 63)\n(53, 64)\n(53, 65)\n(53, 66)\n(53, 67)\n(53, 68)\n(53, 69)\n(53, 70)\n(53, 71)\n(53, 72)\n(53, 73)\n(53, 74)\n(53, 75)\n(53, 76)\n(53, 77)\n(53, 78)\n(53, 79)\n(53, 80)\n(53, 81)\n(53, 82)\n(53, 83)\n(53, 84)\n(53, 85)\n(53, 86)\n(53, 87)\n(53, 88)\n(53, 89)\n(53, 90)\n(53, 91)\n(53, 92)\n(53, 93)\n(53, 94)\n(53, 95)\n(53, 96)\n(53, 97)\n(53, 98)\n(53, 99)\n(54, 54)\n(54, 55)\n(54, 56)\n(54, 57)\n(54, 58)\n(54, 59)\n(54, 60)\n(54, 61)\n(54, 62)\n(54, 63)\n(54, 64)\n(54, 65)\n(54, 66)\n(54, 67)\n(54, 68)\n(54, 69)\n(54, 70)\n(54, 71)\n(54, 72)\n(54, 73)\n(54, 74)\n(54, 75)\n(54, 76)\n(54, 77)\n(54, 78)\n(54, 79)\n(54, 80)\n(54, 81)\n(54, 82)\n(54, 83)\n(54, 84)\n(54, 85)\n(54, 86)\n(54, 87)\n(54, 88)\n(54, 89)\n(54, 90)\n(54, 91)\n(54, 92)\n(54, 93)\n(54, 94)\n(54, 95)\n(54, 96)\n(54, 97)\n(54, 98)\n(54, 99)\n(55, 55)\n(55, 56)\n(55, 57)\n(55, 58)\n(55, 59)\n(55, 60)\n(55, 61)\n(55, 62)\n(55, 63)\n(55, 64)\n(55, 65)\n(55, 66)\n(55, 67)\n(55, 68)\n(55, 69)\n(55, 70)\n(55, 71)\n(55, 72)\n(55, 73)\n(55, 74)\n(55, 75)\n(55, 76)\n(55, 77)\n(55, 78)\n(55, 79)\n(55, 80)\n(55, 81)\n(55, 82)\n(55, 83)\n(55, 84)\n(55, 85)\n(55, 86)\n(55, 87)\n(55, 88)\n(55, 89)\n(55, 90)\n(55, 91)\n(55, 92)\n(55, 93)\n(55, 94)\n(55, 95)\n(55, 96)\n(55, 97)\n(55, 98)\n(55, 99)\n(56, 56)\n(56, 57)\n(56, 58)\n(56, 59)\n(56, 60)\n(56, 61)\n(56, 62)\n(56, 63)\n(56, 64)\n(56, 65)\n(56, 66)\n(56, 67)\n(56, 68)\n(56, 69)\n(56, 70)\n(56, 71)\n(56, 72)\n(56, 73)\n(56, 74)\n(56, 75)\n(56, 76)\n(56, 77)\n(56, 78)\n(56, 79)\n(56, 80)\n(56, 81)\n(56, 82)\n(56, 83)\n(56, 84)\n(56, 85)\n(56, 86)\n(56, 87)\n(56, 88)\n(56, 89)\n(56, 90)\n(56, 91)\n(56, 92)\n(56, 93)\n(56, 94)\n(56, 95)\n(56, 96)\n(56, 97)\n(56, 98)\n(56, 99)\n(57, 57)\n(57, 58)\n(57, 59)\n(57, 60)\n(57, 61)\n(57, 62)\n(57, 63)\n(57, 64)\n(57, 65)\n(57, 66)\n(57, 67)\n(57, 68)\n(57, 69)\n(57, 70)\n(57, 71)\n(57, 72)\n(57, 73)\n(57, 74)\n(57, 75)\n(57, 76)\n(57, 77)\n(57, 78)\n(57, 79)\n(57, 80)\n(57, 81)\n(57, 82)\n(57, 83)\n(57, 84)\n(57, 85)\n(57, 86)\n(57, 87)\n(57, 88)\n(57, 89)\n(57, 90)\n(57, 91)\n(57, 92)\n(57, 93)\n(57, 94)\n(57, 95)\n(57, 96)\n(57, 97)\n(57, 98)\n(57, 99)\n(58, 58)\n(58, 59)\n(58, 60)\n(58, 61)\n(58, 62)\n(58, 63)\n(58, 64)\n(58, 65)\n(58, 66)\n(58, 67)\n(58, 68)\n(58, 69)\n(58, 70)\n(58, 71)\n(58, 72)\n(58, 73)\n(58, 74)\n(58, 75)\n(58, 76)\n(58, 77)\n(58, 78)\n(58, 79)\n(58, 80)\n(58, 81)\n(58, 82)\n(58, 83)\n(58, 84)\n(58, 85)\n(58, 86)\n(58, 87)\n(58, 88)\n(58, 89)\n(58, 90)\n(58, 91)\n(58, 92)\n(58, 93)\n(58, 94)\n(58, 95)\n(58, 96)\n(58, 97)\n(58, 98)\n(58, 99)\n(59, 59)\n(59, 60)\n(59, 61)\n(59, 62)\n(59, 63)\n(59, 64)\n(59, 65)\n(59, 66)\n(59, 67)\n(59, 68)\n(59, 69)\n(59, 70)\n(59, 71)\n(59, 72)\n(59, 73)\n(59, 74)\n(59, 75)\n(59, 76)\n(59, 77)\n(59, 78)\n(59, 79)\n(59, 80)\n(59, 81)\n(59, 82)\n(59, 83)\n(59, 84)\n(59, 85)\n(59, 86)\n(59, 87)\n(59, 88)\n(59, 89)\n(59, 90)\n(59, 91)\n(59, 92)\n(59, 93)\n(59, 94)\n(59, 95)\n(59, 96)\n(59, 97)\n(59, 98)\n(59, 99)\n(60, 60)\n(60, 61)\n(60, 62)\n(60, 63)\n(60, 64)\n(60, 65)\n(60, 66)\n(60, 67)\n(60, 68)\n(60, 69)\n(60, 70)\n(60, 71)\n(60, 72)\n(60, 73)\n(60, 74)\n(60, 75)\n(60, 76)\n(60, 77)\n(60, 78)\n(60, 79)\n(60, 80)\n(60, 81)\n(60, 82)\n(60, 83)\n(60, 84)\n(60, 85)\n(60, 86)\n(60, 87)\n(60, 88)\n(60, 89)\n(60, 90)\n(60, 91)\n(60, 92)\n(60, 93)\n(60, 94)\n(60, 95)\n(60, 96)\n(60, 97)\n(60, 98)\n(60, 99)\n(61, 61)\n(61, 62)\n(61, 63)\n(61, 64)\n(61, 65)\n(61, 66)\n(61, 67)\n(61, 68)\n(61, 69)\n(61, 70)\n(61, 71)\n(61, 72)\n(61, 73)\n(61, 74)\n(61, 75)\n(61, 76)\n(61, 77)\n(61, 78)\n(61, 79)\n(61, 80)\n(61, 81)\n(61, 82)\n(61, 83)\n(61, 84)\n(61, 85)\n(61, 86)\n(61, 87)\n(61, 88)\n(61, 89)\n(61, 90)\n(61, 91)\n(61, 92)\n(61, 93)\n(61, 94)\n(61, 95)\n(61, 96)\n(61, 97)\n(61, 98)\n(61, 99)\n(62, 62)\n(62, 63)\n(62, 64)\n(62, 65)\n(62, 66)\n(62, 67)\n(62, 68)\n(62, 69)\n(62, 70)\n(62, 71)\n(62, 72)\n(62, 73)\n(62, 74)\n(62, 75)\n(62, 76)\n(62, 77)\n(62, 78)\n(62, 79)\n(62, 80)\n(62, 81)\n(62, 82)\n(62, 83)\n(62, 84)\n(62, 85)\n(62, 86)\n(62, 87)\n(62, 88)\n(62, 89)\n(62, 90)\n(62, 91)\n(62, 92)\n(62, 93)\n(62, 94)\n(62, 95)\n(62, 96)\n(62, 97)\n(62, 98)\n(62, 99)\n(63, 63)\n(63, 64)\n(63, 65)\n(63, 66)\n(63, 67)\n(63, 68)\n(63, 69)\n(63, 70)\n(63, 71)\n(63, 72)\n(63, 73)\n(63, 74)\n(63, 75)\n(63, 76)\n(63, 77)\n(63, 78)\n(63, 79)\n(63, 80)\n(63, 81)\n(63, 82)\n(63, 83)\n(63, 84)\n(63, 85)\n(63, 86)\n(63, 87)\n(63, 88)\n(63, 89)\n(63, 90)\n(63, 91)\n(63, 92)\n(63, 93)\n(63, 94)\n(63, 95)\n(63, 96)\n(63, 97)\n(63, 98)\n(63, 99)\n(64, 64)\n(64, 65)\n(64, 66)\n(64, 67)\n(64, 68)\n(64, 69)\n(64, 70)\n(64, 71)\n(64, 72)\n(64, 73)\n(64, 74)\n(64, 75)\n(64, 76)\n(64, 77)\n(64, 78)\n(64, 79)\n(64, 80)\n(64, 81)\n(64, 82)\n(64, 83)\n(64, 84)\n(64, 85)\n(64, 86)\n(64, 87)\n(64, 88)\n(64, 89)\n(64, 90)\n(64, 91)\n(64, 92)\n(64, 93)\n(64, 94)\n(64, 95)\n(64, 96)\n(64, 97)\n(64, 98)\n(64, 99)\n(65, 65)\n(65, 66)\n(65, 67)\n(65, 68)\n(65, 69)\n(65, 70)\n(65, 71)\n(65, 72)\n(65, 73)\n(65, 74)\n(65, 75)\n(65, 76)\n(65, 77)\n(65, 78)\n(65, 79)\n(65, 80)\n(65, 81)\n(65, 82)\n(65, 83)\n(65, 84)\n(65, 85)\n(65, 86)\n(65, 87)\n(65, 88)\n(65, 89)\n(65, 90)\n(65, 91)\n(65, 92)\n(65, 93)\n(65, 94)\n(65, 95)\n(65, 96)\n(65, 97)\n(65, 98)\n(65, 99)\n(66, 66)\n(66, 67)\n(66, 68)\n(66, 69)\n(66, 70)\n(66, 71)\n(66, 72)\n(66, 73)\n(66, 74)\n(66, 75)\n(66, 76)\n(66, 77)\n(66, 78)\n(66, 79)\n(66, 80)\n(66, 81)\n(66, 82)\n(66, 83)\n(66, 84)\n(66, 85)\n(66, 86)\n(66, 87)\n(66, 88)\n(66, 89)\n(66, 90)\n(66, 91)\n(66, 92)\n(66, 93)\n(66, 94)\n(66, 95)\n(66, 96)\n(66, 97)\n(66, 98)\n(66, 99)\n(67, 67)\n(67, 68)\n(67, 69)\n(67, 70)\n(67, 71)\n(67, 72)\n(67, 73)\n(67, 74)\n(67, 75)\n(67, 76)\n(67, 77)\n(67, 78)\n(67, 79)\n(67, 80)\n(67, 81)\n(67, 82)\n(67, 83)\n(67, 84)\n(67, 85)\n(67, 86)\n(67, 87)\n(67, 88)\n(67, 89)\n(67, 90)\n(67, 91)\n(67, 92)\n(67, 93)\n(67, 94)\n(67, 95)\n(67, 96)\n(67, 97)\n(67, 98)\n(67, 99)\n(68, 68)\n(68, 69)\n(68, 70)\n(68, 71)\n(68, 72)\n(68, 73)\n(68, 74)\n(68, 75)\n(68, 76)\n(68, 77)\n(68, 78)\n(68, 79)\n(68, 80)\n(68, 81)\n(68, 82)\n(68, 83)\n(68, 84)\n(68, 85)\n(68, 86)\n(68, 87)\n(68, 88)\n(68, 89)\n(68, 90)\n(68, 91)\n(68, 92)\n(68, 93)\n(68, 94)\n(68, 95)\n(68, 96)\n(68, 97)\n(68, 98)\n(68, 99)\n(69, 69)\n(69, 70)\n(69, 71)\n(69, 72)\n(69, 73)\n(69, 74)\n(69, 75)\n(69, 76)\n(69, 77)\n(69, 78)\n(69, 79)\n(69, 80)\n(69, 81)\n(69, 82)\n(69, 83)\n(69, 84)\n(69, 85)\n(69, 86)\n(69, 87)\n(69, 88)\n(69, 89)\n(69, 90)\n(69, 91)\n(69, 92)\n(69, 93)\n(69, 94)\n(69, 95)\n(69, 96)\n(69, 97)\n(69, 98)\n(69, 99)\n(70, 70)\n(70, 71)\n(70, 72)\n(70, 73)\n(70, 74)\n(70, 75)\n(70, 76)\n(70, 77)\n(70, 78)\n(70, 79)\n(70, 80)\n(70, 81)\n(70, 82)\n(70, 83)\n(70, 84)\n(70, 85)\n(70, 86)\n(70, 87)\n(70, 88)\n(70, 89)\n(70, 90)\n(70, 91)\n(70, 92)\n(70, 93)\n(70, 94)\n(70, 95)\n(70, 96)\n(70, 97)\n(70, 98)\n(70, 99)\n(71, 71)\n(71, 72)\n(71, 73)\n(71, 74)\n(71, 75)\n(71, 76)\n(71, 77)\n(71, 78)\n(71, 79)\n(71, 80)\n(71, 81)\n(71, 82)\n(71, 83)\n(71, 84)\n(71, 85)\n(71, 86)\n(71, 87)\n(71, 88)\n(71, 89)\n(71, 90)\n(71, 91)\n(71, 92)\n(71, 93)\n(71, 94)\n(71, 95)\n(71, 96)\n(71, 97)\n(71, 98)\n(71, 99)\n(72, 72)\n(72, 73)\n(72, 74)\n(72, 75)\n(72, 76)\n(72, 77)\n(72, 78)\n(72, 79)\n(72, 80)\n(72, 81)\n(72, 82)\n(72, 83)\n(72, 84)\n(72, 85)\n(72, 86)\n(72, 87)\n(72, 88)\n(72, 89)\n(72, 90)\n(72, 91)\n(72, 92)\n(72, 93)\n(72, 94)\n(72, 95)\n(72, 96)\n(72, 97)\n(72, 98)\n(72, 99)\n(73, 73)\n(73, 74)\n(73, 75)\n(73, 76)\n(73, 77)\n(73, 78)\n(73, 79)\n(73, 80)\n(73, 81)\n(73, 82)\n(73, 83)\n(73, 84)\n(73, 85)\n(73, 86)\n(73, 87)\n(73, 88)\n(73, 89)\n(73, 90)\n(73, 91)\n(73, 92)\n(73, 93)\n(73, 94)\n(73, 95)\n(73, 96)\n(73, 97)\n(73, 98)\n(73, 99)\n(74, 74)\n(74, 75)\n(74, 76)\n(74, 77)\n(74, 78)\n(74, 79)\n(74, 80)\n(74, 81)\n(74, 82)\n(74, 83)\n(74, 84)\n(74, 85)\n(74, 86)\n(74, 87)\n(74, 88)\n(74, 89)\n(74, 90)\n(74, 91)\n(74, 92)\n(74, 93)\n(74, 94)\n(74, 95)\n(74, 96)\n(74, 97)\n(74, 98)\n(74, 99)\n(75, 75)\n(75, 76)\n(75, 77)\n(75, 78)\n(75, 79)\n(75, 80)\n(75, 81)\n(75, 82)\n(75, 83)\n(75, 84)\n(75, 85)\n(75, 86)\n(75, 87)\n(75, 88)\n(75, 89)\n(75, 90)\n(75, 91)\n(75, 92)\n(75, 93)\n(75, 94)\n(75, 95)\n(75, 96)\n(75, 97)\n(75, 98)\n(75, 99)\n(76, 76)\n(76, 77)\n(76, 78)\n(76, 79)\n(76, 80)\n(76, 81)\n(76, 82)\n(76, 83)\n(76, 84)\n(76, 85)\n(76, 86)\n(76, 87)\n(76, 88)\n(76, 89)\n(76, 90)\n(76, 91)\n(76, 92)\n(76, 93)\n(76, 94)\n(76, 95)\n(76, 96)\n(76, 97)\n(76, 98)\n(76, 99)\n(77, 77)\n(77, 78)\n(77, 79)\n(77, 80)\n(77, 81)\n(77, 82)\n(77, 83)\n(77, 84)\n(77, 85)\n(77, 86)\n(77, 87)\n(77, 88)\n(77, 89)\n(77, 90)\n(77, 91)\n(77, 92)\n(77, 93)\n(77, 94)\n(77, 95)\n(77, 96)\n(77, 97)\n(77, 98)\n(77, 99)\n(78, 78)\n(78, 79)\n(78, 80)\n(78, 81)\n(78, 82)\n(78, 83)\n(78, 84)\n(78, 85)\n(78, 86)\n(78, 87)\n(78, 88)\n(78, 89)\n(78, 90)\n(78, 91)\n(78, 92)\n(78, 93)\n(78, 94)\n(78, 95)\n(78, 96)\n(78, 97)\n(78, 98)\n(78, 99)\n(79, 79)\n(79, 80)\n(79, 81)\n(79, 82)\n(79, 83)\n(79, 84)\n(79, 85)\n(79, 86)\n(79, 87)\n(79, 88)\n(79, 89)\n(79, 90)\n(79, 91)\n(79, 92)\n(79, 93)\n(79, 94)\n(79, 95)\n(79, 96)\n(79, 97)\n(79, 98)\n(79, 99)\n(80, 80)\n(80, 81)\n(80, 82)\n(80, 83)\n(80, 84)\n(80, 85)\n(80, 86)\n(80, 87)\n(80, 88)\n(80, 89)\n(80, 90)\n(80, 91)\n(80, 92)\n(80, 93)\n(80, 94)\n(80, 95)\n(80, 96)\n(80, 97)\n(80, 98)\n(80, 99)\n(81, 81)\n(81, 82)\n(81, 83)\n(81, 84)\n(81, 85)\n(81, 86)\n(81, 87)\n(81, 88)\n(81, 89)\n(81, 90)\n(81, 91)\n(81, 92)\n(81, 93)\n(81, 94)\n(81, 95)\n(81, 96)\n(81, 97)\n(81, 98)\n(81, 99)\n(82, 82)\n(82, 83)\n(82, 84)\n(82, 85)\n(82, 86)\n(82, 87)\n(82, 88)\n(82, 89)\n(82, 90)\n(82, 91)\n(82, 92)\n(82, 93)\n(82, 94)\n(82, 95)\n(82, 96)\n(82, 97)\n(82, 98)\n(82, 99)\n(83, 83)\n(83, 84)\n(83, 85)\n(83, 86)\n(83, 87)\n(83, 88)\n(83, 89)\n(83, 90)\n(83, 91)\n(83, 92)\n(83, 93)\n(83, 94)\n(83, 95)\n(83, 96)\n(83, 97)\n(83, 98)\n(83, 99)\n(84, 84)\n(84, 85)\n(84, 86)\n(84, 87)\n(84, 88)\n(84, 89)\n(84, 90)\n(84, 91)\n(84, 92)\n(84, 93)\n(84, 94)\n(84, 95)\n(84, 96)\n(84, 97)\n(84, 98)\n(84, 99)\n(85, 85)\n(85, 86)\n(85, 87)\n(85, 88)\n(85, 89)\n(85, 90)\n(85, 91)\n(85, 92)\n(85, 93)\n(85, 94)\n(85, 95)\n(85, 96)\n(85, 97)\n(85, 98)\n(85, 99)\n(86, 86)\n(86, 87)\n(86, 88)\n(86, 89)\n(86, 90)\n(86, 91)\n(86, 92)\n(86, 93)\n(86, 94)\n(86, 95)\n(86, 96)\n(86, 97)\n(86, 98)\n(86, 99)\n(87, 87)\n(87, 88)\n(87, 89)\n(87, 90)\n(87, 91)\n(87, 92)\n(87, 93)\n(87, 94)\n(87, 95)\n(87, 96)\n(87, 97)\n(87, 98)\n(87, 99)\n(88, 88)\n(88, 89)\n(88, 90)\n(88, 91)\n(88, 92)\n(88, 93)\n(88, 94)\n(88, 95)\n(88, 96)\n(88, 97)\n(88, 98)\n(88, 99)\n(89, 89)\n(89, 90)\n(89, 91)\n(89, 92)\n(89, 93)\n(89, 94)\n(89, 95)\n(89, 96)\n(89, 97)\n(89, 98)\n(89, 99)\n(90, 90)\n(90, 91)\n(90, 92)\n(90, 93)\n(90, 94)\n(90, 95)\n(90, 96)\n(90, 97)\n(90, 98)\n(90, 99)\n(91, 91)\n(91, 92)\n(91, 93)\n(91, 94)\n(91, 95)\n(91, 96)\n(91, 97)\n(91, 98)\n(91, 99)\n(92, 92)\n(92, 93)\n(92, 94)\n(92, 95)\n(92, 96)\n(92, 97)\n(92, 98)\n(92, 99)\n(93, 93)\n(93, 94)\n(93, 95)\n(93, 96)\n(93, 97)\n(93, 98)\n(93, 99)\n(94, 94)\n(94, 95)\n(94, 96)\n(94, 97)\n(94, 98)\n(94, 99)\n(95, 95)\n(95, 96)\n(95, 97)\n(95, 98)\n(95, 99)\n(96, 96)\n(96, 97)\n(96, 98)\n(96, 99)\n(97, 97)\n(97, 98)\n(97, 99)\n(98, 98)\n(98, 99)\n(99, 99)", "model_answers": [1.0, 1.0, 1.0, 2.0, 1.0, 3.0, 1.0, 4.0, 1.0, 5.0, 1.0, 6.0, 1.0, 7.0, 1.0, 8.0, 1.0, 9.0, 1.0, 10.0, 1.0, 11.0, 1.0, 12.0, 1.0, 13.0, 1.0, 14.0, 1.0, 15.0, 1.0, 16.0, 1.0, 17.0, 1.0, 18.0, 1.0, 19.0, 1.0, 20.0, 1.0, 21.0, 1.0, 22.0, 1.0, 23.0, 1.0, 24.0, 1.0, 25.0, 1.0, 26.0, 1.0, 27.0, 1.0, 28.0, 1.0, 29.0, 1.0, 30.0, 1.0, 31.0, 1.0, 32.0, 1.0, 33.0, 1.0, 34.0, 1.0, 35.0, 1.0, 36.0, 1.0, 37.0, 1.0, 38.0, 1.0, 39.0, 1.0, 40.0, 1.0, 41.0, 1.0, 42.0, 1.0, 43.0, 1.0, 44.0, 1.0, 45.0, 1.0, 46.0, 1.0, 47.0, 1.0, 48.0, 1.0, 49.0, 1.0, 50.0, 1.0, 51.0, 1.0, 52.0, 1.0, 53.0, 1.0, 54.0, 1.0, 55.0, 1.0, 56.0, 1.0, 57.0, 1.0, 58.0, 1.0, 59.0, 1.0, 60.0, 1.0, 61.0, 1.0, 62.0, 1.0, 63.0, 1.0, 64.0, 1.0, 65.0, 1.0, 66.0, 1.0, 67.0, 1.0, 68.0, 1.0, 69.0, 1.0, 70.0, 1.0, 71.0, 1.0, 72.0, 1.0, 73.0, 1.0, 74.0, 1.0, 75.0, 1.0, 76.0, 1.0, 77.0, 1.0, 78.0, 1.0, 79.0, 1.0, 80.0, 1.0, 81.0, 1.0, 82.0, 1.0, 83.0, 1.0, 84.0, 1.0, 85.0, 1.0, 86.0, 1.0, 87.0, 1.0, 88.0, 1.0, 89.0, 1.0, 90.0, 1.0, 91.0, 1.0, 92.0, 1.0, 93.0, 1.0, 94.0, 1.0, 95.0, 1.0, 96.0, 1.0, 97.0, 1.0, 98.0, 1.0, 99.0, 2.0, 2.0, 2.0, 3.0, 2.0, 4.0, 2.0, 5.0, 2.0, 6.0, 2.0, 7.0, 2.0, 8.0, 2.0, 9.0, 2.0, 10.0, 2.0, 11.0, 2.0, 12.0, 2.0, 13.0, 2.0, 14.0, 2.0, 15.0, 2.0, 16.0, 2.0, 17.0, 2.0, 18.0, 2.0, 19.0, 2.0, 20.0, 2.0, 21.0, 2.0, 22.0, 2.0, 23.0, 2.0, 24.0, 2.0, 25.0, 2.0, 26.0, 2.0, 27.0, 2.0, 28.0, 2.0, 29.0, 2.0, 30.0, 2.0, 31.0, 2.0, 32.0, 2.0, 33.0, 2.0, 34.0, 2.0, 35.0, 2.0, 36.0, 2.0, 37.0, 2.0, 38.0, 2.0, 39.0, 2.0, 40.0, 2.0, 41.0, 2.0, 42.0, 2.0, 43.0, 2.0, 44.0, 2.0, 45.0, 2.0, 46.0, 2.0, 47.0, 2.0, 48.0, 2.0, 49.0, 2.0, 50.0, 2.0, 51.0, 2.0, 52.0, 2.0, 53.0, 2.0, 54.0, 2.0, 55.0, 2.0, 56.0, 2.0, 57.0, 2.0, 58.0, 2.0, 59.0, 2.0, 60.0, 2.0, 61.0, 2.0, 62.0, 2.0, 63.0, 2.0, 64.0, 2.0, 65.0, 2.0, 66.0, 2.0, 67.0, 2.0, 68.0, 2.0, 69.0, 2.0, 70.0, 2.0, 71.0, 2.0, 72.0, 2.0, 73.0, 2.0, 74.0, 2.0, 75.0, 2.0, 76.0, 2.0, 77.0, 2.0, 78.0, 2.0, 79.0, 2.0, 80.0, 2.0, 81.0, 2.0, 82.0, 2.0, 83.0, 2.0, 84.0, 2.0, 85.0, 2.0, 86.0, 2.0, 87.0, 2.0, 88.0, 2.0, 89.0, 2.0, 90.0, 2.0, 91.0, 2.0, 92.0, 2.0, 93.0, 2.0, 94.0, 2.0, 95.0, 2.0, 96.0, 2.0, 97.0, 2.0, 98.0, 2.0, 99.0, 3.0, 3.0, 3.0, 4.0, 3.0, 5.0, 3.0, 6.0, 3.0, 7.0, 3.0, 8.0, 3.0, 9.0, 3.0, 10.0, 3.0, 11.0, 3.0, 12.0, 3.0, 13.0, 3.0, 14.0, 3.0, 15.0, 3.0, 16.0, 3.0, 17.0, 3.0, 18.0, 3.0, 19.0, 3.0, 20.0, 3.0, 21.0, 3.0, 22.0, 3.0, 23.0, 3.0, 24.0, 3.0, 25.0, 3.0, 26.0, 3.0, 27.0, 3.0, 28.0, 3.0, 29.0, 3.0, 30.0, 3.0, 31.0, 3.0, 32.0, 3.0, 33.0, 3.0, 34.0, 3.0, 35.0, 3.0, 36.0, 3.0, 37.0, 3.0, 38.0, 3.0, 39.0, 3.0, 40.0, 3.0, 41.0, 3.0, 42.0, 3.0, 43.0, 3.0, 44.0, 3.0, 45.0, 3.0, 46.0, 3.0, 47.0, 3.0, 48.0, 3.0, 49.0, 3.0, 50.0, 3.0, 51.0, 3.0, 52.0, 3.0, 53.0, 3.0, 54.0, 3.0, 55.0, 3.0, 56.0, 3.0, 57.0, 3.0, 58.0, 3.0, 59.0, 3.0, 60.0, 3.0, 61.0, 3.0, 62.0, 3.0, 63.0, 3.0, 64.0, 3.0, 65.0, 3.0, 66.0, 3.0, 67.0, 3.0, 68.0, 3.0, 69.0, 3.0, 70.0, 3.0, 71.0, 3.0, 72.0, 3.0, 73.0, 3.0, 74.0, 3.0, 75.0, 3.0, 76.0, 3.0, 77.0, 3.0, 78.0, 3.0, 79.0, 3.0, 80.0, 3.0, 81.0, 3.0, 82.0, 3.0, 83.0, 3.0, 84.0, 3.0, 85.0, 3.0, 86.0, 3.0, 87.0, 3.0, 88.0, 3.0, 89.0, 3.0, 90.0, 3.0, 91.0, 3.0, 92.0, 3.0, 93.0, 3.0, 94.0, 3.0, 95.0, 3.0, 96.0, 3.0, 97.0, 3.0, 98.0, 3.0, 99.0, 4.0, 4.0, 4.0, 5.0, 4.0, 6.0, 4.0, 7.0, 4.0, 8.0, 4.0, 9.0, 4.0, 10.0, 4.0, 11.0, 4.0, 12.0, 4.0, 13.0, 4.0, 14.0, 4.0, 15.0, 4.0, 16.0, 4.0, 17.0, 4.0, 18.0, 4.0, 19.0, 4.0, 20.0, 4.0, 21.0, 4.0, 22.0, 4.0, 23.0, 4.0, 24.0, 4.0, 25.0, 4.0, 26.0, 4.0, 27.0, 4.0, 28.0, 4.0, 29.0, 4.0, 30.0, 4.0, 31.0, 4.0, 32.0, 4.0, 33.0, 4.0, 34.0, 4.0, 35.0, 4.0, 36.0, 4.0, 37.0, 4.0, 38.0, 4.0, 39.0, 4.0, 40.0, 4.0, 41.0, 4.0, 42.0, 4.0, 43.0, 4.0, 44.0, 4.0, 45.0, 4.0, 46.0, 4.0, 47.0, 4.0, 48.0, 4.0, 49.0, 4.0, 50.0, 4.0, 51.0, 4.0, 52.0, 4.0, 53.0, 4.0, 54.0, 4.0, 55.0, 4.0, 56.0, 4.0, 57.0, 4.0, 58.0, 4.0, 59.0, 4.0, 60.0, 4.0, 61.0, 4.0, 62.0, 4.0, 63.0, 4.0, 64.0, 4.0, 65.0, 4.0, 66.0, 4.0, 67.0, 4.0, 68.0, 4.0, 69.0, 4.0, 70.0, 4.0, 71.0, 4.0, 72.0, 4.0, 73.0, 4.0, 74.0, 4.0, 75.0, 4.0, 76.0, 4.0, 77.0, 4.0, 78.0, 4.0, 79.0, 4.0, 80.0, 4.0, 81.0, 4.0, 82.0, 4.0, 83.0, 4.0, 84.0, 4.0, 85.0, 4.0, 86.0, 4.0, 87.0, 4.0, 88.0, 4.0, 89.0, 4.0, 90.0, 4.0, 91.0, 4.0, 92.0, 4.0, 93.0, 4.0, 94.0, 4.0, 95.0, 4.0, 96.0, 4.0, 97.0, 4.0, 98.0, 4.0, 99.0, 5.0, 5.0, 5.0, 6.0, 5.0, 7.0, 5.0, 8.0, 5.0, 9.0, 5.0, 10.0, 5.0, 11.0, 5.0, 12.0, 5.0, 13.0, 5.0, 14.0, 5.0, 15.0, 5.0, 16.0, 5.0, 17.0, 5.0, 18.0, 5.0, 19.0, 5.0, 20.0, 5.0, 21.0, 5.0, 22.0, 5.0, 23.0, 5.0, 24.0, 5.0, 25.0, 5.0, 26.0, 5.0, 27.0, 5.0, 28.0, 5.0, 29.0, 5.0, 30.0, 5.0, 31.0, 5.0, 32.0, 5.0, 33.0, 5.0, 34.0, 5.0, 35.0, 5.0, 36.0, 5.0, 37.0, 5.0, 38.0, 5.0, 39.0, 5.0, 40.0, 5.0, 41.0, 5.0, 42.0, 5.0, 43.0, 5.0, 44.0, 5.0, 45.0, 5.0, 46.0, 5.0, 47.0, 5.0, 48.0, 5.0, 49.0, 5.0, 50.0, 5.0, 51.0, 5.0, 52.0, 5.0, 53.0, 5.0, 54.0, 5.0, 55.0, 5.0, 56.0, 5.0, 57.0, 5.0, 58.0, 5.0, 59.0, 5.0, 60.0, 5.0, 61.0, 5.0, 62.0, 5.0, 63.0, 5.0, 64.0, 5.0, 65.0, 5.0, 66.0, 5.0, 67.0, 5.0, 68.0, 5.0, 69.0, 5.0, 70.0, 5.0, 71.0, 5.0, 72.0, 5.0, 73.0, 5.0, 74.0, 5.0, 75.0, 5.0, 76.0, 5.0, 77.0, 5.0, 78.0, 5.0, 79.0, 5.0, 80.0, 5.0, 81.0, 5.0, 82.0, 5.0, 83.0, 5.0, 84.0, 5.0, 85.0, 5.0, 86.0, 5.0, 87.0, 5.0, 88.0, 5.0, 89.0, 5.0, 90.0, 5.0, 91.0, 5.0, 92.0, 5.0, 93.0, 5.0, 94.0, 5.0, 95.0, 5.0, 96.0, 5.0, 97.0, 5.0, 98.0, 5.0, 99.0, 6.0, 6.0, 6.0, 7.0, 6.0, 8.0, 6.0, 9.0, 6.0, 10.0, 6.0, 11.0, 6.0, 12.0, 6.0, 13.0, 6.0, 14.0, 6.0, 15.0, 6.0, 16.0, 6.0, 17.0, 6.0, 18.0, 6.0, 19.0, 6.0, 20.0, 6.0, 21.0, 6.0, 22.0, 6.0, 23.0, 6.0, 24.0, 6.0, 25.0, 6.0, 26.0, 6.0, 27.0, 6.0, 28.0, 6.0, 29.0, 6.0, 30.0, 6.0, 31.0, 6.0, 32.0, 6.0, 33.0, 6.0, 34.0, 6.0, 35.0, 6.0, 36.0, 6.0, 37.0, 6.0, 38.0, 6.0, 39.0, 6.0, 40.0, 6.0, 41.0, 6.0, 42.0, 6.0, 43.0, 6.0, 44.0, 6.0, 45.0, 6.0, 46.0, 6.0, 47.0, 6.0, 48.0, 6.0, 49.0, 6.0, 50.0, 6.0, 51.0, 6.0, 52.0, 6.0, 53.0, 6.0, 54.0, 6.0, 55.0, 6.0, 56.0, 6.0, 57.0, 6.0, 58.0, 6.0, 59.0, 6.0, 60.0, 6.0, 61.0, 6.0, 62.0, 6.0, 63.0, 6.0, 64.0, 6.0, 65.0, 6.0, 66.0, 6.0, 67.0, 6.0, 68.0, 6.0, 69.0, 6.0, 70.0, 6.0, 71.0, 6.0, 72.0, 6.0, 73.0, 6.0, 74.0, 6.0, 75.0, 6.0, 76.0, 6.0, 77.0, 6.0, 78.0, 6.0, 79.0, 6.0, 80.0, 6.0, 81.0, 6.0, 82.0, 6.0, 83.0, 6.0, 84.0, 6.0, 85.0, 6.0, 86.0, 6.0, 87.0, 6.0, 88.0, 6.0, 89.0, 6.0, 90.0, 6.0, 91.0, 6.0, 92.0, 6.0, 93.0, 6.0, 94.0, 6.0, 95.0, 6.0, 96.0, 6.0, 97.0, 6.0, 98.0, 6.0, 99.0, 7.0, 7.0, 7.0, 8.0, 7.0, 9.0, 7.0, 10.0, 7.0, 11.0, 7.0, 12.0, 7.0, 13.0, 7.0, 14.0, 7.0, 15.0, 7.0, 16.0, 7.0, 17.0, 7.0, 18.0, 7.0, 19.0, 7.0, 20.0, 7.0, 21.0, 7.0, 22.0, 7.0, 23.0, 7.0, 24.0, 7.0, 25.0, 7.0, 26.0, 7.0, 27.0, 7.0, 28.0, 7.0, 29.0, 7.0, 30.0, 7.0, 31.0, 7.0, 32.0, 7.0, 33.0, 7.0, 34.0, 7.0, 35.0, 7.0, 36.0, 7.0, 37.0, 7.0, 38.0, 7.0, 39.0, 7.0, 40.0, 7.0, 41.0, 7.0, 42.0, 7.0, 43.0, 7.0, 44.0, 7.0, 45.0, 7.0, 46.0, 7.0, 47.0, 7.0, 48.0, 7.0, 49.0, 7.0, 50.0, 7.0, 51.0, 7.0, 52.0, 7.0, 53.0, 7.0, 54.0, 7.0, 55.0, 7.0, 56.0, 7.0, 57.0, 7.0, 58.0, 7.0, 59.0, 7.0, 60.0, 7.0, 61.0, 7.0, 62.0, 7.0, 63.0, 7.0, 64.0, 7.0, 65.0, 7.0, 66.0, 7.0, 67.0, 7.0, 68.0, 7.0, 69.0, 7.0, 70.0, 7.0, 71.0, 7.0, 72.0, 7.0, 73.0, 7.0, 74.0, 7.0, 75.0, 7.0, 76.0, 7.0, 77.0, 7.0, 78.0, 7.0, 79.0, 7.0, 80.0, 7.0, 81.0, 7.0, 82.0, 7.0, 83.0, 7.0, 84.0, 7.0, 85.0, 7.0, 86.0, 7.0, 87.0, 7.0, 88.0, 7.0, 89.0, 7.0, 90.0, 7.0, 91.0, 7.0, 92.0, 7.0, 93.0, 7.0, 94.0, 7.0, 95.0, 7.0, 96.0, 7.0, 97.0, 7.0, 98.0, 7.0, 99.0, 8.0, 8.0, 8.0, 9.0, 8.0, 10.0, 8.0, 11.0, 8.0, 12.0, 8.0, 13.0, 8.0, 14.0, 8.0, 15.0, 8.0, 16.0, 8.0, 17.0, 8.0, 18.0, 8.0, 19.0, 8.0, 20.0, 8.0, 21.0, 8.0, 22.0, 8.0, 23.0, 8.0, 24.0, 8.0, 25.0, 8.0, 26.0, 8.0, 27.0, 8.0, 28.0, 8.0, 29.0, 8.0, 30.0, 8.0, 31.0, 8.0, 32.0, 8.0, 33.0, 8.0, 34.0, 8.0, 35.0, 8.0, 36.0, 8.0, 37.0, 8.0, 38.0, 8.0, 39.0, 8.0, 40.0, 8.0, 41.0, 8.0, 42.0, 8.0, 43.0, 8.0, 44.0, 8.0, 45.0, 8.0, 46.0, 8.0, 47.0, 8.0, 48.0, 8.0, 49.0, 8.0, 50.0, 8.0, 51.0, 8.0, 52.0, 8.0, 53.0, 8.0, 54.0, 8.0, 55.0, 8.0, 56.0, 8.0, 57.0, 8.0, 58.0, 8.0, 59.0, 8.0, 60.0, 8.0, 61.0, 8.0, 62.0, 8.0, 63.0, 8.0, 64.0, 8.0, 65.0, 8.0, 66.0, 8.0, 67.0, 8.0, 68.0, 8.0, 69.0, 8.0, 70.0, 8.0, 71.0, 8.0, 72.0, 8.0, 73.0, 8.0, 74.0, 8.0, 75.0, 8.0, 76.0, 8.0, 77.0, 8.0, 78.0, 8.0, 79.0, 8.0, 80.0, 8.0, 81.0, 8.0, 82.0, 8.0, 83.0, 8.0, 84.0, 8.0, 85.0, 8.0, 86.0, 8.0, 87.0, 8.0, 88.0, 8.0, 89.0, 8.0, 90.0, 8.0, 91.0, 8.0, 92.0, 8.0, 93.0, 8.0, 94.0, 8.0, 95.0, 8.0, 96.0, 8.0, 97.0, 8.0, 98.0, 8.0, 99.0, 9.0, 9.0, 9.0, 10.0, 9.0, 11.0, 9.0, 12.0, 9.0, 13.0, 9.0, 14.0, 9.0, 15.0, 9.0, 16.0, 9.0, 17.0, 9.0, 18.0, 9.0, 19.0, 9.0, 20.0, 9.0, 21.0, 9.0, 22.0, 9.0, 23.0, 9.0, 24.0, 9.0, 25.0, 9.0, 26.0, 9.0, 27.0, 9.0, 28.0, 9.0, 29.0, 9.0, 30.0, 9.0, 31.0, 9.0, 32.0, 9.0, 33.0, 9.0, 34.0, 9.0, 35.0, 9.0, 36.0, 9.0, 37.0, 9.0, 38.0, 9.0, 39.0, 9.0, 40.0, 9.0, 41.0, 9.0, 42.0, 9.0, 43.0, 9.0, 44.0, 9.0, 45.0, 9.0, 46.0, 9.0, 47.0, 9.0, 48.0, 9.0, 49.0, 9.0, 50.0, 9.0, 51.0, 9.0, 52.0, 9.0, 53.0, 9.0, 54.0, 9.0, 55.0, 9.0, 56.0, 9.0, 57.0, 9.0, 58.0, 9.0, 59.0, 9.0, 60.0, 9.0, 61.0, 9.0, 62.0, 9.0, 63.0, 9.0, 64.0, 9.0, 65.0, 9.0, 66.0, 9.0, 67.0, 9.0, 68.0, 9.0, 69.0, 9.0, 70.0, 9.0, 71.0, 9.0, 72.0, 9.0, 73.0, 9.0, 74.0, 9.0, 75.0, 9.0, 76.0, 9.0, 77.0, 9.0, 78.0, 9.0, 79.0, 9.0, 80.0, 9.0, 81.0, 9.0, 82.0, 9.0, 83.0, 9.0, 84.0, 9.0, 85.0, 9.0, 86.0, 9.0, 87.0, 9.0, 88.0, 9.0, 89.0, 9.0, 90.0, 9.0, 91.0, 9.0, 92.0, 9.0, 93.0, 9.0, 94.0, 9.0, 95.0, 9.0, 96.0, 9.0, 97.0, 9.0, 98.0, 9.0, 99.0, 10.0, 10.0, 10.0, 11.0, 10.0, 12.0, 10.0, 13.0, 10.0, 14.0, 10.0, 15.0, 10.0, 16.0, 10.0, 17.0, 10.0, 18.0, 10.0, 19.0, 10.0, 20.0, 10.0, 21.0, 10.0, 22.0, 10.0, 23.0, 10.0, 24.0, 10.0, 25.0, 10.0, 26.0, 10.0, 27.0, 10.0, 28.0, 10.0, 29.0, 10.0, 30.0, 10.0, 31.0, 10.0, 32.0, 10.0, 33.0, 10.0, 34.0, 10.0, 35.0, 10.0, 36.0, 10.0, 37.0, 10.0, 38.0, 10.0, 39.0, 10.0, 40.0, 10.0, 41.0, 10.0, 42.0, 10.0, 43.0, 10.0, 44.0, 10.0, 45.0, 10.0, 46.0, 10.0, 47.0, 10.0, 48.0, 10.0, 49.0, 10.0, 50.0, 10.0, 51.0, 10.0, 52.0, 10.0, 53.0, 10.0, 54.0, 10.0, 55.0, 10.0, 56.0, 10.0, 57.0, 10.0, 58.0, 10.0, 59.0, 10.0, 60.0, 10.0, 61.0, 10.0, 62.0, 10.0, 63.0, 10.0, 64.0, 10.0, 65.0, 10.0, 66.0, 10.0, 67.0, 10.0, 68.0, 10.0, 69.0, 10.0, 70.0, 10.0, 71.0, 10.0, 72.0, 10.0, 73.0, 10.0, 74.0, 10.0, 75.0, 10.0, 76.0, 10.0, 77.0, 10.0, 78.0, 10.0, 79.0, 10.0, 80.0, 10.0, 81.0, 10.0, 82.0, 10.0, 83.0, 10.0, 84.0, 10.0, 85.0, 10.0, 86.0, 10.0, 87.0, 10.0, 88.0, 10.0, 89.0, 10.0, 90.0, 10.0, 91.0, 10.0, 92.0, 10.0, 93.0, 10.0, 94.0, 10.0, 95.0, 10.0, 96.0, 10.0, 97.0, 10.0, 98.0, 10.0, 99.0, 11.0, 11.0, 11.0, 12.0, 11.0, 13.0, 11.0, 14.0, 11.0, 15.0, 11.0, 16.0, 11.0, 17.0, 11.0, 18.0, 11.0, 19.0, 11.0, 20.0, 11.0, 21.0, 11.0, 22.0, 11.0, 23.0, 11.0, 24.0, 11.0, 25.0, 11.0, 26.0, 11.0, 27.0, 11.0, 28.0, 11.0, 29.0, 11.0, 30.0, 11.0, 31.0, 11.0, 32.0, 11.0, 33.0, 11.0, 34.0, 11.0, 35.0, 11.0, 36.0, 11.0, 37.0, 11.0, 38.0, 11.0, 39.0, 11.0, 40.0, 11.0, 41.0, 11.0, 42.0, 11.0, 43.0, 11.0, 44.0, 11.0, 45.0, 11.0, 46.0, 11.0, 47.0, 11.0, 48.0, 11.0, 49.0, 11.0, 50.0, 11.0, 51.0, 11.0, 52.0, 11.0, 53.0, 11.0, 54.0, 11.0, 55.0, 11.0, 56.0, 11.0, 57.0, 11.0, 58.0, 11.0, 59.0, 11.0, 60.0, 11.0, 61.0, 11.0, 62.0, 11.0, 63.0, 11.0, 64.0, 11.0, 65.0, 11.0, 66.0, 11.0, 67.0, 11.0, 68.0, 11.0, 69.0, 11.0, 70.0, 11.0, 71.0, 11.0, 72.0, 11.0, 73.0, 11.0, 74.0, 11.0, 75.0, 11.0, 76.0, 11.0, 77.0, 11.0, 78.0, 11.0, 79.0, 11.0, 80.0, 11.0, 81.0, 11.0, 82.0, 11.0, 83.0, 11.0, 84.0, 11.0, 85.0, 11.0, 86.0, 11.0, 87.0, 11.0, 88.0, 11.0, 89.0, 11.0, 90.0, 11.0, 91.0, 11.0, 92.0, 11.0, 93.0, 11.0, 94.0, 11.0, 95.0, 11.0, 96.0, 11.0, 97.0, 11.0, 98.0, 11.0, 99.0, 12.0, 12.0, 12.0, 13.0, 12.0, 14.0, 12.0, 15.0, 12.0, 16.0, 12.0, 17.0, 12.0, 18.0, 12.0, 19.0, 12.0, 20.0, 12.0, 21.0, 12.0, 22.0, 12.0, 23.0, 12.0, 24.0, 12.0, 25.0, 12.0, 26.0, 12.0, 27.0, 12.0, 28.0, 12.0, 29.0, 12.0, 30.0, 12.0, 31.0, 12.0, 32.0, 12.0, 33.0, 12.0, 34.0, 12.0, 35.0, 12.0, 36.0, 12.0, 37.0, 12.0, 38.0, 12.0, 39.0, 12.0, 40.0, 12.0, 41.0, 12.0, 42.0, 12.0, 43.0, 12.0, 44.0, 12.0, 45.0, 12.0, 46.0, 12.0, 47.0, 12.0, 48.0, 12.0, 49.0, 12.0, 50.0, 12.0, 51.0, 12.0, 52.0, 12.0, 53.0, 12.0, 54.0, 12.0, 55.0, 12.0, 56.0, 12.0, 57.0, 12.0, 58.0, 12.0, 59.0, 12.0, 60.0, 12.0, 61.0, 12.0, 62.0, 12.0, 63.0, 12.0, 64.0, 12.0, 65.0, 12.0, 66.0, 12.0, 67.0, 12.0, 68.0, 12.0, 69.0, 12.0, 70.0, 12.0, 71.0, 12.0, 72.0, 12.0, 73.0, 12.0, 74.0, 12.0, 75.0, 12.0, 76.0, 12.0, 77.0, 12.0, 78.0, 12.0, 79.0, 12.0, 80.0, 12.0, 81.0, 12.0, 82.0, 12.0, 83.0, 12.0, 84.0, 12.0, 85.0, 12.0, 86.0, 12.0, 87.0, 12.0, 88.0, 12.0, 89.0, 12.0, 90.0, 12.0, 91.0, 12.0, 92.0, 12.0, 93.0, 12.0, 94.0, 12.0, 95.0, 12.0, 96.0, 12.0, 97.0, 12.0, 98.0, 12.0, 99.0, 13.0, 13.0, 13.0, 14.0, 13.0, 15.0, 13.0, 16.0, 13.0, 17.0, 13.0, 18.0, 13.0, 19.0, 13.0, 20.0, 13.0, 21.0, 13.0, 22.0, 13.0, 23.0, 13.0, 24.0, 13.0, 25.0, 13.0, 26.0, 13.0, 27.0, 13.0, 28.0, 13.0, 29.0, 13.0, 30.0, 13.0, 31.0, 13.0, 32.0, 13.0, 33.0, 13.0, 34.0, 13.0, 35.0, 13.0, 36.0, 13.0, 37.0, 13.0, 38.0, 13.0, 39.0, 13.0, 40.0, 13.0, 41.0, 13.0, 42.0, 13.0, 43.0, 13.0, 44.0, 13.0, 45.0, 13.0, 46.0, 13.0, 47.0, 13.0, 48.0, 13.0, 49.0, 13.0, 50.0, 13.0, 51.0, 13.0, 52.0, 13.0, 53.0, 13.0, 54.0, 13.0, 55.0, 13.0, 56.0, 13.0, 57.0, 13.0, 58.0, 13.0, 59.0, 13.0, 60.0, 13.0, 61.0, 13.0, 62.0, 13.0, 63.0, 13.0, 64.0, 13.0, 65.0, 13.0, 66.0, 13.0, 67.0, 13.0, 68.0, 13.0, 69.0, 13.0, 70.0, 13.0, 71.0, 13.0, 72.0, 13.0, 73.0, 13.0, 74.0, 13.0, 75.0, 13.0, 76.0, 13.0, 77.0, 13.0, 78.0, 13.0, 79.0, 13.0, 80.0, 13.0, 81.0, 13.0, 82.0, 13.0, 83.0, 13.0, 84.0, 13.0, 85.0, 13.0, 86.0, 13.0, 87.0, 13.0, 88.0, 13.0, 89.0, 13.0, 90.0, 13.0, 91.0, 13.0, 92.0, 13.0, 93.0, 13.0, 94.0, 13.0, 95.0, 13.0, 96.0, 13.0, 97.0, 13.0, 98.0, 13.0, 99.0, 14.0, 14.0, 14.0, 15.0, 14.0, 16.0, 14.0, 17.0, 14.0, 18.0, 14.0, 19.0, 14.0, 20.0, 14.0, 21.0, 14.0, 22.0, 14.0, 23.0, 14.0, 24.0, 14.0, 25.0, 14.0, 26.0, 14.0, 27.0, 14.0, 28.0, 14.0, 29.0, 14.0, 30.0, 14.0, 31.0, 14.0, 32.0, 14.0, 33.0, 14.0, 34.0, 14.0, 35.0, 14.0, 36.0, 14.0, 37.0, 14.0, 38.0, 14.0, 39.0, 14.0, 40.0, 14.0, 41.0, 14.0, 42.0, 14.0, 43.0, 14.0, 44.0, 14.0, 45.0, 14.0, 46.0, 14.0, 47.0, 14.0, 48.0, 14.0, 49.0, 14.0, 50.0, 14.0, 51.0, 14.0, 52.0, 14.0, 53.0, 14.0, 54.0, 14.0, 55.0, 14.0, 56.0, 14.0, 57.0, 14.0, 58.0, 14.0, 59.0, 14.0, 60.0, 14.0, 61.0, 14.0, 62.0, 14.0, 63.0, 14.0, 64.0, 14.0, 65.0, 14.0, 66.0, 14.0, 67.0, 14.0, 68.0, 14.0, 69.0, 14.0, 70.0, 14.0, 71.0, 14.0, 72.0, 14.0, 73.0, 14.0, 74.0, 14.0, 75.0, 14.0, 76.0, 14.0, 77.0, 14.0, 78.0, 14.0, 79.0, 14.0, 80.0, 14.0, 81.0, 14.0, 82.0, 14.0, 83.0, 14.0, 84.0, 14.0, 85.0, 14.0, 86.0, 14.0, 87.0, 14.0, 88.0, 14.0, 89.0, 14.0, 90.0, 14.0, 91.0, 14.0, 92.0, 14.0, 93.0, 14.0, 94.0, 14.0, 95.0, 14.0, 96.0, 14.0, 97.0, 14.0, 98.0, 14.0, 99.0, 15.0, 15.0, 15.0, 16.0, 15.0, 17.0, 15.0, 18.0, 15.0, 19.0, 15.0, 20.0, 15.0, 21.0, 15.0, 22.0, 15.0, 23.0, 15.0, 24.0, 15.0, 25.0, 15.0, 26.0, 15.0, 27.0, 15.0, 28.0, 15.0, 29.0, 15.0, 30.0, 15.0, 31.0, 15.0, 32.0, 15.0, 33.0, 15.0, 34.0, 15.0, 35.0, 15.0, 36.0, 15.0, 37.0, 15.0, 38.0, 15.0, 39.0, 15.0, 40.0, 15.0, 41.0, 15.0, 42.0, 15.0, 43.0, 15.0, 44.0, 15.0, 45.0, 15.0, 46.0, 15.0, 47.0, 15.0, 48.0, 15.0, 49.0, 15.0, 50.0, 15.0, 51.0, 15.0, 52.0, 15.0, 53.0, 15.0, 54.0, 15.0, 55.0, 15.0, 56.0, 15.0, 57.0, 15.0, 58.0, 15.0, 59.0, 15.0, 60.0, 15.0, 61.0, 15.0, 62.0, 15.0, 63.0, 15.0, 64.0, 15.0, 65.0, 15.0, 66.0, 15.0, 67.0, 15.0, 68.0, 15.0, 69.0, 15.0, 70.0, 15.0, 71.0, 15.0, 72.0, 15.0, 73.0, 15.0, 74.0, 15.0, 75.0, 15.0, 76.0, 15.0, 77.0, 15.0, 78.0, 15.0, 79.0, 15.0, 80.0, 15.0, 81.0, 15.0, 82.0, 15.0, 83.0, 15.0, 84.0, 15.0, 85.0, 15.0, 86.0, 15.0, 87.0, 15.0, 88.0, 15.0, 89.0, 15.0, 90.0, 15.0, 91.0, 15.0, 92.0, 15.0, 93.0, 15.0, 94.0, 15.0, 95.0, 15.0, 96.0, 15.0, 97.0, 15.0, 98.0, 15.0, 99.0, 16.0, 16.0, 16.0, 17.0, 16.0, 18.0, 16.0, 19.0, 16.0, 20.0, 16.0, 21.0, 16.0, 22.0, 16.0, 23.0, 16.0, 24.0, 16.0, 25.0, 16.0, 26.0, 16.0, 27.0, 16.0, 28.0, 16.0, 29.0, 16.0, 30.0, 16.0, 31.0, 16.0, 32.0, 16.0, 33.0, 16.0, 34.0, 16.0, 35.0, 16.0, 36.0, 16.0, 37.0, 16.0, 38.0, 16.0, 39.0, 16.0, 40.0, 16.0, 41.0, 16.0, 42.0, 16.0, 43.0, 16.0, 44.0, 16.0, 45.0, 16.0, 46.0, 16.0, 47.0, 16.0, 48.0, 16.0, 49.0, 16.0, 50.0, 16.0, 51.0, 16.0, 52.0, 16.0, 53.0, 16.0, 54.0, 16.0, 55.0, 16.0, 56.0, 16.0, 57.0, 16.0, 58.0, 16.0, 59.0, 16.0, 60.0, 16.0, 61.0, 16.0, 62.0, 16.0, 63.0, 16.0, 64.0, 16.0, 65.0, 16.0, 66.0, 16.0, 67.0, 16.0, 68.0, 16.0, 69.0, 16.0, 70.0, 16.0, 71.0, 16.0, 72.0, 16.0, 73.0, 16.0, 74.0, 16.0, 75.0, 16.0, 76.0, 16.0, 77.0, 16.0, 78.0, 16.0, 79.0, 16.0, 80.0, 16.0, 81.0, 16.0, 82.0, 16.0, 83.0, 16.0, 84.0, 16.0, 85.0, 16.0, 86.0, 16.0, 87.0, 16.0, 88.0, 16.0, 89.0, 16.0, 90.0, 16.0, 91.0, 16.0, 92.0, 16.0, 93.0, 16.0, 94.0, 16.0, 95.0, 16.0, 96.0, 16.0, 97.0, 16.0, 98.0, 16.0, 99.0, 17.0, 17.0, 17.0, 18.0, 17.0, 19.0, 17.0, 20.0, 17.0, 21.0, 17.0, 22.0, 17.0, 23.0, 17.0, 24.0, 17.0, 25.0, 17.0, 26.0, 17.0, 27.0, 17.0, 28.0, 17.0, 29.0, 17.0, 30.0, 17.0, 31.0, 17.0, 32.0, 17.0, 33.0, 17.0, 34.0, 17.0, 35.0, 17.0, 36.0, 17.0, 37.0, 17.0, 38.0, 17.0, 39.0, 17.0, 40.0, 17.0, 41.0, 17.0, 42.0, 17.0, 43.0, 17.0, 44.0, 17.0, 45.0, 17.0, 46.0, 17.0, 47.0, 17.0, 48.0, 17.0, 49.0, 17.0, 50.0, 17.0, 51.0, 17.0, 52.0, 17.0, 53.0, 17.0, 54.0, 17.0, 55.0, 17.0, 56.0, 17.0, 57.0, 17.0, 58.0, 17.0, 59.0, 17.0, 60.0, 17.0, 61.0, 17.0, 62.0, 17.0, 63.0, 17.0, 64.0, 17.0, 65.0, 17.0, 66.0, 17.0, 67.0, 17.0, 68.0, 17.0, 69.0, 17.0, 70.0, 17.0, 71.0, 17.0, 72.0, 17.0, 73.0, 17.0, 74.0, 17.0, 75.0, 17.0, 76.0, 17.0, 77.0, 17.0, 78.0, 17.0, 79.0, 17.0, 80.0, 17.0, 81.0, 17.0, 82.0, 17.0, 83.0, 17.0, 84.0, 17.0, 85.0, 17.0, 86.0, 17.0, 87.0, 17.0, 88.0, 17.0, 89.0, 17.0, 90.0, 17.0, 91.0, 17.0, 92.0, 17.0, 93.0, 17.0, 94.0, 17.0, 95.0, 17.0, 96.0, 17.0, 97.0, 17.0, 98.0, 17.0, 99.0, 18.0, 18.0, 18.0, 19.0, 18.0, 20.0, 18.0, 21.0, 18.0, 22.0, 18.0, 23.0, 18.0, 24.0, 18.0, 25.0, 18.0, 26.0, 18.0, 27.0, 18.0, 28.0, 18.0, 29.0, 18.0, 30.0, 18.0, 31.0, 18.0, 32.0, 18.0, 33.0, 18.0, 34.0, 18.0, 35.0, 18.0, 36.0, 18.0, 37.0, 18.0, 38.0, 18.0, 39.0, 18.0, 40.0, 18.0, 41.0, 18.0, 42.0, 18.0, 43.0, 18.0, 44.0, 18.0, 45.0, 18.0, 46.0, 18.0, 47.0, 18.0, 48.0, 18.0, 49.0, 18.0, 50.0, 18.0, 51.0, 18.0, 52.0, 18.0, 53.0, 18.0, 54.0, 18.0, 55.0, 18.0, 56.0, 18.0, 57.0, 18.0, 58.0, 18.0, 59.0, 18.0, 60.0, 18.0, 61.0, 18.0, 62.0, 18.0, 63.0, 18.0, 64.0, 18.0, 65.0, 18.0, 66.0, 18.0, 67.0, 18.0, 68.0, 18.0, 69.0, 18.0, 70.0, 18.0, 71.0, 18.0, 72.0, 18.0, 73.0, 18.0, 74.0, 18.0, 75.0, 18.0, 76.0, 18.0, 77.0, 18.0, 78.0, 18.0, 79.0, 18.0, 80.0, 18.0, 81.0, 18.0, 82.0, 18.0, 83.0, 18.0, 84.0, 18.0, 85.0, 18.0, 86.0, 18.0, 87.0, 18.0, 88.0, 18.0, 89.0, 18.0, 90.0, 18.0, 91.0, 18.0, 92.0, 18.0, 93.0, 18.0, 94.0, 18.0, 95.0, 18.0, 96.0, 18.0, 97.0, 18.0, 98.0, 18.0, 99.0, 19.0, 19.0, 19.0, 20.0, 19.0, 21.0, 19.0, 22.0, 19.0, 23.0, 19.0, 24.0, 19.0, 25.0, 19.0, 26.0, 19.0, 27.0, 19.0, 28.0, 19.0, 29.0, 19.0, 30.0, 19.0, 31.0, 19.0, 32.0, 19.0, 33.0, 19.0, 34.0, 19.0, 35.0, 19.0, 36.0, 19.0, 37.0, 19.0, 38.0, 19.0, 39.0, 19.0, 40.0, 19.0, 41.0, 19.0, 42.0, 19.0, 43.0, 19.0, 44.0, 19.0, 45.0, 19.0, 46.0, 19.0, 47.0, 19.0, 48.0, 19.0, 49.0, 19.0, 50.0, 19.0, 51.0, 19.0, 52.0, 19.0, 53.0, 19.0, 54.0, 19.0, 55.0, 19.0, 56.0, 19.0, 57.0, 19.0, 58.0, 19.0, 59.0, 19.0, 60.0, 19.0, 61.0, 19.0, 62.0, 19.0, 63.0, 19.0, 64.0, 19.0, 65.0, 19.0, 66.0, 19.0, 67.0, 19.0, 68.0, 19.0, 69.0, 19.0, 70.0, 19.0, 71.0, 19.0, 72.0, 19.0, 73.0, 19.0, 74.0, 19.0, 75.0, 19.0, 76.0, 19.0, 77.0, 19.0, 78.0, 19.0, 79.0, 19.0, 80.0, 19.0, 81.0, 19.0, 82.0, 19.0, 83.0, 19.0, 84.0, 19.0, 85.0, 19.0, 86.0, 19.0, 87.0, 19.0, 88.0, 19.0, 89.0, 19.0, 90.0, 19.0, 91.0, 19.0, 92.0, 19.0, 93.0, 19.0, 94.0, 19.0, 95.0, 19.0, 96.0, 19.0, 97.0, 19.0, 98.0, 19.0, 99.0, 20.0, 20.0, 20.0, 21.0, 20.0, 22.0, 20.0, 23.0, 20.0, 24.0, 20.0, 25.0, 20.0, 26.0, 20.0, 27.0, 20.0, 28.0, 20.0, 29.0, 20.0, 30.0, 20.0, 31.0, 20.0, 32.0, 20.0, 33.0, 20.0, 34.0, 20.0, 35.0, 20.0, 36.0, 20.0, 37.0, 20.0, 38.0, 20.0, 39.0, 20.0, 40.0, 20.0, 41.0, 20.0, 42.0, 20.0, 43.0, 20.0, 44.0, 20.0, 45.0, 20.0, 46.0, 20.0, 47.0, 20.0, 48.0, 20.0, 49.0, 20.0, 50.0, 20.0, 51.0, 20.0, 52.0, 20.0, 53.0, 20.0, 54.0, 20.0, 55.0, 20.0, 56.0, 20.0, 57.0, 20.0, 58.0, 20.0, 59.0, 20.0, 60.0, 20.0, 61.0, 20.0, 62.0, 20.0, 63.0, 20.0, 64.0, 20.0, 65.0, 20.0, 66.0, 20.0, 67.0, 20.0, 68.0, 20.0, 69.0, 20.0, 70.0, 20.0, 71.0, 20.0, 72.0, 20.0, 73.0, 20.0, 74.0, 20.0, 75.0, 20.0, 76.0, 20.0, 77.0, 20.0, 78.0, 20.0, 79.0, 20.0, 80.0, 20.0, 81.0, 20.0, 82.0, 20.0, 83.0, 20.0, 84.0, 20.0, 85.0, 20.0, 86.0, 20.0, 87.0, 20.0, 88.0, 20.0, 89.0, 20.0, 90.0, 20.0, 91.0, 20.0, 92.0, 20.0, 93.0, 20.0, 94.0, 20.0, 95.0, 20.0, 96.0, 20.0, 97.0, 20.0, 98.0, 20.0, 99.0, 21.0, 21.0, 21.0, 22.0, 21.0, 23.0, 21.0, 24.0, 21.0, 25.0, 21.0, 26.0, 21.0, 27.0, 21.0, 28.0, 21.0, 29.0, 21.0, 30.0, 21.0, 31.0, 21.0, 32.0, 21.0, 33.0, 21.0, 34.0, 21.0, 35.0, 21.0, 36.0, 21.0, 37.0, 21.0, 38.0, 21.0, 39.0, 21.0, 40.0, 21.0, 41.0, 21.0, 42.0, 21.0, 43.0, 21.0, 44.0, 21.0, 45.0, 21.0, 46.0, 21.0, 47.0, 21.0, 48.0, 21.0, 49.0, 21.0, 50.0, 21.0, 51.0, 21.0, 52.0, 21.0, 53.0, 21.0, 54.0, 21.0, 55.0, 21.0, 56.0, 21.0, 57.0, 21.0, 58.0, 21.0, 59.0, 21.0, 60.0, 21.0, 61.0, 21.0, 62.0, 21.0, 63.0, 21.0, 64.0, 21.0, 65.0, 21.0, 66.0, 21.0, 67.0, 21.0, 68.0, 21.0, 69.0, 21.0, 70.0, 21.0, 71.0, 21.0, 72.0, 21.0, 73.0, 21.0, 74.0, 21.0, 75.0, 21.0, 76.0, 21.0, 77.0, 21.0, 78.0, 21.0, 79.0, 21.0, 80.0, 21.0, 81.0, 21.0, 82.0, 21.0, 83.0, 21.0, 84.0, 21.0, 85.0, 21.0, 86.0, 21.0, 87.0, 21.0, 88.0, 21.0, 89.0, 21.0, 90.0, 21.0, 91.0, 21.0, 92.0, 21.0, 93.0, 21.0, 94.0, 21.0, 95.0, 21.0, 96.0, 21.0, 97.0, 21.0, 98.0, 21.0, 99.0, 22.0, 22.0, 22.0, 23.0, 22.0, 24.0, 22.0, 25.0, 22.0, 26.0, 22.0, 27.0, 22.0, 28.0, 22.0, 29.0, 22.0, 30.0, 22.0, 31.0, 22.0, 32.0, 22.0, 33.0, 22.0, 34.0, 22.0, 35.0, 22.0, 36.0, 22.0, 37.0, 22.0, 38.0, 22.0, 39.0, 22.0, 40.0, 22.0, 41.0, 22.0, 42.0, 22.0, 43.0, 22.0, 44.0, 22.0, 45.0, 22.0, 46.0, 22.0, 47.0, 22.0, 48.0, 22.0, 49.0, 22.0, 50.0, 22.0, 51.0, 22.0, 52.0, 22.0, 53.0, 22.0, 54.0, 22.0, 55.0, 22.0, 56.0, 22.0, 57.0, 22.0, 58.0, 22.0, 59.0, 22.0, 60.0, 22.0, 61.0, 22.0, 62.0, 22.0, 63.0, 22.0, 64.0, 22.0, 65.0, 22.0, 66.0, 22.0, 67.0, 22.0, 68.0, 22.0, 69.0, 22.0, 70.0, 22.0, 71.0, 22.0, 72.0, 22.0, 73.0, 22.0, 74.0, 22.0, 75.0, 22.0, 76.0, 22.0, 77.0, 22.0, 78.0, 22.0, 79.0, 22.0, 80.0, 22.0, 81.0, 22.0, 82.0, 22.0, 83.0, 22.0, 84.0, 22.0, 85.0, 22.0, 86.0, 22.0, 87.0, 22.0, 88.0, 22.0, 89.0, 22.0, 90.0, 22.0, 91.0, 22.0, 92.0, 22.0, 93.0, 22.0, 94.0, 22.0, 95.0, 22.0, 96.0, 22.0, 97.0, 22.0, 98.0, 22.0, 99.0, 23.0, 23.0, 23.0, 24.0, 23.0, 25.0, 23.0, 26.0, 23.0, 27.0, 23.0, 28.0, 23.0, 29.0, 23.0, 30.0, 23.0, 31.0, 23.0, 32.0, 23.0, 33.0, 23.0, 34.0, 23.0, 35.0, 23.0, 36.0, 23.0, 37.0, 23.0, 38.0, 23.0, 39.0, 23.0, 40.0, 23.0, 41.0, 23.0, 42.0, 23.0, 43.0, 23.0, 44.0, 23.0, 45.0, 23.0, 46.0, 23.0, 47.0, 23.0, 48.0, 23.0, 49.0, 23.0, 50.0, 23.0, 51.0, 23.0, 52.0, 23.0, 53.0, 23.0, 54.0, 23.0, 55.0, 23.0, 56.0, 23.0, 57.0, 23.0, 58.0, 23.0, 59.0, 23.0, 60.0, 23.0, 61.0, 23.0, 62.0, 23.0, 63.0, 23.0, 64.0, 23.0, 65.0, 23.0, 66.0, 23.0, 67.0, 23.0, 68.0, 23.0, 69.0, 23.0, 70.0, 23.0, 71.0, 23.0, 72.0, 23.0, 73.0, 23.0, 74.0, 23.0, 75.0, 23.0, 76.0, 23.0, 77.0, 23.0, 78.0, 23.0, 79.0, 23.0, 80.0, 23.0, 81.0, 23.0, 82.0, 23.0, 83.0, 23.0, 84.0, 23.0, 85.0, 23.0, 86.0, 23.0, 87.0, 23.0, 88.0, 23.0, 89.0, 23.0, 90.0, 23.0, 91.0, 23.0, 92.0, 23.0, 93.0, 23.0, 94.0, 23.0, 95.0, 23.0, 96.0, 23.0, 97.0, 23.0, 98.0, 23.0, 99.0, 24.0, 24.0, 24.0, 25.0, 24.0, 26.0, 24.0, 27.0, 24.0, 28.0, 24.0, 29.0, 24.0, 30.0, 24.0, 31.0, 24.0, 32.0, 24.0, 33.0, 24.0, 34.0, 24.0, 35.0, 24.0, 36.0, 24.0, 37.0, 24.0, 38.0, 24.0, 39.0, 24.0, 40.0, 24.0, 41.0, 24.0, 42.0, 24.0, 43.0, 24.0, 44.0, 24.0, 45.0, 24.0, 46.0, 24.0, 47.0, 24.0, 48.0, 24.0, 49.0, 24.0, 50.0, 24.0, 51.0, 24.0, 52.0, 24.0, 53.0, 24.0, 54.0, 24.0, 55.0, 24.0, 56.0, 24.0, 57.0, 24.0, 58.0, 24.0, 59.0, 24.0, 60.0, 24.0, 61.0, 24.0, 62.0, 24.0, 63.0, 24.0, 64.0, 24.0, 65.0, 24.0, 66.0, 24.0, 67.0, 24.0, 68.0, 24.0, 69.0, 24.0, 70.0, 24.0, 71.0, 24.0, 72.0, 24.0, 73.0, 24.0, 74.0, 24.0, 75.0, 24.0, 76.0, 24.0, 77.0, 24.0, 78.0, 24.0, 79.0, 24.0, 80.0, 24.0, 81.0, 24.0, 82.0, 24.0, 83.0, 24.0, 84.0, 24.0, 85.0, 24.0, 86.0, 24.0, 87.0, 24.0, 88.0, 24.0, 89.0, 24.0, 90.0, 24.0, 91.0, 24.0, 92.0, 24.0, 93.0, 24.0, 94.0, 24.0, 95.0, 24.0, 96.0, 24.0, 97.0, 24.0, 98.0, 24.0, 99.0, 25.0, 25.0, 25.0, 26.0, 25.0, 27.0, 25.0, 28.0, 25.0, 29.0, 25.0, 30.0, 25.0, 31.0, 25.0, 32.0, 25.0, 33.0, 25.0, 34.0, 25.0, 35.0, 25.0, 36.0, 25.0, 37.0, 25.0, 38.0, 25.0, 39.0, 25.0, 40.0, 25.0, 41.0, 25.0, 42.0, 25.0, 43.0, 25.0, 44.0, 25.0, 45.0, 25.0, 46.0, 25.0, 47.0, 25.0, 48.0, 25.0, 49.0, 25.0, 50.0, 25.0, 51.0, 25.0, 52.0, 25.0, 53.0, 25.0, 54.0, 25.0, 55.0, 25.0, 56.0, 25.0, 57.0, 25.0, 58.0, 25.0, 59.0, 25.0, 60.0, 25.0, 61.0, 25.0, 62.0, 25.0, 63.0, 25.0, 64.0, 25.0, 65.0, 25.0, 66.0, 25.0, 67.0, 25.0, 68.0, 25.0, 69.0, 25.0, 70.0, 25.0, 71.0, 25.0, 72.0, 25.0, 73.0, 25.0, 74.0, 25.0, 75.0, 25.0, 76.0, 25.0, 77.0, 25.0, 78.0, 25.0, 79.0, 25.0, 80.0, 25.0, 81.0, 25.0, 82.0, 25.0, 83.0, 25.0, 84.0, 25.0, 85.0, 25.0, 86.0, 25.0, 87.0, 25.0, 88.0, 25.0, 89.0, 25.0, 90.0, 25.0, 91.0, 25.0, 92.0, 25.0, 93.0, 25.0, 94.0, 25.0, 95.0, 25.0, 96.0, 25.0, 97.0, 25.0, 98.0, 25.0, 99.0, 26.0, 26.0, 26.0, 27.0, 26.0, 28.0, 26.0, 29.0, 26.0, 30.0, 26.0, 31.0, 26.0, 32.0, 26.0, 33.0, 26.0, 34.0, 26.0, 35.0, 26.0, 36.0, 26.0, 37.0, 26.0, 38.0, 26.0, 39.0, 26.0, 40.0, 26.0, 41.0, 26.0, 42.0, 26.0, 43.0, 26.0, 44.0, 26.0, 45.0, 26.0, 46.0, 26.0, 47.0, 26.0, 48.0, 26.0, 49.0, 26.0, 50.0, 26.0, 51.0, 26.0, 52.0, 26.0, 53.0, 26.0, 54.0, 26.0, 55.0, 26.0, 56.0, 26.0, 57.0, 26.0, 58.0, 26.0, 59.0, 26.0, 60.0, 26.0, 61.0, 26.0, 62.0, 26.0, 63.0, 26.0, 64.0, 26.0, 65.0, 26.0, 66.0, 26.0, 67.0, 26.0, 68.0, 26.0, 69.0, 26.0, 70.0, 26.0, 71.0, 26.0, 72.0, 26.0, 73.0, 26.0, 74.0, 26.0, 75.0, 26.0, 76.0, 26.0, 77.0, 26.0, 78.0, 26.0, 79.0, 26.0, 80.0, 26.0, 81.0, 26.0, 82.0, 26.0, 83.0, 26.0, 84.0, 26.0, 85.0, 26.0, 86.0, 26.0, 87.0, 26.0, 88.0, 26.0, 89.0, 26.0, 90.0, 26.0, 91.0, 26.0, 92.0, 26.0, 93.0, 26.0, 94.0, 26.0, 95.0, 26.0, 96.0, 26.0, 97.0, 26.0, 98.0, 26.0, 99.0, 27.0, 27.0, 27.0, 28.0, 27.0, 29.0, 27.0, 30.0, 27.0, 31.0, 27.0, 32.0, 27.0, 33.0, 27.0, 34.0, 27.0, 35.0, 27.0, 36.0, 27.0, 37.0, 27.0, 38.0, 27.0, 39.0, 27.0, 40.0, 27.0, 41.0, 27.0, 42.0, 27.0, 43.0, 27.0, 44.0, 27.0, 45.0, 27.0, 46.0, 27.0, 47.0, 27.0, 48.0, 27.0, 49.0, 27.0, 50.0, 27.0, 51.0, 27.0, 52.0, 27.0, 53.0, 27.0, 54.0, 27.0, 55.0, 27.0, 56.0, 27.0, 57.0, 27.0, 58.0, 27.0, 59.0, 27.0, 60.0, 27.0, 61.0, 27.0, 62.0, 27.0, 63.0, 27.0, 64.0, 27.0, 65.0, 27.0, 66.0, 27.0, 67.0, 27.0, 68.0, 27.0, 69.0, 27.0, 70.0, 27.0, 71.0, 27.0, 72.0, 27.0, 73.0, 27.0, 74.0, 27.0, 75.0, 27.0, 76.0, 27.0, 77.0, 27.0, 78.0, 27.0, 79.0, 27.0, 80.0, 27.0, 81.0, 27.0, 82.0, 27.0, 83.0, 27.0, 84.0, 27.0, 85.0, 27.0, 86.0, 27.0, 87.0, 27.0, 88.0, 27.0, 89.0, 27.0, 90.0, 27.0, 91.0, 27.0, 92.0, 27.0, 93.0, 27.0, 94.0, 27.0, 95.0, 27.0, 96.0, 27.0, 97.0, 27.0, 98.0, 27.0, 99.0, 28.0, 28.0, 28.0, 29.0, 28.0, 30.0, 28.0, 31.0, 28.0, 32.0, 28.0, 33.0, 28.0, 34.0, 28.0, 35.0, 28.0, 36.0, 28.0, 37.0, 28.0, 38.0, 28.0, 39.0, 28.0, 40.0, 28.0, 41.0, 28.0, 42.0, 28.0, 43.0, 28.0, 44.0, 28.0, 45.0, 28.0, 46.0, 28.0, 47.0, 28.0, 48.0, 28.0, 49.0, 28.0, 50.0, 28.0, 51.0, 28.0, 52.0, 28.0, 53.0, 28.0, 54.0, 28.0, 55.0, 28.0, 56.0, 28.0, 57.0, 28.0, 58.0, 28.0, 59.0, 28.0, 60.0, 28.0, 61.0, 28.0, 62.0, 28.0, 63.0, 28.0, 64.0, 28.0, 65.0, 28.0, 66.0, 28.0, 67.0, 28.0, 68.0, 28.0, 69.0, 28.0, 70.0, 28.0, 71.0, 28.0, 72.0, 28.0, 73.0, 28.0, 74.0, 28.0, 75.0, 28.0, 76.0, 28.0, 77.0, 28.0, 78.0, 28.0, 79.0, 28.0, 80.0, 28.0, 81.0, 28.0, 82.0, 28.0, 83.0, 28.0, 84.0, 28.0, 85.0, 28.0, 86.0, 28.0, 87.0, 28.0, 88.0, 28.0, 89.0, 28.0, 90.0, 28.0, 91.0, 28.0, 92.0, 28.0, 93.0, 28.0, 94.0, 28.0, 95.0, 28.0, 96.0, 28.0, 97.0, 28.0, 98.0, 28.0, 99.0, 29.0, 29.0, 29.0, 30.0, 29.0, 31.0, 29.0, 32.0, 29.0, 33.0, 29.0, 34.0, 29.0, 35.0, 29.0, 36.0, 29.0, 37.0, 29.0, 38.0, 29.0, 39.0, 29.0, 40.0, 29.0, 41.0, 29.0, 42.0, 29.0, 43.0, 29.0, 44.0, 29.0, 45.0, 29.0, 46.0, 29.0, 47.0, 29.0, 48.0, 29.0, 49.0, 29.0, 50.0, 29.0, 51.0, 29.0, 52.0, 29.0, 53.0, 29.0, 54.0, 29.0, 55.0, 29.0, 56.0, 29.0, 57.0, 29.0, 58.0, 29.0, 59.0, 29.0, 60.0, 29.0, 61.0, 29.0, 62.0, 29.0, 63.0, 29.0, 64.0, 29.0, 65.0, 29.0, 66.0, 29.0, 67.0, 29.0, 68.0, 29.0, 69.0, 29.0, 70.0, 29.0, 71.0, 29.0, 72.0, 29.0, 73.0, 29.0, 74.0, 29.0, 75.0, 29.0, 76.0, 29.0, 77.0, 29.0, 78.0, 29.0, 79.0, 29.0, 80.0, 29.0, 81.0, 29.0, 82.0, 29.0, 83.0, 29.0, 84.0, 29.0, 85.0, 29.0, 86.0, 29.0, 87.0, 29.0, 88.0, 29.0, 89.0, 29.0, 90.0, 29.0, 91.0, 29.0, 92.0, 29.0, 93.0, 29.0, 94.0, 29.0, 95.0, 29.0, 96.0, 29.0, 97.0, 29.0, 98.0, 29.0, 99.0, 30.0, 30.0, 30.0, 31.0, 30.0, 32.0, 30.0, 33.0, 30.0, 34.0, 30.0, 35.0, 30.0, 36.0, 30.0, 37.0, 30.0, 38.0, 30.0, 39.0, 30.0, 40.0, 30.0, 41.0, 30.0, 42.0, 30.0, 43.0, 30.0, 44.0, 30.0, 45.0, 30.0, 46.0, 30.0, 47.0, 30.0, 48.0, 30.0, 49.0, 30.0, 50.0, 30.0, 51.0, 30.0, 52.0, 30.0, 53.0, 30.0, 54.0, 30.0, 55.0, 30.0, 56.0, 30.0, 57.0, 30.0, 58.0, 30.0, 59.0, 30.0, 60.0, 30.0, 61.0, 30.0, 62.0, 30.0, 63.0, 30.0, 64.0, 30.0, 65.0, 30.0, 66.0, 30.0, 67.0, 30.0, 68.0, 30.0, 69.0, 30.0, 70.0, 30.0, 71.0, 30.0, 72.0, 30.0, 73.0, 30.0, 74.0, 30.0, 75.0, 30.0, 76.0, 30.0, 77.0, 30.0, 78.0, 30.0, 79.0, 30.0, 80.0, 30.0, 81.0, 30.0, 82.0, 30.0, 83.0, 30.0, 84.0, 30.0, 85.0, 30.0, 86.0, 30.0, 87.0, 30.0, 88.0, 30.0, 89.0, 30.0, 90.0, 30.0, 91.0, 30.0, 92.0, 30.0, 93.0, 30.0, 94.0, 30.0, 95.0, 30.0, 96.0, 30.0, 97.0, 30.0, 98.0, 30.0, 99.0, 31.0, 31.0, 31.0, 32.0, 31.0, 33.0, 31.0, 34.0, 31.0, 35.0, 31.0, 36.0, 31.0, 37.0, 31.0, 38.0, 31.0, 39.0, 31.0, 40.0, 31.0, 41.0, 31.0, 42.0, 31.0, 43.0, 31.0, 44.0, 31.0, 45.0, 31.0, 46.0, 31.0, 47.0, 31.0, 48.0, 31.0, 49.0, 31.0, 50.0, 31.0, 51.0, 31.0, 52.0, 31.0, 53.0, 31.0, 54.0, 31.0, 55.0, 31.0, 56.0, 31.0, 57.0, 31.0, 58.0, 31.0, 59.0, 31.0, 60.0, 31.0, 61.0, 31.0, 62.0, 31.0, 63.0, 31.0, 64.0, 31.0, 65.0, 31.0, 66.0, 31.0, 67.0, 31.0, 68.0, 31.0, 69.0, 31.0, 70.0, 31.0, 71.0, 31.0, 72.0, 31.0, 73.0, 31.0, 74.0, 31.0, 75.0, 31.0, 76.0, 31.0, 77.0, 31.0, 78.0, 31.0, 79.0, 31.0, 80.0, 31.0, 81.0, 31.0, 82.0, 31.0, 83.0, 31.0, 84.0, 31.0, 85.0, 31.0, 86.0, 31.0, 87.0, 31.0, 88.0, 31.0, 89.0, 31.0, 90.0, 31.0, 91.0, 31.0, 92.0, 31.0, 93.0, 31.0, 94.0, 31.0, 95.0, 31.0, 96.0, 31.0, 97.0, 31.0, 98.0, 31.0, 99.0, 32.0, 32.0, 32.0, 33.0, 32.0, 34.0, 32.0, 35.0, 32.0, 36.0, 32.0, 37.0, 32.0, 38.0, 32.0, 39.0, 32.0, 40.0, 32.0, 41.0, 32.0, 42.0, 32.0, 43.0, 32.0, 44.0, 32.0, 45.0, 32.0, 46.0, 32.0, 47.0, 32.0, 48.0, 32.0, 49.0, 32.0, 50.0, 32.0, 51.0, 32.0, 52.0, 32.0, 53.0, 32.0, 54.0, 32.0, 55.0, 32.0, 56.0, 32.0, 57.0, 32.0, 58.0, 32.0, 59.0, 32.0, 60.0, 32.0, 61.0, 32.0, 62.0, 32.0, 63.0, 32.0, 64.0, 32.0, 65.0, 32.0, 66.0, 32.0, 67.0, 32.0, 68.0, 32.0, 69.0, 32.0, 70.0, 32.0, 71.0, 32.0, 72.0, 32.0, 73.0, 32.0, 74.0, 32.0, 75.0, 32.0, 76.0, 32.0, 77.0, 32.0, 78.0, 32.0, 79.0, 32.0, 80.0, 32.0, 81.0, 32.0, 82.0, 32.0, 83.0, 32.0, 84.0, 32.0, 85.0, 32.0, 86.0, 32.0, 87.0, 32.0, 88.0, 32.0, 89.0, 32.0, 90.0, 32.0, 91.0, 32.0, 92.0, 32.0, 93.0, 32.0, 94.0, 32.0, 95.0, 32.0, 96.0, 32.0, 97.0, 32.0, 98.0, 32.0, 99.0, 33.0, 33.0, 33.0, 34.0, 33.0, 35.0, 33.0, 36.0, 33.0, 37.0, 33.0, 38.0, 33.0, 39.0, 33.0, 40.0, 33.0, 41.0, 33.0, 42.0, 33.0, 43.0, 33.0, 44.0, 33.0, 45.0, 33.0, 46.0, 33.0, 47.0, 33.0, 48.0, 33.0, 49.0, 33.0, 50.0, 33.0, 51.0, 33.0, 52.0, 33.0, 53.0, 33.0, 54.0, 33.0, 55.0, 33.0, 56.0, 33.0, 57.0, 33.0, 58.0, 33.0, 59.0, 33.0, 60.0, 33.0, 61.0, 33.0, 62.0, 33.0, 63.0, 33.0, 64.0, 33.0, 65.0, 33.0, 66.0, 33.0, 67.0, 33.0, 68.0, 33.0, 69.0, 33.0, 70.0, 33.0, 71.0, 33.0, 72.0, 33.0, 73.0, 33.0, 74.0, 33.0, 75.0, 33.0, 76.0, 33.0, 77.0, 33.0, 78.0, 33.0, 79.0, 33.0, 80.0, 33.0, 81.0, 33.0, 82.0, 33.0, 83.0, 33.0, 84.0, 33.0, 85.0, 33.0, 86.0, 33.0, 87.0, 33.0, 88.0, 33.0, 89.0, 33.0, 90.0, 33.0, 91.0, 33.0, 92.0, 33.0, 93.0, 33.0, 94.0, 33.0, 95.0, 33.0, 96.0, 33.0, 97.0, 33.0, 98.0, 33.0, 99.0, 34.0, 34.0, 34.0, 35.0, 34.0, 36.0, 34.0, 37.0, 34.0, 38.0, 34.0, 39.0, 34.0, 40.0, 34.0, 41.0, 34.0, 42.0, 34.0, 43.0, 34.0, 44.0, 34.0, 45.0, 34.0, 46.0, 34.0, 47.0, 34.0, 48.0, 34.0, 49.0, 34.0, 50.0, 34.0, 51.0, 34.0, 52.0, 34.0, 53.0, 34.0, 54.0, 34.0, 55.0, 34.0, 56.0, 34.0, 57.0, 34.0, 58.0, 34.0, 59.0, 34.0, 60.0, 34.0, 61.0, 34.0, 62.0, 34.0, 63.0, 34.0, 64.0, 34.0, 65.0, 34.0, 66.0, 34.0, 67.0, 34.0, 68.0, 34.0, 69.0, 34.0, 70.0, 34.0, 71.0, 34.0, 72.0, 34.0, 73.0, 34.0, 74.0, 34.0, 75.0, 34.0, 76.0, 34.0, 77.0, 34.0, 78.0, 34.0, 79.0, 34.0, 80.0, 34.0, 81.0, 34.0, 82.0, 34.0, 83.0, 34.0, 84.0, 34.0, 85.0, 34.0, 86.0, 34.0, 87.0, 34.0, 88.0, 34.0, 89.0, 34.0, 90.0, 34.0, 91.0, 34.0, 92.0, 34.0, 93.0, 34.0, 94.0, 34.0, 95.0, 34.0, 96.0, 34.0, 97.0, 34.0, 98.0, 34.0, 99.0, 35.0, 35.0, 35.0, 36.0, 35.0, 37.0, 35.0, 38.0, 35.0, 39.0, 35.0, 40.0, 35.0, 41.0, 35.0, 42.0, 35.0, 43.0, 35.0, 44.0, 35.0, 45.0, 35.0, 46.0, 35.0, 47.0, 35.0, 48.0, 35.0, 49.0, 35.0, 50.0, 35.0, 51.0, 35.0, 52.0, 35.0, 53.0, 35.0, 54.0, 35.0, 55.0, 35.0, 56.0, 35.0, 57.0, 35.0, 58.0, 35.0, 59.0, 35.0, 60.0, 35.0, 61.0, 35.0, 62.0, 35.0, 63.0, 35.0, 64.0, 35.0, 65.0, 35.0, 66.0, 35.0, 67.0, 35.0, 68.0, 35.0, 69.0, 35.0, 70.0, 35.0, 71.0, 35.0, 72.0, 35.0, 73.0, 35.0, 74.0, 35.0, 75.0, 35.0, 76.0, 35.0, 77.0, 35.0, 78.0, 35.0, 79.0, 35.0, 80.0, 35.0, 81.0, 35.0, 82.0, 35.0, 83.0, 35.0, 84.0, 35.0, 85.0, 35.0, 86.0, 35.0, 87.0, 35.0, 88.0, 35.0, 89.0, 35.0, 90.0, 35.0, 91.0, 35.0, 92.0, 35.0, 93.0, 35.0, 94.0, 35.0, 95.0, 35.0, 96.0, 35.0, 97.0, 35.0, 98.0, 35.0, 99.0, 36.0, 36.0, 36.0, 37.0, 36.0, 38.0, 36.0, 39.0, 36.0, 40.0, 36.0, 41.0, 36.0, 42.0, 36.0, 43.0, 36.0, 44.0, 36.0, 45.0, 36.0, 46.0, 36.0, 47.0, 36.0, 48.0, 36.0, 49.0, 36.0, 50.0, 36.0, 51.0, 36.0, 52.0, 36.0, 53.0, 36.0, 54.0, 36.0, 55.0, 36.0, 56.0, 36.0, 57.0, 36.0, 58.0, 36.0, 59.0, 36.0, 60.0, 36.0, 61.0, 36.0, 62.0, 36.0, 63.0, 36.0, 64.0, 36.0, 65.0, 36.0, 66.0, 36.0, 67.0, 36.0, 68.0, 36.0, 69.0, 36.0, 70.0, 36.0, 71.0, 36.0, 72.0, 36.0, 73.0, 36.0, 74.0, 36.0, 75.0, 36.0, 76.0, 36.0, 77.0, 36.0, 78.0, 36.0, 79.0, 36.0, 80.0, 36.0, 81.0, 36.0, 82.0, 36.0, 83.0, 36.0, 84.0, 36.0, 85.0, 36.0, 86.0, 36.0, 87.0, 36.0, 88.0, 36.0, 89.0, 36.0, 90.0, 36.0, 91.0, 36.0, 92.0, 36.0, 93.0, 36.0, 94.0, 36.0, 95.0, 36.0, 96.0, 36.0, 97.0, 36.0, 98.0, 36.0, 99.0, 37.0, 37.0, 37.0, 38.0, 37.0, 39.0, 37.0, 40.0, 37.0, 41.0, 37.0, 42.0, 37.0, 43.0, 37.0, 44.0, 37.0, 45.0, 37.0, 46.0, 37.0, 47.0, 37.0, 48.0, 37.0, 49.0, 37.0, 50.0, 37.0, 51.0, 37.0, 52.0, 37.0, 53.0, 37.0, 54.0, 37.0, 55.0, 37.0, 56.0, 37.0, 57.0, 37.0, 58.0, 37.0, 59.0, 37.0, 60.0, 37.0, 61.0, 37.0, 62.0, 37.0, 63.0, 37.0, 64.0, 37.0, 65.0, 37.0, 66.0, 37.0, 67.0, 37.0, 68.0, 37.0, 69.0, 37.0, 70.0, 37.0, 71.0, 37.0, 72.0, 37.0, 73.0, 37.0, 74.0, 37.0, 75.0, 37.0, 76.0, 37.0, 77.0, 37.0, 78.0, 37.0, 79.0, 37.0, 80.0, 37.0, 81.0, 37.0, 82.0, 37.0, 83.0, 37.0, 84.0, 37.0, 85.0, 37.0, 86.0, 37.0, 87.0, 37.0, 88.0, 37.0, 89.0, 37.0, 90.0, 37.0, 91.0, 37.0, 92.0, 37.0, 93.0, 37.0, 94.0, 37.0, 95.0, 37.0, 96.0, 37.0, 97.0, 37.0, 98.0, 37.0, 99.0, 38.0, 38.0, 38.0, 39.0, 38.0, 40.0, 38.0, 41.0, 38.0, 42.0, 38.0, 43.0, 38.0, 44.0, 38.0, 45.0, 38.0, 46.0, 38.0, 47.0, 38.0, 48.0, 38.0, 49.0, 38.0, 50.0, 38.0, 51.0, 38.0, 52.0, 38.0, 53.0, 38.0, 54.0, 38.0, 55.0, 38.0, 56.0, 38.0, 57.0, 38.0, 58.0, 38.0, 59.0, 38.0, 60.0, 38.0, 61.0, 38.0, 62.0, 38.0, 63.0, 38.0, 64.0, 38.0, 65.0, 38.0, 66.0, 38.0, 67.0, 38.0, 68.0, 38.0, 69.0, 38.0, 70.0, 38.0, 71.0, 38.0, 72.0, 38.0, 73.0, 38.0, 74.0, 38.0, 75.0, 38.0, 76.0, 38.0, 77.0, 38.0, 78.0, 38.0, 79.0, 38.0, 80.0, 38.0, 81.0, 38.0, 82.0, 38.0, 83.0, 38.0, 84.0, 38.0, 85.0, 38.0, 86.0, 38.0, 87.0, 38.0, 88.0, 38.0, 89.0, 38.0, 90.0, 38.0, 91.0, 38.0, 92.0, 38.0, 93.0, 38.0, 94.0, 38.0, 95.0, 38.0, 96.0, 38.0, 97.0, 38.0, 98.0, 38.0, 99.0, 39.0, 39.0, 39.0, 40.0, 39.0, 41.0, 39.0, 42.0, 39.0, 43.0, 39.0, 44.0, 39.0, 45.0, 39.0, 46.0, 39.0, 47.0, 39.0, 48.0, 39.0, 49.0, 39.0, 50.0, 39.0, 51.0, 39.0, 52.0, 39.0, 53.0, 39.0, 54.0, 39.0, 55.0, 39.0, 56.0, 39.0, 57.0, 39.0, 58.0, 39.0, 59.0, 39.0, 60.0, 39.0, 61.0, 39.0, 62.0, 39.0, 63.0, 39.0, 64.0, 39.0, 65.0, 39.0, 66.0, 39.0, 67.0, 39.0, 68.0, 39.0, 69.0, 39.0, 70.0, 39.0, 71.0, 39.0, 72.0, 39.0, 73.0, 39.0, 74.0, 39.0, 75.0, 39.0, 76.0, 39.0, 77.0, 39.0, 78.0, 39.0, 79.0, 39.0, 80.0, 39.0, 81.0, 39.0, 82.0, 39.0, 83.0, 39.0, 84.0, 39.0, 85.0, 39.0, 86.0, 39.0, 87.0, 39.0, 88.0, 39.0, 89.0, 39.0, 90.0, 39.0, 91.0, 39.0, 92.0, 39.0, 93.0, 39.0, 94.0, 39.0, 95.0, 39.0, 96.0, 39.0, 97.0, 39.0, 98.0, 39.0, 99.0, 40.0, 40.0, 40.0, 41.0, 40.0, 42.0, 40.0, 43.0, 40.0, 44.0, 40.0, 45.0, 40.0, 46.0, 40.0, 47.0, 40.0, 48.0, 40.0, 49.0, 40.0, 50.0, 40.0, 51.0, 40.0, 52.0, 40.0, 53.0, 40.0, 54.0, 40.0, 55.0, 40.0, 56.0, 40.0, 57.0, 40.0, 58.0, 40.0, 59.0, 40.0, 60.0, 40.0, 61.0, 40.0, 62.0, 40.0, 63.0, 40.0, 64.0, 40.0, 65.0, 40.0, 66.0, 40.0, 67.0, 40.0, 68.0, 40.0, 69.0, 40.0, 70.0, 40.0, 71.0, 40.0, 72.0, 40.0, 73.0, 40.0, 74.0, 40.0, 75.0, 40.0, 76.0, 40.0, 77.0, 40.0, 78.0, 40.0, 79.0, 40.0, 80.0, 40.0, 81.0, 40.0, 82.0, 40.0, 83.0, 40.0, 84.0, 40.0, 85.0, 40.0, 86.0, 40.0, 87.0, 40.0, 88.0, 40.0, 89.0, 40.0, 90.0, 40.0, 91.0, 40.0, 92.0, 40.0, 93.0, 40.0, 94.0, 40.0, 95.0, 40.0, 96.0, 40.0, 97.0, 40.0, 98.0, 40.0, 99.0, 41.0, 41.0, 41.0, 42.0, 41.0, 43.0, 41.0, 44.0, 41.0, 45.0, 41.0, 46.0, 41.0, 47.0, 41.0, 48.0, 41.0, 49.0, 41.0, 50.0, 41.0, 51.0, 41.0, 52.0, 41.0, 53.0, 41.0, 54.0, 41.0, 55.0, 41.0, 56.0, 41.0, 57.0, 41.0, 58.0, 41.0, 59.0, 41.0, 60.0, 41.0, 61.0, 41.0, 62.0, 41.0, 63.0, 41.0, 64.0, 41.0, 65.0, 41.0, 66.0, 41.0, 67.0, 41.0, 68.0, 41.0, 69.0, 41.0, 70.0, 41.0, 71.0, 41.0, 72.0, 41.0, 73.0, 41.0, 74.0, 41.0, 75.0, 41.0, 76.0, 41.0, 77.0, 41.0, 78.0, 41.0, 79.0, 41.0, 80.0, 41.0, 81.0, 41.0, 82.0, 41.0, 83.0, 41.0, 84.0, 41.0, 85.0, 41.0, 86.0, 41.0, 87.0, 41.0, 88.0, 41.0, 89.0, 41.0, 90.0, 41.0, 91.0, 41.0, 92.0, 41.0, 93.0, 41.0, 94.0, 41.0, 95.0, 41.0, 96.0, 41.0, 97.0, 41.0, 98.0, 41.0, 99.0, 42.0, 42.0, 42.0, 43.0, 42.0, 44.0, 42.0, 45.0, 42.0, 46.0, 42.0, 47.0, 42.0, 48.0, 42.0, 49.0, 42.0, 50.0, 42.0, 51.0, 42.0, 52.0, 42.0, 53.0, 42.0, 54.0, 42.0, 55.0, 42.0, 56.0, 42.0, 57.0, 42.0, 58.0, 42.0, 59.0, 42.0, 60.0, 42.0, 61.0, 42.0, 62.0, 42.0, 63.0, 42.0, 64.0, 42.0, 65.0, 42.0, 66.0, 42.0, 67.0, 42.0, 68.0, 42.0, 69.0, 42.0, 70.0, 42.0, 71.0, 42.0, 72.0, 42.0, 73.0, 42.0, 74.0, 42.0, 75.0, 42.0, 76.0, 42.0, 77.0, 42.0, 78.0, 42.0, 79.0, 42.0, 80.0, 42.0, 81.0, 42.0, 82.0, 42.0, 83.0, 42.0, 84.0, 42.0, 85.0, 42.0, 86.0, 42.0, 87.0, 42.0, 88.0, 42.0, 89.0, 42.0, 90.0, 42.0, 91.0, 42.0, 92.0, 42.0, 93.0, 42.0, 94.0, 42.0, 95.0, 42.0, 96.0, 42.0, 97.0, 42.0, 98.0, 42.0, 99.0, 43.0, 43.0, 43.0, 44.0, 43.0, 45.0, 43.0, 46.0, 43.0, 47.0, 43.0, 48.0, 43.0, 49.0, 43.0, 50.0, 43.0, 51.0, 43.0, 52.0, 43.0, 53.0, 43.0, 54.0, 43.0, 55.0, 43.0, 56.0, 43.0, 57.0, 43.0, 58.0, 43.0, 59.0, 43.0, 60.0, 43.0, 61.0, 43.0, 62.0, 43.0, 63.0, 43.0, 64.0, 43.0, 65.0, 43.0, 66.0, 43.0, 67.0, 43.0, 68.0, 43.0, 69.0, 43.0, 70.0, 43.0, 71.0, 43.0, 72.0, 43.0, 73.0, 43.0, 74.0, 43.0, 75.0, 43.0, 76.0, 43.0, 77.0, 43.0, 78.0, 43.0, 79.0, 43.0, 80.0, 43.0, 81.0, 43.0, 82.0, 43.0, 83.0, 43.0, 84.0, 43.0, 85.0, 43.0, 86.0, 43.0, 87.0, 43.0, 88.0, 43.0, 89.0, 43.0, 90.0, 43.0, 91.0, 43.0, 92.0, 43.0, 93.0, 43.0, 94.0, 43.0, 95.0, 43.0, 96.0, 43.0, 97.0, 43.0, 98.0, 43.0, 99.0, 44.0, 44.0, 44.0, 45.0, 44.0, 46.0, 44.0, 47.0, 44.0, 48.0, 44.0, 49.0, 44.0, 50.0, 44.0, 51.0, 44.0, 52.0, 44.0, 53.0, 44.0, 54.0, 44.0, 55.0, 44.0, 56.0, 44.0, 57.0, 44.0, 58.0, 44.0, 59.0, 44.0, 60.0, 44.0, 61.0, 44.0, 62.0, 44.0, 63.0, 44.0, 64.0, 44.0, 65.0, 44.0, 66.0, 44.0, 67.0, 44.0, 68.0, 44.0, 69.0, 44.0, 70.0, 44.0, 71.0, 44.0, 72.0, 44.0, 73.0, 44.0, 74.0, 44.0, 75.0, 44.0, 76.0, 44.0, 77.0, 44.0, 78.0, 44.0, 79.0, 44.0, 80.0, 44.0, 81.0, 44.0, 82.0, 44.0, 83.0, 44.0, 84.0, 44.0, 85.0, 44.0, 86.0, 44.0, 87.0, 44.0, 88.0, 44.0, 89.0, 44.0, 90.0, 44.0, 91.0, 44.0, 92.0, 44.0, 93.0, 44.0, 94.0, 44.0, 95.0, 44.0, 96.0, 44.0, 97.0, 44.0, 98.0, 44.0, 99.0, 45.0, 45.0, 45.0, 46.0, 45.0, 47.0, 45.0, 48.0, 45.0, 49.0, 45.0, 50.0, 45.0, 51.0, 45.0, 52.0, 45.0, 53.0, 45.0, 54.0, 45.0, 55.0, 45.0, 56.0, 45.0, 57.0, 45.0, 58.0, 45.0, 59.0, 45.0, 60.0, 45.0, 61.0, 45.0, 62.0, 45.0, 63.0, 45.0, 64.0, 45.0, 65.0, 45.0, 66.0, 45.0, 67.0, 45.0, 68.0, 45.0, 69.0, 45.0, 70.0, 45.0, 71.0, 45.0, 72.0, 45.0, 73.0, 45.0, 74.0, 45.0, 75.0, 45.0, 76.0, 45.0, 77.0, 45.0, 78.0, 45.0, 79.0, 45.0, 80.0, 45.0, 81.0, 45.0, 82.0, 45.0, 83.0, 45.0, 84.0, 45.0, 85.0, 45.0, 86.0, 45.0, 87.0, 45.0, 88.0, 45.0, 89.0, 45.0, 90.0, 45.0, 91.0, 45.0, 92.0, 45.0, 93.0, 45.0, 94.0, 45.0, 95.0, 45.0, 96.0, 45.0, 97.0, 45.0, 98.0, 45.0, 99.0, 46.0, 46.0, 46.0, 47.0, 46.0, 48.0, 46.0, 49.0, 46.0, 50.0, 46.0, 51.0, 46.0, 52.0, 46.0, 53.0, 46.0, 54.0, 46.0, 55.0, 46.0, 56.0, 46.0, 57.0, 46.0, 58.0, 46.0, 59.0, 46.0, 60.0, 46.0, 61.0, 46.0, 62.0, 46.0, 63.0, 46.0, 64.0, 46.0, 65.0, 46.0, 66.0, 46.0, 67.0, 46.0, 68.0, 46.0, 69.0, 46.0, 70.0, 46.0, 71.0, 46.0, 72.0, 46.0, 73.0, 46.0, 74.0, 46.0, 75.0, 46.0, 76.0, 46.0, 77.0, 46.0, 78.0, 46.0, 79.0, 46.0, 80.0, 46.0, 81.0, 46.0, 82.0, 46.0, 83.0, 46.0, 84.0, 46.0, 85.0, 46.0, 86.0, 46.0, 87.0, 46.0, 88.0, 46.0, 89.0, 46.0, 90.0, 46.0, 91.0, 46.0, 92.0, 46.0, 93.0, 46.0, 94.0, 46.0, 95.0, 46.0, 96.0, 46.0, 97.0, 46.0, 98.0, 46.0, 99.0, 47.0, 47.0, 47.0, 48.0, 47.0, 49.0, 47.0, 50.0, 47.0, 51.0, 47.0, 52.0, 47.0, 53.0, 47.0, 54.0, 47.0, 55.0, 47.0, 56.0, 47.0, 57.0, 47.0, 58.0, 47.0, 59.0, 47.0, 60.0, 47.0, 61.0, 47.0, 62.0, 47.0, 63.0, 47.0, 64.0, 47.0, 65.0, 47.0, 66.0, 47.0, 67.0, 47.0, 68.0, 47.0, 69.0, 47.0, 70.0, 47.0, 71.0, 47.0, 72.0, 47.0, 73.0, 47.0, 74.0, 47.0, 75.0, 47.0, 76.0, 47.0, 77.0, 47.0, 78.0, 47.0, 79.0, 47.0, 80.0, 47.0, 81.0, 47.0, 82.0, 47.0, 83.0, 47.0, 84.0, 47.0, 85.0, 47.0, 86.0, 47.0, 87.0, 47.0, 88.0, 47.0, 89.0, 47.0, 90.0, 47.0, 91.0, 47.0, 92.0, 47.0, 93.0, 47.0, 94.0, 47.0, 95.0, 47.0, 96.0, 47.0, 97.0, 47.0, 98.0, 47.0, 99.0, 48.0, 48.0, 48.0, 49.0, 48.0, 50.0, 48.0, 51.0, 48.0, 52.0, 48.0, 53.0, 48.0, 54.0, 48.0, 55.0, 48.0, 56.0, 48.0, 57.0, 48.0, 58.0, 48.0, 59.0, 48.0, 60.0, 48.0, 61.0, 48.0, 62.0, 48.0, 63.0, 48.0, 64.0, 48.0, 65.0, 48.0, 66.0, 48.0, 67.0, 48.0, 68.0, 48.0, 69.0, 48.0, 70.0, 48.0, 71.0, 48.0, 72.0, 48.0, 73.0, 48.0, 74.0, 48.0, 75.0, 48.0, 76.0, 48.0, 77.0, 48.0, 78.0, 48.0, 79.0, 48.0, 80.0, 48.0, 81.0, 48.0, 82.0, 48.0, 83.0, 48.0, 84.0, 48.0, 85.0, 48.0, 86.0, 48.0, 87.0, 48.0, 88.0, 48.0, 89.0, 48.0, 90.0, 48.0, 91.0, 48.0, 92.0, 48.0, 93.0, 48.0, 94.0, 48.0, 95.0, 48.0, 96.0, 48.0, 97.0, 48.0, 98.0, 48.0, 99.0, 49.0, 49.0, 49.0, 50.0, 49.0, 51.0, 49.0, 52.0, 49.0, 53.0, 49.0, 54.0, 49.0, 55.0, 49.0, 56.0, 49.0, 57.0, 49.0, 58.0, 49.0, 59.0, 49.0, 60.0, 49.0, 61.0, 49.0, 62.0, 49.0, 63.0, 49.0, 64.0, 49.0, 65.0, 49.0, 66.0, 49.0, 67.0, 49.0, 68.0, 49.0, 69.0, 49.0, 70.0, 49.0, 71.0, 49.0, 72.0, 49.0, 73.0, 49.0, 74.0, 49.0, 75.0, 49.0, 76.0, 49.0, 77.0, 49.0, 78.0, 49.0, 79.0, 49.0, 80.0, 49.0, 81.0, 49.0, 82.0, 49.0, 83.0, 49.0, 84.0, 49.0, 85.0, 49.0, 86.0, 49.0, 87.0, 49.0, 88.0, 49.0, 89.0, 49.0, 90.0, 49.0, 91.0, 49.0, 92.0, 49.0, 93.0, 49.0, 94.0, 49.0, 95.0, 49.0, 96.0, 49.0, 97.0, 49.0, 98.0, 49.0, 99.0, 50.0, 50.0, 50.0, 51.0, 50.0, 52.0, 50.0, 53.0, 50.0, 54.0, 50.0, 55.0, 50.0, 56.0, 50.0, 57.0, 50.0, 58.0, 50.0, 59.0, 50.0, 60.0, 50.0, 61.0, 50.0, 62.0, 50.0, 63.0, 50.0, 64.0, 50.0, 65.0, 50.0, 66.0, 50.0, 67.0, 50.0, 68.0, 50.0, 69.0, 50.0, 70.0, 50.0, 71.0, 50.0, 72.0, 50.0, 73.0, 50.0, 74.0, 50.0, 75.0, 50.0, 76.0, 50.0, 77.0, 50.0, 78.0, 50.0, 79.0, 50.0, 80.0, 50.0, 81.0, 50.0, 82.0, 50.0, 83.0, 50.0, 84.0, 50.0, 85.0, 50.0, 86.0, 50.0, 87.0, 50.0, 88.0, 50.0, 89.0, 50.0, 90.0, 50.0, 91.0, 50.0, 92.0, 50.0, 93.0, 50.0, 94.0, 50.0, 95.0, 50.0, 96.0, 50.0, 97.0, 50.0, 98.0, 50.0, 99.0, 51.0, 51.0, 51.0, 52.0, 51.0, 53.0, 51.0, 54.0, 51.0, 55.0, 51.0, 56.0, 51.0, 57.0, 51.0, 58.0, 51.0, 59.0, 51.0, 60.0, 51.0, 61.0, 51.0, 62.0, 51.0, 63.0, 51.0, 64.0, 51.0, 65.0, 51.0, 66.0, 51.0, 67.0, 51.0, 68.0, 51.0, 69.0, 51.0, 70.0, 51.0, 71.0, 51.0, 72.0, 51.0, 73.0, 51.0, 74.0, 51.0, 75.0, 51.0, 76.0, 51.0, 77.0, 51.0, 78.0, 51.0, 79.0, 51.0, 80.0, 51.0, 81.0, 51.0, 82.0, 51.0, 83.0, 51.0, 84.0, 51.0, 85.0, 51.0, 86.0, 51.0, 87.0, 51.0, 88.0, 51.0, 89.0, 51.0, 90.0, 51.0, 91.0, 51.0, 92.0, 51.0, 93.0, 51.0, 94.0, 51.0, 95.0, 51.0, 96.0, 51.0, 97.0, 51.0, 98.0, 51.0, 99.0, 52.0, 52.0, 52.0, 53.0, 52.0, 54.0, 52.0, 55.0, 52.0, 56.0, 52.0, 57.0, 52.0, 58.0, 52.0, 59.0, 52.0, 60.0, 52.0, 61.0, 52.0, 62.0, 52.0, 63.0, 52.0, 64.0, 52.0, 65.0, 52.0, 66.0, 52.0, 67.0, 52.0, 68.0, 52.0, 69.0, 52.0, 70.0, 52.0, 71.0, 52.0, 72.0, 52.0, 73.0, 52.0, 74.0, 52.0, 75.0, 52.0, 76.0, 52.0, 77.0, 52.0, 78.0, 52.0, 79.0, 52.0, 80.0, 52.0, 81.0, 52.0, 82.0, 52.0, 83.0, 52.0, 84.0, 52.0, 85.0, 52.0, 86.0, 52.0, 87.0, 52.0, 88.0, 52.0, 89.0, 52.0, 90.0, 52.0, 91.0, 52.0, 92.0, 52.0, 93.0, 52.0, 94.0, 52.0, 95.0, 52.0, 96.0, 52.0, 97.0, 52.0, 98.0, 52.0, 99.0, 53.0, 53.0, 53.0, 54.0, 53.0, 55.0, 53.0, 56.0, 53.0, 57.0, 53.0, 58.0, 53.0, 59.0, 53.0, 60.0, 53.0, 61.0, 53.0, 62.0, 53.0, 63.0, 53.0, 64.0, 53.0, 65.0, 53.0, 66.0, 53.0, 67.0, 53.0, 68.0, 53.0, 69.0, 53.0, 70.0, 53.0, 71.0, 53.0, 72.0, 53.0, 73.0, 53.0, 74.0, 53.0, 75.0, 53.0, 76.0, 53.0, 77.0, 53.0, 78.0, 53.0, 79.0, 53.0, 80.0, 53.0, 81.0, 53.0, 82.0, 53.0, 83.0, 53.0, 84.0, 53.0, 85.0, 53.0, 86.0, 53.0, 87.0, 53.0, 88.0, 53.0, 89.0, 53.0, 90.0, 53.0, 91.0, 53.0, 92.0, 53.0, 93.0, 53.0, 94.0, 53.0, 95.0, 53.0, 96.0, 53.0, 97.0, 53.0, 98.0, 53.0, 99.0, 54.0, 54.0, 54.0, 55.0, 54.0, 56.0, 54.0, 57.0, 54.0, 58.0, 54.0, 59.0, 54.0, 60.0, 54.0, 61.0, 54.0, 62.0, 54.0, 63.0, 54.0, 64.0, 54.0, 65.0, 54.0, 66.0, 54.0, 67.0, 54.0, 68.0, 54.0, 69.0, 54.0, 70.0, 54.0, 71.0, 54.0, 72.0, 54.0, 73.0, 54.0, 74.0, 54.0, 75.0, 54.0, 76.0, 54.0, 77.0, 54.0, 78.0, 54.0, 79.0, 54.0, 80.0, 54.0, 81.0, 54.0, 82.0, 54.0, 83.0, 54.0, 84.0, 54.0, 85.0, 54.0, 86.0, 54.0, 87.0, 54.0, 88.0, 54.0, 89.0, 54.0, 90.0, 54.0, 91.0, 54.0, 92.0, 54.0, 93.0, 54.0, 94.0, 54.0, 95.0, 54.0, 96.0, 54.0, 97.0, 54.0, 98.0, 54.0, 99.0, 55.0, 55.0, 55.0, 56.0, 55.0, 57.0, 55.0, 58.0, 55.0, 59.0, 55.0, 60.0, 55.0, 61.0, 55.0, 62.0, 55.0, 63.0, 55.0, 64.0, 55.0, 65.0, 55.0, 66.0, 55.0, 67.0, 55.0, 68.0, 55.0, 69.0, 55.0, 70.0, 55.0, 71.0, 55.0, 72.0, 55.0, 73.0, 55.0, 74.0, 55.0, 75.0, 55.0, 76.0, 55.0, 77.0, 55.0, 78.0, 55.0, 79.0, 55.0, 80.0, 55.0, 81.0, 55.0, 82.0, 55.0, 83.0, 55.0, 84.0, 55.0, 85.0, 55.0, 86.0, 55.0, 87.0, 55.0, 88.0, 55.0, 89.0, 55.0, 90.0, 55.0, 91.0, 55.0, 92.0, 55.0, 93.0, 55.0, 94.0, 55.0, 95.0, 55.0, 96.0, 55.0, 97.0, 55.0, 98.0, 55.0, 99.0, 56.0, 56.0, 56.0, 57.0, 56.0, 58.0, 56.0, 59.0, 56.0, 60.0, 56.0, 61.0, 56.0, 62.0, 56.0, 63.0, 56.0, 64.0, 56.0, 65.0, 56.0, 66.0, 56.0, 67.0, 56.0, 68.0, 56.0, 69.0, 56.0, 70.0, 56.0, 71.0, 56.0, 72.0, 56.0, 73.0, 56.0, 74.0, 56.0, 75.0, 56.0, 76.0, 56.0, 77.0, 56.0, 78.0, 56.0, 79.0, 56.0, 80.0, 56.0, 81.0, 56.0, 82.0, 56.0, 83.0, 56.0, 84.0, 56.0, 85.0, 56.0, 86.0, 56.0, 87.0, 56.0, 88.0, 56.0, 89.0, 56.0, 90.0, 56.0, 91.0, 56.0, 92.0, 56.0, 93.0, 56.0, 94.0, 56.0, 95.0, 56.0, 96.0, 56.0, 97.0, 56.0, 98.0, 56.0, 99.0, 57.0, 57.0, 57.0, 58.0, 57.0, 59.0, 57.0, 60.0, 57.0, 61.0, 57.0, 62.0, 57.0, 63.0, 57.0, 64.0, 57.0, 65.0, 57.0, 66.0, 57.0, 67.0, 57.0, 68.0, 57.0, 69.0, 57.0, 70.0, 57.0, 71.0, 57.0, 72.0, 57.0, 73.0, 57.0, 74.0, 57.0, 75.0, 57.0, 76.0, 57.0, 77.0, 57.0, 78.0, 57.0, 79.0, 57.0, 80.0, 57.0, 81.0, 57.0, 82.0, 57.0, 83.0, 57.0, 84.0, 57.0, 85.0, 57.0, 86.0, 57.0, 87.0, 57.0, 88.0, 57.0, 89.0, 57.0, 90.0, 57.0, 91.0, 57.0, 92.0, 57.0, 93.0, 57.0, 94.0, 57.0, 95.0, 57.0, 96.0, 57.0, 97.0, 57.0, 98.0, 57.0, 99.0, 58.0, 58.0, 58.0, 59.0, 58.0, 60.0, 58.0, 61.0, 58.0, 62.0, 58.0, 63.0, 58.0, 64.0, 58.0, 65.0, 58.0, 66.0, 58.0, 67.0, 58.0, 68.0, 58.0, 69.0, 58.0, 70.0, 58.0, 71.0, 58.0, 72.0, 58.0, 73.0, 58.0, 74.0, 58.0, 75.0, 58.0, 76.0, 58.0, 77.0, 58.0, 78.0, 58.0, 79.0, 58.0, 80.0, 58.0, 81.0, 58.0, 82.0, 58.0, 83.0, 58.0, 84.0, 58.0, 85.0, 58.0, 86.0, 58.0, 87.0, 58.0, 88.0, 58.0, 89.0, 58.0, 90.0, 58.0, 91.0, 58.0, 92.0, 58.0, 93.0, 58.0, 94.0, 58.0, 95.0, 58.0, 96.0, 58.0, 97.0, 58.0, 98.0, 58.0, 99.0, 59.0, 59.0, 59.0, 60.0, 59.0, 61.0, 59.0, 62.0, 59.0, 63.0, 59.0, 64.0, 59.0, 65.0, 59.0, 66.0, 59.0, 67.0, 59.0, 68.0, 59.0, 69.0, 59.0, 70.0, 59.0, 71.0, 59.0, 72.0, 59.0, 73.0, 59.0, 74.0, 59.0, 75.0, 59.0, 76.0, 59.0, 77.0, 59.0, 78.0, 59.0, 79.0, 59.0, 80.0, 59.0, 81.0, 59.0, 82.0, 59.0, 83.0, 59.0, 84.0, 59.0, 85.0, 59.0, 86.0, 59.0, 87.0, 59.0, 88.0, 59.0, 89.0, 59.0, 90.0, 59.0, 91.0, 59.0, 92.0, 59.0, 93.0, 59.0, 94.0, 59.0, 95.0, 59.0, 96.0, 59.0, 97.0, 59.0, 98.0, 59.0, 99.0, 60.0, 60.0, 60.0, 61.0, 60.0, 62.0, 60.0, 63.0, 60.0, 64.0, 60.0, 65.0, 60.0, 66.0, 60.0, 67.0, 60.0, 68.0, 60.0, 69.0, 60.0, 70.0, 60.0, 71.0, 60.0, 72.0, 60.0, 73.0, 60.0, 74.0, 60.0, 75.0, 60.0, 76.0, 60.0, 77.0, 60.0, 78.0, 60.0, 79.0, 60.0, 80.0, 60.0, 81.0, 60.0, 82.0, 60.0, 83.0, 60.0, 84.0, 60.0, 85.0, 60.0, 86.0, 60.0, 87.0, 60.0, 88.0, 60.0, 89.0, 60.0, 90.0, 60.0, 91.0, 60.0, 92.0, 60.0, 93.0, 60.0, 94.0, 60.0, 95.0, 60.0, 96.0, 60.0, 97.0, 60.0, 98.0, 60.0, 99.0, 61.0, 61.0, 61.0, 62.0, 61.0, 63.0, 61.0, 64.0, 61.0, 65.0, 61.0, 66.0, 61.0, 67.0, 61.0, 68.0, 61.0, 69.0, 61.0, 70.0, 61.0, 71.0, 61.0, 72.0, 61.0, 73.0, 61.0, 74.0, 61.0, 75.0, 61.0, 76.0, 61.0, 77.0, 61.0, 78.0, 61.0, 79.0, 61.0, 80.0, 61.0, 81.0, 61.0, 82.0, 61.0, 83.0, 61.0, 84.0, 61.0, 85.0, 61.0, 86.0, 61.0, 87.0, 61.0, 88.0, 61.0, 89.0, 61.0, 90.0, 61.0, 91.0, 61.0, 92.0, 61.0, 93.0, 61.0, 94.0, 61.0, 95.0, 61.0, 96.0, 61.0, 97.0, 61.0, 98.0, 61.0, 99.0, 62.0, 62.0, 62.0, 63.0, 62.0, 64.0, 62.0, 65.0, 62.0, 66.0, 62.0, 67.0, 62.0, 68.0, 62.0, 69.0, 62.0, 70.0, 62.0, 71.0, 62.0, 72.0, 62.0, 73.0, 62.0, 74.0, 62.0, 75.0, 62.0, 76.0, 62.0, 77.0, 62.0, 78.0, 62.0, 79.0, 62.0, 80.0, 62.0, 81.0, 62.0, 82.0, 62.0, 83.0, 62.0, 84.0, 62.0, 85.0, 62.0, 86.0, 62.0, 87.0, 62.0, 88.0, 62.0, 89.0, 62.0, 90.0, 62.0, 91.0, 62.0, 92.0, 62.0, 93.0, 62.0, 94.0, 62.0, 95.0, 62.0, 96.0, 62.0, 97.0, 62.0, 98.0, 62.0, 99.0, 63.0, 63.0, 63.0, 64.0, 63.0, 65.0, 63.0, 66.0, 63.0, 67.0, 63.0, 68.0, 63.0, 69.0, 63.0, 70.0, 63.0, 71.0, 63.0, 72.0, 63.0, 73.0, 63.0, 74.0, 63.0, 75.0, 63.0, 76.0, 63.0, 77.0, 63.0, 78.0, 63.0, 79.0, 63.0, 80.0, 63.0, 81.0, 63.0, 82.0, 63.0, 83.0, 63.0, 84.0, 63.0, 85.0, 63.0, 86.0, 63.0, 87.0, 63.0, 88.0, 63.0, 89.0, 63.0, 90.0, 63.0, 91.0, 63.0, 92.0, 63.0, 93.0, 63.0, 94.0, 63.0, 95.0, 63.0, 96.0, 63.0, 97.0, 63.0, 98.0, 63.0, 99.0, 64.0, 64.0, 64.0, 65.0, 64.0, 66.0, 64.0, 67.0, 64.0, 68.0, 64.0, 69.0, 64.0, 70.0, 64.0, 71.0, 64.0, 72.0, 64.0, 73.0, 64.0, 74.0, 64.0, 75.0, 64.0, 76.0, 64.0, 77.0, 64.0, 78.0, 64.0, 79.0, 64.0, 80.0, 64.0, 81.0, 64.0, 82.0, 64.0, 83.0, 64.0, 84.0, 64.0, 85.0, 64.0, 86.0, 64.0, 87.0, 64.0, 88.0, 64.0, 89.0, 64.0, 90.0, 64.0, 91.0, 64.0, 92.0, 64.0, 93.0, 64.0, 94.0, 64.0, 95.0, 64.0, 96.0, 64.0, 97.0, 64.0, 98.0, 64.0, 99.0, 65.0, 65.0, 65.0, 66.0, 65.0, 67.0, 65.0, 68.0, 65.0, 69.0, 65.0, 70.0, 65.0, 71.0, 65.0, 72.0, 65.0, 73.0, 65.0, 74.0, 65.0, 75.0, 65.0, 76.0, 65.0, 77.0, 65.0, 78.0, 65.0, 79.0, 65.0, 80.0, 65.0, 81.0, 65.0, 82.0, 65.0, 83.0, 65.0, 84.0, 65.0, 85.0, 65.0, 86.0, 65.0, 87.0, 65.0, 88.0, 65.0, 89.0, 65.0, 90.0, 65.0, 91.0, 65.0, 92.0, 65.0, 93.0, 65.0, 94.0, 65.0, 95.0, 65.0, 96.0, 65.0, 97.0, 65.0, 98.0, 65.0, 99.0, 66.0, 66.0, 66.0, 67.0, 66.0, 68.0, 66.0, 69.0, 66.0, 70.0, 66.0, 71.0, 66.0, 72.0, 66.0, 73.0, 66.0, 74.0, 66.0, 75.0, 66.0, 76.0, 66.0, 77.0, 66.0, 78.0, 66.0, 79.0, 66.0, 80.0, 66.0, 81.0, 66.0, 82.0, 66.0, 83.0, 66.0, 84.0, 66.0, 85.0, 66.0, 86.0, 66.0, 87.0, 66.0, 88.0, 66.0, 89.0, 66.0, 90.0, 66.0, 91.0, 66.0, 92.0, 66.0, 93.0, 66.0, 94.0, 66.0, 95.0, 66.0, 96.0, 66.0, 97.0, 66.0, 98.0, 66.0, 99.0, 67.0, 67.0, 67.0, 68.0, 67.0, 69.0, 67.0, 70.0, 67.0, 71.0, 67.0, 72.0, 67.0, 73.0, 67.0, 74.0, 67.0, 75.0, 67.0, 76.0, 67.0, 77.0, 67.0, 78.0, 67.0, 79.0, 67.0, 80.0, 67.0, 81.0, 67.0, 82.0, 67.0, 83.0, 67.0, 84.0, 67.0, 85.0, 67.0, 86.0, 67.0, 87.0, 67.0, 88.0, 67.0, 89.0, 67.0, 90.0, 67.0, 91.0, 67.0, 92.0, 67.0, 93.0, 67.0, 94.0, 67.0, 95.0, 67.0, 96.0, 67.0, 97.0, 67.0, 98.0, 67.0, 99.0, 68.0, 68.0, 68.0, 69.0, 68.0, 70.0, 68.0, 71.0, 68.0, 72.0, 68.0, 73.0, 68.0, 74.0, 68.0, 75.0, 68.0, 76.0, 68.0, 77.0, 68.0, 78.0, 68.0, 79.0, 68.0, 80.0, 68.0, 81.0, 68.0, 82.0, 68.0, 83.0, 68.0, 84.0, 68.0, 85.0, 68.0, 86.0, 68.0, 87.0, 68.0, 88.0, 68.0, 89.0, 68.0, 90.0, 68.0, 91.0, 68.0, 92.0, 68.0, 93.0, 68.0, 94.0, 68.0, 95.0, 68.0, 96.0, 68.0, 97.0, 68.0, 98.0, 68.0, 99.0, 69.0, 69.0, 69.0, 70.0, 69.0, 71.0, 69.0, 72.0, 69.0, 73.0, 69.0, 74.0, 69.0, 75.0, 69.0, 76.0, 69.0, 77.0, 69.0, 78.0, 69.0, 79.0, 69.0, 80.0, 69.0, 81.0, 69.0, 82.0, 69.0, 83.0, 69.0, 84.0, 69.0, 85.0, 69.0, 86.0, 69.0, 87.0, 69.0, 88.0, 69.0, 89.0, 69.0, 90.0, 69.0, 91.0, 69.0, 92.0, 69.0, 93.0, 69.0, 94.0, 69.0, 95.0, 69.0, 96.0, 69.0, 97.0, 69.0, 98.0, 69.0, 99.0, 70.0, 70.0, 70.0, 71.0, 70.0, 72.0, 70.0, 73.0, 70.0, 74.0, 70.0, 75.0, 70.0, 76.0, 70.0, 77.0, 70.0, 78.0, 70.0, 79.0, 70.0, 80.0, 70.0, 81.0, 70.0, 82.0, 70.0, 83.0, 70.0, 84.0, 70.0, 85.0, 70.0, 86.0, 70.0, 87.0, 70.0, 88.0, 70.0, 89.0, 70.0, 90.0, 70.0, 91.0, 70.0, 92.0, 70.0, 93.0, 70.0, 94.0, 70.0, 95.0, 70.0, 96.0, 70.0, 97.0, 70.0, 98.0, 70.0, 99.0, 71.0, 71.0, 71.0, 72.0, 71.0, 73.0, 71.0, 74.0, 71.0, 75.0, 71.0, 76.0, 71.0, 77.0, 71.0, 78.0, 71.0, 79.0, 71.0, 80.0, 71.0, 81.0, 71.0, 82.0, 71.0, 83.0, 71.0, 84.0, 71.0, 85.0, 71.0, 86.0, 71.0, 87.0, 71.0, 88.0, 71.0, 89.0, 71.0, 90.0, 71.0, 91.0, 71.0, 92.0, 71.0, 93.0, 71.0, 94.0, 71.0, 95.0, 71.0, 96.0, 71.0, 97.0, 71.0, 98.0, 71.0, 99.0, 72.0, 72.0, 72.0, 73.0, 72.0, 74.0, 72.0, 75.0, 72.0, 76.0, 72.0, 77.0, 72.0, 78.0, 72.0, 79.0, 72.0, 80.0, 72.0, 81.0, 72.0, 82.0, 72.0, 83.0, 72.0, 84.0, 72.0, 85.0, 72.0, 86.0, 72.0, 87.0, 72.0, 88.0, 72.0, 89.0, 72.0, 90.0, 72.0, 91.0, 72.0, 92.0, 72.0, 93.0, 72.0, 94.0, 72.0, 95.0, 72.0, 96.0, 72.0, 97.0, 72.0, 98.0, 72.0, 99.0, 73.0, 73.0, 73.0, 74.0, 73.0, 75.0, 73.0, 76.0, 73.0, 77.0, 73.0, 78.0, 73.0, 79.0, 73.0, 80.0, 73.0, 81.0, 73.0, 82.0, 73.0, 83.0, 73.0, 84.0, 73.0, 85.0, 73.0, 86.0, 73.0, 87.0, 73.0, 88.0, 73.0, 89.0, 73.0, 90.0, 73.0, 91.0, 73.0, 92.0, 73.0, 93.0, 73.0, 94.0, 73.0, 95.0, 73.0, 96.0, 73.0, 97.0, 73.0, 98.0, 73.0, 99.0, 74.0, 74.0, 74.0, 75.0, 74.0, 76.0, 74.0, 77.0, 74.0, 78.0, 74.0, 79.0, 74.0, 80.0, 74.0, 81.0, 74.0, 82.0, 74.0, 83.0, 74.0, 84.0, 74.0, 85.0, 74.0, 86.0, 74.0, 87.0, 74.0, 88.0, 74.0, 89.0, 74.0, 90.0, 74.0, 91.0, 74.0, 92.0, 74.0, 93.0, 74.0, 94.0, 74.0, 95.0, 74.0, 96.0, 74.0, 97.0, 74.0, 98.0, 74.0, 99.0, 75.0, 75.0, 75.0, 76.0, 75.0, 77.0, 75.0, 78.0, 75.0, 79.0, 75.0, 80.0, 75.0, 81.0, 75.0, 82.0, 75.0, 83.0, 75.0, 84.0, 75.0, 85.0, 75.0, 86.0, 75.0, 87.0, 75.0, 88.0, 75.0, 89.0, 75.0, 90.0, 75.0, 91.0, 75.0, 92.0, 75.0, 93.0, 75.0, 94.0, 75.0, 95.0, 75.0, 96.0, 75.0, 97.0, 75.0, 98.0, 75.0, 99.0, 76.0, 76.0, 76.0, 77.0, 76.0, 78.0, 76.0, 79.0, 76.0, 80.0, 76.0, 81.0, 76.0, 82.0, 76.0, 83.0, 76.0, 84.0, 76.0, 85.0, 76.0, 86.0, 76.0, 87.0, 76.0, 88.0, 76.0, 89.0, 76.0, 90.0, 76.0, 91.0, 76.0, 92.0, 76.0, 93.0, 76.0, 94.0, 76.0, 95.0, 76.0, 96.0, 76.0, 97.0, 76.0, 98.0, 76.0, 99.0, 77.0, 77.0, 77.0, 78.0, 77.0, 79.0, 77.0, 80.0, 77.0, 81.0, 77.0, 82.0, 77.0, 83.0, 77.0, 84.0, 77.0, 85.0, 77.0, 86.0, 77.0, 87.0, 77.0, 88.0, 77.0, 89.0, 77.0, 90.0, 77.0, 91.0, 77.0, 92.0, 77.0, 93.0, 77.0, 94.0, 77.0, 95.0, 77.0, 96.0, 77.0, 97.0, 77.0, 98.0, 77.0, 99.0, 78.0, 78.0, 78.0, 79.0, 78.0, 80.0, 78.0, 81.0, 78.0, 82.0, 78.0, 83.0, 78.0, 84.0, 78.0, 85.0, 78.0, 86.0, 78.0, 87.0, 78.0, 88.0, 78.0, 89.0, 78.0, 90.0, 78.0, 91.0, 78.0, 92.0, 78.0, 93.0, 78.0, 94.0, 78.0, 95.0, 78.0, 96.0, 78.0, 97.0, 78.0, 98.0, 78.0, 99.0, 79.0, 79.0, 79.0, 80.0, 79.0, 81.0, 79.0, 82.0, 79.0, 83.0, 79.0, 84.0, 79.0, 85.0, 79.0, 86.0, 79.0, 87.0, 79.0, 88.0, 79.0, 89.0, 79.0, 90.0, 79.0, 91.0, 79.0, 92.0, 79.0, 93.0, 79.0, 94.0, 79.0, 95.0, 79.0, 96.0, 79.0, 97.0, 79.0, 98.0, 79.0, 99.0, 80.0, 80.0, 80.0, 81.0, 80.0, 82.0, 80.0, 83.0, 80.0, 84.0, 80.0, 85.0, 80.0, 86.0, 80.0, 87.0, 80.0, 88.0, 80.0, 89.0, 80.0, 90.0, 80.0, 91.0, 80.0, 92.0, 80.0, 93.0, 80.0, 94.0, 80.0, 95.0, 80.0, 96.0, 80.0, 97.0, 80.0, 98.0, 80.0, 99.0, 81.0, 81.0, 81.0, 82.0, 81.0, 83.0, 81.0, 84.0, 81.0, 85.0, 81.0, 86.0, 81.0, 87.0, 81.0, 88.0, 81.0, 89.0, 81.0, 90.0, 81.0, 91.0, 81.0, 92.0, 81.0, 93.0, 81.0, 94.0, 81.0, 95.0, 81.0, 96.0, 81.0, 97.0, 81.0, 98.0, 81.0, 99.0, 82.0, 82.0, 82.0, 83.0, 82.0, 84.0, 82.0, 85.0, 82.0, 86.0, 82.0, 87.0, 82.0, 88.0, 82.0, 89.0, 82.0, 90.0, 82.0, 91.0, 82.0, 92.0, 82.0, 93.0, 82.0, 94.0, 82.0, 95.0, 82.0, 96.0, 82.0, 97.0, 82.0, 98.0, 82.0, 99.0, 83.0, 83.0, 83.0, 84.0, 83.0, 85.0, 83.0, 86.0, 83.0, 87.0, 83.0, 88.0, 83.0, 89.0, 83.0, 90.0, 83.0, 91.0, 83.0, 92.0, 83.0, 93.0, 83.0, 94.0, 83.0, 95.0, 83.0, 96.0, 83.0, 97.0, 83.0, 98.0, 83.0, 99.0, 84.0, 84.0, 84.0, 85.0, 84.0, 86.0, 84.0, 87.0, 84.0, 88.0, 84.0, 89.0, 84.0, 90.0, 84.0, 91.0, 84.0, 92.0, 84.0, 93.0, 84.0, 94.0, 84.0, 95.0, 84.0, 96.0, 84.0, 97.0, 84.0, 98.0, 84.0, 99.0, 85.0, 85.0, 85.0, 86.0, 85.0, 87.0, 85.0, 88.0, 85.0, 89.0, 85.0, 90.0, 85.0, 91.0, 85.0, 92.0, 85.0, 93.0, 85.0, 94.0, 85.0, 95.0, 85.0, 96.0, 85.0, 97.0, 85.0, 98.0, 85.0, 99.0, 86.0, 86.0, 86.0, 87.0, 86.0, 88.0, 86.0, 89.0, 86.0, 90.0, 86.0, 91.0, 86.0, 92.0, 86.0, 93.0, 86.0, 94.0, 86.0, 95.0, 86.0, 96.0, 86.0, 97.0, 86.0, 98.0, 86.0, 99.0, 87.0, 87.0, 87.0, 88.0, 87.0, 89.0, 87.0, 90.0, 87.0, 91.0, 87.0, 92.0, 87.0, 93.0, 87.0, 94.0, 87.0, 95.0, 87.0, 96.0, 87.0, 97.0, 87.0, 98.0, 87.0, 99.0, 88.0, 88.0, 88.0, 89.0, 88.0, 90.0, 88.0, 91.0, 88.0, 92.0, 88.0, 93.0, 88.0, 94.0, 88.0, 95.0, 88.0, 96.0, 88.0, 97.0, 88.0, 98.0, 88.0, 99.0, 89.0, 89.0, 89.0, 90.0, 89.0, 91.0, 89.0, 92.0, 89.0, 93.0, 89.0, 94.0, 89.0, 95.0, 89.0, 96.0, 89.0, 97.0, 89.0, 98.0, 89.0, 99.0, 90.0, 90.0, 90.0, 91.0, 90.0, 92.0, 90.0, 93.0, 90.0, 94.0, 90.0, 95.0, 90.0, 96.0, 90.0, 97.0, 90.0, 98.0, 90.0, 99.0, 91.0, 91.0, 91.0, 92.0, 91.0, 93.0, 91.0, 94.0, 91.0, 95.0, 91.0, 96.0, 91.0, 97.0, 91.0, 98.0, 91.0, 99.0, 92.0, 92.0, 92.0, 93.0, 92.0, 94.0, 92.0, 95.0, 92.0, 96.0, 92.0, 97.0, 92.0, 98.0, 92.0, 99.0, 93.0, 93.0, 93.0, 94.0, 93.0, 95.0, 93.0, 96.0, 93.0, 97.0, 93.0, 98.0, 93.0, 99.0, 94.0, 94.0, 94.0, 95.0, 94.0, 96.0, 94.0, 97.0, 94.0, 98.0, 94.0, 99.0, 95.0, 95.0, 95.0, 96.0, 95.0, 97.0, 95.0, 98.0, 95.0, 99.0, 96.0, 96.0, 96.0, 97.0, 96.0, 98.0, 96.0, 99.0, 97.0, 97.0, 97.0, 98.0, 97.0, 99.0, 98.0, 98.0, 98.0, 99.0, 99.0, 99.0], "answer": 9.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\n# compute the center of the circle\ncenter = np.array([-1, 2]) + np.array([3,0]) + np.array([9,0])\nprint(center)\n\n# compute the sum of the x and y coordinates\nprint(center[0] + center[1])\n```", "solution": "```python\nimport numpy as np\n\n# compute the center of the circle\ncenter = np.array([-1, 2]) + np.array([3,0]) + np.array([9,0])\nprint(center)\n\n# compute the sum of the x and y coordinates\nprint(center[0] + center[1])\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[11  2]\n13", "model_answers": [11.0, 2.0, 13.0], "answer": 17.0}, {"response": "**Solution**\n```python\nf = lambda x: (4*x+1)/3\nx = f(1)\nprint(1/x)\n```", "solution": "```python\nf = lambda x: (4*x+1)/3\nx = f(1)\nprint(1/x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.6", "model_answers": [0.6], "answer": 2.0}, {"response": "**Solution**\n```python\np = 1\nq = 3\nprint(p + q)\n```", "solution": "```python\np = 1\nq = 3\nprint(p + q)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4", "model_answers": [4.0], "answer": 17.0}, {"response": "**Solution**\n```python\ndef sum_of_n(n):\n    return n * (n + 1) // 2\n\ndef mean_of_n(n):\n    return sum_of_n(n) / n\n\nprint(mean_of_n(250))\n```", "solution": "```python\ndef sum_of_n(n):\n    return n * (n + 1) // 2\n\ndef mean_of_n(n):\n    return sum_of_n(n) / n\n\nprint(mean_of_n(250))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "125.5", "model_answers": [125.5], "answer": 125.5}, {"response": "**Solution**\n```python\nfrom sympy import *\nx = Symbol('x')\ndiff = solve(x**2 - 4*x - 14, x)[1] - solve(x**2 - 4*x - 14, x)[0]\nprint(abs(diff))\n```", "solution": "```python\nfrom sympy import *\nx = Symbol('x')\ndiff = solve(x**2 - 4*x - 14, x)[1] - solve(x**2 - 4*x - 14, x)[0]\nprint(abs(diff))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6*sqrt(2)", "model_answers": [6.0, 2.0], "answer": 13.0}, {"response": "**Solution**\n```python\nx = 7 / 3\nx = 1 / x\nprint(x)\n```", "solution": "```python\nx = 7 / 3\nx = 1 / x\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.42857142857142855", "model_answers": [0.42857142857142855], "answer": 2.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return (1 + x) / (1 - x)\n\ndef g(x):\n    return -2 / (x + 1)\n\n# f(g(f(g(f(g(f(g(f(12))))))))\nresult = f(g(f(g(f(g(f(g(f(12)))))))))\nprint(result)\n```", "solution": "```python\ndef f(x):\n    return (1 + x) / (1 - x)\n\ndef g(x):\n    return -2 / (x + 1)\n\n# f(g(f(g(f(g(f(g(f(12))))))))\nresult = f(g(f(g(f(g(f(g(f(12)))))))))\nprint(result)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-1.2857142857142863", "model_answers": [-1.2857142857142863], "answer": 4.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.symbols('x')\nexpr = (x + 3) * (x - 1) - x * (x + 2)\nprint(expr.simplify())\n```", "solution": "```python\nimport sympy\nx = sympy.symbols('x')\nexpr = (x + 3) * (x - 1) - x * (x + 2)\nprint(expr.simplify())\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-3", "model_answers": [-3.0], "answer": -3.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\n\nexpr = sqrt(4/sqrt(24) + sqrt(3456)/9 + sqrt(6))\nprint(expr)\n```", "solution": "```python\nfrom sympy import sqrt\n\nexpr = sqrt(4/sqrt(24) + sqrt(3456)/9 + sqrt(6))\nprint(expr)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2*6**(1/4)", "model_answers": [2.0, 6.0, 1.0, 4.0], "answer": 2.0}, {"response": "**Solution**\n```python\nx = 2\nprint(x)\n```", "solution": "```python\nx = 2\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 3.0}, {"response": "**Solution**\n```python\nimport sympy\n\nexpr = sympy.expand_power_base(4**5 + 4**5 + 4**5 + 4**5)\nresult = sympy.sqrt(expr)\nprint(result)\n```", "solution": "```python\nimport sympy\n\nexpr = sympy.expand_power_base(4**5 + 4**5 + 4**5 + 4**5)\nresult = sympy.sqrt(expr)\nprint(result)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "64", "model_answers": [64.0], "answer": 16.0}, {"response": "**Solution**\n```python\nA,B,C = -2,3,-4\nA + B + C\n```", "solution": "```python\nA,B,C = -2,3,-4\nA + B + C\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "", "model_answers": [], "answer": -3.0}, {"response": "**Solution**\n```python\nmidpoint_x = (0 + 2) / 2\nmidpoint_y = (0 + 2) / 2\nprint(midpoint_x, midpoint_y)\n\nmidpoint_x = (5 + 6) / 2\nmidpoint_y = (0 + 2) / 2\nprint(midpoint_x, midpoint_y)\n\nslope = (midpoint_y - 0) / (midpoint_x - 0)\nprint(slope)\n```", "solution": "```python\nmidpoint_x = (0 + 2) / 2\nmidpoint_y = (0 + 2) / 2\nprint(midpoint_x, midpoint_y)\n\nmidpoint_x = (5 + 6) / 2\nmidpoint_y = (0 + 2) / 2\nprint(midpoint_x, midpoint_y)\n\nslope = (midpoint_y - 0) / (midpoint_x - 0)\nprint(slope)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.0 1.0\n5.5 1.0\n0.18181818181818182", "model_answers": [1.0, 1.0, 5.5, 1.0, 0.18181818181818182], "answer": 0.0}, {"response": "**Solution**\n```python\nx = 2\nprint(x)\n```", "solution": "```python\nx = 2\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 1.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, log\n\nx = Symbol('x')\n\nresult = log(10-2*x, x-1)\n\nprint(result.evalf())\n```", "solution": "```python\nfrom sympy import Symbol, log\n\nx = Symbol('x')\n\nresult = log(10-2*x, x-1)\n\nprint(result.evalf())\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "log(10 - 2*x)/log(x - 1)", "model_answers": [10.0, 2.0, 1.0], "answer": 3.0}, {"response": "**Solution**\n```python\nimport sympy\na, b, c, d = sympy.symbols('a b c d')\neq1 = a - b - 2*(c+d)\neq2 = b - a + 2\neq3 = d - c - 5\nsol = sympy.solve((eq1, eq2, eq3), (c, d))\nprint(sol)\n```", "solution": "```python\nimport sympy\na, b, c, d = sympy.symbols('a b c d')\neq1 = a - b - 2*(c+d)\neq2 = b - a + 2\neq3 = d - c - 5\nsol = sympy.solve((eq1, eq2, eq3), (c, d))\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "{c: a/4 - b/4 - 5/2, d: a/4 - b/4 + 5/2}", "model_answers": [4.0, 4.0, 5.0, 2.0, 4.0, 4.0, 5.0, 2.0], "answer": -2.0}, {"response": "**Solution**\n```python\na = 2\nb = 3\nprint(8 * a**2 * b**2)\n```", "solution": "```python\na = 2\nb = 3\nprint(8 * a**2 * b**2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "288", "model_answers": [288.0], "answer": 288.0}, {"response": "**Solution**\n```python\na = 8\nresult = 16 ** (1/3) * a ** (2/3)\nprint(result)\n```", "solution": "```python\na = 8\nresult = 16 ** (1/3) * a ** (2/3)\nprint(result)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "10.079368399158984", "model_answers": [10.079368399158984], "answer": 4.0}, {"response": "**Solution**\n```python\n(x, y) = ((1 + 1) / 2, (4 + 10) / 2)\nprint(x + y)\n```", "solution": "```python\n(x, y) = ((1 + 1) / 2, (4 + 10) / 2)\nprint(x + y)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "8.0", "model_answers": [8.0], "answer": 8.0}, {"response": "**Solution**\n```python\nfrom sympy import solve\nfrom sympy import symbols\nx, y = symbols('x, y')\neq1 = x**2 - 24*x + y**2 - 32*y + 384\neq2 = x**2 + 24*x + y**2 + 32*y + 384\nsol = solve((eq1, eq2))\nprint(sol)\n```", "solution": "```python\nfrom sympy import solve\nfrom sympy import symbols\nx, y = symbols('x, y')\neq1 = x**2 - 24*x + y**2 - 32*y + 384\neq2 = x**2 + 24*x + y**2 + 32*y + 384\nsol = solve((eq1, eq2))\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[{x: -32*sqrt(6)*I/5, y: 24*sqrt(6)*I/5}, {x: 32*sqrt(6)*I/5, y: -24*sqrt(6)*I/5}]", "model_answers": [-32.0, 6.0, 5.0, 24.0, 6.0, 5.0, 32.0, 6.0, 5.0, -24.0, 6.0, 5.0], "answer": 32.0}, {"response": "**Solution**\n```python\nimport sympy as sp\nx = sp.symbols('x')\nprint(sp.solve([(66-2**x)/(2**x+3) - (4-2**x)/(2**(x+1)+6)], x)[0])\n```", "solution": "```python\nimport sympy as sp\nx = sp.symbols('x')\nprint(sp.solve([(66-2**x)/(2**x+3) - (4-2**x)/(2**(x+1)+6)], x)[0])\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "(7,)", "model_answers": [7.0], "answer": 7.0}, {"response": "**Solution**\n```python\npencil_cost = 124 / 3\njumbo_eraser_cost = 182 / 5\nprint(pencil_cost)\n```", "solution": "```python\npencil_cost = 124 / 3\njumbo_eraser_cost = 182 / 5\nprint(pencil_cost)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "41.333333333333336", "model_answers": [41.333333333333336], "answer": 29.0}, {"response": "**Solution**\n```python\na = 4\nb = 12\nm = 1\n\nprint(a + b + m)\n```", "solution": "```python\na = 4\nb = 12\nm = 1\n\nprint(a + b + m)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "17", "model_answers": [17.0], "answer": 13.0}, {"response": "**Solution**\n```python\nfrom sympy import integrate, symbols\n\nx = symbols('x')\nf = 2*x**2 + 8*x + 4\narea = integrate(f**2, x)\nprint(area)\n```", "solution": "```python\nfrom sympy import integrate, symbols\n\nx = symbols('x')\nf = 2*x**2 + 8*x + 4\narea = integrate(f**2, x)\nprint(area)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4*x**5/5 + 8*x**4 + 80*x**3/3 + 32*x**2 + 16*x", "model_answers": [4.0, 5.0, 5.0, 8.0, 4.0, 80.0, 3.0, 3.0, 32.0, 2.0, 16.0], "answer": 22.0}, {"response": "**Solution**\n```python\np = 28 / 7\np_49 = p * 49\nprint(p_49)\n```", "solution": "```python\np = 28 / 7\np_49 = p * 49\nprint(p_49)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "196.0", "model_answers": [196.0], "answer": 4.0}, {"response": "**Solution**\n```python\nimport math\n\ndef square(x):\n    return x * x\n\ndef is_in_circle(x):\n    return square(x - 4) <= 9\n\ndef length_of_segment(n):\n    length = 0\n    for i in range(n):\n        if is_in_circle(i):\n            length += 1\n    return length\n\nprint(length_of_segment(100))\n```", "solution": "```python\nimport math\n\ndef square(x):\n    return x * x\n\ndef is_in_circle(x):\n    return square(x - 4) <= 9\n\ndef length_of_segment(n):\n    length = 0\n    for i in range(n):\n        if is_in_circle(i):\n            length += 1\n    return length\n\nprint(length_of_segment(100))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7", "model_answers": [7.0], "answer": 6.0}, {"response": "**Solution**\n```python\nn = 3\nprint(n)\n```", "solution": "```python\nn = 3\nprint(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": 2.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\nfrom sympy.abc import a\n\nsol = sqrt(4 + sqrt(16 + 16 * a)) + sqrt(1 + sqrt(1 + a))\nsol.expand()\nsol.simplify()\nsol.subs(a, 0)\nprint(sol.subs(a, 0))\n```", "solution": "```python\nfrom sympy import sqrt\nfrom sympy.abc import a\n\nsol = sqrt(4 + sqrt(16 + 16 * a)) + sqrt(1 + sqrt(1 + a))\nsol.expand()\nsol.simplify()\nsol.subs(a, 0)\nprint(sol.subs(a, 0))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3*sqrt(2)", "model_answers": [3.0, 2.0], "answer": 8.0}, {"response": "**Solution**\n```python\nimport sympy\nx1, y1, x2, y2, x3, y3, x4, y4 = sympy.symbols('x1, y1, x2, y2, x3, y3, x4, y4')\n\nmidpoint1 = ((x1 + x2) / 2, (y1 + y2) / 2)\nmidpoint2 = ((x3 + x4) / 2, (y3 + y4) / 2)\n\nslope1 = (y2 - y1) / (x2 - x1)\nslope2 = (y4 - y3) / (x4 - x3)\n\nprint(slope1 - slope2)\n```", "solution": "```python\nimport sympy\nx1, y1, x2, y2, x3, y3, x4, y4 = sympy.symbols('x1, y1, x2, y2, x3, y3, x4, y4')\n\nmidpoint1 = ((x1 + x2) / 2, (y1 + y2) / 2)\nmidpoint2 = ((x3 + x4) / 2, (y3 + y4) / 2)\n\nslope1 = (y2 - y1) / (x2 - x1)\nslope2 = (y4 - y3) / (x4 - x3)\n\nprint(slope1 - slope2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-(-y3 + y4)/(-x3 + x4) + (-y1 + y2)/(-x1 + x2)", "model_answers": [3.0, 4.0, 3.0, 4.0, 1.0, 2.0, 1.0, 2.0], "answer": 1.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\nexpr = (x**2 - 5*x + 7) - (x - 3)*(x - 2)\nprint(expr.expand())\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\nexpr = (x**2 - 5*x + 7) - (x - 3)*(x - 2)\nprint(expr.expand())\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nimport sympy as sym\nm = sym.Symbol('m')\nn = sym.Symbol('n')\nx = sym.Symbol('x')\neq = x**2 - m*x + n\nk, t = sym.solve(eq, [x])\nprint(m**n + n**m + k**t + t**k)\n```", "solution": "```python\nimport sympy as sym\nm = sym.Symbol('m')\nn = sym.Symbol('n')\nx = sym.Symbol('x')\neq = x**2 - m*x + n\nk, t = sym.solve(eq, [x])\nprint(m**n + n**m + k**t + t**k)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "m**n + n**m + (m/2 - sqrt(m**2 - 4*n)/2)**(m/2 + sqrt(m**2 - 4*n)/2) + (m/2 + sqrt(m**2 - 4*n)/2)**(m/2 - sqrt(m**2 - 4*n)/2)", "model_answers": [2.0, 2.0, 4.0, 2.0, 2.0, 2.0, 4.0, 2.0, 2.0, 2.0, 4.0, 2.0, 2.0, 2.0, 4.0, 2.0], "answer": 20.0}, {"response": "**Solution**\n```python\nage_difference = 30 - 20\nage_son = 20 + 5 * age_difference\nprint(age_son)\n```", "solution": "```python\nage_difference = 30 - 20\nage_son = 20 + 5 * age_difference\nprint(age_son)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "70", "model_answers": [70.0], "answer": 6.0}, {"response": "**Solution**\n```python\nsum_of_multiples = 0\nfor i in range(100, 201):\n    if i % 3 == 0:\n        sum_of_multiples += i\nprint(sum_of_multiples)\n```", "solution": "```python\nsum_of_multiples = 0\nfor i in range(100, 201):\n    if i % 3 == 0:\n        sum_of_multiples += i\nprint(sum_of_multiples)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4950", "model_answers": [4950.0], "answer": 4950.0}, {"response": "**Solution**\n```python\ninterest_rate = (1225 - 1000) / 1000 * 100\nprint(round(interest_rate))\n```", "solution": "```python\ninterest_rate = (1225 - 1000) / 1000 * 100\nprint(round(interest_rate))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "22", "model_answers": [22.0], "answer": 7.0}, {"response": "**Solution**\n```python\ndef f(x):\n    if x == 1:\n        return 2\n    elif x == 2:\n        return 6\n    elif x == 3:\n        return 5\n\ndef f_inv(y):\n    if y == 2:\n        return 1\n    elif y == 6:\n        return 2\n    elif y == 5:\n        return 3\n\nprint(f_inv(f_inv(6)))\n```", "solution": "```python\ndef f(x):\n    if x == 1:\n        return 2\n    elif x == 2:\n        return 6\n    elif x == 3:\n        return 5\n\ndef f_inv(y):\n    if y == 2:\n        return 1\n    elif y == 6:\n        return 2\n    elif y == 5:\n        return 3\n\nprint(f_inv(f_inv(6)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nprint(91**2)\n```", "solution": "```python\nprint(91**2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "8281", "model_answers": [8281.0], "answer": 8281.0}, {"response": "**Solution**\n```python\ng = 3\nc = 4\np = 12\nq = 9\nexpression = g**4 + 12*g**2 + 9\nprint(expression)\n```", "solution": "```python\ng = 3\nc = 4\np = 12\nq = 9\nexpression = g**4 + 12*g**2 + 9\nprint(expression)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "198", "model_answers": [198.0], "answer": -27.0}, {"response": "**Solution**\n```python\ndef get_degree(poly):\n    \"\"\"\n    Return the degree of the polynomial.\n    \"\"\"\n    return len(poly) - 1\n\ndef get_coefficient(poly, degree):\n    \"\"\"\n    Return the coefficient of the polynomial.\n    \"\"\"\n    return poly[degree]\n\ndef get_remainder(poly):\n    \"\"\"\n    Return the remainder of the polynomial.\n    \"\"\"\n    return poly[0]\n\ndef solve_poly(poly):\n    \"\"\"\n    Solve the polynomial equation.\n    \"\"\"\n    degree = get_degree(poly)\n    remainder = get_remainder(poly)\n    coefficient = get_coefficient(poly, degree)\n    return remainder / coefficient\n\npoly = [3, 1, -25, 38, -17]\nprint(solve_poly(poly))\n```", "solution": "```python\ndef get_degree(poly):\n    \"\"\"\n    Return the degree of the polynomial.\n    \"\"\"\n    return len(poly) - 1\n\ndef get_coefficient(poly, degree):\n    \"\"\"\n    Return the coefficient of the polynomial.\n    \"\"\"\n    return poly[degree]\n\ndef get_remainder(poly):\n    \"\"\"\n    Return the remainder of the polynomial.\n    \"\"\"\n    return poly[0]\n\ndef solve_poly(poly):\n    \"\"\"\n    Solve the polynomial equation.\n    \"\"\"\n    degree = get_degree(poly)\n    remainder = get_remainder(poly)\n    coefficient = get_coefficient(poly, degree)\n    return remainder / coefficient\n\npoly = [3, 1, -25, 38, -17]\nprint(solve_poly(poly))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-0.17647058823529413", "model_answers": [-0.17647058823529413], "answer": 3.0}, {"response": "**Solution**\n```python\nt = 77 / 43\nprint(t)\n```", "solution": "```python\nt = 77 / 43\nprint(t)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.7906976744186047", "model_answers": [1.7906976744186047], "answer": 3.5}, {"response": "**Solution**\n```python\nfrom sympy import expand, factor\n\na = 24*6 + 6*3 + 4*3 + 4\nb = 6*3 + 3*3 + 3*4\n\nprint(a)\nprint(b)\nprint(a*b)\nprint(expand(a*b))\nprint(factor(expand(a*b)))\n```", "solution": "```python\nfrom sympy import expand, factor\n\na = 24*6 + 6*3 + 4*3 + 4\nb = 6*3 + 3*3 + 3*4\n\nprint(a)\nprint(b)\nprint(a*b)\nprint(expand(a*b))\nprint(factor(expand(a*b)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "178\n39\n6942\n6942\n6942", "model_answers": [178.0, 39.0, 6942.0, 6942.0, 6942.0], "answer": -15.0}, {"response": "**Solution**\n```python\n# Write a function that returns True if the equation is satisfied\ndef satisfies_equation(a, b, c):\n    return a**2*b + b**2*c + c**2*a - a*b**2 - b*c**2 - c*a**2 == 0\n\n# Use the function to count the number of triples that satisfy the equation\n# Hint: there are 6 possible values for each of a, b, and c\ncount = 0\nfor a in range(0, 6):\n    for b in range(0, 6):\n        for c in range(0, 6):\n            if satisfies_equation(a, b, c):\n                count += 1\nprint(count)\n```", "solution": "```python\n# Write a function that returns True if the equation is satisfied\ndef satisfies_equation(a, b, c):\n    return a**2*b + b**2*c + c**2*a - a*b**2 - b*c**2 - c*a**2 == 0\n\n# Use the function to count the number of triples that satisfy the equation\n# Hint: there are 6 possible values for each of a, b, and c\ncount = 0\nfor a in range(0, 6):\n    for b in range(0, 6):\n        for c in range(0, 6):\n            if satisfies_equation(a, b, c):\n                count += 1\nprint(count)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "96", "model_answers": [96.0], "answer": 96.0}, {"response": "**Solution**\n```python\nx = -7\nprint(x)\n```", "solution": "```python\nx = -7\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-7", "model_answers": [-7.0], "answer": -4.0}, {"response": "**Solution**\n```python\nx = 3 + 5\nprint(x)\n```", "solution": "```python\nx = 3 + 5\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 11.0}, {"response": "**Solution**\n```python\n# Given that the line of symmetry is at x=1\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n# The equation of the parabola is y = ax^2 + bx + c\n# The given equation is y = 2x^2 - 4x + 3\n\n# Finding the coefficients\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at", "solution": "```python\n# Given that the line of symmetry is at x=1\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n# The equation of the parabola is y = ax^2 + bx + c\n# The given equation is y = 2x^2 - 4x + 3\n\n# Finding the coefficients\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at", "function": [], "is_success": true, "is_correct": false, "exec_output": "", "model_answers": [], "answer": 2.2}, {"response": "**Solution**\n```python\nx = 2\nprint(x)\n```", "solution": "```python\nx = 2\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 1.0}, {"response": "**Solution**\n```python\ndef get_next_term(current_term, add_val, mult_val):\n    return add_val + current_term * mult_val\n\nterm = 0\nadd_val = 1\nmult_val = 1\nwhile term <= 125:\n    term = get_next_term(term, add_val, mult_val)\n\nprint(term)\n```", "solution": "```python\ndef get_next_term(current_term, add_val, mult_val):\n    return add_val + current_term * mult_val\n\nterm = 0\nadd_val = 1\nmult_val = 1\nwhile term <= 125:\n    term = get_next_term(term, add_val, mult_val)\n\nprint(term)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "126", "model_answers": [126.0], "answer": 129.0}, {"response": "**Solution**\n```python\ndef altitude(t):\n    return t * 100 + 100\n\ndef seconds(h):\n    return h / 100\n\nprint(seconds(12000))\n```", "solution": "```python\ndef altitude(t):\n    return t * 100 + 100\n\ndef seconds(h):\n    return h / 100\n\nprint(seconds(12000))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "120.0", "model_answers": [120.0], "answer": 15.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, Poly, degree\nx = Symbol('x')\np = Poly(5*x**6 - x**5 + 3*x**4 + x**3 - 25*x**2 + 38*x - 17)\nf = p.args[1]\nprint(degree(f))\n```", "solution": "```python\nfrom sympy import Symbol, Poly, degree\nx = Symbol('x')\np = Poly(5*x**6 - x**5 + 3*x**4 + x**3 - 25*x**2 + 38*x - 17)\nf = p.args[1]\nprint(degree(f))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1", "model_answers": [1.0], "answer": 4.0}, {"response": "**Solution**\n```python\n# Find b\nb = -6\n\n# Find c\nc = 66\n\n# Find b+c\nb_plus_c = b + c\nprint(b_plus_c)\n```", "solution": "```python\n# Find b\nb = -6\n\n# Find c\nc = 66\n\n# Find b+c\nb_plus_c = b + c\nprint(b_plus_c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "60", "model_answers": [60.0], "answer": 54.0}, {"response": "**Solution**\n```python\nt = (-16 * 60 * 60 + 60 * 60 - 54) / (-16 * 60 + 60)\nprint(t)\n```", "solution": "```python\nt = (-16 * 60 * 60 + 60 * 60 - 54) / (-16 * 60 + 60)\nprint(t)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "60.06", "model_answers": [60.06], "answer": 0.75}, {"response": "**Solution**\n```python\ndays_to_paint_12_houses = 3\nhouses_per_day = 4\nworkers_needed = houses_per_day / days_to_paint_12_houses\nprint(workers_needed)\n```", "solution": "```python\ndays_to_paint_12_houses = 3\nhouses_per_day = 4\nworkers_needed = houses_per_day / days_to_paint_12_houses\nprint(workers_needed)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.3333333333333333", "model_answers": [1.3333333333333333], "answer": 30.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\nx1, y1 = 9, 5\nx2, y2 = -6, 3\nr1, r2 = 6.25, 49\n\ndistance = sqrt((x2 - x1)**2 + (y2 - y1)**2)\nprint(distance)\n```", "solution": "```python\nfrom sympy import sqrt\nx1, y1 = 9, 5\nx2, y2 = -6, 3\nr1, r2 = 6.25, 49\n\ndistance = sqrt((x2 - x1)**2 + (y2 - y1)**2)\nprint(distance)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "sqrt(229)", "model_answers": [229.0], "answer": 7.5}, {"response": "**Solution**\n```python\nx = 1\nprint(x)\n```", "solution": "```python\nx = 1\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1", "model_answers": [1.0], "answer": 2.0}, {"response": "**Solution**\n```python\n# compute the midpoint\nx_mid = (5 + (-9)) / 2\ny_mid = (4 + 8) / 2\n# compute the sum of the coordinates\nsum_mid = x_mid + y_mid\nprint(sum_mid)\n```", "solution": "```python\n# compute the midpoint\nx_mid = (5 + (-9)) / 2\ny_mid = (4 + 8) / 2\n# compute the sum of the coordinates\nsum_mid = x_mid + y_mid\nprint(sum_mid)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4.0", "model_answers": [4.0], "answer": 4.0}, {"response": "**Solution**\n```python\nt = 2\nprint((t) * (t + 2) - (t + 1) * (t + 1))\n```", "solution": "```python\nt = 2\nprint((t) * (t + 2) - (t + 1) * (t + 1))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-1", "model_answers": [-1.0], "answer": 4.0}, {"response": "**Solution**\n```python\nx = (1 + 2) / 2\ny = (1 - 2) / 2\nprint(8 * x - 7 * y)\n```", "solution": "```python\nx = (1 + 2) / 2\ny = (1 - 2) / 2\nprint(8 * x - 7 * y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15.5", "model_answers": [15.5], "answer": 13.0}, {"response": "**Solution**\n```python\nprint(int(8.8)+int(-8.8))\n```", "solution": "```python\nprint(int(8.8)+int(-8.8))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 1.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\n\na = 1\nb = 1\n\nwhile True:\n    if sqrt(a) % b == 0:\n        break\n    a += 1\n\nprint(a + b)\n```", "solution": "```python\nfrom math import sqrt\n\na = 1\nb = 1\n\nwhile True:\n    if sqrt(a) % b == 0:\n        break\n    a += 1\n\nprint(a + b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 12.0}, {"response": "**Solution**\n```python\ndef f(x):\n    if x**2 - 7*x + 10 == 0:\n        return None\n    else:\n        return (x-2)/(x**2-7*x+10)\n\nfor x in range(-5, 5):\n    if f(x) is None:\n        print(x)\n```", "solution": "```python\ndef f(x):\n    if x**2 - 7*x + 10 == 0:\n        return None\n    else:\n        return (x-2)/(x**2-7*x+10)\n\nfor x in range(-5, 5):\n    if f(x) is None:\n        print(x)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2", "model_answers": [2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nimport math\n\ndef solve(x):\n    return x**6 - 2 * x**5 + 2 * x**3 - 2 * x + 1 - 292\n\ndef find_root(solve):\n    return math.floor(math.sqrt(292))\n\nx = find_root(solve)\nprint(x)\n```", "solution": "```python\nimport math\n\ndef solve(x):\n    return x**6 - 2 * x**5 + 2 * x**3 - 2 * x + 1 - 292\n\ndef find_root(solve):\n    return math.floor(math.sqrt(292))\n\nx = find_root(solve)\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "17", "model_answers": [17.0], "answer": 3.0}, {"response": "**Solution**\n```python\nimport math\n\nfor m in range(2, 20):\n    for n in range(1, m):\n        if math.gcd(m, n) == 1 and math.gcd(m - n, n) == 1:\n            print(n)\n```", "solution": "```python\nimport math\n\nfor m in range(2, 20):\n    for n in range(1, m):\n        if math.gcd(m, n) == 1 and math.gcd(m - n, n) == 1:\n            print(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1\n1\n2\n1\n3\n1\n2\n3\n4\n1\n5\n1\n2\n3\n4\n5\n6\n1\n3\n5\n7\n1\n2\n4\n5\n7\n8\n1\n3\n7\n9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1\n5\n7\n11\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1\n3\n5\n9\n11\n13\n1\n2\n4\n7\n8\n11\n13\n14\n1\n3\n5\n7\n9\n11\n13\n15\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1\n5\n7\n11\n13\n17\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18", "model_answers": [1.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 3.0, 4.0, 1.0, 5.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 1.0, 3.0, 5.0, 7.0, 1.0, 2.0, 4.0, 5.0, 7.0, 8.0, 1.0, 3.0, 7.0, 9.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 1.0, 5.0, 7.0, 11.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 1.0, 3.0, 5.0, 9.0, 11.0, 13.0, 1.0, 2.0, 4.0, 7.0, 8.0, 11.0, 13.0, 14.0, 1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 1.0, 5.0, 7.0, 11.0, 13.0, 17.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0], "answer": 18.0}, {"response": "**Solution**\n```python\ngames_won = 2/9\ngames_lost = 15\ntotal_games = games_won + games_lost\nprint(total_games)\n```", "solution": "```python\ngames_won = 2/9\ngames_lost = 15\ntotal_games = games_won + games_lost\nprint(total_games)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15.222222222222221", "model_answers": [15.222222222222221], "answer": 27.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\ny = x**2 + 2*x - 6\ndistance = sympy.sqrt((4 - x)**2 + (5 - y)**2)\nprint(distance)\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\ny = x**2 + 2*x - 6\ndistance = sympy.sqrt((4 - x)**2 + (5 - y)**2)\nprint(distance)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "sqrt((4 - x)**2 + (-x**2 - 2*x + 11)**2)", "model_answers": [4.0, 2.0, 2.0, 2.0, 11.0, 2.0], "answer": 13.0}, {"response": "**Solution**\n```python\na = 6\nb = 10\nc = 14\nd = 18\nprint(a + 99 * (b - a))\n```", "solution": "```python\na = 6\nb = 10\nc = 14\nd = 18\nprint(a + 99 * (b - a))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "402", "model_answers": [402.0], "answer": 402.0}, {"response": "**Solution**\n```python\na = 7\nb = -a\nprint(b)\n```", "solution": "```python\na = 7\nb = -a\nprint(b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-7", "model_answers": [-7.0], "answer": 12.0}, {"response": "**Solution**\n```python\ndenali_pay = 16\nnate_pay = 12\nx = (denali_pay / nate_pay) * (4 * nate_pay) / denali_pay\nprint(x)\n```", "solution": "```python\ndenali_pay = 16\nnate_pay = 12\nx = (denali_pay / nate_pay) * (4 * nate_pay) / denali_pay\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4.0", "model_answers": [4.0], "answer": 5.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt, simplify\n\ndenominator = sqrt(5) + sqrt(2) - sqrt(5) + sqrt(2)\nresult = simplify(denominator)\n\nprint(result)\n```", "solution": "```python\nfrom sympy import sqrt, simplify\n\ndenominator = sqrt(5) + sqrt(2) - sqrt(5) + sqrt(2)\nresult = simplify(denominator)\n\nprint(result)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2*sqrt(2)", "model_answers": [2.0, 2.0], "answer": 22.0}, {"response": "**Solution**\n```python\ndef max_value(x):\n    return -x**2 - 8*x + 12\n\nprint(max_value(0))\n```", "solution": "```python\ndef max_value(x):\n    return -x**2 - 8*x + 12\n\nprint(max_value(0))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "12", "model_answers": [12.0], "answer": 28.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\ndef ben_height(t):\n    return 2 * t ** 2 - 5 * t + 29\n\nt = np.linspace(0, 100, 10000)\nmin_height = np.min(ben_height(t))\nprint(min_height)\n```", "solution": "```python\nimport numpy as np\n\ndef ben_height(t):\n    return 2 * t ** 2 - 5 * t + 29\n\nt = np.linspace(0, 100, 10000)\nmin_height = np.min(ben_height(t))\nprint(min_height)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "25.87500003125625", "model_answers": [25.87500003125625], "answer": 26.0}, {"response": "**Solution**\n```python\nfirst_practice = 48 / 2\nprint(first_practice)\n```", "solution": "```python\nfirst_practice = 48 / 2\nprint(first_practice)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "24.0", "model_answers": [24.0], "answer": 3.0}, {"response": "**Solution**\n```python\nb = (12 - 3*4) / 2\nprint(b)\n```", "solution": "```python\nb = (12 - 3*4) / 2\nprint(b)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "0.0", "model_answers": [0.0], "answer": 0.0}, {"response": "**Solution**\n```python\nbricks_per_hour = 30\nhours_worked = 3\ntotal_bricks = 600\nbricks_placed_by_alan = total_bricks / 3\nbricks_placed_by_david = bricks_per_hour * hours_worked\nprint(bricks_placed_by_david)\n```", "solution": "```python\nbricks_per_hour = 30\nhours_worked = 3\ntotal_bricks = 600\nbricks_placed_by_alan = total_bricks / 3\nbricks_placed_by_david = bricks_per_hour * hours_worked\nprint(bricks_placed_by_david)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "90", "model_answers": [90.0], "answer": 150.0}, {"response": "**Solution**\n```python\nimport numpy as np\nx1 = -1\ny1 = 7\nx2 = 7\ny2 = -1\nm = (y2-y1)/(x2-x1)\nb = y1 - m*x1\nprint(m+b)\n```", "solution": "```python\nimport numpy as np\nx1 = -1\ny1 = 7\nx2 = 7\ny2 = -1\nm = (y2-y1)/(x2-x1)\nb = y1 - m*x1\nprint(m+b)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "5.0", "model_answers": [5.0], "answer": 5.0}, {"response": "**Solution**\n```python\ndad_age = 53 - 31\nprint(dad_age)\n```", "solution": "```python\ndad_age = 53 - 31\nprint(dad_age)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "22", "model_answers": [22.0], "answer": 42.0}, {"response": "**Solution**\n```python\nx = 7 + 9\ny = 7 - 9\nprint(x * y)\n```", "solution": "```python\nx = 7 + 9\ny = 7 - 9\nprint(x * y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-32", "model_answers": [-32.0], "answer": -8.0}, {"response": "**Solution**\n```python\nx = 3**2\nprint(x)\n```", "solution": "```python\nx = 3**2\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "9", "model_answers": [9.0], "answer": 3.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\ndef f(x):\n    return np.floor((-5/8)**x)\n\ndef distinct_values(f):\n    return len(set(f(np.arange(0, 1000))))\n\nprint(distinct_values(f))\n```", "solution": "```python\nimport numpy as np\n\ndef f(x):\n    return np.floor((-5/8)**x)\n\ndef distinct_values(f):\n    return len(set(f(np.arange(0, 1000))))\n\nprint(distinct_values(f))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3", "model_answers": [3.0], "answer": 3.0}, {"response": "**Solution**\n```python\nfrom sympy import solve, symbols\nx, y, A, B, C = symbols('x y A B C')\neq = x**2 + y**2 + A*x + B*y + C\nsol = solve(eq, [A, B, C])\nprint(sol)\n```", "solution": "```python\nfrom sympy import solve, symbols\nx, y, A, B, C = symbols('x y A B C')\neq = x**2 + y**2 + A*x + B*y + C\nsol = solve(eq, [A, B, C])\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[((-B*y - C - x**2 - y**2)/x, B, C)]", "model_answers": [2.0, 2.0], "answer": -120.0}, {"response": "**Solution**\n```python\nx = (3*2**2 + 5) / 2\nprint(x)\n```", "solution": "```python\nx = (3*2**2 + 5) / 2\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8.5", "model_answers": [8.5], "answer": 3.0}, {"response": "**Solution**\n```python\n# brute force search\nfor b in range(1, 5):\n    if (4 ** b) + (2 ** 3) == 12:\n        print(b)\n        break\n```", "solution": "```python\n# brute force search\nfor b in range(1, 5):\n    if (4 ** b) + (2 ** 3) == 12:\n        print(b)\n        break\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\n\nx = sqrt(45)\ny = sqrt(101)\n\nz = int((x + y) / 2)\n\nprint(z)\n```", "solution": "```python\nfrom math import sqrt\n\nx = sqrt(45)\ny = sqrt(101)\n\nz = int((x + y) / 2)\n\nprint(z)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": -4.0}, {"response": "**Solution**\n```python\nprint(123123 / 1001)\n```", "solution": "```python\nprint(123123 / 1001)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "123.0", "model_answers": [123.0], "answer": 123.0}, {"response": "**Solution**\n```python\na, b, c = 4, 5, 6\nresult = a * (b - c)\nprint(result)\n```", "solution": "```python\na, b, c = 4, 5, 6\nresult = a * (b - c)\nprint(result)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-4", "model_answers": [-4.0], "answer": -10.0}, {"response": "**Solution**\n```python\nimport sympy as sp\nx = sp.symbols('x')\nexpr = 3*x**2 - 2*(x**2 + 4)\nx_sol = sp.solve(expr - 42, x)\nprint(x_sol)\n```", "solution": "```python\nimport sympy as sp\nx = sp.symbols('x')\nexpr = 3*x**2 - 2*(x**2 + 4)\nx_sol = sp.solve(expr - 42, x)\nprint(x_sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[-5*sqrt(2), 5*sqrt(2)]", "model_answers": [-5.0, 2.0, 5.0, 2.0], "answer": 2500.0}, {"response": "**Solution**\n```python\nf = lambda x: x ** 3 + 2 * x + 1\ng = lambda x: x - 1\nprint(f(g(1)))\n```", "solution": "```python\nf = lambda x: x ** 3 + 2 * x + 1\ng = lambda x: x - 1\nprint(f(g(1)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nbacteria_at_midnight = 600 * 2**(12/4)\nprint(bacteria_at_midnight)\n```", "solution": "```python\nbacteria_at_midnight = 600 * 2**(12/4)\nprint(bacteria_at_midnight)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4800.0", "model_answers": [4800.0], "answer": 4800.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, Eq, solve\n\nalpha = Symbol('alpha')\nx = Symbol('x')\nf = (x**2 + 5*x + alpha) / (x**2 + 7*x - 44)\n\nsol = solve(Eq(f, x/x), alpha)\n\nprint(sum(sol))\n```", "solution": "```python\nfrom sympy import Symbol, Eq, solve\n\nalpha = Symbol('alpha')\nx = Symbol('x')\nf = (x**2 + 5*x + alpha) / (x**2 + 7*x - 44)\n\nsol = solve(Eq(f, x/x), alpha)\n\nprint(sum(sol))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2*x - 44", "model_answers": [2.0, 44.0], "answer": -102.0}, {"response": "**Solution**\n```python\nx = (166 - 14) // 10\ny = (166 - 10 * x - 14) // 15\nprint(x + y)\n```", "solution": "```python\nx = (166 - 14) // 10\ny = (166 - 10 * x - 14) // 15\nprint(x + y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15", "model_answers": [15.0], "answer": 6.0}, {"response": "**Solution**\n```python\nprint(4 * 3 * 2)\n```", "solution": "```python\nprint(4 * 3 * 2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "24", "model_answers": [24.0], "answer": 10.0}, {"response": "**Solution**\n```python\nimport math\n\ndef circle_tangent_point(radius, center_x, center_y):\n    point_x = center_x + radius * math.cos(math.pi / 4)\n    point_y = center_y + radius * math.sin(math.pi / 4)\n    return point_x, point_y\n\n\ndef circle_tangent(center_x1, center_y1, center_x2, center_y2):\n    dx = center_x2 - center_x1\n    dy = center_y2 - center_y1\n    distance = math.sqrt(dx**2 + dy**2)\n    if distance!= 0:\n        unit_vector_x = dx / distance\n        unit_vector_y = dy / distance\n        point_x, point_y = circle_tangent_point(1, center_x1, center_y1)\n        dx = point_x - center_x2\n        dy = point_y - center_y2\n        if dx**2 + dy**2 == 1:\n            return True\n    return False\n\n\ndef count_tangent_circles(center_x1, center_y1, center_x2, center_y2):\n    count = 0\n    for x in range(-5, 5):\n        for y in range(-5, 5):\n            if circle_tangent(center_x1, center_y1, center_x2, center_y2):\n                count += 1\n    return count\n\n\ndef main():\n    count = count_tangent_circles(4, 0, -4, 0)\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n```", "solution": "```python\nimport math\n\ndef circle_tangent_point(radius, center_x, center_y):\n    point_x = center_x + radius * math.cos(math.pi / 4)\n    point_y = center_y + radius * math.sin(math.pi / 4)\n    return point_x, point_y\n\n\ndef circle_tangent(center_x1, center_y1, center_x2, center_y2):\n    dx = center_x2 - center_x1\n    dy = center_y2 - center_y1\n    distance = math.sqrt(dx**2 + dy**2)\n    if distance!= 0:\n        unit_vector_x = dx / distance\n        unit_vector_y = dy / distance\n        point_x, point_y = circle_tangent_point(1, center_x1, center_y1)\n        dx = point_x - center_x2\n        dy = point_y - center_y2\n        if dx**2 + dy**2 == 1:\n            return True\n    return False\n\n\ndef count_tangent_circles(center_x1, center_y1, center_x2, center_y2):\n    count = 0\n    for x in range(-5, 5):\n        for y in range(-5, 5):\n            if circle_tangent(center_x1, center_y1, center_x2, center_y2):\n                count += 1\n    return count\n\n\ndef main():\n    count = count_tangent_circles(4, 0, -4, 0)\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 4.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, expand\nt = Symbol('t')\na, b = Symbol('a'), Symbol('b')\nf = 3*t**2+5*t+a\ng = 4*t**2+b*t-2\nprint(expand(f*g))\nprint(expand(a+b))\n```", "solution": "```python\nfrom sympy import Symbol, expand\nt = Symbol('t')\na, b = Symbol('a'), Symbol('b')\nf = 3*t**2+5*t+a\ng = 4*t**2+b*t-2\nprint(expand(f*g))\nprint(expand(a+b))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "a*b*t + 4*a*t**2 - 2*a + 3*b*t**3 + 5*b*t**2 + 12*t**4 + 20*t**3 - 6*t**2 - 10*t\na + b", "model_answers": [4.0, 2.0, 2.0, 3.0, 3.0, 5.0, 2.0, 12.0, 4.0, 20.0, 3.0, 6.0, 2.0, 10.0], "answer": -1.0}, {"response": "**Solution**\n```python\na = 1\nb = 1\nc = 2\nprint(a+b+c)\n```", "solution": "```python\na = 1\nb = 1\nc = 2\nprint(a+b+c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4", "model_answers": [4.0], "answer": 23.0}, {"response": "**Solution**\n```python\ndef consecutive_even_numbers(n):\n    return [2*i for i in range(1, n+1)]\n\nnumbers = consecutive_even_numbers(3)\nproduct = numbers[0] * numbers[1] * numbers[2]\nprint(product/8)\n```", "solution": "```python\ndef consecutive_even_numbers(n):\n    return [2*i for i in range(1, n+1)]\n\nnumbers = consecutive_even_numbers(3)\nproduct = numbers[0] * numbers[1] * numbers[2]\nprint(product/8)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6.0", "model_answers": [6.0], "answer": 32736.0}, {"response": "**Solution**\n```python\nfor i in range(10, 100):\n    if i % 10 == 5 and i // 10 == 2:\n        print(i)\n        break\n```", "solution": "```python\nfor i in range(10, 100):\n    if i % 10 == 5 and i // 10 == 2:\n        print(i)\n        break\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "25", "model_answers": [25.0], "answer": 36.0}, {"response": "**Solution**\n```python\ng = lambda x: 3*x - 4\nprint(g(0))\n```", "solution": "```python\ng = lambda x: 3*x - 4\nprint(g(0))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-4", "model_answers": [-4.0], "answer": -4.0}, {"response": "**Solution**\n```python\nfrom math import ceil\n\nn = 27\nmedian = ceil(n/2)\nprint(median)\n```", "solution": "```python\nfrom math import ceil\n\nn = 27\nmedian = ceil(n/2)\nprint(median)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "14", "model_answers": [14.0], "answer": 81.0}, {"response": "**Solution**\n```python\n# number of lattice points in a square\nn = 5 + 1\nprint(n**2)\n```", "solution": "```python\n# number of lattice points in a square\nn = 5 + 1\nprint(n**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "36", "model_answers": [36.0], "answer": 81.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return x ** 2\n\ndef g(x):\n    return f(f(x))\n\nprint(g(9))\n```", "solution": "```python\ndef f(x):\n    return x ** 2\n\ndef g(x):\n    return f(f(x))\n\nprint(g(9))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6561", "model_answers": [6561.0], "answer": 0.0}, {"response": "**Solution**\n```python\nprint(pow(4 + 5, 2))\n```", "solution": "```python\nprint(pow(4 + 5, 2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "81", "model_answers": [81.0], "answer": 81.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.symbols('x')\nsolution = sympy.solve(sympy.sqrt(3*x+6)-(x+2), x)\nprint(solution)\n```", "solution": "```python\nimport sympy\nx = sympy.symbols('x')\nsolution = sympy.solve(sympy.sqrt(3*x+6)-(x+2), x)\nprint(solution)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "[-2, 1]", "model_answers": [-2.0, 1.0], "answer": -2.0}, {"response": "**Solution**\n```python\nprint(4*3**2/9*2**2)\n```", "solution": "```python\nprint(4*3**2/9*2**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "16.0", "model_answers": [16.0], "answer": 1.0}, {"response": "**Solution**\n```python\ndef p(x):\n    return x + 3\n\ndef q(x):\n    return x**2 + 7\n\n# p(2) = 3, so x = 2\n\n# p(q(x)) = 4x + 7\n# p(q(-1)) = 4(-1) + 7 = 7\n\n# q(-1) = -1\nprint(q(-1))\n```", "solution": "```python\ndef p(x):\n    return x + 3\n\ndef q(x):\n    return x**2 + 7\n\n# p(2) = 3, so x = 2\n\n# p(q(x)) = 4x + 7\n# p(q(-1)) = 4(-1) + 7 = 7\n\n# q(-1) = -1\nprint(q(-1))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 2.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\n# Write a program to find the time it takes for the car to stop\n\n# 5 feet less in each second\n# Initially the car travels 45 feet\n# The car stops when the distance traveled is 0\n\ndef find_time_to_stop(distance):\n    time = 0\n    while distance > 0:\n        distance -= 5\n        time += 1\n    return time\n\nprint(find_time_to_stop(45))\n```", "solution": "```python\nimport numpy as np\n\n# Write a program to find the time it takes for the car to stop\n\n# 5 feet less in each second\n# Initially the car travels 45 feet\n# The car stops when the distance traveled is 0\n\ndef find_time_to_stop(distance):\n    time = 0\n    while distance > 0:\n        distance -= 5\n        time += 1\n    return time\n\nprint(find_time_to_stop(45))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "9", "model_answers": [9.0], "answer": 225.0}, {"response": "**Solution**\n```python\nnumber_of_customers = 15 / 1500 * 2500\nprint(number_of_customers)\n```", "solution": "```python\nnumber_of_customers = 15 / 1500 * 2500\nprint(number_of_customers)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "25.0", "model_answers": [25.0], "answer": 9.0}, {"response": "**Solution**\n```python\nbase_salary = 1200\ncommission = 0.05\nsales = 25000\ntotal_earnings = base_salary + commission * sales\nprint(total_earnings)\n```", "solution": "```python\nbase_salary = 1200\ncommission = 0.05\nsales = 25000\ntotal_earnings = base_salary + commission * sales\nprint(total_earnings)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2450.0", "model_answers": [2450.0], "answer": 2450.0}, {"response": "**Solution**\n```python\nx = 8 / 3\nz = 15 / 5\nprint(x / z)\n```", "solution": "```python\nx = 8 / 3\nz = 15 / 5\nprint(x / z)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.8888888888888888", "model_answers": [0.8888888888888888], "answer": 8.0}, {"response": "**Solution**\n```python\nimport math\nprint(math.sqrt(64) - math.cbrt(64))\n```", "solution": "```python\nimport math\nprint(math.sqrt(64) - math.cbrt(64))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4.0", "model_answers": [4.0], "answer": 4.0}, {"response": "**Solution**\n```python\nAMC10 = 12342\nAMC12 = 22\nA = AMC10 + AMC12\nprint(A)\n```", "solution": "```python\nAMC10 = 12342\nAMC12 = 22\nA = AMC10 + AMC12\nprint(A)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "12364", "model_answers": [12364.0], "answer": 14.0}, {"response": "**Solution**\n```python\nx = 4.8 - 2 * round(4.8/2)\nprint(x)\n```", "solution": "```python\nx = 4.8 - 2 * round(4.8/2)\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.7999999999999998", "model_answers": [0.7999999999999998], "answer": 1.8}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\nsol = solve(192*x**2 - 16, x)\nprint(1/sol[0]**4)\n```", "solution": "```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\nsol = solve(192*x**2 - 16, x)\nprint(1/sol[0]**4)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "144", "model_answers": [144.0], "answer": 144.0}, {"response": "**Solution**\n```python\na = -2\nb = 4\nc = 1\nprint(a + b + c)\n```", "solution": "```python\na = -2\nb = 4\nc = 1\nprint(a + b + c)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3", "model_answers": [3.0], "answer": 3.0}, {"response": "**Solution**\n```python\neven_counting_numbers = range(2, 2003, 2)\nodd_counting_numbers = range(1, 2003, 2)\nprint(sum(even_counting_numbers) - sum(odd_counting_numbers))\n```", "solution": "```python\neven_counting_numbers = range(2, 2003, 2)\nodd_counting_numbers = range(1, 2003, 2)\nprint(sum(even_counting_numbers) - sum(odd_counting_numbers))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1001", "model_answers": [1001.0], "answer": 2003.0}, {"response": "**Solution**\n```python\nx = 1\nwhile x < 100:\n    if x * (x + 2) == 255:\n        print(x)\n        break\n    x += 2\n```", "solution": "```python\nx = 1\nwhile x < 100:\n    if x * (x + 2) == 255:\n        print(x)\n        break\n    x += 2\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15", "model_answers": [15.0], "answer": 17.0}, {"response": "**Solution**\n```python\nprint(115 ** 2)\n```", "solution": "```python\nprint(115 ** 2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "13225", "model_answers": [13225.0], "answer": 13225.0}, {"response": "**Solution**\n```python\na = 23 / 3\nprint(a)\n```", "solution": "```python\na = 23 / 3\nprint(a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7.666666666666667", "model_answers": [7.666666666666667], "answer": 20.0}, {"response": "**Solution**\n```python\nprint(513**2 - 487**2)\n```", "solution": "```python\nprint(513**2 - 487**2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "26000", "model_answers": [26000.0], "answer": 26000.0}, {"response": "**Solution**\n```python\nimport sympy\n\na, b, c = sympy.symbols('a b c')\n\n# Find the sum of squares\nsum_of_squares = a**2 + b**2 + c**2\n\n# Find the sum of products\nsum_of_products = a * b + b * c + c * a\n\n# Solve the system of equations\nsolution = sympy.solve([sum_of_squares - 13, sum_of_products - 6], [a, b, c])\n\n# Print the solution\nprint(solution)\n```", "solution": "```python\nimport sympy\n\na, b, c = sympy.symbols('a b c')\n\n# Find the sum of squares\nsum_of_squares = a**2 + b**2 + c**2\n\n# Find the sum of products\nsum_of_products = a * b + b * c + c * a\n\n# Solve the system of equations\nsolution = sympy.solve([sum_of_squares - 13, sum_of_products - 6], [a, b, c])\n\n# Print the solution\nprint(solution)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(-(c**3 + c*(-c/2 - sqrt(-3*c**2 - 10*c + 1)/2 - 5/2)**2 - 19*c + (2*c**2 - 13)*(-c/2 - sqrt(-3*c**2 - 10*c + 1)/2 - 5/2) + (-c/2 - sqrt(-3*c**2 - 10*c + 1)/2 - 5/2)**3)/(c**2 + 6), -c/2 - sqrt(-3*c**2 - 10*c + 1)/2 - 5/2, c), (-(c**3 + c*(-c/2 + sqrt(-3*c**2 - 10*c + 1)/2 - 5/2)**2 - 19*c + (2*c**2 - 13)*(-c/2 + sqrt(-3*c**2 - 10*c + 1)/2 - 5/2) + (-c/2 + sqrt(-3*c**2 - 10*c + 1)/2 - 5/2)**3)/(c**2 + 6), -c/2 + sqrt(-3*c**2 - 10*c + 1)/2 - 5/2, c), (-(c**3 + c*(-c/2 - sqrt(-3*c**2 + 10*c + 1)/2 + 5/2)**2 - 19*c + (2*c**2 - 13)*(-c/2 - sqrt(-3*c**2 + 10*c + 1)/2 + 5/2) + (-c/2 - sqrt(-3*c**2 + 10*c + 1)/2 + 5/2)**3)/(c**2 + 6), -c/2 - sqrt(-3*c**2 + 10*c + 1)/2 + 5/2, c), (-(c**3 + c*(-c/2 + sqrt(-3*c**2 + 10*c + 1)/2 + 5/2)**2 - 19*c + (2*c**2 - 13)*(-c/2 + sqrt(-3*c**2 + 10*c + 1)/2 + 5/2) + (-c/2 + sqrt(-3*c**2 + 10*c + 1)/2 + 5/2)**3)/(c**2 + 6), -c/2 + sqrt(-3*c**2 + 10*c + 1)/2 + 5/2, c)]", "model_answers": [3.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 2.0, 19.0, 2.0, 2.0, 13.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 3.0, 2.0, 6.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 3.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 2.0, 19.0, 2.0, 2.0, 13.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 3.0, 2.0, 6.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 3.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 2.0, 19.0, 2.0, 2.0, 13.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 3.0, 2.0, 6.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 3.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 2.0, 19.0, 2.0, 2.0, 13.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0, 3.0, 2.0, 6.0, 2.0, -3.0, 2.0, 10.0, 1.0, 2.0, 5.0, 2.0], "answer": 5.0}, {"response": "**Solution**\n```python\n# The distance from the center of the merry-go-round\n# is the same in both cases.\n\n# The number of revolutions is proportional to the distance.\n\n# The number of revolutions for the horse 64 feet from the center\n# is 27.\n\n# The number of revolutions for the horse 16 feet from the center\n# is proportional to the number of revolutions for the horse\n# 64 feet from the center.\n\n# Therefore, the number of revolutions for the horse\n# 16 feet from the center is 27 / 4.\n\nprint(27 / 4)\n```", "solution": "```python\n# The distance from the center of the merry-go-round\n# is the same in both cases.\n\n# The number of revolutions is proportional to the distance.\n\n# The number of revolutions for the horse 64 feet from the center\n# is 27.\n\n# The number of revolutions for the horse 16 feet from the center\n# is proportional to the number of revolutions for the horse\n# 64 feet from the center.\n\n# Therefore, the number of revolutions for the horse\n# 16 feet from the center is 27 / 4.\n\nprint(27 / 4)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6.75", "model_answers": [6.75], "answer": 108.0}, {"response": "**Solution**\n```python\nimport sympy\nlog = sympy.log\nsqrt = sympy.sqrt\nx = sqrt(5)\nlog_x = log(125, x)\nprint(log_x)\n```", "solution": "```python\nimport sympy\nlog = sympy.log\nsqrt = sympy.sqrt\nx = sqrt(5)\nlog_x = log(125, x)\nprint(log_x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "log(125)/log(sqrt(5))", "model_answers": [125.0, 5.0], "answer": 7.0}, {"response": "**Solution**\n```python\na = 15 - 2 * 2\nb = 3 - 2 * 5\nprint(a + b)\n```", "solution": "```python\na = 15 - 2 * 2\nb = 3 - 2 * 5\nprint(a + b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4", "model_answers": [4.0], "answer": 19.0}, {"response": "**Solution**\n```python\ntime_to_50_meters = 25 - 5\nprint(time_to_50_meters)\n```", "solution": "```python\ntime_to_50_meters = 25 - 5\nprint(time_to_50_meters)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "20", "model_answers": [20.0], "answer": 10.0}, {"response": "**Solution**\n```python\nx = 3^2 + 3^4 - 3^2\nprint(x)\n```", "solution": "```python\nx = 3^2 + 3^4 - 3^2\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5", "model_answers": [5.0], "answer": 45.0}, {"response": "**Solution**\n```python\nimport math\n\n# Points are in format (x, y)\nrobert = (4, 3)\nliz = (1, 7)\n\n# Distance between two points\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(2)]))\n\n# Distance from Robert to Liz\nprint(distance(liz, robert))\n```", "solution": "```python\nimport math\n\n# Points are in format (x, y)\nrobert = (4, 3)\nliz = (1, 7)\n\n# Distance between two points\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(2)]))\n\n# Distance from Robert to Liz\nprint(distance(liz, robert))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "5.0", "model_answers": [5.0], "answer": 5.0}, {"response": "**Solution**\n```python\nmax_degree = 3 + 2\nprint(max_degree)\n```", "solution": "```python\nmax_degree = 3 + 2\nprint(max_degree)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "5", "model_answers": [5.0], "answer": 5.0}, {"response": "**Solution**\n```python\n# 20% of 50% of 80 = 20% of 40 = 8\nprint(8)\n```", "solution": "```python\n# 20% of 50% of 80 = 20% of 40 = 8\nprint(8)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "8", "model_answers": [8.0], "answer": 8.0}, {"response": "**Solution**\n```python\n# calculate the age of Chris 4 years ago\nage_4_years_ago = (6 - 3/5)\nprint(age_4_years_ago)\n```", "solution": "```python\n# calculate the age of Chris 4 years ago\nage_4_years_ago = (6 - 3/5)\nprint(age_4_years_ago)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5.4", "model_answers": [5.4], "answer": 10.0}, {"response": "**Solution**\n```python\nimport sympy\n\nA, B, C, D, E = sympy.symbols('A B C D E')\n\nsums = [\n    sympy.Add(A, B),\n    sympy.Add(B, C),\n    sympy.Add(C, D),\n    sympy.Add(D, E),\n    sympy.Add(E, A),\n]\n\nprint(sympy.Mul(2, sums[2]))\n```", "solution": "```python\nimport sympy\n\nA, B, C, D, E = sympy.symbols('A B C D E')\n\nsums = [\n    sympy.Add(A, B),\n    sympy.Add(B, C),\n    sympy.Add(C, D),\n    sympy.Add(D, E),\n    sympy.Add(E, A),\n]\n\nprint(sympy.Mul(2, sums[2]))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2*C + 2*D", "model_answers": [2.0, 2.0], "answer": 12.0}, {"response": "**Solution**\n```python\nimport sympy as sp\na, b, c = sp.symbols(\"a b c\")\neq1 = a + b - 8\neq2 = b + c + 3\neq3 = a + c - 5\nsolve = sp.solve((eq1, eq2, eq3), (a, b, c))\nprint(solve)\nprint(solve[a] * solve[b] * solve[c])\n```", "solution": "```python\nimport sympy as sp\na, b, c = sp.symbols(\"a b c\")\neq1 = a + b - 8\neq2 = b + c + 3\neq3 = a + c - 5\nsolve = sp.solve((eq1, eq2, eq3), (a, b, c))\nprint(solve)\nprint(solve[a] * solve[b] * solve[c])\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "{a: 8, b: 0, c: -3}\n0", "model_answers": [8.0, 0.0, -3.0, 0.0], "answer": -120.0}, {"response": "**Solution**\n```python\ndiscriminant = (-8)**2 - 4*2*15\nprint(discriminant)\n```", "solution": "```python\ndiscriminant = (-8)**2 - 4*2*15\nprint(discriminant)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-56", "model_answers": [-56.0], "answer": -56.0}, {"response": "**Solution**\n```python\nimport math\n\nx = -6\ny = -15\n\nd_from_x_axis = math.sqrt(x**2)\nd_from_point_8_3 = math.sqrt((x-8)**2 + (y-3)**2)\n\nn = d_from_point_8_3**2 - d_from_x_axis**2\nprint(n)\n```", "solution": "```python\nimport math\n\nx = -6\ny = -15\n\nd_from_x_axis = math.sqrt(x**2)\nd_from_point_8_3 = math.sqrt((x-8)**2 + (y-3)**2)\n\nn = d_from_point_8_3**2 - d_from_x_axis**2\nprint(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "484.0", "model_answers": [484.0], "answer": 52.0}, {"response": "**Solution**\n```python\nprint(abs(6 - 3))\n```", "solution": "```python\nprint(abs(6 - 3))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": 12.0}, {"response": "**Solution**\n```python\nA = 6\nB = 17\nAB = A*B\nprint(AB)\n```", "solution": "```python\nA = 6\nB = 17\nAB = A*B\nprint(AB)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "102", "model_answers": [102.0], "answer": 6.0}, {"response": "**Solution**\n```python\nfrom sympy import simplify\nfrom sympy import sqrt\nfrom sympy import symbols\nx = symbols('x')\nf = 3 * sqrt(2 * x - 7) - 8\nprint(simplify(f.subs(x, 8)))\n```", "solution": "```python\nfrom sympy import simplify\nfrom sympy import sqrt\nfrom sympy import symbols\nx = symbols('x')\nf = 3 * sqrt(2 * x - 7) - 8\nprint(simplify(f.subs(x, 8)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\nexpr = (9 - 4*x) / (x + 6) - 7\nsol = sympy.solve(expr)\nprint(sol)\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\nexpr = (9 - 4*x) / (x + 6) - 7\nsol = sympy.solve(expr)\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "[-3]", "model_answers": [-3.0], "answer": -3.0}, {"response": "**Solution**\n```python\nnum_red = 2 * (35 - 3) / 3\nprint(num_red)\n```", "solution": "```python\nnum_red = 2 * (35 - 3) / 3\nprint(num_red)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "21.333333333333332", "model_answers": [21.333333333333332], "answer": 8.0}, {"response": "**Solution**\n```python\na = 40 - 12\nprint(a)\n```", "solution": "```python\na = 40 - 12\nprint(a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "28", "model_answers": [28.0], "answer": 364.0}, {"response": "**Solution**\n```python\n# Use formula V = (1/3)Bh\n# where B is the area of the base and h is the height\n# Area of the base is 30 square units\n# Height is 6.5 units\n\n# Calculate the volume using the formula\nV = (1/3) * 30 * 6.5\nprint(V)\n```", "solution": "```python\n# Use formula V = (1/3)Bh\n# where B is the area of the base and h is the height\n# Area of the base is 30 square units\n# Height is 6.5 units\n\n# Calculate the volume using the formula\nV = (1/3) * 30 * 6.5\nprint(V)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "65.0", "model_answers": [65.0], "answer": 65.0}, {"response": "**Solution**\n```python\nx_int = 16\nprint(x_int)\n```", "solution": "```python\nx_int = 16\nprint(x_int)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "16", "model_answers": [16.0], "answer": 8.0}, {"response": "**Solution**\n```python\nx = 1 / (2 - (1 / (2 - (1 / (2 - 1)))))\nprint(x)\n```", "solution": "```python\nx = 1 / (2 - (1 / (2 - (1 / (2 - 1)))))\nprint(x)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1.0", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nx = 5\ny = 7\nxy = (x + y) * (x + y) - (x^2 + y^2)\nprint(xy)\n```", "solution": "```python\nx = 5\ny = 7\nxy = (x + y) * (x + y) - (x^2 + y^2)\nprint(xy)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "130", "model_answers": [130.0], "answer": 20.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, expand, simplify\nx = Symbol('x')\nf = 3 * x ** 4 + 5 * x ** 2 - 9 * x - 2\ng = f.subs(x, x - 1)\ng_coeff = expand(g).coeffs()\nprint(simplify(g_coeff))\n```", "solution": "```python\nfrom sympy import Symbol, expand, simplify\nx = Symbol('x')\nf = 3 * x ** 4 + 5 * x ** 2 - 9 * x - 2\ng = f.subs(x, x - 1)\ng_coeff = expand(g).coeffs()\nprint(simplify(g_coeff))\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": -2.0}, {"response": "**Solution**\n```python\na1 = 0\na2 = 1\ncommon_diff = 1\n\ntotal = 0\nfor i in range(98):\n    total += a2\n    a2 += common_diff\n\nprint(total)\n```", "solution": "```python\na1 = 0\na2 = 1\ncommon_diff = 1\n\ntotal = 0\nfor i in range(98):\n    total += a2\n    a2 += common_diff\n\nprint(total)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4851", "model_answers": [4851.0], "answer": 93.0}, {"response": "**Solution**\n```python\nsquare_1 = 99\nsquare_2 = square_1 + 2\nprint(square_2)\n```", "solution": "```python\nsquare_1 = 99\nsquare_2 = square_1 + 2\nprint(square_2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "101", "model_answers": [101.0], "answer": 549.0}, {"response": "**Solution**\n```python\nf = lambda x: x + 2\ng = lambda x: 1 / f(x)\nprint(g(f(-3)))\n```", "solution": "```python\nf = lambda x: x + 2\ng = lambda x: 1 / f(x)\nprint(g(f(-3)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1.0", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\ns = 5\nc = 2\np = 10\nq = 45 - c * s - p\nprint(q)\n\n# or\n\nq = 45 - 2 * 5 - 10\nprint(q)\n```", "solution": "```python\ns = 5\nc = 2\np = 10\nq = 45 - c * s - p\nprint(q)\n\n# or\n\nq = 45 - 2 * 5 - 10\nprint(q)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "25\n25", "model_answers": [25.0, 25.0], "answer": -4.0}, {"response": "**Solution**\n```python\ny = 4x - 36\ny / x = 1 / 2\nx = y / 1 / 2\nx = 2y / 2\nx = y\nx = 4 * 2 - 36\nx = 8 - 36\nx = -28\n```", "solution": "```python\ny = 4x - 36\ny / x = 1 / 2\nx = y / 1 / 2\nx = 2y / 2\nx = y\nx = 4 * 2 - 36\nx = 8 - 36\nx = -28\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 18.0}, {"response": "**Solution**\n```python\nf = lambda x: 2*x/(x**2 - 5*x - 14)\na = -14/5\nb = 14/5\nc = 2/5\nprint(a + b + c)\n```", "solution": "```python\nf = lambda x: 2*x/(x**2 - 5*x - 14)\na = -14/5\nb = 14/5\nc = 2/5\nprint(a + b + c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.4", "model_answers": [0.4], "answer": 5.0}, {"response": "**Solution**\n```python\nimport sympy as sp\n\nx, y = sp.symbols('x, y')\ndistance = sp.sqrt(x**2 + y**2)\nprint(distance)\n```", "solution": "```python\nimport sympy as sp\n\nx, y = sp.symbols('x, y')\ndistance = sp.sqrt(x**2 + y**2)\nprint(distance)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "sqrt(x**2 + y**2)", "model_answers": [2.0, 2.0], "answer": 11.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\nf = (x - 2)**2 - 9\ny = f/3\nprint(y.integrate())\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\nf = (x - 2)**2 - 9\ny = f/3\nprint(y.integrate())\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "x**3/9 - 2*x**2/3 - 5*x/3", "model_answers": [3.0, 9.0, 2.0, 2.0, 3.0, 5.0, 3.0], "answer": 5.0}, {"response": "**Solution**\n```python\nfrom math import fabs\nx = -1\nwhile True:\n    x += 1\n    if x**2 == -fabs(x):\n        print(x)\n        break\n```", "solution": "```python\nfrom math import fabs\nx = -1\nwhile True:\n    x += 1\n    if x**2 == -fabs(x):\n        print(x)\n        break\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 1.0}, {"response": "**Solution**\n```python\nlarry = 35 / 2\nlenny = 35\nprint(lenny - larry)\n```", "solution": "```python\nlarry = 35 / 2\nlenny = 35\nprint(lenny - larry)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "17.5", "model_answers": [17.5], "answer": 15.0}, {"response": "**Solution**\n```python\nimport math\n\nx = 0\nwhile True:\n    if pow(1, x) + pow(2, x) + pow(5, x) == 642:\n        break\n    x += 1\n\nprint(x)\n```", "solution": "```python\nimport math\n\nx = 0\nwhile True:\n    if pow(1, x) + pow(2, x) + pow(5, x) == 642:\n        break\n    x += 1\n\nprint(x)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4", "model_answers": [4.0], "answer": 4.0}, {"response": "**Solution**\n```python\nfirst_term = 1\ncommon_ratio = -2\nfourteenth_term = first_term * (common_ratio ** 13)\nprint(fourteenth_term)\n```", "solution": "```python\nfirst_term = 1\ncommon_ratio = -2\nfourteenth_term = first_term * (common_ratio ** 13)\nprint(fourteenth_term)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-8192", "model_answers": [-8192.0], "answer": -8192.0}, {"response": "**Solution**\n```python\nimport sympy as sp\nx = sp.log(256) / sp.log(2)\nprint(x)\n```", "solution": "```python\nimport sympy as sp\nx = sp.log(256) / sp.log(2)\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "log(256)/log(2)", "model_answers": [256.0, 2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nx = 3\ny = 2\nprint(x + y)\n```", "solution": "```python\nx = 3\ny = 2\nprint(x + y)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "5", "model_answers": [5.0], "answer": 5.0}, {"response": "**Solution**\n```python\ntotal_cost = 12.75\nentry_fee = 2.25\nride_cost = 1.50\nrides = total_cost - entry_fee\nprint(rides / ride_cost)\n```", "solution": "```python\ntotal_cost = 12.75\nentry_fee = 2.25\nride_cost = 1.50\nrides = total_cost - entry_fee\nprint(rides / ride_cost)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "7.0", "model_answers": [7.0], "answer": 7.0}, {"response": "**Solution**\n```python\nx_mid = (1 + (-7)) / 2\ny_mid = (1 + 5) / 2\nprint(x_mid * y_mid)\n```", "solution": "```python\nx_mid = (1 + (-7)) / 2\ny_mid = (1 + 5) / 2\nprint(x_mid * y_mid)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-9.0", "model_answers": [-9.0], "answer": -9.0}, {"response": "**Solution**\n```python\nimport sympy\na, b, c = sympy.symbols('a, b, c')\neq1 = 3*a + b + c\neq2 = a + 3*b + c\neq3 = a + b + 3*c\nsol = sympy.solve((eq1, eq2, eq3), (a, b, c))\nprint(sol)\n```", "solution": "```python\nimport sympy\na, b, c = sympy.symbols('a, b, c')\neq1 = 3*a + b + c\neq2 = a + 3*b + c\neq3 = a + b + 3*c\nsol = sympy.solve((eq1, eq2, eq3), (a, b, c))\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "{a: 0, b: 0, c: 0}", "model_answers": [0.0, 0.0, 0.0], "answer": -56.0}, {"response": "**Solution**\n```python\ndays = 10\npeople = 12 + 3\ndaily_share = people / days\nprint(days)\n```", "solution": "```python\ndays = 10\npeople = 12 + 3\ndaily_share = people / days\nprint(days)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "10", "model_answers": [10.0], "answer": 8.0}, {"response": "**Solution**\n```python\nk = 16\n```", "solution": "```python\nk = 16\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "", "model_answers": [], "answer": 128.0}, {"response": "**Solution**\n```python\nprint(3 * 5)\n```", "solution": "```python\nprint(3 * 5)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15", "model_answers": [15.0], "answer": 64.0}, {"response": "**Solution**\n```python\ndef is_between(n, lower, upper):\n    return lower <= n <= upper\n\ndef is_square(n):\n    x = n ** 0.5\n    return x == int(x)\n\ndef count_squares(lower, upper):\n    count = 0\n    for x in range(lower, upper + 1):\n        if is_between(x, lower, upper) and is_square(x):\n            count += 1\n    return count\n\nprint(count_squares(10, 50))\n```", "solution": "```python\ndef is_between(n, lower, upper):\n    return lower <= n <= upper\n\ndef is_square(n):\n    x = n ** 0.5\n    return x == int(x)\n\ndef count_squares(lower, upper):\n    count = 0\n    for x in range(lower, upper + 1):\n        if is_between(x, lower, upper) and is_square(x):\n            count += 1\n    return count\n\nprint(count_squares(10, 50))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4", "model_answers": [4.0], "answer": 4.0}, {"response": "**Solution**\n```python\ntotal_days = 4\nfirst_two_days_miles = 26\nsecond_third_days_miles = 12\nlast_two_days_miles = 28\nfirst_third_days_miles = 22\n\ntotal_miles = first_two_days_miles + second_third_days_miles * (total_days - 2) + last_two_days_miles\nprint(total_miles)\n```", "solution": "```python\ntotal_days = 4\nfirst_two_days_miles = 26\nsecond_third_days_miles = 12\nlast_two_days_miles = 28\nfirst_third_days_miles = 22\n\ntotal_miles = first_two_days_miles + second_third_days_miles * (total_days - 2) + last_two_days_miles\nprint(total_miles)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "78", "model_answers": [78.0], "answer": 54.0}, {"response": "**Solution**\n```python\nn = 7\nprint(n)\n```", "solution": "```python\nn = 7\nprint(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7", "model_answers": [7.0], "answer": -1.0}, {"response": "**Solution**\n```python\nx = 725\ny = 727\nx_prime = 729\ny_prime = 731\n\n# Calculate the difference of the two equations\ndiff = x_prime * y - x * y_prime\nprint(diff)\n```", "solution": "```python\nx = 725\ny = 727\nx_prime = 729\ny_prime = 731\n\n# Calculate the difference of the two equations\ndiff = x_prime * y - x * y_prime\nprint(diff)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": -48.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\nfrom sympy import isprime\n\ndef count_right_triangles(n):\n    count = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            c = sqrt(a**2 + b**2)\n            if c == int(c) and a + b + c == n:\n                count += 1\n    return count\n\nprint(count_right_triangles(162))\n```", "solution": "```python\nfrom math import sqrt\nfrom sympy import isprime\n\ndef count_right_triangles(n):\n    count = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            c = sqrt(a**2 + b**2)\n            if c == int(c) and a + b + c == n:\n                count += 1\n    return count\n\nprint(count_right_triangles(162))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 4.0}, {"response": "**Solution**\n```python\ndef quadratic_function(x):\n    return 6 * x ** 2 + x - 2\n\ndef find_root(f, x_low, x_high):\n    while x_low < x_high:\n        x_mid = (x_low + x_high) / 2\n        if f(x_mid) < 0:\n            x_low = x_mid\n        else:\n            x_high = x_mid\n    return x_high\n\ndef find_greatest_integer_root(f, x_low):\n    x_high = find_root(f, x_low, x_low + 1)\n    return find_root(f, x_high - 1, x_high)\n\ndef greatest_integer_root(f, x_low):\n    return int(round(find_greatest_integer_root(f, x_low)))\n\ndef quadratic_root(f, x_low):\n    return int(round(find_root(f, x_low, x_low + 1)))\n\ndef main():\n    f = quadratic_function\n    x_low = -1\n    x_high = 2\n    print(quadratic_root(f, x_low))\n    print(greatest_integer_root(f, x_low))\n\nif __name__ == '__main__':\n    main()\n```", "solution": "```python\ndef quadratic_function(x):\n    return 6 * x ** 2 + x - 2\n\ndef find_root(f, x_low, x_high):\n    while x_low < x_high:\n        x_mid = (x_low + x_high) / 2\n        if f(x_mid) < 0:\n            x_low = x_mid\n        else:\n            x_high = x_mid\n    return x_high\n\ndef find_greatest_integer_root(f, x_low):\n    x_high = find_root(f, x_low, x_low + 1)\n    return find_root(f, x_high - 1, x_high)\n\ndef greatest_integer_root(f, x_low):\n    return int(round(find_greatest_integer_root(f, x_low)))\n\ndef quadratic_root(f, x_low):\n    return int(round(find_root(f, x_low, x_low + 1)))\n\ndef main():\n    f = quadratic_function\n    x_low = -1\n    x_high = 2\n    print(quadratic_root(f, x_low))\n    print(greatest_integer_root(f, x_low))\n\nif __name__ == '__main__':\n    main()\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "0\n0", "model_answers": [0.0, 0.0], "answer": 0.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\n\na = 1\nb = -3\nc = -4\n\nm = -b/(2*a)\nn = -c/(a)\n\nprint(m-n)\n```", "solution": "```python\nfrom math import sqrt\n\na = 1\nb = -3\nc = -4\n\nm = -b/(2*a)\nn = -c/(a)\n\nprint(m-n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-2.5", "model_answers": [-2.5], "answer": 6.0}, {"response": "**Solution**\n```python\n# m * n = 56\nprint(56 / 36)\n```", "solution": "```python\n# m * n = 56\nprint(56 / 36)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.5555555555555556", "model_answers": [1.5555555555555556], "answer": 18.0}, {"response": "**Solution**\n```python\nimport numpy as np\nx = np.arange(0, 18, 0.1)\nf = 2*x\ng = 10*x\nf_g = f - g\nmax_f_g = np.max(f_g)\nprint(max_f_g)\n```", "solution": "```python\nimport numpy as np\nx = np.arange(0, 18, 0.1)\nf = 2*x\ng = 10*x\nf_g = f - g\nmax_f_g = np.max(f_g)\nprint(max_f_g)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.0", "model_answers": [0.0], "answer": 4.0}, {"response": "**Solution**\n```python\nnum_horses = 30/4\nprint(num_horses)\n```", "solution": "```python\nnum_horses = 30/4\nprint(num_horses)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7.5", "model_answers": [7.5], "answer": 5.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\neq = x**2 - 5*x + 9\nsol = solve(eq, x)\nprint((sol[0] - 1)*(sol[1] - 1))\n```", "solution": "```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\neq = x**2 - 5*x + 9\nsol = solve(eq, x)\nprint((sol[0] - 1)*(sol[1] - 1))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(3/2 - sqrt(11)*I/2)*(3/2 + sqrt(11)*I/2)", "model_answers": [3.0, 2.0, 11.0, 2.0, 3.0, 2.0, 11.0, 2.0], "answer": 5.0}, {"response": "**Solution**\n```python\n# Solve for e\n# d = 17e\n# 2d = 34e\n# 2d = 8(17e) = 8(34e) = 288e\n# 2d - 8 = 288e - 8\n# 2d - 8 = 288e - 8\n# 2d = 288e - 8\n# 2d = 288e - 8 + 8\n# 2d = 376e\n# 376e - 2d = 8\n# 376e - 2d = 8\n# 376e = 10d\n# d = 17e\n# 2d = 34e\n# 2e = 18e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d", "solution": "```python\n# Solve for e\n# d = 17e\n# 2d = 34e\n# 2d = 8(17e) = 8(34e) = 288e\n# 2d - 8 = 288e - 8\n# 2d - 8 = 288e - 8\n# 2d = 288e - 8\n# 2d = 288e - 8 + 8\n# 2d = 376e\n# 376e - 2d = 8\n# 376e - 2d = 8\n# 376e = 10d\n# d = 17e\n# 2d = 34e\n# 2e = 18e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d", "function": [], "is_success": true, "is_correct": false, "exec_output": "", "model_answers": [], "answer": 2.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\nx1 = -99 + np.sqrt(8001)\nx2 = -99 - np.sqrt(8001)\n\n# quadratic equation coefficients\na = 1/2\nb = 99\nc = x1*x2 - b\n\nprint(c)\n```", "solution": "```python\nimport numpy as np\n\nx1 = -99 + np.sqrt(8001)\nx2 = -99 - np.sqrt(8001)\n\n# quadratic equation coefficients\na = 1/2\nb = 99\nc = x1*x2 - b\n\nprint(c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1700.999999999999", "model_answers": [1700.999999999999], "answer": 900.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\nb = -sqrt(15) - 2\nprint(b)\n```", "solution": "```python\nfrom math import sqrt\nb = -sqrt(15) - 2\nprint(b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-5.872983346207417", "model_answers": [-5.872983346207417], "answer": -5.0}, {"response": "**Solution**\n```python\nx = 2\ny = -3\nprint(((x*y)**5)/(y**3))\n```", "solution": "```python\nx = 2\ny = -3\nprint(((x*y)**5)/(y**3))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "288.0", "model_answers": [288.0], "answer": 288.0}, {"response": "**Solution**\n```python\nn = 26 // 25 + 25\nprint(n)\n```", "solution": "```python\nn = 26 // 25 + 25\nprint(n)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "26", "model_answers": [26.0], "answer": 26.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return (x-1)*(x-3)*(x-7)*(x-9)\n\nprint(f(6) - f(4))\n```", "solution": "```python\ndef f(x):\n    return (x-1)*(x-3)*(x-7)*(x-9)\n\nprint(f(6) - f(4))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "0", "model_answers": [0.0], "answer": 0.0}, {"response": "**Solution**\n```python\nimport math\n\n# Calculate the interest earned in the first CD\ninterest = 10000 * 0.04 / 2\n\n# Calculate the total amount in the first CD\ntotal = 10000 + interest\n\n# Calculate the interest earned in the second CD\ninterest = total * 0.05 / 2\n\n# Calculate the total amount in the second CD\ntotal = total + interest\n\nprint(total)\n```", "solution": "```python\nimport math\n\n# Calculate the interest earned in the first CD\ninterest = 10000 * 0.04 / 2\n\n# Calculate the total amount in the first CD\ntotal = 10000 + interest\n\n# Calculate the interest earned in the second CD\ninterest = total * 0.05 / 2\n\n# Calculate the total amount in the second CD\ntotal = total + interest\n\nprint(total)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "10455.0", "model_answers": [10455.0], "answer": 10455.0}, {"response": "**Solution**\n```python\nimport sympy\nprint(sympy.sqrt(12 * 20 * 15 * 60))\n```", "solution": "```python\nimport sympy\nprint(sympy.sqrt(12 * 20 * 15 * 60))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "120*sqrt(15)", "model_answers": [120.0, 15.0], "answer": 60.0}, {"response": "**Solution**\n```python\nfrom sympy import *\nx, y = symbols(\"x y\")\nexpr = x**2 + y**2 + 2*x - 4*y + 8\nexpr.subs({x: -1, y: 0}).evalf()\n```", "solution": "```python\nfrom sympy import *\nx, y = symbols(\"x y\")\nexpr = x**2 + y**2 + 2*x - 4*y + 8\nexpr.subs({x: -1, y: 0}).evalf()\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "", "model_answers": [], "answer": 3.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\n\ndef integer_sqrt(x):\n    return int(sqrt(x))\n\nfor x in range(1, 120):\n    if integer_sqrt(120 - sqrt(x)) == sqrt(x):\n        print(x)\n```", "solution": "```python\nfrom math import sqrt\n\ndef integer_sqrt(x):\n    return int(sqrt(x))\n\nfor x in range(1, 120):\n    if integer_sqrt(120 - sqrt(x)) == sqrt(x):\n        print(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "100", "model_answers": [100.0], "answer": 11.0}, {"response": "**Solution**\n```python\nx1 = -7 / 3\nx2 = -5 / 2\nprint(x1 + x2)\n```", "solution": "```python\nx1 = -7 / 3\nx2 = -5 / 2\nprint(x1 + x2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-4.833333333333334", "model_answers": [-4.833333333333334], "answer": -23.5}, {"response": "**Solution**\n```python\nimport sympy as sp\nx, y, z = sp.symbols('x y z')\neq1 = sp.Eq(3*x+y, 17)\neq2 = sp.Eq(5*y+z, 14)\neq3 = sp.Eq(3*x+5*z, 41)\nsol = sp.solve([eq1, eq2, eq3], [x, y, z])\nprint(sol)\n```", "solution": "```python\nimport sympy as sp\nx, y, z = sp.symbols('x y z')\neq1 = sp.Eq(3*x+y, 17)\neq2 = sp.Eq(5*y+z, 14)\neq3 = sp.Eq(3*x+5*z, 41)\nsol = sp.solve([eq1, eq2, eq3], [x, y, z])\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "{x: 66/13, y: 23/13, z: 67/13}", "model_answers": [66.0, 13.0, 23.0, 13.0, 67.0, 13.0], "answer": 12.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\ndef f(x):\n    return 1.5 * x\n\ndef solve(x):\n    return f(x)\n\ndef solve_for_x(y):\n    return solve(y)\n\ndef solve_for_y(x):\n    return solve(x)\n\ndef solve_for_x_approx(y):\n    return np.interp(y, [0, 120], [-20, 70])\n\ndef solve_for_y_approx(x):\n    return np.interp(x, [-20, 70], [0, 120])\n\nprint(solve_for_y(100))\nprint(solve_for_x(100))\nprint(solve_for_y_approx(100))\nprint(solve_for_x_approx(100))\n```", "solution": "```python\nimport numpy as np\n\ndef f(x):\n    return 1.5 * x\n\ndef solve(x):\n    return f(x)\n\ndef solve_for_x(y):\n    return solve(y)\n\ndef solve_for_y(x):\n    return solve(x)\n\ndef solve_for_x_approx(y):\n    return np.interp(y, [0, 120], [-20, 70])\n\ndef solve_for_y_approx(x):\n    return np.interp(x, [-20, 70], [0, 120])\n\nprint(solve_for_y(100))\nprint(solve_for_x(100))\nprint(solve_for_y_approx(100))\nprint(solve_for_x_approx(100))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "150.0\n150.0\n120.0\n55.0", "model_answers": [150.0, 150.0, 120.0, 55.0], "answer": 5400.0}, {"response": "**Solution**\n```python\nproduct = 4/3 * 6/4 * 8/5 * 10/6 * 12/7 * 14/8\nprint(product)\n```", "solution": "```python\nproduct = 4/3 * 6/4 * 8/5 * 10/6 * 12/7 * 14/8\nprint(product)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "16.0", "model_answers": [16.0], "answer": 16.0}, {"response": "**Solution**\n```python\ndef psi(a, b):\n    return 2 * a + 5 * b\n\nprint(psi(3 * psi(1, 0), 0))\n```", "solution": "```python\ndef psi(a, b):\n    return 2 * a + 5 * b\n\nprint(psi(3 * psi(1, 0), 0))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "12", "model_answers": [12.0], "answer": 73.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\neq = x**2 - 2*x - 3\np, q = sympy.solve(eq, x)\nprint((p+1)*(q+1))\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\neq = x**2 - 2*x - 3\np, q = sympy.solve(eq, x)\nprint((p+1)*(q+1))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "0", "model_answers": [0.0], "answer": 0.0}, {"response": "**Solution**\n```python\ndef get_average(a, b):\n    return (a + b) / 2\n\ndef get_average_of_average(a, b, c):\n    return get_average(get_average(a, b), c)\n\nprint(get_average_of_average(3, 5, 8))\n```", "solution": "```python\ndef get_average(a, b):\n    return (a + b) / 2\n\ndef get_average_of_average(a, b, c):\n    return get_average(get_average(a, b), c)\n\nprint(get_average_of_average(3, 5, 8))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "6.0", "model_answers": [6.0], "answer": 6.0}, {"response": "**Solution**\n```python\nx_coordinates = []\nfor x in range(1, 7):\n    for y in range(1, 7):\n        if x / y == 1 / 7:\n            x_coordinates.append(x)\nprint(sum(x_coordinates))\n```", "solution": "```python\nx_coordinates = []\nfor x in range(1, 7):\n    for y in range(1, 7):\n        if x / y == 1 / 7:\n            x_coordinates.append(x)\nprint(sum(x_coordinates))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 78.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\np = 4 + 2 * (x + 2)**0.5\ng = 4 - 3 * x\np_g = p.subs(x, g)\nsolve(p_g, x)\n```", "solution": "```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\np = 4 + 2 * (x + 2)**0.5\ng = 4 - 3 * x\np_g = p.subs(x, g)\nsolve(p_g, x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "", "model_answers": [], "answer": 2.0}, {"response": "**Solution**\n```python\nx = 42 / 6\ny = 14 / (2 * x - 9)\nxy = x * y\nprint(xy)\n```", "solution": "```python\nx = 42 / 6\ny = 14 / (2 * x - 9)\nxy = x * y\nprint(xy)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "19.599999999999998", "model_answers": [19.599999999999998], "answer": 0.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\nf1 = x**2 - 4*x + 3\nf2 = x + 5\nf3 = x**2 + 4*x - 5\nf4 = x - c\nf1_f2 = f1 * f2\nf3_f4 = f3 * f4\nf1_f2 - f3_f4\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\nf1 = x**2 - 4*x + 3\nf2 = x + 5\nf3 = x**2 + 4*x - 5\nf4 = x - c\nf1_f2 = f1 * f2\nf3_f4 = f3 * f4\nf1_f2 - f3_f4\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 3.0}, {"response": "**Solution**\n```python\nexpression = 2**10 - 2**8\nexpression /= 2**7 - 2**6\nprint(expression)\n```", "solution": "```python\nexpression = 2**10 - 2**8\nexpression /= 2**7 - 2**6\nprint(expression)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "12.0", "model_answers": [12.0], "answer": 12.0}, {"response": "**Solution**\n```python\nx = 2\nprint(x)\n```", "solution": "```python\nx = 2\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": -5.0}, {"response": "**Solution**\n```python\nfrom sympy import solve\nfrom sympy import Symbol\n\na, b, c = Symbol('a'), Symbol('b'), Symbol('c')\n\nx = Symbol('x')\n\n# Find the roots of the quadratic\nroots = solve((a*x**2+b*x+c), x)\n\n# Find the greater root\ngreater_root = roots[1]\n\n# Find the value of n\nn = greater_root**2 - 4\n\nprint(n)\n```", "solution": "```python\nfrom sympy import solve\nfrom sympy import Symbol\n\na, b, c = Symbol('a'), Symbol('b'), Symbol('c')\n\nx = Symbol('x')\n\n# Find the roots of the quadratic\nroots = solve((a*x**2+b*x+c), x)\n\n# Find the greater root\ngreater_root = roots[1]\n\n# Find the value of n\nn = greater_root**2 - 4\n\nprint(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-4 + (-b + sqrt(-4*a*c + b**2))**2/(4*a**2)", "model_answers": [-4.0, -4.0, 2.0, 2.0, 4.0, 2.0], "answer": 2.5}, {"response": "**Solution**\n```python\nd = 4 / 2\nc = 20 / 9\nprint(d / c)\n```", "solution": "```python\nd = 4 / 2\nc = 20 / 9\nprint(d / c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.8999999999999999", "model_answers": [0.8999999999999999], "answer": 7.0}, {"response": "**Solution**\n```python\ndef sum_of_terms(n):\n    return (3 * (103 ** n) + 27 * (103 ** (n - 1))) / (2 * 103 ** n)\n\ndef decimal_to_string(decimal):\n    string = \"\"\n    for digit in decimal:\n        string += str(digit)\n    return string\n\ndef series(n):\n    decimal = [sum_of_terms(k) for k in range(n)]\n    return decimal_to_string(decimal)\n\nprint(series(10))\n```", "solution": "```python\ndef sum_of_terms(n):\n    return (3 * (103 ** n) + 27 * (103 ** (n - 1))) / (2 * 103 ** n)\n\ndef decimal_to_string(decimal):\n    string = \"\"\n    for digit in decimal:\n        string += str(digit)\n    return string\n\ndef series(n):\n    decimal = [sum_of_terms(k) for k in range(n)]\n    return decimal_to_string(decimal)\n\nprint(series(10))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.63106796116504851.63106796116504851.63106796116504851.63106796116504851.63106796116504851.63106796116504851.63106796116504851.63106796116504851.63106796116504851.6310679611650485", "model_answers": [1.6310679611650485, 6.310679611650485e+16, 6.310679611650485e+16, 6.310679611650485e+16, 6.310679611650485e+16, 6310679611650485.0], "answer": 0.015}, {"response": "**Solution**\n```python\nimport sympy as sym\nx = sym.Symbol('x')\nmax_workers = sym.solve(x*-265+2800, x)[0]\nprint(max_workers)\n```", "solution": "```python\nimport sympy as sym\nx = sym.Symbol('x')\nmax_workers = sym.solve(x*-265+2800, x)[0]\nprint(max_workers)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "560/53", "model_answers": [560.0, 53.0], "answer": 10.0}, {"response": "**Solution**\n```python\na = 27 - 18\nb = 18\nprint(a+b)\n```", "solution": "```python\na = 27 - 18\nb = 18\nprint(a+b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "27", "model_answers": [27.0], "answer": 117.0}, {"response": "**Solution**\n```python\ntotal = 15\nchocolate = vanilla = peppermint = lemon = 0\nchocolate = vanilla = peppermint = lemon = 0\nchocolate = 8\nvanilla = 8\npeppermint = 8\nlemon = 8\n\nprint(lemon)\n```", "solution": "```python\ntotal = 15\nchocolate = vanilla = peppermint = lemon = 0\nchocolate = vanilla = peppermint = lemon = 0\nchocolate = 8\nvanilla = 8\npeppermint = 8\nlemon = 8\n\nprint(lemon)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 1.0}, {"response": "**Solution**\n```python\nprint(int(round(pow(25, 1/3))))\n```", "solution": "```python\nprint(int(round(pow(25, 1/3))))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": -2.0}, {"response": "**Solution**\n```python\nh(-1)\n```", "solution": "```python\nh(-1)\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 1.0}, {"response": "**Solution**\n```python\nx = 2\na = 4\nb = 9\nc = 2\nprint(a + b + c)\n```", "solution": "```python\nx = 2\na = 4\nb = 9\nc = 2\nprint(a + b + c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15", "model_answers": [15.0], "answer": 26.0}, {"response": "**Solution**\n```python\ndef f(x):\n    if x % 2 == 0:\n        return x / 2\n    else:\n        return 3 * x + 1\n\n\na = 14\nb = 7\n\nprint(f(a), f(b))\n```", "solution": "```python\ndef f(x):\n    if x % 2 == 0:\n        return x / 2\n    else:\n        return 3 * x + 1\n\n\na = 14\nb = 7\n\nprint(f(a), f(b))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7.0 22", "model_answers": [7.0, 22.0], "answer": 18.0}, {"response": "**Solution**\n```python\nfrom sympy import simplify\nfrom sympy.abc import x\nprint(simplify((7+8*x)-3*(2+6*x+2*x**2)+9*(1+3*x+4*x**2+12*x**3)-9*(7-x**2-8*x**3+13*x**4)).coeff(x))\n```", "solution": "```python\nfrom sympy import simplify\nfrom sympy.abc import x\nprint(simplify((7+8*x)-3*(2+6*x+2*x**2)+9*(1+3*x+4*x**2+12*x**3)-9*(7-x**2-8*x**3+13*x**4)).coeff(x))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "17", "model_answers": [17.0], "answer": 17.0}, {"response": "**Solution**\n```python\nx = 1 + 7\nprint(x)\n```", "solution": "```python\nx = 1 + 7\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 2.0}, {"response": "**Solution**\n```python\nfrom sympy import simplify\nfrom sympy import solve\nfrom sympy import symbols\nfrom sympy import pprint\n\nx = symbols('x')\ny = (2/x**2 + 2/x - 6)\npprint(y)\n```", "solution": "```python\nfrom sympy import simplify\nfrom sympy import solve\nfrom sympy import symbols\nfrom sympy import pprint\n\nx = symbols('x')\ny = (2/x**2 + 2/x - 6)\npprint(y)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2   2 \n-6 + \u2500 + \u2500\u2500\n     x    2\n         x", "model_answers": [2.0, 2.0, -6.0, 2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nprint((3-4)**2 + 2*(3+4))\n```", "solution": "```python\nprint((3-4)**2 + 2*(3+4))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "15", "model_answers": [15.0], "answer": 15.0}, {"response": "**Solution**\n```python\nx1 = -3 / 2\nx2 = 7 / 2\nprint(x1 + x2)\n```", "solution": "```python\nx1 = -3 / 2\nx2 = 7 / 2\nprint(x1 + x2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.0", "model_answers": [2.0], "answer": 7.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt, simplify\n\nnum = 2/((1 + 2*sqrt(3)) + (3/(2 - sqrt(3))))\nden = (1 + 2*sqrt(3)) * (2 - sqrt(3))\n\nprint(simplify(num/den))\n```", "solution": "```python\nfrom sympy import sqrt, simplify\n\nnum = 2/((1 + 2*sqrt(3)) + (3/(2 - sqrt(3))))\nden = (1 + 2*sqrt(3)) * (2 - sqrt(3))\n\nprint(simplify(num/den))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "17/143 - sqrt(3)/143", "model_answers": [17.0, 143.0, 3.0, 143.0], "answer": 112.0}, {"response": "**Solution**\n```python\nsum_of_first_20_multiples = sum([5*i for i in range(1, 21)])\nsum_of_first_20_even_integers = sum([2*i for i in range(1, 21)])\nprint(sum_of_first_20_multiples - sum_of_first_20_even_integers)\n```", "solution": "```python\nsum_of_first_20_multiples = sum([5*i for i in range(1, 21)])\nsum_of_first_20_even_integers = sum([2*i for i in range(1, 21)])\nprint(sum_of_first_20_multiples - sum_of_first_20_even_integers)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "630", "model_answers": [630.0], "answer": 630.0}, {"response": "**Solution**\n```python\nimport sympy\nk = sympy.symbols('k')\nfactor = (sympy.sqrt(k**2 - 15) - k) / 2\nprint(factor)\n```", "solution": "```python\nimport sympy\nk = sympy.symbols('k')\nfactor = (sympy.sqrt(k**2 - 15) - k) / 2\nprint(factor)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-k/2 + sqrt(k**2 - 15)/2", "model_answers": [2.0, 2.0, 15.0, 2.0], "answer": 16384.0}, {"response": "**Solution**\n```python\nx1 = -4\ny1 = 1\nx2 = 1\ny2 = 13\nimport numpy as np\n\ndef distance(x1, y1, x2, y2):\n    return np.sqrt((x2-x1)**2 + (y2-y1)**2)\n\nprint(distance(x1, y1, x2, y2))\n```", "solution": "```python\nx1 = -4\ny1 = 1\nx2 = 1\ny2 = 13\nimport numpy as np\n\ndef distance(x1, y1, x2, y2):\n    return np.sqrt((x2-x1)**2 + (y2-y1)**2)\n\nprint(distance(x1, y1, x2, y2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "13.0", "model_answers": [13.0], "answer": 13.0}, {"response": "**Solution**\n```python\nsum = 0\nfor i in range(1, 10):\n    sum += i\n    if sum ** 0.5 == int(sum ** 0.5):\n        print(i)\n        break\n```", "solution": "```python\nsum = 0\nfor i in range(1, 10):\n    sum += i\n    if sum ** 0.5 == int(sum ** 0.5):\n        print(i)\n        break\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1", "model_answers": [1.0], "answer": 6.0}, {"response": "**Solution**\n```python\nx = 14\nprint(35 / 3 * x ** 2 * 12 / x ** 2)\n```", "solution": "```python\nx = 14\nprint(35 / 3 * x ** 2 * 12 / x ** 2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "140.0", "model_answers": [140.0], "answer": 10.0}, {"response": "**Solution**\n```python\na = -1 / 4\nb = 1\ny = a * 6 + b\nprint(y)\n```", "solution": "```python\na = -1 / 4\nb = 1\ny = a * 6 + b\nprint(y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-0.5", "model_answers": [-0.5], "answer": 0.0}, {"response": "**Solution**\n```python\nimport math\n\ndef f(x):\n    return 2 * x + 1\n\ndef g(x):\n    return f(x) + 2 * x\n\ndef h(x):\n    return f(x) + 3 * x\n\ndef solve_for_a(g):\n    return -1 / (2 * g(0))\n\ndef solve_for_b(h):\n    return 1 / (3 * h(0))\n\na = solve_for_a(g)\nb = solve_for_b(h)\n\nprint(a**2 + b**2)\n```", "solution": "```python\nimport math\n\ndef f(x):\n    return 2 * x + 1\n\ndef g(x):\n    return f(x) + 2 * x\n\ndef h(x):\n    return f(x) + 3 * x\n\ndef solve_for_a(g):\n    return -1 / (2 * g(0))\n\ndef solve_for_b(h):\n    return 1 / (3 * h(0))\n\na = solve_for_a(g)\nb = solve_for_b(h)\n\nprint(a**2 + b**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.3611111111111111", "model_answers": [0.3611111111111111], "answer": 41.0}, {"response": "**Solution**\n```python\nm = 16\nn = 9\nprint(m - n)\n```", "solution": "```python\nm = 16\nn = 9\nprint(m - n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7", "model_answers": [7.0], "answer": 1.0}, {"response": "**Solution**\n```python\nprint((3**4 - 3**3) / (3**3 - 3**2))\n```", "solution": "```python\nprint((3**4 - 3**3) / (3**3 - 3**2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3.0", "model_answers": [3.0], "answer": 3.0}, {"response": "**Solution**\n```python\nfor x in range(1, 10):\n    if x**2 - 9 == 0:\n        print(x)\n```", "solution": "```python\nfor x in range(1, 10):\n    if x**2 - 9 == 0:\n        print(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": 2.0}, {"response": "**Solution**\n```python\n# (6*8) = 48\n# 3*(48) = 144\nprint(144)\n```", "solution": "```python\n# (6*8) = 48\n# 3*(48) = 144\nprint(144)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "144", "model_answers": [144.0], "answer": 5.0}, {"response": "**Solution**\n```python\nimport math\na = 1\nb = 2\nprint(abs(a-b))\n```", "solution": "```python\nimport math\na = 1\nb = 2\nprint(abs(a-b))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1", "model_answers": [1.0], "answer": 11.0}, {"response": "**Solution**\n```python\nz = 3\na = -13\nb = 21\nprint(2*z*z + 2*z + b)\n```", "solution": "```python\nz = 3\na = -13\nb = 21\nprint(2*z*z + 2*z + b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "45", "model_answers": [45.0], "answer": 13.0}, {"response": "**Solution**\n```python\ndef f(x):\n    if x <= 3:\n        return 9 - 2 * x\n    else:\n        return a * x + b\n\ndef solve(a, b):\n    x = f(f(3))\n    assert x == 3\n    x = f(f(x))\n    assert x == 3\n    return a + b\n\nprint(solve(1, 1))\n```", "solution": "```python\ndef f(x):\n    if x <= 3:\n        return 9 - 2 * x\n    else:\n        return a * x + b\n\ndef solve(a, b):\n    x = f(f(3))\n    assert x == 3\n    x = f(f(x))\n    assert x == 3\n    return a + b\n\nprint(solve(1, 1))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 4.0}, {"response": "**Solution**\n```python\na = 1\nb = -2\nc = 3\n\nprint(a+b+c)\n```", "solution": "```python\na = 1\nb = -2\nc = 3\n\nprint(a+b+c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": -3.0}, {"response": "**Solution**\n```python\nslope = (8 - 0) / (7 - 9)\ny_intercept = 8 - (slope * 7)\nprint(slope, y_intercept)\n```", "solution": "```python\nslope = (8 - 0) / (7 - 9)\ny_intercept = 8 - (slope * 7)\nprint(slope, y_intercept)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-4.0 36.0", "model_answers": [-4.0, 36.0], "answer": 32.0}, {"response": "**Solution**\n```python\n# The largest and smallest of three consecutive terms in an arithmetic sequence differ by 14.\ndiff = 14\n# Half of the smallest term is added to each term and the sum of the resulting three numbers is 120.\nsum = 120\n# The original smallest term\nsmallest = (sum - diff) // 2\nprint(smallest)\n```", "solution": "```python\n# The largest and smallest of three consecutive terms in an arithmetic sequence differ by 14.\ndiff = 14\n# Half of the smallest term is added to each term and the sum of the resulting three numbers is 120.\nsum = 120\n# The original smallest term\nsmallest = (sum - diff) // 2\nprint(smallest)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "53", "model_answers": [53.0], "answer": 22.0}, {"response": "**Solution**\n```python\nfor i in range(21):\n    if len(str(i))!= len(str(i).translate(str.maketrans('','','1234567890'))):\n        print(i)\n```", "solution": "```python\nfor i in range(21):\n    if len(str(i))!= len(str(i).translate(str.maketrans('','','1234567890'))):\n        print(i)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20", "model_answers": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0], "answer": 14.0}, {"response": "**Solution**\n```python\nimport sympy as sp\n\nx = sp.Symbol('x')\nexpr = sp.sqrt(12*x+12)*sp.sqrt(3*x-6) - 4*x - 34\n\nsol = sp.solve(expr, x)\nprint(sol)\n```", "solution": "```python\nimport sympy as sp\n\nx = sp.Symbol('x')\nexpr = sp.sqrt(12*x+12)*sp.sqrt(3*x-6) - 4*x - 34\n\nsol = sp.solve(expr, x)\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[77/10 + 9*sqrt(149)/10]", "model_answers": [77.0, 10.0, 9.0, 149.0, 10.0], "answer": 50.0}, {"response": "**Solution**\n```python\nx = 4\nprint(x**2 - 6*x + 13)\n```", "solution": "```python\nx = 4\nprint(x**2 - 6*x + 13)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5", "model_answers": [5.0], "answer": 4.0}, {"response": "**Solution**\n```python\nm = -2\nn = -15\nprint(m+n)\n```", "solution": "```python\nm = -2\nn = -15\nprint(m+n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-17", "model_answers": [-17.0], "answer": 0.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol\nfrom sympy.solvers import solve\nfrom sympy.abc import x, y\n\neq = x**2 - 4*x + y**2 - 6*y - 36\nradius = solve(eq, x)\nprint(radius)\n```", "solution": "```python\nfrom sympy import Symbol\nfrom sympy.solvers import solve\nfrom sympy.abc import x, y\n\neq = x**2 - 4*x + y**2 - 6*y - 36\nradius = solve(eq, x)\nprint(radius)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[2 - sqrt(-(y - 10)*(y + 4)), sqrt(-(y - 10)*(y + 4)) + 2]", "model_answers": [2.0, 10.0, 4.0, 10.0, 4.0, 2.0], "answer": 7.0}, {"response": "**Solution**\n```python\nf_5 = 2 * 5 - 3\nf_5 = 10 - 3\nf_5 = 7\ng_f_5 = 7 + 1\ng_f_5 = 8\nprint(g_f_5)\n```", "solution": "```python\nf_5 = 2 * 5 - 3\nf_5 = 10 - 3\nf_5 = 7\ng_f_5 = 7 + 1\ng_f_5 = 8\nprint(g_f_5)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 7.0}, {"response": "**Solution**\n```python\nimport math\n\ndef largest_prime_factor(n):\n    i = int(math.sqrt(n))\n    while i > 1:\n        if n % i == 0:\n            return i\n        i -= 1\n    return 1\n\nprint(largest_prime_factor(9951))\n```", "solution": "```python\nimport math\n\ndef largest_prime_factor(n):\n    i = int(math.sqrt(n))\n    while i > 1:\n        if n % i == 0:\n            return i\n        i -= 1\n    return 1\n\nprint(largest_prime_factor(9951))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "93", "model_answers": [93.0], "answer": 107.0}, {"response": "**Solution**\n```python\nA = 14\nB = 8\na_b = A - B\nprint(a_b)\n```", "solution": "```python\nA = 14\nB = 8\na_b = A - B\nprint(a_b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": -2.0}, {"response": "**Solution**\n```python\ninitial_height = 452 / 1.05\nprint(initial_height)\n```", "solution": "```python\ninitial_height = 452 / 1.05\nprint(initial_height)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "430.4761904761905", "model_answers": [430.4761904761905], "answer": 228.3}, {"response": "**Solution**\n```python\nimport sympy as sp\nx = sp.Symbol('x')\nf = (1/(x-64)) + (1/(x**2-64)) + (1/(x**3-64))\nprint(f.free_symbols)\n```", "solution": "```python\nimport sympy as sp\nx = sp.Symbol('x')\nf = (1/(x-64)) + (1/(x**2-64)) + (1/(x**3-64))\nprint(f.free_symbols)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "{x}", "model_answers": [], "answer": 4.0}, {"response": "**Solution**\n```python\n# 1 + 3 + 5 + 7 + 9\nsum = 1 + 3 + 5 + 7 + 9\nprint(sum)\n```", "solution": "```python\n# 1 + 3 + 5 + 7 + 9\nsum = 1 + 3 + 5 + 7 + 9\nprint(sum)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "25", "model_answers": [25.0], "answer": 25.0}, {"response": "**Solution**\n```python\nfrom sympy import simplify, S\n\nx, y, z = S('x,y,z')\n\neq = ((y-x)**2 / (y-z)*(z-x)) + ((z-y)**2 / (z-x)*(x-y)) + ((x-z)**2 / (x-y)*(y-z))\n\nprint(simplify(eq))\n```", "solution": "```python\nfrom sympy import simplify, S\n\nx, y, z = S('x,y,z')\n\neq = ((y-x)**2 / (y-z)*(z-x)) + ((z-y)**2 / (z-x)*(x-y)) + ((x-z)**2 / (x-y)*(y-z))\n\nprint(simplify(eq))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "(-(x - y)**3*(x - z)**2 - (x - y)**2*(y - z)**3 + (x - z)**3*(y - z)**2)/((x - y)*(x - z)*(y - z))", "model_answers": [3.0, 2.0, 2.0, 3.0, 3.0, 2.0], "answer": 3.0}, {"response": "**Solution**\n```python\nA, B, C = 9, 8, 3\n\nA_plus_B_plus_C = A + B + C\n\nprint(A_plus_B_plus_C)\n```", "solution": "```python\nA, B, C = 9, 8, 3\n\nA_plus_B_plus_C = A + B + C\n\nprint(A_plus_B_plus_C)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "20", "model_answers": [20.0], "answer": 8.0}, {"response": "**Solution**\n```python\nx = 1\ny = 2\nz = 3\nprint(x+y+z)\n```", "solution": "```python\nx = 1\ny = 2\nz = 3\nprint(x+y+z)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": 10.0}, {"response": "**Solution**\n```python\nx = 3\ny = 4\nx_squared = x ** 2\ny_squared = y ** 2\nx_y = x * y\nx_plus_y = x + y\nx_plus_y_squared = x_plus_y ** 2\nx_plus_y_minus_x_y = x_plus_y - x_y\nprint(x_plus_y_squared - x_plus_y_minus_x_y)\n```", "solution": "```python\nx = 3\ny = 4\nx_squared = x ** 2\ny_squared = y ** 2\nx_y = x * y\nx_plus_y = x + y\nx_plus_y_squared = x_plus_y ** 2\nx_plus_y_minus_x_y = x_plus_y - x_y\nprint(x_plus_y_squared - x_plus_y_minus_x_y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "54", "model_answers": [54.0], "answer": 217.0}, {"response": "**Solution**\n```python\nsum = 25\ndifference = 11\nlarger_number = sum - difference\nprint(larger_number)\n```", "solution": "```python\nsum = 25\ndifference = 11\nlarger_number = sum - difference\nprint(larger_number)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "14", "model_answers": [14.0], "answer": 18.0}, {"response": "**Solution**\n```python\nfrom math import ceil, floor\n\ndef inside_region(x, y):\n    return y <= -x**2 + 35/4 and x >= 0\n\ndef boundary_region(x, y):\n    return y == -x**2 + 35/4 and x >= 0\n\ndef count_points(f):\n    count = 0\n    for x in range(int(ceil(-35/4)), int(floor(35/4))):\n        for y in range(int(ceil(-x**2 + 35/4)), int(floor(-x**2 + 35/4))):\n            if f(x, y):\n                count += 1\n    return count\n\nprint(count_points(inside_region))\nprint(count_points(boundary_region))\n```", "solution": "```python\nfrom math import ceil, floor\n\ndef inside_region(x, y):\n    return y <= -x**2 + 35/4 and x >= 0\n\ndef boundary_region(x, y):\n    return y == -x**2 + 35/4 and x >= 0\n\ndef count_points(f):\n    count = 0\n    for x in range(int(ceil(-35/4)), int(floor(35/4))):\n        for y in range(int(ceil(-x**2 + 35/4)), int(floor(-x**2 + 35/4))):\n            if f(x, y):\n                count += 1\n    return count\n\nprint(count_points(inside_region))\nprint(count_points(boundary_region))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0\n0", "model_answers": [0.0, 0.0], "answer": 29.0}, {"response": "**Solution**\n```python\ndef star(a, b):\n    return (a + b) * b\n\nprint(star(3, 5) - star(5, 3))\n```", "solution": "```python\ndef star(a, b):\n    return (a + b) * b\n\nprint(star(3, 5) - star(5, 3))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "16", "model_answers": [16.0], "answer": 16.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\nf = 9*x**2 + 18*x + 7\nf_prime = sympy.diff(f, x)\nprint(f_prime)\nx_min = sympy.solve(f_prime, x)\nprint(x_min)\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\nf = 9*x**2 + 18*x + 7\nf_prime = sympy.diff(f, x)\nprint(f_prime)\nx_min = sympy.solve(f_prime, x)\nprint(x_min)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "18*x + 18\n[-1]", "model_answers": [18.0, 18.0, -1.0], "answer": -1.0}, {"response": "**Solution**\n```python\n# Anna's time\nan = 2/5\n# Bertram's time\nbt = 3/5\n# Carli's time\ncl = 4/5\n# David's time\ndv = 1/5\n\n# Anna + Bertram + Carli + David\nan_bt_cl_dv = an + bt + cl + dv\n# Anna + Carli + David\nan_cl_dv = an + cl + dv\n# Bertram + Carli + David\nbt_cl_dv = bt + cl + dv\n# Anna + Bertram\nan_bt = an + bt\n# Anna + Carli\nan_cl = an + cl\n# Anna + David\nan_dv = an + dv\n\nprint(an_bt_cl_dv)\nprint(an_cl_dv)\nprint(bt_cl_dv)\nprint(an_bt)\nprint(an_cl)\nprint(an_dv)\n```", "solution": "```python\n# Anna's time\nan = 2/5\n# Bertram's time\nbt = 3/5\n# Carli's time\ncl = 4/5\n# David's time\ndv = 1/5\n\n# Anna + Bertram + Carli + David\nan_bt_cl_dv = an + bt + cl + dv\n# Anna + Carli + David\nan_cl_dv = an + cl + dv\n# Bertram + Carli + David\nbt_cl_dv = bt + cl + dv\n# Anna + Bertram\nan_bt = an + bt\n# Anna + Carli\nan_cl = an + cl\n# Anna + David\nan_dv = an + dv\n\nprint(an_bt_cl_dv)\nprint(an_cl_dv)\nprint(bt_cl_dv)\nprint(an_bt)\nprint(an_cl)\nprint(an_dv)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.0\n1.4000000000000001\n1.5999999999999999\n1.0\n1.2000000000000002\n0.6000000000000001", "model_answers": [2.0, 1.4000000000000001, 1.5999999999999999, 1.0, 1.2000000000000002, 0.6000000000000001], "answer": 28.0}, {"response": "**Solution**\n```python\nb = -1\nc = -3\nx_min = -2\nx_max = 3\n\ndef f(x):\n    return x**2 + b*x + c\n\ndef f_positive(x):\n    return f(x) > 0\n\ndef f_negative(x):\n    return f(x) < 0\n\ndef f_zero(x):\n    return f(x) == 0\n\ndef find_root(f, a, b, f_positive):\n    while abs(a - b) > 1e-10:\n        mid = (a + b) / 2\n        if f_positive(mid):\n            a = mid\n        else:\n            b = mid\n    return mid\n\nprint(find_root(f_positive, x_min, x_max, f_positive))\n```", "solution": "```python\nb = -1\nc = -3\nx_min = -2\nx_max = 3\n\ndef f(x):\n    return x**2 + b*x + c\n\ndef f_positive(x):\n    return f(x) > 0\n\ndef f_negative(x):\n    return f(x) < 0\n\ndef f_zero(x):\n    return f(x) == 0\n\ndef find_root(f, a, b, f_positive):\n    while abs(a - b) > 1e-10:\n        mid = (a + b) / 2\n        if f_positive(mid):\n            a = mid\n        else:\n            b = mid\n    return mid\n\nprint(find_root(f_positive, x_min, x_max, f_positive))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-1.3027756376977777", "model_answers": [-1.3027756376977777], "answer": -7.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\n\ndef f(x):\n    if x >= 0:\n        return -sqrt(x)\n    else:\n        return x**2\n\ndef g(x):\n    return f(f(x))\n\ndef h(x):\n    return g(g(x))\n\ndef i(x):\n    return h(h(x))\n\nprint(i(512))\n```", "solution": "```python\nfrom sympy import sqrt\n\ndef f(x):\n    if x >= 0:\n        return -sqrt(x)\n    else:\n        return x**2\n\ndef g(x):\n    return f(f(x))\n\ndef h(x):\n    return g(g(x))\n\ndef i(x):\n    return h(h(x))\n\nprint(i(512))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "512", "model_answers": [512.0], "answer": 16.0}, {"response": "**Solution**\n```python\nA = 1\nB = -2\nC = 1\nr = 5\nprint(A+B+C+r)\n```", "solution": "```python\nA = 1\nB = -2\nC = 1\nr = 5\nprint(A+B+C+r)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5", "model_answers": [5.0], "answer": 21.0}, {"response": "**Solution**\n```python\nimport sympy\nprint(sympy.sqrt(5**5 + 5**5 + 5**5 + 5**5 + 5**5))\n```", "solution": "```python\nimport sympy\nprint(sympy.sqrt(5**5 + 5**5 + 5**5 + 5**5 + 5**5))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "125", "model_answers": [125.0], "answer": 125.0}, {"response": "**Solution**\n```python\nage_john = 27\nage_father = age_john - 27\nsum_age_john = sum([int(x) for x in str(age_john)])\nsum_age_father = sum([int(x) for x in str(age_father)])\nprint(age_father)\n```", "solution": "```python\nage_john = 27\nage_father = age_john - 27\nsum_age_john = sum([int(x) for x in str(age_john)])\nsum_age_father = sum([int(x) for x in str(age_father)])\nprint(age_father)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 41.0}, {"response": "**Solution**\n```python\ndef f(n):\n    if n % 2 == 0:\n        return n**2 - 3*n + 1\n    else:\n        return n**2 + 1\n\ndef solve(n):\n    return f(f(f(f(f(f(n))))))\n\nprint(solve(2))\n```", "solution": "```python\ndef f(n):\n    if n % 2 == 0:\n        return n**2 - 3*n + 1\n    else:\n        return n**2 + 1\n\ndef solve(n):\n    return f(f(f(f(f(f(n))))))\n\nprint(solve(2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2", "model_answers": [2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\n\ndenominator = sqrt(2) + sqrt(8) + sqrt(32)\ndenominator = denominator.cancel()\n\nprint(denominator)\n```", "solution": "```python\nfrom sympy import sqrt\n\ndenominator = sqrt(2) + sqrt(8) + sqrt(32)\ndenominator = denominator.cancel()\n\nprint(denominator)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7*sqrt(2)", "model_answers": [7.0, 2.0], "answer": 16.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\na = 3 / sqrt(16)\nb = 1 / sqrt(3)\n\nprint(a + b)\n\n```", "solution": "```python\nfrom sympy import sqrt\na = 3 / sqrt(16)\nb = 1 / sqrt(3)\n\nprint(a + b)\n\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "sqrt(3)/3 + 3/4", "model_answers": [3.0, 3.0, 3.0, 4.0], "answer": 5.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.symbols('x')\nsolution = sympy.solve(sympy.Eq((3/4)**x, 81/256), x)\nprint(solution)\n```", "solution": "```python\nimport sympy\nx = sympy.symbols('x')\nsolution = sympy.solve(sympy.Eq((3/4)**x, 81/256), x)\nprint(solution)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "[4.00000000000000]", "model_answers": [4.0], "answer": 4.0}, {"response": "**Solution**\n```python\nimport sympy as sy\nf = sy.symbols('f')\neq = sy.simplify(f*(1+2*f)-2*(1+2*f+f**2)+3*(1+2*f+f**2+f**3)-4*(1+2*f+f**2+f**3+f**4))\nprint(eq.coeff(f))\n```", "solution": "```python\nimport sympy as sy\nf = sy.symbols('f')\neq = sy.simplify(f*(1+2*f)-2*(1+2*f+f**2)+3*(1+2*f+f**2+f**3)-4*(1+2*f+f**2+f**3+f**4))\nprint(eq.coeff(f))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-5", "model_answers": [-5.0], "answer": -4.0}, {"response": "**Solution**\n```python\nf = {0: 0, 1: 0, 2: 1, 3: 3, 4: 6}\ng = {x: f[x] - x for x in f}\nprint(len(set(g.values())))\n```", "solution": "```python\nf = {0: 0, 1: 0, 2: 1, 3: 3, 4: 6}\ng = {x: f[x] - x for x in f}\nprint(len(set(g.values())))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3", "model_answers": [3.0], "answer": 3.0}, {"response": "**Solution**\n```python\nimport math\n\na = 2\nb = 3\n\nwhile 2*a + b <= 5*a - 4:\n    a += 1\n    b += 1\n\nprint(2*a + b)\n```", "solution": "```python\nimport math\n\na = 2\nb = 3\n\nwhile 2*a + b <= 5*a - 4:\n    a += 1\n    b += 1\n\nprint(2*a + b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7", "model_answers": [7.0], "answer": 208.0}, {"response": "**Solution**\n```python\nn = 7\nprint(n)\n```", "solution": "```python\nn = 7\nprint(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7", "model_answers": [7.0], "answer": 6.0}, {"response": "**Solution**\n```python\ndef absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x\n\ndef find_solutions(n):\n    solutions = []\n    for i in range(1, n + 1):\n        if absolute_value(2 - i) == 3:\n            solutions.append(i)\n    return solutions\n\nprint(find_solutions(10))\n```", "solution": "```python\ndef absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x\n\ndef find_solutions(n):\n    solutions = []\n    for i in range(1, n + 1):\n        if absolute_value(2 - i) == 3:\n            solutions.append(i)\n    return solutions\n\nprint(find_solutions(10))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[5]", "model_answers": [5.0], "answer": 4.0}, {"response": "**Solution**\n```python\nfrom sympy import symbols, expand, factor\nx = symbols('x')\nf = 4*(x + 7)*(2 - x)\nprint(expand(f))\nprint(factor(f))\n```", "solution": "```python\nfrom sympy import symbols, expand, factor\nx = symbols('x')\nf = 4*(x + 7)*(2 - x)\nprint(expand(f))\nprint(factor(f))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-4*x**2 - 20*x + 56\n-4*(x - 2)*(x + 7)", "model_answers": [-4.0, 2.0, 20.0, 56.0, -4.0, 2.0, 7.0], "answer": 81.0}, {"response": "**Solution**\n```python\ntotal_chimes = 24\nprint(total_chimes)\n```", "solution": "```python\ntotal_chimes = 24\nprint(total_chimes)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "24", "model_answers": [24.0], "answer": 78.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return x + 2\n\ndef f_inv(x):\n    return x - 2\n\ndef f_inv_11():\n    return f_inv(11)\n\nprint(f_inv_11())\n```", "solution": "```python\ndef f(x):\n    return x + 2\n\ndef f_inv(x):\n    return x - 2\n\ndef f_inv_11():\n    return f_inv(11)\n\nprint(f_inv_11())\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "9", "model_answers": [9.0], "answer": 81.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return x**2\n\nprint(sum(f(f(i)) for i in range(1, 10)))\n```", "solution": "```python\ndef f(x):\n    return x**2\n\nprint(sum(f(f(i)) for i in range(1, 10)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15333", "model_answers": [15333.0], "answer": 45.0}, {"response": "**Solution**\n```python\nprint(8 * 6 ** 2 - 3 * 11)\n```", "solution": "```python\nprint(8 * 6 ** 2 - 3 * 11)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "255", "model_answers": [255.0], "answer": 6.0}, {"response": "**Solution**\n```python\nf = lambda x: (2*x-6)**0.5/(x-3)\nsol = f(1)\nprint(sol)\n```", "solution": "```python\nf = lambda x: (2*x-6)**0.5/(x-3)\nsol = f(1)\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(-6.123233995736766e-17-1j)", "model_answers": [-6.123233995736766, -17.0, -1.0], "answer": 4.0}, {"response": "**Solution**\n```python\nx = 3\nprint(x)\n```", "solution": "```python\nx = 3\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": 6.0}, {"response": "**Solution**\n```python\nfrom sympy import sympify\n\nexpr = sympify('(sqrt(3)*(2*x-4))/(sqrt(3)*(x+4))')\nx = expr.evalf()\nprint(x)\n```", "solution": "```python\nfrom sympy import sympify\n\nexpr = sympify('(sqrt(3)*(2*x-4))/(sqrt(3)*(x+4))')\nx = expr.evalf()\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(2.0*x - 4.0)/(x + 4.0)", "model_answers": [2.0, 4.0, 4.0], "answer": -6.0}, {"response": "**Solution**\n```python\na = 33 - 14\nb = 14\nprint(a+b)\n```", "solution": "```python\na = 33 - 14\nb = 14\nprint(a+b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "33", "model_answers": [33.0], "answer": 89.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\nx = 5\ny = 2\n\nprint(sqrt(x**3 - 2**y))\n```", "solution": "```python\nfrom math import sqrt\nx = 5\ny = 2\n\nprint(sqrt(x**3 - 2**y))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "11.0", "model_answers": [11.0], "answer": 11.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\nroots = solve(x**2 + 7*x - 2, x)\nalpha, beta = roots\nalpha_beta = alpha**2 + beta**2\nprint(alpha_beta)\n```", "solution": "```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\nroots = solve(x**2 + 7*x - 2, x)\nalpha, beta = roots\nalpha_beta = alpha**2 + beta**2\nprint(alpha_beta)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(-7/2 + sqrt(57)/2)**2 + (-sqrt(57)/2 - 7/2)**2", "model_answers": [-7.0, 2.0, 57.0, 2.0, 2.0, 57.0, 2.0, 7.0, 2.0, 2.0], "answer": 53.0}, {"response": "**Solution**\n```python\nprint(5 * 1 + 4)\n```", "solution": "```python\nprint(5 * 1 + 4)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "9", "model_answers": [9.0], "answer": 9.0}, {"response": "**Solution**\n```python\ns6 = 2222 + 1010 * 5\ns7 = s6 + 1010\nprint(s6 + s7)\n```", "solution": "```python\ns6 = 2222 + 1010 * 5\ns7 = s6 + 1010\nprint(s6 + s7)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "15554", "model_answers": [15554.0], "answer": 15554.0}, {"response": "**Solution**\n```python\nx_intercept = 3\nprint(x_intercept)\n```", "solution": "```python\nx_intercept = 3\nprint(x_intercept)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3", "model_answers": [3.0], "answer": 3.0}, {"response": "**Solution**\n```python\nnew_area = (3491 - 60) * (3491 + 60)\nprint(new_area - 3491 * 3491)\n```", "solution": "```python\nnew_area = (3491 - 60) * (3491 + 60)\nprint(new_area - 3491 * 3491)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-3600", "model_answers": [-3600.0], "answer": 3600.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\nf = x**4\ng = 7*x**2 - 10\nsolutions = sympy.solve([f-g], x)\nprint(solutions)\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\nf = x**4\ng = 7*x**2 - 10\nsolutions = sympy.solve([f-g], x)\nprint(solutions)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(-sqrt(2),), (sqrt(2),), (-sqrt(5),), (sqrt(5),)]", "model_answers": [2.0, 2.0, 5.0, 5.0], "answer": 3.0}, {"response": "**Solution**\n```python\nprint((15+ 5) * (15- 5))\n```", "solution": "```python\nprint((15+ 5) * (15- 5))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "200", "model_answers": [200.0], "answer": 200.0}, {"response": "**Solution**\n```python\nf = lambda x: 2 / (x + 1)\nf_inv = lambda y: 2 / y - 1\nprint(f_inv(1 / 5))\n```", "solution": "```python\nf = lambda x: 2 / (x + 1)\nf_inv = lambda y: 2 / y - 1\nprint(f_inv(1 / 5))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "9.0", "model_answers": [9.0], "answer": 9.0}, {"response": "**Solution**\n```python\nx = -6\ny = -8\ncenter_sum = x + y\nprint(center_sum)\n```", "solution": "```python\nx = -6\ny = -8\ncenter_sum = x + y\nprint(center_sum)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-14", "model_answers": [-14.0], "answer": -7.0}, {"response": "**Solution**\n```python\nx = 4\ny = 3\nprint((2 * x + y) / (3 * x - 2 * y))\n```", "solution": "```python\nx = 4\ny = 3\nprint((2 * x + y) / (3 * x - 2 * y))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.8333333333333333", "model_answers": [1.8333333333333333], "answer": 10.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\n\ndist = sympy.sqrt(x**2 + (x + 1)**2) - 5\ndist = dist.subs(x, 2)\n\nprint(dist.expand())\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\n\ndist = sympy.sqrt(x**2 + (x + 1)**2) - 5\ndist = dist.subs(x, 2)\n\nprint(dist.expand())\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-5 + sqrt(13)", "model_answers": [-5.0, 13.0], "answer": -15.0}, {"response": "**Solution**\n```python\nprint(abs(23/9))\n```", "solution": "```python\nprint(abs(23/9))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.5555555555555554", "model_answers": [2.5555555555555554], "answer": 2.0}, {"response": "**Solution**\n```python\nsmaller = 7 / (14 + y)\nlarger = 14 / (7 + x)\nproduct = 56\nx = smaller * (larger - 1)\ny = larger * (smaller - 1)\nprint(x)\n```", "solution": "```python\nsmaller = 7 / (14 + y)\nlarger = 14 / (7 + x)\nproduct = 56\nx = smaller * (larger - 1)\ny = larger * (smaller - 1)\nprint(x)\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 2.0}, {"response": "**Solution**\n```python\na = 3\nb = 11\nprint(b-a)\n```", "solution": "```python\na = 3\nb = 11\nprint(b-a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 6.0}, {"response": "**Solution**\n```python\ndef g(x):\n    return 2*x-1\n\ndef f(x):\n    return g(g(x))-g(x)\n\nprint(f(3))\n```", "solution": "```python\ndef g(x):\n    return 2*x-1\n\ndef f(x):\n    return g(g(x))-g(x)\n\nprint(f(3))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4", "model_answers": [4.0], "answer": 4.0}, {"response": "**Solution**\n```python\nd = 8 / 9 * 6\nprint(d)\n```", "solution": "```python\nd = 8 / 9 * 6\nprint(d)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5.333333333333333", "model_answers": [5.333333333333333], "answer": 12.0}, {"response": "**Solution**\n```python\nn = 4\nwhile n <= 20:\n    n += 2\n    print(n)\n```", "solution": "```python\nn = 4\nwhile n <= 20:\n    n += 2\n    print(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6\n8\n10\n12\n14\n16\n18\n20\n22", "model_answers": [6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0, 22.0], "answer": 9.0}, {"response": "**Solution**\n```python\nyears = 10000 / 650\nprint(years)\n```", "solution": "```python\nyears = 10000 / 650\nprint(years)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15.384615384615385", "model_answers": [15.384615384615385], "answer": 19.0}, {"response": "**Solution**\n```python\nx = 3/2 + 5/2\ny = 1\nprint(x, y)\n```", "solution": "```python\nx = 3/2 + 5/2\ny = 1\nprint(x, y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4.0 1", "model_answers": [4.0, 1.0], "answer": 5.0}, {"response": "**Solution**\n```python\na = 3\nb = 2\nc = 1\nprint(a+b+c)\n```", "solution": "```python\na = 3\nb = 2\nc = 1\nprint(a+b+c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": 8.0}, {"response": "**Solution**\n```python\nA = 24\nB = 2\nC = -19\n\nab = (A*B)\nac = (A*C)\nbc = (B*C)\n\nabc = ab - ac + bc\n\nprint(abc)\n```", "solution": "```python\nA = 24\nB = 2\nC = -19\n\nab = (A*B)\nac = (A*C)\nbc = (B*C)\n\nabc = ab - ac + bc\n\nprint(abc)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "466", "model_answers": [466.0], "answer": -9.0}, {"response": "**Solution**\n```python\nimport sympy as sym\nx, y, z = sym.symbols('x y z')\neq1 = 3*x + 4*y - 12*z - 10\neq2 = -2*x - 3*y + 9*z - 4\nsol = sym.solve([eq1, eq2], [x, y])\nprint(sol)\n```", "solution": "```python\nimport sympy as sym\nx, y, z = sym.symbols('x y z')\neq1 = 3*x + 4*y - 12*z - 10\neq2 = -2*x - 3*y + 9*z - 4\nsol = sym.solve([eq1, eq2], [x, y])\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "{x: 46, y: 3*z - 32}", "model_answers": [46.0, 3.0, 32.0], "answer": 14.0}, {"response": "**Solution**\n```python\nfrom math import log\nlog_8 = log(64, 8)\nprint(log_8)\n```", "solution": "```python\nfrom math import log\nlog_8 = log(64, 8)\nprint(log_8)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.0", "model_answers": [2.0], "answer": 5.0}, {"response": "**Solution**\n```python\np = -14\nq = -17\nprint(p + q)\n```", "solution": "```python\np = -14\nq = -17\nprint(p + q)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-31", "model_answers": [-31.0], "answer": -13.5}, {"response": "**Solution**\n```python\nfrom math import log\n\ndef count_endpoints(n):\n    if n == 1:\n        return 2\n    else:\n        return 2 + 2 * (int(log(n, 2)) - 1)\n\nprint(count_endpoints(16))\n```", "solution": "```python\nfrom math import log\n\ndef count_endpoints(n):\n    if n == 1:\n        return 2\n    else:\n        return 2 + 2 * (int(log(n, 2)) - 1)\n\nprint(count_endpoints(16))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 48.0}, {"response": "**Solution**\n```python\na, d, e = -2, -20, -53\nsum = a + d + e\nprint(sum)\n```", "solution": "```python\na, d, e = -2, -20, -53\nsum = a + d + e\nprint(sum)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-75", "model_answers": [-75.0], "answer": 0.0}, {"response": "**Solution**\n```python\na = 2000\nb = -1\n\na = a / 10**b\n\nprint(a)\n```", "solution": "```python\na = 2000\nb = -1\n\na = a / 10**b\n\nprint(a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "20000.0", "model_answers": [20000.0], "answer": -6.5}, {"response": "**Solution**\n```python\n# smallest positive four-digit integer that is the product of two consecutive integers\nn = 9999\nwhile n > 999:\n    if n % 9 == 0:\n        break\n    n -= 1\nprint(n)\n```", "solution": "```python\n# smallest positive four-digit integer that is the product of two consecutive integers\nn = 9999\nwhile n > 999:\n    if n % 9 == 0:\n        break\n    n -= 1\nprint(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "9999", "model_answers": [9999.0], "answer": 1056.0}, {"response": "**Solution**\n```python\nfrom sympy import solve\nx = solve(x + 1/(x - 1) - x + 2/(x + 2))[0]\nprint(x)\n```", "solution": "```python\nfrom sympy import solve\nx = solve(x + 1/(x - 1) - x + 2/(x + 2))[0]\nprint(x)\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 0.0}, {"response": "**Solution**\n```python\n# Use sympy to solve the equation for the volume\nfrom sympy import solve, symbols\n\n# Define the variables\na, b, c = symbols('a b c')\n\n# Define the edge lengths\nL = [a, b, c]\n\n# Define the area of the faces\nA = [30, 180, 24]\n\n# Define the equation for the volume\nV = a * b * c\n\n# Define the equation for the area of the faces\nF = sum(A)\n\n# Define the equation for the sum of the edge lengths\nS = sum(L)\n\n# Solve the equations for the variables\nsolutions = solve([V - F, S], [a, b, c])\n\n# Print the solution\nprint(solutions)\n```", "solution": "```python\n# Use sympy to solve the equation for the volume\nfrom sympy import solve, symbols\n\n# Define the variables\na, b, c = symbols('a b c')\n\n# Define the edge lengths\nL = [a, b, c]\n\n# Define the area of the faces\nA = [30, 180, 24]\n\n# Define the equation for the volume\nV = a * b * c\n\n# Define the equation for the area of the faces\nF = sum(A)\n\n# Define the equation for the sum of the edge lengths\nS = sum(L)\n\n# Solve the equations for the variables\nsolutions = solve([V - F, S], [a, b, c])\n\n# Print the solution\nprint(solutions)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(-c/2 - sqrt(c*(c**3 - 936))/(2*c), -c/2 + sqrt(c*(c**3 - 936))/(2*c), c), (-c/2 + sqrt(c*(c**3 - 936))/(2*c), -c/2 - sqrt(c*(c**3 - 936))/(2*c), c)]", "model_answers": [2.0, 3.0, 936.0, 2.0, 2.0, 3.0, 936.0, 2.0, 2.0, 3.0, 936.0, 2.0, 2.0, 3.0, 936.0, 2.0], "answer": 360.0}, {"response": "**Solution**\n```python\nm, n = 0, 0\nwhile m*m + n*n < 5:\n    m, n = m + 1, n + 1\nprint(m + n)\n```", "solution": "```python\nm, n = 0, 0\nwhile m*m + n*n < 5:\n    m, n = m + 1, n + 1\nprint(m + n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4", "model_answers": [4.0], "answer": 23.0}, {"response": "**Solution**\n```python\nhours_needed = 3 / 12\nnum_people_needed = 5 * hours_needed\nprint(num_people_needed)\n```", "solution": "```python\nhours_needed = 3 / 12\nnum_people_needed = 5 * hours_needed\nprint(num_people_needed)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.25", "model_answers": [1.25], "answer": 15.0}, {"response": "**Solution**\n```python\nnum_meals = 18 / 12\nprint(num_meals)\n```", "solution": "```python\nnum_meals = 18 / 12\nprint(num_meals)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.5", "model_answers": [1.5], "answer": 8.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return 2 * x + 2\n\nprint(f(10))\n```", "solution": "```python\ndef f(x):\n    return 2 * x + 2\n\nprint(f(10))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "22", "model_answers": [22.0], "answer": 3.2}, {"response": "**Solution**\n```python\nx = -7\ny = 0\nprint(x)\n```", "solution": "```python\nx = -7\ny = 0\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-7", "model_answers": [-7.0], "answer": -18.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol\nx = Symbol('x')\nf = x**3\nf_inv = 8**(1/3)\nprint(f_inv / (f_inv**(-1)))\n```", "solution": "```python\nfrom sympy import Symbol\nx = Symbol('x')\nf = x**3\nf_inv = 8**(1/3)\nprint(f_inv / (f_inv**(-1)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4.0", "model_answers": [4.0], "answer": 1024.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\nx = 2 + sqrt(2)\nprint(x)\n```", "solution": "```python\nfrom math import sqrt\nx = 2 + sqrt(2)\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3.414213562373095", "model_answers": [3.414213562373095], "answer": 1.0}, {"response": "**Solution**\n```python\nfrom math import ceil, sqrt\nprint(ceil(sqrt(20)) ** 2)\n```", "solution": "```python\nfrom math import ceil, sqrt\nprint(ceil(sqrt(20)) ** 2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "25", "model_answers": [25.0], "answer": 25.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return 5*x**2 + 3*x + 4\n\nprint(f(-2))\n```", "solution": "```python\ndef f(x):\n    return 5*x**2 + 3*x + 4\n\nprint(f(-2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "18", "model_answers": [18.0], "answer": 18.0}, {"response": "**Solution**\n```python\n# 120% of 30 = 36\n# 130% of 20 = 26\n# 36 - 26 = 10\nprint(10)\n```", "solution": "```python\n# 120% of 30 = 36\n# 130% of 20 = 26\n# 36 - 26 = 10\nprint(10)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "10", "model_answers": [10.0], "answer": 10.0}, {"response": "**Solution**\n```python\nprint((13 + 5) * (13 - 5))\n```", "solution": "```python\nprint((13 + 5) * (13 - 5))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "144", "model_answers": [144.0], "answer": 144.0}, {"response": "**Solution**\n```python\nx = range(-10, 0)\ny = [((x+2)**4)-100 for x in x]\nprint(len(y))\n```", "solution": "```python\nx = range(-10, 0)\ny = [((x+2)**4)-100 for x in x]\nprint(len(y))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "10", "model_answers": [10.0], "answer": 5.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\n\ndenominator = 1 + sqrt(2) - sqrt(3)\nsimplified_denominator = sqrt(2) + sqrt(3) + 1\n\nprint(simplified_denominator)\n```", "solution": "```python\nfrom sympy import sqrt\n\ndenominator = 1 + sqrt(2) - sqrt(3)\nsimplified_denominator = sqrt(2) + sqrt(3) + 1\n\nprint(simplified_denominator)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1 + sqrt(2) + sqrt(3)", "model_answers": [1.0, 2.0, 3.0], "answer": 12.0}, {"response": "**Solution**\n```python\nfor x in range(1, 10):\n    if x**2 + 6**2 == 10**2:\n        print(x)\n```", "solution": "```python\nfor x in range(1, 10):\n    if x**2 + 6**2 == 10**2:\n        print(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 0.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\n# Get the intersection point\nintersection = np.roots([-2, 1, 1])\n\n# Get b\nb = intersection[0] - 6*intersection[0]\nprint(b)\n```", "solution": "```python\nimport numpy as np\n\n# Get the intersection point\nintersection = np.roots([-2, 1, 1])\n\n# Get b\nb = intersection[0] - 6*intersection[0]\nprint(b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-5.0", "model_answers": [-5.0], "answer": 3.0}, {"response": "**Solution**\n```python\ny = 2 * (-2) + 6\nprint(y)\n```", "solution": "```python\ny = 2 * (-2) + 6\nprint(y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 14.0}, {"response": "**Solution**\n```python\nfrom math import fabs\n\nx_min = -3\nx_max = 3\ny_min = -3\ny_max = 3\n\narea = 0\n\nfor x in range(x_min, x_max + 1):\n    for y in range(y_min, y_max + 1):\n        if y >= fabs(x) and y <= -fabs(x) + 3:\n            area += 1\n\nprint(area / (x_max - x_min + 1) / (y_max - y_min + 1))\n```", "solution": "```python\nfrom math import fabs\n\nx_min = -3\nx_max = 3\ny_min = -3\ny_max = 3\n\narea = 0\n\nfor x in range(x_min, x_max + 1):\n    for y in range(y_min, y_max + 1):\n        if y >= fabs(x) and y <= -fabs(x) + 3:\n            area += 1\n\nprint(area / (x_max - x_min + 1) / (y_max - y_min + 1))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.16326530612244897", "model_answers": [0.16326530612244897], "answer": 4.5}, {"response": "**Solution**\n```python\nfrom sympy import S\n\ndef find_sum(n):\n    return S(n*(n+1))/2\n\ndef find_sum_of_integers(n):\n    return find_sum(n-1)\n\ndef find_all_integers(n):\n    return [x for x in range(1, n+1) if abs(x) + 1 > 7 and abs(x+1) <= 7]\n\ndef find_sum_of_all_integers(n):\n    return sum(find_all_integers(n))\n\nn = 7\nprint(find_sum_of_all_integers(n))\n```", "solution": "```python\nfrom sympy import S\n\ndef find_sum(n):\n    return S(n*(n+1))/2\n\ndef find_sum_of_integers(n):\n    return find_sum(n-1)\n\ndef find_all_integers(n):\n    return [x for x in range(1, n+1) if abs(x) + 1 > 7 and abs(x+1) <= 7]\n\ndef find_sum_of_all_integers(n):\n    return sum(find_all_integers(n))\n\nn = 7\nprint(find_sum_of_all_integers(n))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": -15.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\nf = x**2 - 14*x + 3\nprint(f.subs(x, 0))\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\nf = x**2 - 14*x + 3\nprint(f.subs(x, 0))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": 7.0}, {"response": "**Solution**\n```python\nfeather_cost = 932 - 1402 + 1402\ngold_cost = 932 - 1402 + 1402\nfeather_unit_cost = feather_cost / 14\ngold_unit_cost = gold_cost / 14\nfeather_5_pound_cost = feather_unit_cost * 5\ngold_5_pound_cost = gold_unit_cost * 5\nprint(feather_5_pound_cost, gold_5_pound_cost)\n```", "solution": "```python\nfeather_cost = 932 - 1402 + 1402\ngold_cost = 932 - 1402 + 1402\nfeather_unit_cost = feather_cost / 14\ngold_unit_cost = gold_cost / 14\nfeather_5_pound_cost = feather_unit_cost * 5\ngold_5_pound_cost = gold_unit_cost * 5\nprint(feather_5_pound_cost, gold_5_pound_cost)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "332.85714285714283 332.85714285714283", "model_answers": [332.85714285714283, 332.85714285714283], "answer": 2300.0}, {"response": "**Solution**\n```python\nimport sympy as sp\nx = sp.Symbol('x')\ny = x**2 - 8*x + 5\nk = y.subs(x, 0)\nprint(k)\n```", "solution": "```python\nimport sympy as sp\nx = sp.Symbol('x')\ny = x**2 - 8*x + 5\nk = y.subs(x, 0)\nprint(k)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5", "model_answers": [5.0], "answer": -8.0}, {"response": "**Solution**\n```python\ndef consecutive_sum(n):\n    return sum(range(2, n + 1, 2))\n\ndef consecutive_count(n):\n    return sum(range(1, n + 1))\n\ndef consecutive_sum_diff(n):\n    return consecutive_sum(n) - consecutive_count(n)\n\ndef consecutive_sum_diff_8(n):\n    return consecutive_sum_diff(8) - consecutive_sum_diff(n)\n\ndef consecutive_even_smallest(n):\n    return consecutive_sum_diff_8(n) - consecutive_sum_diff(n)\n\nprint(consecutive_even_smallest(5))\n```", "solution": "```python\ndef consecutive_sum(n):\n    return sum(range(2, n + 1, 2))\n\ndef consecutive_count(n):\n    return sum(range(1, n + 1))\n\ndef consecutive_sum_diff(n):\n    return consecutive_sum(n) - consecutive_count(n)\n\ndef consecutive_sum_diff_8(n):\n    return consecutive_sum_diff(8) - consecutive_sum_diff(n)\n\ndef consecutive_even_smallest(n):\n    return consecutive_sum_diff_8(n) - consecutive_sum_diff(n)\n\nprint(consecutive_even_smallest(5))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 8.0}, {"response": "**Solution**\n```python\nx = 3\ny = 2\nprint((2*x**3 - 3*y**2)/6)\n```", "solution": "```python\nx = 3\ny = 2\nprint((2*x**3 - 3*y**2)/6)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "7.0", "model_answers": [7.0], "answer": 7.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\nx = 7\ny = sqrt(19)\nprint(x**2 + y**2)\n```", "solution": "```python\nfrom math import sqrt\nx = 7\ny = sqrt(19)\nprint(x**2 + y**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "68.0", "model_answers": [68.0], "answer": 158.0}, {"response": "**Solution**\n```python\nx = 3\ny = 4\nnum_oranges = x // y\nprint(num_oranges)\n```", "solution": "```python\nx = 3\ny = 4\nnum_oranges = x // y\nprint(num_oranges)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 30.0}, {"response": "**Solution**\n```python\navg_a_2b = 7\navg_a_2c = 8\navg_a = (avg_a_2b + avg_a_2c) / 2\nprint(avg_a)\n```", "solution": "```python\navg_a_2b = 7\navg_a_2c = 8\navg_a = (avg_a_2b + avg_a_2c) / 2\nprint(avg_a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7.5", "model_answers": [7.5], "answer": 5.0}, {"response": "**Solution**\n```python\na = -2\nb = 4\nc = 5\n\nk = b**2 - 4 * a * c\nprint(k)\n```", "solution": "```python\na = -2\nb = 4\nc = 5\n\nk = b**2 - 4 * a * c\nprint(k)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "56", "model_answers": [56.0], "answer": 7.0}, {"response": "**Solution**\n```python\nimport sympy as sym\n\nl = sym.Line((1,2), (19,4))\np = l.projection((20,0))\nprint(p)\n```", "solution": "```python\nimport sympy as sym\n\nl = sym.Line((1,2), (19,4))\np = l.projection((20,0))\nprint(p)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "Point2D(1603/82, 333/82)", "model_answers": [2.0, 1603.0, 82.0, 333.0, 82.0], "answer": 7.0}, {"response": "**Solution**\n```python\nn = 512 / 255\nprint(n)\n```", "solution": "```python\nn = 512 / 255\nprint(n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.007843137254902", "model_answers": [2.007843137254902], "answer": 8.0}, {"response": "**Solution**\n```python\nprint((1002 ** 2) - (502 ** 2) + (298 ** 2) - (202 ** 2))\n```", "solution": "```python\nprint((1002 ** 2) - (502 ** 2) + (298 ** 2) - (202 ** 2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "800000", "model_answers": [800000.0], "answer": 800000.0}, {"response": "**Solution**\n```python\nimport sympy as sym\n\nx, y, z = sym.symbols('x y z')\n\neq1 = sym.Eq(x + y - z, -8)\neq2 = sym.Eq(x - y + z, 18)\neq3 = sym.Eq(-x + y + z, 30)\n\nsol = sym.solve((eq1, eq2, eq3), (x, y, z))\nprint(sol)\n\n# x = -10, y = 10, z = 10\n# xyz = -10 * 10 * 10 = -1000\n```", "solution": "```python\nimport sympy as sym\n\nx, y, z = sym.symbols('x y z')\n\neq1 = sym.Eq(x + y - z, -8)\neq2 = sym.Eq(x - y + z, 18)\neq3 = sym.Eq(-x + y + z, 30)\n\nsol = sym.solve((eq1, eq2, eq3), (x, y, z))\nprint(sol)\n\n# x = -10, y = 10, z = 10\n# xyz = -10 * 10 * 10 = -1000\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "{x: 5, y: 11, z: 24}", "model_answers": [5.0, 11.0, 24.0], "answer": 1320.0}, {"response": "**Solution**\n```python\nfor m in range(1, 7):\n    print(m)\n```", "solution": "```python\nfor m in range(1, 7):\n    print(m)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1\n2\n3\n4\n5\n6", "model_answers": [1.0, 2.0, 3.0, 4.0, 5.0, 6.0], "answer": 6.0}, {"response": "**Solution**\n```python\nm = 3\nn = 7\np = 2\nprint(m + n + p)\n```", "solution": "```python\nm = 3\nn = 7\np = 2\nprint(m + n + p)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "12", "model_answers": [12.0], "answer": 84.0}, {"response": "**Solution**\n```python\n# A's portion\na_miles = 100 / 5\n\n# B's portion\nb_miles = 1.5 * a_miles\n\n# C and D's portion\nc_d_miles = 2 * (a_miles + b_miles)\n\n# E's portion\ne_miles = 10\n\ntotal_miles = a_miles + b_miles + c_d_miles + e_miles\n\nprint(total_miles)\n```", "solution": "```python\n# A's portion\na_miles = 100 / 5\n\n# B's portion\nb_miles = 1.5 * a_miles\n\n# C and D's portion\nc_d_miles = 2 * (a_miles + b_miles)\n\n# E's portion\ne_miles = 10\n\ntotal_miles = a_miles + b_miles + c_d_miles + e_miles\n\nprint(total_miles)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "160.0", "model_answers": [160.0], "answer": 18.0}, {"response": "**Solution**\n```python\nplayground_area = 200 ** 2\nprint(playground_area)\n```", "solution": "```python\nplayground_area = 200 ** 2\nprint(playground_area)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "40000", "model_answers": [40000.0], "answer": 2500.0}, {"response": "**Solution**\n```python\nfrom math import sqrt, ceil\n\nprint(ceil(-sqrt(23)))\n```", "solution": "```python\nfrom math import sqrt, ceil\n\nprint(ceil(-sqrt(23)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-4", "model_answers": [-4.0], "answer": -4.0}, {"response": "**Solution**\n```python\n# f(x) = 2x-5\n# f(f(x)) = 2(2x-5) - 5 = 4x - 10\n# f(f(x)) = 3\n\n# x = 4\nprint(4)\n```", "solution": "```python\n# f(x) = 2x-5\n# f(f(x)) = 2(2x-5) - 5 = 4x - 10\n# f(f(x)) = 3\n\n# x = 4\nprint(4)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4", "model_answers": [4.0], "answer": 3.0}, {"response": "**Solution**\n```python\na = 1\nwhile True:\n    b = a + 2\n    if (b**2 - a**2) == 128:\n        print(a * b)\n        break\n    a = b\n```", "solution": "```python\na = 1\nwhile True:\n    b = a + 2\n    if (b**2 - a**2) == 128:\n        print(a * b)\n        break\n    a = b\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1023", "model_answers": [1023.0], "answer": 1023.0}, {"response": "**Solution**\n```python\ndef least_positive_integer(n):\n    return int(n * 0.987)\n\nprint(least_positive_integer(1000))\n```", "solution": "```python\ndef least_positive_integer(n):\n    return int(n * 0.987)\n\nprint(least_positive_integer(1000))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "987", "model_answers": [987.0], "answer": 12.0}, {"response": "**Solution**\n```python\nprint(9**18)\nprint(27**24)\n```", "solution": "```python\nprint(9**18)\nprint(27**24)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "150094635296999121\n22528399544939174411840147874772641", "model_answers": [1.5009463529699914e+17, 2.252839954493917e+34], "answer": 2.0}, {"response": "**Solution**\n```python\nfrom math import gcd\n\ndef non_equi_triangles_with_side_lengths(n, a):\n    for i in range(n):\n        a_list = [a + i, a + i + 1, a + i + 2]\n        if len(set(a_list)) == 3 and gcd(a_list[0], a_list[1], a_list[2]) == 1:\n            yield a_list\n\nfor a in range(1, 60):\n    for triangle in non_equi_triangles_with_side_lengths(100, a):\n        print(triangle)\n```", "solution": "```python\nfrom math import gcd\n\ndef non_equi_triangles_with_side_lengths(n, a):\n    for i in range(n):\n        a_list = [a + i, a + i + 1, a + i + 2]\n        if len(set(a_list)) == 3 and gcd(a_list[0], a_list[1], a_list[2]) == 1:\n            yield a_list\n\nfor a in range(1, 60):\n    for triangle in non_equi_triangles_with_side_lengths(100, a):\n        print(triangle)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[1, 2, 3]\n[2, 3, 4]\n[3, 4, 5]\n[4, 5, 6]\n[5, 6, 7]\n[6, 7, 8]\n[7, 8, 9]\n[8, 9, 10]\n[9, 10, 11]\n[10, 11, 12]\n[11, 12, 13]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[2, 3, 4]\n[3, 4, 5]\n[4, 5, 6]\n[5, 6, 7]\n[6, 7, 8]\n[7, 8, 9]\n[8, 9, 10]\n[9, 10, 11]\n[10, 11, 12]\n[11, 12, 13]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[3, 4, 5]\n[4, 5, 6]\n[5, 6, 7]\n[6, 7, 8]\n[7, 8, 9]\n[8, 9, 10]\n[9, 10, 11]\n[10, 11, 12]\n[11, 12, 13]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[4, 5, 6]\n[5, 6, 7]\n[6, 7, 8]\n[7, 8, 9]\n[8, 9, 10]\n[9, 10, 11]\n[10, 11, 12]\n[11, 12, 13]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[5, 6, 7]\n[6, 7, 8]\n[7, 8, 9]\n[8, 9, 10]\n[9, 10, 11]\n[10, 11, 12]\n[11, 12, 13]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[6, 7, 8]\n[7, 8, 9]\n[8, 9, 10]\n[9, 10, 11]\n[10, 11, 12]\n[11, 12, 13]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[7, 8, 9]\n[8, 9, 10]\n[9, 10, 11]\n[10, 11, 12]\n[11, 12, 13]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[8, 9, 10]\n[9, 10, 11]\n[10, 11, 12]\n[11, 12, 13]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[9, 10, 11]\n[10, 11, 12]\n[11, 12, 13]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[10, 11, 12]\n[11, 12, 13]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[11, 12, 13]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[12, 13, 14]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[13, 14, 15]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[14, 15, 16]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[15, 16, 17]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[16, 17, 18]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[17, 18, 19]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[18, 19, 20]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[19, 20, 21]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[20, 21, 22]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[21, 22, 23]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[22, 23, 24]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[23, 24, 25]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[24, 25, 26]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[25, 26, 27]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[26, 27, 28]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[27, 28, 29]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[28, 29, 30]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[29, 30, 31]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[30, 31, 32]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[31, 32, 33]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[32, 33, 34]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[33, 34, 35]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[34, 35, 36]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[35, 36, 37]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[36, 37, 38]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[37, 38, 39]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[38, 39, 40]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[39, 40, 41]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[40, 41, 42]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[41, 42, 43]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[42, 43, 44]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[43, 44, 45]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[44, 45, 46]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[45, 46, 47]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[46, 47, 48]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[47, 48, 49]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[48, 49, 50]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[49, 50, 51]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[148, 149, 150]\n[50, 51, 52]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[148, 149, 150]\n[149, 150, 151]\n[51, 52, 53]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[148, 149, 150]\n[149, 150, 151]\n[150, 151, 152]\n[52, 53, 54]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[148, 149, 150]\n[149, 150, 151]\n[150, 151, 152]\n[151, 152, 153]\n[53, 54, 55]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[148, 149, 150]\n[149, 150, 151]\n[150, 151, 152]\n[151, 152, 153]\n[152, 153, 154]\n[54, 55, 56]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[148, 149, 150]\n[149, 150, 151]\n[150, 151, 152]\n[151, 152, 153]\n[152, 153, 154]\n[153, 154, 155]\n[55, 56, 57]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[148, 149, 150]\n[149, 150, 151]\n[150, 151, 152]\n[151, 152, 153]\n[152, 153, 154]\n[153, 154, 155]\n[154, 155, 156]\n[56, 57, 58]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[148, 149, 150]\n[149, 150, 151]\n[150, 151, 152]\n[151, 152, 153]\n[152, 153, 154]\n[153, 154, 155]\n[154, 155, 156]\n[155, 156, 157]\n[57, 58, 59]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[148, 149, 150]\n[149, 150, 151]\n[150, 151, 152]\n[151, 152, 153]\n[152, 153, 154]\n[153, 154, 155]\n[154, 155, 156]\n[155, 156, 157]\n[156, 157, 158]\n[58, 59, 60]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[148, 149, 150]\n[149, 150, 151]\n[150, 151, 152]\n[151, 152, 153]\n[152, 153, 154]\n[153, 154, 155]\n[154, 155, 156]\n[155, 156, 157]\n[156, 157, 158]\n[157, 158, 159]\n[59, 60, 61]\n[60, 61, 62]\n[61, 62, 63]\n[62, 63, 64]\n[63, 64, 65]\n[64, 65, 66]\n[65, 66, 67]\n[66, 67, 68]\n[67, 68, 69]\n[68, 69, 70]\n[69, 70, 71]\n[70, 71, 72]\n[71, 72, 73]\n[72, 73, 74]\n[73, 74, 75]\n[74, 75, 76]\n[75, 76, 77]\n[76, 77, 78]\n[77, 78, 79]\n[78, 79, 80]\n[79, 80, 81]\n[80, 81, 82]\n[81, 82, 83]\n[82, 83, 84]\n[83, 84, 85]\n[84, 85, 86]\n[85, 86, 87]\n[86, 87, 88]\n[87, 88, 89]\n[88, 89, 90]\n[89, 90, 91]\n[90, 91, 92]\n[91, 92, 93]\n[92, 93, 94]\n[93, 94, 95]\n[94, 95, 96]\n[95, 96, 97]\n[96, 97, 98]\n[97, 98, 99]\n[98, 99, 100]\n[99, 100, 101]\n[100, 101, 102]\n[101, 102, 103]\n[102, 103, 104]\n[103, 104, 105]\n[104, 105, 106]\n[105, 106, 107]\n[106, 107, 108]\n[107, 108, 109]\n[108, 109, 110]\n[109, 110, 111]\n[110, 111, 112]\n[111, 112, 113]\n[112, 113, 114]\n[113, 114, 115]\n[114, 115, 116]\n[115, 116, 117]\n[116, 117, 118]\n[117, 118, 119]\n[118, 119, 120]\n[119, 120, 121]\n[120, 121, 122]\n[121, 122, 123]\n[122, 123, 124]\n[123, 124, 125]\n[124, 125, 126]\n[125, 126, 127]\n[126, 127, 128]\n[127, 128, 129]\n[128, 129, 130]\n[129, 130, 131]\n[130, 131, 132]\n[131, 132, 133]\n[132, 133, 134]\n[133, 134, 135]\n[134, 135, 136]\n[135, 136, 137]\n[136, 137, 138]\n[137, 138, 139]\n[138, 139, 140]\n[139, 140, 141]\n[140, 141, 142]\n[141, 142, 143]\n[142, 143, 144]\n[143, 144, 145]\n[144, 145, 146]\n[145, 146, 147]\n[146, 147, 148]\n[147, 148, 149]\n[148, 149, 150]\n[149, 150, 151]\n[150, 151, 152]\n[151, 152, 153]\n[152, 153, 154]\n[153, 154, 155]\n[154, 155, 156]\n[155, 156, 157]\n[156, 157, 158]\n[157, 158, 159]\n[158, 159, 160]", "model_answers": [1.0, 2.0, 3.0, 2.0, 3.0, 4.0, 3.0, 4.0, 5.0, 4.0, 5.0, 6.0, 5.0, 6.0, 7.0, 6.0, 7.0, 8.0, 7.0, 8.0, 9.0, 8.0, 9.0, 10.0, 9.0, 10.0, 11.0, 10.0, 11.0, 12.0, 11.0, 12.0, 13.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 2.0, 3.0, 4.0, 3.0, 4.0, 5.0, 4.0, 5.0, 6.0, 5.0, 6.0, 7.0, 6.0, 7.0, 8.0, 7.0, 8.0, 9.0, 8.0, 9.0, 10.0, 9.0, 10.0, 11.0, 10.0, 11.0, 12.0, 11.0, 12.0, 13.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 3.0, 4.0, 5.0, 4.0, 5.0, 6.0, 5.0, 6.0, 7.0, 6.0, 7.0, 8.0, 7.0, 8.0, 9.0, 8.0, 9.0, 10.0, 9.0, 10.0, 11.0, 10.0, 11.0, 12.0, 11.0, 12.0, 13.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 4.0, 5.0, 6.0, 5.0, 6.0, 7.0, 6.0, 7.0, 8.0, 7.0, 8.0, 9.0, 8.0, 9.0, 10.0, 9.0, 10.0, 11.0, 10.0, 11.0, 12.0, 11.0, 12.0, 13.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 5.0, 6.0, 7.0, 6.0, 7.0, 8.0, 7.0, 8.0, 9.0, 8.0, 9.0, 10.0, 9.0, 10.0, 11.0, 10.0, 11.0, 12.0, 11.0, 12.0, 13.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 6.0, 7.0, 8.0, 7.0, 8.0, 9.0, 8.0, 9.0, 10.0, 9.0, 10.0, 11.0, 10.0, 11.0, 12.0, 11.0, 12.0, 13.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 7.0, 8.0, 9.0, 8.0, 9.0, 10.0, 9.0, 10.0, 11.0, 10.0, 11.0, 12.0, 11.0, 12.0, 13.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 8.0, 9.0, 10.0, 9.0, 10.0, 11.0, 10.0, 11.0, 12.0, 11.0, 12.0, 13.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 9.0, 10.0, 11.0, 10.0, 11.0, 12.0, 11.0, 12.0, 13.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 10.0, 11.0, 12.0, 11.0, 12.0, 13.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 11.0, 12.0, 13.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 12.0, 13.0, 14.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 13.0, 14.0, 15.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 14.0, 15.0, 16.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 15.0, 16.0, 17.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 16.0, 17.0, 18.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 17.0, 18.0, 19.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 18.0, 19.0, 20.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 19.0, 20.0, 21.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 20.0, 21.0, 22.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 21.0, 22.0, 23.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 23.0, 24.0, 25.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 24.0, 25.0, 26.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 25.0, 26.0, 27.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 26.0, 27.0, 28.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 27.0, 28.0, 29.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 28.0, 29.0, 30.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 29.0, 30.0, 31.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 30.0, 31.0, 32.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 31.0, 32.0, 33.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 32.0, 33.0, 34.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 33.0, 34.0, 35.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 34.0, 35.0, 36.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 35.0, 36.0, 37.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 36.0, 37.0, 38.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 37.0, 38.0, 39.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 38.0, 39.0, 40.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 39.0, 40.0, 41.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 40.0, 41.0, 42.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 41.0, 42.0, 43.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 42.0, 43.0, 44.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 43.0, 44.0, 45.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 44.0, 45.0, 46.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 45.0, 46.0, 47.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 46.0, 47.0, 48.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 47.0, 48.0, 49.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 48.0, 49.0, 50.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 49.0, 50.0, 51.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 148.0, 149.0, 150.0, 50.0, 51.0, 52.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 148.0, 149.0, 150.0, 149.0, 150.0, 151.0, 51.0, 52.0, 53.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 148.0, 149.0, 150.0, 149.0, 150.0, 151.0, 150.0, 151.0, 152.0, 52.0, 53.0, 54.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 148.0, 149.0, 150.0, 149.0, 150.0, 151.0, 150.0, 151.0, 152.0, 151.0, 152.0, 153.0, 53.0, 54.0, 55.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 148.0, 149.0, 150.0, 149.0, 150.0, 151.0, 150.0, 151.0, 152.0, 151.0, 152.0, 153.0, 152.0, 153.0, 154.0, 54.0, 55.0, 56.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 148.0, 149.0, 150.0, 149.0, 150.0, 151.0, 150.0, 151.0, 152.0, 151.0, 152.0, 153.0, 152.0, 153.0, 154.0, 153.0, 154.0, 155.0, 55.0, 56.0, 57.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 148.0, 149.0, 150.0, 149.0, 150.0, 151.0, 150.0, 151.0, 152.0, 151.0, 152.0, 153.0, 152.0, 153.0, 154.0, 153.0, 154.0, 155.0, 154.0, 155.0, 156.0, 56.0, 57.0, 58.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 148.0, 149.0, 150.0, 149.0, 150.0, 151.0, 150.0, 151.0, 152.0, 151.0, 152.0, 153.0, 152.0, 153.0, 154.0, 153.0, 154.0, 155.0, 154.0, 155.0, 156.0, 155.0, 156.0, 157.0, 57.0, 58.0, 59.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 148.0, 149.0, 150.0, 149.0, 150.0, 151.0, 150.0, 151.0, 152.0, 151.0, 152.0, 153.0, 152.0, 153.0, 154.0, 153.0, 154.0, 155.0, 154.0, 155.0, 156.0, 155.0, 156.0, 157.0, 156.0, 157.0, 158.0, 58.0, 59.0, 60.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 148.0, 149.0, 150.0, 149.0, 150.0, 151.0, 150.0, 151.0, 152.0, 151.0, 152.0, 153.0, 152.0, 153.0, 154.0, 153.0, 154.0, 155.0, 154.0, 155.0, 156.0, 155.0, 156.0, 157.0, 156.0, 157.0, 158.0, 157.0, 158.0, 159.0, 59.0, 60.0, 61.0, 60.0, 61.0, 62.0, 61.0, 62.0, 63.0, 62.0, 63.0, 64.0, 63.0, 64.0, 65.0, 64.0, 65.0, 66.0, 65.0, 66.0, 67.0, 66.0, 67.0, 68.0, 67.0, 68.0, 69.0, 68.0, 69.0, 70.0, 69.0, 70.0, 71.0, 70.0, 71.0, 72.0, 71.0, 72.0, 73.0, 72.0, 73.0, 74.0, 73.0, 74.0, 75.0, 74.0, 75.0, 76.0, 75.0, 76.0, 77.0, 76.0, 77.0, 78.0, 77.0, 78.0, 79.0, 78.0, 79.0, 80.0, 79.0, 80.0, 81.0, 80.0, 81.0, 82.0, 81.0, 82.0, 83.0, 82.0, 83.0, 84.0, 83.0, 84.0, 85.0, 84.0, 85.0, 86.0, 85.0, 86.0, 87.0, 86.0, 87.0, 88.0, 87.0, 88.0, 89.0, 88.0, 89.0, 90.0, 89.0, 90.0, 91.0, 90.0, 91.0, 92.0, 91.0, 92.0, 93.0, 92.0, 93.0, 94.0, 93.0, 94.0, 95.0, 94.0, 95.0, 96.0, 95.0, 96.0, 97.0, 96.0, 97.0, 98.0, 97.0, 98.0, 99.0, 98.0, 99.0, 100.0, 99.0, 100.0, 101.0, 100.0, 101.0, 102.0, 101.0, 102.0, 103.0, 102.0, 103.0, 104.0, 103.0, 104.0, 105.0, 104.0, 105.0, 106.0, 105.0, 106.0, 107.0, 106.0, 107.0, 108.0, 107.0, 108.0, 109.0, 108.0, 109.0, 110.0, 109.0, 110.0, 111.0, 110.0, 111.0, 112.0, 111.0, 112.0, 113.0, 112.0, 113.0, 114.0, 113.0, 114.0, 115.0, 114.0, 115.0, 116.0, 115.0, 116.0, 117.0, 116.0, 117.0, 118.0, 117.0, 118.0, 119.0, 118.0, 119.0, 120.0, 119.0, 120.0, 121.0, 120.0, 121.0, 122.0, 121.0, 122.0, 123.0, 122.0, 123.0, 124.0, 123.0, 124.0, 125.0, 124.0, 125.0, 126.0, 125.0, 126.0, 127.0, 126.0, 127.0, 128.0, 127.0, 128.0, 129.0, 128.0, 129.0, 130.0, 129.0, 130.0, 131.0, 130.0, 131.0, 132.0, 131.0, 132.0, 133.0, 132.0, 133.0, 134.0, 133.0, 134.0, 135.0, 134.0, 135.0, 136.0, 135.0, 136.0, 137.0, 136.0, 137.0, 138.0, 137.0, 138.0, 139.0, 138.0, 139.0, 140.0, 139.0, 140.0, 141.0, 140.0, 141.0, 142.0, 141.0, 142.0, 143.0, 142.0, 143.0, 144.0, 143.0, 144.0, 145.0, 144.0, 145.0, 146.0, 145.0, 146.0, 147.0, 146.0, 147.0, 148.0, 147.0, 148.0, 149.0, 148.0, 149.0, 150.0, 149.0, 150.0, 151.0, 150.0, 151.0, 152.0, 151.0, 152.0, 153.0, 152.0, 153.0, 154.0, 153.0, 154.0, 155.0, 154.0, 155.0, 156.0, 155.0, 156.0, 157.0, 156.0, 157.0, 158.0, 157.0, 158.0, 159.0, 158.0, 159.0, 160.0], "answer": 9.0}, {"response": "**Solution**\n```python\nprint(4 * 3)\n```", "solution": "```python\nprint(4 * 3)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "12", "model_answers": [12.0], "answer": 17.0}, {"response": "**Solution**\n```python\ntotal_value = 75\nvalue_of_dimes = 10\nvalue_of_nickels = 5\ntotal_nickels = total_value // value_of_nickels\nprint(total_nickels)\n```", "solution": "```python\ntotal_value = 75\nvalue_of_dimes = 10\nvalue_of_nickels = 5\ntotal_nickels = total_value // value_of_nickels\nprint(total_nickels)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15", "model_answers": [15.0], "answer": 7.0}, {"response": "**Solution**\n```python\nsmall_weight = 185 / 3\nlarge_weight = small_weight + 20\nprint(large_weight)\n```", "solution": "```python\nsmall_weight = 185 / 3\nlarge_weight = small_weight + 20\nprint(large_weight)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "81.66666666666666", "model_answers": [81.66666666666666], "answer": 75.0}, {"response": "**Solution**\n```python\ndef f(n):\n    if n % 2 == 0:\n        return n**2 - 4*n - 1\n    else:\n        return n**2\n\ndef g(n):\n    return f(f(f(f(n))))\n\nprint(g(4))\n```", "solution": "```python\ndef f(n):\n    if n % 2 == 0:\n        return n**2 - 4*n - 1\n    else:\n        return n**2\n\ndef g(n):\n    return f(f(f(f(n))))\n\nprint(g(4))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nfloor_11_1 = 11\nfloor_5_11_1 = 5\nprint(floor_11_1 + 2 * floor_5_11_1)\n```", "solution": "```python\nfloor_11_1 = 11\nfloor_5_11_1 = 5\nprint(floor_11_1 + 2 * floor_5_11_1)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "21", "model_answers": [21.0], "answer": 21.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.log(4, 64 ** (1 / 3))\nprint(x)\n```", "solution": "```python\nimport sympy\nx = sympy.log(4, 64 ** (1 / 3))\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.721347520444482*log(4)", "model_answers": [0.721347520444482, 4.0], "answer": 1.0}, {"response": "**Solution**\n```python\nimport math\ng = math.sqrt\nt = lambda x: 3-g(x)\nprint(t(g(16)))\n```", "solution": "```python\nimport math\ng = math.sqrt\nt = lambda x: 3-g(x)\nprint(t(g(16)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1.0", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nx = 6\nprint(x)\n```", "solution": "```python\nx = 6\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": 5.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, expand, collect\nx = Symbol('x')\nf = expand(1/(x**2-7) + 1/(x**3-8) + 1/(x**4-9))\nf = collect(f, x)\nprint(f)\n```", "solution": "```python\nfrom sympy import Symbol, expand, collect\nx = Symbol('x')\nf = expand(1/(x**2-7) + 1/(x**3-8) + 1/(x**4-9))\nf = collect(f, x)\nprint(f)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1/(x**4 - 9) + 1/(x**3 - 8) + 1/(x**2 - 7)", "model_answers": [1.0, 4.0, 9.0, 1.0, 3.0, 8.0, 1.0, 2.0, 7.0], "answer": 2.0}, {"response": "**Solution**\n```python\nfrom math import ceil, floor, sqrt\nprint(ceil(sqrt(10)) + floor(sqrt(10)))\n```", "solution": "```python\nfrom math import ceil, floor, sqrt\nprint(ceil(sqrt(10)) + floor(sqrt(10)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "7", "model_answers": [7.0], "answer": 7.0}, {"response": "**Solution**\n```python\nprint(1000 / 0.25)\n```", "solution": "```python\nprint(1000 / 0.25)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4000.0", "model_answers": [4000.0], "answer": 4000.0}, {"response": "**Solution**\n```python\npiles = [5, 4, 3, 0]\nquarters = sum(piles)\nprint(quarters)\n```", "solution": "```python\npiles = [5, 4, 3, 0]\nquarters = sum(piles)\nprint(quarters)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "12", "model_answers": [12.0], "answer": 18.0}, {"response": "**Solution**\n```python\nhorsepower = 500 / 1.36\nprint(horsepower)\n```", "solution": "```python\nhorsepower = 500 / 1.36\nprint(horsepower)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "367.6470588235294", "model_answers": [367.6470588235294], "answer": 368.0}, {"response": "**Solution**\n```python\n# Triangle\ntriangle = 5\n\n# Square\nsquare = 9 - triangle\n\n# Diamond\ndiamond = 5 * 2\n\n# Clubsuit\nclubsuit = diamond + triangle\n\nprint(square)\n```", "solution": "```python\n# Triangle\ntriangle = 5\n\n# Square\nsquare = 9 - triangle\n\n# Diamond\ndiamond = 5 * 2\n\n# Clubsuit\nclubsuit = diamond + triangle\n\nprint(square)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4", "model_answers": [4.0], "answer": 3.0}, {"response": "**Solution**\n```python\nf = lambda x: x ** 2 - 1\ng = lambda x: x + 7\n\nprint(f(g(7)) + g(f(3)))\n```", "solution": "```python\nf = lambda x: x ** 2 - 1\ng = lambda x: x + 7\n\nprint(f(g(7)) + g(f(3)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "210", "model_answers": [210.0], "answer": 210.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return x * (3 * x - 4) - 6 * x ** 2 + 3 * x - 5\n\ndef g(x):\n    return x ** 2 - 10 * x + 5\n\ndef h(x):\n    return x - 1\n\ndef is_solution(x):\n    return f(x) <= g(x) and h(x) >= 0\n\nsolutions = []\n\nfor x in range(100):\n    if is_solution(x):\n        solutions.append(x)\n\nprint(solutions)\n```", "solution": "```python\ndef f(x):\n    return x * (3 * x - 4) - 6 * x ** 2 + 3 * x - 5\n\ndef g(x):\n    return x ** 2 - 10 * x + 5\n\ndef h(x):\n    return x - 1\n\ndef is_solution(x):\n    return f(x) <= g(x) and h(x) >= 0\n\nsolutions = []\n\nfor x in range(100):\n    if is_solution(x):\n        solutions.append(x)\n\nprint(solutions)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]", "model_answers": [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0], "answer": 2.0}, {"response": "**Solution**\n```python\ndef profit_loss(x):\n    return x**2 - 8*x - 33\n\ndef find_break_even(f):\n    x = 0\n    while f(x) < 0:\n        x += 1\n    return x\n\nbreak_even = find_break_even(profit_loss)\nprint(break_even)\n```", "solution": "```python\ndef profit_loss(x):\n    return x**2 - 8*x - 33\n\ndef find_break_even(f):\n    x = 0\n    while f(x) < 0:\n        x += 1\n    return x\n\nbreak_even = find_break_even(profit_loss)\nprint(break_even)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "11", "model_answers": [11.0], "answer": 11.0}, {"response": "**Solution**\n```python\nmike_rate = 4 / 5\njosh_rate = 2\nmike_distance = josh_rate * mike_rate\nprint(mike_distance)\n```", "solution": "```python\nmike_rate = 4 / 5\njosh_rate = 2\nmike_distance = josh_rate * mike_rate\nprint(mike_distance)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.6", "model_answers": [1.6], "answer": 5.0}, {"response": "**Solution**\n```python\nprint(int(pow(pow(7/4, 2), 2)))\n```", "solution": "```python\nprint(int(pow(pow(7/4, 2), 2)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "9", "model_answers": [9.0], "answer": 16.0}, {"response": "**Solution**\n```python\ninterest = 10000 * (1 + 0.045)**2 - 10000\nprint(interest)\n```", "solution": "```python\ninterest = 10000 * (1 + 0.045)**2 - 10000\nprint(interest)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "920.2499999999982", "model_answers": [920.2499999999982], "answer": 920.25}, {"response": "**Solution**\n```python\na = 30\nd = 30\nn = 21\nterm = a + (n-1) * d\nprint(term)\n```", "solution": "```python\na = 30\nd = 30\nn = 21\nterm = a + (n-1) * d\nprint(term)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "630", "model_answers": [630.0], "answer": 135.0}, {"response": "**Solution**\n```python\nprint(3 + 5)\n```", "solution": "```python\nprint(3 + 5)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 5.0}, {"response": "**Solution**\n```python\nminutes = 20 / 60\nprint(minutes)\n```", "solution": "```python\nminutes = 20 / 60\nprint(minutes)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.3333333333333333", "model_answers": [0.3333333333333333], "answer": 20.0}, {"response": "**Solution**\n```python\na = 3\nb = 10\nresult = 2*a + 5*b - a*b\nprint(result)\n```", "solution": "```python\na = 3\nb = 10\nresult = 2*a + 5*b - a*b\nprint(result)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "26", "model_answers": [26.0], "answer": 26.0}, {"response": "**Solution**\n```python\na = 1\nb = 2\nc = 3\nprint(a*b*c)\n```", "solution": "```python\na = 1\nb = 2\nc = 3\nprint(a*b*c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": 720.0}, {"response": "**Solution**\n```python\nprint(5 + 500 * 10)\n```", "solution": "```python\nprint(5 + 500 * 10)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5005", "model_answers": [5005.0], "answer": 50.0}, {"response": "**Solution**\n```python\nfrom sympy import diag, sqrt\nAB = sqrt((1-0)**2 + (7-0)**2)\nBC = sqrt((1-1)**2 + (0-(-2))**2)\nCD = sqrt((12-1)**2 + (-2-(-2))**2)\nDA = sqrt((7-12)**2 + (8-(-2))**2)\nABCD = 0.5 * (AB + BC + CD + DA)\nprint(ABCD)\n```", "solution": "```python\nfrom sympy import diag, sqrt\nAB = sqrt((1-0)**2 + (7-0)**2)\nBC = sqrt((1-1)**2 + (0-(-2))**2)\nCD = sqrt((12-1)**2 + (-2-(-2))**2)\nDA = sqrt((7-12)**2 + (8-(-2))**2)\nABCD = 0.5 * (AB + BC + CD + DA)\nprint(ABCD)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.5*sqrt(2) + 2.5*sqrt(5) + 6.5", "model_answers": [2.5, 2.0, 2.5, 5.0, 6.5], "answer": 75.0}, {"response": "**Solution**\n```python\nm = 7\nn = 7/m\nprint(m-n)\n```", "solution": "```python\nm = 7\nn = 7/m\nprint(m-n)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "6.0", "model_answers": [6.0], "answer": 6.0}, {"response": "**Solution**\n```python\nx = 14\ny = 48\nmax_value = (x**2 + y**2 - 14*x - 48*y) / (2*x)\nprint(max_value)\n```", "solution": "```python\nx = 14\ny = 48\nmax_value = (x**2 + y**2 - 14*x - 48*y) / (2*x)\nprint(max_value)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.0", "model_answers": [0.0], "answer": 49.0}, {"response": "**Solution**\n```python\nb = -2.6\nc = 3.6\nprint(b+c)\n```", "solution": "```python\nb = -2.6\nc = 3.6\nprint(b+c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.0", "model_answers": [1.0], "answer": 3.21}, {"response": "**Solution**\n```python\nimport sympy\n\nx = sympy.Symbol('x')\n\nd = sympy.solve(2*x**2 + 3*x - 5, x)[0]\ne = sympy.solve(2*x**2 + 3*x - 5, x)[1]\n\nprint((d-1)*(e-1))\n```", "solution": "```python\nimport sympy\n\nx = sympy.Symbol('x')\n\nd = sympy.solve(2*x**2 + 3*x - 5, x)[0]\ne = sympy.solve(2*x**2 + 3*x - 5, x)[1]\n\nprint((d-1)*(e-1))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "0", "model_answers": [0.0], "answer": 0.0}, {"response": "**Solution**\n```python\nfrom sympy import *\nexpr = (2**(1/4))**(2/5) * (4**(3/8))**(2/25)\nprint(expr)\n```", "solution": "```python\nfrom sympy import *\nexpr = (2**(1/4))**(2/5) * (4**(3/8))**(2/25)\nprint(expr)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.11728713807222", "model_answers": [1.11728713807222], "answer": 2.0}, {"response": "**Solution**\n```python\nproduct = 454\nsum1 = product // 2\nsum2 = product - sum1\nlargest_value = sum1 * sum2\nprint(largest_value)\n```", "solution": "```python\nproduct = 454\nsum1 = product // 2\nsum2 = product - sum1\nlargest_value = sum1 * sum2\nprint(largest_value)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "51529", "model_answers": [51529.0], "answer": 33840.0}, {"response": "**Solution**\n```python\nprint(abs(2*6 + 4*3 - 8*(3+3)))\n```", "solution": "```python\nprint(abs(2*6 + 4*3 - 8*(3+3)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "24", "model_answers": [24.0], "answer": 24.0}, {"response": "**Solution**\n```python\nimport sympy\n\nx, y = sympy.symbols('x y')\n\nx_y = sympy.solve([x - y - 1, x**2 + y**2 - 7], [x, y])\n\nprint(x_y[0][0]**3 - x_y[0][1]**3)\n```", "solution": "```python\nimport sympy\n\nx, y = sympy.symbols('x y')\n\nx_y = sympy.solve([x - y - 1, x**2 + y**2 - 7], [x, y])\n\nprint(x_y[0][0]**3 - x_y[0][1]**3)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(1/2 - sqrt(13)/2)**3 - (-sqrt(13)/2 - 1/2)**3", "model_answers": [1.0, 2.0, 13.0, 2.0, 3.0, 13.0, 2.0, 1.0, 2.0, 3.0], "answer": 10.0}, {"response": "**Solution**\n```python\n# Calculate the discriminant of the quadratic equation\ndiscriminant = 3 * 5 ** 2 - 4 * 4 * 5 - 3 * 63\n\n# Calculate the roots of the quadratic equation\nroot1 = (-3 * 5 ** 2 + 4 * 4 * 5 + 3 * 63) / 3\nroot2 = (-3 * 5 ** 2 - 4 * 4 * 5 + 3 * 63) / 3\n\n# Print the roots\nprint(root1)\nprint(root2)\n```", "solution": "```python\n# Calculate the discriminant of the quadratic equation\ndiscriminant = 3 * 5 ** 2 - 4 * 4 * 5 - 3 * 63\n\n# Calculate the roots of the quadratic equation\nroot1 = (-3 * 5 ** 2 + 4 * 4 * 5 + 3 * 63) / 3\nroot2 = (-3 * 5 ** 2 - 4 * 4 * 5 + 3 * 63) / 3\n\n# Print the roots\nprint(root1)\nprint(root2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "64.66666666666667\n11.333333333333334", "model_answers": [64.66666666666667, 11.333333333333334], "answer": 10.0}, {"response": "**Solution**\n```python\nprint((3*4-2)*(4*4+1)-(3*4-2)*4*4+1)\n```", "solution": "```python\nprint((3*4-2)*(4*4+1)-(3*4-2)*4*4+1)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "11", "model_answers": [11.0], "answer": 11.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\ny = sqrt(19 + 3 * 7) - 19\nprint(y)\n```", "solution": "```python\nfrom sympy import sqrt\ny = sqrt(19 + 3 * 7) - 19\nprint(y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-19 + 2*sqrt(10)", "model_answers": [-19.0, 2.0, 10.0], "answer": 10.0}, {"response": "**Solution**\n```python\nimport sympy\nradius = sympy.sqrt(sympy.Symbol('x')**2 + sympy.Symbol('y')**2 - 6)\nprint(radius)\n```", "solution": "```python\nimport sympy\nradius = sympy.sqrt(sympy.Symbol('x')**2 + sympy.Symbol('y')**2 - 6)\nprint(radius)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "sqrt(x**2 + y**2 - 6)", "model_answers": [2.0, 2.0, 6.0], "answer": 4.0}, {"response": "**Solution**\n```python\nf(4) = 4^2 - 4\\sqrt{4} + 1 = 16 - 4 + 1 = 11\nf(f(4)) = f(11) = 11^2 - 4\\sqrt{11} + 1 = 121 - 4\\sqrt{121} + 1 = 1121 - 4\\sqrt{1121} + 1\n```", "solution": "```python\nf(4) = 4^2 - 4\\sqrt{4} + 1 = 16 - 4 + 1 = 11\nf(f(4)) = f(11) = 11^2 - 4\\sqrt{11} + 1 = 121 - 4\\sqrt{121} + 1 = 1121 - 4\\sqrt{1121} + 1\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 70.0}, {"response": "**Solution**\n```python\nprint(sum(range(1, 101)))\n```", "solution": "```python\nprint(sum(range(1, 101)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "5050", "model_answers": [5050.0], "answer": 5050.0}, {"response": "**Solution**\n```python\nprint(4 - 2)\n```", "solution": "```python\nprint(4 - 2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 4.0}, {"response": "**Solution**\n```python\nx = 441 + 2 * 21 * 19 + 361\nprint(x)\n```", "solution": "```python\nx = 441 + 2 * 21 * 19 + 361\nprint(x)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1600", "model_answers": [1600.0], "answer": 1600.0}, {"response": "**Solution**\n```python\n# constant term of f(x) = x^3 - 6x^2 + 3x - 4\nf_const = -6\n# constant term of g(x) = x^3 + 5x^2 + 9x - 2\ng_const = -2\n# f(g(x)) = x^3 - 6x^2 + 3x - 4 + x^3 + 5x^2 + 9x - 2\nf_g = f_const + g_const\nprint(f_g)\n```", "solution": "```python\n# constant term of f(x) = x^3 - 6x^2 + 3x - 4\nf_const = -6\n# constant term of g(x) = x^3 + 5x^2 + 9x - 2\ng_const = -2\n# f(g(x)) = x^3 - 6x^2 + 3x - 4 + x^3 + 5x^2 + 9x - 2\nf_g = f_const + g_const\nprint(f_g)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-8", "model_answers": [-8.0], "answer": -42.0}, {"response": "**Solution**\n```python\nimport math\nradius = math.sqrt(130)\nx_max = 2 * radius + 5\nprint(x_max)\n```", "solution": "```python\nimport math\nradius = math.sqrt(130)\nx_max = 2 * radius + 5\nprint(x_max)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "27.80350850198276", "model_answers": [27.80350850198276], "answer": 12.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\nx = -24\nprint(x)\n```", "solution": "```python\nfrom math import sqrt\nx = -24\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-24", "model_answers": [-24.0], "answer": -8.0}, {"response": "**Solution**\n```python\ng = lambda x: 3\nprint(g(2))\n```", "solution": "```python\ng = lambda x: 3\nprint(g(2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3", "model_answers": [3.0], "answer": 3.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.Symbol('x')\nf = 2*x**2 + 13*x + 6\nsolution = sympy.solve(f, x)\nprint(solution[0]**2 * solution[1]**2)\n```", "solution": "```python\nimport sympy\nx = sympy.Symbol('x')\nf = 2*x**2 + 13*x + 6\nsolution = sympy.solve(f, x)\nprint(solution[0]**2 * solution[1]**2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "9", "model_answers": [9.0], "answer": 9.0}, {"response": "**Solution**\n```python\n# compute the common difference for a given k\ndef get_difference(k):\n    return k\n\n# compute the nth term of the sequence\ndef get_term(n, k):\n    return n * k\n\n# check if a term is in the sequence\ndef check_term(n, k):\n    return get_term(n, k) == 2005\n\n# compute the number of values of k that satisfy the condition\ndef compute_values(n):\n    count = 0\n    for k in range(1, n):\n        if check_term(n, k):\n            count += 1\n    return count\n\nprint(compute_values(2005))\n```", "solution": "```python\n# compute the common difference for a given k\ndef get_difference(k):\n    return k\n\n# compute the nth term of the sequence\ndef get_term(n, k):\n    return n * k\n\n# check if a term is in the sequence\ndef check_term(n, k):\n    return get_term(n, k) == 2005\n\n# compute the number of values of k that satisfy the condition\ndef compute_values(n):\n    count = 0\n    for k in range(1, n):\n        if check_term(n, k):\n            count += 1\n    return count\n\nprint(compute_values(2005))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1", "model_answers": [1.0], "answer": 12.0}, {"response": "**Solution**\n```python\nprint(31**2 - 19**2)\n```", "solution": "```python\nprint(31**2 - 19**2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "600", "model_answers": [600.0], "answer": 600.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, solve, exp, floor, factorial, binomial, oo, sqrt, I, conjugate\n\nx = Symbol('x')\nf = exp(3*x**2 - floor(x)*factorial(floor(x)) + x**4 + 3*x**3 - 6*x**2 + 2*x + 1)\ng = exp(3*x**2 - floor(x)*factorial(floor(x)) + x**4 + 4*x**3 - 11*x**2 - 6*x + 13)\n\nsolve(f - g, x)\n```", "solution": "```python\nfrom sympy import Symbol, solve, exp, floor, factorial, binomial, oo, sqrt, I, conjugate\n\nx = Symbol('x')\nf = exp(3*x**2 - floor(x)*factorial(floor(x)) + x**4 + 3*x**3 - 6*x**2 + 2*x + 1)\ng = exp(3*x**2 - floor(x)*factorial(floor(x)) + x**4 + 4*x**3 - 11*x**2 - 6*x + 13)\n\nsolve(f - g, x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "", "model_answers": [], "answer": 6.0}, {"response": "**Solution**\n```python\n# define a function that takes in a number of piles\n# and returns the number of quarters in the nth pile\ndef number_of_quarters(n):\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 2\n    elif n == 4:\n        return 2 * number_of_quarters(2)\n    else:\n        return number_of_quarters(n-1) + number_of_quarters(n+1)\n\n# use the function to calculate the number of quarters in the fourth pile\nprint(number_of_quarters(4))\n```", "solution": "```python\n# define a function that takes in a number of piles\n# and returns the number of quarters in the nth pile\ndef number_of_quarters(n):\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 2\n    elif n == 4:\n        return 2 * number_of_quarters(2)\n    else:\n        return number_of_quarters(n-1) + number_of_quarters(n+1)\n\n# use the function to calculate the number of quarters in the fourth pile\nprint(number_of_quarters(4))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4", "model_answers": [4.0], "answer": 10.0}, {"response": "**Solution**\n```python\np, q = 2, 3\nprint((p-1)*(q-1))\n```", "solution": "```python\np, q = 2, 3\nprint((p-1)*(q-1))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 1.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return x**2\n\nprint(f(f(2)))\n```", "solution": "```python\ndef f(x):\n    return x**2\n\nprint(f(f(2)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "16", "model_answers": [16.0], "answer": 2.0}, {"response": "**Solution**\n```python\nimport math\n\nfor t in range(1, 100):\n    if math.floor(math.sqrt(t)) == math.ceil(math.sqrt(t)):\n        print(t)\n```", "solution": "```python\nimport math\n\nfor t in range(1, 100):\n    if math.floor(math.sqrt(t)) == math.ceil(math.sqrt(t)):\n        print(t)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1\n4\n9\n16\n25\n36\n49\n64\n81", "model_answers": [1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0, 81.0], "answer": 8.0}, {"response": "**Solution**\n```python\nimport sympy as sp\n\nx, y = sp.symbols('x y')\n\neq1 = 2*x - 3*y\neq2 = 4*x + 3*y\n\nsol = sp.solve((eq1, eq2))\n\nprint(sol)\n```", "solution": "```python\nimport sympy as sp\n\nx, y = sp.symbols('x y')\n\neq1 = 2*x - 3*y\neq2 = 4*x + 3*y\n\nsol = sp.solve((eq1, eq2))\n\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "{x: 0, y: 0}", "model_answers": [0.0, 0.0], "answer": -2.0}, {"response": "**Solution**\n```python\ncoins_am = 10\ncoins_ben = 3 * coins_am\ncoins_carl = 1/3 * coins_ben\ncoins_debbie = 2/3 * coins_carl\ntotal_coins = coins_am + coins_ben + coins_carl + coins_debbie\nprint(total_coins)\n```", "solution": "```python\ncoins_am = 10\ncoins_ben = 3 * coins_am\ncoins_carl = 1/3 * coins_ben\ncoins_debbie = 2/3 * coins_carl\ntotal_coins = coins_am + coins_ben + coins_carl + coins_debbie\nprint(total_coins)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "56.666666666666664", "model_answers": [56.666666666666664], "answer": 19.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt, simplify\nexpr = 2 / (sqrt(4) + sqrt(32))\nexpr = simplify(expr)\nprint(expr)\n```", "solution": "```python\nfrom sympy import sqrt, simplify\nexpr = 2 / (sqrt(4) + sqrt(32))\nexpr = simplify(expr)\nprint(expr)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-1/7 + 2*sqrt(2)/7", "model_answers": [-1.0, 7.0, 2.0, 2.0, 7.0], "answer": 5.0}, {"response": "**Solution**\n```python\na = 5\na_3 = a ** 3\na_2 = a ** 2\nprint(a_3 * a_2)\n```", "solution": "```python\na = 5\na_3 = a ** 3\na_2 = a ** 2\nprint(a_3 * a_2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3125", "model_answers": [3125.0], "answer": 3125.0}, {"response": "**Solution**\n```python\na = 2009 // 3\nprint(a)\n```", "solution": "```python\na = 2009 // 3\nprint(a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "669", "model_answers": [669.0], "answer": 41.0}, {"response": "**Solution**\n```python\nsixth_term = 200 + 500 - 200\nprint(sixth_term)\n```", "solution": "```python\nsixth_term = 200 + 500 - 200\nprint(sixth_term)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "500", "model_answers": [500.0], "answer": 350.0}, {"response": "**Solution**\n```python\nx = 3\nprint(x - 3 / (2 * (x ** 2) - 8 * x + 7))\n```", "solution": "```python\nx = 3\nprint(x - 3 / (2 * (x ** 2) - 8 * x + 7))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.0", "model_answers": [0.0], "answer": 4.0}, {"response": "**Solution**\n```python\nn = 13\nm = 27\nn_reversed = int(str(n)[::-1])\nprint(n + n_reversed)\n```", "solution": "```python\nn = 13\nm = 27\nn_reversed = int(str(n)[::-1])\nprint(n + n_reversed)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "44", "model_answers": [44.0], "answer": 143.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\nperimeter = sqrt(50)\nprint(perimeter)\n```", "solution": "```python\nfrom sympy import sqrt\nperimeter = sqrt(50)\nprint(perimeter)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5*sqrt(2)", "model_answers": [5.0, 2.0], "answer": 52.0}, {"response": "**Solution**\n```python\na = -3\nprint(a**2+6*a-7)\n```", "solution": "```python\na = -3\nprint(a**2+6*a-7)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-16", "model_answers": [-16.0], "answer": -16.0}, {"response": "**Solution**\n```python\nimport sympy as sym\n\n# Area of the triangle\ndef area(k):\n    return (sym.sqrt(3)/2) * k\n\n# Integrate the area\ndef integrate_area(k):\n    return (sym.sqrt(3)/6) * k**2\n\n# Initialize the sum to zero\ntotal = 0\n\n# Loop over all possible values of k\nfor k in range(1, 1000):\n    # If the area is less than 20, add it to the total\n    if area(k) < 20:\n        total += integrate_area(k)\n\nprint(total)\n```", "solution": "```python\nimport sympy as sym\n\n# Area of the triangle\ndef area(k):\n    return (sym.sqrt(3)/2) * k\n\n# Integrate the area\ndef integrate_area(k):\n    return (sym.sqrt(3)/6) * k**2\n\n# Initialize the sum to zero\ntotal = 0\n\n# Loop over all possible values of k\nfor k in range(1, 1000):\n    # If the area is less than 20, add it to the total\n    if area(k) < 20:\n        total += integrate_area(k)\n\nprint(total)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2162*sqrt(3)/3", "model_answers": [2162.0, 3.0, 3.0], "answer": -120.0}, {"response": "**Solution**\n```python\nlags_to_ligs = 4\nlugs_to_lags = 20\n\nligs_equivalent_to_80_lugs = 80 * lags_to_ligs / lugs_to_lags\n\nprint(ligs_equivalent_to_80_lugs)\n```", "solution": "```python\nlags_to_ligs = 4\nlugs_to_lags = 20\n\nligs_equivalent_to_80_lugs = 80 * lags_to_ligs / lugs_to_lags\n\nprint(ligs_equivalent_to_80_lugs)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "16.0", "model_answers": [16.0], "answer": 63.0}, {"response": "**Solution**\n```python\nfrom sympy import symbols, sqrt, solve\nx, y = symbols('x, y')\nexpr = x**2 + y**2 - 6*x + 8*y - 24\nsol = solve(expr, (x, y))\nprint(sol)\n```", "solution": "```python\nfrom sympy import symbols, sqrt, solve\nx, y = symbols('x, y')\nexpr = x**2 + y**2 - 6*x + 8*y - 24\nsol = solve(expr, (x, y))\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(3 - sqrt(-(y - 3)*(y + 11)), y), (sqrt(-(y - 3)*(y + 11)) + 3, y)]", "model_answers": [3.0, 3.0, 11.0, 3.0, 11.0, 3.0], "answer": 10.0}, {"response": "**Solution**\n```python\nx = -2\nprint(x)\n```", "solution": "```python\nx = -2\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-2", "model_answers": [-2.0], "answer": -3.0}, {"response": "**Solution**\n```python\nimport math\n\na = 3 / math.sqrt(61)\nprint(a)\n```", "solution": "```python\nimport math\n\na = 3 / math.sqrt(61)\nprint(a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.3841106397986879", "model_answers": [0.3841106397986879], "answer": 3.0}, {"response": "**Solution**\n```python\na = 3\nb = -24\nc = 72\nprint(a + b + c)\n```", "solution": "```python\na = 3\nb = -24\nc = 72\nprint(a + b + c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "51", "model_answers": [51.0], "answer": 23.0}, {"response": "**Solution**\n```python\nprint(3 * 4)\n```", "solution": "```python\nprint(3 * 4)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "12", "model_answers": [12.0], "answer": 12.0}, {"response": "**Solution**\n```python\nimport sympy\n\na, b = sympy.symbols('a, b')\n\neq1 = a*b - 7\neq2 = a + b - 5\n\nsol = sympy.solve((eq1, eq2), (a, b))\n\nprint(sol)\n\nprint(a**2 + b**2)\n```", "solution": "```python\nimport sympy\n\na, b = sympy.symbols('a, b')\n\neq1 = a*b - 7\neq2 = a + b - 5\n\nsol = sympy.solve((eq1, eq2), (a, b))\n\nprint(sol)\n\nprint(a**2 + b**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(5/2 - sqrt(3)*I/2, 5/2 + sqrt(3)*I/2), (5/2 + sqrt(3)*I/2, 5/2 - sqrt(3)*I/2)]\na**2 + b**2", "model_answers": [5.0, 2.0, 3.0, 2.0, 5.0, 2.0, 3.0, 2.0, 5.0, 2.0, 3.0, 2.0, 5.0, 2.0, 3.0, 2.0, 2.0, 2.0], "answer": 11.0}, {"response": "**Solution**\n```python\ninitial_weight = 244\nweight_after_ten_weeks = initial_weight - (10 * 1/100 * initial_weight)\nprint(weight_after_ten_weeks)\n```", "solution": "```python\ninitial_weight = 244\nweight_after_ten_weeks = initial_weight - (10 * 1/100 * initial_weight)\nprint(weight_after_ten_weeks)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "219.6", "model_answers": [219.6], "answer": 221.0}, {"response": "**Solution**\n```python\nprint(102 ** 2 - 98 ** 2)\n```", "solution": "```python\nprint(102 ** 2 - 98 ** 2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "800", "model_answers": [800.0], "answer": 800.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\n\nfor a in range(1, 100):\n    for b in range(1, 100):\n        area = a * b\n        perimeter = 2 * (a + b)\n        if area == 5 * perimeter:\n            print(a, b)\n```", "solution": "```python\nfrom math import sqrt\n\nfor a in range(1, 100):\n    for b in range(1, 100):\n        area = a * b\n        perimeter = 2 * (a + b)\n        if area == 5 * perimeter:\n            print(a, b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "12 60\n14 35\n15 30\n20 20\n30 15\n35 14\n60 12", "model_answers": [12.0, 60.0, 14.0, 35.0, 15.0, 30.0, 20.0, 20.0, 30.0, 15.0, 35.0, 14.0, 60.0, 12.0], "answer": 5.0}, {"response": "**Solution**\n```python\nc = 18**2 - 9\nprint(c)\n```", "solution": "```python\nc = 18**2 - 9\nprint(c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "315", "model_answers": [315.0], "answer": 90.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\nx1 = (-3 + sqrt(121)) / 2\nx2 = (-3 - sqrt(121)) / 2\nprint(x1 + x2)\n```", "solution": "```python\nfrom math import sqrt\nx1 = (-3 + sqrt(121)) / 2\nx2 = (-3 - sqrt(121)) / 2\nprint(x1 + x2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-3.0", "model_answers": [-3.0], "answer": -6.0}, {"response": "**Solution**\n```python\nfrom sympy import expand_power_base\n\nprint(expand_power_base(4**5 + 4**5 + 4**5 + 4**5, 3))\n```", "solution": "```python\nfrom sympy import expand_power_base\n\nprint(expand_power_base(4**5 + 4**5 + 4**5 + 4**5, 3))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4096", "model_answers": [4096.0], "answer": 16.0}, {"response": "**Solution**\n```python\nx = 1.5\nprint(abs(x - 1) + abs(x - 1.5) + abs(x - 2))\n```", "solution": "```python\nx = 1.5\nprint(abs(x - 1) + abs(x - 1.5) + abs(x - 2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1.0", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nx = 4 +- 10\nprint(x)\n```", "solution": "```python\nx = 4 +- 10\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-6", "model_answers": [-6.0], "answer": -128.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\n\ndef count_points(a, b):\n    count = 0\n    for x in range(-a, a + 1):\n        for y in range(-b, b + 1):\n            if x**2 - y**2 == 17:\n                count += 1\n    return count\n\nprint(count_points(10, 10))\n```", "solution": "```python\nfrom math import sqrt\n\ndef count_points(a, b):\n    count = 0\n    for x in range(-a, a + 1):\n        for y in range(-b, b + 1):\n            if x**2 - y**2 == 17:\n                count += 1\n    return count\n\nprint(count_points(10, 10))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4", "model_answers": [4.0], "answer": 4.0}, {"response": "**Solution**\n```python\nprice = 450\nwhile True:\n    revenue = price * 500\n    additional_sales = 10 * (price - 5)\n    revenue += additional_sales\n    if revenue > 500 * 450:\n        break\n    price -= 5\nprint(price)\n```", "solution": "```python\nprice = 450\nwhile True:\n    revenue = price * 500\n    additional_sales = 10 * (price - 5)\n    revenue += additional_sales\n    if revenue > 500 * 450:\n        break\n    price -= 5\nprint(price)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "450", "model_answers": [450.0], "answer": 350.0}, {"response": "**Solution**\n```python\ncookies_per_brownies = 6/4\nbrownies_per_cupcakes = 2/10\ncupcakes_for_18_cookies = 18/cookies_per_brownies/brownies_per_cupcakes\nprint(cupcakes_for_18_cookies)\n```", "solution": "```python\ncookies_per_brownies = 6/4\nbrownies_per_cupcakes = 2/10\ncupcakes_for_18_cookies = 18/cookies_per_brownies/brownies_per_cupcakes\nprint(cupcakes_for_18_cookies)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "60.0", "model_answers": [60.0], "answer": 15.0}, {"response": "**Solution**\n```python\ntime_to_36 = 36 / 18\nprint(time_to_36)\n```", "solution": "```python\ntime_to_36 = 36 / 18\nprint(time_to_36)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.0", "model_answers": [2.0], "answer": 16.0}, {"response": "**Solution**\n```python\na = 1\nb = -1\nx = 3\ny = a*x**4 - b*x**2 + x + 5\nprint(y)\n```", "solution": "```python\na = 1\nb = -1\nx = 3\ny = a*x**4 - b*x**2 + x + 5\nprint(y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "98", "model_answers": [98.0], "answer": 8.0}, {"response": "**Solution**\n```python\nimport sympy\n\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\n\neq1 = 2*x**2 + x + 6 - y\neq2 = x - 4 + y\n\nsol = sympy.solve([eq1, eq2], [x, y])\n\nprint(sol)\n```", "solution": "```python\nimport sympy\n\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\n\neq1 = 2*x**2 + x + 6 - y\neq2 = x - 4 + y\n\nsol = sympy.solve([eq1, eq2], [x, y])\n\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(-1/2 - sqrt(3)*I/2, 9/2 + sqrt(3)*I/2), (-1/2 + sqrt(3)*I/2, 9/2 - sqrt(3)*I/2)]", "model_answers": [-1.0, 2.0, 3.0, 2.0, 9.0, 2.0, 3.0, 2.0, -1.0, 2.0, 3.0, 2.0, 9.0, 2.0, 3.0, 2.0], "answer": -5.0}, {"response": "**Solution**\n```python\nA = 2 * 60\nB = 5 * 60\nprint(A + B)\n```", "solution": "```python\nA = 2 * 60\nB = 5 * 60\nprint(A + B)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "420", "model_answers": [420.0], "answer": 174.0}, {"response": "**Solution**\n```python\nprint(1**2+3)\n```", "solution": "```python\nprint(1**2+3)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4", "model_answers": [4.0], "answer": 30.0}, {"response": "**Solution**\n```python\ndef is_geometric(n):\n    return (n-1) % 2 == 0\n\ndef is_arithmetic(n):\n    return (n-1) % 2 == 1\n\nfor i in range(100, 999):\n    if is_geometric(i):\n        for j in range(100, 999):\n            if is_arithmetic(j):\n                if (i * j) % 5 == 0:\n                    print(i, j, (i * j) // 5)\n                    break\n                    \n```", "solution": "```python\ndef is_geometric(n):\n    return (n-1) % 2 == 0\n\ndef is_arithmetic(n):\n    return (n-1) % 2 == 1\n\nfor i in range(100, 999):\n    if is_geometric(i):\n        for j in range(100, 999):\n            if is_arithmetic(j):\n                if (i * j) % 5 == 0:\n                    print(i, j, (i * j) // 5)\n                    break\n                    \n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "101 100 2020\n103 100 2060\n105 100 2100\n107 100 2140\n109 100 2180\n111 100 2220\n113 100 2260\n115 100 2300\n117 100 2340\n119 100 2380\n121 100 2420\n123 100 2460\n125 100 2500\n127 100 2540\n129 100 2580\n131 100 2620\n133 100 2660\n135 100 2700\n137 100 2740\n139 100 2780\n141 100 2820\n143 100 2860\n145 100 2900\n147 100 2940\n149 100 2980\n151 100 3020\n153 100 3060\n155 100 3100\n157 100 3140\n159 100 3180\n161 100 3220\n163 100 3260\n165 100 3300\n167 100 3340\n169 100 3380\n171 100 3420\n173 100 3460\n175 100 3500\n177 100 3540\n179 100 3580\n181 100 3620\n183 100 3660\n185 100 3700\n187 100 3740\n189 100 3780\n191 100 3820\n193 100 3860\n195 100 3900\n197 100 3940\n199 100 3980\n201 100 4020\n203 100 4060\n205 100 4100\n207 100 4140\n209 100 4180\n211 100 4220\n213 100 4260\n215 100 4300\n217 100 4340\n219 100 4380\n221 100 4420\n223 100 4460\n225 100 4500\n227 100 4540\n229 100 4580\n231 100 4620\n233 100 4660\n235 100 4700\n237 100 4740\n239 100 4780\n241 100 4820\n243 100 4860\n245 100 4900\n247 100 4940\n249 100 4980\n251 100 5020\n253 100 5060\n255 100 5100\n257 100 5140\n259 100 5180\n261 100 5220\n263 100 5260\n265 100 5300\n267 100 5340\n269 100 5380\n271 100 5420\n273 100 5460\n275 100 5500\n277 100 5540\n279 100 5580\n281 100 5620\n283 100 5660\n285 100 5700\n287 100 5740\n289 100 5780\n291 100 5820\n293 100 5860\n295 100 5900\n297 100 5940\n299 100 5980\n301 100 6020\n303 100 6060\n305 100 6100\n307 100 6140\n309 100 6180\n311 100 6220\n313 100 6260\n315 100 6300\n317 100 6340\n319 100 6380\n321 100 6420\n323 100 6460\n325 100 6500\n327 100 6540\n329 100 6580\n331 100 6620\n333 100 6660\n335 100 6700\n337 100 6740\n339 100 6780\n341 100 6820\n343 100 6860\n345 100 6900\n347 100 6940\n349 100 6980\n351 100 7020\n353 100 7060\n355 100 7100\n357 100 7140\n359 100 7180\n361 100 7220\n363 100 7260\n365 100 7300\n367 100 7340\n369 100 7380\n371 100 7420\n373 100 7460\n375 100 7500\n377 100 7540\n379 100 7580\n381 100 7620\n383 100 7660\n385 100 7700\n387 100 7740\n389 100 7780\n391 100 7820\n393 100 7860\n395 100 7900\n397 100 7940\n399 100 7980\n401 100 8020\n403 100 8060\n405 100 8100\n407 100 8140\n409 100 8180\n411 100 8220\n413 100 8260\n415 100 8300\n417 100 8340\n419 100 8380\n421 100 8420\n423 100 8460\n425 100 8500\n427 100 8540\n429 100 8580\n431 100 8620\n433 100 8660\n435 100 8700\n437 100 8740\n439 100 8780\n441 100 8820\n443 100 8860\n445 100 8900\n447 100 8940\n449 100 8980\n451 100 9020\n453 100 9060\n455 100 9100\n457 100 9140\n459 100 9180\n461 100 9220\n463 100 9260\n465 100 9300\n467 100 9340\n469 100 9380\n471 100 9420\n473 100 9460\n475 100 9500\n477 100 9540\n479 100 9580\n481 100 9620\n483 100 9660\n485 100 9700\n487 100 9740\n489 100 9780\n491 100 9820\n493 100 9860\n495 100 9900\n497 100 9940\n499 100 9980\n501 100 10020\n503 100 10060\n505 100 10100\n507 100 10140\n509 100 10180\n511 100 10220\n513 100 10260\n515 100 10300\n517 100 10340\n519 100 10380\n521 100 10420\n523 100 10460\n525 100 10500\n527 100 10540\n529 100 10580\n531 100 10620\n533 100 10660\n535 100 10700\n537 100 10740\n539 100 10780\n541 100 10820\n543 100 10860\n545 100 10900\n547 100 10940\n549 100 10980\n551 100 11020\n553 100 11060\n555 100 11100\n557 100 11140\n559 100 11180\n561 100 11220\n563 100 11260\n565 100 11300\n567 100 11340\n569 100 11380\n571 100 11420\n573 100 11460\n575 100 11500\n577 100 11540\n579 100 11580\n581 100 11620\n583 100 11660\n585 100 11700\n587 100 11740\n589 100 11780\n591 100 11820\n593 100 11860\n595 100 11900\n597 100 11940\n599 100 11980\n601 100 12020\n603 100 12060\n605 100 12100\n607 100 12140\n609 100 12180\n611 100 12220\n613 100 12260\n615 100 12300\n617 100 12340\n619 100 12380\n621 100 12420\n623 100 12460\n625 100 12500\n627 100 12540\n629 100 12580\n631 100 12620\n633 100 12660\n635 100 12700\n637 100 12740\n639 100 12780\n641 100 12820\n643 100 12860\n645 100 12900\n647 100 12940\n649 100 12980\n651 100 13020\n653 100 13060\n655 100 13100\n657 100 13140\n659 100 13180\n661 100 13220\n663 100 13260\n665 100 13300\n667 100 13340\n669 100 13380\n671 100 13420\n673 100 13460\n675 100 13500\n677 100 13540\n679 100 13580\n681 100 13620\n683 100 13660\n685 100 13700\n687 100 13740\n689 100 13780\n691 100 13820\n693 100 13860\n695 100 13900\n697 100 13940\n699 100 13980\n701 100 14020\n703 100 14060\n705 100 14100\n707 100 14140\n709 100 14180\n711 100 14220\n713 100 14260\n715 100 14300\n717 100 14340\n719 100 14380\n721 100 14420\n723 100 14460\n725 100 14500\n727 100 14540\n729 100 14580\n731 100 14620\n733 100 14660\n735 100 14700\n737 100 14740\n739 100 14780\n741 100 14820\n743 100 14860\n745 100 14900\n747 100 14940\n749 100 14980\n751 100 15020\n753 100 15060\n755 100 15100\n757 100 15140\n759 100 15180\n761 100 15220\n763 100 15260\n765 100 15300\n767 100 15340\n769 100 15380\n771 100 15420\n773 100 15460\n775 100 15500\n777 100 15540\n779 100 15580\n781 100 15620\n783 100 15660\n785 100 15700\n787 100 15740\n789 100 15780\n791 100 15820\n793 100 15860\n795 100 15900\n797 100 15940\n799 100 15980\n801 100 16020\n803 100 16060\n805 100 16100\n807 100 16140\n809 100 16180\n811 100 16220\n813 100 16260\n815 100 16300\n817 100 16340\n819 100 16380\n821 100 16420\n823 100 16460\n825 100 16500\n827 100 16540\n829 100 16580\n831 100 16620\n833 100 16660\n835 100 16700\n837 100 16740\n839 100 16780\n841 100 16820\n843 100 16860\n845 100 16900\n847 100 16940\n849 100 16980\n851 100 17020\n853 100 17060\n855 100 17100\n857 100 17140\n859 100 17180\n861 100 17220\n863 100 17260\n865 100 17300\n867 100 17340\n869 100 17380\n871 100 17420\n873 100 17460\n875 100 17500\n877 100 17540\n879 100 17580\n881 100 17620\n883 100 17660\n885 100 17700\n887 100 17740\n889 100 17780\n891 100 17820\n893 100 17860\n895 100 17900\n897 100 17940\n899 100 17980\n901 100 18020\n903 100 18060\n905 100 18100\n907 100 18140\n909 100 18180\n911 100 18220\n913 100 18260\n915 100 18300\n917 100 18340\n919 100 18380\n921 100 18420\n923 100 18460\n925 100 18500\n927 100 18540\n929 100 18580\n931 100 18620\n933 100 18660\n935 100 18700\n937 100 18740\n939 100 18780\n941 100 18820\n943 100 18860\n945 100 18900\n947 100 18940\n949 100 18980\n951 100 19020\n953 100 19060\n955 100 19100\n957 100 19140\n959 100 19180\n961 100 19220\n963 100 19260\n965 100 19300\n967 100 19340\n969 100 19380\n971 100 19420\n973 100 19460\n975 100 19500\n977 100 19540\n979 100 19580\n981 100 19620\n983 100 19660\n985 100 19700\n987 100 19740\n989 100 19780\n991 100 19820\n993 100 19860\n995 100 19900\n997 100 19940", "model_answers": [101.0, 100.0, 2020.0, 103.0, 100.0, 2060.0, 105.0, 100.0, 2100.0, 107.0, 100.0, 2140.0, 109.0, 100.0, 2180.0, 111.0, 100.0, 2220.0, 113.0, 100.0, 2260.0, 115.0, 100.0, 2300.0, 117.0, 100.0, 2340.0, 119.0, 100.0, 2380.0, 121.0, 100.0, 2420.0, 123.0, 100.0, 2460.0, 125.0, 100.0, 2500.0, 127.0, 100.0, 2540.0, 129.0, 100.0, 2580.0, 131.0, 100.0, 2620.0, 133.0, 100.0, 2660.0, 135.0, 100.0, 2700.0, 137.0, 100.0, 2740.0, 139.0, 100.0, 2780.0, 141.0, 100.0, 2820.0, 143.0, 100.0, 2860.0, 145.0, 100.0, 2900.0, 147.0, 100.0, 2940.0, 149.0, 100.0, 2980.0, 151.0, 100.0, 3020.0, 153.0, 100.0, 3060.0, 155.0, 100.0, 3100.0, 157.0, 100.0, 3140.0, 159.0, 100.0, 3180.0, 161.0, 100.0, 3220.0, 163.0, 100.0, 3260.0, 165.0, 100.0, 3300.0, 167.0, 100.0, 3340.0, 169.0, 100.0, 3380.0, 171.0, 100.0, 3420.0, 173.0, 100.0, 3460.0, 175.0, 100.0, 3500.0, 177.0, 100.0, 3540.0, 179.0, 100.0, 3580.0, 181.0, 100.0, 3620.0, 183.0, 100.0, 3660.0, 185.0, 100.0, 3700.0, 187.0, 100.0, 3740.0, 189.0, 100.0, 3780.0, 191.0, 100.0, 3820.0, 193.0, 100.0, 3860.0, 195.0, 100.0, 3900.0, 197.0, 100.0, 3940.0, 199.0, 100.0, 3980.0, 201.0, 100.0, 4020.0, 203.0, 100.0, 4060.0, 205.0, 100.0, 4100.0, 207.0, 100.0, 4140.0, 209.0, 100.0, 4180.0, 211.0, 100.0, 4220.0, 213.0, 100.0, 4260.0, 215.0, 100.0, 4300.0, 217.0, 100.0, 4340.0, 219.0, 100.0, 4380.0, 221.0, 100.0, 4420.0, 223.0, 100.0, 4460.0, 225.0, 100.0, 4500.0, 227.0, 100.0, 4540.0, 229.0, 100.0, 4580.0, 231.0, 100.0, 4620.0, 233.0, 100.0, 4660.0, 235.0, 100.0, 4700.0, 237.0, 100.0, 4740.0, 239.0, 100.0, 4780.0, 241.0, 100.0, 4820.0, 243.0, 100.0, 4860.0, 245.0, 100.0, 4900.0, 247.0, 100.0, 4940.0, 249.0, 100.0, 4980.0, 251.0, 100.0, 5020.0, 253.0, 100.0, 5060.0, 255.0, 100.0, 5100.0, 257.0, 100.0, 5140.0, 259.0, 100.0, 5180.0, 261.0, 100.0, 5220.0, 263.0, 100.0, 5260.0, 265.0, 100.0, 5300.0, 267.0, 100.0, 5340.0, 269.0, 100.0, 5380.0, 271.0, 100.0, 5420.0, 273.0, 100.0, 5460.0, 275.0, 100.0, 5500.0, 277.0, 100.0, 5540.0, 279.0, 100.0, 5580.0, 281.0, 100.0, 5620.0, 283.0, 100.0, 5660.0, 285.0, 100.0, 5700.0, 287.0, 100.0, 5740.0, 289.0, 100.0, 5780.0, 291.0, 100.0, 5820.0, 293.0, 100.0, 5860.0, 295.0, 100.0, 5900.0, 297.0, 100.0, 5940.0, 299.0, 100.0, 5980.0, 301.0, 100.0, 6020.0, 303.0, 100.0, 6060.0, 305.0, 100.0, 6100.0, 307.0, 100.0, 6140.0, 309.0, 100.0, 6180.0, 311.0, 100.0, 6220.0, 313.0, 100.0, 6260.0, 315.0, 100.0, 6300.0, 317.0, 100.0, 6340.0, 319.0, 100.0, 6380.0, 321.0, 100.0, 6420.0, 323.0, 100.0, 6460.0, 325.0, 100.0, 6500.0, 327.0, 100.0, 6540.0, 329.0, 100.0, 6580.0, 331.0, 100.0, 6620.0, 333.0, 100.0, 6660.0, 335.0, 100.0, 6700.0, 337.0, 100.0, 6740.0, 339.0, 100.0, 6780.0, 341.0, 100.0, 6820.0, 343.0, 100.0, 6860.0, 345.0, 100.0, 6900.0, 347.0, 100.0, 6940.0, 349.0, 100.0, 6980.0, 351.0, 100.0, 7020.0, 353.0, 100.0, 7060.0, 355.0, 100.0, 7100.0, 357.0, 100.0, 7140.0, 359.0, 100.0, 7180.0, 361.0, 100.0, 7220.0, 363.0, 100.0, 7260.0, 365.0, 100.0, 7300.0, 367.0, 100.0, 7340.0, 369.0, 100.0, 7380.0, 371.0, 100.0, 7420.0, 373.0, 100.0, 7460.0, 375.0, 100.0, 7500.0, 377.0, 100.0, 7540.0, 379.0, 100.0, 7580.0, 381.0, 100.0, 7620.0, 383.0, 100.0, 7660.0, 385.0, 100.0, 7700.0, 387.0, 100.0, 7740.0, 389.0, 100.0, 7780.0, 391.0, 100.0, 7820.0, 393.0, 100.0, 7860.0, 395.0, 100.0, 7900.0, 397.0, 100.0, 7940.0, 399.0, 100.0, 7980.0, 401.0, 100.0, 8020.0, 403.0, 100.0, 8060.0, 405.0, 100.0, 8100.0, 407.0, 100.0, 8140.0, 409.0, 100.0, 8180.0, 411.0, 100.0, 8220.0, 413.0, 100.0, 8260.0, 415.0, 100.0, 8300.0, 417.0, 100.0, 8340.0, 419.0, 100.0, 8380.0, 421.0, 100.0, 8420.0, 423.0, 100.0, 8460.0, 425.0, 100.0, 8500.0, 427.0, 100.0, 8540.0, 429.0, 100.0, 8580.0, 431.0, 100.0, 8620.0, 433.0, 100.0, 8660.0, 435.0, 100.0, 8700.0, 437.0, 100.0, 8740.0, 439.0, 100.0, 8780.0, 441.0, 100.0, 8820.0, 443.0, 100.0, 8860.0, 445.0, 100.0, 8900.0, 447.0, 100.0, 8940.0, 449.0, 100.0, 8980.0, 451.0, 100.0, 9020.0, 453.0, 100.0, 9060.0, 455.0, 100.0, 9100.0, 457.0, 100.0, 9140.0, 459.0, 100.0, 9180.0, 461.0, 100.0, 9220.0, 463.0, 100.0, 9260.0, 465.0, 100.0, 9300.0, 467.0, 100.0, 9340.0, 469.0, 100.0, 9380.0, 471.0, 100.0, 9420.0, 473.0, 100.0, 9460.0, 475.0, 100.0, 9500.0, 477.0, 100.0, 9540.0, 479.0, 100.0, 9580.0, 481.0, 100.0, 9620.0, 483.0, 100.0, 9660.0, 485.0, 100.0, 9700.0, 487.0, 100.0, 9740.0, 489.0, 100.0, 9780.0, 491.0, 100.0, 9820.0, 493.0, 100.0, 9860.0, 495.0, 100.0, 9900.0, 497.0, 100.0, 9940.0, 499.0, 100.0, 9980.0, 501.0, 100.0, 10020.0, 503.0, 100.0, 10060.0, 505.0, 100.0, 10100.0, 507.0, 100.0, 10140.0, 509.0, 100.0, 10180.0, 511.0, 100.0, 10220.0, 513.0, 100.0, 10260.0, 515.0, 100.0, 10300.0, 517.0, 100.0, 10340.0, 519.0, 100.0, 10380.0, 521.0, 100.0, 10420.0, 523.0, 100.0, 10460.0, 525.0, 100.0, 10500.0, 527.0, 100.0, 10540.0, 529.0, 100.0, 10580.0, 531.0, 100.0, 10620.0, 533.0, 100.0, 10660.0, 535.0, 100.0, 10700.0, 537.0, 100.0, 10740.0, 539.0, 100.0, 10780.0, 541.0, 100.0, 10820.0, 543.0, 100.0, 10860.0, 545.0, 100.0, 10900.0, 547.0, 100.0, 10940.0, 549.0, 100.0, 10980.0, 551.0, 100.0, 11020.0, 553.0, 100.0, 11060.0, 555.0, 100.0, 11100.0, 557.0, 100.0, 11140.0, 559.0, 100.0, 11180.0, 561.0, 100.0, 11220.0, 563.0, 100.0, 11260.0, 565.0, 100.0, 11300.0, 567.0, 100.0, 11340.0, 569.0, 100.0, 11380.0, 571.0, 100.0, 11420.0, 573.0, 100.0, 11460.0, 575.0, 100.0, 11500.0, 577.0, 100.0, 11540.0, 579.0, 100.0, 11580.0, 581.0, 100.0, 11620.0, 583.0, 100.0, 11660.0, 585.0, 100.0, 11700.0, 587.0, 100.0, 11740.0, 589.0, 100.0, 11780.0, 591.0, 100.0, 11820.0, 593.0, 100.0, 11860.0, 595.0, 100.0, 11900.0, 597.0, 100.0, 11940.0, 599.0, 100.0, 11980.0, 601.0, 100.0, 12020.0, 603.0, 100.0, 12060.0, 605.0, 100.0, 12100.0, 607.0, 100.0, 12140.0, 609.0, 100.0, 12180.0, 611.0, 100.0, 12220.0, 613.0, 100.0, 12260.0, 615.0, 100.0, 12300.0, 617.0, 100.0, 12340.0, 619.0, 100.0, 12380.0, 621.0, 100.0, 12420.0, 623.0, 100.0, 12460.0, 625.0, 100.0, 12500.0, 627.0, 100.0, 12540.0, 629.0, 100.0, 12580.0, 631.0, 100.0, 12620.0, 633.0, 100.0, 12660.0, 635.0, 100.0, 12700.0, 637.0, 100.0, 12740.0, 639.0, 100.0, 12780.0, 641.0, 100.0, 12820.0, 643.0, 100.0, 12860.0, 645.0, 100.0, 12900.0, 647.0, 100.0, 12940.0, 649.0, 100.0, 12980.0, 651.0, 100.0, 13020.0, 653.0, 100.0, 13060.0, 655.0, 100.0, 13100.0, 657.0, 100.0, 13140.0, 659.0, 100.0, 13180.0, 661.0, 100.0, 13220.0, 663.0, 100.0, 13260.0, 665.0, 100.0, 13300.0, 667.0, 100.0, 13340.0, 669.0, 100.0, 13380.0, 671.0, 100.0, 13420.0, 673.0, 100.0, 13460.0, 675.0, 100.0, 13500.0, 677.0, 100.0, 13540.0, 679.0, 100.0, 13580.0, 681.0, 100.0, 13620.0, 683.0, 100.0, 13660.0, 685.0, 100.0, 13700.0, 687.0, 100.0, 13740.0, 689.0, 100.0, 13780.0, 691.0, 100.0, 13820.0, 693.0, 100.0, 13860.0, 695.0, 100.0, 13900.0, 697.0, 100.0, 13940.0, 699.0, 100.0, 13980.0, 701.0, 100.0, 14020.0, 703.0, 100.0, 14060.0, 705.0, 100.0, 14100.0, 707.0, 100.0, 14140.0, 709.0, 100.0, 14180.0, 711.0, 100.0, 14220.0, 713.0, 100.0, 14260.0, 715.0, 100.0, 14300.0, 717.0, 100.0, 14340.0, 719.0, 100.0, 14380.0, 721.0, 100.0, 14420.0, 723.0, 100.0, 14460.0, 725.0, 100.0, 14500.0, 727.0, 100.0, 14540.0, 729.0, 100.0, 14580.0, 731.0, 100.0, 14620.0, 733.0, 100.0, 14660.0, 735.0, 100.0, 14700.0, 737.0, 100.0, 14740.0, 739.0, 100.0, 14780.0, 741.0, 100.0, 14820.0, 743.0, 100.0, 14860.0, 745.0, 100.0, 14900.0, 747.0, 100.0, 14940.0, 749.0, 100.0, 14980.0, 751.0, 100.0, 15020.0, 753.0, 100.0, 15060.0, 755.0, 100.0, 15100.0, 757.0, 100.0, 15140.0, 759.0, 100.0, 15180.0, 761.0, 100.0, 15220.0, 763.0, 100.0, 15260.0, 765.0, 100.0, 15300.0, 767.0, 100.0, 15340.0, 769.0, 100.0, 15380.0, 771.0, 100.0, 15420.0, 773.0, 100.0, 15460.0, 775.0, 100.0, 15500.0, 777.0, 100.0, 15540.0, 779.0, 100.0, 15580.0, 781.0, 100.0, 15620.0, 783.0, 100.0, 15660.0, 785.0, 100.0, 15700.0, 787.0, 100.0, 15740.0, 789.0, 100.0, 15780.0, 791.0, 100.0, 15820.0, 793.0, 100.0, 15860.0, 795.0, 100.0, 15900.0, 797.0, 100.0, 15940.0, 799.0, 100.0, 15980.0, 801.0, 100.0, 16020.0, 803.0, 100.0, 16060.0, 805.0, 100.0, 16100.0, 807.0, 100.0, 16140.0, 809.0, 100.0, 16180.0, 811.0, 100.0, 16220.0, 813.0, 100.0, 16260.0, 815.0, 100.0, 16300.0, 817.0, 100.0, 16340.0, 819.0, 100.0, 16380.0, 821.0, 100.0, 16420.0, 823.0, 100.0, 16460.0, 825.0, 100.0, 16500.0, 827.0, 100.0, 16540.0, 829.0, 100.0, 16580.0, 831.0, 100.0, 16620.0, 833.0, 100.0, 16660.0, 835.0, 100.0, 16700.0, 837.0, 100.0, 16740.0, 839.0, 100.0, 16780.0, 841.0, 100.0, 16820.0, 843.0, 100.0, 16860.0, 845.0, 100.0, 16900.0, 847.0, 100.0, 16940.0, 849.0, 100.0, 16980.0, 851.0, 100.0, 17020.0, 853.0, 100.0, 17060.0, 855.0, 100.0, 17100.0, 857.0, 100.0, 17140.0, 859.0, 100.0, 17180.0, 861.0, 100.0, 17220.0, 863.0, 100.0, 17260.0, 865.0, 100.0, 17300.0, 867.0, 100.0, 17340.0, 869.0, 100.0, 17380.0, 871.0, 100.0, 17420.0, 873.0, 100.0, 17460.0, 875.0, 100.0, 17500.0, 877.0, 100.0, 17540.0, 879.0, 100.0, 17580.0, 881.0, 100.0, 17620.0, 883.0, 100.0, 17660.0, 885.0, 100.0, 17700.0, 887.0, 100.0, 17740.0, 889.0, 100.0, 17780.0, 891.0, 100.0, 17820.0, 893.0, 100.0, 17860.0, 895.0, 100.0, 17900.0, 897.0, 100.0, 17940.0, 899.0, 100.0, 17980.0, 901.0, 100.0, 18020.0, 903.0, 100.0, 18060.0, 905.0, 100.0, 18100.0, 907.0, 100.0, 18140.0, 909.0, 100.0, 18180.0, 911.0, 100.0, 18220.0, 913.0, 100.0, 18260.0, 915.0, 100.0, 18300.0, 917.0, 100.0, 18340.0, 919.0, 100.0, 18380.0, 921.0, 100.0, 18420.0, 923.0, 100.0, 18460.0, 925.0, 100.0, 18500.0, 927.0, 100.0, 18540.0, 929.0, 100.0, 18580.0, 931.0, 100.0, 18620.0, 933.0, 100.0, 18660.0, 935.0, 100.0, 18700.0, 937.0, 100.0, 18740.0, 939.0, 100.0, 18780.0, 941.0, 100.0, 18820.0, 943.0, 100.0, 18860.0, 945.0, 100.0, 18900.0, 947.0, 100.0, 18940.0, 949.0, 100.0, 18980.0, 951.0, 100.0, 19020.0, 953.0, 100.0, 19060.0, 955.0, 100.0, 19100.0, 957.0, 100.0, 19140.0, 959.0, 100.0, 19180.0, 961.0, 100.0, 19220.0, 963.0, 100.0, 19260.0, 965.0, 100.0, 19300.0, 967.0, 100.0, 19340.0, 969.0, 100.0, 19380.0, 971.0, 100.0, 19420.0, 973.0, 100.0, 19460.0, 975.0, 100.0, 19500.0, 977.0, 100.0, 19540.0, 979.0, 100.0, 19580.0, 981.0, 100.0, 19620.0, 983.0, 100.0, 19660.0, 985.0, 100.0, 19700.0, 987.0, 100.0, 19740.0, 989.0, 100.0, 19780.0, 991.0, 100.0, 19820.0, 993.0, 100.0, 19860.0, 995.0, 100.0, 19900.0, 997.0, 100.0, 19940.0], "answer": 697.0}, {"response": "**Solution**\n```python\nimport math\n\ndef f(x):\n    return x - math.floor(math.sqrt(x))**2\n\nsum = 0\nfor i in range(101, 111):\n    sum += f(i)\nprint(sum)\n```", "solution": "```python\nimport math\n\ndef f(x):\n    return x - math.floor(math.sqrt(x))**2\n\nsum = 0\nfor i in range(101, 111):\n    sum += f(i)\nprint(sum)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "55", "model_answers": [55.0], "answer": 55.0}, {"response": "**Solution**\n```python\n# The number of people who have heard the rumor\n# at the end of the fifth cycle\n# = 3 * 3 * 3 * 3 * 3\n# = 3 ** 5\n# = 243\nprint(243)\n```", "solution": "```python\n# The number of people who have heard the rumor\n# at the end of the fifth cycle\n# = 3 * 3 * 3 * 3 * 3\n# = 3 ** 5\n# = 243\nprint(243)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "243", "model_answers": [243.0], "answer": 363.0}, {"response": "**Solution**\n```python\n# Using math\nfrom math import factorial\nx = 2\n\n# Find the product of the nonzero coefficients\nproduct = 1\nfor i in range(5):\n    product *= x**i * factorial(i)\n\n# Find the constant term\nproduct *= (-1)**5 * factorial(5)\nprint(product)\n```", "solution": "```python\n# Using math\nfrom math import factorial\nx = 2\n\n# Find the product of the nonzero coefficients\nproduct = 1\nfor i in range(5):\n    product *= x**i * factorial(i)\n\n# Find the constant term\nproduct *= (-1)**5 * factorial(5)\nprint(product)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-35389440", "model_answers": [-35389440.0], "answer": -128.0}, {"response": "**Solution**\n```python\nfrom sympy import simplify\nfrom sympy.abc import x\n\nresult = simplify(7*x**4 - 3*x**3 - 3*x**2 - 8*x + 1)\nresult *= 8*x**4 + 2*x**3 - 7*x**2 + 3*x + 4\nprint(result)\n```", "solution": "```python\nfrom sympy import simplify\nfrom sympy.abc import x\n\nresult = simplify(7*x**4 - 3*x**3 - 3*x**2 - 8*x + 1)\nresult *= 8*x**4 + 2*x**3 - 7*x**2 + 3*x + 4\nprint(result)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(7*x**4 - 3*x**3 - 3*x**2 - 8*x + 1)*(8*x**4 + 2*x**3 - 7*x**2 + 3*x + 4)", "model_answers": [7.0, 4.0, 3.0, 3.0, 3.0, 2.0, 8.0, 1.0, 8.0, 4.0, 2.0, 3.0, 7.0, 2.0, 3.0, 4.0], "answer": 37.0}, {"response": "**Solution**\n```python\nimport sympy as sym\n\nx = sym.Symbol('x')\nf = sym.Function('f', real=True)\nc = f(2) / x**3 - 9 / x + 3\nprint(c)\n```", "solution": "```python\nimport sympy as sym\n\nx = sym.Symbol('x')\nf = sym.Function('f', real=True)\nc = f(2) / x**3 - 9 / x + 3\nprint(c)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3 - 9/x + f(2)/x**3", "model_answers": [3.0, 9.0, 2.0, 3.0], "answer": 3.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\n\nx = sqrt(9) - 1\n\nwhile True:\n    x_old = x\n    x = sqrt(x + 1) - 1\n    if abs(x - x_old) < 1e-10:\n        break\n\nprint(x)\n```", "solution": "```python\nfrom sympy import sqrt\n\nx = sqrt(9) - 1\n\nwhile True:\n    x_old = x\n    x = sqrt(x + 1) - 1\n    if abs(x - x_old) < 1e-10:\n        break\n\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-1 + 3**(1/17179869184)", "model_answers": [-1.0, 3.0, 1.0, 17179869184.0], "answer": 72.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return 2 * x - 3\n\ndef g(x):\n    return 5 - 4 * x\n\nprint(g(f(4)))\n```", "solution": "```python\ndef f(x):\n    return 2 * x - 3\n\ndef g(x):\n    return 5 - 4 * x\n\nprint(g(f(4)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-15", "model_answers": [-15.0], "answer": -9.0}, {"response": "**Solution**\n```python\ndef f(x):\n    if x < -3:\n        return 3*x + 5\n    else:\n        return 7 - 4*x\n\nprint(f(-10))\n```", "solution": "```python\ndef f(x):\n    if x < -3:\n        return 3*x + 5\n    else:\n        return 7 - 4*x\n\nprint(f(-10))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-25", "model_answers": [-25.0], "answer": -25.0}, {"response": "**Solution**\n```python\n# third term is 5\n# sixth term is -1\n# twelfth term is -1 + 12 \\* (5 - (-1))\n#                   = -1 + 12 \\* 6\n#                   = -1 + 72\nprint(-1 + 72)\n```", "solution": "```python\n# third term is 5\n# sixth term is -1\n# twelfth term is -1 + 12 \\* (5 - (-1))\n#                   = -1 + 12 \\* 6\n#                   = -1 + 72\nprint(-1 + 72)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "71", "model_answers": [71.0], "answer": -13.0}, {"response": "**Solution**\n```python\nb = -12\nprint(b)\n```", "solution": "```python\nb = -12\nprint(b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-12", "model_answers": [-12.0], "answer": 16.0}, {"response": "**Solution**\n```python\na = 7\nr = (5103 / a)**(1/6)\nprint(a * r**4)\n```", "solution": "```python\na = 7\nr = (5103 / a)**(1/6)\nprint(a * r**4)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "567.0", "model_answers": [567.0], "answer": 567.0}, {"response": "**Solution**\n```python\nimport math\n\nsqrt2 = math.sqrt(2)\nsqrt3 = math.sqrt(3)\n\na = (sqrt2+sqrt3)**3\nb = (sqrt2-sqrt3)**3\nc = (-sqrt2+sqrt3)**3\n\nprint(a+b+c)\n```", "solution": "```python\nimport math\n\nsqrt2 = math.sqrt(2)\nsqrt3 = math.sqrt(3)\n\na = (sqrt2+sqrt3)**3\nb = (sqrt2-sqrt3)**3\nc = (-sqrt2+sqrt3)**3\n\nprint(a+b+c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "31.144806454223946", "model_answers": [31.144806454223946], "answer": 20.0}, {"response": "**Solution**\n```python\n# A, B, C = 1, 8, 3\nA, B, C = 1, 256, 3\nprint(A+B+C)\n```", "solution": "```python\n# A, B, C = 1, 8, 3\nA, B, C = 1, 256, 3\nprint(A+B+C)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "260", "model_answers": [260.0], "answer": 9.0}, {"response": "**Solution**\n```python\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)\n\ndef longest_side(p1, p2, p3):\n    return max(distance(p1, p2), distance(p2, p3), distance(p3, p1))\n\nprint(longest_side((11, 1), (2, 3), (3, 7)))\n```", "solution": "```python\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)\n\ndef longest_side(p1, p2, p3):\n    return max(distance(p1, p2), distance(p2, p3), distance(p3, p1))\n\nprint(longest_side((11, 1), (2, 3), (3, 7)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "10.0", "model_answers": [10.0], "answer": 10.0}, {"response": "**Solution**\n```python\nimport math\n\n# The sum of the odd integers between 46 and 64 is 171.\n\nprint(sum(range(47, 65, 2)))\n```", "solution": "```python\nimport math\n\n# The sum of the odd integers between 46 and 64 is 171.\n\nprint(sum(range(47, 65, 2)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "495", "model_answers": [495.0], "answer": 495.0}, {"response": "**Solution**\n```python\nimport sympy as sym\nx = sym.Symbol('x')\np1 = 3 * (x**10 - x**7 + 2*x**3 - x + 7)\np2 = 4 * (x**3 - 2*x**2 - 5)\np = p1 + p2\nprint(p.expand())\n```", "solution": "```python\nimport sympy as sym\nx = sym.Symbol('x')\np1 = 3 * (x**10 - x**7 + 2*x**3 - x + 7)\np2 = 4 * (x**3 - 2*x**2 - 5)\np = p1 + p2\nprint(p.expand())\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3*x**10 - 3*x**7 + 10*x**3 - 8*x**2 - 3*x + 1", "model_answers": [3.0, 10.0, 3.0, 7.0, 10.0, 3.0, 8.0, 2.0, 3.0, 1.0], "answer": 0.0}, {"response": "**Solution**\n```python\nprint(2)\n```", "solution": "```python\nprint(2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 1.0}, {"response": "**Solution**\n```python\na = (5*(-4) + 5)/5\nb = (3*(-2) + 3)/3\nprint(6*b)\n```", "solution": "```python\na = (5*(-4) + 5)/5\nb = (3*(-2) + 3)/3\nprint(6*b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-6.0", "model_answers": [-6.0], "answer": 0.0}, {"response": "**Solution**\n```python\nprint(abs(-3+2*(-4)))\n```", "solution": "```python\nprint(abs(-3+2*(-4)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "11", "model_answers": [11.0], "answer": 19.0}, {"response": "**Solution**\n```python\ndifference = 35 - 12\nprint(difference)\n```", "solution": "```python\ndifference = 35 - 12\nprint(difference)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "23", "model_answers": [23.0], "answer": 2.0}, {"response": "**Solution**\n```python\ntotal_calories = 150 * 7\nprint(total_calories)\n```", "solution": "```python\ntotal_calories = 150 * 7\nprint(total_calories)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1050", "model_answers": [1050.0], "answer": 1050.0}, {"response": "**Solution**\n```python\nfrom sympy import solve, Symbol\nx, y = Symbol('x'), Symbol('y')\nsol = solve((4*y - 4*x**2, 4*x - 4*y**2), (x, y))\nprint(sol)\nprint(1/(x**3 + y**3))\n```", "solution": "```python\nfrom sympy import solve, Symbol\nx, y = Symbol('x'), Symbol('y')\nsol = solve((4*y - 4*x**2, 4*x - 4*y**2), (x, y))\nprint(sol)\nprint(1/(x**3 + y**3))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(0, 0), (1, 1), ((-1/2 - sqrt(3)*I/2)**2, -1/2 - sqrt(3)*I/2), ((-1/2 + sqrt(3)*I/2)**2, -1/2 + sqrt(3)*I/2)]\n1/(x**3 + y**3)", "model_answers": [0.0, 0.0, 1.0, 1.0, -1.0, 2.0, 3.0, 2.0, 2.0, -1.0, 2.0, 3.0, 2.0, -1.0, 2.0, 3.0, 2.0, 2.0, -1.0, 2.0, 3.0, 2.0, 1.0, 3.0, 3.0], "answer": 4.0}, {"response": "**Solution**\n```python\nj = 24 / jk\nk = 48 / jl\nl = 18 / kl\njkl = jk * kl\njkl = jk * k\njkl = j * k * l\nprint(jkl)\n```", "solution": "```python\nj = 24 / jk\nk = 48 / jl\nl = 18 / kl\njkl = jk * kl\njkl = jk * k\njkl = j * k * l\nprint(jkl)\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 17.0}, {"response": "**Solution**\n```python\nfrom math import floor, ceil, sqrt, pi\n\ndef f(x):\n    if x % 1 == 0:\n        return abs(floor(x))\n    else:\n        return ceil(x) ** 2\n\nprint(f(sqrt(3)) + f(-pi) + f(sqrt(50)) + f(9/2))\n```", "solution": "```python\nfrom math import floor, ceil, sqrt, pi\n\ndef f(x):\n    if x % 1 == 0:\n        return abs(floor(x))\n    else:\n        return ceil(x) ** 2\n\nprint(f(sqrt(3)) + f(-pi) + f(sqrt(50)) + f(9/2))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "102", "model_answers": [102.0], "answer": 79.0}, {"response": "**Solution**\n```python\na = -4\nb = 8\nprint(a + b)\n```", "solution": "```python\na = -4\nb = 8\nprint(a + b)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "4", "model_answers": [4.0], "answer": 4.0}, {"response": "**Solution**\n```python\nx_list = []\nfor x in range(1, 1000):\n    if 3/x > 1/3 and 3/x < 3/4:\n        x_list.append(x)\nprint(sum(x_list))\n```", "solution": "```python\nx_list = []\nfor x in range(1, 1000):\n    if 3/x > 1/3 and 3/x < 3/4:\n        x_list.append(x)\nprint(sum(x_list))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "26", "model_answers": [26.0], "answer": 26.0}, {"response": "**Solution**\n```python\nestimate_red = 11 / 24\nprint(estimate_red * 480)\n```", "solution": "```python\nestimate_red = 11 / 24\nprint(estimate_red * 480)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "220.0", "model_answers": [220.0], "answer": 220.0}, {"response": "**Solution**\n```python\ntotal = 0\nfor i in range(259):\n    total += i\nprint(total)\n```", "solution": "```python\ntotal = 0\nfor i in range(259):\n    total += i\nprint(total)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "33411", "model_answers": [33411.0], "answer": -1.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return 10 / x\n\nprint(f(f(10)))\n```", "solution": "```python\ndef f(x):\n    return 10 / x\n\nprint(f(f(10)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "10.0", "model_answers": [10.0], "answer": 1.0}, {"response": "**Solution**\n```python\nf_x = -2\nt_x = 9 + 2*(-2)**2 + (-2)**2 - 3\nprint(t_x)\n```", "solution": "```python\nf_x = -2\nt_x = 9 + 2*(-2)**2 + (-2)**2 - 3\nprint(t_x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "18", "model_answers": [18.0], "answer": 5.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.symbols('x')\nexpr = sympy.sqrt(x**3 - 4*x**2 + 4)\nsolution = sympy.solve(expr - 16, x)[0]\nprint(solution)\n```", "solution": "```python\nimport sympy\nx = sympy.symbols('x')\nexpr = sympy.sqrt(x**3 - 4*x**2 + 4)\nsolution = sympy.solve(expr - 16, x)[0]\nprint(solution)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4/3 - 16/(3*(-3466 + 18*sqrt(37065))**(1/3)*(-1/2 - sqrt(3)*I/2)) - (-3466 + 18*sqrt(37065))**(1/3)*(-1/2 - sqrt(3)*I/2)/3", "model_answers": [4.0, 3.0, 16.0, 3.0, -3466.0, 18.0, 37065.0, 1.0, 3.0, -1.0, 2.0, 3.0, 2.0, -3466.0, 18.0, 37065.0, 1.0, 3.0, -1.0, 2.0, 3.0, 2.0, 3.0], "answer": 66.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\n\n# calculate the distance\ndistance = sqrt(5**2 + (-2)**2)\n\n# convert to int\nm = int(distance)\n\nprint(m)\n```", "solution": "```python\nfrom math import sqrt\n\n# calculate the distance\ndistance = sqrt(5**2 + (-2)**2)\n\n# convert to int\nm = int(distance)\n\nprint(m)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "5", "model_answers": [5.0], "answer": 5.0}, {"response": "**Solution**\n```python\nx_agreed = (3 + (-6)) / 2\nx_actual = (3 + (-10)) / 2\nprint(x_agreed - x_actual)\n```", "solution": "```python\nx_agreed = (3 + (-6)) / 2\nx_actual = (3 + (-10)) / 2\nprint(x_agreed - x_actual)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2.0", "model_answers": [2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nfrom sympy import *\nx = symbols('x')\ny = x**2 - 6*x + 13\nprint(y.subs(x, 0))\n```", "solution": "```python\nfrom sympy import *\nx = symbols('x')\ny = x**2 - 6*x + 13\nprint(y.subs(x, 0))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "13", "model_answers": [13.0], "answer": 4.0}, {"response": "**Solution**\n```python\nprint(19**2 + 2*19 + 1)\n```", "solution": "```python\nprint(19**2 + 2*19 + 1)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "400", "model_answers": [400.0], "answer": 400.0}, {"response": "**Solution**\n```python\nn = 3\nm = 1\nn_m = n + m\nprint(n_m)\nn_m_sub = n_m - n\nprint(n_m_sub)\n```", "solution": "```python\nn = 3\nm = 1\nn_m = n + m\nprint(n_m)\nn_m_sub = n_m - n\nprint(n_m_sub)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "4\n1", "model_answers": [4.0, 1.0], "answer": 12.0}, {"response": "**Solution**\n```python\nfrom sympy import solve\nfrom sympy.abc import x, y\n\neq = x**2 + 8*x + y**2 - 6*y\nsol = solve(eq, y)\nprint(sol)\n```", "solution": "```python\nfrom sympy import solve\nfrom sympy.abc import x, y\n\neq = x**2 + 8*x + y**2 - 6*y\nsol = solve(eq, y)\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[3 - sqrt(-(x - 1)*(x + 9)), sqrt(-(x - 1)*(x + 9)) + 3]", "model_answers": [3.0, 1.0, 9.0, 1.0, 9.0, 3.0], "answer": 5.0}, {"response": "**Solution**\n```python\n# Assume a is greater\na = 0\nwhile True:\n    a += 1\n    b = a + 1\n    if b**2 - a**2 == 35:\n        print(max(a, b))\n        break\n```", "solution": "```python\n# Assume a is greater\na = 0\nwhile True:\n    a += 1\n    b = a + 1\n    if b**2 - a**2 == 35:\n        print(max(a, b))\n        break\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "18", "model_answers": [18.0], "answer": 324.0}, {"response": "**Solution**\n```python\np = lambda x: 2-x**2\nq = lambda x: 6/x\nprint(p(q(2)))\n```", "solution": "```python\np = lambda x: 2-x**2\nq = lambda x: 6/x\nprint(p(q(2)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-7.0", "model_answers": [-7.0], "answer": -7.0}, {"response": "**Solution**\n```python\nn = 1000\nk = 100\nr = 10\na = 1\n\ndef term(n):\n    return a * r ** (n - 1)\n\nbill_terms = []\nfor i in range(1, k + 1):\n    bill_terms.append(term(i))\n\nmax_digits = len(str(max(bill_terms)))\n\nprint(max_digits)\n```", "solution": "```python\nn = 1000\nk = 100\nr = 10\na = 1\n\ndef term(n):\n    return a * r ** (n - 1)\n\nbill_terms = []\nfor i in range(1, k + 1):\n    bill_terms.append(term(i))\n\nmax_digits = len(str(max(bill_terms)))\n\nprint(max_digits)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "100", "model_answers": [100.0], "answer": 4.0}, {"response": "**Solution**\n```python\nx_a = -2\nx_c = -1\ny_a = x_a**2 + 4*x_a + 6\ny_c = x_c**2 + 0.5*x_c + 6\nprint(x_c - x_a)\n```", "solution": "```python\nx_a = -2\nx_c = -1\ny_a = x_a**2 + 4*x_a + 6\ny_c = x_c**2 + 0.5*x_c + 6\nprint(x_c - x_a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1", "model_answers": [1.0], "answer": 6.0}, {"response": "**Solution**\n```python\ndef f(x):\n    if x == 1:\n        return 2\n    elif x == 4:\n        return 3\n    elif x == 7:\n        return 4\n    else:\n        raise ValueError(\"Invalid input\")\n\ndef f_inv(y):\n    if y == 2:\n        return 1\n    elif y == 3:\n        return 4\n    elif y == 4:\n        return 7\n    else:\n        raise ValueError(\"Invalid input\")\n\nprint(f_inv(f_inv(3)))\n```", "solution": "```python\ndef f(x):\n    if x == 1:\n        return 2\n    elif x == 4:\n        return 3\n    elif x == 7:\n        return 4\n    else:\n        raise ValueError(\"Invalid input\")\n\ndef f_inv(y):\n    if y == 2:\n        return 1\n    elif y == 3:\n        return 4\n    elif y == 4:\n        return 7\n    else:\n        raise ValueError(\"Invalid input\")\n\nprint(f_inv(f_inv(3)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "7", "model_answers": [7.0], "answer": 7.0}, {"response": "**Solution**\n```python\ntotal = 0\nfor i in range(1, 20):\n    total += int(i ** 0.5)\nprint(total)\n```", "solution": "```python\ntotal = 0\nfor i in range(1, 20):\n    total += int(i ** 0.5)\nprint(total)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "50", "model_answers": [50.0], "answer": 50.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\n\na = 1\nb = 1\nwhile True:\n    x = sqrt(a)/b\n    if x.is_integer and x.is_positive:\n        break\n    a += 1\n\nprint(a+b)\n```", "solution": "```python\nfrom sympy import sqrt\n\na = 1\nb = 1\nwhile True:\n    x = sqrt(a)/b\n    if x.is_integer and x.is_positive:\n        break\n    a += 1\n\nprint(a+b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 21.0}, {"response": "**Solution**\n```python\ncorrect_answers = 232 // 5\nprint(correct_answers)\n```", "solution": "```python\ncorrect_answers = 232 // 5\nprint(correct_answers)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "46", "model_answers": [46.0], "answer": 56.0}, {"response": "**Solution**\n```python\na = 6 - (-1)\nb = 5 - (a*1)\nh = lambda x: a*x + b\nprint(h(6))\n```", "solution": "```python\na = 6 - (-1)\nb = 5 - (a*1)\nh = lambda x: a*x + b\nprint(h(6))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "40", "model_answers": [40.0], "answer": 15.0}, {"response": "**Solution**\n```python\nx = 3 - y\ny = 4 - x\nprint(2 * x**2 + 2 * y**2)\n```", "solution": "```python\nx = 3 - y\ny = 4 - x\nprint(2 * x**2 + 2 * y**2)\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 25.0}, {"response": "**Solution**\n```python\nnum_laps = 10 * (400 / 250)\nprint(num_laps)\n```", "solution": "```python\nnum_laps = 10 * (400 / 250)\nprint(num_laps)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "16.0", "model_answers": [16.0], "answer": 16.0}, {"response": "**Solution**\n```python\nimport sympy as sym\na, b, c = sym.symbols('a b c')\nsum_ab = a + b\nsum_abc = sum_ab + c\nsum_abc_cubed = sum_abc ** 3\nprint(sum_abc_cubed)\n```", "solution": "```python\nimport sympy as sym\na, b, c = sym.symbols('a b c')\nsum_ab = a + b\nsum_abc = sum_ab + c\nsum_abc_cubed = sum_abc ** 3\nprint(sum_abc_cubed)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(a + b + c)**3", "model_answers": [3.0], "answer": 51.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\na, b = solve(2*x**2 - 10*x + 5, x)\nprint((2*a - 3)*(4*b - 6))\n```", "solution": "```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\na, b = solve(2*x**2 - 10*x + 5, x)\nprint((2*a - 3)*(4*b - 6))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(2 - sqrt(15))*(4 + 2*sqrt(15))", "model_answers": [2.0, 15.0, 4.0, 2.0, 15.0], "answer": -22.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\n\ndef f(x):\n    return sqrt(3 * x) + 2\n\nprint(f(0) + f(3))\n```", "solution": "```python\nfrom math import sqrt\n\ndef f(x):\n    return sqrt(3 * x) + 2\n\nprint(f(0) + f(3))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "7.0", "model_answers": [7.0], "answer": 7.0}, {"response": "**Solution**\n```python\nfrom math import factorial\n\nn = 9\nx = 5\n\nprint(x**n / factorial(n - 2 * x + 1))\n```", "solution": "```python\nfrom math import factorial\n\nn = 9\nx = 5\n\nprint(x**n / factorial(n - 2 * x + 1))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1953125.0", "model_answers": [1953125.0], "answer": 125.0}, {"response": "**Solution**\n```python\nf(g(x)) = f(-3)\nf(-3) = 2(-3) + 1 = 6\n```", "solution": "```python\nf(g(x)) = f(-3)\nf(-3) = 2(-3) + 1 = 6\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": -5.0}, {"response": "**Solution**\n```python\na, b, c = 1, 1, 1\n\n# Calculate the root\nroot = (a**(1/3) + b**(1/3) + 1) / c\n\n# Calculate a+b+c\nsum = a + b + c\n\n# Check if the root is correct\nprint(root)\nprint(sum)\n```", "solution": "```python\na, b, c = 1, 1, 1\n\n# Calculate the root\nroot = (a**(1/3) + b**(1/3) + 1) / c\n\n# Calculate a+b+c\nsum = a + b + c\n\n# Check if the root is correct\nprint(root)\nprint(sum)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3.0\n3", "model_answers": [3.0, 3.0], "answer": 98.0}, {"response": "**Solution**\n```python\ny = (z * x) / (z - x)\ny = (24 * 25) / (24 - 25)\ny = 600 / 4\ny = 150\n```", "solution": "```python\ny = (z * x) / (z - x)\ny = (24 * 25) / (24 - 25)\ny = 600 / 4\ny = 150\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 600.0}, {"response": "**Solution**\n```python\nx = 25\ny = 25\nprint(x + y)\n```", "solution": "```python\nx = 25\ny = 25\nprint(x + y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "50", "model_answers": [50.0], "answer": 17.0}, {"response": "**Solution**\n```python\n# The difference between two consecutive even perfect squares is 268\n# The difference between two consecutive squares is 2\n# The larger of the two squares is the next perfect square\n\n# The next perfect square is 256\nprint(256)\n```", "solution": "```python\n# The difference between two consecutive even perfect squares is 268\n# The difference between two consecutive squares is 2\n# The larger of the two squares is the next perfect square\n\n# The next perfect square is 256\nprint(256)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "256", "model_answers": [256.0], "answer": 4624.0}, {"response": "**Solution**\n```python\nfirst_term = 8 - (3 - 2)\nprint(first_term)\n```", "solution": "```python\nfirst_term = 8 - (3 - 2)\nprint(first_term)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7", "model_answers": [7.0], "answer": 2.0}, {"response": "**Solution**\n```python\nfrom sympy import *\nA, B, C = symbols(\"A B C\")\n\nperimeter = 2*A + 2*B + 2*C\nprint(perimeter)\n```", "solution": "```python\nfrom sympy import *\nA, B, C = symbols(\"A B C\")\n\nperimeter = 2*A + 2*B + 2*C\nprint(perimeter)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2*A + 2*B + 2*C", "model_answers": [2.0, 2.0, 2.0], "answer": 40.0}, {"response": "**Solution**\n```python\na, b, c = 1, 3, 2\nabc = a * b * c\nprint(abc)\n```", "solution": "```python\na, b, c = 1, 3, 2\nabc = a * b * c\nprint(abc)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": 78.0}, {"response": "**Solution**\n```python\na = 1\nb = -8\nc = 49\nab = a * b\nprint(ab)\n```", "solution": "```python\na = 1\nb = -8\nc = 49\nab = a * b\nprint(ab)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-8", "model_answers": [-8.0], "answer": -4.0}, {"response": "**Solution**\n```python\nA = 3\nB = 1\nC = 1\n\n# Compute AC^2 - B\nac_squared = A*C*C - B\nprint(ac_squared)\n```", "solution": "```python\nA = 3\nB = 1\nC = 1\n\n# Compute AC^2 - B\nac_squared = A*C*C - B\nprint(ac_squared)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 19.0}, {"response": "**Solution**\n```python\nprint(max([6, 8, 3, 5, 4, 2]))\n```", "solution": "```python\nprint(max([6, 8, 3, 5, 4, 2]))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 15.0}, {"response": "**Solution**\n```python\ncolumn_sum = 0\nfor row in range(1, 11):\n    for column in range(5):\n        column_sum += row * 10 ** column\nprint(column_sum)\n```", "solution": "```python\ncolumn_sum = 0\nfor row in range(1, 11):\n    for column in range(5):\n        column_sum += row * 10 ** column\nprint(column_sum)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "611105", "model_answers": [611105.0], "answer": 255.0}, {"response": "**Solution**\n```python\nfrom math import ceil, floor, sqrt\n\n# ceil(sqrt(27)) = 5\n# floor(sqrt(26)) = 4\n\nprint(ceil(sqrt(27)) - floor(sqrt(26)))\n```", "solution": "```python\nfrom math import ceil, floor, sqrt\n\n# ceil(sqrt(27)) = 5\n# floor(sqrt(26)) = 4\n\nprint(ceil(sqrt(27)) - floor(sqrt(26)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\n# Find the vertex\nvx = 2\nvy = 3\n\n# Find the point on the parabola\npx = 4\npy = 4\n\n# Find the slope\nm = (py-vy)/(px-vx)\n\n# Find the y-intercept\nb = vy - m*vx\n\n# Find the value of y when x=6\ny = m*6 + b\n\nprint(y)\n```", "solution": "```python\n# Find the vertex\nvx = 2\nvy = 3\n\n# Find the point on the parabola\npx = 4\npy = 4\n\n# Find the slope\nm = (py-vy)/(px-vx)\n\n# Find the y-intercept\nb = vy - m*vx\n\n# Find the value of y when x=6\ny = m*6 + b\n\nprint(y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5.0", "model_answers": [5.0], "answer": 7.0}, {"response": "**Solution**\n```python\nf = lambda x: (x**2 + 2*x + 3)/x\ng = lambda x: x**3 + 2\nprint(g(f(-3)))\n```", "solution": "```python\nf = lambda x: (x**2 + 2*x + 3)/x\ng = lambda x: x**3 + 2\nprint(g(f(-3)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-6.0", "model_answers": [-6.0], "answer": -6.0}, {"response": "**Solution**\n```python\nfeet_per_second = 88 * 66 / 60\nprint(feet_per_second)\n```", "solution": "```python\nfeet_per_second = 88 * 66 / 60\nprint(feet_per_second)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "96.8", "model_answers": [96.8], "answer": 96.8}, {"response": "**Solution**\n```python\ndistance = 9 * 12\nprint(distance)\n```", "solution": "```python\ndistance = 9 * 12\nprint(distance)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "108", "model_answers": [108.0], "answer": 108.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.symbols('x')\ny = 2*x - 13\nf = 3*x + y - 92\nsolution = sympy.solve(f, x)\nprint(solution)\n```", "solution": "```python\nimport sympy\nx = sympy.symbols('x')\ny = 2*x - 13\nf = 3*x + y - 92\nsolution = sympy.solve(f, x)\nprint(solution)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "[21]", "model_answers": [21.0], "answer": 21.0}, {"response": "**Solution**\n```python\nfrom sympy import sympify\nfrom sympy.solvers import solve\n\nf = sympify('x^3 + 3*x**2 + 3*x + 1')\nf_inv = solve(f - 2010)[0]\nprint(f.subs(f_inv, f_inv))\n```", "solution": "```python\nfrom sympy import sympify\nfrom sympy.solvers import solve\n\nf = sympify('x^3 + 3*x**2 + 3*x + 1')\nf_inv = solve(f - 2010)[0]\nprint(f.subs(f_inv, f_inv))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "x**3 + 3*x**2 + 3*x + 1", "model_answers": [3.0, 3.0, 2.0, 3.0, 1.0], "answer": 2010.0}, {"response": "**Solution**\n```python\nnew_volume = 1.835\nold_volume = 3.67\npressure = 4\nnew_pressure = pressure / new_volume * old_volume\nprint(new_pressure)\n```", "solution": "```python\nnew_volume = 1.835\nold_volume = 3.67\npressure = 4\nnew_pressure = pressure / new_volume * old_volume\nprint(new_pressure)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "8.0", "model_answers": [8.0], "answer": 8.0}, {"response": "**Solution**\n```python\nimport sympy\n\nx, y = sympy.symbols('x, y')\nK = sympy.solve(3*x - 7*y - 65, y)[0]\nprint(K)\n```", "solution": "```python\nimport sympy\n\nx, y = sympy.symbols('x, y')\nK = sympy.solve(3*x - 7*y - 65, y)[0]\nprint(K)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3*x/7 - 65/7", "model_answers": [3.0, 7.0, 65.0, 7.0], "answer": 1.0}, {"response": "**Solution**\n```python\nx = 1\nprint(x)\n```", "solution": "```python\nx = 1\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1", "model_answers": [1.0], "answer": -7.0}, {"response": "**Solution**\n```python\na = -15\n```", "solution": "```python\na = -15\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "", "model_answers": [], "answer": -40.0}, {"response": "**Solution**\n```python\ndegrees_per_hour = 360 / 24\nprint(degrees_per_hour)\n```", "solution": "```python\ndegrees_per_hour = 360 / 24\nprint(degrees_per_hour)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "15.0", "model_answers": [15.0], "answer": 15.0}, {"response": "**Solution**\n```python\nsmallest = (49 - 7) / 2\nprint(smallest)\n```", "solution": "```python\nsmallest = (49 - 7) / 2\nprint(smallest)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "21.0", "model_answers": [21.0], "answer": 4.0}, {"response": "**Solution**\n```python\nprint(2 ** 3 ** (4/3))\n```", "solution": "```python\nprint(2 ** 3 ** (4/3))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "20.066939702021237", "model_answers": [20.066939702021237], "answer": 16.0}, {"response": "**Solution**\n```python\nx = 6\nprint(x)\n```", "solution": "```python\nx = 6\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": 5.0}, {"response": "**Solution**\n```python\nx = 1/2\nprint(x - 1)\n```", "solution": "```python\nx = 1/2\nprint(x - 1)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-0.5", "model_answers": [-0.5], "answer": -2.0}, {"response": "**Solution**\n```python\nnumber_of_tours = 6 - 9\nprint(number_of_tours)\n```", "solution": "```python\nnumber_of_tours = 6 - 9\nprint(number_of_tours)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-3", "model_answers": [-3.0], "answer": 28.0}, {"response": "**Solution**\n```python\nthird_term = 25 / 2\nprint(third_term)\n```", "solution": "```python\nthird_term = 25 / 2\nprint(third_term)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "12.5", "model_answers": [12.5], "answer": 11.0}, {"response": "**Solution**\n```python\nx = 243\ny = 3\nprint(x + y)\n```", "solution": "```python\nx = 243\ny = 3\nprint(x + y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "246", "model_answers": [246.0], "answer": 36.0}, {"response": "**Solution**\n```python\nimport numpy as np\nimport sympy as sp\n\nx = sp.Symbol('x')\ny = 3*x**2 - 5*x - 3\norigin = sp.Symbol('origin')\nAB = np.array([y - origin, x - origin])\nAB_squared = np.dot(AB, AB)\nprint(AB_squared)\n```", "solution": "```python\nimport numpy as np\nimport sympy as sp\n\nx = sp.Symbol('x')\ny = 3*x**2 - 5*x - 3\norigin = sp.Symbol('origin')\nAB = np.array([y - origin, x - origin])\nAB_squared = np.dot(AB, AB)\nprint(AB_squared)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(-origin + x)**2 + (-origin + 3*x**2 - 5*x - 3)**2", "model_answers": [2.0, 3.0, 2.0, 5.0, 3.0, 2.0], "answer": 104.0}, {"response": "**Solution**\n```python\n# Step 1: Define a function to convert a unit into another unit.\ndef convert(x, y, z):\n    return x * z / y\n\n# Step 2: Define the relationships between units.\nflicks_to_flecks = 8\nflocks_to_flecks = 4\n\n# Step 3: Use the function to calculate the result.\nresult = convert(12, flicks_to_flecks, flocks_to_flecks)\n\n# Step 4: Print the result.\nprint(result)\n```", "solution": "```python\n# Step 1: Define a function to convert a unit into another unit.\ndef convert(x, y, z):\n    return x * z / y\n\n# Step 2: Define the relationships between units.\nflicks_to_flecks = 8\nflocks_to_flecks = 4\n\n# Step 3: Use the function to calculate the result.\nresult = convert(12, flicks_to_flecks, flocks_to_flecks)\n\n# Step 4: Print the result.\nprint(result)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6.0", "model_answers": [6.0], "answer": 48.0}, {"response": "**Solution**\n```python\nfrom sympy import log, Symbol, expand\nx = Symbol('x')\nexpr = log(expand((x-1)**2))\nprint(expr.subs(x, 3**2))\n```", "solution": "```python\nfrom sympy import log, Symbol, expand\nx = Symbol('x')\nexpr = log(expand((x-1)**2))\nprint(expr.subs(x, 3**2))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "log(64)", "model_answers": [64.0], "answer": 2.0}, {"response": "**Solution**\n```python\n# Import math module\nfrom math import sqrt\n\n# Calculate sum of all a's\nsum = 0\nfor a in range(100):\n    if sqrt(a) + a == sqrt(a*a + a):\n        sum += a\n\nprint(sum)\n```", "solution": "```python\n# Import math module\nfrom math import sqrt\n\n# Calculate sum of all a's\nsum = 0\nfor a in range(100):\n    if sqrt(a) + a == sqrt(a*a + a):\n        sum += a\n\nprint(sum)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 4.0}, {"response": "**Solution**\n```python\nA = 10\nB = 1\nAB = A * B\nprint(AB + B)\n```", "solution": "```python\nA = 10\nB = 1\nAB = A * B\nprint(AB + B)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "11", "model_answers": [11.0], "answer": 12.0}, {"response": "**Solution**\n```python\ny = 12 - 6\nprint(y)\n```", "solution": "```python\ny = 12 - 6\nprint(y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": 9.0}, {"response": "**Solution**\n```python\nr = 15.5\nprint(r)\n```", "solution": "```python\nr = 15.5\nprint(r)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15.5", "model_answers": [15.5], "answer": 0.0}, {"response": "**Solution**\n```python\nx_coord = 0 + (9/3)\ny_coord = 0 + (6/3)\nprint(x_coord + y_coord)\n```", "solution": "```python\nx_coord = 0 + (9/3)\ny_coord = 0 + (6/3)\nprint(x_coord + y_coord)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "5.0", "model_answers": [5.0], "answer": 5.0}, {"response": "**Solution**\n```python\nprint(int(36/7))\n```", "solution": "```python\nprint(int(36/7))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "5", "model_answers": [5.0], "answer": 5.0}, {"response": "**Solution**\n```python\nimport sympy\nr = sympy.Symbol('r')\nexpr = (6*r**2 - 19*r - 7) / (2*r - 7)\nsolution = sympy.solve(expr - 4*r + 3, r)\nprint(solution)\n```", "solution": "```python\nimport sympy\nr = sympy.Symbol('r')\nexpr = (6*r**2 - 19*r - 7) / (2*r - 7)\nsolution = sympy.solve(expr - 4*r + 3, r)\nprint(solution)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "[4]", "model_answers": [4.0], "answer": 4.0}, {"response": "**Solution**\n```python\nimport numpy as np\nimport sympy as sp\n\na, b, c = sp.symbols('a, b, c')\n\nf = a*sp.Symbol('x')**2 + b*sp.Symbol('x') + c\n\nsolution = sp.solve(f.subs({sp.Symbol('x'): 0}), c)\nsolution = sp.solve(f.subs({sp.Symbol('x'): 1}), b)\nsolution = sp.solve(f.subs({sp.Symbol('x'): 2}), a)\n\nprint(solution)\n```", "solution": "```python\nimport numpy as np\nimport sympy as sp\n\na, b, c = sp.symbols('a, b, c')\n\nf = a*sp.Symbol('x')**2 + b*sp.Symbol('x') + c\n\nsolution = sp.solve(f.subs({sp.Symbol('x'): 0}), c)\nsolution = sp.solve(f.subs({sp.Symbol('x'): 1}), b)\nsolution = sp.solve(f.subs({sp.Symbol('x'): 2}), a)\n\nprint(solution)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[-b/2 - c/4]", "model_answers": [2.0, 4.0], "answer": 10.0}, {"response": "**Solution**\n```python\nimport sympy\nimport numpy\n\n# Define the equations\nx2 = sympy.Symbol('x')\ny2 = sympy.Symbol('y')\ncircle_1 = x2**2 + y2**2 + 3*x2 + 6*y2 + 10\ncircle_2 = x2**2 + y2**2 + 3*x2 + 2*y2 + 4\n\n# Solve for the coefficients\nsolution_1 = sympy.solve(circle_1)\nsolution_2 = sympy.solve(circle_2)\n\n# Print the solution\nprint(solution_1)\nprint(solution_2)\n```", "solution": "```python\nimport sympy\nimport numpy\n\n# Define the equations\nx2 = sympy.Symbol('x')\ny2 = sympy.Symbol('y')\ncircle_1 = x2**2 + y2**2 + 3*x2 + 6*y2 + 10\ncircle_2 = x2**2 + y2**2 + 3*x2 + 2*y2 + 4\n\n# Solve for the coefficients\nsolution_1 = sympy.solve(circle_1)\nsolution_2 = sympy.solve(circle_2)\n\n# Print the solution\nprint(solution_1)\nprint(solution_2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[{x: -sqrt(-4*y**2 - 24*y - 31)/2 - 3/2}, {x: sqrt(-4*y**2 - 24*y - 31)/2 - 3/2}]\n[{x: -sqrt(-4*y**2 - 8*y - 7)/2 - 3/2}, {x: sqrt(-4*y**2 - 8*y - 7)/2 - 3/2}]", "model_answers": [-4.0, 2.0, 24.0, 31.0, 2.0, 3.0, 2.0, -4.0, 2.0, 24.0, 31.0, 2.0, 3.0, 2.0, -4.0, 2.0, 8.0, 7.0, 2.0, 3.0, 2.0, -4.0, 2.0, 8.0, 7.0, 2.0, 3.0, 2.0], "answer": 7.0}, {"response": "**Solution**\n```python\n# f(x) = x + 1\n# g(x) = 2x\n# f^{-1}(x) = x - 1\n# g^{-1}(x) = x/2\n\nf_inv = lambda x: x - 1\ng_inv = lambda x: x/2\n\nf = lambda x: x + 1\ng = lambda x: 2*x\n\n# f(g^{-1}(f^{-1}(f^{-1}(g(f(5))))))\nprint(f(g_inv(f_inv(f_inv(g(f(5)))))))\n```", "solution": "```python\n# f(x) = x + 1\n# g(x) = 2x\n# f^{-1}(x) = x - 1\n# g^{-1}(x) = x/2\n\nf_inv = lambda x: x - 1\ng_inv = lambda x: x/2\n\nf = lambda x: x + 1\ng = lambda x: 2*x\n\n# f(g^{-1}(f^{-1}(f^{-1}(g(f(5))))))\nprint(f(g_inv(f_inv(f_inv(g(f(5)))))))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "6.0", "model_answers": [6.0], "answer": 6.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return x**3 - 8\n\ndef f_inv(y):\n    return (y + 8)**(1/3)\n\nprint(f_inv(f(f_inv(19))))\n```", "solution": "```python\ndef f(x):\n    return x**3 - 8\n\ndef f_inv(y):\n    return (y + 8)**(1/3)\n\nprint(f_inv(f(f_inv(19))))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3.0", "model_answers": [3.0], "answer": 3.0}, {"response": "**Solution**\n```python\nn = 3\ns = n**2 - 2**n + 1\nt = 2*s - s**2\nprint(t)\n```", "solution": "```python\nn = 3\ns = n**2 - 2**n + 1\nt = 2*s - s**2\nprint(t)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "0", "model_answers": [0.0], "answer": 0.0}, {"response": "**Solution**\n```python\nj = 16 / 21 * 14\nprint(j)\n```", "solution": "```python\nj = 16 / 21 * 14\nprint(j)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "10.666666666666666", "model_answers": [10.666666666666666], "answer": 24.0}, {"response": "**Solution**\n```python\ndef f(x):\n    if x < -5:\n        return x**2 + 9\n    else:\n        return 3*x - 8\n\npossible_values_of_x = []\nfor x in range(-10, 10):\n    if f(x) == 10:\n        possible_values_of_x.append(x)\nprint(sum(possible_values_of_x))\n```", "solution": "```python\ndef f(x):\n    if x < -5:\n        return x**2 + 9\n    else:\n        return 3*x - 8\n\npossible_values_of_x = []\nfor x in range(-10, 10):\n    if f(x) == 10:\n        possible_values_of_x.append(x)\nprint(sum(possible_values_of_x))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "6", "model_answers": [6.0], "answer": 6.0}, {"response": "**Solution**\n```python\n# For each integer between 1 and 91,\n# check if it is an arithmetic sequence.\ncount = 0\nfor i in range(1, 92):\n    for j in range(i + 1, 92):\n        if i + j == 91:\n            count += 1\nprint(count)\n```", "solution": "```python\n# For each integer between 1 and 91,\n# check if it is an arithmetic sequence.\ncount = 0\nfor i in range(1, 92):\n    for j in range(i + 1, 92):\n        if i + j == 91:\n            count += 1\nprint(count)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "45", "model_answers": [45.0], "answer": 12.0}, {"response": "**Solution**\n```python\nbride_age = 51 - 15\ngroom_age = bride_age + 15\nprint(groom_age)\n```", "solution": "```python\nbride_age = 51 - 15\ngroom_age = bride_age + 15\nprint(groom_age)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "51", "model_answers": [51.0], "answer": 27.0}, {"response": "**Solution**\n```python\nslope = (365 - 3) / (4 - 1)\nprint(slope)\n```", "solution": "```python\nslope = (365 - 3) / (4 - 1)\nprint(slope)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "120.66666666666667", "model_answers": [120.66666666666667], "answer": 89.0}, {"response": "**Solution**\n```python\n# Import from the toolbox\nfrom sympy import Symbol\n\n# Define variables\nm = Symbol('m')\nn = 28\n\n# Find the number of polynomials\nnum_polys = (m**2 + m + n).factor()\nprint(num_polys)\n```", "solution": "```python\n# Import from the toolbox\nfrom sympy import Symbol\n\n# Define variables\nm = Symbol('m')\nn = 28\n\n# Find the number of polynomials\nnum_polys = (m**2 + m + n).factor()\nprint(num_polys)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "m**2 + m + 28", "model_answers": [2.0, 28.0], "answer": 3.0}, {"response": "**Solution**\n```python\nfrom sympy import symbols\nfrom sympy.abc import x\nf = symbols('f', cls=Function)\nf_expr = 3*f(2*x) + 1\nf_expr.subs(x, 4).subs(f, f_expr.diff(x).simplify()).simplify()\n```", "solution": "```python\nfrom sympy import symbols\nfrom sympy.abc import x\nf = symbols('f', cls=Function)\nf_expr = 3*f(2*x) + 1\nf_expr.subs(x, 4).subs(f, f_expr.diff(x).simplify()).simplify()\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": 10.0}, {"response": "**Solution**\n```python\nmin_y = (-7)\nprint(min_y)\n```", "solution": "```python\nmin_y = (-7)\nprint(min_y)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-7", "model_answers": [-7.0], "answer": -7.0}, {"response": "**Solution**\n```python\nf_minus_one = 5*(-1)+3\ng_f_minus_one = (-1)**2 - 2\nprint(g_f_minus_one)\n```", "solution": "```python\nf_minus_one = 5*(-1)+3\ng_f_minus_one = (-1)**2 - 2\nprint(g_f_minus_one)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-1", "model_answers": [-1.0], "answer": 2.0}, {"response": "**Solution**\n```python\ntotal_reps = 18\ngrade_8_reps = total_reps * 650 / (520 + 650)\nprint(grade_8_reps)\n```", "solution": "```python\ntotal_reps = 18\ngrade_8_reps = total_reps * 650 / (520 + 650)\nprint(grade_8_reps)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "10.0", "model_answers": [10.0], "answer": 10.0}, {"response": "**Solution**\n```python\nimport math\nprint(math.log(1/625, 5))\n```", "solution": "```python\nimport math\nprint(math.log(1/625, 5))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-4.0", "model_answers": [-4.0], "answer": -4.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\n\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i <= sqrt(n):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef greatest_prime_factor(n):\n    return max(prime_factors(n))\n\n\ndef sum_of_arithmetic_sequence(n):\n    return n * (n + 1) // 2\n\n\ndef greatest_prime_factor_of_sum(n):\n    return greatest_prime_factor(sum_of_arithmetic_sequence(n))\n\n\nprint(greatest_prime_factor_of_sum(80))\n```", "solution": "```python\nfrom math import sqrt\n\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i <= sqrt(n):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef greatest_prime_factor(n):\n    return max(prime_factors(n))\n\n\ndef sum_of_arithmetic_sequence(n):\n    return n * (n + 1) // 2\n\n\ndef greatest_prime_factor_of_sum(n):\n    return greatest_prime_factor(sum_of_arithmetic_sequence(n))\n\n\nprint(greatest_prime_factor_of_sum(80))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "5.0", "model_answers": [5.0], "answer": 5.0}, {"response": "**Solution**\n```python\nprint((7+8+9)/(2+3+4)*(6+9+12)/(9+8+7))\n```", "solution": "```python\nprint((7+8+9)/(2+3+4)*(6+9+12)/(9+8+7))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "3.0", "model_answers": [3.0], "answer": 3.0}, {"response": "**Solution**\n```python\ncookies_consumed = 10 * 12 / 20\nprint(cookies_consumed)\n```", "solution": "```python\ncookies_consumed = 10 * 12 / 20\nprint(cookies_consumed)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "6.0", "model_answers": [6.0], "answer": 6.0}, {"response": "**Solution**\n```python\nvolume = 52 / 6\nprint(volume)\n```", "solution": "```python\nvolume = 52 / 6\nprint(volume)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8.666666666666666", "model_answers": [8.666666666666666], "answer": 24.0}, {"response": "**Solution**\n```python\nfor x in range(1, 100):\n    if (x**2 - 16) % 2 == 0:\n        print(x)\n```", "solution": "```python\nfor x in range(1, 100):\n    if (x**2 - 16) % 2 == 0:\n        print(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98", "model_answers": [2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0, 32.0, 34.0, 36.0, 38.0, 40.0, 42.0, 44.0, 46.0, 48.0, 50.0, 52.0, 54.0, 56.0, 58.0, 60.0, 62.0, 64.0, 66.0, 68.0, 70.0, 72.0, 74.0, 76.0, 78.0, 80.0, 82.0, 84.0, 86.0, 88.0, 90.0, 92.0, 94.0, 96.0, 98.0], "answer": -9.0}, {"response": "**Solution**\n```python\nb = 10 - 6\nc = 10 + 3\nprint(c)\n```", "solution": "```python\nb = 10 - 6\nc = 10 + 3\nprint(c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "13", "model_answers": [13.0], "answer": 14.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.symbols('x')\nsol = sympy.solve(3**(x+8) - 9**(x+3), x)\nprint(sol)\n```", "solution": "```python\nimport sympy\nx = sympy.symbols('x')\nsol = sympy.solve(3**(x+8) - 9**(x+3), x)\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "[2]", "model_answers": [2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nprint((7+5)**2-(7-5)**2)\n```", "solution": "```python\nprint((7+5)**2-(7-5)**2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "140", "model_answers": [140.0], "answer": 140.0}, {"response": "**Solution**\n```python\nprint(5 * 1)\n```", "solution": "```python\nprint(5 * 1)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5", "model_answers": [5.0], "answer": 47.0}, {"response": "**Solution**\n```python\nimport numpy as np\nx, y, z = 1, 10, 100\na = np.log(x) - np.log(y)\nprint(a)\n```", "solution": "```python\nimport numpy as np\nx, y, z = 1, 10, 100\na = np.log(x) - np.log(y)\nprint(a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-2.302585092994046", "model_answers": [-2.302585092994046], "answer": -8.0}, {"response": "**Solution**\n```python\nx = 2\ny = x**2 - 8*x + 15\nprint(y)\n```", "solution": "```python\nx = 2\ny = x**2 - 8*x + 15\nprint(y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": 5.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\nprint(sqrt(1000000) - sqrt(1000000, 3))\n```", "solution": "```python\nfrom sympy import sqrt\nprint(sqrt(1000000) - sqrt(1000000, 3))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 900.0}, {"response": "**Solution**\n```python\nimport sympy as sp\n\n# make a sympy expression\nx, y = sp.symbols('x y')\nexpr = y / (sp.sqrt(x))\n\n# calculate the value of x when y=3\nx_3 = sp.solve(expr - 3, x)[0]\nprint(x_3)\n```", "solution": "```python\nimport sympy as sp\n\n# make a sympy expression\nx, y = sp.symbols('x y')\nexpr = y / (sp.sqrt(x))\n\n# calculate the value of x when y=3\nx_3 = sp.solve(expr - 3, x)[0]\nprint(x_3)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "y**2/9", "model_answers": [2.0, 9.0], "answer": 600.0}, {"response": "**Solution**\n```python\ndef revenue(p):\n    return 128 - 4 * p\n\ndef derivative(p):\n    return -4\n\ndef find_max(f, d, low, high):\n    while abs(high - low) > 1e-8:\n        mid = (low + high) / 2\n        if f(mid) * d(mid) > 0:\n            low = mid\n        else:\n            high = mid\n    return low\n\ndef main():\n    p_max = find_max(revenue, derivative, 0, 32)\n    print(p_max)\n\nif __name__ == '__main__':\n    main()\n```", "solution": "```python\ndef revenue(p):\n    return 128 - 4 * p\n\ndef derivative(p):\n    return -4\n\ndef find_max(f, d, low, high):\n    while abs(high - low) > 1e-8:\n        mid = (low + high) / 2\n        if f(mid) * d(mid) > 0:\n            low = mid\n        else:\n            high = mid\n    return low\n\ndef main():\n    p_max = find_max(revenue, derivative, 0, 32)\n    print(p_max)\n\nif __name__ == '__main__':\n    main()\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 16.0}, {"response": "**Solution**\n```python\nimport sympy as sp\n\nx = sp.Symbol('x')\n\nf = sp.Piecewise((3-x, x <= 3), (x**3 - 2*x**2 + 3*x, x > 3))\n\nf_inverse = sp.solve(f - 0, x)\nf_inverse_6 = sp.solve(f - 6, x)\n\nprint(f_inverse[0] + f_inverse_6[0])\n```", "solution": "```python\nimport sympy as sp\n\nx = sp.Symbol('x')\n\nf = sp.Piecewise((3-x, x <= 3), (x**3 - 2*x**2 + 3*x, x > 3))\n\nf_inverse = sp.solve(f - 0, x)\nf_inverse_6 = sp.solve(f - 6, x)\n\nprint(f_inverse[0] + f_inverse_6[0])\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "0", "model_answers": [0.0], "answer": 0.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return 2 * x + 1\n\ndef g(x):\n    return f(2 * x) - 3\n\nprint(g(g(2)))\n```", "solution": "```python\ndef f(x):\n    return 2 * x + 1\n\ndef g(x):\n    return f(2 * x) - 3\n\nprint(g(g(2)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "22", "model_answers": [22.0], "answer": 22.0}, {"response": "**Solution**\n```python\nx = 2\ny = 2\nx2y = x**2 * y\nprint(x2y)\n```", "solution": "```python\nx = 2\ny = 2\nx2y = x**2 * y\nprint(x2y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "8", "model_answers": [8.0], "answer": 3.0}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, simplify\n\ni = Symbol('i', real=False)\n\nresult = (3-i) * (6+2*i)\n\nprint(simplify(result))\n```", "solution": "```python\nfrom sympy import Symbol, simplify\n\ni = Symbol('i', real=False)\n\nresult = (3-i) * (6+2*i)\n\nprint(simplify(result))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "18 - 2*i**2", "model_answers": [18.0, 2.0, 2.0], "answer": 20.0}, {"response": "**Solution**\n```python\nimport sympy\nx = sympy.symbols('x')\nsolutions = sympy.solve(x**2 - x - 6, x)\nprint(solutions[0] * solutions[1])\n```", "solution": "```python\nimport sympy\nx = sympy.symbols('x')\nsolutions = sympy.solve(x**2 - x - 6, x)\nprint(solutions[0] * solutions[1])\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-6", "model_answers": [-6.0], "answer": -6.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\nf = np.array([2, 4, 6, 8, 10, 12])\nx = np.array([1, 2, 3, 4, 5, 6])\n\nmax_f_inv = np.amax(x / f)\n\nprint(max_f_inv)\n```", "solution": "```python\nimport numpy as np\n\nf = np.array([2, 4, 6, 8, 10, 12])\nx = np.array([1, 2, 3, 4, 5, 6])\n\nmax_f_inv = np.amax(x / f)\n\nprint(max_f_inv)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.5", "model_answers": [0.5], "answer": 6.0}, {"response": "**Solution**\n```python\ncamille_age = (44 - 26) / 14\nprint(camille_age)\n```", "solution": "```python\ncamille_age = (44 - 26) / 14\nprint(camille_age)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.2857142857142858", "model_answers": [1.2857142857142858], "answer": 1.0}, {"response": "**Solution**\n```python\nA = 2\nB = 1\nx = 2\nprint(A-B)\n```", "solution": "```python\nA = 2\nB = 1\nx = 2\nprint(A-B)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1", "model_answers": [1.0], "answer": 2.0}, {"response": "**Solution**\n```python\nresult = 7 * 10 * (21 / 30)\nprint(result)\n```", "solution": "```python\nresult = 7 * 10 * (21 / 30)\nprint(result)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "49.0", "model_answers": [49.0], "answer": 49.0}, {"response": "**Solution**\n```python\nprint(9997 ** 2)\n```", "solution": "```python\nprint(9997 ** 2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "99940009", "model_answers": [99940009.0], "answer": 99940009.0}, {"response": "**Solution**\n```python\nsum = 0\nfor i in range(100, 200 + 1):\n    if i % 7 == 0:\n        sum += i\nprint(sum)\n```", "solution": "```python\nsum = 0\nfor i in range(100, 200 + 1):\n    if i % 7 == 0:\n        sum += i\nprint(sum)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2107", "model_answers": [2107.0], "answer": 2107.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\n\nx_1 = sqrt(12) + 6\nx_2 = sqrt(12) - 6\n\nk = x_1 * x_2\n\nprint(k)\n```", "solution": "```python\nfrom math import sqrt\n\nx_1 = sqrt(12) + 6\nx_2 = sqrt(12) - 6\n\nk = x_1 * x_2\n\nprint(k)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-24.0", "model_answers": [-24.0], "answer": 35.0}, {"response": "**Solution**\n```python\nfirst_term = 7\ncommon_difference = -210 / 15\nprint(common_difference)\n```", "solution": "```python\nfirst_term = 7\ncommon_difference = -210 / 15\nprint(common_difference)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-14.0", "model_answers": [-14.0], "answer": -3.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return x**7 - 3*x**3 + 2\n\ndef g(x):\n    return f(x + 1)\n\nprint(g(0))\n```", "solution": "```python\ndef f(x):\n    return x**7 - 3*x**3 + 2\n\ndef g(x):\n    return f(x + 1)\n\nprint(g(0))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 106.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\nf = lambda x: 2**x\nprint(sqrt(f(f(f(f(1))))))\n```", "solution": "```python\nfrom math import sqrt\nf = lambda x: 2**x\nprint(sqrt(f(f(f(f(1))))))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "256.0", "model_answers": [256.0], "answer": 256.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\nx = 9\nwhile True:\n    if x*sqrt(x) - 5*x - 9*sqrt(x) == 35:\n        break\n    x += 1\nprint(x)\n```", "solution": "```python\nfrom math import sqrt\nx = 9\nwhile True:\n    if x*sqrt(x) - 5*x - 9*sqrt(x) == 35:\n        break\n    x += 1\nprint(x)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "49", "model_answers": [49.0], "answer": 49.0}, {"response": "**Solution**\n```python\nprint(6+5, 6-5)\n```", "solution": "```python\nprint(6+5, 6-5)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "11 1", "model_answers": [11.0, 1.0], "answer": 11.0}, {"response": "**Solution**\n```python\nprint(int(max(0, -7/4)))\n```", "solution": "```python\nprint(int(max(0, -7/4)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": -1.0}, {"response": "**Solution**\n```python\nimport sympy\nx, y, z = sympy.symbols('x y z')\neq1 = 6*x + 5*y - 2*z - 4\neq2 = 4*x + 5*y + 12*z - 54\nsol = sympy.solve((eq1, eq2), (x, y, z))\nprint(sol)\n```", "solution": "```python\nimport sympy\nx, y, z = sympy.symbols('x y z')\neq1 = 6*x + 5*y - 2*z - 4\neq2 = 4*x + 5*y + 12*z - 54\nsol = sympy.solve((eq1, eq2), (x, y, z))\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "{x: 7*z - 25, y: 154/5 - 8*z}", "model_answers": [7.0, 25.0, 154.0, 5.0, 8.0], "answer": 5.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\ndef solve(x):\n    return x**2 - 8\n\ndef solve2(x):\n    return -5*x + 44\n\nx = np.linspace(-10, 10, 100)\ny = solve(x)\ny2 = solve2(x)\n\ndistinct_solutions = [(x, y) for x, y in zip(x, y) if x!= y]\nprint(distinct_solutions)\nprint(np.prod([y for x, y in distinct_solutions]))\n```", "solution": "```python\nimport numpy as np\n\ndef solve(x):\n    return x**2 - 8\n\ndef solve2(x):\n    return -5*x + 44\n\nx = np.linspace(-10, 10, 100)\ny = solve(x)\ny2 = solve2(x)\n\ndistinct_solutions = [(x, y) for x, y in zip(x, y) if x!= y]\nprint(distinct_solutions)\nprint(np.prod([y for x, y in distinct_solutions]))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(np.float64(-10.0), np.float64(92.0)), (np.float64(-9.797979797979798), np.float64(88.00040812162024)), (np.float64(-9.595959595959595), np.float64(84.08244056728904)), (np.float64(-9.393939393939394), np.float64(80.24609733700643)), (np.float64(-9.191919191919192), np.float64(76.49137843077237)), (np.float64(-8.98989898989899), np.float64(72.81828384858687)), (np.float64(-8.787878787878787), np.float64(69.22681359044994)), (np.float64(-8.585858585858587), np.float64(65.7169676563616)), (np.float64(-8.383838383838384), np.float64(62.288746046321805)), (np.float64(-8.181818181818182), np.float64(58.94214876033058)), (np.float64(-7.979797979797979), np.float64(55.67717579838791)), (np.float64(-7.777777777777778), np.float64(52.49382716049382)), (np.float64(-7.575757575757576), np.float64(49.39210284664831)), (np.float64(-7.373737373737374), np.float64(46.37200285685134)), (np.float64(-7.171717171717171), np.float64(43.43352719110294)), (np.float64(-6.96969696969697), np.float64(40.576675849403124)), (np.float64(-6.767676767676768), np.float64(37.80144883175187)), (np.float64(-6.565656565656566), np.float64(35.10784613814917)), (np.float64(-6.363636363636363), np.float64(32.49586776859504)), (np.float64(-6.161616161616162), np.float64(29.96551372308948)), (np.float64(-5.959595959595959), np.float64(27.51678400163248)), (np.float64(-5.757575757575758), np.float64(25.149678604224064)), (np.float64(-5.555555555555555), np.float64(22.864197530864196)), (np.float64(-5.353535353535354), np.float64(20.660340781552907)), (np.float64(-5.151515151515151), np.float64(18.538108356290174)), (np.float64(-4.94949494949495), np.float64(16.497500255076016)), (np.float64(-4.747474747474747), np.float64(14.538516477910417)), (np.float64(-4.545454545454546), np.float64(12.661157024793393)), (np.float64(-4.343434343434343), np.float64(10.865421895724925)), (np.float64(-4.141414141414142), np.float64(9.151311090705033)), (np.float64(-3.9393939393939394), np.float64(7.5188246097337)), (np.float64(-3.737373737373738), np.float64(5.967962452810941)), (np.float64(-3.5353535353535355), np.float64(4.498724619936741)), (np.float64(-3.333333333333333), np.float64(3.111111111111109)), (np.float64(-3.1313131313131315), np.float64(1.8051219263340492)), (np.float64(-2.929292929292929), np.float64(0.5807570656055496)), (np.float64(-2.7272727272727275), np.float64(-0.5619834710743792)), (np.float64(-2.525252525252525), np.float64(-1.6230996837057452)), (np.float64(-2.3232323232323235), np.float64(-2.6025915722885404)), (np.float64(-2.121212121212121), np.float64(-3.5004591368227738)), (np.float64(-1.9191919191919187), np.float64(-4.31670237730844)), (np.float64(-1.717171717171718), np.float64(-5.051321293745533)), (np.float64(-1.5151515151515156), np.float64(-5.704315886134067)), (np.float64(-1.3131313131313131), np.float64(-6.275686154474033)), (np.float64(-1.1111111111111107), np.float64(-6.765432098765433)), (np.float64(-0.9090909090909101), np.float64(-7.173553719008263)), (np.float64(-0.7070707070707076), np.float64(-7.50005101520253)), (np.float64(-0.5050505050505052), np.float64(-7.74492398734823)), (np.float64(-0.30303030303030276), np.float64(-7.9081726354453625)), (np.float64(-0.10101010101010033), np.float64(-7.98979695949393)), (np.float64(0.10101010101010033), np.float64(-7.98979695949393)), (np.float64(0.30303030303030276), np.float64(-7.9081726354453625)), (np.float64(0.5050505050505052), np.float64(-7.74492398734823)), (np.float64(0.7070707070707076), np.float64(-7.50005101520253)), (np.float64(0.9090909090909083), np.float64(-7.173553719008266)), (np.float64(1.1111111111111107), np.float64(-6.765432098765433)), (np.float64(1.3131313131313131), np.float64(-6.275686154474033)), (np.float64(1.5151515151515156), np.float64(-5.704315886134067)), (np.float64(1.7171717171717162), np.float64(-5.05132129374554)), (np.float64(1.9191919191919187), np.float64(-4.31670237730844)), (np.float64(2.121212121212121), np.float64(-3.5004591368227738)), (np.float64(2.3232323232323235), np.float64(-2.6025915722885404)), (np.float64(2.525252525252524), np.float64(-1.6230996837057496)), (np.float64(2.7272727272727266), np.float64(-0.5619834710743836)), (np.float64(2.929292929292929), np.float64(0.5807570656055496)), (np.float64(3.1313131313131315), np.float64(1.8051219263340492)), (np.float64(3.333333333333334), np.float64(3.1111111111111143)), (np.float64(3.5353535353535346), np.float64(4.498724619936736)), (np.float64(3.737373737373737), np.float64(5.967962452810935)), (np.float64(3.9393939393939394), np.float64(7.5188246097337)), (np.float64(4.141414141414142), np.float64(9.151311090705033)), (np.float64(4.3434343434343425), np.float64(10.865421895724918)), (np.float64(4.545454545454545), np.float64(12.661157024793383)), (np.float64(4.747474747474747), np.float64(14.538516477910417)), (np.float64(4.94949494949495), np.float64(16.497500255076016)), (np.float64(5.1515151515151505), np.float64(18.538108356290163)), (np.float64(5.353535353535353), np.float64(20.660340781552897)), (np.float64(5.555555555555555), np.float64(22.864197530864196)), (np.float64(5.757575757575758), np.float64(25.149678604224064)), (np.float64(5.9595959595959584), np.float64(27.516784001632473)), (np.float64(6.161616161616163), np.float64(29.965513723089494)), (np.float64(6.363636363636363), np.float64(32.49586776859504)), (np.float64(6.565656565656564), np.float64(35.10784613814915)), (np.float64(6.767676767676768), np.float64(37.80144883175187)), (np.float64(6.969696969696969), np.float64(40.57667584940311)), (np.float64(7.171717171717173), np.float64(43.43352719110297)), (np.float64(7.373737373737374), np.float64(46.37200285685134)), (np.float64(7.575757575757574), np.float64(49.39210284664828)), (np.float64(7.777777777777779), np.float64(52.49382716049384)), (np.float64(7.979797979797979), np.float64(55.67717579838791)), (np.float64(8.18181818181818), np.float64(58.942148760330554)), (np.float64(8.383838383838384), np.float64(62.288746046321805)), (np.float64(8.585858585858585), np.float64(65.71696765636158)), (np.float64(8.787878787878789), np.float64(69.22681359044998)), (np.float64(8.98989898989899), np.float64(72.81828384858687)), (np.float64(9.19191919191919), np.float64(76.49137843077234)), (np.float64(9.393939393939394), np.float64(80.24609733700643)), (np.float64(9.595959595959595), np.float64(84.08244056728904)), (np.float64(9.7979797979798), np.float64(88.00040812162027)), (np.float64(10.0), np.float64(92.0))]\n1.1633879774268832e+118", "model_answers": [64.0, -10.0, 64.0, 92.0, 64.0, -9.797979797979798, 64.0, 88.00040812162024, 64.0, -9.595959595959595, 64.0, 84.08244056728904, 64.0, -9.393939393939394, 64.0, 80.24609733700643, 64.0, -9.191919191919192, 64.0, 76.49137843077237, 64.0, -8.98989898989899, 64.0, 72.81828384858687, 64.0, -8.787878787878787, 64.0, 69.22681359044994, 64.0, -8.585858585858587, 64.0, 65.7169676563616, 64.0, -8.383838383838384, 64.0, 62.288746046321805, 64.0, -8.181818181818182, 64.0, 58.94214876033058, 64.0, -7.979797979797979, 64.0, 55.67717579838791, 64.0, -7.777777777777778, 64.0, 52.49382716049382, 64.0, -7.575757575757576, 64.0, 49.39210284664831, 64.0, -7.373737373737374, 64.0, 46.37200285685134, 64.0, -7.171717171717171, 64.0, 43.43352719110294, 64.0, -6.96969696969697, 64.0, 40.576675849403124, 64.0, -6.767676767676768, 64.0, 37.80144883175187, 64.0, -6.565656565656566, 64.0, 35.10784613814917, 64.0, -6.363636363636363, 64.0, 32.49586776859504, 64.0, -6.161616161616162, 64.0, 29.96551372308948, 64.0, -5.959595959595959, 64.0, 27.51678400163248, 64.0, -5.757575757575758, 64.0, 25.149678604224064, 64.0, -5.555555555555555, 64.0, 22.864197530864196, 64.0, -5.353535353535354, 64.0, 20.660340781552907, 64.0, -5.151515151515151, 64.0, 18.538108356290174, 64.0, -4.94949494949495, 64.0, 16.497500255076016, 64.0, -4.747474747474747, 64.0, 14.538516477910417, 64.0, -4.545454545454546, 64.0, 12.661157024793393, 64.0, -4.343434343434343, 64.0, 10.865421895724925, 64.0, -4.141414141414142, 64.0, 9.151311090705033, 64.0, -3.9393939393939394, 64.0, 7.5188246097337, 64.0, -3.737373737373738, 64.0, 5.967962452810941, 64.0, -3.5353535353535355, 64.0, 4.498724619936741, 64.0, -3.333333333333333, 64.0, 3.111111111111109, 64.0, -3.1313131313131315, 64.0, 1.8051219263340492, 64.0, -2.929292929292929, 64.0, 0.5807570656055496, 64.0, -2.7272727272727275, 64.0, -0.5619834710743792, 64.0, -2.525252525252525, 64.0, -1.6230996837057452, 64.0, -2.3232323232323235, 64.0, -2.6025915722885404, 64.0, -2.121212121212121, 64.0, -3.5004591368227738, 64.0, -1.9191919191919187, 64.0, -4.31670237730844, 64.0, -1.717171717171718, 64.0, -5.051321293745533, 64.0, -1.5151515151515156, 64.0, -5.704315886134067, 64.0, -1.3131313131313131, 64.0, -6.275686154474033, 64.0, -1.1111111111111107, 64.0, -6.765432098765433, 64.0, -0.9090909090909101, 64.0, -7.173553719008263, 64.0, -0.7070707070707076, 64.0, -7.50005101520253, 64.0, -0.5050505050505052, 64.0, -7.74492398734823, 64.0, -0.30303030303030276, 64.0, -7.9081726354453625, 64.0, -0.10101010101010033, 64.0, -7.98979695949393, 64.0, 0.10101010101010033, 64.0, -7.98979695949393, 64.0, 0.30303030303030276, 64.0, -7.9081726354453625, 64.0, 0.5050505050505052, 64.0, -7.74492398734823, 64.0, 0.7070707070707076, 64.0, -7.50005101520253, 64.0, 0.9090909090909083, 64.0, -7.173553719008266, 64.0, 1.1111111111111107, 64.0, -6.765432098765433, 64.0, 1.3131313131313131, 64.0, -6.275686154474033, 64.0, 1.5151515151515156, 64.0, -5.704315886134067, 64.0, 1.7171717171717162, 64.0, -5.05132129374554, 64.0, 1.9191919191919187, 64.0, -4.31670237730844, 64.0, 2.121212121212121, 64.0, -3.5004591368227738, 64.0, 2.3232323232323235, 64.0, -2.6025915722885404, 64.0, 2.525252525252524, 64.0, -1.6230996837057496, 64.0, 2.7272727272727266, 64.0, -0.5619834710743836, 64.0, 2.929292929292929, 64.0, 0.5807570656055496, 64.0, 3.1313131313131315, 64.0, 1.8051219263340492, 64.0, 3.333333333333334, 64.0, 3.1111111111111143, 64.0, 3.5353535353535346, 64.0, 4.498724619936736, 64.0, 3.737373737373737, 64.0, 5.967962452810935, 64.0, 3.9393939393939394, 64.0, 7.5188246097337, 64.0, 4.141414141414142, 64.0, 9.151311090705033, 64.0, 4.3434343434343425, 64.0, 10.865421895724918, 64.0, 4.545454545454545, 64.0, 12.661157024793383, 64.0, 4.747474747474747, 64.0, 14.538516477910417, 64.0, 4.94949494949495, 64.0, 16.497500255076016, 64.0, 5.1515151515151505, 64.0, 18.538108356290163, 64.0, 5.353535353535353, 64.0, 20.660340781552897, 64.0, 5.555555555555555, 64.0, 22.864197530864196, 64.0, 5.757575757575758, 64.0, 25.149678604224064, 64.0, 5.9595959595959584, 64.0, 27.516784001632473, 64.0, 6.161616161616163, 64.0, 29.965513723089494, 64.0, 6.363636363636363, 64.0, 32.49586776859504, 64.0, 6.565656565656564, 64.0, 35.10784613814915, 64.0, 6.767676767676768, 64.0, 37.80144883175187, 64.0, 6.969696969696969, 64.0, 40.57667584940311, 64.0, 7.171717171717173, 64.0, 43.43352719110297, 64.0, 7.373737373737374, 64.0, 46.37200285685134, 64.0, 7.575757575757574, 64.0, 49.39210284664828, 64.0, 7.777777777777779, 64.0, 52.49382716049384, 64.0, 7.979797979797979, 64.0, 55.67717579838791, 64.0, 8.18181818181818, 64.0, 58.942148760330554, 64.0, 8.383838383838384, 64.0, 62.288746046321805, 64.0, 8.585858585858585, 64.0, 65.71696765636158, 64.0, 8.787878787878789, 64.0, 69.22681359044998, 64.0, 8.98989898989899, 64.0, 72.81828384858687, 64.0, 9.19191919191919, 64.0, 76.49137843077234, 64.0, 9.393939393939394, 64.0, 80.24609733700643, 64.0, 9.595959595959595, 64.0, 84.08244056728904, 64.0, 9.7979797979798, 64.0, 88.00040812162027, 64.0, 10.0, 64.0, 92.0, 1.1633879774268832, 118.0], "answer": 1736.0}, {"response": "**Solution**\n```python\nfrom sympy import solve, symbols\nx = symbols('x')\nsolutions = solve(9*x/13 + 13/9*x - 250/117*x, x)\nprint(sum(solutions))\n```", "solution": "```python\nfrom sympy import solve, symbols\nx = symbols('x')\nsolutions = solve(9*x/13 + 13/9*x - 250/117*x, x)\nprint(sum(solutions))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "0", "model_answers": [0.0], "answer": 0.0}, {"response": "**Solution**\n```python\nprint((5.6 + 2) // 1)\n```", "solution": "```python\nprint((5.6 + 2) // 1)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7.0", "model_answers": [7.0], "answer": 11.0}, {"response": "**Solution**\n```python\ndef is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))\n\ncount = 0\nfor i in range(1, 100):\n    if is_prime(i ** 2 - 3 * i + 2):\n        count += 1\nprint(count)\n```", "solution": "```python\ndef is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))\n\ncount = 0\nfor i in range(1, 100):\n    if is_prime(i ** 2 - 3 * i + 2):\n        count += 1\nprint(count)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nprint(3*7**2 + 5*7 - 1)\n```", "solution": "```python\nprint(3*7**2 + 5*7 - 1)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "181", "model_answers": [181.0], "answer": 181.0}, {"response": "**Solution**\n```python\nprint(2)\n```", "solution": "```python\nprint(2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "2", "model_answers": [2.0], "answer": 2.0}, {"response": "**Solution**\n```python\nb = -4\nprint(b)\n```", "solution": "```python\nb = -4\nprint(b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-4", "model_answers": [-4.0], "answer": -5.0}, {"response": "**Solution**\n```python\nprint(99**2 + 99 + 1)\n```", "solution": "```python\nprint(99**2 + 99 + 1)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "9901", "model_answers": [9901.0], "answer": 9901.0}, {"response": "**Solution**\n```python\nimport sympy as sp\nx = sp.Symbol(\"x\")\nx = 1 + x/(1 + x/(1 + x/(1 + x)))\nprint(x)\n```", "solution": "```python\nimport sympy as sp\nx = sp.Symbol(\"x\")\nx = 1 + x/(1 + x/(1 + x/(1 + x)))\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "x/(x/(x/(x + 1) + 1) + 1) + 1", "model_answers": [1.0, 1.0, 1.0, 1.0], "answer": 2.0}, {"response": "**Solution**\n```python\nN = 121 // 2 + 1\nprint(N)\n```", "solution": "```python\nN = 121 // 2 + 1\nprint(N)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "61", "model_answers": [61.0], "answer": 11.0}, {"response": "**Solution**\n```python\nx = 3\ny = 2\n\nx_squared = x**2\ny_squared = y**2\n\nx_cubed = x**3\ny_cubed = y**3\n\nx_minus_y = x - y\n\nprint(x_cubed - y_cubed)\n```", "solution": "```python\nx = 3\ny = 2\n\nx_squared = x**2\ny_squared = y**2\n\nx_cubed = x**3\ny_cubed = y**3\n\nx_minus_y = x - y\n\nprint(x_cubed - y_cubed)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "19", "model_answers": [19.0], "answer": 108.0}, {"response": "**Solution**\n```python\nprint((13 ** (1/3)) ** 6)\n```", "solution": "```python\nprint((13 ** (1/3)) ** 6)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "168.99999999999991", "model_answers": [168.99999999999991], "answer": 169.0}, {"response": "**Solution**\n```python\nA = 19 - 2 - 4\nprint(A)\n```", "solution": "```python\nA = 19 - 2 - 4\nprint(A)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "13", "model_answers": [13.0], "answer": 13.0}, {"response": "**Solution**\n```python\nset_1 = [1, 2, 3, 4]\nset_2 = [1, 2, 3, 4]\nfor i in range(4):\n    set_2[i] = set_2[i] + 2\n    set_2[i] = set_2[i] * 20\nprint(sum(set_2))\n```", "solution": "```python\nset_1 = [1, 2, 3, 4]\nset_2 = [1, 2, 3, 4]\nfor i in range(4):\n    set_2[i] = set_2[i] + 2\n    set_2[i] = set_2[i] * 20\nprint(sum(set_2))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "360", "model_answers": [360.0], "answer": 600.0}, {"response": "**Solution**\n```python\na = 3\nb = 2\nf_inv = lambda x: (x - b) / a\ng = lambda x: 2 * f_inv(x)\nprint((a + b) / 2)\n```", "solution": "```python\na = 3\nb = 2\nf_inv = lambda x: (x - b) / a\ng = lambda x: 2 * f_inv(x)\nprint((a + b) / 2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.5", "model_answers": [2.5], "answer": 0.0}, {"response": "**Solution**\n```python\n# Calculate number of black cards in pile A\nnumber_black_cards_in_pile_A = 26\n\n# Calculate number of red cards in pile B\nnumber_red_cards_in_pile_B = number_black_cards_in_pile_A * 6\n\nprint(number_red_cards_in_pile_B)\n```", "solution": "```python\n# Calculate number of black cards in pile A\nnumber_black_cards_in_pile_A = 26\n\n# Calculate number of red cards in pile B\nnumber_red_cards_in_pile_B = number_black_cards_in_pile_A * 6\n\nprint(number_red_cards_in_pile_B)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "156", "model_answers": [156.0], "answer": 22.0}, {"response": "**Solution**\n```python\nx = 7 / 3\ny = 7 / 5\nprint(x + y)\n```", "solution": "```python\nx = 7 / 3\ny = 7 / 5\nprint(x + y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3.7333333333333334", "model_answers": [3.7333333333333334], "answer": 7.0}, {"response": "**Solution**\n```python\nimport sympy\n\ne_a, e_b, e_c, c_a, c_b, c_c = sympy.symbols('e_a e_b e_c c_a c_b c_c')\n\ne_d = e_b**2 - 4*e_a*e_c\nc_d = c_b**2 - 4*c_a*c_c\n\nprint(e_d/c_d)\n\nprint(e_c/c_c)\n\nprint(e_c + c_c)\n```", "solution": "```python\nimport sympy\n\ne_a, e_b, e_c, c_a, c_b, c_c = sympy.symbols('e_a e_b e_c c_a c_b c_c')\n\ne_d = e_b**2 - 4*e_a*e_c\nc_d = c_b**2 - 4*c_a*c_c\n\nprint(e_d/c_d)\n\nprint(e_c/c_c)\n\nprint(e_c + c_c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(-4*e_a*e_c + e_b**2)/(-4*c_a*c_c + c_b**2)\ne_c/c_c\nc_c + e_c", "model_answers": [-4.0, 2.0, -4.0, 2.0], "answer": 4.0}, {"response": "**Solution**\n```python\nimport math\ndiagonal = math.sqrt(180**2 + 54**2)\nprint(diagonal**2)\n```", "solution": "```python\nimport math\ndiagonal = math.sqrt(180**2 + 54**2)\nprint(diagonal**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "35316.00000000001", "model_answers": [35316.00000000001], "answer": 369.0}, {"response": "**Solution**\n```python\ndef cost(t):\n    return 70 * t - 1 * (t - 60)\n\ndef max_t():\n    return 60 + (4200 - 70 * 60) / -1\n\nprint(max_t())\n```", "solution": "```python\ndef cost(t):\n    return 70 * t - 1 * (t - 60)\n\ndef max_t():\n    return 60 + (4200 - 70 * 60) / -1\n\nprint(max_t())\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "60.0", "model_answers": [60.0], "answer": 69.0}, {"response": "**Solution**\n```python\n# Write a program to solve this question\n# Sum of elements of each of the 15 two-element subsets of {1,2,3,4,5,6}\n\n# Function to calculate the sum of elements of each two-element subset\ndef calculate_sum(subset):\n    return sum(subset)\n\n# Calculating the sum of the 15 two-element subsets\nsum_15_subsets = 0\nfor i in range(1,7):\n    for j in range(i+1,7):\n        sum_15_subsets += calculate_sum({i,j})\nprint(sum_15_subsets)\n```", "solution": "```python\n# Write a program to solve this question\n# Sum of elements of each of the 15 two-element subsets of {1,2,3,4,5,6}\n\n# Function to calculate the sum of elements of each two-element subset\ndef calculate_sum(subset):\n    return sum(subset)\n\n# Calculating the sum of the 15 two-element subsets\nsum_15_subsets = 0\nfor i in range(1,7):\n    for j in range(i+1,7):\n        sum_15_subsets += calculate_sum({i,j})\nprint(sum_15_subsets)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "105", "model_answers": [105.0], "answer": 105.0}, {"response": "**Solution**\n```python\nx = (7**3)**(1/3)\nprint(x)\n```", "solution": "```python\nx = (7**3)**(1/3)\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6.999999999999999", "model_answers": [6.999999999999999], "answer": 49.0}, {"response": "**Solution**\n```python\nx, y = -2, -9\nsum_coordinates = x + y\nprint(sum_coordinates)\n```", "solution": "```python\nx, y = -2, -9\nsum_coordinates = x + y\nprint(sum_coordinates)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-11", "model_answers": [-11.0], "answer": 7.0}, {"response": "**Solution**\n```python\nfrom math import sqrt\n\ndef f(x):\n    return x**2 - 2*x + 1\n\ndef g(x):\n    return sqrt(2*x + 1)\n\nprint(f(g(4)) - g(f(3)))\n```", "solution": "```python\nfrom math import sqrt\n\ndef f(x):\n    return x**2 - 2*x + 1\n\ndef g(x):\n    return sqrt(2*x + 1)\n\nprint(f(g(4)) - g(f(3)))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "1.0", "model_answers": [1.0], "answer": 1.0}, {"response": "**Solution**\n```python\nn = 5\n```", "solution": "```python\nn = 5\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "", "model_answers": [], "answer": 11.0}, {"response": "**Solution**\n```python\na = -1\nb = 1\nx = -b - (a-b) / (2*b)\nprint(x)\n```", "solution": "```python\na = -1\nb = 1\nx = -b - (a-b) / (2*b)\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.0", "model_answers": [0.0], "answer": -0.25}, {"response": "**Solution**\n```python\nx = 5\ny = 6\nmy_product = x * y\nmy_friend_product = (x - 4) * (2 * y - 1)\nprint(my_product * my_friend_product + 1)\n```", "solution": "```python\nx = 5\ny = 6\nmy_product = x * y\nmy_friend_product = (x - 4) * (2 * y - 1)\nprint(my_product * my_friend_product + 1)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "331", "model_answers": [331.0], "answer": 54.0}, {"response": "**Solution**\n```python\nprint(9 + 2)\n```", "solution": "```python\nprint(9 + 2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "11", "model_answers": [11.0], "answer": 11.0}, {"response": "**Solution**\n```python\ndef bouncing_ball(h):\n    # h is the height from which the ball last bounced\n    return h / 2\n\ndef bouncing_ball_6(h):\n    # h is the height from which the ball last bounced\n    for i in range(6):\n        h = bouncing_ball(h)\n    return h\n\nh = 16\nprint(bouncing_ball_6(h))\n```", "solution": "```python\ndef bouncing_ball(h):\n    # h is the height from which the ball last bounced\n    return h / 2\n\ndef bouncing_ball_6(h):\n    # h is the height from which the ball last bounced\n    for i in range(6):\n        h = bouncing_ball(h)\n    return h\n\nh = 16\nprint(bouncing_ball_6(h))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.25", "model_answers": [0.25], "answer": 47.0}, {"response": "**Solution**\n```python\n# Let x be the number of apples that Betty has\n# Then Amy has 3x apples\n# Let y be the number of apples that Amy has\n# Then Amy has x + y apples\n# Amy has 3x apples and Betty has x apples\n# Amy has x + 3x = 4x apples\n# Amy has 4x apples and Betty has x apples\n# Amy has 4x - x apples\n# Amy has 3x apples\nprint(4 * 3 - 3)\n```", "solution": "```python\n# Let x be the number of apples that Betty has\n# Then Amy has 3x apples\n# Let y be the number of apples that Amy has\n# Then Amy has x + y apples\n# Amy has 3x apples and Betty has x apples\n# Amy has x + 3x = 4x apples\n# Amy has 4x apples and Betty has x apples\n# Amy has 4x - x apples\n# Amy has 3x apples\nprint(4 * 3 - 3)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "9", "model_answers": [9.0], "answer": 10.0}, {"response": "**Solution**\n```python\na = 5\nb = 3\na_plus_5b = a + 5 * b\nprint(a_plus_5b)\n```", "solution": "```python\na = 5\nb = 3\na_plus_5b = a + 5 * b\nprint(a_plus_5b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "20", "model_answers": [20.0], "answer": 18.0}, {"response": "**Solution**\n```python\nx = 5 ** 2\nprint(x)\n```", "solution": "```python\nx = 5 ** 2\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "25", "model_answers": [25.0], "answer": 20.0}, {"response": "**Solution**\n```python\na = 4\nb = 3\n\nnumerator = a + 11 * b\ndenominator = a - b\n\nleft = numerator / denominator\nprint(left)\n```", "solution": "```python\na = 4\nb = 3\n\nnumerator = a + 11 * b\ndenominator = a - b\n\nleft = numerator / denominator\nprint(left)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "37.0", "model_answers": [37.0], "answer": 2.0}, {"response": "**Solution**\n```python\nx = 2 * (-2) + 1\ny = 2 * 1 - 6\nprint(x, y)\n```", "solution": "```python\nx = 2 * (-2) + 1\ny = 2 * 1 - 6\nprint(x, y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-3 -4", "model_answers": [-3.0, -4.0], "answer": -9.0}, {"response": "**Solution**\n```python\nm = -3\nb = m * 2 + 1\nprint(b)\n```", "solution": "```python\nm = -3\nb = m * 2 + 1\nprint(b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-5", "model_answers": [-5.0], "answer": 16.0}, {"response": "**Solution**\n```python\nfrom sympy import symbols, solve\nx, c = symbols('x c')\neq = 3*x**2 + 7*x + c\nsol = solve(eq, x)\nprint(sol)\n```", "solution": "```python\nfrom sympy import symbols, solve\nx, c = symbols('x c')\neq = 3*x**2 + 7*x + c\nsol = solve(eq, x)\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[-sqrt(49 - 12*c)/6 - 7/6, sqrt(49 - 12*c)/6 - 7/6]", "model_answers": [49.0, 12.0, 6.0, 7.0, 6.0, 49.0, 12.0, 6.0, 7.0, 6.0], "answer": 24.0}, {"response": "**Solution**\n```python\nx = 3 + 1\ny = 9 + 2\nprint(x + y)\n```", "solution": "```python\nx = 3 + 1\ny = 9 + 2\nprint(x + y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "15", "model_answers": [15.0], "answer": -6.0}, {"response": "**Solution**\n```python\nprint(40**2 - 164)\n```", "solution": "```python\nprint(40**2 - 164)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1436", "model_answers": [1436.0], "answer": 156.0}, {"response": "**Solution**\n```python\nb = 3*1**4 - 7*1**3 + 2*1**2 - 1*1 + 1\nprint(b)\n```", "solution": "```python\nb = 3*1**4 - 7*1**3 + 2*1**2 - 1*1 + 1\nprint(b)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-2", "model_answers": [-2.0], "answer": -2.0}, {"response": "**Solution**\n```python\n# The distance from the origin to the point (x, y) is given by sqrt(x^2 + y^2)\n# If the point is (-8,6) then x = -8 and y = 6\n# The number of units in the distance from the origin to the point (-8,6) is sqrt((-8)^2 + 6^2) = sqrt(64 + 36) = sqrt(100) = 10\nprint(10)\n```", "solution": "```python\n# The distance from the origin to the point (x, y) is given by sqrt(x^2 + y^2)\n# If the point is (-8,6) then x = -8 and y = 6\n# The number of units in the distance from the origin to the point (-8,6) is sqrt((-8)^2 + 6^2) = sqrt(64 + 36) = sqrt(100) = 10\nprint(10)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "10", "model_answers": [10.0], "answer": 10.0}, {"response": "**Solution**\n```python\na = 4\nb = 5\nx = 3\nh = -b / (2 * a)\nk = b**2 / (4 * a)\nprint(h)\nprint(k)\n```", "solution": "```python\na = 4\nb = 5\nx = 3\nh = -b / (2 * a)\nk = b**2 / (4 * a)\nprint(h)\nprint(k)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-0.625\n1.5625", "model_answers": [-0.625, 1.5625], "answer": -2.0}, {"response": "**Solution**\n```python\nimport math\na = int(math.sqrt(4 + 36 + 12 + 36 + 12 + 4))\nprint(a)\n```", "solution": "```python\nimport math\na = int(math.sqrt(4 + 36 + 12 + 36 + 12 + 4))\nprint(a)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "10", "model_answers": [10.0], "answer": 4.0}, {"response": "**Solution**\n```python\ndef is_sum_less_than_20(x):\n    return x**2 + 4*x + 4 < 20\n\nfor x in range(1, 21):\n    if is_sum_less_than_20(x):\n        print(x)\n```", "solution": "```python\ndef is_sum_less_than_20(x):\n    return x**2 + 4*x + 4 < 20\n\nfor x in range(1, 21):\n    if is_sum_less_than_20(x):\n        print(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1\n2", "model_answers": [1.0, 2.0], "answer": 2.0}, {"response": "**Solution**\n```python\n# The sum of five consecutive integers is five.\n# What is the product of the five integers?\n\n# The sum of five consecutive integers is five:\n# 1 + 2 + 3 + 4 + 5 = 5\n\n# What is the product of the five integers?\n# 1 * 2 * 3 * 4 * 5 = 120\n\nprint(120)\n```", "solution": "```python\n# The sum of five consecutive integers is five.\n# What is the product of the five integers?\n\n# The sum of five consecutive integers is five:\n# 1 + 2 + 3 + 4 + 5 = 5\n\n# What is the product of the five integers?\n# 1 * 2 * 3 * 4 * 5 = 120\n\nprint(120)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "120", "model_answers": [120.0], "answer": 0.0}, {"response": "**Solution**\n```python\nage_now = 56 * 8\nprint(age_now)\n```", "solution": "```python\nage_now = 56 * 8\nprint(age_now)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "448", "model_answers": [448.0], "answer": 8.0}, {"response": "**Solution**\n```python\nb = -18/2\nprint(b)\n```", "solution": "```python\nb = -18/2\nprint(b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-9.0", "model_answers": [-9.0], "answer": 9.0}, {"response": "**Solution**\n```python\nN = 88\na = N - 5\nb = N + 5\nc = N * 5\nprint(a, b, c)\n```", "solution": "```python\nN = 88\na = N - 5\nb = N + 5\nc = N * 5\nprint(a, b, c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "83 93 440", "model_answers": [83.0, 93.0, 440.0], "answer": 40.0}, {"response": "**Solution**\n```python\ny_intercept = -3\nprint(y_intercept)\n```", "solution": "```python\ny_intercept = -3\nprint(y_intercept)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-3", "model_answers": [-3.0], "answer": -4.0}, {"response": "**Solution**\n```python\nx1 = (-18+20) / (5*2)\nx2 = (-18-20) / (5*2)\nprint(int(x1)*int(x2))\n```", "solution": "```python\nx1 = (-18+20) / (5*2)\nx2 = (-18-20) / (5*2)\nprint(int(x1)*int(x2))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": 3.0}, {"response": "**Solution**\n```python\ny = 6\nprint(y)\n```", "solution": "```python\ny = 6\nprint(y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "6", "model_answers": [6.0], "answer": -36.0}, {"response": "**Solution**\n```python\nx = 7\nprint(x + 1/x)\n```", "solution": "```python\nx = 7\nprint(x + 1/x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "7.142857142857143", "model_answers": [7.142857142857143], "answer": 7.0}, {"response": "**Solution**\n```python\nprint(int(6.7) + int(-6.7))\n```", "solution": "```python\nprint(int(6.7) + int(-6.7))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0", "model_answers": [0.0], "answer": -1.0}, {"response": "**Solution**\n```python\nprint(144 / 10)\n```", "solution": "```python\nprint(144 / 10)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "14.4", "model_answers": [14.4], "answer": 8.0}, {"response": "**Solution**\n```python\nimport sympy\nprint(sympy.log(64, 2))\n```", "solution": "```python\nimport sympy\nprint(sympy.log(64, 2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "6", "model_answers": [6.0], "answer": 6.0}, {"response": "**Solution**\n```python\ndef f(n):\n    return n**2 + n + 17\n\nprint(f(10) - f(9))\n```", "solution": "```python\ndef f(n):\n    return n**2 + n + 17\n\nprint(f(10) - f(9))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "20", "model_answers": [20.0], "answer": 20.0}, {"response": "**Solution**\n```python\ndef clubsuit(x, y):\n    return abs(x)**3 + y\n\nprint(clubsuit(2, 4))\n```", "solution": "```python\ndef clubsuit(x, y):\n    return abs(x)**3 + y\n\nprint(clubsuit(2, 4))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "12", "model_answers": [12.0], "answer": 12.0}, {"response": "**Solution**\n```python\ndef get_degree(p):\n    return len(p) - 1\n\ndef get_coeff(p):\n    return p[0]\n\ndef get_terms(p):\n    return [p[i] for i in range(1, len(p))]\n\ndef get_leading_term(p):\n    return p[-1]\n\ndef get_degree_of_term(p):\n    return len(p) - 1\n\ndef get_degree_of_leading_term(p):\n    return get_degree_of_term(get_leading_term(p))\n\ndef get_degree_of_remainder(p):\n    return get_degree_of_term(get_remainder(p))\n\ndef get_remainder(p):\n    return p[1:]\n\ndef get_degree_of_product(p, q):\n    degree_of_p = get_degree_of_term(p)\n    degree_of_q = get_degree_of_term(q)\n    return degree_of_p + degree_of_q\n\ndef get_degree_of_sum(p, q):\n    degree_of_p = get_degree_of_term(p)\n    degree_of_q = get_degree_of_term(q)\n    return max(degree_of_p, degree_of_q)\n\np = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\ng = get_degree_of_product(p, q)\nprint(g)\n```", "solution": "```python\ndef get_degree(p):\n    return len(p) - 1\n\ndef get_coeff(p):\n    return p[0]\n\ndef get_terms(p):\n    return [p[i] for i in range(1, len(p))]\n\ndef get_leading_term(p):\n    return p[-1]\n\ndef get_degree_of_term(p):\n    return len(p) - 1\n\ndef get_degree_of_leading_term(p):\n    return get_degree_of_term(get_leading_term(p))\n\ndef get_degree_of_remainder(p):\n    return get_degree_of_term(get_remainder(p))\n\ndef get_remainder(p):\n    return p[1:]\n\ndef get_degree_of_product(p, q):\n    degree_of_p = get_degree_of_term(p)\n    degree_of_q = get_degree_of_term(q)\n    return degree_of_p + degree_of_q\n\ndef get_degree_of_sum(p, q):\n    degree_of_p = get_degree_of_term(p)\n    degree_of_q = get_degree_of_term(q)\n    return max(degree_of_p, degree_of_q)\n\np = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\ng = get_degree_of_product(p, q)\nprint(g)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "21", "model_answers": [21.0], "answer": 3.0}, {"response": "**Solution**\n```python\nfrom math import log\nx = log(1080, 6) - 1\nprint(x)\n```", "solution": "```python\nfrom math import log\nx = log(1080, 6) - 1\nprint(x)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2.8982444017039275", "model_answers": [2.8982444017039275], "answer": 3.0}, {"response": "**Solution**\n```python\ndegree_p = 7\ndegree_q = 7\ndegree_pq = degree_p + degree_q\nprint(degree_pq)\n```", "solution": "```python\ndegree_p = 7\ndegree_q = 7\ndegree_pq = degree_p + degree_q\nprint(degree_pq)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "14", "model_answers": [14.0], "answer": 14.0}, {"response": "**Solution**\n```python\nimport numpy as np\n\n# find the point of intersection\nx = np.roots([1, 2, 0, 8])\nP = np.array([x[0], 2*x[0]-10])\n\n# compute a+b\nprint(P[0] + P[1])\n```", "solution": "```python\nimport numpy as np\n\n# find the point of intersection\nx = np.roots([1, 2, 0, 8])\nP = np.array([x[0], 2*x[0]-10])\n\n# compute a+b\nprint(P[0] + P[1])\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "(-18.793427391260607+0j)", "model_answers": [-18.793427391260607, 0.0], "answer": 13.0}, {"response": "**Solution**\n```python\nimport math\n\n# Compute the total amount in the account after 10 years.\ndef compute_total_amount(starting_balance, annual_interest_rate, years):\n    total_amount = starting_balance\n    for _ in range(years):\n        total_amount += total_amount * annual_interest_rate / 100\n    return math.ceil(total_amount)\n\n# Print the result.\nprint(compute_total_amount(500, 3, 10))\n```", "solution": "```python\nimport math\n\n# Compute the total amount in the account after 10 years.\ndef compute_total_amount(starting_balance, annual_interest_rate, years):\n    total_amount = starting_balance\n    for _ in range(years):\n        total_amount += total_amount * annual_interest_rate / 100\n    return math.ceil(total_amount)\n\n# Print the result.\nprint(compute_total_amount(500, 3, 10))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "672", "model_answers": [672.0], "answer": 672.0}, {"response": "**Solution**\n```python\n# The number of toy cars Aiden has received is the sum of the first n natural numbers.\n# The formula for the sum of the first n natural numbers is n(n+1)/2.\n# Therefore, Aiden will have received a total of 12(12+1)/2 = 77 toy cars.\nprint(12*(12+1)/2)\n```", "solution": "```python\n# The number of toy cars Aiden has received is the sum of the first n natural numbers.\n# The formula for the sum of the first n natural numbers is n(n+1)/2.\n# Therefore, Aiden will have received a total of 12(12+1)/2 = 77 toy cars.\nprint(12*(12+1)/2)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "78.0", "model_answers": [78.0], "answer": 78.0}, {"response": "**Solution**\n```python\n# Write a program solution to the question by decomposing it into multiple steps. Then specify the tools used in each step by importing from the toolbox. Make sure that all tools used in the solution are defined in the toolbox. Do not use any undefined functions.\n# You can use functions in math, scipy, sympy if they help.\n\n# Toolbox\nimport math\n\n# Question\n# Write a program solution to the question by decomposing it into multiple steps. Then specify the tools used in each step by importing from the toolbox. Make sure that all tools used in the solution are defined in the toolbox. Do not use any undefined functions.\n# You can use functions in math, scipy, sympy if they help.\n\n# Solution\n# Step 1\n# 1. Write the equation in the form of a function.\ndef equation_of_cost(a, b):\n    return -a - b**2 + 3*a*b\n\n# Step 2\n# 2. Write a program to calculate the cost.\ncost = equation_of_cost(-1, 5)\nprint(cost)\n```", "solution": "```python\n# Write a program solution to the question by decomposing it into multiple steps. Then specify the tools used in each step by importing from the toolbox. Make sure that all tools used in the solution are defined in the toolbox. Do not use any undefined functions.\n# You can use functions in math, scipy, sympy if they help.\n\n# Toolbox\nimport math\n\n# Question\n# Write a program solution to the question by decomposing it into multiple steps. Then specify the tools used in each step by importing from the toolbox. Make sure that all tools used in the solution are defined in the toolbox. Do not use any undefined functions.\n# You can use functions in math, scipy, sympy if they help.\n\n# Solution\n# Step 1\n# 1. Write the equation in the form of a function.\ndef equation_of_cost(a, b):\n    return -a - b**2 + 3*a*b\n\n# Step 2\n# 2. Write a program to calculate the cost.\ncost = equation_of_cost(-1, 5)\nprint(cost)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "-39", "model_answers": [-39.0], "answer": -39.0}, {"response": "**Solution**\n```python\nm = 47 - 3*15\nprint(m)\n```", "solution": "```python\nm = 47 - 3*15\nprint(m)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 13.0}, {"response": "**Solution**\n```python\na = 6\nb = 12\nc = -8\nx = -b/(2*a)\nk = a*x**2 + b*x + c\nprint(k)\n```", "solution": "```python\na = 6\nb = 12\nc = -8\nx = -b/(2*a)\nk = a*x**2 + b*x + c\nprint(k)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-14.0", "model_answers": [-14.0], "answer": -150.0}, {"response": "**Solution**\n```python\nimport sympy\nprint(sympy.simplify(3*(2**3+sympy.sqrt(9))/2))\n```", "solution": "```python\nimport sympy\nprint(sympy.simplify(3*(2**3+sympy.sqrt(9))/2))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "33/2", "model_answers": [33.0, 2.0], "answer": 33.0}, {"response": "**Solution**\n```python\nnew_cans = 125 / 5\nprint(new_cans)\n```", "solution": "```python\nnew_cans = 125 / 5\nprint(new_cans)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "25.0", "model_answers": [25.0], "answer": 31.0}, {"response": "**Solution**\n```python\nblue_box_weight = 15.2 * 3\nprint(blue_box_weight)\n```", "solution": "```python\nblue_box_weight = 15.2 * 3\nprint(blue_box_weight)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "45.599999999999994", "model_answers": [45.599999999999994], "answer": 22.8}, {"response": "**Solution**\n```python\nx = -18\na = 63\nb = x - a\nprint(b)\n```", "solution": "```python\nx = -18\na = 63\nb = x - a\nprint(b)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-81", "model_answers": [-81.0], "answer": 21.0}, {"response": "**Solution**\n```python\nfrom sympy import *\nx = Symbol('x')\nprint(x**2 + 2*x*(5-x) + (5-x)**2)\n```", "solution": "```python\nfrom sympy import *\nx = Symbol('x')\nprint(x**2 + 2*x*(5-x) + (5-x)**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "x**2 + 2*x*(5 - x) + (5 - x)**2", "model_answers": [2.0, 2.0, 5.0, 5.0, 2.0], "answer": 25.0}, {"response": "**Solution**\n```python\nf = lambda c: 3/(2*c-3)\nc = f(1/2)\n\nf_inv = lambda c: 2*c + 3\nf_inv_c = f_inv(1/2)\n\nprint((f_inv_c * c * f(c)) / (f_inv_c + c))\n```", "solution": "```python\nf = lambda c: 3/(2*c-3)\nc = f(1/2)\n\nf_inv = lambda c: 2*c + 3\nf_inv_c = f_inv(1/2)\n\nprint((f_inv_c * c * f(c)) / (f_inv_c + c))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1.2", "model_answers": [1.2], "answer": 9.0}, {"response": "**Solution**\n```python\nimport sympy as sp\nx = sp.Symbol('x')\nprint(sp.expand(x**4 + 1 / x**4))\n```", "solution": "```python\nimport sympy as sp\nx = sp.Symbol('x')\nprint(sp.expand(x**4 + 1 / x**4))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "x**4 + x**(-4)", "model_answers": [4.0, -4.0], "answer": 47.0}, {"response": "**Solution**\n```python\nnumber_of_criminals_in_4_half_hours = 4.5 * 6\nprint(number_of_criminals_in_4_half_hours)\n```", "solution": "```python\nnumber_of_criminals_in_4_half_hours = 4.5 * 6\nprint(number_of_criminals_in_4_half_hours)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "27.0", "model_answers": [27.0], "answer": 27.0}, {"response": "**Solution**\n```python\nprint(24-(2*4-3))\n```", "solution": "```python\nprint(24-(2*4-3))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "19", "model_answers": [19.0], "answer": 19.0}, {"response": "**Solution**\n```python\nimport sympy as sp\nx, y = sp.symbols('x y')\neq1 = sp.Eq(2**(x+1), 4**(x-7))\neq2 = sp.Eq(8**(3*y), 16**(-y+13))\nsol = sp.solve([eq1, eq2], [x, y])\nprint(sol)\n```", "solution": "```python\nimport sympy as sp\nx, y = sp.symbols('x y')\neq1 = sp.Eq(2**(x+1), 4**(x-7))\neq2 = sp.Eq(8**(3*y), 16**(-y+13))\nsol = sp.solve([eq1, eq2], [x, y])\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[(15, 4), (15, log(-16*(-1)**(1/13))/log(2)), (15, log(-16*(-1)**(3/13))/log(2)), (15, log(-16*(-1)**(5/13))/log(2)), (15, log(16*(-1)**(8/13))/log(2)), (15, log(16*(-1)**(10/13))/log(2)), (15, log(16*(-1)**(12/13))/log(2)), (15, log(16*sin(pi/26) - 16*I*cos(pi/26))/log(2)), (15, log(16*sin(pi/26) + 16*I*cos(pi/26))/log(2)), (15, 4 - 4*I*pi/(13*log(2))), (15, 4 - 2*I*pi/(13*log(2))), (15, 4 + 2*I*pi/(13*log(2))), (15, 4 + 4*I*pi/(13*log(2)))]", "model_answers": [15.0, 4.0, 15.0, -16.0, -1.0, 1.0, 13.0, 2.0, 15.0, -16.0, -1.0, 3.0, 13.0, 2.0, 15.0, -16.0, -1.0, 5.0, 13.0, 2.0, 15.0, 16.0, -1.0, 8.0, 13.0, 2.0, 15.0, 16.0, -1.0, 10.0, 13.0, 2.0, 15.0, 16.0, -1.0, 12.0, 13.0, 2.0, 15.0, 16.0, 26.0, 16.0, 26.0, 2.0, 15.0, 16.0, 26.0, 16.0, 26.0, 2.0, 15.0, 4.0, 4.0, 13.0, 2.0, 15.0, 4.0, 2.0, 13.0, 2.0, 15.0, 4.0, 2.0, 13.0, 2.0, 15.0, 4.0, 4.0, 13.0, 2.0], "answer": 19.0}, {"response": "**Solution**\n```python\nperimeter = 3 * 3 + 3 * 3 + 3 * 3 + 3 * 3 + 3 * 3 + 3 * 3\nprint(perimeter)\n```", "solution": "```python\nperimeter = 3 * 3 + 3 * 3 + 3 * 3 + 3 * 3 + 3 * 3 + 3 * 3\nprint(perimeter)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "54", "model_answers": [54.0], "answer": 50.0}, {"response": "**Solution**\n```python\nimport sympy\n\nthird_term = 1053\nninth_term = 13 / 9\n\nseventh_term = sympy.symbols('x')\n\nthird_term_expression = third_term * (seventh_term / 3) ** 2\nninth_term_expression = ninth_term * (seventh_term / 3) ** 8\n\nsolution = sympy.solve(third_term_expression - ninth_term_expression, seventh_term)\nprint(solution)\n```", "solution": "```python\nimport sympy\n\nthird_term = 1053\nninth_term = 13 / 9\n\nseventh_term = sympy.symbols('x')\n\nthird_term_expression = third_term * (seventh_term / 3) ** 2\nninth_term_expression = ninth_term * (seventh_term / 3) ** 8\n\nsolution = sympy.solve(third_term_expression - ninth_term_expression, seventh_term)\nprint(solution)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[-9.00000000000000, 0.0, 9.00000000000000, -4.5 - 7.79422863405995*I, -4.5 + 7.79422863405995*I, 4.5 - 7.79422863405995*I, 4.5 + 7.79422863405995*I]", "model_answers": [-9.0, 0.0, 9.0, -4.5, 7.79422863405995, -4.5, 7.79422863405995, 4.5, 7.79422863405995, 4.5, 7.79422863405995], "answer": 13.0}, {"response": "**Solution**\n```python\nimport sympy as sym\nx = sym.symbols('x')\ny = (1/2)*x**2 - 9\nsol = sym.solve(y, x)\nprint(sol[0]**2)\n```", "solution": "```python\nimport sympy as sym\nx = sym.symbols('x')\ny = (1/2)*x**2 - 9\nsol = sym.solve(y, x)\nprint(sol[0]**2)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "18.0000000000000", "model_answers": [18.0], "answer": 17.0}, {"response": "**Solution**\n```python\ndaily_caloric_requirement = 2 * 40\nprint(daily_caloric_requirement)\n```", "solution": "```python\ndaily_caloric_requirement = 2 * 40\nprint(daily_caloric_requirement)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "80", "model_answers": [80.0], "answer": 2000.0}, {"response": "**Solution**\n```python\n# The first term of the first sequence is 0\n# The second term of the first sequence is the first term of the second sequence\n# The third term of the first sequence is the second term of the second sequence\n# The fifth term of the second sequence is 3\n\n# The first term of the second sequence is the first term of the first sequence\n# The second term of the second sequence is the first term of the first sequence plus the second term of the first sequence\n# The third term of the second sequence is the second term of the first sequence plus the second term of the first sequence\n\n# The fifth term of the first sequence is the fourth term of the second sequence\n\n# The fourth term of the second sequence is the third term of the second sequence\n# The third term of the second sequence is the second term of the second sequence\n# The second term of the second sequence is the first term of the second sequence\n# The first term of the second sequence is 0\n\n# The fifth term of the first sequence is the fourth term of the second sequence\n# The fourth term of the second sequence is the third term of the second sequence\n# The third term of the second sequence is the second term of the second sequence\n# The second term of the second sequence is the first term of the second sequence\n# The first term of the second sequence is 0\n\n# The fifth term of the first sequence is 0 + 0 + 1 + 2 + 3\n\nprint(5)\n```", "solution": "```python\n# The first term of the first sequence is 0\n# The second term of the first sequence is the first term of the second sequence\n# The third term of the first sequence is the second term of the second sequence\n# The fifth term of the second sequence is 3\n\n# The first term of the second sequence is the first term of the first sequence\n# The second term of the second sequence is the first term of the first sequence plus the second term of the first sequence\n# The third term of the second sequence is the second term of the first sequence plus the second term of the first sequence\n\n# The fifth term of the first sequence is the fourth term of the second sequence\n\n# The fourth term of the second sequence is the third term of the second sequence\n# The third term of the second sequence is the second term of the second sequence\n# The second term of the second sequence is the first term of the second sequence\n# The first term of the second sequence is 0\n\n# The fifth term of the first sequence is the fourth term of the second sequence\n# The fourth term of the second sequence is the third term of the second sequence\n# The third term of the second sequence is the second term of the second sequence\n# The second term of the second sequence is the first term of the second sequence\n# The first term of the second sequence is 0\n\n# The fifth term of the first sequence is 0 + 0 + 1 + 2 + 3\n\nprint(5)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "5", "model_answers": [5.0], "answer": 12.0}, {"response": "**Solution**\n```python\nproduct = 25 - 9\nprint(product)\n```", "solution": "```python\nproduct = 25 - 9\nprint(product)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "16", "model_answers": [16.0], "answer": 136.0}, {"response": "**Solution**\n```python\ndef f(x):\n    return x * 2\n\ndef f_inv(x):\n    return x / 2\n\ndef f_diff(x):\n    return f(x) - f_inv(x)\n\nprint(f_diff(2))\n```", "solution": "```python\ndef f(x):\n    return x * 2\n\ndef f_inv(x):\n    return x / 2\n\ndef f_diff(x):\n    return f(x) - f_inv(x)\n\nprint(f_diff(2))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3.0", "model_answers": [3.0], "answer": 0.0}, {"response": "**Solution**\n```python\nprint(3**-2, 9**-2, 27**(-2/3), 9*81**-1, 243**(-4/5))\n```", "solution": "```python\nprint(3**-2, 9**-2, 27**(-2/3), 9*81**-1, 243**(-4/5))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "0.1111111111111111 0.012345679012345678 0.11111111111111112 0.1111111111111111 0.012345679012345677", "model_answers": [0.1111111111111111, 0.012345679012345678, 0.11111111111111112, 0.1111111111111111, 0.012345679012345677], "answer": 2.0}, {"response": "**Solution**\n```python\ny = 15.5 - 1\nprint(y)\n```", "solution": "```python\ny = 15.5 - 1\nprint(y)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "14.5", "model_answers": [14.5], "answer": 7.5}, {"response": "**Solution**\n```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\nm = Symbol('m')\nn = Symbol('n')\n\neq = x**2 + m*x + (m+n)\nsol = solve(eq, x)\nprint(sol)\n```", "solution": "```python\nfrom sympy import Symbol, solve\nx = Symbol('x')\nm = Symbol('m')\nn = Symbol('n')\n\neq = x**2 + m*x + (m+n)\nsol = solve(eq, x)\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[-m/2 - sqrt(m**2 - 4*m - 4*n)/2, -m/2 + sqrt(m**2 - 4*m - 4*n)/2]", "model_answers": [2.0, 2.0, 4.0, 4.0, 2.0, 2.0, 2.0, 4.0, 4.0, 2.0], "answer": -1.0}, {"response": "**Solution**\n```python\nprint(int(pow(7/4, 2)))\n```", "solution": "```python\nprint(int(pow(7/4, 2)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "3", "model_answers": [3.0], "answer": 4.0}, {"response": "**Solution**\n```python\n# Lattice points are integer coordinates.\n# If x and y are integer, then x = 2n and y = -2n + 18\n# where n is an integer.\nn = 18 // 2\nprint(2 * n)\n```", "solution": "```python\n# Lattice points are integer coordinates.\n# If x and y are integer, then x = 2n and y = -2n + 18\n# where n is an integer.\nn = 18 // 2\nprint(2 * n)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "18", "model_answers": [18.0], "answer": 10.0}, {"response": "**Solution**\n```python\nsusan_cost = 4 * 20\npam_cost = 5 * 20 * 0.7\nprint(pam_cost - susan_cost)\n```", "solution": "```python\nsusan_cost = 4 * 20\npam_cost = 5 * 20 * 0.7\nprint(pam_cost - susan_cost)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "-10.0", "model_answers": [-10.0], "answer": 10.0}, {"response": "**Solution**\n```python\nfrom sympy import solve\nfrom sympy.abc import x, k\neq = k*x**2 + 10*x + k\nsolutions = solve(eq, x)\nprint(len(solutions))\n```", "solution": "```python\nfrom sympy import solve\nfrom sympy.abc import x, k\neq = k*x**2 + 10*x + k\nsolutions = solve(eq, x)\nprint(len(solutions))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "2", "model_answers": [2.0], "answer": 3.0}, {"response": "**Solution**\n```python\n# The domain consists of 10 points\nprint(10)\n```", "solution": "```python\n# The domain consists of 10 points\nprint(10)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "10", "model_answers": [10.0], "answer": 19.0}, {"response": "**Solution**\n```python\nperimeter = 12\narea = perimeter ** 2\nprint(area)\n```", "solution": "```python\nperimeter = 12\narea = perimeter ** 2\nprint(area)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "144", "model_answers": [144.0], "answer": 9.0}, {"response": "**Solution**\n```python\nregular_packs = 166 // 4\nprint(regular_packs)\n```", "solution": "```python\nregular_packs = 166 // 4\nprint(regular_packs)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "41", "model_answers": [41.0], "answer": 13.0}, {"response": "**Solution**\n```python\nfrom sympy import sqrt\n\ndef h(x):\n    return sqrt((x**3 + 72) / 2) + 1\n\nprint(h(6))\n```", "solution": "```python\nfrom sympy import sqrt\n\ndef h(x):\n    return sqrt((x**3 + 72) / 2) + 1\n\nprint(h(6))\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "13.0000000000000", "model_answers": [13.0], "answer": 13.0}, {"response": "**Solution**\n```python\nannual_interest_rate = 7.5 / 100\nmonthly_interest_rate = annual_interest_rate / 12\nmonths_to_two_years = 24\nquarterly_interest_compounding = 3\nmonths_to_three_months = 3\n\ntotal_interest = 0\nfor month in range(months_to_two_years):\n    total_interest += monthly_interest_rate * 1000\n    total_interest = round(total_interest, 2)\n\nprint(1000 + total_interest)\n```", "solution": "```python\nannual_interest_rate = 7.5 / 100\nmonthly_interest_rate = annual_interest_rate / 12\nmonths_to_two_years = 24\nquarterly_interest_compounding = 3\nmonths_to_three_months = 3\n\ntotal_interest = 0\nfor month in range(months_to_two_years):\n    total_interest += monthly_interest_rate * 1000\n    total_interest = round(total_interest, 2)\n\nprint(1000 + total_interest)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "1150.0", "model_answers": [1150.0], "answer": 1160.0}, {"response": "**Solution**\n```python\na = 3 * 1**2 + 1 * 1 + 0\nb = 3 * 1**2 + 1 * (-3) + 0\nc = 3 * (-3)**2 + 1 * (-3) + 0\nprint(100 * a + 10 * b + c)\n```", "solution": "```python\na = 3 * 1**2 + 1 * 1 + 0\nb = 3 * 1**2 + 1 * (-3) + 0\nc = 3 * (-3)**2 + 1 * (-3) + 0\nprint(100 * a + 10 * b + c)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "424", "model_answers": [424.0], "answer": 120.0}, {"response": "**Solution**\n```python\ndef g(x):\n    return 4 * x ** 2 - 3 * x + 2\n\nprint(g(-3))\n```", "solution": "```python\ndef g(x):\n    return 4 * x ** 2 - 3 * x + 2\n\nprint(g(-3))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "47", "model_answers": [47.0], "answer": 78.0}, {"response": "**Solution**\n```python\nimport sympy\n\nn = sympy.symbols('n')\nx = sympy.symbols('x')\n\neq = 9*x**2 + n*x + 36\n\nsol = sympy.solve(eq, x)\n\nprint(sol)\n```", "solution": "```python\nimport sympy\n\nn = sympy.symbols('n')\nx = sympy.symbols('x')\n\neq = 9*x**2 + n*x + 36\n\nsol = sympy.solve(eq, x)\n\nprint(sol)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[-n/18 - sqrt(n**2 - 1296)/18, -n/18 + sqrt(n**2 - 1296)/18]", "model_answers": [18.0, 2.0, 1296.0, 18.0, 18.0, 2.0, 1296.0, 18.0], "answer": 36.0}, {"response": "**Solution**\n```python\n# x + 4 is in the solution if x is in the solution of the inequality |x| < 9 - 4\n# since |x| < 9 - 4 iff -9 + x < 9\n# so the solution is -9, -5, 0, 5, 9\nprint(list(range(-9, 10)))\n```", "solution": "```python\n# x + 4 is in the solution if x is in the solution of the inequality |x| < 9 - 4\n# since |x| < 9 - 4 iff -9 + x < 9\n# so the solution is -9, -5, 0, 5, 9\nprint(list(range(-9, 10)))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "[-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "model_answers": [-9.0, -8.0, -7.0, -6.0, -5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0], "answer": 17.0}, {"response": "**Solution**\n```python\nprint(2 ** 6)\n```", "solution": "```python\nprint(2 ** 6)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "64", "model_answers": [64.0], "answer": 100.0}, {"response": "**Solution**\n```python\npen_cost = 924 / 7\npencil_cost = pen_cost / 11\nprint(pencil_cost)\n```", "solution": "```python\npen_cost = 924 / 7\npencil_cost = pen_cost / 11\nprint(pencil_cost)\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "12.0", "model_answers": [12.0], "answer": 36.0}, {"response": "**Solution**\n```python\nprint(0.5 * 2 * 10)\n```", "solution": "```python\nprint(0.5 * 2 * 10)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "10.0", "model_answers": [10.0], "answer": 10.0}, {"response": "**Solution**\n```python\nf(q(1))\n```", "solution": "```python\nf(q(1))\n```", "function": [], "is_success": false, "is_correct": false, "exec_output": "Unknown error in running subprocess (substring not found)", "model_answers": [], "answer": -1.0}, {"response": "**Solution**\n```python\nsum_of_odd_integers = 0\nfor i in range(501, 700, 2):\n    sum_of_odd_integers += i\nprint(sum_of_odd_integers)\n```", "solution": "```python\nsum_of_odd_integers = 0\nfor i in range(501, 700, 2):\n    sum_of_odd_integers += i\nprint(sum_of_odd_integers)\n```", "function": [], "is_success": true, "is_correct": true, "exec_output": "60000", "model_answers": [60000.0], "answer": 60000.0}, {"response": "**Solution**\n```python\ndef get_pages_on_first_day(total_pages):\n    return total_pages // 2\n\nprint(get_pages_on_first_day(248))\n```", "solution": "```python\ndef get_pages_on_first_day(total_pages):\n    return total_pages // 2\n\nprint(get_pages_on_first_day(248))\n```", "function": [], "is_success": true, "is_correct": false, "exec_output": "124", "model_answers": [124.0], "answer": 128.0}]