[
  {
    "example_id": 0,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a, b, c = 1, 2, 5\nc = a * b\nprint(c)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from sympy import sympify\n\na = sympify(\"(8^(-1)/4^(-1)) - 1\")\nprint(a)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "268.0"
    ],
    "annotated_answers": [
      "268.0"
    ],
    "solution": "import math\n\ntotal_area = 0\n\nfor i in range(1, 21):\n    radius = 16 / (2 ** i)\n    total_area += math.pi * radius ** 2\n\nprint(int(total_area))"
  },
  {
    "example_id": 3,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7945.0"
    ],
    "annotated_answers": [
      "7945.0"
    ],
    "solution": "rent_cost = 5000\nelectricity_cost = 1.45\ntotal_cost = 16520.25\nelectricity_used = (total_cost - rent_cost) / electricity_cost\nprint(electricity_used)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "flour_for_one_pound_cake = 1.5\nflour_for_two_five_pounds_cake = flour_for_one_pound_cake * 2 * 5\nprint(flour_for_two_five_pounds_cake)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "164.0"
    ],
    "solution": "win_ratio =.500\nloss_ratio = 1 - win_ratio\ntotal_matches = 4\nmatches_won = 3\nmatches_lost = 1\nwin_ratio_after_weekend = win_ratio + (matches_won / total_matches) - (matches_lost / total_matches)\nprint(win_ratio_after_weekend)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "a = 2\nb = 4\nc = a**2 + b**2\nd = c - 60\nprint(a + b)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "z_over_y = z / y\nz_over_y = z / x\nprint(z_over_y)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = (12+8)/2\ny = (12-8)/2\nprint(2*x - x*y)"
  },
  {
    "example_id": 9,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "7.0",
      "6.0",
      "6.0",
      "8.0",
      "7.0",
      "4.0",
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy\nx, y, K = sympy.symbols('x y K')\nsol = sympy.solve([6*x + 4*y - 7, K*x + 8*y - 7], [x, y, K])\nprint(sol)"
  },
  {
    "example_id": 10,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "270.0"
    ],
    "annotated_answers": [
      "1545.0"
    ],
    "solution": "distance_from_ground = 405 * 2/3\nprint(distance_from_ground)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.56790123456789"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "x = 3\nprint((x - 1 / x) ** 4)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "141.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "m, n = 2000 / 16, 16\nprint(m + n)"
  },
  {
    "example_id": 13,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3702.0"
    ],
    "annotated_answers": [
      "3702.0"
    ],
    "solution": "floor = lambda x: int(x)\n\nn = 1/3\nresult = 0\nresult += floor(10*n) + floor(100*n) + floor(1000*n) + floor(10000*n)\nprint(result)"
  },
  {
    "example_id": 14,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "count = 0\nfor x in range(-5, 6):\n    for y in range(-5, 6):\n        if x**2 + y**2 == 25:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "from math import sqrt\n\nc = -10 + sqrt(100)\nprint(c)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "A = -1\nB = 1\nC = -1\nD = 1\n\nprint(A + B + C + D)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "smallest = (66 - 2) / 2\nprint(smallest)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 25 - 11\nprint(x)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.189207115002721"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(8 ** (1/12))"
  },
  {
    "example_id": 20,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2000.0"
    ],
    "annotated_answers": [
      "445.0"
    ],
    "solution": "# Equation of revenue:\n# Revenue = Number of widgets sold * Price per widget\n# Revenue = 2.75 * Number of widgets sold\n# Equation of expenses:\n# Expenses = Number of widgets sold * Cost per widget\n# Expenses = 0.50 * Number of widgets sold\n# Equation of profit:\n# Profit = Revenue - Expenses\n# Profit = 2.75 * Number of widgets sold - 0.50 * Number of widgets sold\n# Equation of Least Profit:\n# Least Profit = Maximum number of widgets the company can sell\n# Least Profit = $1000 / 0.50\n# Least Profit = 2000\n# Solution:\n# The least number of widgets the company has to sell in order to make a profit is 2000.\nprint(2000)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(0.5 * (1/3) * 36)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.331632653061224"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "x = 7/2\nprint(x**2 + 1/x**2 + 1)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(min(7, 7) + max(7, 7))"
  },
  {
    "example_id": 24,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "x = 2\nprint(x ** (x+1) ** x)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65536.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "def number_of_cells(n):\n    if n == 0:\n        return 2\n    else:\n        return 2 * number_of_cells(n - 1)\n\nprint(number_of_cells(15))"
  },
  {
    "example_id": 26,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "import math\nprint(math.sqrt(81))"
  },
  {
    "example_id": 27,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1120.0"
    ],
    "annotated_answers": [
      "1120.0"
    ],
    "solution": "print(43**2 - 27**2)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nprint(math.log(27, 3))"
  },
  {
    "example_id": 29,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1374.0"
    ],
    "annotated_answers": [
      "194.0"
    ],
    "solution": "a = 2\nd = 30 - 2\nn = 50\nterm = a + (n - 1) * d\nprint(term)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "sum = 0\nfor i in range(2, 10):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 31,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-625.0",
      "-1.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "from sympy import sympify\nprint(sympify('(-125)**(4/3)'))"
  },
  {
    "example_id": 32,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0",
      "30.0",
      "48.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import Abs\n\ndef f(x):\n    return (Abs(x**2 + 3*x - 4) + Abs(x**2 + 9*x + 20))\n\nprint(f(0))\nprint(f(1))\nprint(f(2))"
  },
  {
    "example_id": 33,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-5.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "(x, y) = ((7 + -3) / 2, (-6 + -4) / 2)\nprint(x, y)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "f = lambda a: 1/(1-a)\nf_inv = lambda a: (1-a)/a\na = 0.5\nprint(f_inv(a)*a*f(a))"
  },
  {
    "example_id": 35,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = 3\nn = 1\nprint(m+n)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "4.0",
      "33.0",
      "4.0",
      "1.0",
      "3.0",
      "4.0",
      "33.0",
      "4.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nroots = solve(2*x**2 - 7*x + 2, x)\na, b = roots\nprint(1/(a-1) + 1/(b-1))"
  },
  {
    "example_id": 37,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 9 - 4j\nb = -3 - 4j\nprint(a - b)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-55.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import symbols\n\na, b, c = symbols('a b c')\n\nx = -1\ny = 0\n\nA = a*x**2 + b*x + c\nA_value = A.subs({x: x, y: y})\n\nx = 0\ny = 5\n\nB = a*x**2 + b*x + c\nB_value = B.subs({x: x, y: y})\n\nx = 5\ny = 0\n\nC = a*x**2 + b*x + c\nC_value = C.subs({x: x, y: y})\n\nvalues = solve([A_value, B_value, C_value], [a, b, c])\nprint(values)\n\nprint(100*values[a] + 10*values[b] + values[c])"
  },
  {
    "example_id": 39,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = 2\ny = 3\nprint(x + y)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "128.0"
    ],
    "annotated_answers": [
      "103.0"
    ],
    "solution": "second_largest = 129 - 1\nprint(second_largest)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "12.0",
      "12.0",
      "12.0",
      "12.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import sqrt\n\ndef find_root(n):\n    return sqrt(12 - sqrt(12 - sqrt(12 - sqrt(12 - sqrt(12 - sqrt(n))))))\n\nprint(find_root(12))"
  },
  {
    "example_id": 42,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.8169014084507045"
    ],
    "annotated_answers": [
      "575.0"
    ],
    "solution": "n = -2.71 / 0.71\nprint(n)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16777216.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(0.5 * 1024 / 0.125 * 2 ** 12)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "blue_marbles_before = 3 * 4\nblue_marbles_added = 5\nblue_marbles_after = blue_marbles_before + blue_marbles_added\nyellow_marbles_removed = 3\nblue_marbles_after_ratio = blue_marbles_after / yellow_marbles_removed\nprint(blue_marbles_before)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from math import sqrt\n\ndef distance(p1, p2):\n    return sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\ndef segment_length(p1, p2):\n    return distance(p1, p2)\n\np1 = (1, 2)\np2 = (-4, -10)\nprint(segment_length(p1, p2))"
  },
  {
    "example_id": 46,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "7.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "# x + y = 6 + 8\n# 2x + 2y = 1 + 1\n# 2x = 7\n# x = 7/2\n# y = 14 - 7/2\n# y = 7\nprint(7, 7)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 4\nb = -2\nc = -1\nprint(a + b + c)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1996.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "def count_integers(start, end):\n    return end - start + 1\n\nprint(count_integers(13, 2008))"
  },
  {
    "example_id": 49,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# floor(14.6) = 14\n# ceiling(-14.6) = -14\nprint(14 - (-14))"
  },
  {
    "example_id": 50,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "b = 3\nprint(b)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5000.0"
    ],
    "annotated_answers": [
      "5000.0"
    ],
    "solution": "print(255**2 - 245**2)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x1 = 2\ny1 = 3\nx2 = 4\ny2 = 3\n\nb = (y2 - y1) / (x2 - x1)\nc = y1 - b * x1\n\nprint(c)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import log\nlog_x = log(49, 7)\nx = 49 ** (1 / log_x)\nprint(x)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "156.146359404213"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import log\nb = log(125/27)\nc = 27**b\nprint(c)"
  },
  {
    "example_id": 55,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "6.0",
      "48.0",
      "108.0",
      "6.0",
      "48.0",
      "108.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Symbol, solve, pprint\nx, y = Symbol('x'), Symbol('y')\nexpr = 2*x**2 + 3*y**2 + 8*x - 24*y + 62\nsolve_expr = solve(expr, x, y)\npprint(solve_expr)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "fewest_miles = 4 * 3\nprint(fewest_miles)"
  },
  {
    "example_id": 57,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy as sym\n\ns = sym.Symbol('s')\n\ndef is_integer_root(s):\n    \"\"\"\n    Check if the roots of the quadratic expression\n    are integers\n    \"\"\"\n    return (sym.isprime(s)\n            and sym.isprime(2*s-1)\n            and sym.isprime(2*s+1))\n\ndef get_sum(s):\n    \"\"\"\n    Get the sum of all possible values of s\n    \"\"\"\n    if is_integer_root(s):\n        return s\n\n    return get_sum(s+1)\n\nprint(get_sum(0))"
  },
  {
    "example_id": 58,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 4\nb = -3\nc = 5\nprint(a**2 - b**2 + c**2)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 3*5\nb = 15*6\nc = 6\nad = (a*c)/b\nprint(ad)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "import math\n\nr1 = 3 * 3\nh1 = 24\nr2 = r1 / 3\nv1 = math.pi * r1**2 * h1 / 3\nv2 = math.pi * r2**2 * h1 / 3\nprint(h1)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "y = 9\nx = 3\nexpression = y**2 - 3*x*y + 8\nprint(expression)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sym\n\nx, y, a, b, c = sym.symbols('x y a b c')\n\neq1 = sym.Eq(a*x + b*y + c, x + 7)\neq2 = sym.Eq(a + b*x + c*y, 2*x + 6*y)\neq3 = sym.Eq(a*y + b + c*x, 4*x + y)\n\nsol = sym.solve([eq1, eq2, eq3], [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "smallest_multiples = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\nprint(sum(smallest_multiples))"
  },
  {
    "example_id": 64,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4005.0"
    ],
    "annotated_answers": [
      "4005.0"
    ],
    "solution": "def odd_number(n):\n    return n * 2 + 1\n\ndef nth_odd(n):\n    return odd_number(n - 1)\n\nprint(nth_odd(2003))"
  },
  {
    "example_id": 65,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "c = -4*1 + 1 + 3 - 2 + 0\nprint(c)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "volume_drunk_first_three_miles = 1.5\ntotal_pints_drunk_first_ten_miles = volume_drunk_first_three_miles * 10 / 3\nprint(total_pints_drunk_first_ten_miles)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.8333333333333335"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 2\nb = 3\nprint(a / b + b / a - a * b)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0",
      "8.0"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "from sympy import Symbol, solve\n\nt = Symbol('t', real=True)\ny = -16*t**2 + 26*t + 105\n\ntime_to_hit_ground = solve(y, t)[0]\nprint(time_to_hit_ground)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.999500998003992",
      "-0.500249625561658",
      "0.866169477209129",
      "0.999500998003992",
      "-0.500249625561658",
      "0.866169477209129"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nroots = solve(2003/2004*x + 1 + 1/x - 0, x)\nprint(1/roots[0] + 1/roots[1])"
  },
  {
    "example_id": 70,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.4"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n = (55+1)/2\nprint(n)"
  },
  {
    "example_id": 72,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "15.0",
      "3.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "0.5"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = (2*x+5)*(x-3)\nprint(f)\nprint(f.expand())\nprint(f.expand().factor())"
  },
  {
    "example_id": 73,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8333333333333334",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "# find a\na = (7*17 - 3*2*17 + 4*17) / (2*17 - 3*17 + 7*17)\nprint(a)\n\n# find b\nb = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(b)\n\n# find c\nc = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(c)\n\n# find d\nd = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(d)\n\n# find e\ne = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(e)\n\n# find f\nf = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(f)\n\n# find g\ng = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(g)\n\n# find h\nh = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(h)\n\n# find i\ni = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(i)\n\n# find j\nj = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(j)\n\n# find k\nk = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(k)\n\n# find l\nl = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(l)\n\n# find m\nm = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(m)\n\n# find n\nn = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(n)\n\n# find o\no = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(o)\n\n# find p\np = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(p)\n\n# find q\nq = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(q)\n\n# find r\nr = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(r)\n\n# find s\ns = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(s)\n\n# find t\nt = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(t)\n\n# find u\nu = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(u)\n\n# find v\nv = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(v)\n\n# find w\nw = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(w)\n\n# find x\nx = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(x)\n\n# find y\ny = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(y)\n\n# find z\nz = (2*17 - 3*17 + 7*17) / (2*17 - 3*17 + 7*17)\nprint(z)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "6.0",
      "2.0",
      "2.0",
      "6.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nsolutions = sp.solve(2*x**2 + 4*x - 1, x)\nsum_of_squares = 0\nfor solution in solutions:\n    sum_of_squares += solution**2\nprint(sum_of_squares)"
  },
  {
    "example_id": 75,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\n\n# distance between points\ndistance = math.sqrt((2+3)**2 + (-5-7)**2)\n\n# length of line segment\nprint(distance)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.09523809523809523",
      "0.24761904761904763"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "cost_per_hour = 10 / 105\ncost_per_hour_Vino = 26 / 105\nprint(cost_per_hour, cost_per_hour_Vino)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "73.5"
    ],
    "solution": "k = 56\nj = 42\nk_new = 32\n\nj_new = (k_new / k) * j\nprint(round(j_new, 1))"
  },
  {
    "example_id": 78,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "x = 5**2 + 18\nprint(x)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2015.0"
    ],
    "solution": "def triangular(n):\n    return n * (n + 1) // 2\n\ndef diff(b):\n    return triangular(b + 1) - triangular(b)\n\nb = 2011\nwhile diff(b)!= triangular(x):\n    b += 1\nprint(b)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "350.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "print(113 + 276 - 13 - 26)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "625.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "perimeter = 100\nwidth = perimeter / 4\narea = width * width\nprint(area)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sym\n\nx = sym.Symbol('x')\n\nexp = (2**x - 2) * (5 * 2**x + 10) - (3 * 4**x + 12)\n\nprint(sym.solve(exp, x))"
  },
  {
    "example_id": 83,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "1024.0",
      "4.0",
      "5.0",
      "2.0",
      "1024.0",
      "2.0",
      "5.0",
      "2.0",
      "1024.0",
      "2.0",
      "5.0",
      "2.0",
      "1024.0",
      "4.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\neq = (2**(x+1))**3 * 4**x - 8192\nsol = sympy.solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import sympy\n\na, b, x = sympy.symbols('a b x')\n\n# Use the formula to find the value of a^2 + 2ab + b^2\na_squared = a ** 2\nb_squared = b ** 2\nsum_of_ab = 2 * a * b\n\n# Use the formula to find the value of 2x\ntwo_x = 2 * x\n\n# Combine the formulas\ncombined_expression = a_squared + sum_of_ab + b_squared + two_x\n\n# Solve for x\nsolution = sympy.solve(combined_expression, x)\nprint(solution)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "h = 36 - 3 - 6\nprint(h)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "def f(x):\n    return x - 7\n\ndef g(x):\n    return 7 - x\n\ndef h(x):\n    return f(g(x))\n\nprint(h(15))"
  },
  {
    "example_id": 87,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\nf = lambda n: math.floor(n) if n >= 4 else math.ceil(n)\nprint(f(math.pi / 3) + f(math.sqrt(45)) + f(8 ** (2 / 3)))"
  },
  {
    "example_id": 88,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "38.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x, y')\neq1 = 5*x - 2*y - 7\neq2 = 3*x + y - 2\nsolve = sympy.solve([eq1, eq2], [x, y])\nprint(24*solve[x] - 14*solve[y])"
  },
  {
    "example_id": 89,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = (x-3)/(x**2 + 7*x - 30)\nasymptotes = y.as_leading_term(x).free_symbols\nprint(len(asymptotes))"
  },
  {
    "example_id": 90,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "# Number of cubic meters of water needed to hold 600 fish\n# is 600 / 8\nprint(600 / 8)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(531**2 - 2*531*530 + 530**2)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import S\nx = S('x')\nprint(x**(-1) > x)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Two treeks and one goolee = one squig\n# Treeks weigh as much as three squigs\n# 10 treeks = 3 squigs + 1 goolee\n# 10 treeks = 3 squigs + 1 squig\n# 10 treeks = 4 squigs\nprint(4)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "less = 3\ngreater = 5\n\nless -= 4\ngreater += 8\n\nprint(greater)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import simplify, sqrt, symbols\nx = symbols('x')\nh = sqrt(25-x**2) + sqrt(x-2)\nprint(simplify(h))"
  },
  {
    "example_id": 96,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "187.5"
    ],
    "annotated_answers": [
      "187.5"
    ],
    "solution": "total_calories = 125 * 12 / 8\nprint(total_calories)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "k = 6\nprint(k)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(2 * (-2)**2 + 3 * (-2) + 4)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0000000000000004"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "import math\n\na = math.log(32, 2)\nb = math.log(125, a)\nprint(b)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def revenue(p):\n    return 120 - 3 * p\n\ndef find_max(p):\n    return revenue(p)\n\nprint(find_max(40))"
  },
  {
    "example_id": 101,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "3.0",
      "-4.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\na = sympy.solve(sympy.Eq(x**2 + 8*x + 4, 0), x)\nprint(a)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.030788046451576"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "annual_wage = 20_000\nmin_amount = 66_200\n\nrate = (min_amount / annual_wage) ** (1 / 3) - 1\nprint(rate * 100)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "print((34-10)+(20-9)+(55-10))"
  },
  {
    "example_id": 104,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "700.0"
    ],
    "annotated_answers": [
      "700.0"
    ],
    "solution": "print(32 ** 2 - 18 ** 2)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(int(pow(3/2, 2)+pow(pow(3/2, 2), 2)))"
  },
  {
    "example_id": 106,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef solve_diophantine_equation(a, b, c):\n    \"\"\"\n    Solve the Diophantine equation ax + by = c\n    :param a, b, c: coefficients\n    :return: x, y\n    \"\"\"\n    if a == 0:\n        x = -c // b\n        y = 0\n    elif b == 0:\n        x = 0\n        y = -c // a\n    else:\n        x = -c // b\n        y = -(a * x + c) // b\n    return x, y\n\n\ndef get_primes(n):\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n\ndef get_relative_prime(n1, n2):\n    \"\"\"\n    Get the relative prime of two numbers\n    :param n1, n2: two numbers\n    :return: relative prime\n    \"\"\"\n    if n1 > n2:\n        n1, n2 = n2, n1\n    for i in range(n1, n2 + 1):\n        if i % n1 == 0 and i % n2 == 0:\n            return i\n    return None\n\n\ndef solve_problem():\n    primes = get_primes(20)\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            a = primes[i]\n            b = primes[j]\n            c = a * b - (a + b)\n            if c == 39:\n                x, y = solve_diophantine_equation(a, b, c)\n                if x < 20 and y < 20:\n                    return a + b\n    return None\n\n\nprint(solve_problem())"
  },
  {
    "example_id": 107,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(a, b, c, d):\n    return a**b + c * d\n\ndef find_b(a, c, d):\n    for b in range(100):\n        if f(a, b, c, d) == 48:\n            return b\n    return -1\n\na = 6\nc = 4\nd = 3\nprint(find_b(a, c, d))"
  },
  {
    "example_id": 108,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import *\nf = lambda n: n**3 + 2*n - 1 if n > 1 else n - 1\nprint(f(0) + f(1) + f(2))"
  },
  {
    "example_id": 109,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\n\ndef f(x):\n    if x < 0:\n        return -x**2 - 1\n    elif 0 <= x < 4:\n        return 2\n    else:\n        return sqrt(x)\n\nprint(f(pi))"
  },
  {
    "example_id": 110,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# x-coordinates of the vertices of a triangle\nx1, x2, x3 = 3, 4, 5\n\n# x-coordinates of the midpoints of the sides of the triangle\nm1, m2, m3 = (x1 + x2) / 2, (x2 + x3) / 2, (x3 + x1) / 2\n\n# sum of the x-coordinates of the midpoints of the sides of the triangle\nS = m1 + m2 + m3\n\n# S^2\nS_squared = S**2\nprint(S_squared)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-33.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\neq = x**2 - 6*x + 2 - 29\na, b = sympy.solve(eq, x)\nprint(2*a - 3*b)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = -5\nprint(a)"
  },
  {
    "example_id": 113,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "numerator = 5 + 8\ndenominator = 8 + 5\nprint(numerator / denominator)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "import sympy\ndef f(x):\n    return -6*sympy.sin(x*sympy.pi/6)\n\nprint(f(f(-1)))"
  },
  {
    "example_id": 115,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve\nc = solve(x**2 + 4*x + c - 2*x**2 - x - 5)\nprint(c)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "c = -1\nprint(c)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.03333333333333333"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 30 / 5 / 10 / 18\nprint(x)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.7320508075688772"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "m = 3 ** (1/2)\nprint(m)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = (-50 + 2*10) / 2\nprint(x)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nprint(math.log(2, 4))"
  },
  {
    "example_id": 121,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "y = 8 - 5 * (-2) + 4 * (-2) ** 2\nprint(y)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\n\nconditions = [\n    sympy.Abs(2-sympy.Abs(x)) == 1\n]\n\nsolutions = sympy.solve(conditions, x)\n\nsquares = []\nfor solution in solutions:\n    squares.append(solution ** 2)\n\nprint(sum(squares))"
  },
  {
    "example_id": 123,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-60.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import fabs\n\nAB = 19 - 9\nBC = 19 - 7\n\nk = (AB*BC - BC*0) / (AB - BC)\nprint(k)"
  },
  {
    "example_id": 124,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3382.2557760000036"
    ],
    "annotated_answers": [
      "74726.0"
    ],
    "solution": "def compound_interest(principal, rate, time):\n    \"\"\"\n    Calculate the future value of an investment\n    principal: the initial principal investment\n    rate: the annual rate of interest as a decimal\n    time: the number of years in the future\n    \"\"\"\n    return principal * (1 + rate) ** time\n\ndef investment(principal, rate, years):\n    \"\"\"\n    Calculate the total investment needed to reach a certain amount\n    principal: the initial principal investment\n    rate: the annual rate of interest as a decimal\n    years: the number of years in the future\n    \"\"\"\n    return compound_interest(principal, rate, years) - principal\n\nprincipal = 10000\nrate = 0.06\nyears = 5\n\ninvestment_needed = investment(principal, rate, years)\nprint(investment_needed)"
  },
  {
    "example_id": 125,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import log\nprint(log(1, 2))"
  },
  {
    "example_id": 127,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "N = 3 * 3\nprint(N)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "20.0",
      "20.0",
      "2.0",
      "20.0",
      "2.0",
      "806.0"
    ],
    "annotated_answers": [
      "93.0"
    ],
    "solution": "from sympy import sqrt, gcd\nA = 6\nB = 245 + 3*125 + 4*45\nC = sqrt(B)\nprint(A/C, B/C)\nprint(A+B+C)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpr = (x+4)*(x-1) - (x-3)*(x+6)\nprint(expr.simplify())"
  },
  {
    "example_id": 130,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "13.5"
    ],
    "solution": "|18A - 18B| = |18(\\frac{1}{4}) - 18(-\\frac{1}{2})| = |18(\\frac{1}{4}) + 18(\\frac{1}{2})| = 18"
  },
  {
    "example_id": 131,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "from math import *\n\ndef f(x):\n    return (4 - x) / 2\n\ndef g(x):\n    return 2 * x - 4\n\nprint(f(g(1)) * g(f(1)))"
  },
  {
    "example_id": 132,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a, b = 20 // 44 + 1, 20 // 44\nprint(a + b)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.661903789690601"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import numpy as np\na, b, c, d = 5, 7, 10, 12\nm, n = (a + c) / 2, (b + d) / 2\nm_prime = (a + 14 + c - 2) / 2, (b + 20 + d - 4) / 2\nprint(np.linalg.norm(np.array(m) - np.array(m_prime)))"
  },
  {
    "example_id": 134,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 20\nm = 40"
  },
  {
    "example_id": 135,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.922816251426434",
      "28",
      "1.597058515661889",
      "148",
      "10.0",
      "3.5711314050648964",
      "148",
      "2.0",
      "5.0503447382813006",
      "148",
      "2.2585828289210743",
      "148",
      "5.0",
      "9.50737950171172",
      "29",
      "3.9155432282010285",
      "145"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "from sympy import expand\nfrom sympy import sqrt\nx = (4 / (sqrt(5) + 1) / (sqrt(4) * sqrt(5) + 1) / (sqrt(8) *\nsqrt(5) + 1) / (sqrt(16) * sqrt(5) + 1))\nprint(expand((x + 1) ** 48))"
  },
  {
    "example_id": 136,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "f(x) = x + 1\ng(x) = x^2 + 3\n\nprint(f(g(2)))"
  },
  {
    "example_id": 137,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.960000000000001"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "print((3.6)**2 - (int(3.6))**2)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "299.0"
    ],
    "annotated_answers": [
      "121.0"
    ],
    "solution": "from math import sqrt\nn = 400 - 81 - sqrt(400)\nprint(n)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "2.0",
      "14.0",
      "19.0",
      "7.0",
      "19.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "361.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nprint(49*x**2 + 14*x*(19-7*x) + (19-7*x)**2)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\na, b = sp.symbols('a b')\neq1 = 5 * a + 2 * b\neq2 = a * b\nsol = sp.solve([eq1, eq2], [a, b])\nprint(sol)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\ndef days_to_paint(square_size):\n    return math.ceil(math.log2(square_size))\n\nprint(days_to_paint(15 * 15))"
  },
  {
    "example_id": 142,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\nx_3 = x**3\nprint(x_3)"
  },
  {
    "example_id": 143,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "1.0",
      "2.16666666666667",
      "1.0",
      "2.16666666666667",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import Symbol\n\na, b, c = Symbol('a'), Symbol('b'), Symbol('c')\n\nans = 6 + 1/(2 + 1/6 + 1/(2 + 1/6 + 1/(2 + a)))\n\nprint(ans.n())"
  },
  {
    "example_id": 144,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "total_weight = 160 + 180 + 200\nAbby_and_Damon_weight = total_weight - (180 + 200)\nprint(Abby_and_Damon_weight)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# To get the coordinates of point A\nx = -5\ny = 3\n\n# To get the sum of the coordinates of point A\nprint(x + y)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.853553390593274",
      "0.853553390593274",
      "0.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from fractions import Fraction\nfrom sympy import simplify\n\nf = Fraction(1, 2) + Fraction(1, 2) * Fraction(1, 2)**0.5\ng = Fraction(1, 2) + Fraction(1, 2) * Fraction(1, 2)**0.5\n\na = simplify(f)\nb = simplify(g)\n\nprint(a)\nprint(b)\n\na_b = a - b\nprint(a_b)\n\nprint(a_b.numerator)\nprint(a_b.denominator)\n\na_b_num = a_b.numerator\na_b_den = a_b.denominator\n\nprint(a_b_num)\nprint(a_b_den)\n\na_b_num_2 = a_b_num**2\na_b_den_2 = a_b_den**2\n\nprint(a_b_num_2)\nprint(a_b_den_2)\n\na_b_num_2_a_b_den_2 = a_b_num_2 + a_b_den_2\nprint(a_b_num_2_a_b_den_2)\n\na_b_num_2_a_b_den_2_num = a_b_num_2_a_b_den_2.numerator\na_b_num_2_a_b_den_2_den = a_b_num_2_a_b_den_2.denominator\n\nprint(a_b_num_2_a_b_den_2_num)\nprint(a_b_num_2_a_b_den_2_den)\n\na_b_num_2_a_b_den_2_num_den = a_b_num_2_a_b_den_2_num * a_b_num_2_a_b_den_2_den\n\nprint(a_b_num_2_a_b_den_2_num_den)\n\na_b_num_2_a_b_den_2_num_den_den = a_b_num_2_a_b_den_2_num_den.denominator\n\nprint(a_b_num_2_a_b_den_2_num_den_den)\n\na_b_num_2_a_b_den_2_num_den_den_den = a_b_num_2_a_b_den_2_num_den_den.denominator\n\nprint(a_b_num_2_a_b_den_2_num_den_den_den)\n\nprint(a_b_num_2_a_b_den_2_num_den_den_den + a_b_num_2_a_b_den_2_num_den_den_den)"
  },
  {
    "example_id": 147,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a = 2\nb = 1\na + b"
  },
  {
    "example_id": 148,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "m = 3\nn = 4\np = 5\n\n# first equation\nleft = (m+n+p)*(mn+mp+np)\nright = 25\nprint(left, right)\n\n# second equation\nleft = m**2*(n+p) + n**2*(m+p) + p**2*(m+n)\nright = 4\nprint(left, right)\n\n# mnp\nmnp = m*n*p\nprint(mnp)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import I, Symbol\n\ndef f(z):\n    if not z.is_real:\n        return z**2\n    else:\n        return z + 2\n\ni = I\none = Symbol('1')\nminus_one = -one\nminus_i = -I\n\nprint(f(i) + f(one) + f(minus_one) + f(minus_i))"
  },
  {
    "example_id": 150,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-114.0"
    ],
    "annotated_answers": [
      "-114.0"
    ],
    "solution": "sum_of_integers = 0\nfor x in range(-30, 27):\n    sum_of_integers += x\nprint(sum_of_integers)"
  },
  {
    "example_id": 151,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import ceil\n\nflour_per_cookie = 1.5\neggs_per_cookie = 2\nbutter_per_cookie = 3\nsugar_per_cookie = 3 / 4\nchocolate_drops_per_cookie = 1\n\ntotal_flour = 216 * flour_per_cookie\ntotal_eggs = 216 * eggs_per_cookie\ntotal_butter = ceil(total_flour / butter_per_cookie)\ntotal_sugar = ceil(total_flour / sugar_per_cookie)\ntotal_chocolate_drops = 216 * chocolate_drops_per_cookie\n\nprint(total_butter)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "from sympy import *\n\nx, y = symbols('x y')\nexpr1 = (2*x + 3*y)**2\nexpr2 = x*y\nexpr1 = simplify(expr1)\nexpr2 = simplify(expr2)\n\neq1 = Eq(expr1, 4)\neq2 = Eq(expr2, -5)\nsol = solve([eq1, eq2], [x, y])\n\nx = sol[x]\ny = sol[y]\n\nexpr1 = 4*x**2 + 9*y**2\nprint(expr1)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "for x in range(1, 10):\n    if x**2 - 10*x + 16 == 0:\n        print(x)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "7.0",
      "3691.0",
      "8.0",
      "60.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    return (x+1)/(x**2-2*x+1)\n\ndef has_vertical_asymptote(x):\n    return f(x).is_infinite()\n\nprint(has_vertical_asymptote(x) for x in range(1,10))"
  },
  {
    "example_id": 155,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "def h(x):\n    return (x-0.5)*(x-2.5)*(x-6.5)*(x-7.5)/16+x\n\ntotal = 0\nfor x in range(9):\n    if h(x) > x:\n        total += x\nprint(total)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "def f(x):\n    return x**2\n\n# Find the point on the graph of y=f(x)\nx = 8/2\ny = f(x)\n\n# Find the sum of coordinates\nsum_of_coordinates = x + y\nprint(sum_of_coordinates)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "f = lambda x: 5*x+2\ng = lambda x: 3*x**2 - 4*x\nprint(f(f(1)) - g(g(2)))"
  },
  {
    "example_id": 158,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = (13 + (-16) + 6) / 3\ny = 8 ** (1/3)\nprint(x**2 + y**3)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "-11.0"
    ],
    "solution": "x = (2*1) + 9\nprint(x)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "1710.0"
    ],
    "solution": "total = 0\nfor i in range(1, 16):\n    total += i * 2\nprint(total)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import numpy as np\na = np.linspace(0, 10, 100)\nf = np.zeros_like(a)\nf[a >= 0] = a[a >= 0]**2\nf[a < 0] = a[a < 0] * 2 + 2\nmax_a = np.argmax(f)\nprint(max_a)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "degree_of_g = 8 - 4\nprint(degree_of_g)"
  },
  {
    "example_id": 163,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\nx = Symbol('x')\neq = (3*x**2 - 4*x + 1)/(x - 1)\nm = solve(eq, x)\nprint(m)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import simplify, Symbol\n\nx = Symbol('x')\np = 3*(x - 4) + 2*(x**2 - x + 7) - 5*(x - 1)\nprint(simplify(p))"
  },
  {
    "example_id": 165,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print((1+3)**3)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "V = 40\nR = 3\nR_new = 20\nI = V / R_new\nprint(I)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from math import log\nx = log(2**12, 1/8)\nprint(x)"
  },
  {
    "example_id": 168,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import log\nprint(log(5**4, 5**2))"
  },
  {
    "example_id": 169,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import sympify, solve\nx = sympify('x')\nf = sympify('4*x**3 + 1')\nf_inv = solve(f - 33, x)[0]\nprint(f_inv)"
  },
  {
    "example_id": 170,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import sqrt\nk = (-5 + sqrt(11)) * (-5 - sqrt(11))\nprint(k)"
  },
  {
    "example_id": 171,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import Symbol\nfrom sympy.abc import i\n\nx = (2-2*i) * (5+5*i)\nprint(x)"
  },
  {
    "example_id": 172,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Number of rows = Total seats / Seats per row\ntotal_seats = 450\nseats_per_row = 450 / 5\nrows = total_seats / seats_per_row\nprint(rows)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "def f(x):\n    return 2*x + 1\n\ndef f_inv(x):\n    return (x - 4) // 2\n\nprint(f_inv(17))"
  },
  {
    "example_id": 174,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "A = (5*16 - 5*10) / (10 - 7)\nB = (5*10 - 5*16) / (10 - 7)\nprint(A+B)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nprint(math.log2(32) - 2)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def P(x):\n    return 4 * x**3 - 2 * x**2 + 7 * x - 1\n\ndef Q(x):\n    return P(x)**2\n\nprint(Q(0))"
  },
  {
    "example_id": 177,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "121.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "n = 241 // 2 + 1\nprint(n)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "from math import floor, ceil\n\n# Find the floor of 52/3\nf = floor(52/3)\n\n# Find the ceiling of 5/23\nc = ceil(5/23)\n\n# Calculate the result\nprint(ceil(f/c))"
  },
  {
    "example_id": 179,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = 5\nprint(x)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\nparabola = - (x + 1) ** 2 + 1\nshift_right = parabola.subs(x, x + 1)\nshift_down = shift_right.subs(y, y - 5)\nrotated = shift_down.subs(x, - x)\na, b = sympy.solve(rotated.subs(y, 0), x)\nprint(b - a)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.9375"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 1\nb = 1/2\nS = a + b + a*b + b*b\n\nb_term = 1/2\nS_b = b_term + b_term*b_term + b_term*b*b_term + b_term*b*b*b_term\n\na_term = a\nS_a = a_term + a_term*b_term + a_term*b*b_term + a_term*b*b*b_term\n\nprint(S_b - S_a)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "ratio = 3\na1, a2, a3 = 1, 2, 3\na4 = a2 * ratio\na5 = a3 * ratio\nprint(a4/a2, a5/a3)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "978121.0"
    ],
    "annotated_answers": [
      "978121.0"
    ],
    "solution": "print(989**2)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "c = 9\nprint(c)"
  },
  {
    "example_id": 185,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.5"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "y_intercept = -6 / 4\nprint(y_intercept)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "2.0",
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x y')\nc = sympy.symbols('c')\n\ncircle_eq = x**2 + 8*x + y**2 + 4*y + c\n\nradius = sympy.sqrt(circle_eq) - 3\n\nprint(radius)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import log\na = int(log(2938, 8))\nb = int(log(2938, 8) + 1)\nprint(a + b)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "quarts = 2 / 0.25\nprint(quarts)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\n\nf = 2 * x - 4\ng = x ** 2 + 3\n\nsol = solve(f, x)\nf_sol = f.subs(x, sol[0])\ng_sol = g.subs(x, 2)\nf_g_sol = f_sol.subs(x, g_sol)\n\nprint(f_g_sol)"
  },
  {
    "example_id": 190,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import solve\nfrom sympy.abc import x, k\n\nroots = solve([4*x**2 + 7*x + k, x**2 - 7*x - k], [x, k])\nprint(roots)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = 2\nprint(m)"
  },
  {
    "example_id": 192,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "shoe_size = 42 - 6\nprint(shoe_size)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1171.7307692307693"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "f_negative = -60 / 13\nf_positive = 3120\na = (f_negative - f_positive) / (2 * 4)\nb = 2 * a\nprint(a + b)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nprint(math.log(81, 3))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.14285714285714"
    ],
    "annotated_answers": [
      "0.43"
    ],
    "solution": "from sympy import Symbol\nfrom sympy import solve\n\nt = Symbol('t')\ny = -4.9*t**2 - 3.5*t + 2.4\n\nsol = solve(y, t)\nprint(sol[0])"
  },
  {
    "example_id": 196,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "print((4**3 + 2**3) - (3**3 + 1**3))"
  },
  {
    "example_id": 197,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2401.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Find the product of the two positive numbers\n# and their sum of squares\nproduct = 24\nsum_of_squares = 73\n\n# Calculate the square of their difference\nsquare_of_difference = (sum_of_squares - product) ** 2\n\n# Print the square of their difference\nprint(square_of_difference)"
  },
  {
    "example_id": 198,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def D(a, b, c):\n    return a * b * c / (a + b + c)\n\nprint(D(2, 4, 6))"
  },
  {
    "example_id": 199,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8000.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "print((26**2 - 24**2 - 10)**2 - 10**2)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "x = 73\ny = 86\nprint(y - x)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def harmonic_mean(x, y):\n    return 20\n\ndef is_equal_to_20(x, y):\n    return harmonic_mean(x, y) == 20\n\ndef solution(x, y):\n    return sum(1 for x in range(1, x + 1) if is_equal_to_20(x, y))\n\nprint(solution(10, 10))"
  },
  {
    "example_id": 202,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "11.0",
      "3.0",
      "2.0",
      "3.0",
      "13.0",
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import sympy\n\n# Define the points\np1 = sympy.Point2D(-1, 2)\np2 = sympy.Point2D(3, 0)\np3 = sympy.Point2D(9, 0)\n\n# Find the center\ncenter = sympy.centroid(p1, p2, p3)\n\n# Print the center\nprint(center)\n\n# Print the sum of the x and y coordinates\nprint(center.x + center.y)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.25"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return (4*x + 1)/3\n\ndef f_inv(y):\n    return (y-1)/4\n\ndef f_inv_inv(x):\n    return (x-1)/4\n\nprint(f_inv_inv(f_inv(1)))"
  },
  {
    "example_id": 204,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "p = 1\nq = 2\nprint(p+q)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.5"
    ],
    "annotated_answers": [
      "125.5"
    ],
    "solution": "mean = (1 + 250) / 2\nprint(mean)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nsolutions = solve(x**2 - 4*x - 14, x)\nprint(abs(solutions[0] - solutions[1]))"
  },
  {
    "example_id": 207,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.3333333333333335"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 7 / 3\nprint(x)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.2857142857142863"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    return (1 + x) / (1 - x)\n\ndef g(x):\n    return -2 / (x + 1)\n\nx = f(g(f(g(f(g(f(g(f(12)))))))))\nprint(x)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\nprint(simplify((x+3)*(x-1) - x*(x+2)))"
  },
  {
    "example_id": 210,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6.0",
      "384.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nexpr = sympy.sqrt(sympy.sqrt(24) + 3456 / 9 + sympy.sqrt(6))\nprint(expr)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 212,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import sympy\nprint(sympy.sqrt(4**5 + 4**5 + 4**5 + 4**5))"
  },
  {
    "example_id": 213,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "A, B, C = 1, 2, 3\nprint(A + B + C)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "slope = (2 - 0) / (6 - 5)\nprint(slope)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import log, Symbol\nx = Symbol('x')\nexpr = log(10-2*x, x-1)\nsol = expr.evalf()\nprint(sol)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "5.0",
      "2.0",
      "4.0",
      "4.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy as sp\n\na, b, c, d = sp.symbols('a b c d')\n\neq1 = sp.Eq(a - b, 2 * (c + d))\neq2 = sp.Eq(b, a - 2)\neq3 = sp.Eq(d, c + 5)\n\nsol = sp.solve((eq1, eq2, eq3), (c, d))\nprint(sol)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "a = 2\nb = 3\nprint(8 * a**2 * b**2)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 8\nprint(16 * a ** (1/3))"
  },
  {
    "example_id": 220,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "midpoint_x = (1 + 1) / 2\nmidpoint_y = (4 + 10) / 2\nprint(midpoint_x + midpoint_y)"
  },
  {
    "example_id": 221,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "24.0",
      "2.0",
      "2.0",
      "32.0",
      "2.0",
      "2.0",
      "24.0",
      "2.0",
      "1.0",
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "import sympy\n\nx1, y1 = sympy.symbols('x1, y1')\nx2, y2 = sympy.symbols('x2, y2')\n\neq1 = x1**2 - 24*x1 + y1**2 - 32*y1 + 384\neq2 = x2**2 + 24*x2 + y2**2 + 32*y2 + 384\n\nd = sympy.sqrt(sympy.diff(eq1, x1)*sympy.diff(eq2, y2) - sympy.diff(eq1, y1)*sympy.diff(eq2, x2))\nprint(d)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nprint(sympy.solve(sympy.Eq((66 - 2**x) / (2**x + 3), (4 - 2**x) / (2**(x + 1) + 6)), x))"
  },
  {
    "example_id": 223,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.333333333333336"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# Pencil cost in cents\npencil_cost = 124 / 3\nprint(pencil_cost)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "a = 4\nb = 12\nm = 1\nprint(a + b + m)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "3.0",
      "4.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import integrate\nfrom sympy.abc import x\n\ndef f(x):\n    return 2 * x**2 + 8 * x + 4\n\na = integrate(f(x), x)\nprint(a)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "196.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "p = 28 / 7\np_when_q_is_49 = p * 49\nprint(p_when_q_is_49)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.0",
      "-0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\n\ndef f(x):\n    return (x-4)**2 - 9\n\ndef solve_quadratic(f):\n    disc = f(0)**2 - 4*f(1)*f(2)\n    if disc < 0:\n        return []\n    elif disc == 0:\n        return [-f(1) / (2*f(2))]\n    else:\n        return [-f(1) / (2*f(2)), -f(1) / (2*f(2))]\n\nsolution = solve_quadratic(f)\nprint(solution)"
  },
  {
    "example_id": 228,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 3\nprint(n)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\na = sympy.symbols('a')\nexpr = (sympy.sqrt(4+sympy.sqrt(16+16*a)) + sympy.sqrt(1+sympy.sqrt(1+a)) - 6)**2\nsolve_for_a = sympy.solve(expr, a)\nprint(solve_for_a)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def slope_from_midpoints(p1, p2, q1, q2):\n    \"\"\"\n    Given two segments with endpoints p1 and p2, and q1 and q2,\n    find the slope of the line containing the midpoint of the first segment and the midpoint of the second segment.\n    \"\"\"\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = q1\n    x4, y4 = q2\n    midpoint_of_segment_1 = ((x1 + x2) / 2, (y1 + y2) / 2)\n    midpoint_of_segment_2 = ((x3 + x4) / 2, (y3 + y4) / 2)\n    slope_of_segment_1 = (y2 - y1) / (x2 - x1)\n    slope_of_segment_2 = (y4 - y3) / (x4 - x3)\n    slope_of_line_containing_midpoints = (slope_of_segment_1 + slope_of_segment_2) / 2\n    return slope_of_line_containing_midpoints\n\nslope = slope_from_midpoints((2, 4), (0, -2), (5, 1), (1, 5))\nprint(slope)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpr = x**2 - 5*x + 7 - (x-3)*(x-2)\nprint(expr.expand())"
  },
  {
    "example_id": 232,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "94949.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "m, n, k, t = 2, 3, 5, 7\nresult = m**n + n**m + k**t + t**k\nprint(result)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "son_age = 30 / 5\nprint(son_age)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4950.0"
    ],
    "annotated_answers": [
      "4950.0"
    ],
    "solution": "total = 0\nfor i in range(100, 201):\n    if i % 3 == 0:\n        total += i\nprint(total)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "interest_rate = (1225 - 1000) / 1000 * 100\nprint(round(interest_rate))"
  },
  {
    "example_id": 236,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    if x == 1:\n        return 2\n    elif x == 2:\n        return 6\n    elif x == 3:\n        return 5\n    else:\n        raise ValueError\n\ndef f_inv(x):\n    if x == 2:\n        return 1\n    elif x == 6:\n        return 2\n    elif x == 5:\n        return 3\n    else:\n        raise ValueError\n\nprint(f_inv(f_inv(6)))"
  },
  {
    "example_id": 237,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8281.0"
    ],
    "annotated_answers": [
      "8281.0"
    ],
    "solution": "print(91**2)"
  },
  {
    "example_id": 238,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "450.0"
    ],
    "annotated_answers": [
      "-27.0"
    ],
    "solution": "g = 3\nc = 1\np = 12\nq = 9\n\nexpr = g**4 + 12*g**2 + 9\nexpr = c*(g**2 + p)**2 + q\n\nprint(expr)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "4.0",
      "3.0",
      "25.0",
      "2.0",
      "38.0",
      "17.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = 3*x**4 + x**3 - 25*x**2 + 38*x - 17\nf = f.subs(x-1, 0)\nprint(f)"
  },
  {
    "example_id": 240,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.7906976744186047"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "t = 77 / 43\nprint(t)"
  },
  {
    "example_id": 241,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = 24*x**4 + 6*x**3 + 4*x**2 - 7*x - 5\nexpression2 = 6*x**3 + 3*x**2 + 3*x + 4\nresult = expression*expression2\nprint(result.coeff(x**3))"
  },
  {
    "example_id": 242,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "count = 0\nfor a in range(0, 6):\n    for b in range(0, 6):\n        for c in range(0, 6):\n            if a**2*b + b**2*c + c**2*a - a*b**2 - b*c**2 - c*a**2 == 0:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 243,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = -3\nprint(x)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x = 3 + 5\nprint(x)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.2"
    ],
    "solution": "# Find the equation of the parabola\n# given that the parabola has a vertical line of symmetry at x=1\n# and goes through the two points (-1,3) and (2,-2)\n# The slope of the parabola is 2\na = 2\n# The y-intercept of the parabola is 3\nb = 3\n# The value of c is 3-2(1)(3) = -3\nc = -3\n\n# Find the equation of the quadratic\n# given that the quadratic has two real roots\n# The greater root is sqrt(n)+1\nn = 1\n\n# Find a, b, and c\na = (n-1)/(n+1)\nb = 2*(n+1)\nc = (n+1) - n\n\n# Print the equation of the parabola\nprint('y =', a, 'x^2 +', b, 'x +', c)"
  },
  {
    "example_id": 246,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "136.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "i = 1\nterm = 0\nwhile term <= 125:\n    term = term + i\n    i = i + 1\n\nprint(term)"
  },
  {
    "example_id": 248,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Calculate the climbing rate in feet per second\nclimbing_rate = 100\n\n# Calculate the time in seconds\ntime = 12000 / climbing_rate\n\nprint(time)"
  },
  {
    "example_id": 249,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nfrom sympy import *\nf = sympy.symbols(\"f\", cls=Function)\nx = sympy.symbols(\"x\")\neq = (x**2 - 1)*f(x) - 5*x**6 + x**5 - 3*x**4 - x**3 + 25*x**2 - 38*x + 17\nsolve(eq, f(x))"
  },
  {
    "example_id": 250,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "b = -6\nc = 66\nprint(b+c)"
  },
  {
    "example_id": 251,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0",
      "2.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "0.75"
    ],
    "solution": "from sympy import Symbol, solve, pprint\n\nt = Symbol('t', real=True)\n\neq = -16*t**2 - 60*t + 54\n\nsol = solve(eq, t)\n\npprint(sol)"
  },
  {
    "example_id": 252,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "workers_needed = 12 / 4\nprint(workers_needed)"
  },
  {
    "example_id": 253,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.132745950421556"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "import math\n\ndef distance_between_circles(c1, c2):\n    return math.sqrt(math.pow(c1[0]-c2[0], 2) + math.pow(c1[1]-c2[1], 2))\n\ndef get_circles():\n    return (\n        (9, 5, 6.25),\n        (-6, 3, 49),\n    )\n\ndef main():\n    circles = get_circles()\n    distance = distance_between_circles(circles[0], circles[1])\n    print(distance)\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 254,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1/2\nprint(x)"
  },
  {
    "example_id": 255,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x1 = 5\ny1 = 4\nx2 = -9\ny2 = 8\n\nx_mid = (x1 + x2) / 2\ny_mid = (y1 + y2) / 2\n\nprint(x_mid + y_mid)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "t = 3\nprint((t) * (t + 2) - ((t + 1) * (t + 1)))"
  },
  {
    "example_id": 257,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.5"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = (1+2)/2\ny = (1-2)/2\nprint(8*x-7*y)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(8 + (-8))"
  },
  {
    "example_id": 259,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "41.0",
      "1023.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import sqrt\na = 2**10 + 1\nb = 2**10 - 1\nroot = sqrt(a) / b\nprint(root)"
  },
  {
    "example_id": 260,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "5.0",
      "-1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, simplify\nx = Symbol('x')\ny = (x - 2) / (x**2 - 7*x + 10)\nprint(simplify(y.subs(x, 0)))\nprint(simplify(y.subs(x, 2)))\nprint(simplify(y.subs(x, 4)))\nprint(simplify(y.subs(x, 6)))"
  },
  {
    "example_id": 261,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = int(292**(1/6))\nprint(x)"
  },
  {
    "example_id": 262,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Count the number of possible values of n\nimport math\nm = 19\nn = 0\nwhile n < m:\n    n += 1\n    if math.gcd(n, m) == 1:\n        print(n)"
  },
  {
    "example_id": 263,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.222222222222221"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "n_wins = 2 / 9\nn_games = 15 + n_wins\nprint(n_games)"
  },
  {
    "example_id": 264,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = x ** 2 + 2 * x - 6\nprint(sympy.diff(y, x))"
  },
  {
    "example_id": 265,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "402.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "a = 6\nd = 4\nn = 100\nprint(a + (n - 1) * d)"
  },
  {
    "example_id": 266,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 7\nb = -a\nprint(b)"
  },
  {
    "example_id": 267,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0",
      "-11.0",
      "-0.45454545454545453"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "denali_pay = 16\nnate_pay = 12\ndenali_increase = 4\nnate_decrease = 12\ndenali_new_pay = denali_pay + (denali_increase * denali_pay)\nnate_new_pay = nate_pay - (nate_decrease * nate_pay)\n\ndenali_ratio = denali_new_pay / denali_pay\nnate_ratio = nate_new_pay / nate_pay\n\nprint(denali_ratio)\nprint(nate_ratio)\n\nx = denali_ratio / nate_ratio\nprint(x)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import sqrt, simplify\n\ndenominator = (sqrt(5) + sqrt(2)) / (sqrt(5) - sqrt(2))\nnumerator = simplify(denominator)\nprint(numerator)"
  },
  {
    "example_id": 269,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "2.0",
      "-53.0",
      "-18.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "def max_of_fx(x):\n    return -x**2 - 8*x + 12\n\ndef max_of_fx_prime(x):\n    return -2*x - 8\n\ndef find_max(f, f_prime, a, b):\n    if f(a) > f(b):\n        return a\n    else:\n        return b\n\ndef find_max_of_fx(a, b):\n    return find_max(max_of_fx, max_of_fx_prime, a, b)\n\ndef test_max_of_fx(a, b):\n    print(\"Max of f(x) = \", max_of_fx(a))\n    print(\"Max of f'(x) = \", max_of_fx_prime(a))\n    print(\"Max of f(x) = \", max_of_fx(b))\n    print(\"Max of f'(x) = \", max_of_fx_prime(b))\n\ntest_max_of_fx(-5, 5)"
  },
  {
    "example_id": 270,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "def min_height(t):\n    return 2 * t ** 2 - 5 * t + 29\n\nprint(min_height(0))"
  },
  {
    "example_id": 271,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "first_practice_free_throw_count = 48 / 2\nprint(first_practice_free_throw_count)"
  },
  {
    "example_id": 272,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "b = (12 - 3 * 4) / 2\nprint(b)"
  },
  {
    "example_id": 273,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "510.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "bricks_per_hour = 30\nhours_worked_by_alan = 3\nhours_worked_by_david = 1\ntotal_bricks_placed = 600\nbricks_placed_by_david = total_bricks_placed - bricks_per_hour * hours_worked_by_alan\nprint(bricks_placed_by_david)"
  },
  {
    "example_id": 274,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# using scipy\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef line(x, m, b):\n    return m*x + b\n\nx = np.array([7, -1])\ny = np.array([-1, 7])\n\npopt, _ = curve_fit(line, x, y)\nprint(popt)"
  },
  {
    "example_id": 275,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "dad_age = 53 - 31\nprint(dad_age)"
  },
  {
    "example_id": 276,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "x = 7 + 9\ny = 7 - 9\nx_y = x * y\nprint(x_y)"
  },
  {
    "example_id": 277,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 3 ** 2\nprint(x)"
  },
  {
    "example_id": 278,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import numpy as np\ndef f(x):\n    return np.floor((-5/8)**x)\n\ndistinct_values = len(np.unique(f(np.arange(0, 10000))))\nprint(distinct_values)"
  },
  {
    "example_id": 279,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "10.0",
      "-4.0",
      "-6.0",
      "-87.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "x, y = -1, 6\na, b, c = 2, 3, 1\nx1, y1 = a - b, b + c\nx2, y2 = a + b, b - c\n\n# Distance between two points\ndistance = (x2 - x1) ** 2 + (y2 - y1) ** 2\n\n# Center of the circle\ncenter_x, center_y = (x1 + x2) / 2, (y1 + y2) / 2\n\n# Radius of the circle\nradius = distance / 4\n\n# Center of the circle\ncenter_x, center_y = (x1 + x2) / 2, (y1 + y2) / 2\n\n# Radius of the circle\nradius = distance / 4\n\n# Formula for circle equation\ncircle_eq = '(x - {})**2 + (y - {})**2 = {}'\n\n# Print the circle equation\nprint(circle_eq.format(center_x, center_y, radius))\n\n# Find A, B, C\nA = -2 * center_x\nB = -2 * center_y\nC = center_x ** 2 + center_y ** 2 - radius ** 2\n\n# Print the values of A, B, C\nprint(A, B, C)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.5"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = (3*2**2 + 5) / 2\nprint(x)"
  },
  {
    "example_id": 281,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def F(a, b, c, d):\n    return a ** b + c ** d\n\ndef find_b_value(F, a, c, d):\n    for b in range(10):\n        if F(a, b, c, d) == 12:\n            return b\n    return None\n\nb_value = find_b_value(F, 4, 2, 3)\nprint(b_value)"
  },
  {
    "example_id": 282,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import math\n\ndef find_int_between(a, b):\n    return int((a + b)/2)\n\nc = find_int_between(math.sqrt(abs(-45)), math.sqrt(abs(-101)))\nprint(c)"
  },
  {
    "example_id": 283,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "123.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "print(123123 / 1001)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "least_possible_result = 4 * (5 - 6)\nprint(least_possible_result)"
  },
  {
    "example_id": 285,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\neq = 3*x**2 - 2*(x**2 + 4)\nprint(eq.subs(x**2, 42).simplify())"
  },
  {
    "example_id": 286,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "f = lambda x: x**3 + 2*x + 1\ng = lambda x: x - 1\nprint(f(g(1)))"
  },
  {
    "example_id": 287,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4800.0"
    ],
    "annotated_answers": [
      "4800.0"
    ],
    "solution": "bacteria = 600\nbacteria_at_midnight = bacteria * (2 ** (12 / 4))\nprint(bacteria_at_midnight)"
  },
  {
    "example_id": 288,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-102.0"
    ],
    "solution": "from sympy import Symbol, Eq, solve\nx = Symbol('x')\na = Symbol('a')\nf = (x**2 + 5*x + a) / (x**2 + 7*x - 44)\n\n# find a such that f is a quotient of two linear functions\nsol = solve(Eq(f, 0), a)\n\n# sum of the elements of S\nprint(sum(sol))"
  },
  {
    "example_id": 289,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 166 // 14 - 10 * (166 // 15)\ny = 166 // 14 - x\nprint(x + y)"
  },
  {
    "example_id": 290,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(4)"
  },
  {
    "example_id": 291,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0",
      "40.0",
      "40.0",
      "40.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\ndef tangent_circles(x, y, r, point_x, point_y):\n    \"\"\"\n    Given a circle with center (x, y) and radius r,\n    find the number of circles that are tangent to both\n    the given circle and pass through the point (point_x, point_y).\n    \"\"\"\n    # Find the distance between the two centers\n    distance = math.sqrt((x - point_x) ** 2 + (y - point_y) ** 2)\n\n    # Find the radius of the third circle\n    radius = math.sqrt(r ** 2 + distance ** 2)\n\n    # Find the number of tangent circles\n    return int(2 * math.pi * radius)\n\n\n# Test the function with different centers and radii\nprint(tangent_circles(4, 0, 1, 0, 5))  # 1\nprint(tangent_circles(-4, 0, 1, 0, 5))  # 1\nprint(tangent_circles(0, 5, 1, 4, 0))  # 1\nprint(tangent_circles(0, 5, 1, -4, 0))  # 1"
  },
  {
    "example_id": 292,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "# Use sympy\nfrom sympy import *\n\nt = symbols('t')\na, b = symbols('a b')\n\nf1 = 3*t**2 + 5*t + a\nf2 = 4*t**2 + b*t - 2\n\nf1_f2 = f1*f2\nprint(f1_f2)\n\n# To find a+b\nprint(f1_f2.expand())\n\n# To find a\nprint(f1_f2.coeff(t**2))\n\n# To find b\nprint(f1_f2.coeff(t))"
  },
  {
    "example_id": 293,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = 1\nb = 1\nc = 2\nprint(a+b+c)"
  },
  {
    "example_id": 294,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "12296.0",
      "2.0",
      "2.0",
      "12296.0"
    ],
    "annotated_answers": [
      "32736.0"
    ],
    "solution": "import sympy as sp\n\nx, y, z = sp.symbols('x y z')\nexpr = sp.Eq(x**2 + y**2 + z**2, 12296)\nsol = sp.solve(expr, [x, y, z])\nprint(sol)"
  },
  {
    "example_id": 295,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "for i in range(10, 100):\n    if i % 10 == 5 and i // 10 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 296,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "g = lambda x: 3*x-4\nprint(g(0))"
  },
  {
    "example_id": 297,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "378.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "median = 27 * 14\nprint(median)"
  },
  {
    "example_id": 298,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "import math\n\ndef is_point_within_circle(x, y):\n    return (x - 0) ** 2 + (y - 0) ** 2 <= 5 ** 2\n\ndef count_points_within_circle():\n    count = 0\n    for x in range(-5, 6):\n        for y in range(-5, 6):\n            if is_point_within_circle(x, y):\n                count += 1\n    return count\n\nprint(count_points_within_circle())"
  },
  {
    "example_id": 299,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6561.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return x**2\n\ndef g(x):\n    return f(f(x))\n\nprint(g(9))"
  },
  {
    "example_id": 300,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "# x = 4 + 5\nx = 9\n# x^2 = (9)^2\nx_squared = 81\nprint(x_squared)"
  },
  {
    "example_id": 301,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy as sp\nx = sp.symbols('x')\nsolutions = sp.solve(sp.sqrt(3*x+6)-(x+2))\nprint(solutions)"
  },
  {
    "example_id": 302,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(4*3**2/9*2**2)"
  },
  {
    "example_id": 303,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "67.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def p(x):\n    return x**2 + 3\n\ndef q(x):\n    return x**2 + 7\n\np_of_q = p(q(-1))\nprint(p_of_q)"
  },
  {
    "example_id": 304,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "time = 0\ndistance = 45\nwhile distance > 0:\n    time += 1\n    distance -= time\nprint(distance)"
  },
  {
    "example_id": 305,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "num_customers = 15 / (1500 / 2500)\nprint(num_customers)"
  },
  {
    "example_id": 306,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2450.0"
    ],
    "annotated_answers": [
      "2450.0"
    ],
    "solution": "total_earnings = 1200 + 0.05 * 25000\nprint(total_earnings)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8888888888888888"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 8 / 3\nz = 15 / 5\nprint(x / z)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nprint(math.sqrt(64) - math.cbrt(64))"
  },
  {
    "example_id": 309,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12364.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "AMC10 = 12342\nAMC12 = 22\nsum = AMC10 + AMC12\nprint(sum)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.000000000000001"
    ],
    "annotated_answers": [
      "1.8"
    ],
    "solution": "x = 4.8 - (int(4.8) + float(4.8))\nprint(x)"
  },
  {
    "example_id": 311,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nsol = solve(192*x**2 - 16, x)\nprint(1/sol[0]**4)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\n\nf = x**2 - 2*x + 4\n\nprint(f.coeff(x, 2) + f.coeff(x) + f.coeff(1))"
  },
  {
    "example_id": 313,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "2003.0"
    ],
    "solution": "sum_even_numbers = sum(range(0, 2003, 2))\nsum_odd_numbers = sum(range(1, 2003, 2))\nprint(sum_even_numbers - sum_odd_numbers)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 1\nb = 3\nwhile a * b < 255:\n    a += 2\n    b += 2\nprint(a)"
  },
  {
    "example_id": 315,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13225.0"
    ],
    "annotated_answers": [
      "13225.0"
    ],
    "solution": "print(115**2)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = 23 // 3\nprint(a)"
  },
  {
    "example_id": 317,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26000.0"
    ],
    "annotated_answers": [
      "26000.0"
    ],
    "solution": "print(513 ** 2 - 487 ** 2)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy as sp\n\na, b, c = sp.symbols(\"a b c\")\n\nsum_squares = a**2 + b**2 + c**2\n\nconstraints = [\n    sum_squares - 13,\n    a * b + b * c + c * a - 6\n]\n\nsol = sp.solve(constraints, [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 319,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.75"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "revolutions_16_feet = 27 / (64 / 16)\nprint(revolutions_16_feet)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0",
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sp\n\nlog_125_sqrt_5 = sp.log(125, sp.sqrt(5))\nprint(log_125_sqrt_5)"
  },
  {
    "example_id": 321,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "a = 15 - 3 * 2\nb = (15 - a) / 2\nprint(a + b)"
  },
  {
    "example_id": 322,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "time_50m = 25 - 5\nprint(time_50m)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "x = 3^2 + 1\nprint(x)"
  },
  {
    "example_id": 324,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\nimport numpy as np\n\ndef distance(a, b):\n    return math.sqrt(np.square(a[0] - b[0]) + np.square(a[1] - b[1]))\n\nrobert = (4, 3)\nlucy = (6, 1)\nliz = (1, 7)\n\nprint(max(distance(robert, liz), distance(robert, lucy)))"
  },
  {
    "example_id": 325,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# maximum degree of f(x) is 3\n# maximum degree of g(x) is 2\n# f(x) = ax^2 + bx + c\n# g(x) = dx^3 + ex^2 + fx + g\n# f(x) = (f(x))^3 - (g(x))^2 + f(x) - 1\n# f(x) = ax^6 + bx^5 + cx^4 + dx^3 + ex^2 + fx + g\n# degree of f(x) is 6\nprint(6)"
  },
  {
    "example_id": 326,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(20 * 0.5 * 0.8)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.857142857142858"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a, b, c = 14, 15, 12\nage_now = 18\nage_4_years_ago = 14\nage_4_years_from_now = 21\nage_4_years_from_now = a + (b - c) * (age_now - age_4_years_ago) / a\nprint(age_4_years_from_now)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# import the arange function from numpy\nfrom numpy import arange\n\n# Use the arange function to generate the middle term\n# of the arithmetic sequence\nmiddle_term = arange(3,9)[2]\n\n# Print the middle term\nprint(middle_term)"
  },
  {
    "example_id": 329,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "a = -5 + 8\nb = -3 + 8\nc = -5 + 8\nprint(a*b*c)"
  },
  {
    "example_id": 330,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-56.0"
    ],
    "annotated_answers": [
      "-56.0"
    ],
    "solution": "def discriminant(a, b, c):\n    return (b ** 2) - (4 * a * c)\n\nprint(discriminant(2, -8, 15))"
  },
  {
    "example_id": 331,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.15549442140351"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "import math\nx = -6\ny = -15\na = math.sqrt(x**2 + y**2)\nprint(a)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = -3\ny = 3\nprint(abs(y - x))"
  },
  {
    "example_id": 333,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "102.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "A = 6\nB = 17\nAB = A * B\nprint(AB)"
  },
  {
    "example_id": 334,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\n\nf = sympy.Function('f')\nx = sympy.Symbol('x')\nf = 3 * sympy.sqrt(2 * x - 7) - 8\nprint(f.subs(x, 8))"
  },
  {
    "example_id": 335,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nexpr = (9 - 4*x)/(x + 6) - 7\nsolve = sympy.solve(expr)\nprint(solve)"
  },
  {
    "example_id": 336,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "red = 2 * (35 - 2) / 3\nprint(red)"
  },
  {
    "example_id": 337,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "364.0"
    ],
    "solution": "x = 40 - 12\nprint(x)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "65.0"
    ],
    "solution": "volume = 30 * 6.5 / 3\nprint(volume)"
  },
  {
    "example_id": 339,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "127.0",
      "2.0",
      "253.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsol = sympy.solve(sympy.sqrt(63 - sympy.sqrt(x))**2 - x, x)\nprint(sol)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 1 / (2 - (1 / (2 - (1 / (2 - 1)))))\nprint(x)"
  },
  {
    "example_id": 341,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 5\ny = 7\nprint(x * y)"
  },
  {
    "example_id": 342,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "f = sympy.polys.Poly(3*x**4+5*x**2-9*x-2)\ng = f(x-1)\nprint(g.coeffs)"
  },
  {
    "example_id": 343,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4851.0"
    ],
    "annotated_answers": [
      "93.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 99):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "198.0"
    ],
    "annotated_answers": [
      "549.0"
    ],
    "solution": "# The difference between two perfect squares is 99.\n# There are exactly two other perfect squares between them.\n# So, the sum of the two perfect squares on the blackboard is 198.\nprint(198)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    return x + 2\n\ndef g(x):\n    return 1/f(x)\n\nprint(g(f(-3)))"
  },
  {
    "example_id": 346,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "s = 10\nc = 3\np = 5\nq = 45 - (c * s) - p\nprint(q)"
  },
  {
    "example_id": 347,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = y / 2\ny = 4x - 36\n2x = 4x - 36\nx = 12\nprint(x)"
  },
  {
    "example_id": 348,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-2.0",
      "7.0",
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import pprint\nfrom sympy import symbols\n\na, b, c, x = symbols('a b c x')\nf = 2*x/(x**2-5*x-14)\nf.as_numer_denom()\nsolve(f.as_numer_denom()[0], x)\nsolve(f.as_numer_denom()[1], x)\nsolve(f, x)\npprint(solve(f.as_numer_denom()[0], x))\npprint(solve(f.as_numer_denom()[1], x))\npprint(solve(f, x))\n\na + b + c"
  },
  {
    "example_id": 349,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x = 4\ny = 5\nprint(x ** 2 + y ** 2)"
  },
  {
    "example_id": 350,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nf = (x-2)**2 - 9\nf = f/3\nprint(f)"
  },
  {
    "example_id": 351,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsolutions = sympy.solve(x**2 == -abs(x), x)\nprint(len(solutions))"
  },
  {
    "example_id": 352,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "lenny_amount = 35\nlarry_amount = 2/5 * lenny_amount\nprint(lenny_amount - larry_amount)"
  },
  {
    "example_id": 353,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\ndef power(a, b):\n    \"\"\"Calculate a^b.\"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\ndef sum_of_powers(n):\n    \"\"\"Calculate 1^n + 2^n + 5^n.\"\"\"\n    return power(1, n) + power(2, n) + power(5, n)\n\ndef find_x(target):\n    \"\"\"Find the value of x such that 1^x + 2^x + 5^x = target.\"\"\"\n    for x in range(1, 100):\n        if sum_of_powers(x) == target:\n            return x\n    return None\n\nprint(find_x(642))"
  },
  {
    "example_id": 354,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-16384.0"
    ],
    "annotated_answers": [
      "-8192.0"
    ],
    "solution": "a = 2\nb = -2\nn = 14\nprint(a * (b ** (n - 1)))"
  },
  {
    "example_id": 355,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nprint(math.log2(256) / 2)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "149.0",
      "4.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "4.0",
      "3.0",
      "149.0",
      "2.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve, var\n\nx, y = var('x, y')\neq = (2 * x**2 * y**3 + 4 * y**3) - (149 + 3 * x**2)\nsol = solve(eq, (x, y))\nprint(sol)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "total_cost = 12.75\nentry_cost = 2.25\nride_cost = 1.50\nrides = (total_cost - entry_cost) / ride_cost\nprint(rides)"
  },
  {
    "example_id": 358,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "midpoint_x = (1 + (-7)) / 2\nmidpoint_y = (1 + 5) / 2\nprint(midpoint_x * midpoint_y)"
  },
  {
    "example_id": 359,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0",
      "5.0",
      "7.0",
      "5.0",
      "32.0",
      "5.0",
      "-1792.0",
      "125.0"
    ],
    "annotated_answers": [
      "-56.0"
    ],
    "solution": "import sympy as sym\na, b, c = sym.symbols(\"a b c\")\n\n# 3a + b + c = -3\neq1 = 3*a + b + c - 3\n# a+3b+c = 9\neq2 = a + 3*b + c - 9\n# a+b+3c = 19\neq3 = a + b + 3*c - 19\n\n# solve the system of linear equations\nsolution = sym.solve([eq1, eq2, eq3], [a, b, c])\nprint(solution)\n\n# find the value of abc\nprint(solution[a] * solution[b] * solution[c])"
  },
  {
    "example_id": 360,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "total_people = 12 + 3\ndaily_share = 12 / total_people\nprint(daily_share)"
  },
  {
    "example_id": 361,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-128.0"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "from sympy import symbols\n\nk = 16 - 24**2 / 4\nprint(k)"
  },
  {
    "example_id": 362,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "x = 3 * 5\nprint(x)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def between_10_50(x):\n    return 10 <= x**2 + 4*x + 4 <= 50\n\nprint(sum(between_10_50(x) for x in range(1, 100)))"
  },
  {
    "example_id": 364,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "total_miles = 26 + 12 * 2 + 28\nprint(total_miles)"
  },
  {
    "example_id": 365,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "n = 7\nprint(n)"
  },
  {
    "example_id": 366,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-23.0",
      "25.0"
    ],
    "annotated_answers": [
      "-48.0"
    ],
    "solution": "import sympy as sym\nx, y = sym.symbols('x y')\neq1 = 725*x + 727*y - 1500\neq2 = 729*x + 731*y - 1508\n\nsol = sym.solve([eq1, eq2], [x, y])\n\nprint(sol)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "13203.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# To find the number of right triangles\nimport sympy\n\n# Find the number of right triangles with\n# one leg of length 162 and the other leg\n# of length n, where n is a positive integer\n\n# The number of right triangles with\n# one leg of length 162 and the other leg\n# of length n is given by the formula\n# (n * (n + 1)) / 2\n\n# Find the number of right triangles with\n# one leg of length 162 and the other leg\n# of length n, where n is a positive integer\n# and n is less than 162\n\n# The number of right triangles with\n# one leg of length 162 and the other leg\n# of length n is given by the formula\n# (n * (n + 1)) / 2\n\n# Find the number of right triangles with\n# one leg of length 162 and the other leg\n# of length n, where n is a positive integer\n# and n is less than 162\nn = sympy.Symbol('n')\nright_triangles = (n * (n + 1)) / 2\nprint(right_triangles)\n\n# Find the number of right triangles with\n# one leg of length 162 and the other leg\n# of length n, where n is a positive integer\n# and n is less than 162\nn = 162\nright_triangles = (n * (n + 1)) / 2\nprint(right_triangles)"
  },
  {
    "example_id": 368,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def is_negative(x):\n    return 6*x**2 + x - 2 < 0\n\ndef find_greatest_integer(x):\n    return int(x)\n\nfor x in range(100):\n    if is_negative(x):\n        print(find_greatest_integer(x))\n        break"
  },
  {
    "example_id": 369,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "2.0",
      "-4.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\n\nx = sympy.symbols('x')\n\nm = sympy.solve(a*x**2 + b*x + c, x)[0]\nn = sympy.solve(a*x**2 + b*x + c, x)[1]\n\nprint(m-n)"
  },
  {
    "example_id": 370,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "896.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "m = 16\nn = 56\nprint(m*n)"
  },
  {
    "example_id": 371,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "856.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import numpy as np\nx = np.linspace(0, 18, 1000)\nf = 10 * (x - 10) ** 2\ng = 4 * (x - 6) ** 2\nmax_value = np.max(f - g)\nprint(max_value)"
  },
  {
    "example_id": 372,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "horses = 30 / 4\nprint(horses)"
  },
  {
    "example_id": 373,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "11.0",
      "2.0",
      "3.0",
      "2.0",
      "11.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import symbols, solve\nx = symbols('x')\neq1 = x**2 - 5*x + 9\na, b = solve(eq1, x)\nprint((a - 1)*(b - 1))"
  },
  {
    "example_id": 374,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "e = (17 - 8) / 2\nprint(e)"
  },
  {
    "example_id": 375,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7911.5516909047465"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "from math import sqrt\nc = 8001 - sqrt(8001)\nprint(c)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.2928932188134524"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "from math import sqrt\nb = (-2 + sqrt(2)) / 2\nprint(b)"
  },
  {
    "example_id": 377,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "x = 2\ny = -3\nexpression = (x*y)**5 / (y**3)\nprint(expression)"
  },
  {
    "example_id": 378,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "n = 26\nwhile sum(range(-25, n + 1)) < 26:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 379,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "f = lambda x: (x-1)*(x-3)*(x-7)*(x-9)\nprint(f(6) - f(4))"
  },
  {
    "example_id": 380,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13060.031454591659"
    ],
    "annotated_answers": [
      "10455.0"
    ],
    "solution": "# Compute the amount in the first CD\nannual_interest_rate = 0.04\nnumber_of_semi_annual_compounding = 2\nsemi_annual_compounding_period = 6\ninitial_amount = 10000\namount_in_first_cd = initial_amount * (1 + annual_interest_rate/number_of_semi_annual_compounding)**(semi_annual_compounding_period)\n\n# Compute the amount in the second CD\nannual_interest_rate = 0.05\nnumber_of_semi_annual_compounding = 2\nsemi_annual_compounding_period = 6\namount_in_second_cd = amount_in_first_cd * (1 + annual_interest_rate/number_of_semi_annual_compounding)**(semi_annual_compounding_period)\n\nprint(amount_in_second_cd)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0",
      "15.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "from sympy import sympify, expand\n\nexpression = sympify('sqrt(12)*sqrt(20)*sqrt(15)*sqrt(60)')\nprint(expand(expression))"
  },
  {
    "example_id": 382,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "7.0",
      "1.0",
      "2.0",
      "4.0",
      "7.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import symbols\nfrom sympy import solve\n\nx, y = symbols('x y')\nexpr = x**2 + y**2 + 2*x - 4*y + 8\nsol = solve(expr, x)\nprint(sol)"
  },
  {
    "example_id": 383,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from math import sqrt\n\nfor x in range(1, 1000):\n    if sqrt(120 - sqrt(x)) % 1 == 0:\n        print(x)"
  },
  {
    "example_id": 384,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.833333333333334"
    ],
    "annotated_answers": [
      "-23.5"
    ],
    "solution": "x_intercept_1 = -7 / 3\nx_intercept_2 = -5 / 2\nprint(x_intercept_1 + x_intercept_2)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0",
      "13.0",
      "23.0",
      "13.0",
      "67.0",
      "13.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy as sym\nx, y, z = sym.symbols('x y z')\neq1 = sym.Eq(3*x+y, 17)\neq2 = sym.Eq(5*y+z, 14)\neq3 = sym.Eq(3*x+5*z, 41)\nsol = sym.solve([eq1, eq2, eq3], [x, y, z])\nprint(sol)"
  },
  {
    "example_id": 386,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "import numpy as np\n\nx = np.linspace(0, 120, 100)\ny = 1.5 * x\n\n# Find the point (x,y) that passes through (20,30)\n# and (70,105)\n\n# Find the slope of the line passing through (20,30) and (70,105)\nm = (105 - 30) / (70 - 20)\n\n# Find the y-intercept\nb = 30 - m * 20\n\n# Find the x-intercept\nx_intercept = -b / m\n\n# Find the distance Caroline walks in one hour\ndistance_in_one_hour = x_intercept\n\nprint(distance_in_one_hour)"
  },
  {
    "example_id": 387,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import Mul\n\nx = Mul(4/3, 6/4, 8/5, 10/6, 12/7, 14/8)\nprint(x)"
  },
  {
    "example_id": 388,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "def psi(a, b):\n    return 2*a + 5*b\n\nprint(psi(psi(3, psi(1, 0)), 0))"
  },
  {
    "example_id": 389,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import sqrt\n\np = q = 1 - sqrt(2) / 2\nprint((p + 1) * (q + 1))"
  },
  {
    "example_id": 390,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def get_average(a, b):\n    return (a + b) / 2\n\ndef get_average_of_averages(a, b, c):\n    return get_average(get_average(a, b), c)\n\nprint(get_average_of_averages(3, 5, 8))"
  },
  {
    "example_id": 391,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x, y')\ncond = (1/x + 1/y == 1/7)\nsol = sympy.solve(cond, [x, y])\nsum = 0\nfor s in sol:\n    sum += s[0]\nprint(sum)"
  },
  {
    "example_id": 392,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sym\n\na = sym.Symbol('a')\np = 4+2*sym.sqrt(a+2)\ng = 4-3*a\n\nprint(p.subs(g, a))"
  },
  {
    "example_id": 393,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\n\n# 2x - 9y = 14\neq1 = 2 * x - 9 * y - 14\n\n# 6x = 42 + y\neq2 = 6 * x - y - 42\n\n# Solve for x and y\nsol = sympy.solve((eq1, eq2), (x, y))\n\n# xy\nxy = sol[x] * sol[y]\nprint(xy)"
  },
  {
    "example_id": 394,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpr1 = (x**2 - 4*x + 3) * (x + 5)\nexpr2 = (x**2 + 4*x - 5) * (x - c)\nexpr1 - expr2"
  },
  {
    "example_id": 395,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "result = 2 ** 10 - 2 ** 8\nresult /= 2 ** 7 - 2 ** 6\nprint(result)"
  },
  {
    "example_id": 396,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.75"
    ],
    "annotated_answers": [
      "2.5"
    ],
    "solution": "n = ((1+4)*(1-4))/4\nprint(n)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6666666666666666"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "d = 2 * 20 - 9 * 4\nd /= 6\nprint(d)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.01498731494091253"
    ],
    "annotated_answers": [
      "0.015"
    ],
    "solution": "series = [3/206]\nn = 1\nwhile True:\n    term = 9/(2*103**(2*n))\n    series.append(term)\n    if term < 1e-10:\n        break\n    n += 1\nprint(sum(series))"
  },
  {
    "example_id": 400,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "560.0",
      "53.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\ny = -265 * x + 2800\n\nprint(sympy.solve(y, x)[0])"
  },
  {
    "example_id": 401,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "a = 27 - 18\nb = 18\nprint(a + b)"
  },
  {
    "example_id": 402,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "peppermint_candies = 15 - 8\nlemon_candies = 2 * (8 - peppermint_candies)\nprint(lemon_candies)"
  },
  {
    "example_id": 403,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from sympy import ceiling, sqrt\n\nx = sqrt(-25)\nprint(ceiling(x))"
  },
  {
    "example_id": 404,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(h(-1))"
  },
  {
    "example_id": 405,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "a = 2\nb = 9\nc = 4\n\nprint(a + b + c)"
  },
  {
    "example_id": 406,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "46.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    if x % 2 == 1:\n        return 3 * x + 1\n    else:\n        return x / 2\n\na = 14\nb = 15\n\nprint(f(a))\nprint(f(b))"
  },
  {
    "example_id": 407,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy import collect\nfrom sympy import Poly\n\n# simplified = simplify((7+8x)-3(2+6x+2x^2)+9(1+3x+4x^2+12x^3)-9(7-x^2-8x^3+13x^4))\n# simplified = collect(simplified, x)\n# coeff = Poly(simplified, x).coeffs()\n# print(coeff)"
  },
  {
    "example_id": 408,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1 + 7\nprint(x)"
  },
  {
    "example_id": 409,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\n\ny = sympy.Symbol('y')\nx = sympy.Symbol('x')\n\nf = y / (x**2 + x - 6)\n\nprint(f.as_numer_denom()[1])"
  },
  {
    "example_id": 410,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print((3-4)**2 + 2*(3+4))"
  },
  {
    "example_id": 411,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def quadratic(x):\n    return x**2 - 7*x + 7\n\ndef line(x):\n    return -3\n\ndef find_intersections(f, g):\n    x = 0\n    while True:\n        y_f = f(x)\n        y_g = g(x)\n        if y_f * y_g < 0:\n            return x\n        x += 1\n\nx_1 = find_intersections(quadratic, line)\nx_2 = find_intersections(line, quadratic)\nprint(x_1 + x_2)"
  },
  {
    "example_id": 412,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "112.0"
    ],
    "solution": "# A = 2/1 + 2/1\n# B = 3/2 - 3/2\n# C = 1 - 1\nA = 2/1 + 2/1\nB = 3/2 - 3/2\nC = 1 - 1\nA + B + C"
  },
  {
    "example_id": 413,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "588.0"
    ],
    "annotated_answers": [
      "630.0"
    ],
    "solution": "# sum of first 20 positive multiples of 5\nmultiples = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\nsum_of_multiples = sum(multiples)\n\n# sum of first 20 positive, even integers\neven_integers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42]\nsum_of_integers = sum(even_integers)\n\n# positive difference between the two sums\npositive_difference = sum_of_multiples - sum_of_integers\nprint(positive_difference)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0",
      "0.0",
      "15.0",
      "0.0"
    ],
    "annotated_answers": [
      "16384.0"
    ],
    "solution": "for k in range(-100, 100):\n    # check if k is a root\n    if (k + 15)**2 + k * (k + 15) == 0:\n        a = -k - 15\n        b = -k\n        print(k, a, b, a * b)"
  },
  {
    "example_id": 415,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\nprint(math.sqrt((1-(-4))**2+(13-1)**2))"
  },
  {
    "example_id": 416,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "square_numbers = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\nfor num in range(1, 11):\n    if num not in square_numbers:\n        print(num)\n        break"
  },
  {
    "example_id": 417,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "632791.378319676"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Using the toolbox\nfrom math import sqrt\nfrom sympy import simplify\n\nx = 35 / 3\n\nresult = simplify(sqrt(x) * (12 / x ** 2) * (x ** 4 / 14 * x) * (35 / 3 * x))\nprint(result)"
  },
  {
    "example_id": 418,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 1/4\nb = 1 - a * 2\ny = a * 6 + b\nprint(y)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\nf = sympy.Function('f')(x)\ng = f + x\nh = f + sympy.Symbol('b') * x\n\na = g.as_expr().limit(x, sympy.oo).simplify()\nb = h.as_expr().limit(x, sympy.oo).simplify()\n\nprint(a**2 + b**2)"
  },
  {
    "example_id": 420,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = 0\nn = 0\nwhile m > n:\n    x1 = -sqrt(m)\n    y1 = x1**4\n    x2 = sqrt(m)\n    y2 = x2**4\n    x3 = -sqrt(n)\n    y3 = 5*x3**2 - 6\n    x4 = sqrt(n)\n    y4 = 5*x4**2 - 6\n    if (y1-y3) * (y2-y3) < 0:\n        m = m + 1\n    else:\n        n = n + 1\nprint(m-n)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0",
      "18.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(3**4 - 3**3)\nprint(3**3 - 3**2)\nprint((3**4 - 3**3) / (3**3 - 3**2))"
  },
  {
    "example_id": 422,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "9.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nprint(sympy.simplify(sympy.simplify(x/(x**2-9))))"
  },
  {
    "example_id": 423,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(3 * (6 * 8))"
  },
  {
    "example_id": 424,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x = 1\ny = 2\nprint(abs(x - y))"
  },
  {
    "example_id": 425,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.0",
      "-70.0",
      "-140.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 3\na = -13\nb = 1\n\nprint(2 * z ** 2 + 13 * z + 21)\nprint((z + a) * (2 * z + b))\n\n# check\nprint(2 * (z + a) * (2 * z + b))"
  },
  {
    "example_id": 426,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    if x <= 3:\n        return 9 - 2 * x\n    else:\n        return a * x + b\n\n# solve for a and b\na = f(f(3)) - 3\nb = f(3) - 3\nprint(a + b)"
  },
  {
    "example_id": 427,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def parabola(a, b, c, x):\n    return a*x*x + b*x + c\n\na = parabola(1, 0, 0, 1)\nb = parabola(1, 0, 0, 0)\nc = parabola(1, 0, 0, -1)\nprint(a+b+c)"
  },
  {
    "example_id": 428,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "36.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "slope = (8-0) / (7-9)\ny_intercept = 8 - slope * 7\nprint(slope, y_intercept)"
  },
  {
    "example_id": 429,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "smallest = 14\nlargest = smallest + 14\nhalf_smallest = smallest / 2\nsum = half_smallest + smallest + largest\nprint(sum)"
  },
  {
    "example_id": 430,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "for n in range(21):\n    try:\n        print(len(str(n)))\n    except:\n        pass"
  },
  {
    "example_id": 431,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "77.0",
      "10.0",
      "9.0",
      "149.0",
      "10.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nexpr = sympy.sqrt(12*x + 12)*sympy.sqrt(3*x - 6) - 4*x - 34\nsolution = sympy.solve(expr, x)\nprint(solution)"
  },
  {
    "example_id": 432,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Find the smallest value\nx = 3\nprint(x**2 - 6*x + 13)"
  },
  {
    "example_id": 433,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "m = -2\nn = -12\nprint(m+n)"
  },
  {
    "example_id": 434,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "10.0",
      "4.0",
      "10.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x, y')\n\ncircle_eq = (x ** 2) - 4 * x + (y ** 2) - 6 * y - 36\n\ncircle_eq_dict = sympy.solve(circle_eq)\n\nprint(circle_eq_dict)"
  },
  {
    "example_id": 435,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "f = lambda x: 2*x-3\ng = lambda x: x+1\nprint(g(f(5)-1))"
  },
  {
    "example_id": 436,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "from sympy import primefactors\nprint(primefactors(9951)[-1])"
  },
  {
    "example_id": 437,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0",
      "3.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from sympy import symbols, solve\nx = symbols('x')\nexpr = 3*x**2 + 14*x + 8\nA, B = solve(expr, x)\nprint(A - B)"
  },
  {
    "example_id": 438,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "409.97732426303855"
    ],
    "annotated_answers": [
      "228.3"
    ],
    "solution": "height_now = 452\nheight_then = height_now / (1 + 5/100) ** 2\nprint(height_then)"
  },
  {
    "example_id": 439,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import S\nfrom sympy.abc import x\n\nf = S(1)/(x - 64) + S(1)/(x**2 - 64) + S(1)/(x**3 - 64)\n\nreal_numbers = []\nfor i in range(100):\n    x = i + 64\n    if f.subs(x, x).is_real == False:\n        real_numbers.append(x)\n\nprint(len(real_numbers))"
  },
  {
    "example_id": 440,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "def sum_first_five_odd_integers():\n    sum = 0\n    for i in range(1, 5, 2):\n        sum += i\n    return sum\n\nprint(sum_first_five_odd_integers())"
  },
  {
    "example_id": 441,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import symbols, expand, sqrt, simplify\nx, y, z = symbols('x y z')\ndenom = (y - z) * (z - x) * (x - y) * (y - x)\nexpr = (y - x)**2 / denom + (z - y)**2 / denom + (x - z)**2 / denom\nprint(simplify(expand(expr)))"
  },
  {
    "example_id": 442,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "A = 9\nB = 2 * 3 * 3\nC = 3\n\nA_plus_B_plus_C = A + B + C\nprint(A_plus_B_plus_C)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "10.0",
      "7.0",
      "812.0",
      "3.0",
      "2.0",
      "10.0",
      "7.0",
      "35.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import solve, var\n\n# define variables\nx, y, z = var('x y z')\n\n# define the equation\neq = 6*x*y*z + 30*x*y + 21*x*z + 2*y*z + 105*x + 10*y + 7*z - 812\n\n# solve for x, y, z\nsol = solve(eq, [x, y, z])\n\n# print the solution\nprint(sol)"
  },
  {
    "example_id": 444,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "217.0"
    ],
    "solution": "x = 3\ny = 4\nprint(x**2-y**2)"
  },
  {
    "example_id": 445,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "if 11 > 25 - 11:\n    print(25)\nelse:\n    print(25 - 11)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "import numpy as np\n\n# count the lattice points on the boundary of the region\nboundary_points = np.array([[x, np.abs(x)] for x in range(41)])\n\n# count the lattice points inside the region\ninside_points = np.array([[x, -x**2 + 35/4] for x in range(1, 41)])\n\nprint(len(boundary_points) + len(inside_points))"
  },
  {
    "example_id": 447,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def star(a, b):\n    return (a + b) * b\n\nprint(star(3, 5) - star(5, 3))"
  },
  {
    "example_id": 448,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x_min = -18 / 9\nprint(x_min)"
  },
  {
    "example_id": 449,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "1.0",
      "3.0",
      "4.0",
      "2.0",
      "10.0",
      "10.0",
      "3.3333333333333335",
      "2.5",
      "5.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# Anna's time\na = 1\n# Bertram's time\nb = 3\n# Carli's time\nc = 4\n# David's time\nd = 2\n\n# Total time\ntotal = a + b + c + d\n\n# Anna can hold her breath for 4 minutes\nprint(4)\n\n# Anna's time\nprint(a)\n\n# Bertram's time\nprint(b)\n\n# Carli's time\nprint(c)\n\n# David's time\nprint(d)\n\n# Total time\nprint(total)\n\n# Total time = 3 times the length of time that Anna can hold her breath\nprint(total / a)\n\n# Total time = 4 times Bertram's time period\nprint(total / b)\n\n# Total time = 2 times Carli's time\nprint(total / c)\n\n# Total time = 2 fifths of an hour\nprint(total / d)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import Symbol, Eq, solve\n\nx = Symbol('x')\nb = Symbol('b')\nc = Symbol('c')\n\nsol = solve(Eq(x**2 + b*x + c, 0), x)\n\nprint(sol)\n\nb_plus_c = sol[0] + sol[1]\n\nprint(b_plus_c)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import sqrt\n\ndef f(x):\n    if x >= 0:\n        return -sqrt(x)\n    else:\n        return x**2\n\nprint(f(f(f(f(512)))))"
  },
  {
    "example_id": 452,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import sympy\nA, B, C = sympy.symbols('A B C')\nx, y = sympy.symbols('x y')\nr = sympy.sqrt(A*x**2 + 2*y**2 + B*x + C*y)\nprint(A+B+C+r)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "from sympy import sqrt\nprint(sqrt(5**5 + 5**5 + 5**5 + 5**5 + 5**5))"
  },
  {
    "example_id": 454,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "john_age = 27\nfather_age = 27 + john_age\nprint(father_age)"
  },
  {
    "example_id": 455,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 1:\n        return n ** 2 + 1\n    else:\n        return n ** 2 - 3 * n + 1\n\ndef g(n):\n    return f(f(f(f(f(f(n))))))\n\nprint(g(2))"
  },
  {
    "example_id": 456,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "14.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import sqrt, simplify\n\nx = (1 / (sqrt(2) + sqrt(8) + sqrt(32)))\n\nprint(simplify(x))"
  },
  {
    "example_id": 457,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import sqrt, simplify\na = 3/sqrt(16) + 1/sqrt(3)\na = simplify(a)\nprint(a)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx = sympy.log(3/4) / sympy.log(81/256)\nprint(x)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import simplify\nexpr = (1+2*x)-2*(1+2*x+3*x**2)+3*(1+2*x+3*x**2+4*x**3)-4*(1+2*x+3*x**2+4*x**3+5*x**4)\nprint(simplify(expr).coeff(x))"
  },
  {
    "example_id": 460,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-1.0",
      "-1.0",
      "0.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\n\nf = sympy.Matrix([[0, 0, 1, 3, 6]])\ng = f - sympy.Matrix([[0, 1, 2, 3, 4]])\n\nprint(g)"
  },
  {
    "example_id": 461,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "208.0"
    ],
    "solution": "a = 5\nb = 4\nc = 2\nd = 3\ne = 1\nf = 2\ng = 3\nh = 4\ni = 5\nj = 6\nk = 7\nl = 8\nm = 9\nn = 10\no = 11\np = 12\nq = 13\nr = 14\ns = 15\nt = 16\nu = 17\nv = 18\nw = 19\nx = 20\ny = 21\nz = 22\n\n\ndef max_candies(a, b):\n    candies = a * b\n    leftover = 2 * a + b\n    return candies - leftover\n\n\nprint(max_candies(a, b))"
  },
  {
    "example_id": 462,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 6\nprint(n)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2 - 3\nprint(x)"
  },
  {
    "example_id": 464,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "max_value = 4 * 2 * 7\nprint(max_value)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "total_chimes = 24\nprint(total_chimes)"
  },
  {
    "example_id": 466,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "def f(x):\n    if x == 3:\n        return 5\n    else:\n        return f(x/3) + 2\n\ndef f_inv(y):\n    if y == 5:\n        return 3\n    else:\n        return f_inv(y - 2) / 3\n\nprint(f_inv(11))"
  },
  {
    "example_id": 467,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15333.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nprint(sum(f(f(i)) for i in range(1,10)))"
  },
  {
    "example_id": 468,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(8*6**2 - 3*11)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import sqrt, simplify, pprint\n\ndef f(x):\n    return sqrt(2*x-6)/(x-3)\n\nx = 3\n\nprint(f(x))"
  },
  {
    "example_id": 470,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x = 2 + 4\nprint(x)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "a = 33 - 14\nb = 14\nprint(a+b)"
  },
  {
    "example_id": 473,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from sympy import sqrt\n\nx = 5\ny = 2\n\nprint(sqrt(x**3 - 2**y))"
  },
  {
    "example_id": 474,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0",
      "2.0",
      "57.0",
      "2.0",
      "2.0",
      "57.0",
      "2.0",
      "7.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\np = x**2 + 7*x - 2\nalpha, beta = solve(p, x)\nprint(alpha**2 + beta**2)"
  },
  {
    "example_id": 475,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(5*1+4)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15554.0"
    ],
    "annotated_answers": [
      "15554.0"
    ],
    "solution": "def sum_sixth_seventh(n):\n    \"\"\"\n    n: the number of terms of the sequence\n    returns: the sum of the sixth and seventh terms of the sequence\n    \"\"\"\n    sixth = 2222 + (1010 * 5)\n    seventh = 2222 + (1010 * 6)\n    return sixth + seventh\nprint(sum_sixth_seventh(7))"
  },
  {
    "example_id": 477,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x_coord = (7-6) / (4-3)\nprint(x_coord)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3600.0"
    ],
    "annotated_answers": [
      "3600.0"
    ],
    "solution": "change_in_area = 3491 * 3491 - (3491 - 60) * (3491 + 60)\nprint(change_in_area)"
  },
  {
    "example_id": 479,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "7.0",
      "2.0",
      "89.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nx = Symbol('x')\ny1 = x**4\ny2 = 7*x**2 - 10\n\neq1 = y1 - y2\neq2 = y1 + y2\n\nm = solve(eq1, x)[0]\nn = solve(eq2, x)[0]\n\nprint(m - n)"
  },
  {
    "example_id": 480,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print((15 + 5) * (15 - 5))"
  },
  {
    "example_id": 481,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "f = lambda x: 2/(x+1)\nf_inv = lambda y: 1/y - 1\nprint(f_inv(1/5))"
  },
  {
    "example_id": 482,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "9.0",
      "3.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import symbols\nx, y = symbols('x y')\nsol = solve(x**2 + 6*x + y**2 + 8*y, x, y)\nprint(sol[0][0] + sol[0][1])"
  },
  {
    "example_id": 483,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.8333333333333333"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 4\ny = 3\nprint((2*x+y)/(3*x-2*y))"
  },
  {
    "example_id": 484,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef lcm_list(numbers):\n    result = 1\n    for x in numbers:\n        result = lcm(result, x)\n    return result\n\ndef lcm_product(a, b):\n    return lcm_list([a, b])\n\nprint(lcm_product(5, 5))"
  },
  {
    "example_id": 485,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(int(abs(23/9)))"
  },
  {
    "example_id": 486,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.666666666666664",
      "37.33333333333333"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "smaller = 7 / (7 + 14) * 56\nlarger = 14 / (7 + 14) * 56\nprint(smaller)\nprint(larger)"
  },
  {
    "example_id": 487,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = int(round(2 * 1.5))\nb = int(round(2 * 2.5))\nprint(b-a)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def g(x):\n    return 2*x - 1\n\ndef f(x):\n    return g(g(x)) - g(x)\n\nprint(f(3))"
  },
  {
    "example_id": 489,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.333333333333333"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "d = 8 / 9 * 6\nprint(d)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "12.0",
      "13.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 4\nwhile n < 200:\n    print(n)\n    n = n + 1"
  },
  {
    "example_id": 491,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.384615384615385"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "years_to_recoup = 10000 / 650\nprint(years_to_recoup)"
  },
  {
    "example_id": 492,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\nx1, y1, x2, y2 = sympy.symbols('x1 y1 x2 y2')\nmidpoint_x = (x1 + x2) / 2\nmidpoint_y = (y1 + y2) / 2\nprint(midpoint_x, midpoint_y)"
  },
  {
    "example_id": 493,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nprint(a+b+c)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0",
      "2.0",
      "19.0",
      "38.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpr = 24*x**2 - 19*x - 35\nAB = expr.as_numer_denom()[0]\nC = expr.as_numer_denom()[1]\nprint(AB - 3*C)"
  },
  {
    "example_id": 495,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0",
      "3.0",
      "8.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import sympy as sp\nx, y, z = sp.symbols('x y z')\na, b = sp.symbols('a b', real=True)\neq1 = 3*x + 4*y - 12*z - 10\neq2 = -2*x - 3*y + 9*z + 4\nsol = sp.solve([eq1, eq2], [x, y, z])\nprint(sol)"
  },
  {
    "example_id": 496,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\nprint(sympy.log(64*8**(1/2), 8**(1/2)))"
  },
  {
    "example_id": 497,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-31.0"
    ],
    "annotated_answers": [
      "-13.5"
    ],
    "solution": "p = -14\nq = -17\nprint(p + q)"
  },
  {
    "example_id": 498,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "n_points = 3 + 3 + 3 + 3\nprint(n_points)"
  },
  {
    "example_id": 499,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-75.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = -2\nd = -20\ne = -53\nprint(a+d+e)"
  },
  {
    "example_id": 500,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.9999714285714285"
    ],
    "annotated_answers": [
      "-6.5"
    ],
    "solution": "a = 2000 / 7 * 10**-7\nb = -7\nprint(a+b)"
  },
  {
    "example_id": 501,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "for i in range(100, 9999):\n    for j in range(i-1, 9999):\n        if i * j == 10000:\n            print(i * j)\n            break"
  },
  {
    "example_id": 502,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nprint(sympy.solve(x + 1 / x - 1, x - 2 / x + 2))"
  },
  {
    "example_id": 503,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "129600.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "volume = 30 * 180 * 24\nprint(volume)"
  },
  {
    "example_id": 504,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.23606797749979",
      "8.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "from math import sqrt\n\nn = 5\nm = 3\nb = m + sqrt(n)\n\nprint(b)\nprint(m + n)"
  },
  {
    "example_id": 505,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "num_people_3 = 5 * 3 / 12\nprint(num_people_3)"
  },
  {
    "example_id": 506,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "meals_ordered = 18 / 12\nprint(meals_ordered)"
  },
  {
    "example_id": 507,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "3.2"
    ],
    "solution": "def f(x):\n    return 2 * x + 2\n\nprint(f(10))"
  },
  {
    "example_id": 508,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "x = 2\ny = 3\nprint(x)"
  },
  {
    "example_id": 509,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1024.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "f = lambda x: x**3\nf_inv = lambda y: y**(1/3)\n\nprint(f_inv(8)/(f(8))**(-1))"
  },
  {
    "example_id": 510,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.414213564213564"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 2 + (1/(2 + (1/(2 + (1/(2 + (1/(2 + (1/(2 + (1/(2 + (1/(2 + (1/(2 + (1/(2 + (1/(2 + (1/2)))))))))))))))))))))\nprint(x)"
  },
  {
    "example_id": 511,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from math import ceil, sqrt\nprint(ceil(sqrt(20)) ** 2)"
  },
  {
    "example_id": 512,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    return 5*x**2 + 3*x + 4\nprint(f(-2))"
  },
  {
    "example_id": 513,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "pct_120 = 1.2\npct_130 = 1.3\nval_30 = 30\nval_20 = 20\n\nres = pct_130 * val_20 - pct_120 * val_30\nprint(res)"
  },
  {
    "example_id": 514,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "print((13+5)*(13-5))"
  },
  {
    "example_id": 515,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "-2.0",
      "-3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = -1\nwhile n > -10:\n    if n ** 4 - 100 < 0 and n < 0:\n        print(n)\n    n -= 1"
  },
  {
    "example_id": 516,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import sqrt\n\ndenominator = 1 + sqrt(2) - sqrt(3)\ndenominator = denominator.cancel()\n\nprint(denominator)"
  },
  {
    "example_id": 517,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "for x in range(1, 10):\n    if x**2 + 6**2 == 10**2:\n        print(x)"
  },
  {
    "example_id": 518,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import symbols\nx = symbols('x')\ny1 = x**2 + 2*x + 7\ny2 = 6*x + b\nsolve(y1 - y2, b)"
  },
  {
    "example_id": 519,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "y_intercept = -2\nprint(y_intercept)"
  },
  {
    "example_id": 520,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "area = 4 * (1.5 - 1.5**2)\nprint(area)"
  },
  {
    "example_id": 521,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "for x in range(-7, 7):\n    if abs(x) + 1 > 7:\n        print(x)"
  },
  {
    "example_id": 522,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7\nprint(x)"
  },
  {
    "example_id": 523,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1083.2142857142858"
    ],
    "annotated_answers": [
      "2300.0"
    ],
    "solution": "x_feathers = 932 / 8\ny_feathers = 1402 / 14\nz_feathers = x_feathers + y_feathers\ncost_feathers = 5 * z_feathers\nprint(cost_feathers)"
  },
  {
    "example_id": 524,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-5, 5)\ny = x**2 - 8*x + 5\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Equilateral triangle')\nplt.show()\n\nk = -y[0]/x[0]\nprint(k)"
  },
  {
    "example_id": 525,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# 1st 8 odd counting numbers\n# 1, 3, 5, 7, 9, 11, 13, 15\n\n# sum of first 8 odd counting numbers\n# 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 = 55\n\n# sum of 5 consecutive even integers\n# 2, 4, 6, 8, 10\n# 2 + 4 + 6 + 8 + 10 = 28\n\n# 4 less than the sum of the first 8 consecutive odd counting numbers\n# 55 - 4 = 51\n\n# 51 - 28 = 23\n\n# smallest even integer\n# 2\nprint(2)"
  },
  {
    "example_id": 526,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 3\ny = 2\nexpression = 2 * x ** 3 - 3 * y ** 2\nprint(expression / 6)"
  },
  {
    "example_id": 527,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "158.0"
    ],
    "solution": "from math import sqrt\nx = 7\ny = sqrt(19)\nprint(x**2 + y**2)"
  },
  {
    "example_id": 528,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "number_of_oranges = 300 / 40\nprint(number_of_oranges)"
  },
  {
    "example_id": 529,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5",
      "-0.25",
      "0.25"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = (7 + 8) / 2\nb = (7 - a) / 2\nc = (8 - a) / 2\nprint(a, b, c)"
  },
  {
    "example_id": 530,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = -2\nb = 4\nc = 5\nh = -1\nk = c + a * (h - h)^2\nprint(k)"
  },
  {
    "example_id": 531,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0",
      "-120.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sp\nimport numpy as np\n\n# midpoint\nmidpoint = (1 + 19) / 2, (2 + 4) / 2\n\n# slope\nslope = (4 - 7) / (19 - 1)\n\n# perpendicular slope\nperpendicular_slope = -1 / slope\n\n# y-intercept\ny_intercept = -perpendicular_slope * 20\n\n# point on line\npoint = 20, y_intercept\n\nprint(point)"
  },
  {
    "example_id": 532,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = int((255/512)**(1/3))\nprint(n)"
  },
  {
    "example_id": 533,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "800000.0"
    ],
    "annotated_answers": [
      "800000.0"
    ],
    "solution": "print(1002**2-502**2+298**2-202**2)"
  },
  {
    "example_id": 534,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0",
      "19.0",
      "24.0",
      "5928.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "import sympy as sp\nx, y, z = sp.symbols('x y z')\neqns = [\n    x + y - z - 8,\n    x - y + z - 18,\n    -x + y + z - 30\n]\nsol = sp.solve(eqns)\nprint(sol)\nprint(sol[x] * sol[y] * sol[z])"
  },
  {
    "example_id": 535,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for m in range(1, 100):\n    term = 1\n    for _ in range(100):\n        term *= m / 7\n        if term <= 0:\n            break\n    else:\n        print(m)"
  },
  {
    "example_id": 536,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "m = 3\nn = 7\np = 2\n\nprint(m + n + p)"
  },
  {
    "example_id": 537,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "runner_a_portion = 100 / 5\nrunner_b_portion = runner_a_portion * 1.5\nrunner_c_portion = runner_a_portion * 2\nrunner_d_portion = runner_a_portion * 2\nrunner_e_portion = 10\n\nprint(runner_b_portion)"
  },
  {
    "example_id": 538,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40000.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "area = 200 * 200\nprint(area)"
  },
  {
    "example_id": 539,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy import ceiling\nprint(ceiling(-sqrt(23)))"
  },
  {
    "example_id": 540,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def f(x):\n    if x >= 3:\n        return 2*x - 5\n    else:\n        return -x + 5\n\ndef f2(x):\n    return f(f(x))\n\nprint([x for x in range(6) if f2(x) == 3])"
  },
  {
    "example_id": 541,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1023.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "n = 1\nwhile True:\n    n += 2\n    if (n**2 - (n-2)**2) == 128:\n        print(n* (n-2))\n        break"
  },
  {
    "example_id": 542,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 1\nwhile n * 987 < 1000:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 543,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import log\n\nn = int(log(9**18, 27**24))\nprint(n)"
  },
  {
    "example_id": 544,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "5.0",
      "5.0",
      "12.0",
      "13.0",
      "7.0",
      "24.0",
      "25.0",
      "9.0",
      "40.0",
      "41.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import math\n\nperimeter = 60\na = 1\nwhile a < perimeter:\n    b = a + 1\n    while b < perimeter:\n        c = b + 1\n        if a**2 + b**2 == c**2:\n            print(a, b, c)\n        b += 1\n    a += 1"
  },
  {
    "example_id": 545,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "print(4 * 3)"
  },
  {
    "example_id": 546,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "total = 75\nnumber_of_dimes = 11\nnumber_of_nickels = 11 - total // 10\nprint(number_of_nickels)"
  },
  {
    "example_id": 547,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "largest = 185 - 20\nprint(largest)"
  },
  {
    "example_id": 548,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 1:\n        return n**2\n    else:\n        return n**2 - 4*n - 1\n\ndef g(n):\n    return f(f(f(f(n))))\n\nprint(g(4))"
  },
  {
    "example_id": 549,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.2"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# round down to the nearest integer\nfloor_11_1 = 11.1\nfloor_0_5_11_1 = 0.5 * floor_11_1\nprint(floor_11_1 + 2 * floor_0_5_11_1)"
  },
  {
    "example_id": 550,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.721347520444482",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.log(4, 64 ** (1 / 3))\nprint(x)"
  },
  {
    "example_id": 551,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\n\ndef g(x):\n    return sqrt(x)\n\ndef t(x):\n    return 3 - g(x)\n\nprint(t(g(16)))"
  },
  {
    "example_id": 552,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 553,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "-3.0",
      "-4.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import S\nfrom sympy import Sum\nfrom sympy import Symbol\nfrom sympy import Add\nfrom sympy import Mul\nfrom sympy import Pow\nfrom sympy import factorial\nfrom sympy import expand_mul\nfrom sympy import collect\n\nx = Symbol('x')\nf = Add(\n    Mul(1, Pow(x, -2)),\n    Mul(1, Pow(x, -3)),\n    Mul(1, Pow(x, -4))\n)\n\nsummation = Sum(f, (x, 1, S.Infinity))\nprint(summation)"
  },
  {
    "example_id": 554,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import ceil, floor, sqrt\n\nprint(ceil(sqrt(10)) + floor(sqrt(10)))"
  },
  {
    "example_id": 555,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4000.0"
    ],
    "annotated_answers": [
      "4000.0"
    ],
    "solution": "num_drip = 1000 / 0.25\nprint(num_drip)"
  },
  {
    "example_id": 556,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# There are 5 fewer quarters in the first pile than the second pile\n# The second pile has 4 more quarters than the third pile\n# The fourth pile has 3 times as many quarters as the second pile\nquarters_in_second_pile = 4\nquarters_in_third_pile = 3\nquarters_in_fourth_pile = 3 * quarters_in_second_pile\nprint(quarters_in_fourth_pile)"
  },
  {
    "example_id": 557,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "680.0"
    ],
    "annotated_answers": [
      "368.0"
    ],
    "solution": "power = 500 * 1.36\nprint(power)"
  },
  {
    "example_id": 558,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "triangle = diamond = clubsuit = 0\nsquare = 1\n\n# Solve the system of equations\nfor i in range(3):\n    triangle += square\n    diamond += square\n    clubsuit += square\n    triangle += diamond\n    square += 1\n\nprint(square)"
  },
  {
    "example_id": 559,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "f = lambda x: x**2 - 1\ng = lambda x: x + 7\n\nprint(f(g(7)) + g(f(3)))"
  },
  {
    "example_id": 560,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0",
      "58.0",
      "1949.0",
      "58.0",
      "37.0",
      "58.0",
      "1949.0",
      "58.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = x * (3 * x - 4)\ninequality = expression <= (x ** 2 - 3 * x + 5) / 10\nprint(sympy.solve(inequality))"
  },
  {
    "example_id": 561,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\ny = x**2 - 8*x - 33\n\nsolution = sympy.solve(y, x)\nprint(solution)"
  },
  {
    "example_id": 562,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.75"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Josh rides at 2/5 of Mike's rate\njosh_rate = 2/5\nmike_rate = 1\n\n# Josh has ridden for twice the length of time as Mike\njosh_length = mike_rate / josh_rate\n\n# How many miles had Mike ridden when they met?\nmike_length = josh_length / josh_rate\n\n# Add up the lengths\ntotal_length = mike_length + josh_length\n\n# Print the answer\nprint(total_length)"
  },
  {
    "example_id": 563,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(int(pow(pow(7/4, 2), 2)))"
  },
  {
    "example_id": 564,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "920.25"
    ],
    "solution": "interest = 10000 * 0.045\ninterest_earned_in_two_years = 2 * interest\nprint(interest_earned_in_two_years)"
  },
  {
    "example_id": 565,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "630.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "def arithmetic_sequence(a, d, n):\n    return a + (n-1)*d\n\na = 30\nd = 30\nn = 11\nterm_21 = arithmetic_sequence(a, d, n+10)\nprint(term_21)"
  },
  {
    "example_id": 566,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(3 + 5)"
  },
  {
    "example_id": 567,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3333333333333333"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "minutes = 20 / 60\nprint(minutes)"
  },
  {
    "example_id": 568,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "a = 3\nb = 10\nresult = 2 * a + 5 * b - a * b\nprint(result)"
  },
  {
    "example_id": 569,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nprint(a*b*c)"
  },
  {
    "example_id": 570,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "print(5 + 500 * 10 / 100)"
  },
  {
    "example_id": 571,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "from sympy import *\n\nA = (0,7)\nB = (1,0)\nC = (12,-2)\nD = (7,8)\n\nAB = sqrt( (B[0]-A[0])**2 + (B[1]-A[1])**2 )\nBC = sqrt( (C[0]-B[0])**2 + (C[1]-B[1])**2 )\nCD = sqrt( (D[0]-C[0])**2 + (D[1]-C[1])**2 )\nDA = sqrt( (A[0]-D[0])**2 + (A[1]-D[1])**2 )\n\nABCD = (AB + BC + CD + DA) / 2\n\nprint(\"The area of ABCD is:\", ABCD)"
  },
  {
    "example_id": 572,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "m = 7\nn = 8-m\nprint(abs(m-n))"
  },
  {
    "example_id": 573,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.928203230275509"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "from math import sqrt\nx = sqrt(14)\ny = sqrt(48)\nprint(y)"
  },
  {
    "example_id": 574,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.21"
    ],
    "solution": "# b = -2.6\n# c = 3.6\n# b + c = -2.6 + 3.6 = 1.0\nprint(1.0)"
  },
  {
    "example_id": 575,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\neq = 2*x**2 + 3*x - 5\nd, e = sp.solveset(eq, x)\nprint((d-1)*(e-1))"
  },
  {
    "example_id": 576,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.010152407657533865"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(2 ** (1/4) ** 2/5 * 4 ** (3/8) ** 2/25)"
  },
  {
    "example_id": 577,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "227.0"
    ],
    "annotated_answers": [
      "33840.0"
    ],
    "solution": "largest_product = 454 / 2\nprint(largest_product)"
  },
  {
    "example_id": 578,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(2*6 + 4*3 - 8*(3+3))"
  },
  {
    "example_id": 579,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 3\ny = 2\nx3 = x**3\ny3 = y**3\nprint(x3 - y3)"
  },
  {
    "example_id": 580,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "114.0",
      "2.0",
      "5.0",
      "114.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import Symbol, solve\na = Symbol('a')\nsol = solve((3*5**2 - 4*(5-a)**2)/3 - 63, a)\nprint(sol)"
  },
  {
    "example_id": 581,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((3*4-2)*(4*4+1)-(3*4-2)*4*4+1)"
  },
  {
    "example_id": 582,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.142857142857143"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "y = (19 - 7 ** 2) / (2 * 7)\nprint(y)"
  },
  {
    "example_id": 583,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "24.0",
      "8.0",
      "2.0",
      "2.0",
      "6.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\n\n# The radius of the cookie is the distance from the center\n# to any point on the boundary of the cookie.\nr = sympy.sqrt(x**2 + y**2 - 6)\n\n# The distance from the center to the edge of the cookie\n# is twice the radius.\nedge_distance = 2 * r\n\n# The edge of the cookie is a circle, so the area of\n# the circle is equal to the area of the cookie.\ncookie_area = sympy.pi * edge_distance**2\n\n# The volume of a circle is proportional to the area of the\n# circle. So the volume of the cookie is proportional to\n# the area of the cookie.\ncookie_volume = sympy.pi * edge_distance**3\n\n# The volume of a lunch-sized cookie is 1.5 cubic inches.\nlunch_size = 1.5\n\n# The volume of a snack-sized cookie is 0.5 cubic inches.\nsnack_size = 0.5\n\n# The volume of a cookie is proportional to the area of the cookie.\n# So the volume of a cookie is proportional to the area of the cookie.\ncookie_volume_ratio = lunch_size / snack_size\n\n# The volume of the cookie is proportional to the area of the cookie.\n# So the volume of the cookie is proportional to the area of the cookie.\ncookie_volume_ratio = cookie_area / cookie_volume\n\n# The volume of the cookie is proportional to the area of the cookie.\n# So the volume of the cookie is proportional to the area of the cookie.\nprint(cookie_volume_ratio)"
  },
  {
    "example_id": 584,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "f = sympy.sympify('x**2 - 4*sqrt(x) + 1')\nf_of_4 = f(4)\nprint(f_of_4)"
  },
  {
    "example_id": 585,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "5050.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 101):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 586,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(4-2)"
  },
  {
    "example_id": 587,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1600.0"
    ],
    "annotated_answers": [
      "1600.0"
    ],
    "solution": "x = 441 + 2 * 21 * 19 + 361\nprint(x)"
  },
  {
    "example_id": 588,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-42.0"
    ],
    "solution": "from sympy import *\nf = x**3 - 6*x**2 + 3*x - 4\ng = x**3 + 5*x**2 + 9*x - 2\nh = f(g(x))\nprint(h.subs({x:0}))"
  },
  {
    "example_id": 589,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import sqrt, floor, ceiling\nx = ceiling(sqrt(130))\ny = floor(sqrt(130))\nprint(x)"
  },
  {
    "example_id": 590,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-16.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nprint(sympy.solve(x**2 + 24*x + 128, x)[0])"
  },
  {
    "example_id": 591,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(3)"
  },
  {
    "example_id": 592,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nsolution = solve(2*x**2 + 13*x + 6, x)\nprint(solution[0]**2 * solution[1]**2)"
  },
  {
    "example_id": 593,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "7.0",
      "5.0",
      "30.0",
      "8900.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def contains(seq, n):\n    return n in seq\n\ndef S_k(k):\n    return [i * k + 1 for i in range(2005 // k)]\n\ndef contains_2005(k):\n    return contains(S_k(k), 2005)\n\nprint(contains_2005(k) for k in range(1, 1000))"
  },
  {
    "example_id": 594,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "print(31**2 - 19**2)"
  },
  {
    "example_id": 595,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\n\ndef f(x):\n    return math.exp(3*x**2-math.factorial(math.floor(x))+72*x**4+3*x**3-6*x**2+2*x+1)\n\ndef g(x):\n    return math.exp(3*x**2-math.factorial(math.floor(x))+72*x**4+4*x**3-11*x**2-6*x+13)\n\nx = 0\nwhile f(x) >= g(x):\n    x += 1\nprint(x)"
  },
  {
    "example_id": 596,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "pile_1 = 20 - 3\npile_2 = 20 + 2\npile_3 = 20 - 2\npile_4 = 2 * pile_2\nprint(pile_4)"
  },
  {
    "example_id": 597,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# p, q are positive integers\n# p/q = 1/q + 1/p = 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n# p/q - 1 = 1/q + 1/p - 1\n#"
  },
  {
    "example_id": 598,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f = lambda x: 2 * x + 2\nf(2)"
  },
  {
    "example_id": 599,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\nt = range(1, 100)\nsatisfy_condition = [int(math.sqrt(x)) for x in t if 2 < math.sqrt(x) < 3.5]\nprint(len(satisfy_condition))"
  },
  {
    "example_id": 600,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "# Write your solution here\nimport sympy\n\nx, y = sympy.symbols('x y')\n\neq1 = 2*x - 3*y\neq2 = 4*x + 3*y\n\nsol = sympy.solve((eq1, eq2))\n\nprint(sol[x] * sol[y])"
  },
  {
    "example_id": 601,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "from math import prod\nfrom sympy import Symbol\n\na = Symbol('a', integer=True)\nb = 3*a\nc = Symbol('c', integer=True)\nd = c/3\ne = 2*d\n\ntotal_coins = a*b*c*e\n\nprint(total_coins)\n\n# 162"
  },
  {
    "example_id": 602,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import sqrt\n\ndenominator = 2 / (sqrt(4) + sqrt(32))\ndenominator_rationalized = denominator.cancel()\n\nprint(denominator_rationalized)"
  },
  {
    "example_id": 603,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3125.0"
    ],
    "annotated_answers": [
      "3125.0"
    ],
    "solution": "print(5**3 * 5**2)"
  },
  {
    "example_id": 604,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2008.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "a = 2009 - 2009 % 2\nprint(a)"
  },
  {
    "example_id": 605,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "350.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "# Write your solution here\n# Use the formula: a_n = a_1 + (n-1)d\na1 = 100\nd = 50\nn = 6\na_n = a1 + (n-1)*d\nprint(a_n)"
  },
  {
    "example_id": 606,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 3\nprint(x - 3 / (2 * x ** 2 - 8 * x + 7))"
  },
  {
    "example_id": 607,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "143.0"
    ],
    "solution": "sum_of_digits = 1 + 3\nsum_reversed = 3 + 1\ndifference = sum_of_digits - sum_reversed\nfinal_sum = sum_of_digits + sum_reversed\nprint(final_sum)"
  },
  {
    "example_id": 608,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.94427190999916"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "import math\nperimeter = 2 * math.sqrt(2) * math.sqrt(10)\nprint(perimeter)"
  },
  {
    "example_id": 609,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.17"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "a = -7 / 6\na = round(a, 2)\nprint(a)"
  },
  {
    "example_id": 610,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x, y')\n\ns = sympy.integrate(sympy.sqrt(1 - (x - y)**2), (x, -sympy.oo, sympy.oo))\ns = sympy.integrate(sympy.sqrt(1 - (x - y)**2), (y, -sympy.oo, sympy.oo))\n\nprint(s.subs(y, 5))"
  },
  {
    "example_id": 611,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "lugs_in_80_lugs = 80 / 20\nequivalent_ligs = lugs_in_80_lugs * 4\nprint(equivalent_ligs)"
  },
  {
    "example_id": 612,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "12.0",
      "2.0",
      "2.0",
      "6.0",
      "2.0",
      "8.0",
      "24.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import symbols, sqrt\nx, y = symbols('x, y')\ncircle = x**2 + y**2 - 6*x + 8*y + 24\npoint = -3*x - 12*y\ndistance = sqrt(circle**2 + point**2)\nprint(distance)"
  },
  {
    "example_id": 613,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = -2\nprint(x)"
  },
  {
    "example_id": 614,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3841106397986879"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\na = 3 / math.sqrt(61)\nprint(a)"
  },
  {
    "example_id": 615,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = 3\nb = -24\nc = 72\nprint(a+b+c)"
  },
  {
    "example_id": 616,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 3 * 4\nprint(n)"
  },
  {
    "example_id": 617,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy as sym\na, b = sym.symbols('a, b')\nab = a*b\neq1 = ab-7\neq2 = a+b-5\nsol = sym.solve((eq1, eq2), (a, b))\nprint(sol)"
  },
  {
    "example_id": 618,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220.6692263021483"
    ],
    "annotated_answers": [
      "221.0"
    ],
    "solution": "weight = 244\nfor i in range(10):\n    weight -= weight * 0.01\nprint(weight)"
  },
  {
    "example_id": 619,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "800.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "print(102**2 - 98**2)"
  },
  {
    "example_id": 620,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Area = 2(x*y)\n# Perimeter = 2(x+y)\n# Area = 5*Perimeter\n# x*y = 5(x+y)\n# y = x + 2x\n# y = 3x\n# x + y = 3x + 2x\n# x + y = 5x\n# x = 2\n# y = 3\nprint(2, 3)"
  },
  {
    "example_id": 621,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "315.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "c = 18**2 - 9\nprint(c)"
  },
  {
    "example_id": 622,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0",
      "8.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsol = sympy.solve((x+3)**2 - 121, x)\nprint(sol)"
  },
  {
    "example_id": 623,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import *\n\nprint(sqrt(4**5 + 4**5 + 4**5 + 4**5))"
  },
  {
    "example_id": 624,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 1.5\nprint(abs(x - 1) + abs(x - 1.5) + abs(x - 2))"
  },
  {
    "example_id": 625,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7056.0"
    ],
    "annotated_answers": [
      "-128.0"
    ],
    "solution": "x_1 = 4 + 10\nx_2 = 4 - 10\nx_3 = -4 + 10\nx_4 = -4 - 10\nprint(x_1*x_2*x_3*x_4)"
  },
  {
    "example_id": 626,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy as sym\n\n# Define the hyperbola\nx, y = sym.symbols('x y')\nhyp = x**2 - y**2 - 17\n\n# Find the intersections of the hyperbola and the x-axis\nsols = sym.solve(hyp, x)\n\n# Count the number of lattice points on the hyperbola\ncount = 0\nfor s in sols:\n    if s.is_integer:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 627,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "225000.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "revenue = 450 * 500\nunit_increase = 10\nunit_cost = revenue / (500 + 10 * 500)\ncost_max = unit_cost * (500 + 10 * 500)\nprint(cost_max)"
  },
  {
    "example_id": 628,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.999999999999998"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "brownies_to_cupcakes = 4 / 10\ncookies_to_brownies = 6 / 2\n\ncookies_to_cupcakes = cookies_to_brownies * brownies_to_cupcakes\n\neighteen_cookies = 18\n\ncupcakes = eighteen_cookies / cookies_to_cupcakes\n\nprint(cupcakes)"
  },
  {
    "example_id": 629,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "years_to_36_feet = 36 / 18\nprint(years_to_36_feet)"
  },
  {
    "example_id": 630,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = 1\nf = lambda x: a * x**4 - b * x**2 + x + 5\nprint(f(3))"
  },
  {
    "example_id": 631,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "15.0",
      "38.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x, y')\nk = sympy.Symbol('k')\nsol = sympy.solve([y - 2*x**2 - k*x - 6, y - x + 4], dict=True)\nprint(sol)"
  },
  {
    "example_id": 632,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "174.0"
    ],
    "solution": "A = 2 * 60\nB = 60 * 5\nprint(A + B)"
  },
  {
    "example_id": 633,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "print(1**2+3)"
  },
  {
    "example_id": 634,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50005.0"
    ],
    "annotated_answers": [
      "697.0"
    ],
    "solution": "a = 4\nb = 10\nc = 5\nwhile b < c:\n    b += 1\n    c += 1\n    if b == c:\n        break\nprint(a*10000 + b*1000 + c)"
  },
  {
    "example_id": 635,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "def f(x):\n    return x - (int(x ** 0.5)) ** 2\n\nsum = 0\nfor i in range(101, 111):\n    sum += f(i)\n\nprint(sum)"
  },
  {
    "example_id": 636,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "243.0"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "# Each person hears the rumor from three friends\n# After 5 cycles, there are 3^5 = 243 people who have heard the rumor\nprint(243)"
  },
  {
    "example_id": 637,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "8.0",
      "2.0",
      "16.0"
    ],
    "annotated_answers": [
      "-128.0"
    ],
    "solution": "from sympy import expand, Symbol\nx = Symbol('x')\nprint(expand((x-2)**2*(x+2)**2).as_expr())"
  },
  {
    "example_id": 638,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0",
      "8.0",
      "10.0",
      "7.0",
      "79.0",
      "6.0",
      "28.0",
      "5.0",
      "32.0",
      "4.0",
      "37.0",
      "3.0",
      "43.0",
      "2.0",
      "29.0",
      "4.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\n\na = 7*x**4 - 3*x**3 - 3*x**2 - 8*x + 1\nb = 8*x**4 + 2*x**3 - 7*x**2 + 3*x + 4\n\nprint(simplify(a*b))"
  },
  {
    "example_id": 639,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "c = 9 - 3/2\nprint(c)"
  },
  {
    "example_id": 640,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "def sqrt_n(n):\n    return int(n ** 0.5)\n\ndef sqrt_x(x):\n    return sqrt_n(x + sqrt_n(x))\n\ndef sqrt_9(x):\n    return 9\n\ndef find_x(f, guess):\n    return find_root(lambda x: f(x) - guess, guess)\n\ndef find_root(f, guess):\n    return newton(f, guess)\n\ndef newton(f, x):\n    while abs(f(x)) > 1e-15:\n        x -= f(x) / (f(x) ** 2)\n    return x\n\nx = find_x(sqrt_x, 0)\nprint(x)"
  },
  {
    "example_id": 641,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = 4\nf_x = 2 * x - 3\ng_f_x = 5 - 4 * f_x\nprint(g_f_x)"
  },
  {
    "example_id": 642,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-25.0"
    ],
    "annotated_answers": [
      "-25.0"
    ],
    "solution": "if -10 < -3:\n    print(3 * -10 + 5)\nelse:\n    print(7 - 4 * -10)"
  },
  {
    "example_id": 643,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "a = 3\nd = 5\nn = 12\na_n = a + (n-1) * d\nprint(a_n)"
  },
  {
    "example_id": 644,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "192.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "192.0",
      "2.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import symbols, solve\nx = symbols(\"x\")\nb = symbols(\"b\")\n\nsol1, sol2 = solve(x**2 + b*x + 48, x)\n\nprint(\"Solution 1:\", sol1)\nprint(\"Solution 2:\", sol2)\n\nratio = sol2 / sol1\nprint(\"Ratio:\", ratio)\n\nb_max = 1/ratio\nprint(\"b_max:\", b_max)"
  },
  {
    "example_id": 645,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "567.0"
    ],
    "annotated_answers": [
      "567.0"
    ],
    "solution": "term_5 = 7 * 3**4\nprint(term_5)"
  },
  {
    "example_id": 646,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = 1\nb = 1\nc = 1\nprint(a+b+c)"
  },
  {
    "example_id": 647,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import math\nA = 8\nB = 3 * 2 ** 2\nC = 2\nA_plus_B_plus_C = A + B + C\nprint(A_plus_B_plus_C)"
  },
  {
    "example_id": 648,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2-x1)**2 + (y2-y1)**2)\n\ndef longest_side(x1, y1, x2, y2, x3, y3):\n    return max(distance(x1, y1, x2, y2), distance(x2, y2, x3, y3), distance(x1, y1, x3, y3))\n\nprint(longest_side(11, 1, 2, 3, 3, 7))"
  },
  {
    "example_id": 649,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "495.0"
    ],
    "annotated_answers": [
      "495.0"
    ],
    "solution": "sum = 0\nfor i in range(47, 65, 2):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 650,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "10.0",
      "3.0",
      "7.0",
      "6.0",
      "3.0",
      "4.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import *\n\nx = Symbol('x')\n\npoly1 = 3*x**10 - 3*x**7 + 2*x**3 - x + 7\npoly2 = 4*x**3 - 4*x**2 - 5\n\nprint(poly1 + poly2)"
  },
  {
    "example_id": 651,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    return -x**2 + 4*x - 4\n\ny_intercepts = [x for x in range(1, 100) if f(x) == 0]\nprint(len(y_intercepts))"
  },
  {
    "example_id": 652,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 5/3\nb = -4/3\nprint(6*b)"
  },
  {
    "example_id": 653,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(abs(-3 + 2 * (-4)))"
  },
  {
    "example_id": 654,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 12\ny = 35\nprint(y - x)"
  },
  {
    "example_id": 655,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31500.0"
    ],
    "annotated_answers": [
      "1050.0"
    ],
    "solution": "week_calories = 150 * 30 * 7\nprint(week_calories)"
  },
  {
    "example_id": 656,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy as sym\nx, y = sym.symbols('x y')\neq1 = 4*y - 4*x**2 - 1\neq2 = 4*x - 4*y**2 - 1\nsol = sym.solve([eq1, eq2], [x, y])\nprint(sym.simplify(1/(x**3 + y**3)))"
  },
  {
    "example_id": 657,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import sympy as sp\nj, k, l = sp.symbols('j k l')\neq1 = j*k*24\neq2 = j*l*48\neq3 = k*l*18\nsolve = sp.solve\nsolutions = solve((eq1, eq2, eq3), (j, k, l))\nprint(solutions)"
  },
  {
    "example_id": 658,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "from math import floor, ceil, sqrt, pi\n\ndef f(x):\n    if x % 1 == 0:\n        return abs(floor(x))\n    else:\n        return ceil(x) ** 2\n\nprint(f(sqrt(8)) + f(-pi) + f(sqrt(50)) + f(9 / 2))"
  },
  {
    "example_id": 659,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = -4\nb = 8\nprint(a + b)"
  },
  {
    "example_id": 660,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "x = 3\nwhile x < 4:\n    if 1/x < 3/4 and 3/x > 1/3:\n        print(x)\n    x += 1"
  },
  {
    "example_id": 661,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "num_red_students_in_school = 11 / 24 * 480\nprint(num_red_students_in_school)"
  },
  {
    "example_id": 662,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "259.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol, Add, factorial\ni = Symbol('i')\nsummation = Add(*[i**k for k in range(259)])\nprint(summation.subs(i, 1))"
  },
  {
    "example_id": 663,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    return 1 / x\n\ndef h(x):\n    return f(f(x))\n\nprint(h(10))"
  },
  {
    "example_id": 664,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "f_x = -2\nt_x = 9 + 2 * (f_x**2 - 3)\nprint(t_x)"
  },
  {
    "example_id": 665,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "-3402.0",
      "6.0",
      "321441.0",
      "1.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nexpr = sp.sqrt(x**3 - 4*x + 4)\nsol = sp.solve(expr - 16, x)\nprint(sol)"
  },
  {
    "example_id": 666,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\nm = math.sqrt(4 * 5 + 8 * (-2))\nprint(m)"
  },
  {
    "example_id": 667,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x_agreed = (3 + (-6)) / 2\nx_correct = (3 + (-10)) / 2\nprint(abs(x_agreed - x_correct))"
  },
  {
    "example_id": 668,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 3\ny = x**2 - 6*x + 13\nprint(y)"
  },
  {
    "example_id": 669,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "print(19**2 + 2*19 + 1)"
  },
  {
    "example_id": 670,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 3\nm = 1 - n\nprint(n - m)"
  },
  {
    "example_id": 671,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sqrt\nx, y = (sqrt(8 * 8 + 6 * 6) + 8) / 2, (sqrt(8 * 8 + 6 * 6) - 8) / 2\nprint(x, y)"
  },
  {
    "example_id": 672,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "324.0"
    ],
    "solution": "a = 0\nwhile True:\n    a += 1\n    b = a + 1\n    if (b ** 2 - a ** 2) == 35:\n        print(max(a, b))\n        break"
  },
  {
    "example_id": 673,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "p = lambda x: 2 - x**2\nq = lambda x: 6/x\nprint(p(q(2)))"
  },
  {
    "example_id": 674,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000000000000.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nn = sympy.Symbol('n')\na, r = sympy.Symbol('a'), sympy.Symbol('r')\nseq = a * r**(n - 1)\ndigits = len(str(seq))\nk = sympy.ceiling(sympy.log(10**digits, r))\nprint(k)"
  },
  {
    "example_id": 675,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\n\ny1 = sympy.Symbol('y1')\ny2 = sympy.Symbol('y2')\nx = sympy.Symbol('x')\n\neq1 = y1 - (x**2 + 4*x + 6)\neq2 = y2 - (x**2 + 1/2*x + 6)\n\nsol1 = sympy.solve(eq1, x)\nsol2 = sympy.solve(eq2, x)\n\na = sol1[0]\nb = sol2[0]\nc = sol1[1]\nd = sol2[1]\n\nprint(c-a)"
  },
  {
    "example_id": 676,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def f(x):\n    if x == 1:\n        return 2\n    if x == 4:\n        return 3\n    if x == 7:\n        return 4\n    raise ValueError('x not in domain of f')\n\ndef f_inv(y):\n    if y == 2:\n        return 1\n    if y == 3:\n        return 4\n    if y == 4:\n        return 7\n    raise ValueError('y not in range of f')\n\nprint(f_inv(f_inv(3)))"
  },
  {
    "example_id": 677,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "total = 0\nfor i in range(1, 20):\n    total += int(i ** 0.5)\nprint(total)"
  },
  {
    "example_id": 678,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "a = 1\nb = 1\nwhile True:\n    if pow(a, 2) % b == 0:\n        break\n    a += 1\n    b += 1\nprint(a + b)"
  },
  {
    "example_id": 679,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "correct_answers = 232 // 5\nprint(correct_answers)"
  },
  {
    "example_id": 680,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "a = (5 - 1) / (1 - (-1))\nb = 1 - a\nh = lambda x: a * x + b\nprint(h(6))"
  },
  {
    "example_id": 681,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import sympy as sym\nx, y = sym.symbols('x y')\nx_plus_y = x + y\nx_minus_y = x - y\neq1 = x_plus_y - 3\neq2 = x_minus_y - 4\nsolutions = sym.solve([eq1, eq2], [x, y])\nx, y = solutions[x], solutions[y]\nprint(2 * x ** 2 + 2 * y ** 2)"
  },
  {
    "example_id": 682,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.625"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "laps_250 = 250 / 400\nprint(laps_250)"
  },
  {
    "example_id": 683,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "68.0",
      "2.0",
      "2.0",
      "3.0",
      "68.0",
      "2.0",
      "2.0",
      "3.0",
      "68.0",
      "2.0",
      "2.0",
      "3.0",
      "68.0",
      "2.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "import sympy\n\nx, y, z = sympy.symbols('x y z')\n\n# equation 1: x + y + z = 0\n# equation 2: x * y * z = 17\n# equation 3: x**3 + y**3 + z**3 =?\n\nsol = sympy.solve([x + y + z - 0, x * y * z - 17], [x, y, z])\nprint(sol)\n\n# x**3 + y**3 + z**3 = 21"
  },
  {
    "example_id": 684,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "15.0",
      "4.0",
      "2.0",
      "15.0"
    ],
    "annotated_answers": [
      "-22.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\na, b = sympy.solve(2*x**2-10*x+5, x)\nprint((2*a-3)*(4*b-6))"
  },
  {
    "example_id": 685,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import sqrt\n\ndef f(x):\n    return sqrt(3*x) + 2\n\nprint(f(0) + f(3))"
  },
  {
    "example_id": 686,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.308722450212111",
      "54"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "x = 5\nproduct = 1\nfor i in range(1, 13):\n    product *= x**i\nprint(product)"
  },
  {
    "example_id": 687,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "print(f(g(x)))"
  },
  {
    "example_id": 688,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "98.0"
    ],
    "solution": "a = 8**(1/3) + 1\nb = 8**(1/3) + 1\nc = 1\nprint(a+b+c)"
  },
  {
    "example_id": 689,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.04"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "y = 24 / (25 / 24)\nprint(y)"
  },
  {
    "example_id": 690,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 115 // 3\ny = (115 - 3*x) // 2\nprint(x + y)"
  },
  {
    "example_id": 691,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "4624.0"
    ],
    "solution": "# Find the larger of the two squares\ndef find_larger_square(n):\n    for i in range(n, 0, -2):\n        j = i - 2\n        if j * j + (i * i - j * j) == 268:\n            return i\n    return -1\n\nprint(find_larger_square(100))"
  },
  {
    "example_id": 692,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "first_term = 8 - (3 - 2)\nprint(first_term)"
  },
  {
    "example_id": 693,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "from math import sqrt\n\ndef perimeter(A, B, C):\n    return sqrt((B[0] - A[0])**2 + (B[1] - A[1])**2) + sqrt((C[0] - B[0])**2 + (C[1] - B[1])**2) + sqrt((A[0] - C[0])**2 + (A[1] - C[1])**2)\n\nprint(perimeter((-6,6), (9,6), (9,-2)))"
  },
  {
    "example_id": 694,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "from sympy import prime, Symbol, sqrt\na = Symbol('a', prime=True)\nb = Symbol('b', prime=True)\nc = Symbol('c', prime=True)\nx = Symbol('x')\neq1 = x*(x-3) - 1\neq2 = (x*(x-3) - 1).expand()\neq2 = eq2.subs(x, (a+sqrt(b))/c)\neq2 = eq2.subs(x, (a-sqrt(b))/c)\neq2 = eq2.expand()\neq2 = eq2.subs(a, a+1)\neq2 = eq2.subs(a, a-1)\neq2 = eq2.simplify()\nprint(eq2)"
  },
  {
    "example_id": 695,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a = 1\nb = -8\nc = 49\nab = a * b\nprint(ab)"
  },
  {
    "example_id": 696,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "224.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "A, B, C = 3, 1, 5\nAC = A*C\nprint(AC**2 - B)"
  },
  {
    "example_id": 697,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(max(6, 5, 2))"
  },
  {
    "example_id": 698,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "total_in_column = 0\nfor i in range(1, 10):\n    total_in_column += i\nprint(total_in_column)"
  },
  {
    "example_id": 699,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import ceiling, floor, sqrt\n\nprint(ceiling(sqrt(27)) - floor(sqrt(26)))"
  },
  {
    "example_id": 700,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sp\n\n# Vertex is (2,3)\n# Contains point (4,4)\n# Slope at (2,3) = 0\n\n# Slope = 2ax + b\n# Slope at (4,4) = 0\n# 4 = 2(2) + b\n# b = -4\n\n# Slope at (6,y) = 0\n# y = 2(6) + b\n# y = 12 - 4\n# y = 8\n\nprint(8)"
  },
  {
    "example_id": 701,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "f = lambda x: (x ** 2 + 2 * x + 3) / x\ng = lambda x: x ** 3 + 2\nprint(g(f(-3)))"
  },
  {
    "example_id": 702,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.8"
    ],
    "annotated_answers": [
      "96.8"
    ],
    "solution": "feet_per_second = 88 / 60 * 66\nprint(feet_per_second)"
  },
  {
    "example_id": 703,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "distance = 9 * 12\nprint(distance)"
  },
  {
    "example_id": 704,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0",
      "2.0",
      "145.0",
      "2.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import sympy as sym\nx, y = sym.symbols('x y')\n\neq1 = 2*x - 13\neq2 = 3*x + y - 92\n\nsol = sym.solve([eq1, eq2])\nprint(sol)"
  },
  {
    "example_id": 705,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "3.0",
      "2010.0",
      "1.0",
      "3.0",
      "3.0",
      "-1.0",
      "2010.0",
      "1.0",
      "3.0",
      "2.0",
      "-1.0",
      "2010.0",
      "1.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "2010.0"
    ],
    "solution": "from sympy import sympify\nfrom sympy.solvers import solve\n\nx = sympify('x')\nf = sympify('x**3 + 3*x**2 + 3*x + 1')\n\n# Find the inverse of f\nf_inv = solve(f - 2010, x)[0]\n\n# Evaluate f(f_inv)\nprint(f.subs(x, f_inv))"
  },
  {
    "example_id": 706,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "new_pressure = 4 / (3.67 / 1.835)\nprint(new_pressure)"
  },
  {
    "example_id": 707,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "K = (4 - 7) / (0 - 3)\nprint(K)"
  },
  {
    "example_id": 708,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "x = 1\nprint(x)"
  },
  {
    "example_id": 709,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-40.0",
      "-5.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "-40.0"
    ],
    "solution": "import sympy as sp\nx, y = sp.symbols('x, y')\na = sp.symbols('a')\neq1 = sp.Eq(2*x + 5*y, -8)\neq2 = sp.Eq(6*x, 16 + a - 15*y)\nsol = sp.solve([eq1, eq2], [x, y, a])\nprint(sol)"
  },
  {
    "example_id": 710,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "degrees_in_hour = 360 / 24\nprint(degrees_in_hour)"
  },
  {
    "example_id": 711,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "smallest = (49 - 7) // 2\nprint(smallest)"
  },
  {
    "example_id": 712,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.066939702021237"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(2**3**(4/3))"
  },
  {
    "example_id": 713,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 714,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 1 / 2\nprint(x - 1)"
  },
  {
    "example_id": 715,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "num_tours = 16\nprint(num_tours)"
  },
  {
    "example_id": 716,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "sum_3_6 = 25\nsum_1_2 = 2 + 2\ndifference = sum_3_6 - sum_1_2\nterm_3 = 2 + difference\nprint(term_3)"
  },
  {
    "example_id": 717,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "324.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x = 243\ny = 81\nprint(x + y)"
  },
  {
    "example_id": 718,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "import sympy\na, b = sympy.symbols('a b')\nx = sympy.symbols('x')\ny = 3*x**2 - 5*x - 3\nx_mid = (a + b)/2\ny_mid = y.subs(x, x_mid)\nx_1 = (a - b)/2\ny_1 = y.subs(x, x_1)\nlength_AB = sympy.sqrt((x_1 - x_mid)**2 + (y_1 - y_mid)**2)\nprint(length_AB**2)"
  },
  {
    "example_id": 719,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "# flicks = 8 flecks\n# flocks = 4 flecks\n\n# 12 flicks = 12 * 8 flecks = 96 flecks\n# 96 flecks = 96 / 4 flocks = 24 flocks\nprint(24)"
  },
  {
    "example_id": 720,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-1.0",
      "4.0",
      "1.0",
      "-1.0",
      "4.0",
      "1.0",
      "-1.0",
      "4.0",
      "-1.0",
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nfrom sympy import Symbol, log, exp, Eq, solve\nx = Symbol('x')\nconstraint = Eq(log(exp(2*log(x-1))**2), -1)\nsol = solve(constraint, x)\nprint(sol)"
  },
  {
    "example_id": 721,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 0\nwhile True:\n    if (a**2+a) == a*a:\n        print(a)\n        break\n    a += 1"
  },
  {
    "example_id": 722,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "A = 10\nB = 1\nAB = A*B\nprint(AB + B)"
  },
  {
    "example_id": 723,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "y = 12 - 6\nprint(y)"
  },
  {
    "example_id": 724,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# 15.5 = 15 + 0.5\n# 0.5 = r\n# floor(r) = 15\n# r = 0.5\nprint(15)"
  },
  {
    "example_id": 725,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.95"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 9 * 0.33\ny = 6 * 0.33\nprint(x + y)"
  },
  {
    "example_id": 726,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(int(36 / 7))"
  },
  {
    "example_id": 727,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "r = 4\nprint(r)"
  },
  {
    "example_id": 728,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\n\n# Create a symbol for each variable\nx = sympy.Symbol('x')\na = sympy.Symbol('a')\nb = sympy.Symbol('b')\nc = sympy.Symbol('c')\n\n# Create a function y = f(x) using the symbols\nf = a*x**2 + b*x + c\n\n# Find the derivative of the function\nf_derivative = f.diff(x)\n\n# Find the value of the derivative at x = 0\nf_derivative_at_0 = f_derivative.subs(x, 0)\n\n# Find the value of the derivative at x = 1\nf_derivative_at_1 = f_derivative.subs(x, 1)\n\n# Find the value of the derivative at x = 2\nf_derivative_at_2 = f_derivative.subs(x, 2)\n\n# Find the value of the second derivative at x = 0\nf_second_derivative_at_0 = f_derivative_at_0.diff(x)\n\n# Find the value of the second derivative at x = 1\nf_second_derivative_at_1 = f_derivative_at_1.diff(x)\n\n# Find the value of the second derivative at x = 2\nf_second_derivative_at_2 = f_derivative_at_2.diff(x)\n\n# Find the value of a + b + c\na_plus_b_plus_c = f_second_derivative_at_0 + f_second_derivative_at_1 + f_second_derivative_at_2\n\nprint(a_plus_b_plus_c)"
  },
  {
    "example_id": 729,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\n\n# Find the equation of the smaller circle\nx, y = sympy.symbols(\"x y\")\nD, E, F = sympy.symbols(\"D E F\")\n\n# Equation of the smaller circle\ncircle_eq = x**2 + y**2 + D*x + E*y + F\n\n# Find D + E + F\nsol = sympy.solve(circle_eq, (D, E, F))\nprint(sol)"
  },
  {
    "example_id": 730,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "f = lambda x: x + 1\ng = lambda x: 2 * x\n\nf_inv = lambda y: (y - 1) / 2\ng_inv = lambda y: 2 * y - 1\n\nf_inv_of_g_inv_of_f_inv_of_f_inv_of_g = lambda x: f(g_inv(f_inv(f_inv(g(f(x))))))\n\nprint(f_inv_of_g_inv_of_f_inv_of_f_inv_of_g(5))"
  },
  {
    "example_id": 731,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def f(x):\n    return x**3 - 8\n\ndef f_inv(y):\n    return (y + 8)**(1/3)\n\nprint(f_inv(f(f_inv(19))))"
  },
  {
    "example_id": 732,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "s = 3**2 - 2**3 + 1\nt = 2*s - s**2\nprint(t)"
  },
  {
    "example_id": 733,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.666666666666666"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "unit_j = 16 / 21\nj_14 = unit_j * 14\nprint(j_14)"
  },
  {
    "example_id": 734,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import solve, Symbol\n\nx = Symbol('x')\nf = x**2 + 9\nf_eq = f - 10\nsolve_f_eq = solve(f_eq, x)\nprint(sum(solve_f_eq))"
  },
  {
    "example_id": 735,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "91.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# The first term of an arithmetic sequence is 1, another term of the sequence is 91 and all of the terms of the sequence are integers. How many distinct arithmetic sequences meet these three conditions?\n\ndef is_distinct_arithmetic_sequence(seq):\n    # check whether the sequence is distinct\n    seen = set()\n    return not any(i in seen or seen.add(i) for i in seq)\n\ndef is_arithmetic_sequence(seq):\n    # check whether the sequence is an arithmetic sequence\n    diff = seq[1] - seq[0]\n    return all(i - seq[0] == diff for i in seq[1:])\n\ndef is_integer_sequence(seq):\n    # check whether the sequence is an integer sequence\n    return all(isinstance(i, int) for i in seq)\n\ndef arithmetic_sequences(n):\n    # return all n distinct arithmetic sequences that meet the three conditions\n    for i in range(1, n+1):\n        for j in range(1, n+1-i):\n            seq = [1] + [91] * i + [1] * (n-i-j)\n            if is_distinct_arithmetic_sequence(seq) and is_arithmetic_sequence(seq) and is_integer_sequence(seq):\n                yield seq\n\nprint(list(arithmetic_sequences(5)))"
  },
  {
    "example_id": 736,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "bride_age = 51 - 15\ngroom_age = bride_age + 15\nprint(groom_age)"
  },
  {
    "example_id": 737,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.66666666666667"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "slope = (365-3)/(4-1)\nprint(slope)"
  },
  {
    "example_id": 738,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Write a function that counts the number of polynomials with positive integer roots.\n# Use the `sympy` module.\nimport sympy\n\ndef count_polynomials(n):\n    count = 0\n    for m in range(n + 1):\n        for x in range(1, n + 1):\n            if sympy.isprime(x ** 2 + m * x + n):\n                count += 1\n    return count\n\n# Test the function.\nprint(count_polynomials(28))"
  },
  {
    "example_id": 739,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def f(x):\n    return 3*f(2*x)+1\n\ndef f_inv(y):\n    return (y-1) / 3\n\nx, y = 4, 7\nx_inv, y_inv = f_inv(x), f_inv(y)\nprint(x_inv + y_inv)"
  },
  {
    "example_id": 740,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "def f(x):\n    return x**2 - 7\n\nprint(f(0))"
  },
  {
    "example_id": 741,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = -1\nf_x = 5 * (-1) + 3\ng_f_x = (f_x) ** 2 - 2\nprint(g_f_x)"
  },
  {
    "example_id": 742,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "reps_8th = 18 // 2\nprint(reps_8th)"
  },
  {
    "example_id": 743,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from math import log\nlog_5_1_over_625 = log(1/625, 5)\nprint(log_5_1_over_625)"
  },
  {
    "example_id": 744,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sqrt\n\ndef greatest_prime_factor(n):\n    \"\"\"\n    Returns the greatest prime factor of n.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return greatest_prime_factor(n // 2)\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return greatest_prime_factor(n // i)\n    return n\n\n\ndef sum_of_arithmetic_sequence(a, b, n):\n    return (n * (a + b)) // 2\n\n\ndef greatest_prime_factor_of_sum_of_arithmetic_sequence(a, b, n):\n    return greatest_prime_factor(sum_of_arithmetic_sequence(a, b, n))\n\n\nprint(greatest_prime_factor_of_sum_of_arithmetic_sequence(1, 2, 80))"
  },
  {
    "example_id": 745,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "expr = (7+8+9)/(2+3+4) * (6+9+12)/(9+8+7)\nprint(expr)"
  },
  {
    "example_id": 746,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "ten_twelve_calorie_crackers = 10 * 12\ntwenty_calorie_cookies = ten_twelve_calorie_crackers / 20\nprint(twenty_calorie_cookies)"
  },
  {
    "example_id": 747,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.666666666666666"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "volume = 52 / 6\nprint(volume)"
  },
  {
    "example_id": 748,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "for x in range(1, 1000):\n    if (x**2 - 16) % 2 == 0:\n        print(x)\n        break"
  },
  {
    "example_id": 749,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "A = 6\nB = 10\nC = 3 + B\nprint(C)"
  },
  {
    "example_id": 750,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import log, Symbol\n\nx = Symbol('x')\n\nexpr1 = 3 ** (x + 8)\nexpr2 = 9 ** (x + 3)\n\n# check if expr1 and expr2 are equal\nprint(expr1 == expr2)\n\n# if expr1 and expr2 are equal, find x\nif expr1 == expr2:\n    print(x)\nelse:\n    print('expr1 and expr2 are not equal')"
  },
  {
    "example_id": 751,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "print(pow(7+5, 2) - pow(7-5, 2))"
  },
  {
    "example_id": 752,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "print(5 * 1)"
  },
  {
    "example_id": 753,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import sympy as sp\nx, y, z = sp.symbols('x, y, z')\n\n# Step 1: Solve for log x - log y = a\na = sp.log(x) - sp.log(y)\n\n# Step 2: Substitute the value of a into the second equation\neq2 = sp.log(y) - sp.log(z) - 15\n\n# Step 3: Solve for log z - log x = -7\neq3 = sp.log(z) - sp.log(x) - 7\n\n# Step 4: Substitute the value of a into the third equation\neq4 = eq3.subs(a, eq2.subs(a, a))\n\n# Step 5: Solve for a\nprint(eq4.simplify())"
  },
  {
    "example_id": 754,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\nf = x**2 - 8*x + 15\nf_0 = f.subs(x, 0)\nprint(f_0)"
  },
  {
    "example_id": 755,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "990.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "from sympy import sqrt\n\nprint(sqrt(1000000) - sqrt(1000000)**(1/3))"
  },
  {
    "example_id": 756,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\neq1 = sympy.sqrt(x) - y\neq2 = y - 15\nx_val = sympy.solve(eq1, x)\nprint(x_val)"
  },
  {
    "example_id": 757,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def get_revenue(p):\n    return 128 - 4 * p\n\ndef get_derivative(p):\n    return -4\n\ndef find_max(p):\n    return get_revenue(p), get_derivative(p)\n\ndef find_max_price(p):\n    return p\n\np = 0\nwhile find_max(p)[1] > 0:\n    p += 1\n\nprint(find_max_price(p))"
  },
  {
    "example_id": 758,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve, Eq\nfrom sympy import Symbol\nx = Symbol('x')\nf = 3-x\nf_inv = solve(Eq(f, 0), x)[0]\nf_inv_6 = solve(Eq(f, 6), x)[0]\nprint(f_inv + f_inv_6)"
  },
  {
    "example_id": 759,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "f = lambda x: 2*x + 1\ng = lambda x: f(2*x) - 3\nprint(g(g(2)))"
  },
  {
    "example_id": 760,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\ny = -2\nx2y = x**2 * y\nprint(x2y)"
  },
  {
    "example_id": 761,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import Symbol\ni = Symbol('i', real=False)\nprint((3-i)*(6+2*i))"
  },
  {
    "example_id": 762,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsol1, sol2 = sympy.solve(x**2 - x - 6, x)\nprint(sol1 * sol2)"
  },
  {
    "example_id": 763,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.000000000000001"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import log, exp\nf = lambda x: exp(log(x) / 3)\nf_inv = lambda x: exp(log(x) * 3)\nprint(f_inv(f(6)))"
  },
  {
    "example_id": 764,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def get_camille_age(ages):\n    # The sum of Alex, Bob, and Danielle's ages is fourteen times Camille's age\n    # The sum of Alex and Bob's ages is six times Camille's age\n    # Bob's age is two years less than the difference in ages of Danielle and Alex\n    # Alex's age is 8 years\n    # Danielle's age is 10 years\n    # Bob's age is 8 - 2 = 6 years\n    # Alex's age + Bob's age + Danielle's age = 8 + 6 + 10 = 24\n    # Camille's age = 24 / 14\n    return ages[0] + ages[1] + ages[2] // 14\n\nages = [8, 6, 10]\nprint(get_camille_age(ages))"
  },
  {
    "example_id": 765,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "A = 1/2\nB = 1/2\nprint(A - B)"
  },
  {
    "example_id": 766,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "print(7 * 10 * (21 / 30))"
  },
  {
    "example_id": 767,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "99940009.0"
    ],
    "annotated_answers": [
      "99940009.0"
    ],
    "solution": "print(9997 ** 2)"
  },
  {
    "example_id": 768,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2235.0"
    ],
    "annotated_answers": [
      "2107.0"
    ],
    "solution": "# Write your solution here\nimport math\n\ndef sum_of_multiples(n, m):\n    return sum(range(n, m + 1, 7))\n\nprint(sum_of_multiples(100, 200))"
  },
  {
    "example_id": 769,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4785127025589056"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "import math\n\nx1 = math.sqrt(12)\nx2 = -12\n\nk = (x1**2 - 12*x1 + x2**2) / (x1 - x2)**2\n\nprint(k)"
  },
  {
    "example_id": 770,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "common_difference = -210 / 15\nprint(common_difference)"
  },
  {
    "example_id": 771,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "1.0",
      "6.0",
      "9.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "106.0"
    ],
    "solution": "from sympy import Symbol, diff\nx = Symbol('x')\nf = x ** 7 - 3 * x ** 3 + 2\ng = f.subs(x, x + 1)\nprint(diff(g, x))"
  },
  {
    "example_id": 772,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "256.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "from math import sqrt\n\ndef f(x):\n    return 2**x\n\ndef g(x):\n    return f(f(f(f(x))))\n\nprint(sqrt(g(1)))"
  },
  {
    "example_id": 773,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "x = 5\nprint(x)"
  },
  {
    "example_id": 774,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0",
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print(6+5, 6-5)"
  },
  {
    "example_id": 775,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(int(round(-7/4)))"
  },
  {
    "example_id": 776,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = -6\ny = 10\nz = 3\nprint(x + y + z)"
  },
  {
    "example_id": 777,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15488.0",
      "25.0"
    ],
    "annotated_answers": [
      "1736.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\n\nsolutions1 = sympy.solve(x**2 - 8)\nsolutions2 = sympy.solve(-5*x + 44)\n\nproduct = 1\nfor s1 in solutions1:\n    for s2 in solutions2:\n        if s1!= s2:\n            product *= s1*s2\n\nprint(product)"
  },
  {
    "example_id": 778,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\nx = Symbol('x')\nsolutions = solve((9*x/13 + 13/9*x)/(117*x), x)\nprint(sum(solutions))"
  },
  {
    "example_id": 779,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\n\n# Find the closest integer to 5.6\ninteger_5_6 = math.ceil(5.6)\n\n# Find the absolute value of 5.6\nabs_5_6 = abs(5.6)\n\n# Find the absolute value of x - 2\nabs_x_2 = abs(integer_5_6 - 2)\n\n# Find the minimum of the absolute values\nmin_abs = min(abs_5_6, abs_x_2)\n\n# Find the number of integers in the solution set\nnum_ints = math.ceil(min_abs)\n\nprint(num_ints)"
  },
  {
    "example_id": 780,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 1\nwhile n**2 - 3*n + 2 <= 1:\n    print(n)\n    n += 1"
  },
  {
    "example_id": 781,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "181.0"
    ],
    "annotated_answers": [
      "181.0"
    ],
    "solution": "print(3*7**2 + 5*7 - 1)"
  },
  {
    "example_id": 782,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sy\nx = sy.Symbol('x')\ny = sy.Symbol('y')\nf = x - y**2 + 4*y - 1\ny_intercepts = f.free_symbols\nprint(len(y_intercepts))"
  },
  {
    "example_id": 783,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "10.0",
      "2.0",
      "2.0",
      "10.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "import sympy\nb = -4\nx = sympy.Symbol('x')\nprint(sympy.solve([x**2 + b*x - 36], x))"
  },
  {
    "example_id": 784,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9901.0"
    ],
    "annotated_answers": [
      "9901.0"
    ],
    "solution": "print(99**2 + 99 + 1)"
  },
  {
    "example_id": 785,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\nx = 1 + x / (1 + x / (1 + x / (1 + x)))\n\nprint(x)"
  },
  {
    "example_id": 786,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "969.0",
      "2.0",
      "969.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy\nN = sympy.symbols('N')\nsum = (N * (N + 1)) / 2\nsum_121 = sum - 121\ndiff_N = sympy.solve(sum_121, N)\nprint(diff_N)"
  },
  {
    "example_id": 787,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "x = 3\ny = 2\nx_3 = x**3\ny_3 = y**3\nprint(x_3 - y_3)"
  },
  {
    "example_id": 788,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "168.99999999999991"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "print((13 ** (1/3)) ** 6)"
  },
  {
    "example_id": 789,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "A = 19 - 2 - 4\nprint(A)"
  },
  {
    "example_id": 790,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "360.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "set = [1, 2, 3, 4]\nset = [x + 2 for x in set]\nset = [x * 20 for x in set]\nprint(sum(set))"
  },
  {
    "example_id": 791,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Define f(x) = ax + b\na = 1\nb = 2\n\n# Define g(x) = 3x + 2\ng = lambda x: 3*x + 2\n\n# Find f^{-1}(x)\nf_inv = lambda y: (y - b) / a\n\n# Find a + b\nprint(a + b)"
  },
  {
    "example_id": 792,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "156.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "red_cards_in_pile_b = 26 * 6\nprint(red_cards_in_pile_b)"
  },
  {
    "example_id": 793,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.7333333333333334"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7 / 3\ny = 7 / 5\nprint(x + y)"
  },
  {
    "example_id": 794,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy as sp\n\n# Let the constant terms be c1 and c2\nc1 = sp.symbols('c1')\nc2 = sp.symbols('c2')\n\n# Let the discriminant be d1 and d2\nd1 = (c1 - 4)**2\nd2 = (c2 - 4)**2\n\n# Let the ratios be r1 and r2\nr1 = d1 / d2\nr2 = c2 / c1\n\n# Find the sum of the constant terms\nprint(c1 + c2)"
  },
  {
    "example_id": 795,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "729.0"
    ],
    "annotated_answers": [
      "369.0"
    ],
    "solution": "diagonal = (54/2)**2\nprint(diagonal)"
  },
  {
    "example_id": 796,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "def profit(t):\n    bulk_discount = 70 * t\n    single_ticket_cost = 70 - t\n    single_ticket_profit = single_ticket_cost * t\n    return bulk_discount + single_ticket_profit\n\nmax_t = 60\nwhile profit(max_t) < 4200:\n    max_t += 1\nprint(max_t)"
  },
  {
    "example_id": 797,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "from itertools import combinations\n\ntotal = 0\nfor combination in combinations([1, 2, 3, 4, 5, 6], 2):\n    total += sum(combination)\n\nprint(total)"
  },
  {
    "example_id": 798,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "343.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "x = 7 ** 3\nprint(x)"
  },
  {
    "example_id": 799,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def f(x):\n    return 2*x + 1\n\nx = -2\ny = f(-x)\nprint(x + y)"
  },
  {
    "example_id": 800,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\nf = lambda x: x**2 - 2*x + 1\ng = lambda x: sqrt(2*x + 1)\nprint(f(g(4)) - g(f(3)))"
  },
  {
    "example_id": 801,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.09090909090909091"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n = (2*3 - 5)/(2*3 + 5)\nprint(n)"
  },
  {
    "example_id": 802,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-0.25"
    ],
    "solution": "import sympy as sy\n\na = sy.solve(sy.Eq(sy.Symbol('x')**2 + 2*sy.Symbol('b')*sy.Symbol('x') + (sy.Symbol('a') - sy.Symbol('b')), 0), sy.Symbol('a'))[0]\nprint(a)"
  },
  {
    "example_id": 803,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "5.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "x = 5\ny = 3\nmy_product = x * y\nfriend_product = (x - 4) * (2 * y - 1)\nprint(my_product, friend_product)"
  },
  {
    "example_id": 804,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy as sp\nx1, y1 = sp.symbols('x1, y1')\nx2, y2 = sp.symbols('x2, y2')\ns1 = sp.sqrt((x2-x1)**2 + (y2-y1)**2)\ns2 = sp.sqrt((x1-x2)**2 + (y1-y2)**2)\nhypotenuse = s1 + s2\nprint(hypotenuse)"
  },
  {
    "example_id": 805,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.5"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "# Define a function to compute the height after bouncing back\ndef bounce_height(h):\n    return h / 2\n\n# Define a function to compute the distance traveled\ndef distance_traveled(h):\n    d = 0\n    for i in range(6):\n        d += h\n        h = bounce_height(h)\n    return d\n\n# Compute the distance traveled\nprint(distance_traveled(16))"
  },
  {
    "example_id": 806,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "apples_difference = 3 * (20 - 20)\nprint(apples_difference)"
  },
  {
    "example_id": 807,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = 5\nb = 3\n\nprint(a + 5 * b)"
  },
  {
    "example_id": 808,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 5\nwhile True:\n    x = x + 1\n    if x**0.5 == 5:\n        break\nprint(x)"
  },
  {
    "example_id": 809,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 4\nb = 3\nx = 5\n\nprint((a + 11 * b) / (a - b))"
  },
  {
    "example_id": 810,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = -2 + 6\ny = 1 - 6\nprint(x + y)"
  },
  {
    "example_id": 811,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "m = -3\nb = 63 - m\nprint(b)"
  },
  {
    "example_id": 812,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from sympy import solve\n\nc = solve(3*x**2 + 7*x + c, c)\nprint(c)"
  },
  {
    "example_id": 813,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x, y = 1 - 3, 2 - 9\nprint(x + 3, y + 9)"
  },
  {
    "example_id": 814,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1436.0"
    ],
    "annotated_answers": [
      "156.0"
    ],
    "solution": "base = 40\nbase_sq = base ** 2\ndiff = base_sq - 164\nprint(diff)"
  },
  {
    "example_id": 815,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "b = 1 - 1 * 3 + 1 * 2 - 1 * 1 + 1 * 0 + 1\nprint(b)"
  },
  {
    "example_id": 816,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "distance = ((-8) ** 2 + 6 ** 2) ** 0.5\nprint(distance)"
  },
  {
    "example_id": 817,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "a = 4\nk = 5\nx = -1\nh = -a / (2 * a)\nprint(h)"
  },
  {
    "example_id": 818,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = int(4**0.5)\nprint(a)"
  },
  {
    "example_id": 819,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def is_less_than_20(x):\n    return x**2 + 4*x + 4 < 20\n\nprint(sum(is_less_than_20(x) for x in range(1, 20)))"
  },
  {
    "example_id": 820,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(5 * 4 * 3 * 2 * 1)"
  },
  {
    "example_id": 821,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "448.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "age_now = 56 * 8\nprint(age_now)"
  },
  {
    "example_id": 822,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-18.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "b = -18\nprint(b)"
  },
  {
    "example_id": 823,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "93.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 88 - 5\nb = 88 + 5\nc = 88 * 5\nprint(b)"
  },
  {
    "example_id": 824,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "print(-3 + 2 * (1/2))"
  },
  {
    "example_id": 825,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x1 = (-18+20)/(5*1)\nx2 = (-18-20)/(5*1)\nprint((round(x1)*round(x2)))"
  },
  {
    "example_id": 826,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-36.0"
    ],
    "solution": "y = 6\nprint(y)"
  },
  {
    "example_id": 827,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.142857142857143"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7\nprint(x + 1/x)"
  },
  {
    "example_id": 828,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "-6.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(6)\nprint(-6)"
  },
  {
    "example_id": 829,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(144 // 10)"
  },
  {
    "example_id": 830,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import log\nprint(log(64, 2))"
  },
  {
    "example_id": 831,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import isprime\n\ndef f(n):\n    return n**2 + n + 17\n\ndef prime_between(a, b):\n    for i in range(a, b+1):\n        if isprime(i):\n            return i\n    return None\n\nprint(f(10) - f(9))"
  },
  {
    "example_id": 832,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def clubsuit(x, y):\n    return (x ** 3) + y\n\nprint(clubsuit(2, 4))"
  },
  {
    "example_id": 833,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def degree(p):\n    return len(p)-1\n\ndef coeff(p, i):\n    return p[i]\n\ndef mul(p, q):\n    return [sum(x*y for x, y in zip(p, q[i:])) for i in range(len(q)+1)]\n\ndef deriv(p):\n    return [x*i for x, i in zip(p, range(1, len(p))) if i]\n\ndef solve(p, q):\n    return [x for x in solve_triangular(p, q)]\n\ndef solve_triangular(p, q):\n    if len(p) == 1:\n        yield q[0] / p[0]\n    else:\n        for x in solve_triangular(deriv(p), [q[0]] + [0]*(len(p)-1)):\n            yield x\n\np = [1, 2, 3, 4, 5]\nb = degree(p)\ng = [coeff(p, i) for i in range(b+1)]\nh = mul(p, g)\nprint(b)"
  },
  {
    "example_id": 834,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import log, exp\nx = log(1080, 6)\nprint(x)"
  },
  {
    "example_id": 835,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import sympy\np = sympy.Poly(sympy.symbols('p'), domain='ZZ')\nq = sympy.Poly(sympy.symbols('q'), domain='ZZ')\nprint(p.degree() + q.degree())"
  },
  {
    "example_id": 836,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\n\nP = sympy.Point(7, 8)\nQ = sympy.Point(9, 0)\n\nL1 = sympy.Line(sympy.Point(0, 2), slope=2)\nL2 = sympy.Line(P, slope=2)\n\nprint(P.x + P.y)"
  },
  {
    "example_id": 837,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "672.0"
    ],
    "annotated_answers": [
      "672.0"
    ],
    "solution": "alan_account = 500 * (1 + 0.03) ** 10\nprint(round(alan_account))"
  },
  {
    "example_id": 838,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "total_cars = 12 * (12 + 1) / 2\nprint(total_cars)"
  },
  {
    "example_id": 839,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-39.0"
    ],
    "annotated_answers": [
      "-39.0"
    ],
    "solution": "a = -1\nb = 5\nprint(-a - b**2 + 3*a*b)"
  },
  {
    "example_id": 840,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 15 - m\nm_and_n_sum = m + n\nm_and_n_sum - 47 = 3m + 4n\n3m + 4n - 47 = 0\n-3m - 4n = -47\n4n = -47 + 3m\nn = (-47 + 3m) / 4\nn = (30 - 3m) / 4\nm = 30 - n\nm = 30 - (30 - 3m) / 4\nm = 9"
  },
  {
    "example_id": 841,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "-150.0"
    ],
    "solution": "# Find a, b, c\na = 6\nb = 12\nc = -8\n\n# Find x\nx = -b/(2*a)\n\n# Find k\nk = a*x**2 + b*x + c\n\nprint(k)"
  },
  {
    "example_id": 842,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.598076211353316"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "print(3*(2**3 + 3**0.5)/2)"
  },
  {
    "example_id": 843,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "new_cans = 125 / 5\nprint(new_cans)"
  },
  {
    "example_id": 844,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.599999999999994"
    ],
    "annotated_answers": [
      "22.8"
    ],
    "solution": "blue_box_weight = 3 * 15.2\nprint(blue_box_weight)"
  },
  {
    "example_id": 845,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-63.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "x = 18\na = 1\nb = -63\nprint(a * b)"
  },
  {
    "example_id": 846,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nprint(x**2 + 2*x*(5-x) + (5-x)**2)"
  },
  {
    "example_id": 847,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "-3.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def f(c):\n    return 3/(2*c-3)\n\ndef f_inv(c):\n    return 2*c+3\n\nc = 0.5\n\n# find kn, lm, and mc+n\nkn = f(c)*c*f_inv(c)\nlm = f_inv(c)*c*f(c)\n\n# find mc+n\nmc_n = kn-lm\n\n# find km+n\nkm_n = lm-kn\n\nprint(kn, lm, mc_n, km_n)"
  },
  {
    "example_id": 848,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0625"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "x = 2\nprint(x**4 + 1/x**4)"
  },
  {
    "example_id": 849,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "num_criminals_in_4_5_hrs = 6 * 4.5\nprint(num_criminals_in_4_5_hrs)"
  },
  {
    "example_id": 850,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(24 - (2 * 4 - 3))"
  },
  {
    "example_id": 851,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "127.0",
      "5.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "import sympy as sp\nx, y = sp.symbols('x, y')\neq1 = 2 ** (x + 1) - 4 ** (x - 7)\neq2 = 8 ** (3 * y) - 16 ** (y + 13)\neq1_sol = sp.solve(eq1, x)[0]\neq2_sol = sp.solve(eq2, y)[0]\nprint(eq1_sol + eq2_sol)"
  },
  {
    "example_id": 852,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "from math import sqrt\n\nside_length = int(sqrt(3) * 3)\nprint(side_length)"
  },
  {
    "example_id": 853,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9563.864807194024"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def geometric_sequence_term(a, r, n):\n    return a * r ** (n - 1)\n\nninth_term = geometric_sequence_term(1053, (13/9), 9)\nseventh_term = geometric_sequence_term(1053, (13/9), 7)\nprint(seventh_term)"
  },
  {
    "example_id": 854,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "from sympy import solve, symbols\n\nx = symbols('x')\ny = (1/2) * x**2 - 9\n\nsol = solve(y, x)\n\na = sol[0]\n\nprint(a**2)"
  },
  {
    "example_id": 855,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8"
    ],
    "annotated_answers": [
      "2000.0"
    ],
    "solution": "daily_calories = 40 * 0.02\nprint(daily_calories)"
  },
  {
    "example_id": 856,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# first sequence\nfirst_term = 0\nsecond_term = 3\nthird_term = 6\n\n# second sequence\nfirst_term_2 = second_term\nsecond_term_2 = third_term\nthird_term_2 = 9\n\nprint(third_term_2)"
  },
  {
    "example_id": 857,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "136.0"
    ],
    "solution": "a = 25 - 9\nprint(a)"
  },
  {
    "example_id": 858,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return 2*x\n\ndef f_inv(x):\n    return x/2\n\ndef f_sub(x):\n    return f(x) - f_inv(x)\n\nprint(f_sub(5))"
  },
  {
    "example_id": 859,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111",
      "0.012345679012345678",
      "0.11111111111111112",
      "0.1111111111111111",
      "0.012345679012345677"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(3**-2, 9**-2, 27**(-2/3), 9*81**-1, 243**(-4/5))"
  },
  {
    "example_id": 860,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.5"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "y = 15.5 - 1\nprint(y)"
  },
  {
    "example_id": 861,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "m = -1\nn = m + m + 1\nprint(n)"
  },
  {
    "example_id": 862,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(int(pow(7/4, 2)))"
  },
  {
    "example_id": 863,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import numpy as np\nx = np.arange(0, 100, 1)\ny = -2*x + 18\ncount = 0\nfor i in range(len(x)):\n    if np.floor(x[i]) == x[i] and np.floor(y[i]) == y[i]:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 864,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "susan_cost = 20 * 4\npam_cost = 20 * 5 * 0.7\nprint(pam_cost - susan_cost)"
  },
  {
    "example_id": 865,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "10.0",
      "25.0",
      "2.0",
      "5.0",
      "25.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nk = sympy.Symbol('k')\neq = k*x**2 + 10*x + k\neq_factored = sympy.factor(eq)\nprint(eq_factored)\nsolutions = sympy.solve(eq_factored, x)\nprint(solutions)"
  },
  {
    "example_id": 866,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(len(range(10)))"
  },
  {
    "example_id": 867,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "perimeter = 12\narea = perimeter ** 2\nprint(area)"
  },
  {
    "example_id": 868,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "regular_packs = 166 // 4\nprint(regular_packs)"
  },
  {
    "example_id": 869,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import *\n\nh = lambda x: sqrt((x**3+72)/2)+1\n\nprint(h(6))"
  },
  {
    "example_id": 870,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4075.0"
    ],
    "annotated_answers": [
      "1160.0"
    ],
    "solution": "import math\n\n# 1. Calculate the interest earned in the first quarter\n# 1990-04-01 to 1990-07-01\ninterest = 1000 * (1 + 0.075/4)\n\n# 2. Calculate the interest earned in the second quarter\n# 1990-07-01 to 1990-10-01\ninterest += 1000 * (1 + 0.075/4)\n\n# 3. Calculate the interest earned in the third quarter\n# 1990-10-01 to 1991-01-01\ninterest += 1000 * (1 + 0.075/4)\n\n# 4. Calculate the interest earned in the fourth quarter\n# 1991-01-01 to 1991-04-01\ninterest += 1000 * (1 + 0.075/4)\n\nprint(math.ceil(interest))"
  },
  {
    "example_id": 871,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "import sympy\n\n# Find the equation of the parabola\nx1, y1 = -3, 3\nx2, y2 = 1, 3\nx3, y3 = 0, 0\n\n# Find the coefficients\na = (y2 - y1) / (x2 - x1)\nb = (y3 - y1) / (x3 - x1)\nc = y1 - a*x1**2 - b*x1\n\n# Find the value 100a+10b+c\nprint(100*a+10*b+c)"
  },
  {
    "example_id": 872,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "def g(x):\n    return 4 * x**2 - 3 * x + 2\nprint(g(-3))"
  },
  {
    "example_id": 873,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "n = -36 / 9\nprint(n)"
  },
  {
    "example_id": 874,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "# The solution is -3 < x < 6\n# There are 5 integers in the solution\nprint(5)"
  },
  {
    "example_id": 875,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "print(2**6)"
  },
  {
    "example_id": 876,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "pen_cost = 924 / 7\npencil_cost = pen_cost / 11\nprint(pencil_cost)"
  },
  {
    "example_id": 877,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100000.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(50 * 200 * 10)"
  },
  {
    "example_id": 878,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "def f(x):\n    return x - 3\n\ndef q(x):\n    return x * b + 1\n\nf(q(1))"
  },
  {
    "example_id": 879,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60000.0"
    ],
    "annotated_answers": [
      "60000.0"
    ],
    "solution": "sum = 0\nfor i in range(501, 700, 2):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 880,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.6"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "first_day_pages = 248 / 5\nprint(first_day_pages)"
  }
]