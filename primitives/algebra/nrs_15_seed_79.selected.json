[
  {
    "example_id": 0,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "first_term = 1\nthird_term = 5\nfourth_term = first_term * third_term\nprint(fourth_term)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy as sp\na = sp.Symbol('a')\n\nexp = sp.exp(1)\n\nleft = sp.Pow(8, -1) / sp.Pow(4, -1)\nright = sp.Pow(a, -1)\n\nprint(left - right)\n\nprint(left - right - exp)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17157.0"
    ],
    "annotated_answers": [
      "268.0"
    ],
    "solution": "import math\n\nradius = 64\n\narea = 0\n\nfor i in range(20):\n\n    area += math.pi * radius ** 2\n\n    radius = radius / 2\n\nprint(int(area))"
  },
  {
    "example_id": 3,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7945.0"
    ],
    "annotated_answers": [
      "7945.0"
    ],
    "solution": "rent = 5000\nelectricity_cost = 1.45\ntotal_cost = 16520.25\nelectricity_used = (total_cost - rent) / electricity_cost\nprint(electricity_used)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "one_cake = 1.5\ntwo_cake = one_cake * 2\nprint(two_cake)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "164.0"
    ],
    "solution": "# Step 1: Compute the win ratio at the start of the weekend\nwin_ratio_start = 0.5\n\n# Step 2: Compute the win ratio after playing four matches\nwin_ratio_end = 0.5 * 3 / (3 + 1)\n\n# Step 3: Compute the largest number of matches she could've won before the weekend\n# The largest number is 3.\n\n# Step 4: Check if the largest number of matches is larger than the win ratio at the end of the weekend\nif 3 >= win_ratio_end:\n    print(\"The largest number of matches is:\", 3)\nelse:\n    print(\"The largest number of matches is:\", 4)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = 2\ny = x + 2\nx_squared = x ** 2\ny_squared = y ** 2\ndiff = y_squared - x_squared\nprint(diff)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "z = 2*x\nprint(z/y)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = (12+8)/2\ny = (12-8)/2\nprint(2*x - x*y)"
  },
  {
    "example_id": 9,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "7.0",
      "6.0",
      "6.0",
      "8.0",
      "7.0",
      "4.0",
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy\nx, y, K = sympy.symbols('x y K')\neq1 = 6*x + 4*y - 7\neq2 = K*x + 8*y - 7\nsol = sympy.solve((eq1, eq2), (x, y, K))\nprint(sol)"
  },
  {
    "example_id": 10,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "540.0"
    ],
    "annotated_answers": [
      "1545.0"
    ],
    "solution": "height = 405\ndistance = height / 3\ntotal_distance = 0\nfor i in range(4):\n    total_distance += distance\nprint(total_distance)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0625"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "x = 1/2\nprint((x-1/x)**4)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8000000.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "m, n = 1, 2\ns = 2000\ns_squared = s**2\ns_squared_sum = s_squared / (m - n)\ns_sum = s / (m - n)\nprint(s_squared_sum - s_sum**2)"
  },
  {
    "example_id": 13,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3670.0"
    ],
    "annotated_answers": [
      "3702.0"
    ],
    "solution": "# N = 1/3\n# floor(10N) + floor(100N) + floor(1000N) + floor(10000N)\n# = floor(10N) + floor(100N) + floor(1000N) + floor(10000N)\n# = floor(10/3) + floor(100/3) + floor(1000/3) + floor(10000/3)\n# = floor(3) + floor(33) + floor(333) + floor(3333)\n# = 3 + 33 + 333 + 3333\n# = 3670\nprint(3670)"
  },
  {
    "example_id": 14,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "count = 0\nfor x in range(-10, 10):\n    for y in range(-10, 10):\n        if (x**2 + y**2) == 25:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "import math\nc = -10 + math.sqrt(100)\nprint(c)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "A = 1\nB = 1\nC = 1\nD = -1\nprint(A+B+C+D)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "smallest = 66 // 3\nprint(smallest)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "smaller = 25 - 11\nprint(smaller)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.189207115002721"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(8 ** (1/12))"
  },
  {
    "example_id": 20,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "445.0"
    ],
    "solution": "price_per_widget = 2.75\ncost_per_widget = 0.5\ntotal_cost = 1000 + (price_per_widget - cost_per_widget) * 0\nprint(total_cost)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(0.5 * (1/3) * 36)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.041675524376416"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "x = 7 - 1 / 7\nprint(x ** 2 + 1 / x ** 2 + 1)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(7 + 7)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "x = 2\nprint(x**(x+1)**x)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65536.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# The number of cells at the end of each day\n# is the sum of the number of cells at the end of the previous day\n# plus the number of cells produced by the previous day\n# so the total number of cells at the end of the $15^\\text{th}$ day\n# is the sum of the numbers of cells at the end of each day\n# from the $15^\\text{th}$ day back to the first day\n# and the number of cells at the end of the first day\n\n# The number of cells at the end of the first day is 2\nn_cells = 2\n\n# The number of cells at the end of the $15^\\text{th}$ day is\n# the sum of the numbers of cells at the end of each day\n# from the $15^\\text{th}$ day back to the first day\n# and the number of cells at the end of the first day\nfor i in range(15):\n    n_cells += n_cells\nprint(n_cells)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "y = 9\nprint(y)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1120.0"
    ],
    "annotated_answers": [
      "1120.0"
    ],
    "solution": "print(43**2 - 27**2)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nprint(sympy.log(27, 3))"
  },
  {
    "example_id": 29,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1374.0"
    ],
    "annotated_answers": [
      "194.0"
    ],
    "solution": "a = 2\nd = 30 - 2\nn = 50\n\nprint(a + (n-1)*d)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "362885.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from math import prod\n\ndef sum_of_integers(n):\n    \"\"\"Return the sum of integers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))\n\n# Given the figure above, the sum of the integers\n# in the four smallest squares is 1 + 2 + 3 + 4 = 10.\n# The integers in each of the eight smallest triangles\n# are placed such that the pairs of integers in each\n# of the four smallest squares have the same sum.\n# Therefore, the sum of the integers in the eight\n# smallest triangles is 10 + 10 + 10 + 10 = 40.\n# The total sum of the integers in the figure is\n# 1 + 2 + 3 +... + 9 + 10 = 45.\nprint(sum_of_integers(9) + prod(range(2, 10)) - 40)"
  },
  {
    "example_id": 31,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-625.0",
      "-1.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "from sympy import sympify\nprint(sympify('(-125)**(4/3)'))"
  },
  {
    "example_id": 32,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0",
      "30.0",
      "48.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import Abs\n\ndef f(x):\n    return (Abs(x**2 + 3*x - 4) + Abs(x**2 + 9*x + 20))\n\nprint(f(0))\nprint(f(1))\nprint(f(2))"
  },
  {
    "example_id": 33,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-5.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = (7 + (-3)) / 2\ny = (-6 + (-4)) / 2\nprint(x, y)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "f_inv = lambda a: 1 / (1 - a)\na = 0.5\nprint(f_inv(a) * a * f_inv(a))"
  },
  {
    "example_id": 35,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = 3\nn = 1\nprint(m+n)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "4.0",
      "33.0",
      "4.0",
      "1.0",
      "3.0",
      "4.0",
      "33.0",
      "4.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nroots = solve(2*x**2 - 7*x + 2, x)\na, b = roots\nprint(1/(a-1) + 1/(b-1))"
  },
  {
    "example_id": 37,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print((9-4j)-(-3-4j))"
  },
  {
    "example_id": 38,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "-55.0"
    ],
    "solution": "a = 0\nb = 5\nc = 0\n\nprint(100*a + 10*b + c)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = 2\ny = 3\nprint(x+y)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "128.0"
    ],
    "annotated_answers": [
      "103.0"
    ],
    "solution": "second_largest = 129 - 1\nprint(second_largest)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "12.0",
      "12.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import sqrt\n\ndef find_root(n):\n    if n == 0:\n        return 0\n    else:\n        return sqrt(12 - find_root(n-1))\n\nprint(find_root(4))"
  },
  {
    "example_id": 42,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2704.0"
    ],
    "annotated_answers": [
      "575.0"
    ],
    "solution": "import math\nn = 8.71 - 2.71 / (1001 - 1000) * 1001\nprint(n)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16777216.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(0.5 * 1024 / 0.125 * 2 ** 12)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Original ratio is 4:3\nblue_marbles = 4\nyellow_marbles = 3\n\n# After adding 5 blue marbles and removing 3 yellow marbles,\n# the ratio becomes 7:3\nblue_marbles += 5\nyellow_marbles -= 3\n\n# The ratio is 7:3\nprint(blue_marbles, yellow_marbles)\n\n# To find out how many blue marbles were in the bag before adding more,\n# we can divide the original number of yellow marbles by the ratio\n# (which is 4:3) to get the number of blue marbles in the bag before adding more\nprint(yellow_marbles / 4)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2))\n\nprint(distance(1, 2, -4, -10))"
  },
  {
    "example_id": 46,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x, y = 6 + 1, 8 + 1\nprint(x + y)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 4\nb = -1\nc = -1\nprint(a+b+c)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1995.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "start = 13\nend = 2008\nstep = end - start\nprint(step)"
  },
  {
    "example_id": 49,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "print(14-15)"
  },
  {
    "example_id": 50,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "b = 3\nprint(b)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5000.0"
    ],
    "annotated_answers": [
      "5000.0"
    ],
    "solution": "print(255**2 - 245**2)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\neq_x2 = x**2 + 2*x + 3\neq_x4 = x**2 + 4*x + 3\nx2_x4 = eq_x2 - eq_x4\nc = x2_x4.subs(x, 2)\nprint(c)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0",
      "2.0",
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import log, exp\nx = exp(log(49) / 7)\nprint(x)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "125.0",
      "27.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\n\nb = sympy.symbols('b')\n\n# 125^b = 5\n# 125^b = 125^b * 1\n# 5 = 125^b * 1\n# 125^b = 1/5\n# 125^b = 1/5 * 1\n# 1 = 125^b * 1/5\n# 125^b = 1/5\n\n# 27^b = c\n# 27^b = 27^b * 1\n# c = 27^b * 1\n# c = 27^b\n# c = 125^b * 1\n# c = 125^b\n\n# 125^b = 1/5\n# 125^b = 1/5 * 1\n# 1 = 125^b * 1/5\n# 125^b = 1/5\n\n# 27^b = 125^b\n# 27^b = 1/5\n# b = log(27)/log(125)\nb = sympy.log(27, 125)\nprint(b)\n\n# c = 125^b\nc = 125 ** b\nprint(c)"
  },
  {
    "example_id": 55,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "2.0",
      "48.0",
      "108.0",
      "2.0",
      "2.0",
      "-6.0",
      "2.0",
      "48.0",
      "108.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import solve, symbols\nx, y = symbols('x y')\nexpr = 2*x**2 + 3*y**2 + 8*x - 24*y + 62\nsol = solve(expr, [x, y])\nprint(sol)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "min_miles = 4 * 3 # 12\nprint(min_miles)"
  },
  {
    "example_id": 57,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5",
      "0.707106781186548",
      "0.5",
      "2.0",
      "1.0",
      "-0.5",
      "0.707106781186548",
      "0.5",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\ns = sympy.Symbol('s')\nx = sympy.Symbol('x')\nexpr = (x**2 + s*x - 0.5)\nsol = sympy.solve(expr, x)\nprint(sol)"
  },
  {
    "example_id": 58,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-987.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 4\nb = 1\nc = 2\n\na_squared = (a - 7 * b + 8 * c)**2\nb_squared = (8 * a + 4 * b - c)**2\nprint(a_squared - b_squared)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.6"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 3\nb = 5\nc = 15\nd = 6\n\nprint(a*d/b)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "def cone_volume(r, h):\n    return (1/3) * pi * r**2 * h\n\ndef cone_height(r, h):\n    return 24\n\ndef cone_radius(r, h):\n    return 3*r\n\nr = 1\nh = cone_height(r, cone_height(r, 24))\nprint(h)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 3\ny = 9\n\n# Write the function\ndef f(x, y):\n    return y**2 - 3*x*y + 8\n\n# Call the function\nprint(f(x, y))"
  },
  {
    "example_id": 62,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sym\n\na, b, c = sym.symbols('a b c')\nx, y = sym.symbols('x y')\n\neq1 = a*x + b*y + c == x + 7\neq2 = a + b*x + c*y == 2*x + 6*y\neq3 = a*y + b + c*x == 4*x + y\n\n# solve for a, b, c\nsol = sym.solve([eq1, eq2, eq3], [a, b, c])\n\n# print the solution\nprint(sol)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "multiples = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\nprint(sum(multiples))"
  },
  {
    "example_id": 64,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4005.0"
    ],
    "annotated_answers": [
      "4005.0"
    ],
    "solution": "def nth_odd(n):\n    return (n * 2) - 1\n\nprint(nth_odd(2003))"
  },
  {
    "example_id": 65,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve\nfrom sympy.abc import c\nfrom sympy.abc import x\nf = 4*x**7 + x**5 + 3*x**2 - 2*x + c\nf_solution = solve(f.subs(x,-1),c)\nprint(f_solution)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pints_first_3 = 1.5\npints_next_10 = pints_first_3 * 10\nprint(pints_next_10)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 2\nb = 1\nprint(a/b + b/a - a*b)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0",
      "8.0"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "from sympy import symbols, solve\n\nt = symbols('t')\ny = -16*t**2 + 26*t + 105\nsol = solve(y, t)[0]\nprint(sol)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.999500998003992",
      "-0.500249625561658",
      "0.866169477209129",
      "0.999500998003992",
      "-0.500249625561658",
      "0.866169477209129"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol\nfrom sympy import solve\nx = Symbol('x')\nroots = solve(2003/2004*x + 1 + 1/x - 0, x)\nreciprocals = [1/r for r in roots]\nprint(sum(reciprocals))"
  },
  {
    "example_id": 70,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.196152422706632"
    ],
    "annotated_answers": [
      "5.4"
    ],
    "solution": "import math\nx = math.sqrt(27)\nprint(x)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n = (55 + 1)/2\nprint(n)"
  },
  {
    "example_id": 72,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "0.5"
    ],
    "solution": "x = 3\nx = -5\nprint(x + x)"
  },
  {
    "example_id": 73,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "a = -7"
  },
  {
    "example_id": 74,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "6.0",
      "2.0",
      "2.0",
      "6.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import symbols, solve\nx = symbols('x')\neq = 2*x**2 + 4*x - 1\nsolutions = solve(eq)\nsquares = [s**2 for s in solutions]\nprint(sum(squares))"
  },
  {
    "example_id": 75,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\n\ndef distance(a, b):\n    return math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)\n\nprint(distance((-3,7), (2,-5)))"
  },
  {
    "example_id": 76,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.24761904761904763"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "free_hours = 105\ntotal_hours = 105 + 105\nextra_hours = total_hours - free_hours\nextra_cost = 26\ncents_per_hour = extra_cost / extra_hours\nprint(cents_per_hour)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "73.5"
    ],
    "solution": "j = 42 / 56 * 32\nprint(round(j, 1))"
  },
  {
    "example_id": 78,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "x = 5 ** 2 + 18\nprint(x)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2011.0"
    ],
    "annotated_answers": [
      "2015.0"
    ],
    "solution": "def triangular_number(n):\n    return n * (n + 1) // 2\n\ndef find_x(b):\n    b_plus_1 = b + 1\n    b_minus_1 = b - 1\n    b_plus_1_minus_b = triangular_number(b_plus_1) - triangular_number(b)\n    b_minus_1_minus_b = triangular_number(b_minus_1) - triangular_number(b)\n    return b_plus_1_minus_b // b_minus_1_minus_b\n\ndef find_b(x):\n    b = 2011\n    while True:\n        b_plus_1 = b + 1\n        b_minus_1 = b - 1\n        b_plus_1_minus_b = triangular_number(b_plus_1) - triangular_number(b)\n        b_minus_1_minus_b = triangular_number(b_minus_1) - triangular_number(b)\n        if b_plus_1_minus_b // b_minus_1_minus_b == x:\n            return b\n        b += 1\n\nx = find_x(2011)\nb = find_b(x)\nprint(b)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "350.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "print(113+276-13-26)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "625.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "width = 100 / 4\nprint(width * width)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\neq1 = sympy.Eq((2**x-2)*(5*2**x+10), 3*sympy.Pow(4, x)+12)\nsolution = sympy.solve(eq1)\nprint(solution)"
  },
  {
    "example_id": 83,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "1024.0",
      "4.0",
      "5.0",
      "2.0",
      "1024.0",
      "2.0",
      "5.0",
      "2.0",
      "1024.0",
      "2.0",
      "5.0",
      "2.0",
      "1024.0",
      "4.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\neq = (2**(x+1))**3 * 4**x - 8192\nsol = sympy.solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import sympy\n\na, b, x = sympy.symbols('a b x')\n\nexpression = a ** 2 + 2 * a * b + b ** 2\nexpression = expression.expand()\nexpression = expression.subs({a: 2, b: x})\n\nprint(expression.simplify())"
  },
  {
    "example_id": 85,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "degree_f = 6\ndegree_g = 3\ndegree_h = 36 - degree_f - degree_g\nprint(degree_h)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "def f(x):\n    return x - 7\n\ndef g(x):\n    return 7 - x\n\ndef h(x):\n    return x & f(x) & g(x)\n\nprint(h(15))"
  },
  {
    "example_id": 87,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import floor, ceil, pi, sqrt\n\ndef f(n):\n    if n >= 4:\n        return floor(n)\n    else:\n        return ceil(n)\n\nprint(f(pi/3) + f(sqrt(45)) + f(8**(2/3)))"
  },
  {
    "example_id": 88,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.200000000000003"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "x = (3*2 + 2)/5\ny = (3*2 - 2)/5\nprint(24*x - 14*y)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = sympy.Function('f', real=True)(x)\ng = sympy.Function('g', real=True)(x)\nf = x - 3\ng = x**2 + 7*x - 30\nprint(len(sympy.solve(f, g, x)))"
  },
  {
    "example_id": 90,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "volume = 600 / 8\nprint(volume)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(531**2 - 2*531*530 + 530**2)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import S\nx = S('x')\nprint(x**(-1) > x)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "treeks = 10\nsquigs = 3\ngoolees = 1\n\n# 1 squig = 2 treeks + 1 goolee\n\n# 2 treeks = 2 * 10 = 20\n# 1 goolee = 10\n# 1 squig = 20 + 10 = 30\n\nprint(treeks + goolees)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# The ratio is 3:5\n# When 4 is subtracted from the lesser of the two numbers and 8 is added to the larger of the two, the new ratio is 2:7\n# The ratio is 2:7\n# The ratio is 1:3\n# The greater of the two numbers before 8 is added to it is 3\n\nprint(3)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.899999999999965"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import numpy as np\n\ndef h(x):\n    return np.sqrt(25 - x ** 2) + np.sqrt(-x + 2)\n\nx_values = np.arange(-5, 5, 0.1)\ny_values = [h(x) for x in x_values]\n\nwidth = x_values[-1] - x_values[0]\nprint(width)"
  },
  {
    "example_id": 96,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "187.5"
    ],
    "annotated_answers": [
      "187.5"
    ],
    "solution": "calories_in_12_fluid_ounces = 125 * 12 / 8\nprint(calories_in_12_fluid_ounces)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "k = 6\nprint(k)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(2*(-2)**2+3*(-2)+4)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "import sympy\na, b = sympy.symbols('a, b')\n# solve for a\na = sympy.log(32, 2)\n# solve for b\nb = sympy.log(125, a)\nprint(b)\nprint(a)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.688247201611684"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def revenue(p):\n    return 120 - 3 * p\n\ndef derivative(p):\n    return -3\n\ndef max_revenue(p):\n    return p - derivative(p) / (2 * derivative(p) ** 2 + 1) ** 0.5\n\nprint(max_revenue(10))"
  },
  {
    "example_id": 101,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\na = sympy.Symbol('a')\nsol = sympy.solve(a*x**2+8*x+4,x)\nprint(sol)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.31"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "compound_rate = (66_200 - 20_000) / 20_000\nprint(compound_rate)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "print(34-10 + 20-9 + 55-10)"
  },
  {
    "example_id": 104,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "700.0"
    ],
    "annotated_answers": [
      "700.0"
    ],
    "solution": "print(32**2 - 18**2)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(round(3/2) ** 2 + round(pow(3/2, 2)))"
  },
  {
    "example_id": 106,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0",
      "15.0",
      "15.0",
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "for i in range(1, 20):\n    for j in range(1, 20):\n        if (i * j - (i + j)) == 39:\n            print(i + j)"
  },
  {
    "example_id": 107,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def F(a, b, c, d):\n    return a ** b + c * d\n\nb = 2\nprint(F(6, b, 4, 3))"
  },
  {
    "example_id": 108,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def f(n):\n    if n > 1:\n        return n ** 3 + 2 * n - 1\n    elif n <= 1:\n        return n - 1\n\nprint(f(0) + f(1) + f(2))"
  },
  {
    "example_id": 109,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\n\ndef f(x):\n    if x < 0:\n        return -x**2 - 1\n    elif 0 <= x < 4:\n        return 2\n    else:\n        return sqrt(x)\n\nprint(f(pi))"
  },
  {
    "example_id": 110,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.25"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "S = 13 / 2\nprint(S**2)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-33.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\na, b = sympy.solveset(x**2 - 6*x + 2 - 29, x)\nprint(2*a - 3*b)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import solve, symbols\na = symbols('a', integer=True)\nx = symbols('x', integer=True)\nsolutions = solve((x**2 + a*x + 5*a, 0), x)\nprint(len(solutions))"
  },
  {
    "example_id": 113,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "num = 5 + 8\nden = 5 + 8\nprint(num / den)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from math import sin, pi\n\ndef f1(x):\n    return -6*sin(x*pi/6)\n\ndef g(x):\n    return f1(x)\n\ndef g_of_g_of_minus_1():\n    return g(g(-1))\n\nprint(g_of_g_of_minus_1())"
  },
  {
    "example_id": 115,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "2.0",
      "4.0",
      "1.0",
      "5.0",
      "2.0",
      "4.0",
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\nc = sympy.Symbol('c')\nf = sympy.Function('f')\nx = sympy.Symbol('x')\n\nf_expr = (2*x**2 + x + 5)/(x**2 + 4*x + c)\nf_expr_expanded = f_expr.expand()\nf_expr_expanded_simplified = f_expr_expanded.simplify()\n\nprint(f_expr_expanded_simplified)\n\n# find the smallest integer value of c that makes the function have a domain of all real numbers\n# f(x) has a domain of all real numbers iff c!= -5\nc_solution = sympy.solve(f_expr_expanded_simplified - c + 5, c)\nprint(c_solution)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "c = -1\nprint(c)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 5 * 10 * 18 / 30\nprint(x)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "m = 3\nprint(m)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = (-50) / (2 * 10)\nprint(x)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\nprint(math.log(4, 2))"
  },
  {
    "example_id": 121,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "y = 8 - 5 * (-2) + 4 * (-2) ** 2\nprint(y)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x_list = [x for x in range(-100, 101) if abs(2-abs(x)) == 1]\nprint(sum([x**2 for x in x_list]))"
  },
  {
    "example_id": 123,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\nx, y, a, b, c = sympy.symbols('x, y, a, b, c')\nAB = (b - a) / (c - a)\nBC = (c - b) / (a - b)\nk = (AB + BC) / (1 + BC)\nprint(k)"
  },
  {
    "example_id": 124,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "395661.0"
    ],
    "annotated_answers": [
      "74726.0"
    ],
    "solution": "import math\n\namount_invested = 100000 / (1 - (1 + 0.06) ** -5)\nprint(math.ceil(amount_invested))"
  },
  {
    "example_id": 125,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.724744871391589"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = (5+6**0.5) / 2\nprint(x)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import log\nprint(log(1, 2))"
  },
  {
    "example_id": 127,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "N = 3\nprint(N)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "27.0",
      "5.0",
      "245.0",
      "27.0",
      "5.0",
      "245.0",
      "27.0",
      "5.0",
      "251.0"
    ],
    "annotated_answers": [
      "93.0"
    ],
    "solution": "from sympy import sqrt\nA = 6\nB = 245 + 3 * sqrt(125) + 4 * sqrt(45)\nC = sqrt(B)\nprint(A/C)\nprint(A + B + C)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import sympy\n\nu = sympy.Symbol('u')\nexpr = (u+4)*(u-1) - (u-3)*(u+6)\nprint(expr.expand())"
  },
  {
    "example_id": 130,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "13.5"
    ],
    "solution": "print(abs(18*A-18*B))"
  },
  {
    "example_id": 131,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "from math import sin, cos, pi\n\ndef f(x):\n    return (4-x)/2\n\ndef g(x):\n    return 2*x - 4\n\nprint(f(g(1))*g(f(1)))"
  },
  {
    "example_id": 132,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-29.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = (20 - 44) / (2*2)\nb = 21 - 44\nprint(a + b)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import numpy as np\n\n# coordinates of point A\na = 3\nb = 4\n\n# coordinates of point B\nc = 6\nd = 8\n\n# coordinates of midpoint M\nm = (a + c) / 2\nn = (b + d) / 2\n\n# coordinates of point A'\na1 = a + 14\nb1 = b + 20\n\n# coordinates of point B'\nc1 = c - 2\nd1 = d - 4\n\n# coordinates of midpoint M'\nm1 = (a1 + c1) / 2\nn1 = (b1 + d1) / 2\n\n# distance between M and M'\ndistance = np.sqrt((m - m1) ** 2 + (n - n1) ** 2)\nprint(distance)"
  },
  {
    "example_id": 134,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0",
      "40.0",
      "110.0",
      "80.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 20\nm = 2 * n\nx = 70 + m + n - 20\ny = 80\nprint(n)\nprint(m)\nprint(x)\nprint(y)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "5.0",
      "1.0",
      "5.0",
      "12.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "from sympy import expand_multinomial, expand_power_base\nfrom sympy import sqrt\nx = (4 / (sqrt(5) + 1) * sqrt(5) + 1) ** (1 / 4)\nx1 = expand_multinomial(x)\nx2 = expand_power_base(x1)\nprint(x2 ** 48)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "f = lambda x: x + 1\ng = lambda x: x ** 2 + 3\nprint(f(g(2)))"
  },
  {
    "example_id": 137,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "# ceil(x) returns the smallest integer not less than x\n# (a) ceil(3.6) = 4\n# (b) ceil(3.6)^2 = 16\n# (c) 16 - 16 = 0\nprint(0)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "238.0"
    ],
    "annotated_answers": [
      "121.0"
    ],
    "solution": "n = 400 - 81 - 81\nprint(n)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "2.0",
      "14.0",
      "19.0",
      "7.0",
      "19.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "361.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nprint(49*x**2+14*x*(19-7*x)+(19-7*x)**2)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\na = sp.Symbol('a')\nb = sp.Symbol('b')\neq1 = 5 * a + 2 * b\neq2 = a * b\nsol = sp.solve([eq1, eq2], [a, b])\nprint(sol)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def zeno_painting(size):\n    days = 0\n    while size > 1:\n        days += 1\n        size /= 2\n    return days\n\nprint(zeno_painting(15*15))"
  },
  {
    "example_id": 142,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\nprint(x**3 - 2*x + 1)"
  },
  {
    "example_id": 143,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# a + b*sqrt(c)\na = 6\nb = 1\nc = 2 + 6 + 2 + 6\nprint(a+b+c)"
  },
  {
    "example_id": 144,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "abby_and_damon_weight = 200 - 180\nprint(abby_and_damon_weight)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = -5\ny = 3\nprint(x + y)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "A = 1\nB = 2\nC = 3\nD = 2\nprint(A+B+C+D)"
  },
  {
    "example_id": 147,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a = 2\nb = 1\nprint(a+b)"
  },
  {
    "example_id": 148,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import solve\n\n# Step 1\n# Solve for n\n# m + n + p = 25 / (m + n + p)\n# m + n + p = 25 / (m + n + p)\n# m + n + p - 25 / (m + n + p) = 0\n# (m + n + p) (m + n + p - 25) = 0\n# m + n + p = 0 or m + n + p = 25\n# n + p = -m or n + p = 25 - m\n\n# Step 2\n# Solve for p\n# mn + mp + np = 4\n# m^2n + mnp + np^2 = 4\n# m^2n + mnp - 4 = 0\n# (m^2 - 4)(n + p) = 0\n# (m^2 - 4)n + (m^2 - 4)p = 0\n# n + p = -4/m^2 or n + p = 4/m^2\n\n# Step 3\n# Solve for m\n# m + n + p = 25\n# m + n + p = 25\n# m + n + p - 25 = 0\n# (m + n + p) (m + n + p - 25) = 0\n# m + n + p = 0 or m + n + p = 25\n# n + p = -m or n + p = 25 - m\n\n# Step 4\n# Solve for mnp\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = solve((-4/m^2, 4/m^2))\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp = (-4/m^2, 4/m^2)\n# mnp"
  },
  {
    "example_id": 149,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import I, S\n\ndef f(z):\n    if z.is_real:\n        return z + 2\n    else:\n        return z ** 2\n\nprint(f(I) + f(S(1)) + f(S(-1)) + f(-I))"
  },
  {
    "example_id": 150,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-114.0"
    ],
    "annotated_answers": [
      "-114.0"
    ],
    "solution": "sum = 0\nfor x in range(-30, 27):\n    sum += x\nprint(sum)"
  },
  {
    "example_id": 151,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# number of cookies needed\nnum_cookies = 216\n# number of sticks of butter needed\nnum_sticks = num_cookies / 8\nprint(num_sticks)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "x = -5 / y\nprint(4 * x**2 + 9 * y**2)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "for x in range(1, 5):\n    if x**2 - 10*x + 16 == 0:\n        print(x)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\ny = (x+1)/(x**2-2*x+1)\nprint(y.as_numer_denom()[0].as_expr())"
  },
  {
    "example_id": 155,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "def f(x):\n    return (x-0.5)*(x-2.5)*(x-6.5)*(x-7.5)/16+x\n\ntotal = 0\nfor x in range(9):\n    if f(x) > x:\n        total += x\nprint(total)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5",
      "0.25",
      "4.0",
      "16.0",
      "8.0",
      "16.0",
      "0.5",
      "0.25"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nx = 0.5\ny = f(x)\nprint(x, y)\n\nx = 8/2\ny = f(x)\nprint(x, y)\n\nx = 8\ny = f(x/2)\nprint(x, y)\n\nx = 0.5\ny = f(x)\nprint(x, y)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "f = lambda x: 5 * x + 2\ng = lambda x: 3 * x ** 2 - 4 * x\nprint(f(f(1)) - g(g(2)))"
  },
  {
    "example_id": 158,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = (13 + (-16) + 6) / 3\ny = 8 ** (1/3)\nprint(x**2 + y**3)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.5"
    ],
    "annotated_answers": [
      "-11.0"
    ],
    "solution": "x = (1/2) * (2 + 9)\nprint(x)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1710.0"
    ],
    "annotated_answers": [
      "1710.0"
    ],
    "solution": "total = sum(range(28, 87, 2))\nprint(total)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    if x >= a:\n        return a*x**2\n    else:\n        return a*x + 2*a\n\na = 1\nwhile f(a) < 0:\n    a += 1\nprint(a)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "g_degree = 8 - 4\nprint(g_degree)"
  },
  {
    "example_id": 163,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# using sympy\nfrom sympy import Symbol, Eq, solve\nx = Symbol('x')\nm = Symbol('m')\neq = Eq(3*x**2-4*x+1, m*(x-1))\nprint(solve(eq, x))"
  },
  {
    "example_id": 164,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\n\npolynomial = 3*(x-4) + 2*(x**2-x+7) - 5*(x-1)\nsimplified = simplify(polynomial)\n\nprint(simplified)"
  },
  {
    "example_id": 165,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print((1+3)**3)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "current_20_ohms = 40 / 20\nprint(current_20_ohms)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import math\nx = math.log(2 ** 12, 1 / 8)\nprint(x)"
  },
  {
    "example_id": 168,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import log\n\nresult = log(5**4, 5**2)\nprint(result)"
  },
  {
    "example_id": 169,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import symbols, solve\nx = symbols('x')\nf = 4*x**3 + 1\nf_inv = solve(f - 33, x)[0]\nprint(f_inv)"
  },
  {
    "example_id": 170,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "0.5",
      "6.0",
      "5.0",
      "6.0",
      "-11.0",
      "0.5",
      "6.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol\nk = Symbol('k')\nx1 = (-5 + k**0.5*11) / 6\nx2 = (-5 - k**0.5*11) / 6\nprint(x1, x2)"
  },
  {
    "example_id": 171,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import I\n\na = 2 - 2 * I\nb = 5 + 5 * I\n\nprint(a * b)"
  },
  {
    "example_id": 172,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "155.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "total_seats = 450\nrows = total_seats // 3\nprint(rows + 5)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "def f(x):\n    return 2*x + 1\n\ndef f_inv(x):\n    return (x - 4) // 2\n\nprint(f_inv(17))"
  },
  {
    "example_id": 174,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve\nsol = solve(\n    (5*x - 16) / (x**2 - 7*x + 10) - (A / (x - 2) + B / (x - 5)),\n    [A, B],\n)\nprint(sol[0][A] + sol[0][B])"
  },
  {
    "example_id": 175,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nprint(math.log2(32) - 2)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def P(x):\n    return 4 * x ** 3 - 2 * x ** 2 + 7 * x - 1\n\ndef Q(x):\n    return P(x) ** 2\n\ny_intercept = Q(0)\nprint(y_intercept)"
  },
  {
    "example_id": 177,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "n = 241 // 2\nprint(n)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "# floor of 52/3 = 16\n# floor of 5/23 = 0\n# ceiling of 16/0 = 17\nprint(17)"
  },
  {
    "example_id": 179,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = 5\nprint(x)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import solve, var\nx = var('x')\ny = -(x+1)**2 + 1\nsol = solve(y, x)\na = sol[0]\nb = sol[1]\nprint(b-a)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import log\n\na = 1\nb = 0.5\n\nS = 1 / (1 - b)\n\na_plus_b = a + b\n\nprint(a_plus_b)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a2 = a3 = 5\na4 = 3 * a2\na5 = 3 * a3\nprint(a5 / a3)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "978121.0"
    ],
    "annotated_answers": [
      "978121.0"
    ],
    "solution": "print(989 ** 2)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "a = 9\nb = 3\nc = -a/b\nprint(c)"
  },
  {
    "example_id": 185,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.5"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "y_intercept = -6 / 4\nprint(y_intercept)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "3.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy\n\nx, y, c = sympy.symbols('x y c')\n\ncircle_equation = x**2 + 8*x + y**2 + 4*y + c\n\nradius = 3\n\nprint(sympy.solve(circle_equation.subs(y, 0) - radius, c))"
  },
  {
    "example_id": 187,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import log\na = int(log(2938, 8))\nb = int(log(2938, 8) + 1)\nprint(a+b)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "quarts = 2/0.25\nprint(quarts)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "f(2**2 + 3)"
  },
  {
    "example_id": 190,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nk = (x - 1)**2 - (x + 1)**2\nsol = sp.solve(k, x)\nprint(sol)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# m = 2\nprint(2)"
  },
  {
    "example_id": 192,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "shoe_size = 42 - 6\nprint(shoe_size)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "781.1538461538462"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "f_4 = 3120\nf_m4 = -60 / 13\na = (f_4 - f_m4) / (4 - (-4))\nb = (f_4 - f_m4) / (4 - (-4))\nprint(a + b)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nprint(math.log(81, 3))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6857142857142857"
    ],
    "annotated_answers": [
      "0.43"
    ],
    "solution": "t = 2.4 / 3.5\nprint(t)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "print((4**3 + 2**3) - (3**3 + 1**3))"
  },
  {
    "example_id": 197,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2401.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "x = 24\ny = 73 - x\nprint(y**2)"
  },
  {
    "example_id": 198,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def D(a, b, c):\n    return a * b * c / (a + b + c)\n\nprint(D(2, 4, 6))"
  },
  {
    "example_id": 199,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8000.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "print((26**2 - 24**2 - 10)**2 - 10**2)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "x = 73\ny = 86\nprint(y - x)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def harmonic_mean(x, y):\n    return 20\n\ndef arithmetic_mean(x, y):\n    return (x + y) / 2\n\ndef reciprocal(x):\n    return 1 / x\n\ndef main():\n    for x in range(1, 100):\n        for y in range(x, 100):\n            if harmonic_mean(x, y) == 20:\n                print((x, y))\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 202,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "2.0",
      "13.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import numpy as np\n\n# compute the center of the circle\ncenter = np.array([-1, 2]) + np.array([3,0]) + np.array([9,0])\nprint(center)\n\n# compute the sum of the x and y coordinates\nprint(center[0] + center[1])"
  },
  {
    "example_id": 203,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f = lambda x: (4*x+1)/3\nx = f(1)\nprint(1/x)"
  },
  {
    "example_id": 204,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "p = 1\nq = 3\nprint(p + q)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.5"
    ],
    "annotated_answers": [
      "125.5"
    ],
    "solution": "def sum_of_n(n):\n    return n * (n + 1) // 2\n\ndef mean_of_n(n):\n    return sum_of_n(n) / n\n\nprint(mean_of_n(250))"
  },
  {
    "example_id": 206,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\ndiff = solve(x**2 - 4*x - 14, x)[1] - solve(x**2 - 4*x - 14, x)[0]\nprint(abs(diff))"
  },
  {
    "example_id": 207,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.42857142857142855"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 7 / 3\nx = 1 / x\nprint(x)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.2857142857142863"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    return (1 + x) / (1 - x)\n\ndef g(x):\n    return -2 / (x + 1)\n\n# f(g(f(g(f(g(f(g(f(12))))))))\nresult = f(g(f(g(f(g(f(g(f(12)))))))))\nprint(result)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nexpr = (x + 3) * (x - 1) - x * (x + 2)\nprint(expr.simplify())"
  },
  {
    "example_id": 210,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "6.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import sqrt\n\nexpr = sqrt(4/sqrt(24) + sqrt(3456)/9 + sqrt(6))\nprint(expr)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 212,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import sympy\n\nexpr = sympy.expand_power_base(4**5 + 4**5 + 4**5 + 4**5)\nresult = sympy.sqrt(expr)\nprint(result)"
  },
  {
    "example_id": 213,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "A,B,C = -2,3,-4\nA + B + C"
  },
  {
    "example_id": 214,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "5.5",
      "1.0",
      "0.18181818181818182"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "midpoint_x = (0 + 2) / 2\nmidpoint_y = (0 + 2) / 2\nprint(midpoint_x, midpoint_y)\n\nmidpoint_x = (5 + 6) / 2\nmidpoint_y = (0 + 2) / 2\nprint(midpoint_x, midpoint_y)\n\nslope = (midpoint_y - 0) / (midpoint_x - 0)\nprint(slope)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol, log\n\nx = Symbol('x')\n\nresult = log(10-2*x, x-1)\n\nprint(result.evalf())"
  },
  {
    "example_id": 217,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "5.0",
      "2.0",
      "4.0",
      "4.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy\na, b, c, d = sympy.symbols('a b c d')\neq1 = a - b - 2*(c+d)\neq2 = b - a + 2\neq3 = d - c - 5\nsol = sympy.solve((eq1, eq2, eq3), (c, d))\nprint(sol)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "a = 2\nb = 3\nprint(8 * a**2 * b**2)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.079368399158984"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 8\nresult = 16 ** (1/3) * a ** (2/3)\nprint(result)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "(x, y) = ((1 + 1) / 2, (4 + 10) / 2)\nprint(x + y)"
  },
  {
    "example_id": 221,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0",
      "6.0",
      "5.0",
      "24.0",
      "6.0",
      "5.0",
      "32.0",
      "6.0",
      "5.0",
      "-24.0",
      "6.0",
      "5.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import symbols\nx, y = symbols('x, y')\neq1 = x**2 - 24*x + y**2 - 32*y + 384\neq2 = x**2 + 24*x + y**2 + 32*y + 384\nsol = solve((eq1, eq2))\nprint(sol)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sp\nx = sp.symbols('x')\nprint(sp.solve([(66-2**x)/(2**x+3) - (4-2**x)/(2**(x+1)+6)], x)[0])"
  },
  {
    "example_id": 223,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.333333333333336"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "pencil_cost = 124 / 3\njumbo_eraser_cost = 182 / 5\nprint(pencil_cost)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "a = 4\nb = 12\nm = 1\n\nprint(a + b + m)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "5.0",
      "5.0",
      "8.0",
      "4.0",
      "80.0",
      "3.0",
      "3.0",
      "32.0",
      "2.0",
      "16.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import integrate, symbols\n\nx = symbols('x')\nf = 2*x**2 + 8*x + 4\narea = integrate(f**2, x)\nprint(area)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "196.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "p = 28 / 7\np_49 = p * 49\nprint(p_49)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\n\ndef square(x):\n    return x * x\n\ndef is_in_circle(x):\n    return square(x - 4) <= 9\n\ndef length_of_segment(n):\n    length = 0\n    for i in range(n):\n        if is_in_circle(i):\n            length += 1\n    return length\n\nprint(length_of_segment(100))"
  },
  {
    "example_id": 228,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 3\nprint(n)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy.abc import a\n\nsol = sqrt(4 + sqrt(16 + 16 * a)) + sqrt(1 + sqrt(1 + a))\nsol.expand()\nsol.simplify()\nsol.subs(a, 0)\nprint(sol.subs(a, 0))"
  },
  {
    "example_id": 230,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "3.0",
      "4.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx1, y1, x2, y2, x3, y3, x4, y4 = sympy.symbols('x1, y1, x2, y2, x3, y3, x4, y4')\n\nmidpoint1 = ((x1 + x2) / 2, (y1 + y2) / 2)\nmidpoint2 = ((x3 + x4) / 2, (y3 + y4) / 2)\n\nslope1 = (y2 - y1) / (x2 - x1)\nslope2 = (y4 - y3) / (x4 - x3)\n\nprint(slope1 - slope2)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpr = (x**2 - 5*x + 7) - (x - 3)*(x - 2)\nprint(expr.expand())"
  },
  {
    "example_id": 232,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import sympy as sym\nm = sym.Symbol('m')\nn = sym.Symbol('n')\nx = sym.Symbol('x')\neq = x**2 - m*x + n\nk, t = sym.solve(eq, [x])\nprint(m**n + n**m + k**t + t**k)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "age_difference = 30 - 20\nage_son = 20 + 5 * age_difference\nprint(age_son)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4950.0"
    ],
    "annotated_answers": [
      "4950.0"
    ],
    "solution": "sum_of_multiples = 0\nfor i in range(100, 201):\n    if i % 3 == 0:\n        sum_of_multiples += i\nprint(sum_of_multiples)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "interest_rate = (1225 - 1000) / 1000 * 100\nprint(round(interest_rate))"
  },
  {
    "example_id": 236,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    if x == 1:\n        return 2\n    elif x == 2:\n        return 6\n    elif x == 3:\n        return 5\n\ndef f_inv(y):\n    if y == 2:\n        return 1\n    elif y == 6:\n        return 2\n    elif y == 5:\n        return 3\n\nprint(f_inv(f_inv(6)))"
  },
  {
    "example_id": 237,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8281.0"
    ],
    "annotated_answers": [
      "8281.0"
    ],
    "solution": "print(91**2)"
  },
  {
    "example_id": 238,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "198.0"
    ],
    "annotated_answers": [
      "-27.0"
    ],
    "solution": "g = 3\nc = 4\np = 12\nq = 9\nexpression = g**4 + 12*g**2 + 9\nprint(expression)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.17647058823529413"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def get_degree(poly):\n    \"\"\"\n    Return the degree of the polynomial.\n    \"\"\"\n    return len(poly) - 1\n\ndef get_coefficient(poly, degree):\n    \"\"\"\n    Return the coefficient of the polynomial.\n    \"\"\"\n    return poly[degree]\n\ndef get_remainder(poly):\n    \"\"\"\n    Return the remainder of the polynomial.\n    \"\"\"\n    return poly[0]\n\ndef solve_poly(poly):\n    \"\"\"\n    Solve the polynomial equation.\n    \"\"\"\n    degree = get_degree(poly)\n    remainder = get_remainder(poly)\n    coefficient = get_coefficient(poly, degree)\n    return remainder / coefficient\n\npoly = [3, 1, -25, 38, -17]\nprint(solve_poly(poly))"
  },
  {
    "example_id": 240,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.7906976744186047"
    ],
    "annotated_answers": [
      "3.5"
    ],
    "solution": "t = 77 / 43\nprint(t)"
  },
  {
    "example_id": 241,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "178.0",
      "39.0",
      "6942.0",
      "6942.0",
      "6942.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "from sympy import expand, factor\n\na = 24*6 + 6*3 + 4*3 + 4\nb = 6*3 + 3*3 + 3*4\n\nprint(a)\nprint(b)\nprint(a*b)\nprint(expand(a*b))\nprint(factor(expand(a*b)))"
  },
  {
    "example_id": 242,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "# Write a function that returns True if the equation is satisfied\ndef satisfies_equation(a, b, c):\n    return a**2*b + b**2*c + c**2*a - a*b**2 - b*c**2 - c*a**2 == 0\n\n# Use the function to count the number of triples that satisfy the equation\n# Hint: there are 6 possible values for each of a, b, and c\ncount = 0\nfor a in range(0, 6):\n    for b in range(0, 6):\n        for c in range(0, 6):\n            if satisfies_equation(a, b, c):\n                count += 1\nprint(count)"
  },
  {
    "example_id": 243,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = -7\nprint(x)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x = 3 + 5\nprint(x)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.2"
    ],
    "solution": "# Given that the line of symmetry is at x=1\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n# The equation of the parabola is y = ax^2 + bx + c\n# The given equation is y = 2x^2 - 4x + 3\n\n# Finding the coefficients\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at x=2 has y-coordinate -2\n\n# Slope of the parabola at x=1 is 0\n# Slope of the parabola at x=-1 is 2\n# Slope of the parabola at x=2 is -2\n\n# Slope of the given equation at x=1 is 0\n# Slope of the given equation at x=-1 is 2\n# Slope of the given equation at x=2 is -2\n\n# The given equation is y = 2x^2 - 4x + 3\n# The parabola is y = ax^2 + bx + c\n\n# The point at x=1 has y-coordinate 0\n# The point at x=-1 has y-coordinate 3\n# The point at"
  },
  {
    "example_id": 246,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "def get_next_term(current_term, add_val, mult_val):\n    return add_val + current_term * mult_val\n\nterm = 0\nadd_val = 1\nmult_val = 1\nwhile term <= 125:\n    term = get_next_term(term, add_val, mult_val)\n\nprint(term)"
  },
  {
    "example_id": 248,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def altitude(t):\n    return t * 100 + 100\n\ndef seconds(h):\n    return h / 100\n\nprint(seconds(12000))"
  },
  {
    "example_id": 249,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import Symbol, Poly, degree\nx = Symbol('x')\np = Poly(5*x**6 - x**5 + 3*x**4 + x**3 - 25*x**2 + 38*x - 17)\nf = p.args[1]\nprint(degree(f))"
  },
  {
    "example_id": 250,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "# Find b\nb = -6\n\n# Find c\nc = 66\n\n# Find b+c\nb_plus_c = b + c\nprint(b_plus_c)"
  },
  {
    "example_id": 251,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.06"
    ],
    "annotated_answers": [
      "0.75"
    ],
    "solution": "t = (-16 * 60 * 60 + 60 * 60 - 54) / (-16 * 60 + 60)\nprint(t)"
  },
  {
    "example_id": 252,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.3333333333333333"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "days_to_paint_12_houses = 3\nhouses_per_day = 4\nworkers_needed = houses_per_day / days_to_paint_12_houses\nprint(workers_needed)"
  },
  {
    "example_id": 253,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "229.0"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "from sympy import sqrt\nx1, y1 = 9, 5\nx2, y2 = -6, 3\nr1, r2 = 6.25, 49\n\ndistance = sqrt((x2 - x1)**2 + (y2 - y1)**2)\nprint(distance)"
  },
  {
    "example_id": 254,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\nprint(x)"
  },
  {
    "example_id": 255,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# compute the midpoint\nx_mid = (5 + (-9)) / 2\ny_mid = (4 + 8) / 2\n# compute the sum of the coordinates\nsum_mid = x_mid + y_mid\nprint(sum_mid)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "t = 2\nprint((t) * (t + 2) - (t + 1) * (t + 1))"
  },
  {
    "example_id": 257,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.5"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = (1 + 2) / 2\ny = (1 - 2) / 2\nprint(8 * x - 7 * y)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(int(8.8)+int(-8.8))"
  },
  {
    "example_id": 259,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import sqrt\n\na = 1\nb = 1\n\nwhile True:\n    if sqrt(a) % b == 0:\n        break\n    a += 1\n\nprint(a + b)"
  },
  {
    "example_id": 260,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    if x**2 - 7*x + 10 == 0:\n        return None\n    else:\n        return (x-2)/(x**2-7*x+10)\n\nfor x in range(-5, 5):\n    if f(x) is None:\n        print(x)"
  },
  {
    "example_id": 261,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\ndef solve(x):\n    return x**6 - 2 * x**5 + 2 * x**3 - 2 * x + 1 - 292\n\ndef find_root(solve):\n    return math.floor(math.sqrt(292))\n\nx = find_root(solve)\nprint(x)"
  },
  {
    "example_id": 262,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import math\n\nfor m in range(2, 20):\n    for n in range(1, m):\n        if math.gcd(m, n) == 1 and math.gcd(m - n, n) == 1:\n            print(n)"
  },
  {
    "example_id": 263,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.222222222222221"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "games_won = 2/9\ngames_lost = 15\ntotal_games = games_won + games_lost\nprint(total_games)"
  },
  {
    "example_id": 264,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "11.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = x**2 + 2*x - 6\ndistance = sympy.sqrt((4 - x)**2 + (5 - y)**2)\nprint(distance)"
  },
  {
    "example_id": 265,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "402.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "a = 6\nb = 10\nc = 14\nd = 18\nprint(a + 99 * (b - a))"
  },
  {
    "example_id": 266,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 7\nb = -a\nprint(b)"
  },
  {
    "example_id": 267,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "denali_pay = 16\nnate_pay = 12\nx = (denali_pay / nate_pay) * (4 * nate_pay) / denali_pay\nprint(x)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import sqrt, simplify\n\ndenominator = sqrt(5) + sqrt(2) - sqrt(5) + sqrt(2)\nresult = simplify(denominator)\n\nprint(result)"
  },
  {
    "example_id": 269,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "def max_value(x):\n    return -x**2 - 8*x + 12\n\nprint(max_value(0))"
  },
  {
    "example_id": 270,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.87500003125625"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "import numpy as np\n\ndef ben_height(t):\n    return 2 * t ** 2 - 5 * t + 29\n\nt = np.linspace(0, 100, 10000)\nmin_height = np.min(ben_height(t))\nprint(min_height)"
  },
  {
    "example_id": 271,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "first_practice = 48 / 2\nprint(first_practice)"
  },
  {
    "example_id": 272,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "b = (12 - 3*4) / 2\nprint(b)"
  },
  {
    "example_id": 273,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "bricks_per_hour = 30\nhours_worked = 3\ntotal_bricks = 600\nbricks_placed_by_alan = total_bricks / 3\nbricks_placed_by_david = bricks_per_hour * hours_worked\nprint(bricks_placed_by_david)"
  },
  {
    "example_id": 274,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import numpy as np\nx1 = -1\ny1 = 7\nx2 = 7\ny2 = -1\nm = (y2-y1)/(x2-x1)\nb = y1 - m*x1\nprint(m+b)"
  },
  {
    "example_id": 275,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "dad_age = 53 - 31\nprint(dad_age)"
  },
  {
    "example_id": 276,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "x = 7 + 9\ny = 7 - 9\nprint(x * y)"
  },
  {
    "example_id": 277,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 3**2\nprint(x)"
  },
  {
    "example_id": 278,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import numpy as np\n\ndef f(x):\n    return np.floor((-5/8)**x)\n\ndef distinct_values(f):\n    return len(set(f(np.arange(0, 1000))))\n\nprint(distinct_values(f))"
  },
  {
    "example_id": 279,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "from sympy import solve, symbols\nx, y, A, B, C = symbols('x y A B C')\neq = x**2 + y**2 + A*x + B*y + C\nsol = solve(eq, [A, B, C])\nprint(sol)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.5"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = (3*2**2 + 5) / 2\nprint(x)"
  },
  {
    "example_id": 281,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# brute force search\nfor b in range(1, 5):\n    if (4 ** b) + (2 ** 3) == 12:\n        print(b)\n        break"
  },
  {
    "example_id": 282,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from math import sqrt\n\nx = sqrt(45)\ny = sqrt(101)\n\nz = int((x + y) / 2)\n\nprint(z)"
  },
  {
    "example_id": 283,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "123.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "print(123123 / 1001)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "a, b, c = 4, 5, 6\nresult = a * (b - c)\nprint(result)"
  },
  {
    "example_id": 285,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "import sympy as sp\nx = sp.symbols('x')\nexpr = 3*x**2 - 2*(x**2 + 4)\nx_sol = sp.solve(expr - 42, x)\nprint(x_sol)"
  },
  {
    "example_id": 286,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "f = lambda x: x ** 3 + 2 * x + 1\ng = lambda x: x - 1\nprint(f(g(1)))"
  },
  {
    "example_id": 287,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4800.0"
    ],
    "annotated_answers": [
      "4800.0"
    ],
    "solution": "bacteria_at_midnight = 600 * 2**(12/4)\nprint(bacteria_at_midnight)"
  },
  {
    "example_id": 288,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "44.0"
    ],
    "annotated_answers": [
      "-102.0"
    ],
    "solution": "from sympy import Symbol, Eq, solve\n\nalpha = Symbol('alpha')\nx = Symbol('x')\nf = (x**2 + 5*x + alpha) / (x**2 + 7*x - 44)\n\nsol = solve(Eq(f, x/x), alpha)\n\nprint(sum(sol))"
  },
  {
    "example_id": 289,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = (166 - 14) // 10\ny = (166 - 10 * x - 14) // 15\nprint(x + y)"
  },
  {
    "example_id": 290,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(4 * 3 * 2)"
  },
  {
    "example_id": 291,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\ndef circle_tangent_point(radius, center_x, center_y):\n    point_x = center_x + radius * math.cos(math.pi / 4)\n    point_y = center_y + radius * math.sin(math.pi / 4)\n    return point_x, point_y\n\n\ndef circle_tangent(center_x1, center_y1, center_x2, center_y2):\n    dx = center_x2 - center_x1\n    dy = center_y2 - center_y1\n    distance = math.sqrt(dx**2 + dy**2)\n    if distance!= 0:\n        unit_vector_x = dx / distance\n        unit_vector_y = dy / distance\n        point_x, point_y = circle_tangent_point(1, center_x1, center_y1)\n        dx = point_x - center_x2\n        dy = point_y - center_y2\n        if dx**2 + dy**2 == 1:\n            return True\n    return False\n\n\ndef count_tangent_circles(center_x1, center_y1, center_x2, center_y2):\n    count = 0\n    for x in range(-5, 5):\n        for y in range(-5, 5):\n            if circle_tangent(center_x1, center_y1, center_x2, center_y2):\n                count += 1\n    return count\n\n\ndef main():\n    count = count_tangent_circles(4, 0, -4, 0)\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 292,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "5.0",
      "2.0",
      "12.0",
      "4.0",
      "20.0",
      "3.0",
      "6.0",
      "2.0",
      "10.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol, expand\nt = Symbol('t')\na, b = Symbol('a'), Symbol('b')\nf = 3*t**2+5*t+a\ng = 4*t**2+b*t-2\nprint(expand(f*g))\nprint(expand(a+b))"
  },
  {
    "example_id": 293,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = 1\nb = 1\nc = 2\nprint(a+b+c)"
  },
  {
    "example_id": 294,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "32736.0"
    ],
    "solution": "def consecutive_even_numbers(n):\n    return [2*i for i in range(1, n+1)]\n\nnumbers = consecutive_even_numbers(3)\nproduct = numbers[0] * numbers[1] * numbers[2]\nprint(product/8)"
  },
  {
    "example_id": 295,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "for i in range(10, 100):\n    if i % 10 == 5 and i // 10 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 296,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "g = lambda x: 3*x - 4\nprint(g(0))"
  },
  {
    "example_id": 297,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "from math import ceil\n\nn = 27\nmedian = ceil(n/2)\nprint(median)"
  },
  {
    "example_id": 298,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "# number of lattice points in a square\nn = 5 + 1\nprint(n**2)"
  },
  {
    "example_id": 299,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6561.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return x ** 2\n\ndef g(x):\n    return f(f(x))\n\nprint(g(9))"
  },
  {
    "example_id": 300,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "print(pow(4 + 5, 2))"
  },
  {
    "example_id": 301,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nsolution = sympy.solve(sympy.sqrt(3*x+6)-(x+2), x)\nprint(solution)"
  },
  {
    "example_id": 302,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(4*3**2/9*2**2)"
  },
  {
    "example_id": 303,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def p(x):\n    return x + 3\n\ndef q(x):\n    return x**2 + 7\n\n# p(2) = 3, so x = 2\n\n# p(q(x)) = 4x + 7\n# p(q(-1)) = 4(-1) + 7 = 7\n\n# q(-1) = -1\nprint(q(-1))"
  },
  {
    "example_id": 304,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "import numpy as np\n\n# Write a program to find the time it takes for the car to stop\n\n# 5 feet less in each second\n# Initially the car travels 45 feet\n# The car stops when the distance traveled is 0\n\ndef find_time_to_stop(distance):\n    time = 0\n    while distance > 0:\n        distance -= 5\n        time += 1\n    return time\n\nprint(find_time_to_stop(45))"
  },
  {
    "example_id": 305,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "number_of_customers = 15 / 1500 * 2500\nprint(number_of_customers)"
  },
  {
    "example_id": 306,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2450.0"
    ],
    "annotated_answers": [
      "2450.0"
    ],
    "solution": "base_salary = 1200\ncommission = 0.05\nsales = 25000\ntotal_earnings = base_salary + commission * sales\nprint(total_earnings)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8888888888888888"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 8 / 3\nz = 15 / 5\nprint(x / z)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\nprint(math.sqrt(64) - math.cbrt(64))"
  },
  {
    "example_id": 309,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12364.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "AMC10 = 12342\nAMC12 = 22\nA = AMC10 + AMC12\nprint(A)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.7999999999999998"
    ],
    "annotated_answers": [
      "1.8"
    ],
    "solution": "x = 4.8 - 2 * round(4.8/2)\nprint(x)"
  },
  {
    "example_id": 311,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nsol = solve(192*x**2 - 16, x)\nprint(1/sol[0]**4)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = -2\nb = 4\nc = 1\nprint(a + b + c)"
  },
  {
    "example_id": 313,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "2003.0"
    ],
    "solution": "even_counting_numbers = range(2, 2003, 2)\nodd_counting_numbers = range(1, 2003, 2)\nprint(sum(even_counting_numbers) - sum(odd_counting_numbers))"
  },
  {
    "example_id": 314,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 1\nwhile x < 100:\n    if x * (x + 2) == 255:\n        print(x)\n        break\n    x += 2"
  },
  {
    "example_id": 315,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13225.0"
    ],
    "annotated_answers": [
      "13225.0"
    ],
    "solution": "print(115 ** 2)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.666666666666667"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = 23 / 3\nprint(a)"
  },
  {
    "example_id": 317,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26000.0"
    ],
    "annotated_answers": [
      "26000.0"
    ],
    "solution": "print(513**2 - 487**2)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "10.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\n\n# Find the sum of squares\nsum_of_squares = a**2 + b**2 + c**2\n\n# Find the sum of products\nsum_of_products = a * b + b * c + c * a\n\n# Solve the system of equations\nsolution = sympy.solve([sum_of_squares - 13, sum_of_products - 6], [a, b, c])\n\n# Print the solution\nprint(solution)"
  },
  {
    "example_id": 319,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.75"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "# The distance from the center of the merry-go-round\n# is the same in both cases.\n\n# The number of revolutions is proportional to the distance.\n\n# The number of revolutions for the horse 64 feet from the center\n# is 27.\n\n# The number of revolutions for the horse 16 feet from the center\n# is proportional to the number of revolutions for the horse\n# 64 feet from the center.\n\n# Therefore, the number of revolutions for the horse\n# 16 feet from the center is 27 / 4.\n\nprint(27 / 4)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0",
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nlog = sympy.log\nsqrt = sympy.sqrt\nx = sqrt(5)\nlog_x = log(125, x)\nprint(log_x)"
  },
  {
    "example_id": 321,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "a = 15 - 2 * 2\nb = 3 - 2 * 5\nprint(a + b)"
  },
  {
    "example_id": 322,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "time_to_50_meters = 25 - 5\nprint(time_to_50_meters)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "x = 3^2 + 3^4 - 3^2\nprint(x)"
  },
  {
    "example_id": 324,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\n# Points are in format (x, y)\nrobert = (4, 3)\nliz = (1, 7)\n\n# Distance between two points\ndef distance(p1, p2):\n    return math.sqrt(sum([(p1[i] - p2[i])**2 for i in range(2)]))\n\n# Distance from Robert to Liz\nprint(distance(liz, robert))"
  },
  {
    "example_id": 325,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "max_degree = 3 + 2\nprint(max_degree)"
  },
  {
    "example_id": 326,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# 20% of 50% of 80 = 20% of 40 = 8\nprint(8)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.4"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# calculate the age of Chris 4 years ago\nage_4_years_ago = (6 - 3/5)\nprint(age_4_years_ago)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy\n\nA, B, C, D, E = sympy.symbols('A B C D E')\n\nsums = [\n    sympy.Add(A, B),\n    sympy.Add(B, C),\n    sympy.Add(C, D),\n    sympy.Add(D, E),\n    sympy.Add(E, A),\n]\n\nprint(sympy.Mul(2, sums[2]))"
  },
  {
    "example_id": 329,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "0.0",
      "-3.0",
      "0.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "import sympy as sp\na, b, c = sp.symbols(\"a b c\")\neq1 = a + b - 8\neq2 = b + c + 3\neq3 = a + c - 5\nsolve = sp.solve((eq1, eq2, eq3), (a, b, c))\nprint(solve)\nprint(solve[a] * solve[b] * solve[c])"
  },
  {
    "example_id": 330,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-56.0"
    ],
    "annotated_answers": [
      "-56.0"
    ],
    "solution": "discriminant = (-8)**2 - 4*2*15\nprint(discriminant)"
  },
  {
    "example_id": 331,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "484.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "import math\n\nx = -6\ny = -15\n\nd_from_x_axis = math.sqrt(x**2)\nd_from_point_8_3 = math.sqrt((x-8)**2 + (y-3)**2)\n\nn = d_from_point_8_3**2 - d_from_x_axis**2\nprint(n)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print(abs(6 - 3))"
  },
  {
    "example_id": 333,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "102.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "A = 6\nB = 17\nAB = A*B\nprint(AB)"
  },
  {
    "example_id": 334,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy import sqrt\nfrom sympy import symbols\nx = symbols('x')\nf = 3 * sqrt(2 * x - 7) - 8\nprint(simplify(f.subs(x, 8)))"
  },
  {
    "example_id": 335,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpr = (9 - 4*x) / (x + 6) - 7\nsol = sympy.solve(expr)\nprint(sol)"
  },
  {
    "example_id": 336,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.333333333333332"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num_red = 2 * (35 - 3) / 3\nprint(num_red)"
  },
  {
    "example_id": 337,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "364.0"
    ],
    "solution": "a = 40 - 12\nprint(a)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "65.0"
    ],
    "solution": "# Use formula V = (1/3)Bh\n# where B is the area of the base and h is the height\n# Area of the base is 30 square units\n# Height is 6.5 units\n\n# Calculate the volume using the formula\nV = (1/3) * 30 * 6.5\nprint(V)"
  },
  {
    "example_id": 339,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x_int = 16\nprint(x_int)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 1 / (2 - (1 / (2 - (1 / (2 - 1)))))\nprint(x)"
  },
  {
    "example_id": 341,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 5\ny = 7\nxy = (x + y) * (x + y) - (x^2 + y^2)\nprint(xy)"
  },
  {
    "example_id": 342,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from sympy import Symbol, expand, simplify\nx = Symbol('x')\nf = 3 * x ** 4 + 5 * x ** 2 - 9 * x - 2\ng = f.subs(x, x - 1)\ng_coeff = expand(g).coeffs()\nprint(simplify(g_coeff))"
  },
  {
    "example_id": 343,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4851.0"
    ],
    "annotated_answers": [
      "93.0"
    ],
    "solution": "a1 = 0\na2 = 1\ncommon_diff = 1\n\ntotal = 0\nfor i in range(98):\n    total += a2\n    a2 += common_diff\n\nprint(total)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0"
    ],
    "annotated_answers": [
      "549.0"
    ],
    "solution": "square_1 = 99\nsquare_2 = square_1 + 2\nprint(square_2)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "f = lambda x: x + 2\ng = lambda x: 1 / f(x)\nprint(g(f(-3)))"
  },
  {
    "example_id": 346,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "25.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "s = 5\nc = 2\np = 10\nq = 45 - c * s - p\nprint(q)\n\n# or\n\nq = 45 - 2 * 5 - 10\nprint(q)"
  },
  {
    "example_id": 347,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "y = 4x - 36\ny / x = 1 / 2\nx = y / 1 / 2\nx = 2y / 2\nx = y\nx = 4 * 2 - 36\nx = 8 - 36\nx = -28"
  },
  {
    "example_id": 348,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "f = lambda x: 2*x/(x**2 - 5*x - 14)\na = -14/5\nb = 14/5\nc = 2/5\nprint(a + b + c)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy as sp\n\nx, y = sp.symbols('x, y')\ndistance = sp.sqrt(x**2 + y**2)\nprint(distance)"
  },
  {
    "example_id": 350,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "9.0",
      "2.0",
      "2.0",
      "3.0",
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = (x - 2)**2 - 9\ny = f/3\nprint(y.integrate())"
  },
  {
    "example_id": 351,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import fabs\nx = -1\nwhile True:\n    x += 1\n    if x**2 == -fabs(x):\n        print(x)\n        break"
  },
  {
    "example_id": 352,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.5"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "larry = 35 / 2\nlenny = 35\nprint(lenny - larry)"
  },
  {
    "example_id": 353,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\nx = 0\nwhile True:\n    if pow(1, x) + pow(2, x) + pow(5, x) == 642:\n        break\n    x += 1\n\nprint(x)"
  },
  {
    "example_id": 354,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-8192.0"
    ],
    "annotated_answers": [
      "-8192.0"
    ],
    "solution": "first_term = 1\ncommon_ratio = -2\nfourteenth_term = first_term * (common_ratio ** 13)\nprint(fourteenth_term)"
  },
  {
    "example_id": 355,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "256.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\nx = sp.log(256) / sp.log(2)\nprint(x)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 3\ny = 2\nprint(x + y)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "total_cost = 12.75\nentry_fee = 2.25\nride_cost = 1.50\nrides = total_cost - entry_fee\nprint(rides / ride_cost)"
  },
  {
    "example_id": 358,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x_mid = (1 + (-7)) / 2\ny_mid = (1 + 5) / 2\nprint(x_mid * y_mid)"
  },
  {
    "example_id": 359,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-56.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a, b, c')\neq1 = 3*a + b + c\neq2 = a + 3*b + c\neq3 = a + b + 3*c\nsol = sympy.solve((eq1, eq2, eq3), (a, b, c))\nprint(sol)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "days = 10\npeople = 12 + 3\ndaily_share = people / days\nprint(days)"
  },
  {
    "example_id": 361,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "k = 16"
  },
  {
    "example_id": 362,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(3 * 5)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def is_between(n, lower, upper):\n    return lower <= n <= upper\n\ndef is_square(n):\n    x = n ** 0.5\n    return x == int(x)\n\ndef count_squares(lower, upper):\n    count = 0\n    for x in range(lower, upper + 1):\n        if is_between(x, lower, upper) and is_square(x):\n            count += 1\n    return count\n\nprint(count_squares(10, 50))"
  },
  {
    "example_id": 364,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "total_days = 4\nfirst_two_days_miles = 26\nsecond_third_days_miles = 12\nlast_two_days_miles = 28\nfirst_third_days_miles = 22\n\ntotal_miles = first_two_days_miles + second_third_days_miles * (total_days - 2) + last_two_days_miles\nprint(total_miles)"
  },
  {
    "example_id": 365,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "n = 7\nprint(n)"
  },
  {
    "example_id": 366,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-48.0"
    ],
    "solution": "x = 725\ny = 727\nx_prime = 729\ny_prime = 731\n\n# Calculate the difference of the two equations\ndiff = x_prime * y - x * y_prime\nprint(diff)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import isprime\n\ndef count_right_triangles(n):\n    count = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            c = sqrt(a**2 + b**2)\n            if c == int(c) and a + b + c == n:\n                count += 1\n    return count\n\nprint(count_right_triangles(162))"
  },
  {
    "example_id": 368,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def quadratic_function(x):\n    return 6 * x ** 2 + x - 2\n\ndef find_root(f, x_low, x_high):\n    while x_low < x_high:\n        x_mid = (x_low + x_high) / 2\n        if f(x_mid) < 0:\n            x_low = x_mid\n        else:\n            x_high = x_mid\n    return x_high\n\ndef find_greatest_integer_root(f, x_low):\n    x_high = find_root(f, x_low, x_low + 1)\n    return find_root(f, x_high - 1, x_high)\n\ndef greatest_integer_root(f, x_low):\n    return int(round(find_greatest_integer_root(f, x_low)))\n\ndef quadratic_root(f, x_low):\n    return int(round(find_root(f, x_low, x_low + 1)))\n\ndef main():\n    f = quadratic_function\n    x_low = -1\n    x_high = 2\n    print(quadratic_root(f, x_low))\n    print(greatest_integer_root(f, x_low))\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 369,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.5"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import sqrt\n\na = 1\nb = -3\nc = -4\n\nm = -b/(2*a)\nn = -c/(a)\n\nprint(m-n)"
  },
  {
    "example_id": 370,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5555555555555556"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# m * n = 56\nprint(56 / 36)"
  },
  {
    "example_id": 371,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import numpy as np\nx = np.arange(0, 18, 0.1)\nf = 2*x\ng = 10*x\nf_g = f - g\nmax_f_g = np.max(f_g)\nprint(max_f_g)"
  },
  {
    "example_id": 372,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "num_horses = 30/4\nprint(num_horses)"
  },
  {
    "example_id": 373,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "11.0",
      "2.0",
      "3.0",
      "2.0",
      "11.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\neq = x**2 - 5*x + 9\nsol = solve(eq, x)\nprint((sol[0] - 1)*(sol[1] - 1))"
  },
  {
    "example_id": 374,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Solve for e\n# d = 17e\n# 2d = 34e\n# 2d = 8(17e) = 8(34e) = 288e\n# 2d - 8 = 288e - 8\n# 2d - 8 = 288e - 8\n# 2d = 288e - 8\n# 2d = 288e - 8 + 8\n# 2d = 376e\n# 376e - 2d = 8\n# 376e - 2d = 8\n# 376e = 10d\n# d = 17e\n# 2d = 34e\n# 2e = 18e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d = 2e + 16\n# 2d = 18e + 16\n# 2d = 34e\n# 2d - 2e = 34e - 18e = 16e\n# 2d - 2e = 16\n# 2d - 2e = 16\n# 2d"
  },
  {
    "example_id": 375,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1700.999999999999"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "import numpy as np\n\nx1 = -99 + np.sqrt(8001)\nx2 = -99 - np.sqrt(8001)\n\n# quadratic equation coefficients\na = 1/2\nb = 99\nc = x1*x2 - b\n\nprint(c)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.872983346207417"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "from math import sqrt\nb = -sqrt(15) - 2\nprint(b)"
  },
  {
    "example_id": 377,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "x = 2\ny = -3\nprint(((x*y)**5)/(y**3))"
  },
  {
    "example_id": 378,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "n = 26 // 25 + 25\nprint(n)"
  },
  {
    "example_id": 379,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return (x-1)*(x-3)*(x-7)*(x-9)\n\nprint(f(6) - f(4))"
  },
  {
    "example_id": 380,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10455.0"
    ],
    "annotated_answers": [
      "10455.0"
    ],
    "solution": "import math\n\n# Calculate the interest earned in the first CD\ninterest = 10000 * 0.04 / 2\n\n# Calculate the total amount in the first CD\ntotal = 10000 + interest\n\n# Calculate the interest earned in the second CD\ninterest = total * 0.05 / 2\n\n# Calculate the total amount in the second CD\ntotal = total + interest\n\nprint(total)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0",
      "15.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "import sympy\nprint(sympy.sqrt(12 * 20 * 15 * 60))"
  },
  {
    "example_id": 382,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import *\nx, y = symbols(\"x y\")\nexpr = x**2 + y**2 + 2*x - 4*y + 8\nexpr.subs({x: -1, y: 0}).evalf()"
  },
  {
    "example_id": 383,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from math import sqrt\n\ndef integer_sqrt(x):\n    return int(sqrt(x))\n\nfor x in range(1, 120):\n    if integer_sqrt(120 - sqrt(x)) == sqrt(x):\n        print(x)"
  },
  {
    "example_id": 384,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.833333333333334"
    ],
    "annotated_answers": [
      "-23.5"
    ],
    "solution": "x1 = -7 / 3\nx2 = -5 / 2\nprint(x1 + x2)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0",
      "13.0",
      "23.0",
      "13.0",
      "67.0",
      "13.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy as sp\nx, y, z = sp.symbols('x y z')\neq1 = sp.Eq(3*x+y, 17)\neq2 = sp.Eq(5*y+z, 14)\neq3 = sp.Eq(3*x+5*z, 41)\nsol = sp.solve([eq1, eq2, eq3], [x, y, z])\nprint(sol)"
  },
  {
    "example_id": 386,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0",
      "150.0",
      "120.0",
      "55.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "import numpy as np\n\ndef f(x):\n    return 1.5 * x\n\ndef solve(x):\n    return f(x)\n\ndef solve_for_x(y):\n    return solve(y)\n\ndef solve_for_y(x):\n    return solve(x)\n\ndef solve_for_x_approx(y):\n    return np.interp(y, [0, 120], [-20, 70])\n\ndef solve_for_y_approx(x):\n    return np.interp(x, [-20, 70], [0, 120])\n\nprint(solve_for_y(100))\nprint(solve_for_x(100))\nprint(solve_for_y_approx(100))\nprint(solve_for_x_approx(100))"
  },
  {
    "example_id": 387,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "product = 4/3 * 6/4 * 8/5 * 10/6 * 12/7 * 14/8\nprint(product)"
  },
  {
    "example_id": 388,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "def psi(a, b):\n    return 2 * a + 5 * b\n\nprint(psi(3 * psi(1, 0), 0))"
  },
  {
    "example_id": 389,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\neq = x**2 - 2*x - 3\np, q = sympy.solve(eq, x)\nprint((p+1)*(q+1))"
  },
  {
    "example_id": 390,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def get_average(a, b):\n    return (a + b) / 2\n\ndef get_average_of_average(a, b, c):\n    return get_average(get_average(a, b), c)\n\nprint(get_average_of_average(3, 5, 8))"
  },
  {
    "example_id": 391,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "x_coordinates = []\nfor x in range(1, 7):\n    for y in range(1, 7):\n        if x / y == 1 / 7:\n            x_coordinates.append(x)\nprint(sum(x_coordinates))"
  },
  {
    "example_id": 392,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\np = 4 + 2 * (x + 2)**0.5\ng = 4 - 3 * x\np_g = p.subs(x, g)\nsolve(p_g, x)"
  },
  {
    "example_id": 393,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.599999999999998"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = 42 / 6\ny = 14 / (2 * x - 9)\nxy = x * y\nprint(xy)"
  },
  {
    "example_id": 394,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf1 = x**2 - 4*x + 3\nf2 = x + 5\nf3 = x**2 + 4*x - 5\nf4 = x - c\nf1_f2 = f1 * f2\nf3_f4 = f3 * f4\nf1_f2 - f3_f4"
  },
  {
    "example_id": 395,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "expression = 2**10 - 2**8\nexpression /= 2**7 - 2**6\nprint(expression)"
  },
  {
    "example_id": 396,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "-4.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.5"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\n\na, b, c = Symbol('a'), Symbol('b'), Symbol('c')\n\nx = Symbol('x')\n\n# Find the roots of the quadratic\nroots = solve((a*x**2+b*x+c), x)\n\n# Find the greater root\ngreater_root = roots[1]\n\n# Find the value of n\nn = greater_root**2 - 4\n\nprint(n)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8999999999999999"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "d = 4 / 2\nc = 20 / 9\nprint(d / c)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6310679611650485",
      "6.310679611650485",
      "16",
      "6.310679611650485",
      "16",
      "6.310679611650485",
      "16",
      "6.310679611650485",
      "16",
      "6310679611650485.0"
    ],
    "annotated_answers": [
      "0.015"
    ],
    "solution": "def sum_of_terms(n):\n    return (3 * (103 ** n) + 27 * (103 ** (n - 1))) / (2 * 103 ** n)\n\ndef decimal_to_string(decimal):\n    string = \"\"\n    for digit in decimal:\n        string += str(digit)\n    return string\n\ndef series(n):\n    decimal = [sum_of_terms(k) for k in range(n)]\n    return decimal_to_string(decimal)\n\nprint(series(10))"
  },
  {
    "example_id": 400,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "560.0",
      "53.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\nmax_workers = sym.solve(x*-265+2800, x)[0]\nprint(max_workers)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "a = 27 - 18\nb = 18\nprint(a+b)"
  },
  {
    "example_id": 402,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "total = 15\nchocolate = vanilla = peppermint = lemon = 0\nchocolate = vanilla = peppermint = lemon = 0\nchocolate = 8\nvanilla = 8\npeppermint = 8\nlemon = 8\n\nprint(lemon)"
  },
  {
    "example_id": 403,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "print(int(round(pow(25, 1/3))))"
  },
  {
    "example_id": 404,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "h(-1)"
  },
  {
    "example_id": 405,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "x = 2\na = 4\nb = 9\nc = 2\nprint(a + b + c)"
  },
  {
    "example_id": 406,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "22.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    if x % 2 == 0:\n        return x / 2\n    else:\n        return 3 * x + 1\n\n\na = 14\nb = 7\n\nprint(f(a), f(b))"
  },
  {
    "example_id": 407,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\nprint(simplify((7+8*x)-3*(2+6*x+2*x**2)+9*(1+3*x+4*x**2+12*x**3)-9*(7-x**2-8*x**3+13*x**4)).coeff(x))"
  },
  {
    "example_id": 408,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1 + 7\nprint(x)"
  },
  {
    "example_id": 409,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "-6.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy import solve\nfrom sympy import symbols\nfrom sympy import pprint\n\nx = symbols('x')\ny = (2/x**2 + 2/x - 6)\npprint(y)"
  },
  {
    "example_id": 410,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print((3-4)**2 + 2*(3+4))"
  },
  {
    "example_id": 411,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x1 = -3 / 2\nx2 = 7 / 2\nprint(x1 + x2)"
  },
  {
    "example_id": 412,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "143.0",
      "3.0",
      "143.0"
    ],
    "annotated_answers": [
      "112.0"
    ],
    "solution": "from sympy import sqrt, simplify\n\nnum = 2/((1 + 2*sqrt(3)) + (3/(2 - sqrt(3))))\nden = (1 + 2*sqrt(3)) * (2 - sqrt(3))\n\nprint(simplify(num/den))"
  },
  {
    "example_id": 413,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "630.0"
    ],
    "annotated_answers": [
      "630.0"
    ],
    "solution": "sum_of_first_20_multiples = sum([5*i for i in range(1, 21)])\nsum_of_first_20_even_integers = sum([2*i for i in range(1, 21)])\nprint(sum_of_first_20_multiples - sum_of_first_20_even_integers)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "15.0",
      "2.0"
    ],
    "annotated_answers": [
      "16384.0"
    ],
    "solution": "import sympy\nk = sympy.symbols('k')\nfactor = (sympy.sqrt(k**2 - 15) - k) / 2\nprint(factor)"
  },
  {
    "example_id": 415,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x1 = -4\ny1 = 1\nx2 = 1\ny2 = 13\nimport numpy as np\n\ndef distance(x1, y1, x2, y2):\n    return np.sqrt((x2-x1)**2 + (y2-y1)**2)\n\nprint(distance(x1, y1, x2, y2))"
  },
  {
    "example_id": 416,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 10):\n    sum += i\n    if sum ** 0.5 == int(sum ** 0.5):\n        print(i)\n        break"
  },
  {
    "example_id": 417,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 14\nprint(35 / 3 * x ** 2 * 12 / x ** 2)"
  },
  {
    "example_id": 418,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = -1 / 4\nb = 1\ny = a * 6 + b\nprint(y)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3611111111111111"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "import math\n\ndef f(x):\n    return 2 * x + 1\n\ndef g(x):\n    return f(x) + 2 * x\n\ndef h(x):\n    return f(x) + 3 * x\n\ndef solve_for_a(g):\n    return -1 / (2 * g(0))\n\ndef solve_for_b(h):\n    return 1 / (3 * h(0))\n\na = solve_for_a(g)\nb = solve_for_b(h)\n\nprint(a**2 + b**2)"
  },
  {
    "example_id": 420,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = 16\nn = 9\nprint(m - n)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print((3**4 - 3**3) / (3**3 - 3**2))"
  },
  {
    "example_id": 422,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "for x in range(1, 10):\n    if x**2 - 9 == 0:\n        print(x)"
  },
  {
    "example_id": 423,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# (6*8) = 48\n# 3*(48) = 144\nprint(144)"
  },
  {
    "example_id": 424,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\na = 1\nb = 2\nprint(abs(a-b))"
  },
  {
    "example_id": 425,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 3\na = -13\nb = 21\nprint(2*z*z + 2*z + b)"
  },
  {
    "example_id": 426,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    if x <= 3:\n        return 9 - 2 * x\n    else:\n        return a * x + b\n\ndef solve(a, b):\n    x = f(f(3))\n    assert x == 3\n    x = f(f(x))\n    assert x == 3\n    return a + b\n\nprint(solve(1, 1))"
  },
  {
    "example_id": 427,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "a = 1\nb = -2\nc = 3\n\nprint(a+b+c)"
  },
  {
    "example_id": 428,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "36.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "slope = (8 - 0) / (7 - 9)\ny_intercept = 8 - (slope * 7)\nprint(slope, y_intercept)"
  },
  {
    "example_id": 429,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# The largest and smallest of three consecutive terms in an arithmetic sequence differ by 14.\ndiff = 14\n# Half of the smallest term is added to each term and the sum of the resulting three numbers is 120.\nsum = 120\n# The original smallest term\nsmallest = (sum - diff) // 2\nprint(smallest)"
  },
  {
    "example_id": 430,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "for i in range(21):\n    if len(str(i))!= len(str(i).translate(str.maketrans('','','1234567890'))):\n        print(i)"
  },
  {
    "example_id": 431,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "77.0",
      "10.0",
      "9.0",
      "149.0",
      "10.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import sympy as sp\n\nx = sp.Symbol('x')\nexpr = sp.sqrt(12*x+12)*sp.sqrt(3*x-6) - 4*x - 34\n\nsol = sp.solve(expr, x)\nprint(sol)"
  },
  {
    "example_id": 432,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x**2 - 6*x + 13)"
  },
  {
    "example_id": 433,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-17.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "m = -2\nn = -15\nprint(m+n)"
  },
  {
    "example_id": 434,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "10.0",
      "4.0",
      "10.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import Symbol\nfrom sympy.solvers import solve\nfrom sympy.abc import x, y\n\neq = x**2 - 4*x + y**2 - 6*y - 36\nradius = solve(eq, x)\nprint(radius)"
  },
  {
    "example_id": 435,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "f_5 = 2 * 5 - 3\nf_5 = 10 - 3\nf_5 = 7\ng_f_5 = 7 + 1\ng_f_5 = 8\nprint(g_f_5)"
  },
  {
    "example_id": 436,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "93.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "import math\n\ndef largest_prime_factor(n):\n    i = int(math.sqrt(n))\n    while i > 1:\n        if n % i == 0:\n            return i\n        i -= 1\n    return 1\n\nprint(largest_prime_factor(9951))"
  },
  {
    "example_id": 437,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "A = 14\nB = 8\na_b = A - B\nprint(a_b)"
  },
  {
    "example_id": 438,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "430.4761904761905"
    ],
    "annotated_answers": [
      "228.3"
    ],
    "solution": "initial_height = 452 / 1.05\nprint(initial_height)"
  },
  {
    "example_id": 439,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nf = (1/(x-64)) + (1/(x**2-64)) + (1/(x**3-64))\nprint(f.free_symbols)"
  },
  {
    "example_id": 440,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# 1 + 3 + 5 + 7 + 9\nsum = 1 + 3 + 5 + 7 + 9\nprint(sum)"
  },
  {
    "example_id": 441,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import simplify, S\n\nx, y, z = S('x,y,z')\n\neq = ((y-x)**2 / (y-z)*(z-x)) + ((z-y)**2 / (z-x)*(x-y)) + ((x-z)**2 / (x-y)*(y-z))\n\nprint(simplify(eq))"
  },
  {
    "example_id": 442,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "A, B, C = 9, 8, 3\n\nA_plus_B_plus_C = A + B + C\n\nprint(A_plus_B_plus_C)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 1\ny = 2\nz = 3\nprint(x+y+z)"
  },
  {
    "example_id": 444,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "217.0"
    ],
    "solution": "x = 3\ny = 4\nx_squared = x ** 2\ny_squared = y ** 2\nx_y = x * y\nx_plus_y = x + y\nx_plus_y_squared = x_plus_y ** 2\nx_plus_y_minus_x_y = x_plus_y - x_y\nprint(x_plus_y_squared - x_plus_y_minus_x_y)"
  },
  {
    "example_id": 445,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "sum = 25\ndifference = 11\nlarger_number = sum - difference\nprint(larger_number)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "from math import ceil, floor\n\ndef inside_region(x, y):\n    return y <= -x**2 + 35/4 and x >= 0\n\ndef boundary_region(x, y):\n    return y == -x**2 + 35/4 and x >= 0\n\ndef count_points(f):\n    count = 0\n    for x in range(int(ceil(-35/4)), int(floor(35/4))):\n        for y in range(int(ceil(-x**2 + 35/4)), int(floor(-x**2 + 35/4))):\n            if f(x, y):\n                count += 1\n    return count\n\nprint(count_points(inside_region))\nprint(count_points(boundary_region))"
  },
  {
    "example_id": 447,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def star(a, b):\n    return (a + b) * b\n\nprint(star(3, 5) - star(5, 3))"
  },
  {
    "example_id": 448,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "18.0",
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = 9*x**2 + 18*x + 7\nf_prime = sympy.diff(f, x)\nprint(f_prime)\nx_min = sympy.solve(f_prime, x)\nprint(x_min)"
  },
  {
    "example_id": 449,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.4000000000000001",
      "1.5999999999999999",
      "1.0",
      "1.2000000000000002",
      "0.6000000000000001"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# Anna's time\nan = 2/5\n# Bertram's time\nbt = 3/5\n# Carli's time\ncl = 4/5\n# David's time\ndv = 1/5\n\n# Anna + Bertram + Carli + David\nan_bt_cl_dv = an + bt + cl + dv\n# Anna + Carli + David\nan_cl_dv = an + cl + dv\n# Bertram + Carli + David\nbt_cl_dv = bt + cl + dv\n# Anna + Bertram\nan_bt = an + bt\n# Anna + Carli\nan_cl = an + cl\n# Anna + David\nan_dv = an + dv\n\nprint(an_bt_cl_dv)\nprint(an_cl_dv)\nprint(bt_cl_dv)\nprint(an_bt)\nprint(an_cl)\nprint(an_dv)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.3027756376977777"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "b = -1\nc = -3\nx_min = -2\nx_max = 3\n\ndef f(x):\n    return x**2 + b*x + c\n\ndef f_positive(x):\n    return f(x) > 0\n\ndef f_negative(x):\n    return f(x) < 0\n\ndef f_zero(x):\n    return f(x) == 0\n\ndef find_root(f, a, b, f_positive):\n    while abs(a - b) > 1e-10:\n        mid = (a + b) / 2\n        if f_positive(mid):\n            a = mid\n        else:\n            b = mid\n    return mid\n\nprint(find_root(f_positive, x_min, x_max, f_positive))"
  },
  {
    "example_id": 451,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import sqrt\n\ndef f(x):\n    if x >= 0:\n        return -sqrt(x)\n    else:\n        return x**2\n\ndef g(x):\n    return f(f(x))\n\ndef h(x):\n    return g(g(x))\n\ndef i(x):\n    return h(h(x))\n\nprint(i(512))"
  },
  {
    "example_id": 452,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "A = 1\nB = -2\nC = 1\nr = 5\nprint(A+B+C+r)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "import sympy\nprint(sympy.sqrt(5**5 + 5**5 + 5**5 + 5**5 + 5**5))"
  },
  {
    "example_id": 454,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "age_john = 27\nage_father = age_john - 27\nsum_age_john = sum([int(x) for x in str(age_john)])\nsum_age_father = sum([int(x) for x in str(age_father)])\nprint(age_father)"
  },
  {
    "example_id": 455,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 0:\n        return n**2 - 3*n + 1\n    else:\n        return n**2 + 1\n\ndef solve(n):\n    return f(f(f(f(f(f(n))))))\n\nprint(solve(2))"
  },
  {
    "example_id": 456,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import sqrt\n\ndenominator = sqrt(2) + sqrt(8) + sqrt(32)\ndenominator = denominator.cancel()\n\nprint(denominator)"
  },
  {
    "example_id": 457,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import sqrt\na = 3 / sqrt(16)\nb = 1 / sqrt(3)\n\nprint(a + b)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nsolution = sympy.solve(sympy.Eq((3/4)**x, 81/256), x)\nprint(solution)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import sympy as sy\nf = sy.symbols('f')\neq = sy.simplify(f*(1+2*f)-2*(1+2*f+f**2)+3*(1+2*f+f**2+f**3)-4*(1+2*f+f**2+f**3+f**4))\nprint(eq.coeff(f))"
  },
  {
    "example_id": 460,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "f = {0: 0, 1: 0, 2: 1, 3: 3, 4: 6}\ng = {x: f[x] - x for x in f}\nprint(len(set(g.values())))"
  },
  {
    "example_id": 461,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "208.0"
    ],
    "solution": "import math\n\na = 2\nb = 3\n\nwhile 2*a + b <= 5*a - 4:\n    a += 1\n    b += 1\n\nprint(2*a + b)"
  },
  {
    "example_id": 462,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 7\nprint(n)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x\n\ndef find_solutions(n):\n    solutions = []\n    for i in range(1, n + 1):\n        if absolute_value(2 - i) == 3:\n            solutions.append(i)\n    return solutions\n\nprint(find_solutions(10))"
  },
  {
    "example_id": 464,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "20.0",
      "56.0",
      "-4.0",
      "2.0",
      "7.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "from sympy import symbols, expand, factor\nx = symbols('x')\nf = 4*(x + 7)*(2 - x)\nprint(expand(f))\nprint(factor(f))"
  },
  {
    "example_id": 465,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "total_chimes = 24\nprint(total_chimes)"
  },
  {
    "example_id": 466,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "def f(x):\n    return x + 2\n\ndef f_inv(x):\n    return x - 2\n\ndef f_inv_11():\n    return f_inv(11)\n\nprint(f_inv_11())"
  },
  {
    "example_id": 467,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15333.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nprint(sum(f(f(i)) for i in range(1, 10)))"
  },
  {
    "example_id": 468,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(8 * 6 ** 2 - 3 * 11)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.123233995736766",
      "-17.0",
      "-1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "f = lambda x: (2*x-6)**0.5/(x-3)\nsol = f(1)\nprint(sol)"
  },
  {
    "example_id": 470,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3\nprint(x)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from sympy import sympify\n\nexpr = sympify('(sqrt(3)*(2*x-4))/(sqrt(3)*(x+4))')\nx = expr.evalf()\nprint(x)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "a = 33 - 14\nb = 14\nprint(a+b)"
  },
  {
    "example_id": 473,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from math import sqrt\nx = 5\ny = 2\n\nprint(sqrt(x**3 - 2**y))"
  },
  {
    "example_id": 474,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0",
      "2.0",
      "57.0",
      "2.0",
      "2.0",
      "57.0",
      "2.0",
      "7.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nroots = solve(x**2 + 7*x - 2, x)\nalpha, beta = roots\nalpha_beta = alpha**2 + beta**2\nprint(alpha_beta)"
  },
  {
    "example_id": 475,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(5 * 1 + 4)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15554.0"
    ],
    "annotated_answers": [
      "15554.0"
    ],
    "solution": "s6 = 2222 + 1010 * 5\ns7 = s6 + 1010\nprint(s6 + s7)"
  },
  {
    "example_id": 477,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x_intercept = 3\nprint(x_intercept)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3600.0"
    ],
    "annotated_answers": [
      "3600.0"
    ],
    "solution": "new_area = (3491 - 60) * (3491 + 60)\nprint(new_area - 3491 * 3491)"
  },
  {
    "example_id": 479,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = x**4\ng = 7*x**2 - 10\nsolutions = sympy.solve([f-g], x)\nprint(solutions)"
  },
  {
    "example_id": 480,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print((15+ 5) * (15- 5))"
  },
  {
    "example_id": 481,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "f = lambda x: 2 / (x + 1)\nf_inv = lambda y: 2 / y - 1\nprint(f_inv(1 / 5))"
  },
  {
    "example_id": 482,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "x = -6\ny = -8\ncenter_sum = x + y\nprint(center_sum)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.8333333333333333"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 4\ny = 3\nprint((2 * x + y) / (3 * x - 2 * y))"
  },
  {
    "example_id": 484,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "13.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\n\ndist = sympy.sqrt(x**2 + (x + 1)**2) - 5\ndist = dist.subs(x, 2)\n\nprint(dist.expand())"
  },
  {
    "example_id": 485,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5555555555555554"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(abs(23/9))"
  },
  {
    "example_id": 486,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "smaller = 7 / (14 + y)\nlarger = 14 / (7 + x)\nproduct = 56\nx = smaller * (larger - 1)\ny = larger * (smaller - 1)\nprint(x)"
  },
  {
    "example_id": 487,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 3\nb = 11\nprint(b-a)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def g(x):\n    return 2*x-1\n\ndef f(x):\n    return g(g(x))-g(x)\n\nprint(f(3))"
  },
  {
    "example_id": 489,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.333333333333333"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "d = 8 / 9 * 6\nprint(d)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0",
      "22.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 4\nwhile n <= 20:\n    n += 2\n    print(n)"
  },
  {
    "example_id": 491,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.384615384615385"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "years = 10000 / 650\nprint(years)"
  },
  {
    "example_id": 492,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 3/2 + 5/2\ny = 1\nprint(x, y)"
  },
  {
    "example_id": 493,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 3\nb = 2\nc = 1\nprint(a+b+c)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "466.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "A = 24\nB = 2\nC = -19\n\nab = (A*B)\nac = (A*C)\nbc = (B*C)\n\nabc = ab - ac + bc\n\nprint(abc)"
  },
  {
    "example_id": 495,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0",
      "3.0",
      "32.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import sympy as sym\nx, y, z = sym.symbols('x y z')\neq1 = 3*x + 4*y - 12*z - 10\neq2 = -2*x - 3*y + 9*z - 4\nsol = sym.solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 496,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import log\nlog_8 = log(64, 8)\nprint(log_8)"
  },
  {
    "example_id": 497,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-31.0"
    ],
    "annotated_answers": [
      "-13.5"
    ],
    "solution": "p = -14\nq = -17\nprint(p + q)"
  },
  {
    "example_id": 498,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "from math import log\n\ndef count_endpoints(n):\n    if n == 1:\n        return 2\n    else:\n        return 2 + 2 * (int(log(n, 2)) - 1)\n\nprint(count_endpoints(16))"
  },
  {
    "example_id": 499,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-75.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, d, e = -2, -20, -53\nsum = a + d + e\nprint(sum)"
  },
  {
    "example_id": 500,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20000.0"
    ],
    "annotated_answers": [
      "-6.5"
    ],
    "solution": "a = 2000\nb = -1\n\na = a / 10**b\n\nprint(a)"
  },
  {
    "example_id": 501,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9999.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "# smallest positive four-digit integer that is the product of two consecutive integers\nn = 9999\nwhile n > 999:\n    if n % 9 == 0:\n        break\n    n -= 1\nprint(n)"
  },
  {
    "example_id": 502,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve\nx = solve(x + 1/(x - 1) - x + 2/(x + 2))[0]\nprint(x)"
  },
  {
    "example_id": 503,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "936.0",
      "2.0",
      "2.0",
      "3.0",
      "936.0",
      "2.0",
      "2.0",
      "3.0",
      "936.0",
      "2.0",
      "2.0",
      "3.0",
      "936.0",
      "2.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "# Use sympy to solve the equation for the volume\nfrom sympy import solve, symbols\n\n# Define the variables\na, b, c = symbols('a b c')\n\n# Define the edge lengths\nL = [a, b, c]\n\n# Define the area of the faces\nA = [30, 180, 24]\n\n# Define the equation for the volume\nV = a * b * c\n\n# Define the equation for the area of the faces\nF = sum(A)\n\n# Define the equation for the sum of the edge lengths\nS = sum(L)\n\n# Solve the equations for the variables\nsolutions = solve([V - F, S], [a, b, c])\n\n# Print the solution\nprint(solutions)"
  },
  {
    "example_id": 504,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "m, n = 0, 0\nwhile m*m + n*n < 5:\n    m, n = m + 1, n + 1\nprint(m + n)"
  },
  {
    "example_id": 505,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "hours_needed = 3 / 12\nnum_people_needed = 5 * hours_needed\nprint(num_people_needed)"
  },
  {
    "example_id": 506,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num_meals = 18 / 12\nprint(num_meals)"
  },
  {
    "example_id": 507,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "3.2"
    ],
    "solution": "def f(x):\n    return 2 * x + 2\n\nprint(f(10))"
  },
  {
    "example_id": 508,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "x = -7\ny = 0\nprint(x)"
  },
  {
    "example_id": 509,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nf = x**3\nf_inv = 8**(1/3)\nprint(f_inv / (f_inv**(-1)))"
  },
  {
    "example_id": 510,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.414213562373095"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\nx = 2 + sqrt(2)\nprint(x)"
  },
  {
    "example_id": 511,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from math import ceil, sqrt\nprint(ceil(sqrt(20)) ** 2)"
  },
  {
    "example_id": 512,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    return 5*x**2 + 3*x + 4\n\nprint(f(-2))"
  },
  {
    "example_id": 513,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# 120% of 30 = 36\n# 130% of 20 = 26\n# 36 - 26 = 10\nprint(10)"
  },
  {
    "example_id": 514,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "print((13 + 5) * (13 - 5))"
  },
  {
    "example_id": 515,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = range(-10, 0)\ny = [((x+2)**4)-100 for x in x]\nprint(len(y))"
  },
  {
    "example_id": 516,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import sqrt\n\ndenominator = 1 + sqrt(2) - sqrt(3)\nsimplified_denominator = sqrt(2) + sqrt(3) + 1\n\nprint(simplified_denominator)"
  },
  {
    "example_id": 517,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "for x in range(1, 10):\n    if x**2 + 6**2 == 10**2:\n        print(x)"
  },
  {
    "example_id": 518,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import numpy as np\n\n# Get the intersection point\nintersection = np.roots([-2, 1, 1])\n\n# Get b\nb = intersection[0] - 6*intersection[0]\nprint(b)"
  },
  {
    "example_id": 519,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "y = 2 * (-2) + 6\nprint(y)"
  },
  {
    "example_id": 520,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.16326530612244897"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "from math import fabs\n\nx_min = -3\nx_max = 3\ny_min = -3\ny_max = 3\n\narea = 0\n\nfor x in range(x_min, x_max + 1):\n    for y in range(y_min, y_max + 1):\n        if y >= fabs(x) and y <= -fabs(x) + 3:\n            area += 1\n\nprint(area / (x_max - x_min + 1) / (y_max - y_min + 1))"
  },
  {
    "example_id": 521,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "from sympy import S\n\ndef find_sum(n):\n    return S(n*(n+1))/2\n\ndef find_sum_of_integers(n):\n    return find_sum(n-1)\n\ndef find_all_integers(n):\n    return [x for x in range(1, n+1) if abs(x) + 1 > 7 and abs(x+1) <= 7]\n\ndef find_sum_of_all_integers(n):\n    return sum(find_all_integers(n))\n\nn = 7\nprint(find_sum_of_all_integers(n))"
  },
  {
    "example_id": 522,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = x**2 - 14*x + 3\nprint(f.subs(x, 0))"
  },
  {
    "example_id": 523,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "332.85714285714283",
      "332.85714285714283"
    ],
    "annotated_answers": [
      "2300.0"
    ],
    "solution": "feather_cost = 932 - 1402 + 1402\ngold_cost = 932 - 1402 + 1402\nfeather_unit_cost = feather_cost / 14\ngold_unit_cost = gold_cost / 14\nfeather_5_pound_cost = feather_unit_cost * 5\ngold_5_pound_cost = gold_unit_cost * 5\nprint(feather_5_pound_cost, gold_5_pound_cost)"
  },
  {
    "example_id": 524,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\ny = x**2 - 8*x + 5\nk = y.subs(x, 0)\nprint(k)"
  },
  {
    "example_id": 525,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def consecutive_sum(n):\n    return sum(range(2, n + 1, 2))\n\ndef consecutive_count(n):\n    return sum(range(1, n + 1))\n\ndef consecutive_sum_diff(n):\n    return consecutive_sum(n) - consecutive_count(n)\n\ndef consecutive_sum_diff_8(n):\n    return consecutive_sum_diff(8) - consecutive_sum_diff(n)\n\ndef consecutive_even_smallest(n):\n    return consecutive_sum_diff_8(n) - consecutive_sum_diff(n)\n\nprint(consecutive_even_smallest(5))"
  },
  {
    "example_id": 526,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 3\ny = 2\nprint((2*x**3 - 3*y**2)/6)"
  },
  {
    "example_id": 527,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "158.0"
    ],
    "solution": "from math import sqrt\nx = 7\ny = sqrt(19)\nprint(x**2 + y**2)"
  },
  {
    "example_id": 528,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = 3\ny = 4\nnum_oranges = x // y\nprint(num_oranges)"
  },
  {
    "example_id": 529,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "avg_a_2b = 7\navg_a_2c = 8\navg_a = (avg_a_2b + avg_a_2c) / 2\nprint(avg_a)"
  },
  {
    "example_id": 530,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = -2\nb = 4\nc = 5\n\nk = b**2 - 4 * a * c\nprint(k)"
  },
  {
    "example_id": 531,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1603.0",
      "82.0",
      "333.0",
      "82.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sym\n\nl = sym.Line((1,2), (19,4))\np = l.projection((20,0))\nprint(p)"
  },
  {
    "example_id": 532,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.007843137254902"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 512 / 255\nprint(n)"
  },
  {
    "example_id": 533,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "800000.0"
    ],
    "annotated_answers": [
      "800000.0"
    ],
    "solution": "print((1002 ** 2) - (502 ** 2) + (298 ** 2) - (202 ** 2))"
  },
  {
    "example_id": 534,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "11.0",
      "24.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "import sympy as sym\n\nx, y, z = sym.symbols('x y z')\n\neq1 = sym.Eq(x + y - z, -8)\neq2 = sym.Eq(x - y + z, 18)\neq3 = sym.Eq(-x + y + z, 30)\n\nsol = sym.solve((eq1, eq2, eq3), (x, y, z))\nprint(sol)\n\n# x = -10, y = 10, z = 10\n# xyz = -10 * 10 * 10 = -1000"
  },
  {
    "example_id": 535,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for m in range(1, 7):\n    print(m)"
  },
  {
    "example_id": 536,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "m = 3\nn = 7\np = 2\nprint(m + n + p)"
  },
  {
    "example_id": 537,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# A's portion\na_miles = 100 / 5\n\n# B's portion\nb_miles = 1.5 * a_miles\n\n# C and D's portion\nc_d_miles = 2 * (a_miles + b_miles)\n\n# E's portion\ne_miles = 10\n\ntotal_miles = a_miles + b_miles + c_d_miles + e_miles\n\nprint(total_miles)"
  },
  {
    "example_id": 538,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40000.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "playground_area = 200 ** 2\nprint(playground_area)"
  },
  {
    "example_id": 539,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from math import sqrt, ceil\n\nprint(ceil(-sqrt(23)))"
  },
  {
    "example_id": 540,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# f(x) = 2x-5\n# f(f(x)) = 2(2x-5) - 5 = 4x - 10\n# f(f(x)) = 3\n\n# x = 4\nprint(4)"
  },
  {
    "example_id": 541,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1023.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "a = 1\nwhile True:\n    b = a + 2\n    if (b**2 - a**2) == 128:\n        print(a * b)\n        break\n    a = b"
  },
  {
    "example_id": 542,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "987.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def least_positive_integer(n):\n    return int(n * 0.987)\n\nprint(least_positive_integer(1000))"
  },
  {
    "example_id": 543,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5009463529699914",
      "17",
      "2.252839954493917",
      "34"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(9**18)\nprint(27**24)"
  },
  {
    "example_id": 544,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "4.0",
      "3.0",
      "4.0",
      "5.0",
      "4.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from math import gcd\n\ndef non_equi_triangles_with_side_lengths(n, a):\n    for i in range(n):\n        a_list = [a + i, a + i + 1, a + i + 2]\n        if len(set(a_list)) == 3 and gcd(a_list[0], a_list[1], a_list[2]) == 1:\n            yield a_list\n\nfor a in range(1, 60):\n    for triangle in non_equi_triangles_with_side_lengths(100, a):\n        print(triangle)"
  },
  {
    "example_id": 545,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "print(4 * 3)"
  },
  {
    "example_id": 546,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "total_value = 75\nvalue_of_dimes = 10\nvalue_of_nickels = 5\ntotal_nickels = total_value // value_of_nickels\nprint(total_nickels)"
  },
  {
    "example_id": 547,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.66666666666666"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "small_weight = 185 / 3\nlarge_weight = small_weight + 20\nprint(large_weight)"
  },
  {
    "example_id": 548,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 0:\n        return n**2 - 4*n - 1\n    else:\n        return n**2\n\ndef g(n):\n    return f(f(f(f(n))))\n\nprint(g(4))"
  },
  {
    "example_id": 549,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "floor_11_1 = 11\nfloor_5_11_1 = 5\nprint(floor_11_1 + 2 * floor_5_11_1)"
  },
  {
    "example_id": 550,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.721347520444482",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.log(4, 64 ** (1 / 3))\nprint(x)"
  },
  {
    "example_id": 551,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\ng = math.sqrt\nt = lambda x: 3-g(x)\nprint(t(g(16)))"
  },
  {
    "example_id": 552,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 553,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "9.0",
      "1.0",
      "3.0",
      "8.0",
      "1.0",
      "2.0",
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, expand, collect\nx = Symbol('x')\nf = expand(1/(x**2-7) + 1/(x**3-8) + 1/(x**4-9))\nf = collect(f, x)\nprint(f)"
  },
  {
    "example_id": 554,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import ceil, floor, sqrt\nprint(ceil(sqrt(10)) + floor(sqrt(10)))"
  },
  {
    "example_id": 555,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4000.0"
    ],
    "annotated_answers": [
      "4000.0"
    ],
    "solution": "print(1000 / 0.25)"
  },
  {
    "example_id": 556,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "piles = [5, 4, 3, 0]\nquarters = sum(piles)\nprint(quarters)"
  },
  {
    "example_id": 557,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "367.6470588235294"
    ],
    "annotated_answers": [
      "368.0"
    ],
    "solution": "horsepower = 500 / 1.36\nprint(horsepower)"
  },
  {
    "example_id": 558,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Triangle\ntriangle = 5\n\n# Square\nsquare = 9 - triangle\n\n# Diamond\ndiamond = 5 * 2\n\n# Clubsuit\nclubsuit = diamond + triangle\n\nprint(square)"
  },
  {
    "example_id": 559,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "f = lambda x: x ** 2 - 1\ng = lambda x: x + 7\n\nprint(f(g(7)) + g(f(3)))"
  },
  {
    "example_id": 560,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return x * (3 * x - 4) - 6 * x ** 2 + 3 * x - 5\n\ndef g(x):\n    return x ** 2 - 10 * x + 5\n\ndef h(x):\n    return x - 1\n\ndef is_solution(x):\n    return f(x) <= g(x) and h(x) >= 0\n\nsolutions = []\n\nfor x in range(100):\n    if is_solution(x):\n        solutions.append(x)\n\nprint(solutions)"
  },
  {
    "example_id": 561,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def profit_loss(x):\n    return x**2 - 8*x - 33\n\ndef find_break_even(f):\n    x = 0\n    while f(x) < 0:\n        x += 1\n    return x\n\nbreak_even = find_break_even(profit_loss)\nprint(break_even)"
  },
  {
    "example_id": 562,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "mike_rate = 4 / 5\njosh_rate = 2\nmike_distance = josh_rate * mike_rate\nprint(mike_distance)"
  },
  {
    "example_id": 563,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(int(pow(pow(7/4, 2), 2)))"
  },
  {
    "example_id": 564,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "920.2499999999982"
    ],
    "annotated_answers": [
      "920.25"
    ],
    "solution": "interest = 10000 * (1 + 0.045)**2 - 10000\nprint(interest)"
  },
  {
    "example_id": 565,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "630.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "a = 30\nd = 30\nn = 21\nterm = a + (n-1) * d\nprint(term)"
  },
  {
    "example_id": 566,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(3 + 5)"
  },
  {
    "example_id": 567,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3333333333333333"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "minutes = 20 / 60\nprint(minutes)"
  },
  {
    "example_id": 568,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "a = 3\nb = 10\nresult = 2*a + 5*b - a*b\nprint(result)"
  },
  {
    "example_id": 569,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nprint(a*b*c)"
  },
  {
    "example_id": 570,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5005.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "print(5 + 500 * 10)"
  },
  {
    "example_id": 571,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5",
      "2.0",
      "2.5",
      "5.0",
      "6.5"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "from sympy import diag, sqrt\nAB = sqrt((1-0)**2 + (7-0)**2)\nBC = sqrt((1-1)**2 + (0-(-2))**2)\nCD = sqrt((12-1)**2 + (-2-(-2))**2)\nDA = sqrt((7-12)**2 + (8-(-2))**2)\nABCD = 0.5 * (AB + BC + CD + DA)\nprint(ABCD)"
  },
  {
    "example_id": 572,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "m = 7\nn = 7/m\nprint(m-n)"
  },
  {
    "example_id": 573,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "x = 14\ny = 48\nmax_value = (x**2 + y**2 - 14*x - 48*y) / (2*x)\nprint(max_value)"
  },
  {
    "example_id": 574,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.21"
    ],
    "solution": "b = -2.6\nc = 3.6\nprint(b+c)"
  },
  {
    "example_id": 575,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\n\nd = sympy.solve(2*x**2 + 3*x - 5, x)[0]\ne = sympy.solve(2*x**2 + 3*x - 5, x)[1]\n\nprint((d-1)*(e-1))"
  },
  {
    "example_id": 576,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.11728713807222"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import *\nexpr = (2**(1/4))**(2/5) * (4**(3/8))**(2/25)\nprint(expr)"
  },
  {
    "example_id": 577,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51529.0"
    ],
    "annotated_answers": [
      "33840.0"
    ],
    "solution": "product = 454\nsum1 = product // 2\nsum2 = product - sum1\nlargest_value = sum1 * sum2\nprint(largest_value)"
  },
  {
    "example_id": 578,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(abs(2*6 + 4*3 - 8*(3+3)))"
  },
  {
    "example_id": 579,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "13.0",
      "2.0",
      "3.0",
      "13.0",
      "2.0",
      "1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x y')\n\nx_y = sympy.solve([x - y - 1, x**2 + y**2 - 7], [x, y])\n\nprint(x_y[0][0]**3 - x_y[0][1]**3)"
  },
  {
    "example_id": 580,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.66666666666667",
      "11.333333333333334"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Calculate the discriminant of the quadratic equation\ndiscriminant = 3 * 5 ** 2 - 4 * 4 * 5 - 3 * 63\n\n# Calculate the roots of the quadratic equation\nroot1 = (-3 * 5 ** 2 + 4 * 4 * 5 + 3 * 63) / 3\nroot2 = (-3 * 5 ** 2 - 4 * 4 * 5 + 3 * 63) / 3\n\n# Print the roots\nprint(root1)\nprint(root2)"
  },
  {
    "example_id": 581,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((3*4-2)*(4*4+1)-(3*4-2)*4*4+1)"
  },
  {
    "example_id": 582,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-19.0",
      "2.0",
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import sqrt\ny = sqrt(19 + 3 * 7) - 19\nprint(y)"
  },
  {
    "example_id": 583,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nradius = sympy.sqrt(sympy.Symbol('x')**2 + sympy.Symbol('y')**2 - 6)\nprint(radius)"
  },
  {
    "example_id": 584,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "f(4) = 4^2 - 4\\sqrt{4} + 1 = 16 - 4 + 1 = 11\nf(f(4)) = f(11) = 11^2 - 4\\sqrt{11} + 1 = 121 - 4\\sqrt{121} + 1 = 1121 - 4\\sqrt{1121} + 1"
  },
  {
    "example_id": 585,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "5050.0"
    ],
    "solution": "print(sum(range(1, 101)))"
  },
  {
    "example_id": 586,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(4 - 2)"
  },
  {
    "example_id": 587,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1600.0"
    ],
    "annotated_answers": [
      "1600.0"
    ],
    "solution": "x = 441 + 2 * 21 * 19 + 361\nprint(x)"
  },
  {
    "example_id": 588,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0"
    ],
    "annotated_answers": [
      "-42.0"
    ],
    "solution": "# constant term of f(x) = x^3 - 6x^2 + 3x - 4\nf_const = -6\n# constant term of g(x) = x^3 + 5x^2 + 9x - 2\ng_const = -2\n# f(g(x)) = x^3 - 6x^2 + 3x - 4 + x^3 + 5x^2 + 9x - 2\nf_g = f_const + g_const\nprint(f_g)"
  },
  {
    "example_id": 589,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.80350850198276"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\nradius = math.sqrt(130)\nx_max = 2 * radius + 5\nprint(x_max)"
  },
  {
    "example_id": 590,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-24.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "from math import sqrt\nx = -24\nprint(x)"
  },
  {
    "example_id": 591,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "g = lambda x: 3\nprint(g(2))"
  },
  {
    "example_id": 592,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = 2*x**2 + 13*x + 6\nsolution = sympy.solve(f, x)\nprint(solution[0]**2 * solution[1]**2)"
  },
  {
    "example_id": 593,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# compute the common difference for a given k\ndef get_difference(k):\n    return k\n\n# compute the nth term of the sequence\ndef get_term(n, k):\n    return n * k\n\n# check if a term is in the sequence\ndef check_term(n, k):\n    return get_term(n, k) == 2005\n\n# compute the number of values of k that satisfy the condition\ndef compute_values(n):\n    count = 0\n    for k in range(1, n):\n        if check_term(n, k):\n            count += 1\n    return count\n\nprint(compute_values(2005))"
  },
  {
    "example_id": 594,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "print(31**2 - 19**2)"
  },
  {
    "example_id": 595,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Symbol, solve, exp, floor, factorial, binomial, oo, sqrt, I, conjugate\n\nx = Symbol('x')\nf = exp(3*x**2 - floor(x)*factorial(floor(x)) + x**4 + 3*x**3 - 6*x**2 + 2*x + 1)\ng = exp(3*x**2 - floor(x)*factorial(floor(x)) + x**4 + 4*x**3 - 11*x**2 - 6*x + 13)\n\nsolve(f - g, x)"
  },
  {
    "example_id": 596,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# define a function that takes in a number of piles\n# and returns the number of quarters in the nth pile\ndef number_of_quarters(n):\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 2\n    elif n == 4:\n        return 2 * number_of_quarters(2)\n    else:\n        return number_of_quarters(n-1) + number_of_quarters(n+1)\n\n# use the function to calculate the number of quarters in the fourth pile\nprint(number_of_quarters(4))"
  },
  {
    "example_id": 597,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "p, q = 2, 3\nprint((p-1)*(q-1))"
  },
  {
    "example_id": 598,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nprint(f(f(2)))"
  },
  {
    "example_id": 599,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "9.0",
      "16.0",
      "25.0",
      "36.0",
      "49.0",
      "64.0",
      "81.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\nfor t in range(1, 100):\n    if math.floor(math.sqrt(t)) == math.ceil(math.sqrt(t)):\n        print(t)"
  },
  {
    "example_id": 600,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy as sp\n\nx, y = sp.symbols('x y')\n\neq1 = 2*x - 3*y\neq2 = 4*x + 3*y\n\nsol = sp.solve((eq1, eq2))\n\nprint(sol)"
  },
  {
    "example_id": 601,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.666666666666664"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "coins_am = 10\ncoins_ben = 3 * coins_am\ncoins_carl = 1/3 * coins_ben\ncoins_debbie = 2/3 * coins_carl\ntotal_coins = coins_am + coins_ben + coins_carl + coins_debbie\nprint(total_coins)"
  },
  {
    "example_id": 602,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "7.0",
      "2.0",
      "2.0",
      "7.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import sqrt, simplify\nexpr = 2 / (sqrt(4) + sqrt(32))\nexpr = simplify(expr)\nprint(expr)"
  },
  {
    "example_id": 603,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3125.0"
    ],
    "annotated_answers": [
      "3125.0"
    ],
    "solution": "a = 5\na_3 = a ** 3\na_2 = a ** 2\nprint(a_3 * a_2)"
  },
  {
    "example_id": 604,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "669.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "a = 2009 // 3\nprint(a)"
  },
  {
    "example_id": 605,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "500.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "sixth_term = 200 + 500 - 200\nprint(sixth_term)"
  },
  {
    "example_id": 606,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 3\nprint(x - 3 / (2 * (x ** 2) - 8 * x + 7))"
  },
  {
    "example_id": 607,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "143.0"
    ],
    "solution": "n = 13\nm = 27\nn_reversed = int(str(n)[::-1])\nprint(n + n_reversed)"
  },
  {
    "example_id": 608,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "from sympy import sqrt\nperimeter = sqrt(50)\nprint(perimeter)"
  },
  {
    "example_id": 609,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-16.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "a = -3\nprint(a**2+6*a-7)"
  },
  {
    "example_id": 610,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2162.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "-120.0"
    ],
    "solution": "import sympy as sym\n\n# Area of the triangle\ndef area(k):\n    return (sym.sqrt(3)/2) * k\n\n# Integrate the area\ndef integrate_area(k):\n    return (sym.sqrt(3)/6) * k**2\n\n# Initialize the sum to zero\ntotal = 0\n\n# Loop over all possible values of k\nfor k in range(1, 1000):\n    # If the area is less than 20, add it to the total\n    if area(k) < 20:\n        total += integrate_area(k)\n\nprint(total)"
  },
  {
    "example_id": 611,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "lags_to_ligs = 4\nlugs_to_lags = 20\n\nligs_equivalent_to_80_lugs = 80 * lags_to_ligs / lugs_to_lags\n\nprint(ligs_equivalent_to_80_lugs)"
  },
  {
    "example_id": 612,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "11.0",
      "3.0",
      "11.0",
      "3.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import symbols, sqrt, solve\nx, y = symbols('x, y')\nexpr = x**2 + y**2 - 6*x + 8*y - 24\nsol = solve(expr, (x, y))\nprint(sol)"
  },
  {
    "example_id": 613,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = -2\nprint(x)"
  },
  {
    "example_id": 614,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3841106397986879"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\na = 3 / math.sqrt(61)\nprint(a)"
  },
  {
    "example_id": 615,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = 3\nb = -24\nc = 72\nprint(a + b + c)"
  },
  {
    "example_id": 616,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print(3 * 4)"
  },
  {
    "example_id": 617,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import sympy\n\na, b = sympy.symbols('a, b')\n\neq1 = a*b - 7\neq2 = a + b - 5\n\nsol = sympy.solve((eq1, eq2), (a, b))\n\nprint(sol)\n\nprint(a**2 + b**2)"
  },
  {
    "example_id": 618,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "219.6"
    ],
    "annotated_answers": [
      "221.0"
    ],
    "solution": "initial_weight = 244\nweight_after_ten_weeks = initial_weight - (10 * 1/100 * initial_weight)\nprint(weight_after_ten_weeks)"
  },
  {
    "example_id": 619,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "800.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "print(102 ** 2 - 98 ** 2)"
  },
  {
    "example_id": 620,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "60.0",
      "14.0",
      "35.0",
      "15.0",
      "30.0",
      "20.0",
      "20.0",
      "30.0",
      "15.0",
      "35.0",
      "14.0",
      "60.0",
      "12.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sqrt\n\nfor a in range(1, 100):\n    for b in range(1, 100):\n        area = a * b\n        perimeter = 2 * (a + b)\n        if area == 5 * perimeter:\n            print(a, b)"
  },
  {
    "example_id": 621,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "315.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "c = 18**2 - 9\nprint(c)"
  },
  {
    "example_id": 622,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from math import sqrt\nx1 = (-3 + sqrt(121)) / 2\nx2 = (-3 - sqrt(121)) / 2\nprint(x1 + x2)"
  },
  {
    "example_id": 623,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4096.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import expand_power_base\n\nprint(expand_power_base(4**5 + 4**5 + 4**5 + 4**5, 3))"
  },
  {
    "example_id": 624,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 1.5\nprint(abs(x - 1) + abs(x - 1.5) + abs(x - 2))"
  },
  {
    "example_id": 625,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-128.0"
    ],
    "solution": "x = 4 +- 10\nprint(x)"
  },
  {
    "example_id": 626,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import sqrt\n\ndef count_points(a, b):\n    count = 0\n    for x in range(-a, a + 1):\n        for y in range(-b, b + 1):\n            if x**2 - y**2 == 17:\n                count += 1\n    return count\n\nprint(count_points(10, 10))"
  },
  {
    "example_id": 627,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "450.0"
    ],
    "annotated_answers": [
      "350.0"
    ],
    "solution": "price = 450\nwhile True:\n    revenue = price * 500\n    additional_sales = 10 * (price - 5)\n    revenue += additional_sales\n    if revenue > 500 * 450:\n        break\n    price -= 5\nprint(price)"
  },
  {
    "example_id": 628,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "cookies_per_brownies = 6/4\nbrownies_per_cupcakes = 2/10\ncupcakes_for_18_cookies = 18/cookies_per_brownies/brownies_per_cupcakes\nprint(cupcakes_for_18_cookies)"
  },
  {
    "example_id": 629,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "time_to_36 = 36 / 18\nprint(time_to_36)"
  },
  {
    "example_id": 630,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "98.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = -1\nx = 3\ny = a*x**4 - b*x**2 + x + 5\nprint(y)"
  },
  {
    "example_id": 631,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "9.0",
      "2.0",
      "3.0",
      "2.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "9.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\n\neq1 = 2*x**2 + x + 6 - y\neq2 = x - 4 + y\n\nsol = sympy.solve([eq1, eq2], [x, y])\n\nprint(sol)"
  },
  {
    "example_id": 632,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "174.0"
    ],
    "solution": "A = 2 * 60\nB = 5 * 60\nprint(A + B)"
  },
  {
    "example_id": 633,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "print(1**2+3)"
  },
  {
    "example_id": 634,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0",
      "100.0",
      "2020.0",
      "103.0",
      "100.0",
      "2060.0",
      "105.0",
      "100.0",
      "2100.0",
      "107.0"
    ],
    "annotated_answers": [
      "697.0"
    ],
    "solution": "def is_geometric(n):\n    return (n-1) % 2 == 0\n\ndef is_arithmetic(n):\n    return (n-1) % 2 == 1\n\nfor i in range(100, 999):\n    if is_geometric(i):\n        for j in range(100, 999):\n            if is_arithmetic(j):\n                if (i * j) % 5 == 0:\n                    print(i, j, (i * j) // 5)\n                    break"
  },
  {
    "example_id": 635,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "import math\n\ndef f(x):\n    return x - math.floor(math.sqrt(x))**2\n\nsum = 0\nfor i in range(101, 111):\n    sum += f(i)\nprint(sum)"
  },
  {
    "example_id": 636,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "243.0"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "# The number of people who have heard the rumor\n# at the end of the fifth cycle\n# = 3 * 3 * 3 * 3 * 3\n# = 3 ** 5\n# = 243\nprint(243)"
  },
  {
    "example_id": 637,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-35389440.0"
    ],
    "annotated_answers": [
      "-128.0"
    ],
    "solution": "# Using math\nfrom math import factorial\nx = 2\n\n# Find the product of the nonzero coefficients\nproduct = 1\nfor i in range(5):\n    product *= x**i * factorial(i)\n\n# Find the constant term\nproduct *= (-1)**5 * factorial(5)\nprint(product)"
  },
  {
    "example_id": 638,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "4.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "8.0",
      "1.0",
      "8.0",
      "4.0",
      "2.0",
      "3.0",
      "7.0",
      "2.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\n\nresult = simplify(7*x**4 - 3*x**3 - 3*x**2 - 8*x + 1)\nresult *= 8*x**4 + 2*x**3 - 7*x**2 + 3*x + 4\nprint(result)"
  },
  {
    "example_id": 639,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "9.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy as sym\n\nx = sym.Symbol('x')\nf = sym.Function('f', real=True)\nc = f(2) / x**3 - 9 / x + 3\nprint(c)"
  },
  {
    "example_id": 640,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "3.0",
      "1.0",
      "17179869184.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "from sympy import sqrt\n\nx = sqrt(9) - 1\n\nwhile True:\n    x_old = x\n    x = sqrt(x + 1) - 1\n    if abs(x - x_old) < 1e-10:\n        break\n\nprint(x)"
  },
  {
    "example_id": 641,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "def f(x):\n    return 2 * x - 3\n\ndef g(x):\n    return 5 - 4 * x\n\nprint(g(f(4)))"
  },
  {
    "example_id": 642,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-25.0"
    ],
    "annotated_answers": [
      "-25.0"
    ],
    "solution": "def f(x):\n    if x < -3:\n        return 3*x + 5\n    else:\n        return 7 - 4*x\n\nprint(f(-10))"
  },
  {
    "example_id": 643,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "71.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "# third term is 5\n# sixth term is -1\n# twelfth term is -1 + 12 \\* (5 - (-1))\n#                   = -1 + 12 \\* 6\n#                   = -1 + 72\nprint(-1 + 72)"
  },
  {
    "example_id": 644,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-12.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "b = -12\nprint(b)"
  },
  {
    "example_id": 645,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "567.0"
    ],
    "annotated_answers": [
      "567.0"
    ],
    "solution": "a = 7\nr = (5103 / a)**(1/6)\nprint(a * r**4)"
  },
  {
    "example_id": 646,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.144806454223946"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import math\n\nsqrt2 = math.sqrt(2)\nsqrt3 = math.sqrt(3)\n\na = (sqrt2+sqrt3)**3\nb = (sqrt2-sqrt3)**3\nc = (-sqrt2+sqrt3)**3\n\nprint(a+b+c)"
  },
  {
    "example_id": 647,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "260.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# A, B, C = 1, 8, 3\nA, B, C = 1, 256, 3\nprint(A+B+C)"
  },
  {
    "example_id": 648,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import math\n\ndef distance(p1, p2):\n    return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)\n\ndef longest_side(p1, p2, p3):\n    return max(distance(p1, p2), distance(p2, p3), distance(p3, p1))\n\nprint(longest_side((11, 1), (2, 3), (3, 7)))"
  },
  {
    "example_id": 649,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "495.0"
    ],
    "annotated_answers": [
      "495.0"
    ],
    "solution": "import math\n\n# The sum of the odd integers between 46 and 64 is 171.\n\nprint(sum(range(47, 65, 2)))"
  },
  {
    "example_id": 650,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "10.0",
      "3.0",
      "7.0",
      "10.0",
      "3.0",
      "8.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\np1 = 3 * (x**10 - x**7 + 2*x**3 - x + 7)\np2 = 4 * (x**3 - 2*x**2 - 5)\np = p1 + p2\nprint(p.expand())"
  },
  {
    "example_id": 651,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(2)"
  },
  {
    "example_id": 652,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = (5*(-4) + 5)/5\nb = (3*(-2) + 3)/3\nprint(6*b)"
  },
  {
    "example_id": 653,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(abs(-3+2*(-4)))"
  },
  {
    "example_id": 654,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "difference = 35 - 12\nprint(difference)"
  },
  {
    "example_id": 655,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1050.0"
    ],
    "annotated_answers": [
      "1050.0"
    ],
    "solution": "total_calories = 150 * 7\nprint(total_calories)"
  },
  {
    "example_id": 656,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "1.0",
      "1.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "-1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import solve, Symbol\nx, y = Symbol('x'), Symbol('y')\nsol = solve((4*y - 4*x**2, 4*x - 4*y**2), (x, y))\nprint(sol)\nprint(1/(x**3 + y**3))"
  },
  {
    "example_id": 657,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "j = 24 / jk\nk = 48 / jl\nl = 18 / kl\njkl = jk * kl\njkl = jk * k\njkl = j * k * l\nprint(jkl)"
  },
  {
    "example_id": 658,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "102.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "from math import floor, ceil, sqrt, pi\n\ndef f(x):\n    if x % 1 == 0:\n        return abs(floor(x))\n    else:\n        return ceil(x) ** 2\n\nprint(f(sqrt(3)) + f(-pi) + f(sqrt(50)) + f(9/2))"
  },
  {
    "example_id": 659,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = -4\nb = 8\nprint(a + b)"
  },
  {
    "example_id": 660,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "x_list = []\nfor x in range(1, 1000):\n    if 3/x > 1/3 and 3/x < 3/4:\n        x_list.append(x)\nprint(sum(x_list))"
  },
  {
    "example_id": 661,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "estimate_red = 11 / 24\nprint(estimate_red * 480)"
  },
  {
    "example_id": 662,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33411.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "total = 0\nfor i in range(259):\n    total += i\nprint(total)"
  },
  {
    "example_id": 663,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    return 10 / x\n\nprint(f(f(10)))"
  },
  {
    "example_id": 664,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "f_x = -2\nt_x = 9 + 2*(-2)**2 + (-2)**2 - 3\nprint(t_x)"
  },
  {
    "example_id": 665,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "16.0",
      "3.0",
      "-3466.0",
      "18.0",
      "37065.0",
      "1.0",
      "3.0",
      "-1.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nexpr = sympy.sqrt(x**3 - 4*x**2 + 4)\nsolution = sympy.solve(expr - 16, x)[0]\nprint(solution)"
  },
  {
    "example_id": 666,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sqrt\n\n# calculate the distance\ndistance = sqrt(5**2 + (-2)**2)\n\n# convert to int\nm = int(distance)\n\nprint(m)"
  },
  {
    "example_id": 667,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x_agreed = (3 + (-6)) / 2\nx_actual = (3 + (-10)) / 2\nprint(x_agreed - x_actual)"
  },
  {
    "example_id": 668,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\ny = x**2 - 6*x + 13\nprint(y.subs(x, 0))"
  },
  {
    "example_id": 669,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "print(19**2 + 2*19 + 1)"
  },
  {
    "example_id": 670,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 3\nm = 1\nn_m = n + m\nprint(n_m)\nn_m_sub = n_m - n\nprint(n_m_sub)"
  },
  {
    "example_id": 671,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0",
      "9.0",
      "1.0",
      "9.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve\nfrom sympy.abc import x, y\n\neq = x**2 + 8*x + y**2 - 6*y\nsol = solve(eq, y)\nprint(sol)"
  },
  {
    "example_id": 672,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "324.0"
    ],
    "solution": "# Assume a is greater\na = 0\nwhile True:\n    a += 1\n    b = a + 1\n    if b**2 - a**2 == 35:\n        print(max(a, b))\n        break"
  },
  {
    "example_id": 673,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "p = lambda x: 2-x**2\nq = lambda x: 6/x\nprint(p(q(2)))"
  },
  {
    "example_id": 674,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 1000\nk = 100\nr = 10\na = 1\n\ndef term(n):\n    return a * r ** (n - 1)\n\nbill_terms = []\nfor i in range(1, k + 1):\n    bill_terms.append(term(i))\n\nmax_digits = len(str(max(bill_terms)))\n\nprint(max_digits)"
  },
  {
    "example_id": 675,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x_a = -2\nx_c = -1\ny_a = x_a**2 + 4*x_a + 6\ny_c = x_c**2 + 0.5*x_c + 6\nprint(x_c - x_a)"
  },
  {
    "example_id": 676,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def f(x):\n    if x == 1:\n        return 2\n    elif x == 4:\n        return 3\n    elif x == 7:\n        return 4\n    else:\n        raise ValueError(\"Invalid input\")\n\ndef f_inv(y):\n    if y == 2:\n        return 1\n    elif y == 3:\n        return 4\n    elif y == 4:\n        return 7\n    else:\n        raise ValueError(\"Invalid input\")\n\nprint(f_inv(f_inv(3)))"
  },
  {
    "example_id": 677,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "total = 0\nfor i in range(1, 20):\n    total += int(i ** 0.5)\nprint(total)"
  },
  {
    "example_id": 678,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "from sympy import sqrt\n\na = 1\nb = 1\nwhile True:\n    x = sqrt(a)/b\n    if x.is_integer and x.is_positive:\n        break\n    a += 1\n\nprint(a+b)"
  },
  {
    "example_id": 679,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "correct_answers = 232 // 5\nprint(correct_answers)"
  },
  {
    "example_id": 680,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "a = 6 - (-1)\nb = 5 - (a*1)\nh = lambda x: a*x + b\nprint(h(6))"
  },
  {
    "example_id": 681,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "x = 3 - y\ny = 4 - x\nprint(2 * x**2 + 2 * y**2)"
  },
  {
    "example_id": 682,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "num_laps = 10 * (400 / 250)\nprint(num_laps)"
  },
  {
    "example_id": 683,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "import sympy as sym\na, b, c = sym.symbols('a b c')\nsum_ab = a + b\nsum_abc = sum_ab + c\nsum_abc_cubed = sum_abc ** 3\nprint(sum_abc_cubed)"
  },
  {
    "example_id": 684,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "15.0",
      "4.0",
      "2.0",
      "15.0"
    ],
    "annotated_answers": [
      "-22.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\na, b = solve(2*x**2 - 10*x + 5, x)\nprint((2*a - 3)*(4*b - 6))"
  },
  {
    "example_id": 685,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import sqrt\n\ndef f(x):\n    return sqrt(3 * x) + 2\n\nprint(f(0) + f(3))"
  },
  {
    "example_id": 686,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1953125.0"
    ],
    "annotated_answers": [
      "125.0"
    ],
    "solution": "from math import factorial\n\nn = 9\nx = 5\n\nprint(x**n / factorial(n - 2 * x + 1))"
  },
  {
    "example_id": 687,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "f(g(x)) = f(-3)\nf(-3) = 2(-3) + 1 = 6"
  },
  {
    "example_id": 688,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "98.0"
    ],
    "solution": "a, b, c = 1, 1, 1\n\n# Calculate the root\nroot = (a**(1/3) + b**(1/3) + 1) / c\n\n# Calculate a+b+c\nsum = a + b + c\n\n# Check if the root is correct\nprint(root)\nprint(sum)"
  },
  {
    "example_id": 689,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "y = (z * x) / (z - x)\ny = (24 * 25) / (24 - 25)\ny = 600 / 4\ny = 150"
  },
  {
    "example_id": 690,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 25\ny = 25\nprint(x + y)"
  },
  {
    "example_id": 691,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "256.0"
    ],
    "annotated_answers": [
      "4624.0"
    ],
    "solution": "# The difference between two consecutive even perfect squares is 268\n# The difference between two consecutive squares is 2\n# The larger of the two squares is the next perfect square\n\n# The next perfect square is 256\nprint(256)"
  },
  {
    "example_id": 692,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "first_term = 8 - (3 - 2)\nprint(first_term)"
  },
  {
    "example_id": 693,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "from sympy import *\nA, B, C = symbols(\"A B C\")\n\nperimeter = 2*A + 2*B + 2*C\nprint(perimeter)"
  },
  {
    "example_id": 694,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "a, b, c = 1, 3, 2\nabc = a * b * c\nprint(abc)"
  },
  {
    "example_id": 695,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a = 1\nb = -8\nc = 49\nab = a * b\nprint(ab)"
  },
  {
    "example_id": 696,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "A = 3\nB = 1\nC = 1\n\n# Compute AC^2 - B\nac_squared = A*C*C - B\nprint(ac_squared)"
  },
  {
    "example_id": 697,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(max([6, 8, 3, 5, 4, 2]))"
  },
  {
    "example_id": 698,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "611105.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "column_sum = 0\nfor row in range(1, 11):\n    for column in range(5):\n        column_sum += row * 10 ** column\nprint(column_sum)"
  },
  {
    "example_id": 699,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import ceil, floor, sqrt\n\n# ceil(sqrt(27)) = 5\n# floor(sqrt(26)) = 4\n\nprint(ceil(sqrt(27)) - floor(sqrt(26)))"
  },
  {
    "example_id": 700,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Find the vertex\nvx = 2\nvy = 3\n\n# Find the point on the parabola\npx = 4\npy = 4\n\n# Find the slope\nm = (py-vy)/(px-vx)\n\n# Find the y-intercept\nb = vy - m*vx\n\n# Find the value of y when x=6\ny = m*6 + b\n\nprint(y)"
  },
  {
    "example_id": 701,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "f = lambda x: (x**2 + 2*x + 3)/x\ng = lambda x: x**3 + 2\nprint(g(f(-3)))"
  },
  {
    "example_id": 702,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.8"
    ],
    "annotated_answers": [
      "96.8"
    ],
    "solution": "feet_per_second = 88 * 66 / 60\nprint(feet_per_second)"
  },
  {
    "example_id": 703,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "distance = 9 * 12\nprint(distance)"
  },
  {
    "example_id": 704,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\ny = 2*x - 13\nf = 3*x + y - 92\nsolution = sympy.solve(f, x)\nprint(solution)"
  },
  {
    "example_id": 705,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "2010.0"
    ],
    "solution": "from sympy import sympify\nfrom sympy.solvers import solve\n\nf = sympify('x^3 + 3*x**2 + 3*x + 1')\nf_inv = solve(f - 2010)[0]\nprint(f.subs(f_inv, f_inv))"
  },
  {
    "example_id": 706,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "new_volume = 1.835\nold_volume = 3.67\npressure = 4\nnew_pressure = pressure / new_volume * old_volume\nprint(new_pressure)"
  },
  {
    "example_id": 707,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "7.0",
      "65.0",
      "7.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x, y')\nK = sympy.solve(3*x - 7*y - 65, y)[0]\nprint(K)"
  },
  {
    "example_id": 708,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "x = 1\nprint(x)"
  },
  {
    "example_id": 709,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-40.0"
    ],
    "solution": "a = -15"
  },
  {
    "example_id": 710,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "degrees_per_hour = 360 / 24\nprint(degrees_per_hour)"
  },
  {
    "example_id": 711,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "smallest = (49 - 7) / 2\nprint(smallest)"
  },
  {
    "example_id": 712,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.066939702021237"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(2 ** 3 ** (4/3))"
  },
  {
    "example_id": 713,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 714,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 1/2\nprint(x - 1)"
  },
  {
    "example_id": 715,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "number_of_tours = 6 - 9\nprint(number_of_tours)"
  },
  {
    "example_id": 716,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "third_term = 25 / 2\nprint(third_term)"
  },
  {
    "example_id": 717,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "246.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x = 243\ny = 3\nprint(x + y)"
  },
  {
    "example_id": 718,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "import numpy as np\nimport sympy as sp\n\nx = sp.Symbol('x')\ny = 3*x**2 - 5*x - 3\norigin = sp.Symbol('origin')\nAB = np.array([y - origin, x - origin])\nAB_squared = np.dot(AB, AB)\nprint(AB_squared)"
  },
  {
    "example_id": 719,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "# Step 1: Define a function to convert a unit into another unit.\ndef convert(x, y, z):\n    return x * z / y\n\n# Step 2: Define the relationships between units.\nflicks_to_flecks = 8\nflocks_to_flecks = 4\n\n# Step 3: Use the function to calculate the result.\nresult = convert(12, flicks_to_flecks, flocks_to_flecks)\n\n# Step 4: Print the result.\nprint(result)"
  },
  {
    "example_id": 720,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import log, Symbol, expand\nx = Symbol('x')\nexpr = log(expand((x-1)**2))\nprint(expr.subs(x, 3**2))"
  },
  {
    "example_id": 721,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Import math module\nfrom math import sqrt\n\n# Calculate sum of all a's\nsum = 0\nfor a in range(100):\n    if sqrt(a) + a == sqrt(a*a + a):\n        sum += a\n\nprint(sum)"
  },
  {
    "example_id": 722,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "A = 10\nB = 1\nAB = A * B\nprint(AB + B)"
  },
  {
    "example_id": 723,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "y = 12 - 6\nprint(y)"
  },
  {
    "example_id": 724,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "r = 15.5\nprint(r)"
  },
  {
    "example_id": 725,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x_coord = 0 + (9/3)\ny_coord = 0 + (6/3)\nprint(x_coord + y_coord)"
  },
  {
    "example_id": 726,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(int(36/7))"
  },
  {
    "example_id": 727,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\nr = sympy.Symbol('r')\nexpr = (6*r**2 - 19*r - 7) / (2*r - 7)\nsolution = sympy.solve(expr - 4*r + 3, r)\nprint(solution)"
  },
  {
    "example_id": 728,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import numpy as np\nimport sympy as sp\n\na, b, c = sp.symbols('a, b, c')\n\nf = a*sp.Symbol('x')**2 + b*sp.Symbol('x') + c\n\nsolution = sp.solve(f.subs({sp.Symbol('x'): 0}), c)\nsolution = sp.solve(f.subs({sp.Symbol('x'): 1}), b)\nsolution = sp.solve(f.subs({sp.Symbol('x'): 2}), a)\n\nprint(solution)"
  },
  {
    "example_id": 729,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0",
      "89.0",
      "184.0",
      "89.0",
      "6.0",
      "89.0",
      "115.0",
      "89.0",
      "26.0",
      "89.0",
      "184.0",
      "89.0",
      "6.0",
      "89.0",
      "115.0",
      "89.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import *\n\nx = symbols('x')\ny = symbols('y')\n\neq1 = x**2 + y**2 + 2*x + 4*y + 5\neq2 = x**2 + y**2 - 3*x - 4*y + 7\n\nsol = solve([eq1, eq2], [x, y])\n\nprint(sol)"
  },
  {
    "example_id": 730,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# f(x) = x + 1\n# g(x) = 2x\n# f^{-1}(x) = x - 1\n# g^{-1}(x) = x/2\n\nf_inv = lambda x: x - 1\ng_inv = lambda x: x/2\n\nf = lambda x: x + 1\ng = lambda x: 2*x\n\n# f(g^{-1}(f^{-1}(f^{-1}(g(f(5))))))\nprint(f(g_inv(f_inv(f_inv(g(f(5)))))))"
  },
  {
    "example_id": 731,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def f(x):\n    return x**3 - 8\n\ndef f_inv(y):\n    return (y + 8)**(1/3)\n\nprint(f_inv(f(f_inv(19))))"
  },
  {
    "example_id": 732,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 3\ns = n**2 - 2**n + 1\nt = 2*s - s**2\nprint(t)"
  },
  {
    "example_id": 733,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.666666666666666"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "j = 16 / 21 * 14\nprint(j)"
  },
  {
    "example_id": 734,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def f(x):\n    if x < -5:\n        return x**2 + 9\n    else:\n        return 3*x - 8\n\npossible_values_of_x = []\nfor x in range(-10, 10):\n    if f(x) == 10:\n        possible_values_of_x.append(x)\nprint(sum(possible_values_of_x))"
  },
  {
    "example_id": 735,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# For each integer between 1 and 91,\n# check if it is an arithmetic sequence.\ncount = 0\nfor i in range(1, 92):\n    for j in range(i + 1, 92):\n        if i + j == 91:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 736,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "bride_age = 51 - 15\ngroom_age = bride_age + 15\nprint(groom_age)"
  },
  {
    "example_id": 737,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.66666666666667"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "slope = (365 - 3) / (4 - 1)\nprint(slope)"
  },
  {
    "example_id": 738,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "28.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Import from the toolbox\nfrom sympy import Symbol\n\n# Define variables\nm = Symbol('m')\nn = 28\n\n# Find the number of polynomials\nnum_polys = (m**2 + m + n).factor()\nprint(num_polys)"
  },
  {
    "example_id": 739,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import symbols\nfrom sympy.abc import x\nf = symbols('f', cls=Function)\nf_expr = 3*f(2*x) + 1\nf_expr.subs(x, 4).subs(f, f_expr.diff(x).simplify()).simplify()"
  },
  {
    "example_id": 740,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "min_y = (-7)\nprint(min_y)"
  },
  {
    "example_id": 741,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f_minus_one = 5*(-1)+3\ng_f_minus_one = (-1)**2 - 2\nprint(g_f_minus_one)"
  },
  {
    "example_id": 742,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "total_reps = 18\ngrade_8_reps = total_reps * 650 / (520 + 650)\nprint(grade_8_reps)"
  },
  {
    "example_id": 743,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import math\nprint(math.log(1/625, 5))"
  },
  {
    "example_id": 744,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import sqrt\n\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i <= sqrt(n):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef greatest_prime_factor(n):\n    return max(prime_factors(n))\n\n\ndef sum_of_arithmetic_sequence(n):\n    return n * (n + 1) // 2\n\n\ndef greatest_prime_factor_of_sum(n):\n    return greatest_prime_factor(sum_of_arithmetic_sequence(n))\n\n\nprint(greatest_prime_factor_of_sum(80))"
  },
  {
    "example_id": 745,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print((7+8+9)/(2+3+4)*(6+9+12)/(9+8+7))"
  },
  {
    "example_id": 746,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "cookies_consumed = 10 * 12 / 20\nprint(cookies_consumed)"
  },
  {
    "example_id": 747,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.666666666666666"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "volume = 52 / 6\nprint(volume)"
  },
  {
    "example_id": 748,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "for x in range(1, 100):\n    if (x**2 - 16) % 2 == 0:\n        print(x)"
  },
  {
    "example_id": 749,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "b = 10 - 6\nc = 10 + 3\nprint(c)"
  },
  {
    "example_id": 750,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nsol = sympy.solve(3**(x+8) - 9**(x+3), x)\nprint(sol)"
  },
  {
    "example_id": 751,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "print((7+5)**2-(7-5)**2)"
  },
  {
    "example_id": 752,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "print(5 * 1)"
  },
  {
    "example_id": 753,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.302585092994046"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import numpy as np\nx, y, z = 1, 10, 100\na = np.log(x) - np.log(y)\nprint(a)"
  },
  {
    "example_id": 754,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 2\ny = x**2 - 8*x + 15\nprint(y)"
  },
  {
    "example_id": 755,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "from sympy import sqrt\nprint(sqrt(1000000) - sqrt(1000000, 3))"
  },
  {
    "example_id": 756,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "9.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "import sympy as sp\n\n# make a sympy expression\nx, y = sp.symbols('x y')\nexpr = y / (sp.sqrt(x))\n\n# calculate the value of x when y=3\nx_3 = sp.solve(expr - 3, x)[0]\nprint(x_3)"
  },
  {
    "example_id": 757,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def revenue(p):\n    return 128 - 4 * p\n\ndef derivative(p):\n    return -4\n\ndef find_max(f, d, low, high):\n    while abs(high - low) > 1e-8:\n        mid = (low + high) / 2\n        if f(mid) * d(mid) > 0:\n            low = mid\n        else:\n            high = mid\n    return low\n\ndef main():\n    p_max = find_max(revenue, derivative, 0, 32)\n    print(p_max)\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 758,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy as sp\n\nx = sp.Symbol('x')\n\nf = sp.Piecewise((3-x, x <= 3), (x**3 - 2*x**2 + 3*x, x > 3))\n\nf_inverse = sp.solve(f - 0, x)\nf_inverse_6 = sp.solve(f - 6, x)\n\nprint(f_inverse[0] + f_inverse_6[0])"
  },
  {
    "example_id": 759,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "def f(x):\n    return 2 * x + 1\n\ndef g(x):\n    return f(2 * x) - 3\n\nprint(g(g(2)))"
  },
  {
    "example_id": 760,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\ny = 2\nx2y = x**2 * y\nprint(x2y)"
  },
  {
    "example_id": 761,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import Symbol, simplify\n\ni = Symbol('i', real=False)\n\nresult = (3-i) * (6+2*i)\n\nprint(simplify(result))"
  },
  {
    "example_id": 762,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "import sympy\nx = sympy.symbols('x')\nsolutions = sympy.solve(x**2 - x - 6, x)\nprint(solutions[0] * solutions[1])"
  },
  {
    "example_id": 763,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import numpy as np\n\nf = np.array([2, 4, 6, 8, 10, 12])\nx = np.array([1, 2, 3, 4, 5, 6])\n\nmax_f_inv = np.amax(x / f)\n\nprint(max_f_inv)"
  },
  {
    "example_id": 764,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2857142857142858"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "camille_age = (44 - 26) / 14\nprint(camille_age)"
  },
  {
    "example_id": 765,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "A = 2\nB = 1\nx = 2\nprint(A-B)"
  },
  {
    "example_id": 766,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "result = 7 * 10 * (21 / 30)\nprint(result)"
  },
  {
    "example_id": 767,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "99940009.0"
    ],
    "annotated_answers": [
      "99940009.0"
    ],
    "solution": "print(9997 ** 2)"
  },
  {
    "example_id": 768,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2107.0"
    ],
    "annotated_answers": [
      "2107.0"
    ],
    "solution": "sum = 0\nfor i in range(100, 200 + 1):\n    if i % 7 == 0:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 769,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-24.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "from math import sqrt\n\nx_1 = sqrt(12) + 6\nx_2 = sqrt(12) - 6\n\nk = x_1 * x_2\n\nprint(k)"
  },
  {
    "example_id": 770,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "first_term = 7\ncommon_difference = -210 / 15\nprint(common_difference)"
  },
  {
    "example_id": 771,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "106.0"
    ],
    "solution": "def f(x):\n    return x**7 - 3*x**3 + 2\n\ndef g(x):\n    return f(x + 1)\n\nprint(g(0))"
  },
  {
    "example_id": 772,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "256.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "from math import sqrt\nf = lambda x: 2**x\nprint(sqrt(f(f(f(f(1))))))"
  },
  {
    "example_id": 773,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "from math import sqrt\nx = 9\nwhile True:\n    if x*sqrt(x) - 5*x - 9*sqrt(x) == 35:\n        break\n    x += 1\nprint(x)"
  },
  {
    "example_id": 774,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0",
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print(6+5, 6-5)"
  },
  {
    "example_id": 775,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(int(max(0, -7/4)))"
  },
  {
    "example_id": 776,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "25.0",
      "154.0",
      "5.0",
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\nx, y, z = sympy.symbols('x y z')\neq1 = 6*x + 5*y - 2*z - 4\neq2 = 4*x + 5*y + 12*z - 54\nsol = sympy.solve((eq1, eq2), (x, y, z))\nprint(sol)"
  },
  {
    "example_id": 777,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "-10.0",
      "64.0",
      "92.0",
      "64.0",
      "-9.797979797979798",
      "64.0",
      "88.00040812162024",
      "64.0",
      "-9.595959595959595"
    ],
    "annotated_answers": [
      "1736.0"
    ],
    "solution": "import numpy as np\n\ndef solve(x):\n    return x**2 - 8\n\ndef solve2(x):\n    return -5*x + 44\n\nx = np.linspace(-10, 10, 100)\ny = solve(x)\ny2 = solve2(x)\n\ndistinct_solutions = [(x, y) for x, y in zip(x, y) if x!= y]\nprint(distinct_solutions)\nprint(np.prod([y for x, y in distinct_solutions]))"
  },
  {
    "example_id": 778,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve, symbols\nx = symbols('x')\nsolutions = solve(9*x/13 + 13/9*x - 250/117*x, x)\nprint(sum(solutions))"
  },
  {
    "example_id": 779,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((5.6 + 2) // 1)"
  },
  {
    "example_id": 780,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))\n\ncount = 0\nfor i in range(1, 100):\n    if is_prime(i ** 2 - 3 * i + 2):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 781,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "181.0"
    ],
    "annotated_answers": [
      "181.0"
    ],
    "solution": "print(3*7**2 + 5*7 - 1)"
  },
  {
    "example_id": 782,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(2)"
  },
  {
    "example_id": 783,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "b = -4\nprint(b)"
  },
  {
    "example_id": 784,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9901.0"
    ],
    "annotated_answers": [
      "9901.0"
    ],
    "solution": "print(99**2 + 99 + 1)"
  },
  {
    "example_id": 785,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol(\"x\")\nx = 1 + x/(1 + x/(1 + x/(1 + x)))\nprint(x)"
  },
  {
    "example_id": 786,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "N = 121 // 2 + 1\nprint(N)"
  },
  {
    "example_id": 787,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "x = 3\ny = 2\n\nx_squared = x**2\ny_squared = y**2\n\nx_cubed = x**3\ny_cubed = y**3\n\nx_minus_y = x - y\n\nprint(x_cubed - y_cubed)"
  },
  {
    "example_id": 788,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "168.99999999999991"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "print((13 ** (1/3)) ** 6)"
  },
  {
    "example_id": 789,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "A = 19 - 2 - 4\nprint(A)"
  },
  {
    "example_id": 790,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "360.0"
    ],
    "annotated_answers": [
      "600.0"
    ],
    "solution": "set_1 = [1, 2, 3, 4]\nset_2 = [1, 2, 3, 4]\nfor i in range(4):\n    set_2[i] = set_2[i] + 2\n    set_2[i] = set_2[i] * 20\nprint(sum(set_2))"
  },
  {
    "example_id": 791,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 3\nb = 2\nf_inv = lambda x: (x - b) / a\ng = lambda x: 2 * f_inv(x)\nprint((a + b) / 2)"
  },
  {
    "example_id": 792,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "156.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# Calculate number of black cards in pile A\nnumber_black_cards_in_pile_A = 26\n\n# Calculate number of red cards in pile B\nnumber_red_cards_in_pile_B = number_black_cards_in_pile_A * 6\n\nprint(number_red_cards_in_pile_B)"
  },
  {
    "example_id": 793,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.7333333333333334"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7 / 3\ny = 7 / 5\nprint(x + y)"
  },
  {
    "example_id": 794,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "-4.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\n\ne_a, e_b, e_c, c_a, c_b, c_c = sympy.symbols('e_a e_b e_c c_a c_b c_c')\n\ne_d = e_b**2 - 4*e_a*e_c\nc_d = c_b**2 - 4*c_a*c_c\n\nprint(e_d/c_d)\n\nprint(e_c/c_c)\n\nprint(e_c + c_c)"
  },
  {
    "example_id": 795,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35316.00000000001"
    ],
    "annotated_answers": [
      "369.0"
    ],
    "solution": "import math\ndiagonal = math.sqrt(180**2 + 54**2)\nprint(diagonal**2)"
  },
  {
    "example_id": 796,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "def cost(t):\n    return 70 * t - 1 * (t - 60)\n\ndef max_t():\n    return 60 + (4200 - 70 * 60) / -1\n\nprint(max_t())"
  },
  {
    "example_id": 797,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "# Write a program to solve this question\n# Sum of elements of each of the 15 two-element subsets of {1,2,3,4,5,6}\n\n# Function to calculate the sum of elements of each two-element subset\ndef calculate_sum(subset):\n    return sum(subset)\n\n# Calculating the sum of the 15 two-element subsets\nsum_15_subsets = 0\nfor i in range(1,7):\n    for j in range(i+1,7):\n        sum_15_subsets += calculate_sum({i,j})\nprint(sum_15_subsets)"
  },
  {
    "example_id": 798,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.999999999999999"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "x = (7**3)**(1/3)\nprint(x)"
  },
  {
    "example_id": 799,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-11.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x, y = -2, -9\nsum_coordinates = x + y\nprint(sum_coordinates)"
  },
  {
    "example_id": 800,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\n\ndef f(x):\n    return x**2 - 2*x + 1\n\ndef g(x):\n    return sqrt(2*x + 1)\n\nprint(f(g(4)) - g(f(3)))"
  },
  {
    "example_id": 801,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n = 5"
  },
  {
    "example_id": 802,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-0.25"
    ],
    "solution": "a = -1\nb = 1\nx = -b - (a-b) / (2*b)\nprint(x)"
  },
  {
    "example_id": 803,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "331.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "x = 5\ny = 6\nmy_product = x * y\nmy_friend_product = (x - 4) * (2 * y - 1)\nprint(my_product * my_friend_product + 1)"
  },
  {
    "example_id": 804,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print(9 + 2)"
  },
  {
    "example_id": 805,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "def bouncing_ball(h):\n    # h is the height from which the ball last bounced\n    return h / 2\n\ndef bouncing_ball_6(h):\n    # h is the height from which the ball last bounced\n    for i in range(6):\n        h = bouncing_ball(h)\n    return h\n\nh = 16\nprint(bouncing_ball_6(h))"
  },
  {
    "example_id": 806,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Let x be the number of apples that Betty has\n# Then Amy has 3x apples\n# Let y be the number of apples that Amy has\n# Then Amy has x + y apples\n# Amy has 3x apples and Betty has x apples\n# Amy has x + 3x = 4x apples\n# Amy has 4x apples and Betty has x apples\n# Amy has 4x - x apples\n# Amy has 3x apples\nprint(4 * 3 - 3)"
  },
  {
    "example_id": 807,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = 5\nb = 3\na_plus_5b = a + 5 * b\nprint(a_plus_5b)"
  },
  {
    "example_id": 808,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 5 ** 2\nprint(x)"
  },
  {
    "example_id": 809,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 4\nb = 3\n\nnumerator = a + 11 * b\ndenominator = a - b\n\nleft = numerator / denominator\nprint(left)"
  },
  {
    "example_id": 810,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "-4.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = 2 * (-2) + 1\ny = 2 * 1 - 6\nprint(x, y)"
  },
  {
    "example_id": 811,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "m = -3\nb = m * 2 + 1\nprint(b)"
  },
  {
    "example_id": 812,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "12.0",
      "6.0",
      "7.0",
      "6.0",
      "49.0",
      "12.0",
      "6.0",
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from sympy import symbols, solve\nx, c = symbols('x c')\neq = 3*x**2 + 7*x + c\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 813,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x = 3 + 1\ny = 9 + 2\nprint(x + y)"
  },
  {
    "example_id": 814,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1436.0"
    ],
    "annotated_answers": [
      "156.0"
    ],
    "solution": "print(40**2 - 164)"
  },
  {
    "example_id": 815,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "b = 3*1**4 - 7*1**3 + 2*1**2 - 1*1 + 1\nprint(b)"
  },
  {
    "example_id": 816,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# The distance from the origin to the point (x, y) is given by sqrt(x^2 + y^2)\n# If the point is (-8,6) then x = -8 and y = 6\n# The number of units in the distance from the origin to the point (-8,6) is sqrt((-8)^2 + 6^2) = sqrt(64 + 36) = sqrt(100) = 10\nprint(10)"
  },
  {
    "example_id": 817,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.625",
      "1.5625"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "a = 4\nb = 5\nx = 3\nh = -b / (2 * a)\nk = b**2 / (4 * a)\nprint(h)\nprint(k)"
  },
  {
    "example_id": 818,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\na = int(math.sqrt(4 + 36 + 12 + 36 + 12 + 4))\nprint(a)"
  },
  {
    "example_id": 819,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def is_sum_less_than_20(x):\n    return x**2 + 4*x + 4 < 20\n\nfor x in range(1, 21):\n    if is_sum_less_than_20(x):\n        print(x)"
  },
  {
    "example_id": 820,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# The sum of five consecutive integers is five.\n# What is the product of the five integers?\n\n# The sum of five consecutive integers is five:\n# 1 + 2 + 3 + 4 + 5 = 5\n\n# What is the product of the five integers?\n# 1 * 2 * 3 * 4 * 5 = 120\n\nprint(120)"
  },
  {
    "example_id": 821,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "448.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "age_now = 56 * 8\nprint(age_now)"
  },
  {
    "example_id": 822,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "b = -18/2\nprint(b)"
  },
  {
    "example_id": 823,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "83.0",
      "93.0",
      "440.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "N = 88\na = N - 5\nb = N + 5\nc = N * 5\nprint(a, b, c)"
  },
  {
    "example_id": 824,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "y_intercept = -3\nprint(y_intercept)"
  },
  {
    "example_id": 825,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x1 = (-18+20) / (5*2)\nx2 = (-18-20) / (5*2)\nprint(int(x1)*int(x2))"
  },
  {
    "example_id": 826,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-36.0"
    ],
    "solution": "y = 6\nprint(y)"
  },
  {
    "example_id": 827,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.142857142857143"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 7\nprint(x + 1/x)"
  },
  {
    "example_id": 828,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(int(6.7) + int(-6.7))"
  },
  {
    "example_id": 829,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.4"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(144 / 10)"
  },
  {
    "example_id": 830,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\nprint(sympy.log(64, 2))"
  },
  {
    "example_id": 831,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def f(n):\n    return n**2 + n + 17\n\nprint(f(10) - f(9))"
  },
  {
    "example_id": 832,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def clubsuit(x, y):\n    return abs(x)**3 + y\n\nprint(clubsuit(2, 4))"
  },
  {
    "example_id": 833,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def get_degree(p):\n    return len(p) - 1\n\ndef get_coeff(p):\n    return p[0]\n\ndef get_terms(p):\n    return [p[i] for i in range(1, len(p))]\n\ndef get_leading_term(p):\n    return p[-1]\n\ndef get_degree_of_term(p):\n    return len(p) - 1\n\ndef get_degree_of_leading_term(p):\n    return get_degree_of_term(get_leading_term(p))\n\ndef get_degree_of_remainder(p):\n    return get_degree_of_term(get_remainder(p))\n\ndef get_remainder(p):\n    return p[1:]\n\ndef get_degree_of_product(p, q):\n    degree_of_p = get_degree_of_term(p)\n    degree_of_q = get_degree_of_term(q)\n    return degree_of_p + degree_of_q\n\ndef get_degree_of_sum(p, q):\n    degree_of_p = get_degree_of_term(p)\n    degree_of_q = get_degree_of_term(q)\n    return max(degree_of_p, degree_of_q)\n\np = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\ng = get_degree_of_product(p, q)\nprint(g)"
  },
  {
    "example_id": 834,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.8982444017039275"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import log\nx = log(1080, 6) - 1\nprint(x)"
  },
  {
    "example_id": 835,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "degree_p = 7\ndegree_q = 7\ndegree_pq = degree_p + degree_q\nprint(degree_pq)"
  },
  {
    "example_id": 836,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-18.793427391260607",
      "0.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import numpy as np\n\n# find the point of intersection\nx = np.roots([1, 2, 0, 8])\nP = np.array([x[0], 2*x[0]-10])\n\n# compute a+b\nprint(P[0] + P[1])"
  },
  {
    "example_id": 837,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "672.0"
    ],
    "annotated_answers": [
      "672.0"
    ],
    "solution": "import math\n\n# Compute the total amount in the account after 10 years.\ndef compute_total_amount(starting_balance, annual_interest_rate, years):\n    total_amount = starting_balance\n    for _ in range(years):\n        total_amount += total_amount * annual_interest_rate / 100\n    return math.ceil(total_amount)\n\n# Print the result.\nprint(compute_total_amount(500, 3, 10))"
  },
  {
    "example_id": 838,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "# The number of toy cars Aiden has received is the sum of the first n natural numbers.\n# The formula for the sum of the first n natural numbers is n(n+1)/2.\n# Therefore, Aiden will have received a total of 12(12+1)/2 = 77 toy cars.\nprint(12*(12+1)/2)"
  },
  {
    "example_id": 839,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-39.0"
    ],
    "annotated_answers": [
      "-39.0"
    ],
    "solution": "# Write a program solution to the question by decomposing it into multiple steps. Then specify the tools used in each step by importing from the toolbox. Make sure that all tools used in the solution are defined in the toolbox. Do not use any undefined functions.\n# You can use functions in math, scipy, sympy if they help.\n\n# Toolbox\nimport math\n\n# Question\n# Write a program solution to the question by decomposing it into multiple steps. Then specify the tools used in each step by importing from the toolbox. Make sure that all tools used in the solution are defined in the toolbox. Do not use any undefined functions.\n# You can use functions in math, scipy, sympy if they help.\n\n# Solution\n# Step 1\n# 1. Write the equation in the form of a function.\ndef equation_of_cost(a, b):\n    return -a - b**2 + 3*a*b\n\n# Step 2\n# 2. Write a program to calculate the cost.\ncost = equation_of_cost(-1, 5)\nprint(cost)"
  },
  {
    "example_id": 840,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "m = 47 - 3*15\nprint(m)"
  },
  {
    "example_id": 841,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "-150.0"
    ],
    "solution": "a = 6\nb = 12\nc = -8\nx = -b/(2*a)\nk = a*x**2 + b*x + c\nprint(k)"
  },
  {
    "example_id": 842,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "33.0",
      "2.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "import sympy\nprint(sympy.simplify(3*(2**3+sympy.sqrt(9))/2))"
  },
  {
    "example_id": 843,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "new_cans = 125 / 5\nprint(new_cans)"
  },
  {
    "example_id": 844,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.599999999999994"
    ],
    "annotated_answers": [
      "22.8"
    ],
    "solution": "blue_box_weight = 15.2 * 3\nprint(blue_box_weight)"
  },
  {
    "example_id": 845,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-81.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "x = -18\na = 63\nb = x - a\nprint(b)"
  },
  {
    "example_id": 846,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nprint(x**2 + 2*x*(5-x) + (5-x)**2)"
  },
  {
    "example_id": 847,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "f = lambda c: 3/(2*c-3)\nc = f(1/2)\n\nf_inv = lambda c: 2*c + 3\nf_inv_c = f_inv(1/2)\n\nprint((f_inv_c * c * f(c)) / (f_inv_c + c))"
  },
  {
    "example_id": 848,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "-4.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nprint(sp.expand(x**4 + 1 / x**4))"
  },
  {
    "example_id": 849,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "number_of_criminals_in_4_half_hours = 4.5 * 6\nprint(number_of_criminals_in_4_half_hours)"
  },
  {
    "example_id": 850,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "print(24-(2*4-3))"
  },
  {
    "example_id": 851,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "4.0",
      "15.0",
      "-16.0",
      "-1.0",
      "1.0",
      "13.0",
      "2.0",
      "15.0",
      "-16.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "import sympy as sp\nx, y = sp.symbols('x y')\neq1 = sp.Eq(2**(x+1), 4**(x-7))\neq2 = sp.Eq(8**(3*y), 16**(-y+13))\nsol = sp.solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 852,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "perimeter = 3 * 3 + 3 * 3 + 3 * 3 + 3 * 3 + 3 * 3 + 3 * 3\nprint(perimeter)"
  },
  {
    "example_id": 853,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0",
      "0.0",
      "9.0",
      "-4.5",
      "7.79422863405995",
      "-4.5",
      "7.79422863405995",
      "4.5",
      "7.79422863405995",
      "4.5",
      "7.79422863405995"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\n\nthird_term = 1053\nninth_term = 13 / 9\n\nseventh_term = sympy.symbols('x')\n\nthird_term_expression = third_term * (seventh_term / 3) ** 2\nninth_term_expression = ninth_term * (seventh_term / 3) ** 8\n\nsolution = sympy.solve(third_term_expression - ninth_term_expression, seventh_term)\nprint(solution)"
  },
  {
    "example_id": 854,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import sympy as sym\nx = sym.symbols('x')\ny = (1/2)*x**2 - 9\nsol = sym.solve(y, x)\nprint(sol[0]**2)"
  },
  {
    "example_id": 855,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "2000.0"
    ],
    "solution": "daily_caloric_requirement = 2 * 40\nprint(daily_caloric_requirement)"
  },
  {
    "example_id": 856,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# The first term of the first sequence is 0\n# The second term of the first sequence is the first term of the second sequence\n# The third term of the first sequence is the second term of the second sequence\n# The fifth term of the second sequence is 3\n\n# The first term of the second sequence is the first term of the first sequence\n# The second term of the second sequence is the first term of the first sequence plus the second term of the first sequence\n# The third term of the second sequence is the second term of the first sequence plus the second term of the first sequence\n\n# The fifth term of the first sequence is the fourth term of the second sequence\n\n# The fourth term of the second sequence is the third term of the second sequence\n# The third term of the second sequence is the second term of the second sequence\n# The second term of the second sequence is the first term of the second sequence\n# The first term of the second sequence is 0\n\n# The fifth term of the first sequence is the fourth term of the second sequence\n# The fourth term of the second sequence is the third term of the second sequence\n# The third term of the second sequence is the second term of the second sequence\n# The second term of the second sequence is the first term of the second sequence\n# The first term of the second sequence is 0\n\n# The fifth term of the first sequence is 0 + 0 + 1 + 2 + 3\n\nprint(5)"
  },
  {
    "example_id": 857,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "136.0"
    ],
    "solution": "product = 25 - 9\nprint(product)"
  },
  {
    "example_id": 858,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return x * 2\n\ndef f_inv(x):\n    return x / 2\n\ndef f_diff(x):\n    return f(x) - f_inv(x)\n\nprint(f_diff(2))"
  },
  {
    "example_id": 859,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111",
      "0.012345679012345678",
      "0.11111111111111112",
      "0.1111111111111111",
      "0.012345679012345677"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(3**-2, 9**-2, 27**(-2/3), 9*81**-1, 243**(-4/5))"
  },
  {
    "example_id": 860,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.5"
    ],
    "annotated_answers": [
      "7.5"
    ],
    "solution": "y = 15.5 - 1\nprint(y)"
  },
  {
    "example_id": 861,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nm = Symbol('m')\nn = Symbol('n')\n\neq = x**2 + m*x + (m+n)\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 862,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(int(pow(7/4, 2)))"
  },
  {
    "example_id": 863,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Lattice points are integer coordinates.\n# If x and y are integer, then x = 2n and y = -2n + 18\n# where n is an integer.\nn = 18 // 2\nprint(2 * n)"
  },
  {
    "example_id": 864,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "susan_cost = 4 * 20\npam_cost = 5 * 20 * 0.7\nprint(pam_cost - susan_cost)"
  },
  {
    "example_id": 865,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import solve\nfrom sympy.abc import x, k\neq = k*x**2 + 10*x + k\nsolutions = solve(eq, x)\nprint(len(solutions))"
  },
  {
    "example_id": 866,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# The domain consists of 10 points\nprint(10)"
  },
  {
    "example_id": 867,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "perimeter = 12\narea = perimeter ** 2\nprint(area)"
  },
  {
    "example_id": 868,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "regular_packs = 166 // 4\nprint(regular_packs)"
  },
  {
    "example_id": 869,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import sqrt\n\ndef h(x):\n    return sqrt((x**3 + 72) / 2) + 1\n\nprint(h(6))"
  },
  {
    "example_id": 870,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1150.0"
    ],
    "annotated_answers": [
      "1160.0"
    ],
    "solution": "annual_interest_rate = 7.5 / 100\nmonthly_interest_rate = annual_interest_rate / 12\nmonths_to_two_years = 24\nquarterly_interest_compounding = 3\nmonths_to_three_months = 3\n\ntotal_interest = 0\nfor month in range(months_to_two_years):\n    total_interest += monthly_interest_rate * 1000\n    total_interest = round(total_interest, 2)\n\nprint(1000 + total_interest)"
  },
  {
    "example_id": 871,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "424.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "a = 3 * 1**2 + 1 * 1 + 0\nb = 3 * 1**2 + 1 * (-3) + 0\nc = 3 * (-3)**2 + 1 * (-3) + 0\nprint(100 * a + 10 * b + c)"
  },
  {
    "example_id": 872,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "def g(x):\n    return 4 * x ** 2 - 3 * x + 2\n\nprint(g(-3))"
  },
  {
    "example_id": 873,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "2.0",
      "1296.0",
      "18.0",
      "18.0",
      "2.0",
      "1296.0",
      "18.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import sympy\n\nn = sympy.symbols('n')\nx = sympy.symbols('x')\n\neq = 9*x**2 + n*x + 36\n\nsol = sympy.solve(eq, x)\n\nprint(sol)"
  },
  {
    "example_id": 874,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0",
      "-8.0",
      "-7.0",
      "-6.0",
      "-5.0",
      "-4.0",
      "-3.0",
      "-2.0",
      "-1.0",
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "# x + 4 is in the solution if x is in the solution of the inequality |x| < 9 - 4\n# since |x| < 9 - 4 iff -9 + x < 9\n# so the solution is -9, -5, 0, 5, 9\nprint(list(range(-9, 10)))"
  },
  {
    "example_id": 875,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "print(2 ** 6)"
  },
  {
    "example_id": 876,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "pen_cost = 924 / 7\npencil_cost = pen_cost / 11\nprint(pencil_cost)"
  },
  {
    "example_id": 877,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(0.5 * 2 * 10)"
  },
  {
    "example_id": 878,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "f(q(1))"
  },
  {
    "example_id": 879,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60000.0"
    ],
    "annotated_answers": [
      "60000.0"
    ],
    "solution": "sum_of_odd_integers = 0\nfor i in range(501, 700, 2):\n    sum_of_odd_integers += i\nprint(sum_of_odd_integers)"
  },
  {
    "example_id": 880,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "124.0"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "def get_pages_on_first_day(total_pages):\n    return total_pages // 2\n\nprint(get_pages_on_first_day(248))"
  }
]