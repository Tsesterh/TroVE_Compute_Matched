[
  {
    "example_id": 0,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "def is_true(x):\n    return x < x**2 < x**3 or x**2 < x < x**3 or x**3 < x < x**2\n\ndef sum_true(x):\n    return sum(int(is_true(x)) << i for i in range(6))\n\nprint(sum_true(1))"
  },
  {
    "example_id": 1,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "k = []\nfor a in range(1, 100):\n    for b in range(1, 100):\n        for c in range(1, 100):\n            if (a, b, c) == (0, 0, 0):\n                continue\n            if (a**2 + b**2) % c == 0:\n                if (4*a**2 + 12*b**2) % c == 0:\n                    k.append(c)\nprint(k)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "82.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "omega = 1 - 5j\nexpression = abs(2*omega**2 - 4*omega - 30)\nprint(expression)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "343400.0",
      "2500.0",
      "2500.0"
    ],
    "annotated_answers": [
      "195.0"
    ],
    "solution": "s = 0\nfor k in range(1, 101):\n    s += k * (k + 1)\nprint(s)\ns = 0\nfor k in range(1, 101, 2):\n    s += k\nprint(s)\ns = 0\nfor k in range(1, 101, 2):\n    s += k\nprint(s)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "6.0",
      "17.0",
      "2.0",
      "30.0",
      "20.0",
      "2.0",
      "15.0",
      "20.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "from sympy import log, Symbol\nx = Symbol('x')\nexpression = 17 * log(x, 30) - 3 * log(x, 5) + 20 * log(x, 15) - 3 * log(x, 6) + 20 * log(x, 2)\nminimum = expression.subs({x: 2})\nprint(minimum)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "def f(x):\n    return f(x + 1) + f(x - 1)\n\nf.cache = {}\nf(1) = 1\nf(2) = 2\n\nf(15) = 20\nf(20) = 15\n\nprint(f(20152015))"
  },
  {
    "example_id": 6,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "25.0",
      "2.0",
      "50.0",
      "625.0",
      "25.0",
      "2.0",
      "25.0",
      "2.0",
      "2.0",
      "25.0",
      "2.0",
      "1250.0",
      "15625.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "import sympy\nx, y, z, v, w = sympy.symbols('x, y, z, v, w')\nexpr = 25*sympy.eye(3) + sympy.Matrix([[v, w, x], [y, z, v], [x, y, z]])\nprint(expr.det())"
  },
  {
    "example_id": 7,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.309920008293306"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "expression = (2**(1/3) + 2**(1/3)) * (2 - 2*2**(1/3) - 2**(2/3))\nprint(expression)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "177.0"
    ],
    "solution": "def f(x):\n    return x\n\nf_values = [f(i) for i in range(1000)]\nprint(len(set(f_values)))"
  },
  {
    "example_id": 9,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "m = 33\nn = 67\nprint(abs(m-n))"
  },
  {
    "example_id": 10,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2962962962962962"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "r = 2\ns = 3\nprint((r/s)**3)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "209.31034482758622"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "z = 5 + 1j\nw = -4 + 10j\nexpression = abs(z + 20j / w)**2 + abs(w + 12j / z)**2\nprint(expression)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "79.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "count = 0\nfor a in range(-5, 5):\n    for b in range(-5, 5):\n        if abs(a + b * 1j) <= 5:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 13,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0",
      "13.582376151231776",
      "11.1915082254503"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "from math import sqrt\n\n\ndef find_max(a, b, c):\n    # Calculate the maximum value of the expression\n    max_value = 4 * sqrt(a) + 6 * sqrt(b) + 12 * sqrt(c)\n    # Calculate the value of the denominator\n    denominator = sqrt(a) * sqrt(b) * sqrt(c)\n    # Divide the maximum value by the denominator\n    return max_value / denominator\n\n\n# Test the function with some values\nprint(find_max(1, 1, 1))\nprint(find_max(1, 2, 3))\nprint(find_max(3, 2, 1))"
  },
  {
    "example_id": 14,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy as sp\n\nx = sp.symbols('x')\npolynomial = x**8 + 3*x**4 - 4\nfactors = polynomial.factor()\nprint(factors)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "count = 0\nfor u in range(-10, 11):\n    for v in range(-10, 11):\n        if u * 1j * v == 10:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 4\nb = 2\nc = 1\nexpression = 4*a + 3*b + c**3 / (a - b) * b\nprint(expression)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "91.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a = 3\nb = 4\nprint(a**3 + b**3)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0",
      "2.0",
      "9.0",
      "15625.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import log\na = log(1000, 2)\nb = log(1000000, 2)\nprint(a + b)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1007.5"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "sum = 0\nfor i in range(2016):\n    sum += i\nprint(sum / 2016)"
  },
  {
    "example_id": 20,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0",
      "9.0",
      "5.0",
      "3.0",
      "149.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, simplify, solve\n\nk = Symbol('k')\nx = Symbol('x')\nexpression = k*x**4 + 9*x**3 + k*x**2 + 32*x - 11\n\nsolution = solve(expression.subs(x, x + 5), k)\nprint(simplify(solution[0]))"
  },
  {
    "example_id": 21,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5486782579.0"
    ],
    "annotated_answers": [
      "2039191.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nsum = 0\nfor i in range(-2019, 2019):\n    sum += f(i)\nprint(sum)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-16.0",
      "0.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z1 = 5j\nz2 = 1j\nprint((z1 - z2)**2)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy.abc import a, b, c, d\n\na = sqrt(2)\nb = a / (1 + 1/(b + 1/(c + 1/(d + 1))))\nprint(b)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "576.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "expression = 0\nfor i in range(1, 49, 2):\n    expression += i\nprint(expression)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.10228176773423"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 3 - 4j\nprint(abs(z + 5 - 3j) + abs(z - 7 + 2j))"
  },
  {
    "example_id": 26,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "3.0",
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Symbol, Min\nx, y, z = Symbol('x'), Symbol('y'), Symbol('z')\nexpression = (x**3 + 2*y**3 + 4*z**3)/(x*y*z)\nprint(Min(expression, constraints=(x > 0, y > 0, z > 0)))"
  },
  {
    "example_id": 27,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor x in range(1, 100):\n    for y in range(1, 100):\n        for z in range(1, 100):\n            for w in range(1, 100):\n                if 2*y == x + 17/x and 2*z == y + 17/y and 2*w == z + 17/z and 2*x == w + 17/w:\n                    count += 1\nprint(count)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "def next_term(n):\n    if n % 2 == 0:\n        return n + 1\n    else:\n        return n * 2\n\n\ndef k_term(k):\n    return 3 * 2**k - 1\n\n\ndef find_k(n):\n    k = 0\n    while k_term(k) < n:\n        k += 1\n    return k\n\n\nn = 100\nk = find_k(n)\nprint(k)"
  },
  {
    "example_id": 29,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "29800.0"
    ],
    "annotated_answers": [
      "29800.0"
    ],
    "solution": "count = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        for c in range(1, 101):\n            if a**2 * b + b**2 * c + c**2 * a == a * b**2 + b * c**2 + c * a**2:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.841903733771222"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 3\ny = 3\nz = 3\nexpression = (16 - x**2)**0.5 + (25 - y**2)**0.5 + (36 - z**2)**0.5\nprint(expression)"
  },
  {
    "example_id": 31,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-21.0",
      "5.0",
      "25.0",
      "3.0",
      "27.0",
      "2.0",
      "6.0",
      "30.0",
      "71598.0",
      "6.0",
      "55486.0",
      "10.0",
      "45510.0",
      "15.0",
      "176341.0"
    ],
    "annotated_answers": [
      "-71.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nP = Poly(x**8 - x**4 - x**3 - x**2 - x - 1, x)\nprint(P.subs(x, sqrt(2) + sqrt(3) + sqrt(5)))"
  },
  {
    "example_id": 32,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "341.0"
    ],
    "solution": "coefficients = [0, 1, 0, 0, 1, 0, 0, 0, 1]\nprint(len(coefficients))"
  },
  {
    "example_id": 33,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.120013107233565",
      "-6.0"
    ],
    "annotated_answers": [
      "250.0"
    ],
    "solution": "expression = 1 / (5**4 + 1) - 1 / (5**4 - 1)\nprint(expression)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.04456722727821",
      "28"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "from math import factorial\n\ndef coefficient(x, n):\n    return factorial(n) // (factorial(x) * factorial(n - x))\n\nprint(coefficient(49, 99))"
  },
  {
    "example_id": 35,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-22.997041420118343",
      "-14.792899408284022"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = 1 - 5j\nprint(z + 1 / z + z**2 + 1 / z**2)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\nexpression = (1 / a + 1 / b + 1 / c) / (1 / (a + b) + 1 / (a + c) + 1 / (b + c))\nprint(expression.simplify())"
  },
  {
    "example_id": 37,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = []\nfor i in range(1, 100):\n    if ((-1 + i)**2 + (1 + i)**2) == ((-1 - i)**2 - (1 - i)**2):\n        a.append(i)\nprint(a)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(0)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.6457513110645907",
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import cmath\n\nc = cmath.sqrt(7)\nprint(c)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "expression = (x + 3)**5 * (x + 2)**8 * (x + 1)**4 * (x - 7)**2\nexpression = expression / (x + 3)**11 * (x + 2)**6 * (x + 1)**4 * x**2\nprint(expression)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "75.0",
      "2.0",
      "15.0",
      "2.0",
      "1350.0",
      "2.0",
      "270.0",
      "2.0",
      "90.0",
      "2.0"
    ],
    "annotated_answers": [
      "5120.0"
    ],
    "solution": "from sympy import *\nx, y, z = symbols('x y z')\nexpression = (1 + 5 * z) * (4 * z + 3 * x) * (5 * x + 6 * y) * (y + 18)\nexpression = expression.expand()\nexpression = expression.simplify()\nprint(expression)"
  },
  {
    "example_id": 42,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 0:\n        return f(n // 2) + 1\n    else:\n        return 1\n\nprint(f(15))"
  },
  {
    "example_id": 43,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol(\"x\")\nexpression = 3 * x + 2\nexpression = expression.subs(x - 1, 4)\nprint(expression)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(sum(1 for x in range(-6, 4) if abs(x) + 5 < 7 and abs(x - 3) > 2))"
  },
  {
    "example_id": 45,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "from sympy import Eq, solve, sqrt, Symbol\nx = Symbol('x')\nsolution = solve(Eq(sqrt(x) + sqrt(x + 12), 0), x)\nprint(solution)"
  },
  {
    "example_id": 46,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0",
      "24.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Direct\na = 8\nb = 16\nx = -16\ny = 96\nexpression = x**2/a**2 + y**2/b**2\nprint(expression)\n\n# Via the equation\nh = 0\nk = 0\nexpression = h + k + a + b\nprint(expression)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.738544703693726"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import sin, pi\n\ndef f(x):\n    return 9 * x**2 * sin(x)**2 + 4 / x * sin(x)\n\nminimum = 99999\nfor x in range(1, int(pi)):\n    if f(x) < minimum:\n        minimum = f(x)\nprint(minimum)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "z = 2j\nw = 5j\nprint(abs(w - z))"
  },
  {
    "example_id": 49,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(i, j):\n    if i == 0 and 0 <= j <= 4:\n        return j + 1\n    elif i >= 1 and j == 0:\n        return f(i - 1, 1)\n    else:\n        return f(i - 1, f(i, j - 1))\n\nprint(f(2015, 2))"
  },
  {
    "example_id": 50,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "840.0"
    ],
    "solution": "import math\ndef sum_of_term(m, n):\n    return (1/(m**2 + m) + 1/(n**2 + n)) / 29\n\nfor m in range(1, 1000):\n    n = int(math.ceil(m * 29 / (1 + sum_of_term(m, m))))\n    if n > m:\n        break\nprint(m + n)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.39829654694291144"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\nx = math.exp(math.log(2) + math.log(4) - 3)\nprint(x)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "91.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "import math\n\na = 0\nb = 0\n\nwhile True:\n    a += 1\n    b = math.floor(10**9 / (10**a - 1))\n    if b < 10:\n        break\n\nprint(10*a + b)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "875.0"
    ],
    "annotated_answers": [
      "277.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\np = sympy.Poly(x**3 - 4*x**2 + 4*x - 16, x)\nprint(p.subs(x, 11))"
  },
  {
    "example_id": 54,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-2016.0"
    ],
    "solution": "import sympy\nA, B = sympy.symbols('A, B')\nx = sympy.symbols('x')\npolynomial = x**2017 + A*x + B\nfactor = (x + 1)**2\nif polynomial % factor == 0:\n    print(B)\nelse:\n    print('Not divisible')"
  },
  {
    "example_id": 55,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 1\nb = -1\nc = -1\nexpression = abs(a) + abs(b) + abs(c)\nprint(expression)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-108.0",
      "1.732",
      "0.0",
      "1.732",
      "0.0",
      "4.0",
      "9.537",
      "-7.0",
      "9.537"
    ],
    "annotated_answers": [
      "-108.0"
    ],
    "solution": "from scipy.optimize import minimize\n\ndef objective(x):\n    return x[0]**6 + x[1]**6 - 54*x[0]*x[1]\n\nresult = minimize(objective, [1, 1])\nprint(result)"
  },
  {
    "example_id": 57,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "450.0"
    ],
    "annotated_answers": [
      "450.0"
    ],
    "solution": "import math\na = 2700\nb = 75\nprint(math.sqrt(a*b))"
  },
  {
    "example_id": 58,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36100.0"
    ],
    "annotated_answers": [
      "41230.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 20):\n    sum += i * i**2\nprint(sum)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2**(6/2)\nprint(x)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "from math import sqrt\na = 2\nb = 3\nc = 4\nexpression = (a - b)**2 + (a - c)**2 + (b - c)**2\nprint(expression)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor x in range(-100, 101):\n    for y in range(-100, 101):\n        if (x + y)**2 == (x + 1) * (y - 1):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3240.0"
    ],
    "annotated_answers": [
      "936.0"
    ],
    "solution": "a = 12\nb = 15\nc = 18\nprint(a * b * c)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "count = 0\nfor n in range(1, 1000):\n    if (7**5 + 3*7**n) % (7**n - 1) == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 64,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0",
      "0.0",
      "-3.0",
      "2.0",
      "0.0",
      "-3.0",
      "2.0",
      "0.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\np = 2*x**2 + 3*x + 1\nsol = solve(p - 1, x)\nprint(sol)\np = 2*x**2 + 3*x + 3\nsol = solve(p - 3, x)\nprint(sol)\np = 2*x**2 + 3*x + 5\nsol = solve(p - 5, x)\nprint(sol)\nprint(len(sol))"
  },
  {
    "example_id": 65,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "expression = abs(5**0.5 + 2 * 1j)\nprint(expression)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "a_n = 1\nfor n in range(2, 100):\n    a_n = a_n**2 - a_n * a_n + 1\nprint(a_n)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32480.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "def p(x):\n    return (((x+3)*(x+3))*x + 6)*x + 8\n\nprint(p(12))"
  },
  {
    "example_id": 68,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "3.0",
      "5.0",
      "2.0",
      "16.0",
      "8.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "from sympy import *\ny, c = symbols('y c')\nexpression = (6*y**3 + 5*y**2 - 16*y + 8) / (2*y + 3)\nprint(expression)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import numpy as np\n\na = np.complex128(1)\nb = np.complex128(-1)\nc = np.complex128(-1)\nd = np.complex128(1)\n\nexpression = abs((a + b) * (a + c) * (a + d) * (b + c) * (b + d) * (c + d))\nprint(expression)"
  },
  {
    "example_id": 70,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "361.0",
      "8836.0"
    ],
    "annotated_answers": [
      "4561.0"
    ],
    "solution": "f = lambda x: x**2\nprint(f(19))\nprint(f(94))"
  },
  {
    "example_id": 71,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "import math\n\nexpression = math.floor((3 ** 100 + 2 ** 100) / (3 ** 96 + 2 ** 96))\nprint(expression)"
  },
  {
    "example_id": 72,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def f(x):\n    return -3 * x**2 + 36 * x - 7\n\ndef inverse(f, c):\n    return (f(c) - 3 * c**2 + 36 * c - 7) / (2 * c)\n\ndef find_smallest_c(f):\n    c = 1\n    while f(c) > 0:\n        c += 1\n    return c\n\nprint(find_smallest_c(f))"
  },
  {
    "example_id": 73,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 3\ny = 2\nexpression = x**3\nprint(expression)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from sympy import solve, symbols\nx = symbols('x')\nexpression = x**2 - 13*x + 22\nsolutions = solve(expression, x)\nprint(sum(solutions))"
  },
  {
    "example_id": 75,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "def sequence(n):\n    x = n\n    for i in range(2, n+1):\n        x = n / x\n    return x\n\nprint(sequence(8))"
  },
  {
    "example_id": 76,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def fibonacci(n):\n    if n <= 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 0\nwhile fibonacci(n) <= 10**6:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "271.9727564102568"
    ],
    "annotated_answers": [
      "272.0"
    ],
    "solution": "from scipy.special import binom\n\nsum = 0\nfor n in range(17, 10000):\n    sum += binom(n, 15) / binom(n, 17)\nprint(sum)"
  },
  {
    "example_id": 78,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 8\nb = 27\nc = 2\nprint(a + b + c)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-323.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 1\ny = 2\nz = 3\nexpression = x + 108 / (x - y)**3 * (y - z)**2 * z\nprint(expression)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor a in range(1, 10):\n    for b in range(1, 10):\n        for c in range(1, 10):\n            for d in range(1, 10):\n                if a * log(2, 10) + b * log(3, 10) + c * log(5, 10) + d * log(7, 10) == 2005:\n                    count += 1\nprint(count)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0",
      "51.0",
      "2.0",
      "49.0",
      "2.0",
      "53.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import sqrt, I\nz = sqrt(-I)\nprint(z**49 + z**50 + z**51 + z**52 + z**53)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 5\nf = lambda x: 4 * x + 3 if x < a else 7 * x - 12\nprint(a)"
  },
  {
    "example_id": 83,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "192060.0",
      "6.0",
      "470449.0"
    ],
    "annotated_answers": [
      "66673.0"
    ],
    "solution": "from sympy import expand, sqrt\n\nexpression = expand((sqrt(2) + sqrt(3)) ** 12)\nprint(expression)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "533.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "a = 2\nb = 3\nc = 4\nd = 5\nprint(((a*d - b*c)**2 + (a*c + b*d)**2))"
  },
  {
    "example_id": 85,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "from math import sqrt\nx = 1\nwhile True:\n    if x**3 + 32 * x**2 + 128 > x**7:\n        break\n    x += 1\nprint(x)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "79.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "p = lambda x: x**2 - 2*x - 1\nprint(p(10))"
  },
  {
    "example_id": 87,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a = 1\nfor _ in range(9):\n    a = 1 / (1 - a)\nprint(a)"
  },
  {
    "example_id": 88,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    return x / (2*x + 3)\n\ndef f_inv(x):\n    return 2*x + 3\n\nc = f_inv(f(0))\nprint(c)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 101):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 90,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 63\nwhile True:\n    for k in range(2, n):\n        if (n % k) == 0:\n            p1 = n // k\n            p2 = k\n            break\n    else:\n        p1 = n\n        p2 = 1\n    if (p1 - 1) % 2 == 0 and (p2 - 1) % 2 == 0:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\ndef f(x, y):\n    return x**2 - 6*x + y**2\n\ndef g(x, y):\n    return abs(x + y) + abs(x - y)\n\ndef h(x, y):\n    return g(x, y) - 2\n\ndef k(x, y):\n    return f(x, y) - h(x, y)\n\ndef l(x, y):\n    return k(x, y)\n\nprint(l(1, 1))"
  },
  {
    "example_id": 92,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1571.0"
    ],
    "annotated_answers": [
      "508.0"
    ],
    "solution": "a = -1\nb = -2\nc = -3\nd = -4\ne = -8\nf = -24\n\na_sum = a + b + c + d + e + f\nb_sum = 2 * (b + 2 * c + 3 * d + 4 * e + 2 * f)\nc_sum = 3 * (c + 2 * d + 3 * e + 4 * f)\nd_sum = 4 * (d + 2 * e + 6 * f)\ne_sum = 2 * (e + 2 * f)\nf_sum = 7 * f\n\nprint(a_sum + b_sum + c_sum + d_sum + e_sum + f_sum)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import Symbol, solve\n\na = Symbol('a', real=True)\nroots = solve(a**4 + (a**2 - 1) * a**2 + a**3, a)\nfor root in roots:\n    if len(set(root.as_real_imag())) == 2:\n        print(root)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nroots = solve(x**3 - 3*x - 5, x)\nprint(roots[0] * roots[1] * roots[2])"
  },
  {
    "example_id": 95,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1050.0"
    ],
    "annotated_answers": [
      "1052.0"
    ],
    "solution": "from sympy import binomial\n\nn = 1000\nk = 50\ncoefficient = binomial(1000, 50)\nprint(n + k)"
  },
  {
    "example_id": 96,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        if a**2 + a * b + b**2 == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-48.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nf = Poly(x**4 + 3*x**2 - 154, x)\nf_roots = f.all_roots()\nf_root_values = [f.subs(x, root) for root in f_roots]\nprint(f_root_values[0] + f_root_values[1] + f_root_values[2] + f_root_values[3])"
  },
  {
    "example_id": 98,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "8.0",
      "3.0",
      "3.0",
      "8.0"
    ],
    "annotated_answers": [
      "-81.0"
    ],
    "solution": "from sympy import sqrt, I\n\nexpression = (3 + I * sqrt(3))**8 + (3 - I * sqrt(3))**8\nprint(expression)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1536.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a, b = 1, 24\nwhile b < 3072:\n    a, b = b, 2 * b\nprint(a)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "expression = 0\nfor i in range(100, 0, -1):\n    expression += i\nprint(expression)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "1.0",
      "7.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nexpression = (5*x-7)/((x-1)**3)\nprint(expression.expand())"
  },
  {
    "example_id": 102,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "-540.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = [5 - 10 * 4 * 1j, 5 - 10 * 4 * 2j, 5 - 10 * 4 * 3j]\nb = [4 - 10 * 5 * 1j, 4 - 10 * 5 * 2j, 4 - 10 * 5 * 3j]\nprint(sum(a) + sum(b))"
  },
  {
    "example_id": 103,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "3.0",
      "9.0",
      "2.0",
      "7020.0",
      "3.0",
      "27.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "import sympy\nfrom sympy import symbols\nfrom sympy import solve\nfrom sympy import Poly\nfrom sympy import expand\n\na = symbols('a')\nb = symbols('b')\nx = symbols('x')\n\np = Poly(x**3 - a * x**2 + b * x - 65, x)\n\nroots = solve(p, x)\n\nprint(expand(sum(roots)))"
  },
  {
    "example_id": 104,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x_1, y_1 = 1, 1\nx_2, y_2 = 2, 0\nx_n, y_n = 4, 3\n\nsum = x_1**2 + y_1**2 + x_2**2 + y_2**2 + x_n**2 + y_n**2\nprint(sum)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "sum = 0\nfor a in range(1, 100):\n    for b in range(1, 100):\n        if abs(a) == abs(b) == abs(a + b):\n            sum += a/b\nprint(sum)"
  },
  {
    "example_id": 106,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "2.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\ng = x**3 - 14 * x**2 + 18 * x + 72\nprint(g.factor())"
  },
  {
    "example_id": 107,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "4.0",
      "10.0",
      "2.0",
      "4.0",
      "26.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import solve, Symbol\n\nx, y, z = Symbol('x'), Symbol('y'), Symbol('z')\nexpression = 2 * x**2 + 2 * y**2 + 5 * z**2 - 2 * x * y - 4 * y * z - 4 * x - 2 * z + 15\nsolution = solve(expression, x, y, z)\nprint(solution)"
  },
  {
    "example_id": 108,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import *\nz = symbols('z')\nexpression = abs(z - 3)**2 + abs(z - 5 + 2*I)**2 + abs(z - 1 + I)**2\nprint(expression)"
  },
  {
    "example_id": 109,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "5.47213595499958"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import math\n\n\ndef f(x):\n    return math.sqrt(5 * x**2 + 2 * x * math.sqrt(5) + 1) + x * math.sqrt(5)\n\n\nmin_x = 0\nmin_value = math.inf\nfor x in range(1, 100):\n    value = f(x)\n    if value < min_value:\n        min_value = value\n        min_x = x\nprint(min_x, min_value)"
  },
  {
    "example_id": 110,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "78.0",
      "3.0",
      "1.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import Symbol\na, b, c = Symbol('a'), Symbol('b'), Symbol('c')\nexpression = (a + 1)*(b + 1)*(c + 1) + (a + 2)*(b + 2)*(c + 2) + (a + 3)*(b + 3)*(c + 3)\nexpression = expression.expand()\nexpression = expression.subs({a + 1: 1, b + 1: 1, c + 1: 1, a + 2: 2, b + 2: 2, c + 2: 2, a + 3: 3, b + 3: 3, c + 3: 3})\nexpression = expression.subs({a: 1 - 5j, b: 1 - 2j, c: 1 + 2j})\nprint(expression)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    return x + 1\n\ns = 0\nn = 0\nfor i in range(1, 101):\n    f5 = f(f(f(f(f(i)))))\n    if f5 == 5:\n        n += 1\n        s += f5\nprint(n * s)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\nexpression = sympy.Poly(a * sympy.sympify('x^3') + b * sympy.sympify('x') - c)\nfactor = sympy.Poly(sympy.sympify('x^2') + b * sympy.sympify('x') + c)\nprint(expression.div(factor))"
  },
  {
    "example_id": 113,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.412037037037035"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\na = 10\nb = 100\nc = 1000\nexpression = (math.log(b, a)**3 + math.log(c, b)**3 + math.log(a, c)**3)\nprint(expression)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2010.5"
    ],
    "annotated_answers": [
      "2014.0"
    ],
    "solution": "a = 2011\nb = 2\nc = 1\nexpression = a - 1/b**c\nprint(expression)"
  },
  {
    "example_id": 115,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.7610947863370792"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\n\ndef area_triangle(a, b, c):\n    return (a + b + c) * (b + c - a) * (c + a - b)\n\ndef distance_between_foci(major_axis, area_triangle_pf1_pf2):\n    return major_axis * math.sqrt(area_triangle_pf1_pf2 / (area_triangle(major_axis, major_axis, major_axis) - area_triangle_pf1_pf2))\n\nprint(distance_between_foci(15, 26))"
  },
  {
    "example_id": 116,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from sympy import sqrt\n\nP = sqrt(1 + sqrt(6))\nprint(P)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "27.0",
      "4.0",
      "27.0",
      "15.0",
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import solve, symbols\nx = symbols('x')\ny = x**4 - 5 * x**2 - x + 4\nz = x**2 - 3 * x\nroots = solve((y - z).diff(x), x)\nprint(roots)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0",
      "14.0",
      "7.0",
      "0.0",
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f = lambda x: abs(x**2-6*x+8) + abs(x**2+x-6)\nprint(f(-1))\nprint(f(0))\nprint(f(1))\nprint(f(2))\nprint(f(3))"
  },
  {
    "example_id": 119,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import sympy\nz = sympy.Symbol('z')\nexpression = (z + 1/z - 1)**3\nprint(expression)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.972222222222222"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nprint(b*c/a**2 + a*c/b**2 + a*b/c**2)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 6**2 - 3 * 6\nprint(x)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "def f(x, y):\n    if x * y == 1:\n        raise Exception(\"Division by zero\")\n    return x + y * f(y, x)\nprint(f(1, 2))"
  },
  {
    "example_id": 123,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a1 = 1\nb1 = 0\na2 = 6\nb2 = 0\na3 = 6\nb3 = 17\na4 = 1\nb4 = 6\nexpression = a1 + b1 + a2 + b2 + a3 + b3 + a4 + b4\nprint(expression)"
  },
  {
    "example_id": 124,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "405.0"
    ],
    "annotated_answers": [
      "405.0"
    ],
    "solution": "print(abs(-324 + 243j))"
  },
  {
    "example_id": 125,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "count = 0\nfor n in range(2, 2011):\n    product = 1\n    for i in range(1, n):\n        product *= 1 + 1.0 / i\n    if product.is_integer():\n        count += 1\nprint(count)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2150.0"
    ],
    "solution": "x = Symbol('x')\nexpression = (x**3 + x**2 - 5) - (x - 3)**3 - c2 * (x - 3)**2 - c1 * (x - 3) - c0\nc2, c1, c0 = symbols('c2, c1, c0')\nprint(expression.expand().subs({c2**2 + c1**2 + c0**2: 0}))"
  },
  {
    "example_id": 127,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor x in range(1, 100):\n    for y in range(1, 100):\n        for z in range(1, 100):\n            if (x + 1/y) * (y + 1/z) * (z + 1/x) == 8:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10901.0"
    ],
    "annotated_answers": [
      "676.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nf = sp.Poly(1, x)\nfor i in range(1, 5):\n    f = f * (x + 2) - 125\n    f = f * (x**2 + 1)\nprint(f.coeff_monomial(x**5))"
  },
  {
    "example_id": 129,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2471040.0"
    ],
    "annotated_answers": [
      "348.0"
    ],
    "solution": "a = 1440\nb = 1716\nc = 1848\nterm = a * b\nprint(term)"
  },
  {
    "example_id": 130,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.712812921102035"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "import math\nsurface_area = 2 * (2 * math.sqrt(27) + 2 * math.sqrt(3))\nprint(surface_area)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "286.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "x = 2\ny = 3\nexpression = 2 * x**3 + (x * y)**3 + 2 * y**3\nprint(expression)"
  },
  {
    "example_id": 132,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.1320667783686564",
      "-15.0",
      "1.1320667783686562",
      "-15.0",
      "1.9721522630525294",
      "-31.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 0.5\ny = 0.7\ng = sum(x**i * y**(100-i) for i in range(101))\ng_prime = sum(y**i * x**(100-i) for i in range(101))\nprint(g)\nprint(g_prime)\nprint(g - g_prime)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0",
      "10.0",
      "8.0",
      "2.0",
      "6.0",
      "8.0",
      "2.0",
      "4.0",
      "2.0",
      "8.0",
      "0.25",
      "10.0",
      "2.6666666666666665",
      "0.6666666666666666",
      "1.6666666666666667"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "import math\n\ndef is_int(x):\n    return int(x) == x\n\ndef is_positive_integer(x):\n    return is_int(x) and x > 0\n\ndef is_solution(x):\n    numerator = x[0] + x[1]\n    denominator = x[2]\n    return is_positive_integer(numerator) and is_positive_integer(denominator)\n\ndef simplify(x):\n    return x[0] / x[2], x[1] / x[2]\n\ndef largest_solution(x):\n    numerator = x[0]\n    denominator = x[1]\n    return numerator + denominator\n\ndef solution(x):\n    numerator = x[0]\n    denominator = x[1]\n    return (numerator + denominator) / (numerator - denominator)\n\ndef print_solution(x):\n    numerator = x[0]\n    denominator = x[1]\n    print(numerator, \"+\", denominator, \"=\", numerator + denominator)\n    print(numerator, \"-\", denominator, \"=\", numerator - denominator)\n    print(numerator, \"/\", denominator, \"=\", numerator / denominator)\n    print(denominator, \"/\", numerator, \"=\", denominator / numerator)\n\ndef main():\n    x = [8, 2, 3]\n    while not is_solution(x):\n        x = [x[0] + 1, x[1] + 1, x[2] + 1]\n    print_solution(x)\n    print(\"Largest solution:\", largest_solution(x))\n    print(\"Simplified:\", simplify(x))\n    print(\"Solution:\", solution(x))\n\nmain()"
  },
  {
    "example_id": 134,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor n in range(3, 101):\n    for x1 in range(1, n + 1):\n        for x2 in range(1, n + 1):\n            if x1 + x2 == 0:\n                if x1 * x2 <= 0:\n                    count += 1\nprint(count)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor x in range(-100, 101):\n    for y in range(-100, 101):\n        for z in range(-100, 101):\n            if x**4 + y**4 + z**4 - 4 * x * y * z == -1:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "229.0"
    ],
    "annotated_answers": [
      "763.0"
    ],
    "solution": "def recurrence(n, x):\n    return x**(n - 1) + 313 * x**(n - 2) - 77 * x**(n - 3) - 8\n\nprint(recurrence(20, 1))"
  },
  {
    "example_id": 137,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "0.5",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\ndef sector_area(r, theta):\n    return 0.5 * r * r * theta\n\ndef sector_arc_length(r, theta):\n    return r * theta\n\ndef max_area(r):\n    max_theta = 0\n    max_area = 0\n    for theta in range(1, 100):\n        area = sector_area(r, theta)\n        if area > max_area:\n            max_area = area\n            max_theta = theta\n    return (max_theta, max_area)\n\ndef max_arc_length(r):\n    max_theta = 0\n    max_arc_length = 0\n    for theta in range(1, 100):\n        arc_length = sector_arc_length(r, theta)\n        if arc_length > max_arc_length:\n            max_arc_length = arc_length\n            max_theta = theta\n    return (max_theta, max_arc_length)\n\ndef test():\n    r = 1\n    for theta in range(1, 100):\n        print(\"r=%s, theta=%s, area=%s, arc_length=%s\" % (r, theta, sector_area(r, theta), sector_arc_length(r, theta)))\n    print(\"Max area:\", max_area(r))\n    print(\"Max arc length:\", max_arc_length(r))\n\ntest()"
  },
  {
    "example_id": 138,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-45.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(5*(-9))"
  },
  {
    "example_id": 139,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\nsum_numbers = sum(numbers)\nsum_squares = sum(number**2 for number in numbers)\nlargest_possible_value = sum_numbers / len(numbers)\nprint(largest_possible_value)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = 0.25, 0.25, 0.25, 0.25\nexpression = a**2 + b**2 + c**2 + d**2\nprint(expression)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sym\n\na, b, c, d, e = sym.symbols('a, b, c, d, e')\nexpr = (a**4/(a - b)*(a - c)*(a - d)*(a - e) + b**4/(b - a)*(b - c)*(b - d)*(b - e) + c**4/(c - a)*(c - b)*(c - d)*(c - e) + d**4/(d - a)*(d - b)*(d - c)*(d - e) + e**4/(e - a)*(e - b)*(e - c)*(e - d))\nprint(expr)"
  },
  {
    "example_id": 142,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32005.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "term = 2001\nfor i in range(4):\n    term = term + term - i\nprint(term)"
  },
  {
    "example_id": 143,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "expression = (x + 8) * (x + 5)**2 * (x + 1)**3 * x**5 * (x - 3)**2 / (\n    (x + 7) * (x + 5)**2 * (x + 1) * x * (x - 3)**3 * (x - 4))\nasymptotes = []\nfor x in np.linspace(-10, 10, 100):\n    if expression.subs({x: x}) == 0:\n        asymptotes.append(x)\nprint(len(asymptotes))"
  },
  {
    "example_id": 144,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(3)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "553.0"
    ],
    "solution": "def is_power(n, k):\n    return k == int(k ** (1 / 3)) and n % k == 0\n\n\ndef get_factors(n):\n    factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if n // i!= i:\n                factors.append(n // i)\n    return factors\n\n\ndef solve(k):\n    max_n_i = 0\n    for n in range(1, k * 70 + 1):\n        if is_power(n, k):\n            factors = get_factors(n)\n            if len(factors) == 70 and all(f % k == 0 for f in factors):\n                max_n_i = max(max_n_i, n)\n    return max_n_i / k\n\n\nprint(solve(100))"
  },
  {
    "example_id": 146,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "169.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 156 + 65j\nprint(abs(z))"
  },
  {
    "example_id": 147,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import Symbol, poly, roots, Poly, factor\n\nx = Symbol('x')\n\np = poly(x**8 + 98*x**4 + 1)\nq = Poly(p.args[0][0], x)\n\nprint(p.args[0][0])\nprint(q.args[0][0])\n\nprint(p.args[0][0] + q.args[0][0])"
  },
  {
    "example_id": 148,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return (6 * x**3 + 4 * x**2 - 11 * x + 5) / (3 * x**3 - 15 * x + 20)\n\nc = f(0)\nprint(c)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "expression = (1990**3 - 1000**3 - 990**3) / (1990 * 1000 * 990)\nprint(expression)"
  },
  {
    "example_id": 150,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "import math\n\ndef f(x, y, z):\n    return x**3 * y + y**3 * z + z**3 * x\n\ndef g(x, y, z):\n    return x + y + z\n\ndef h(x, y, z):\n    return x * y * z\n\nx = -1\ny = 0\nz = 1\n\nmax_val = -math.inf\n\nfor i in range(-100, 100):\n    for j in range(-100, 100):\n        for k in range(-100, 100):\n            if g(i, j, k) == 0:\n                val = f(i, j, k)\n                if val > max_val:\n                    max_val = val\n                    x = i\n                    y = j\n                    z = k\n\nprint(f\"Maximum value of {f(x, y, z)} found at ({x}, {y}, {z})\")"
  },
  {
    "example_id": 151,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "N = 7\nprint(N)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "6.0",
      "4.0",
      "2.0",
      "2.0",
      "6.0",
      "20.0",
      "2.0",
      "2.0",
      "6.0",
      "8.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "from sympy import *\na, b, c = symbols('a b c')\nexpression = (a + b + c) * ((a + b)**2 + (a + b + 4*c)**2)\nexpression = expression.subs(c, 4*c)\nexpression = expression.subs(a + b, 2*a + 2*b)\nexpression = expression.subs(a + 2*b + 4*c, 2*a + 2*b + 4*c)\nexpression = expression.subs(a + 2*b + 2*c, a + b + c)\nexpression = expression.subs(a, a + 2*b + 2*c)\nprint(expression)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "67.0"
    ],
    "solution": "count = 0\nfor n in range(1, 101):\n    if (n * (n + 1)) % 2 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "z = 2j\nw = 5j\nprint(abs(z + w))"
  },
  {
    "example_id": 155,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "209.0"
    ],
    "annotated_answers": [
      "1700.0"
    ],
    "solution": "x = 99\nwhile (x // 19) - (x // 89)!= 9:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, b, c = 1, 2, 3\nA = (b**2 - 4*a*c) / (4*a)\nB = (-b**2 + 4*a*c) / (4*a)\nprint(A + B)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11872.0"
    ],
    "annotated_answers": [
      "1112.0"
    ],
    "solution": "p = lambda x: x**4 + 3 * x**3 - 11 * x**2 + 27 * x + 1\nprint(p(-2) + 7 * p(6))"
  },
  {
    "example_id": 158,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0",
      "13.0",
      "170.0",
      "170.0",
      "1.0",
      "810932305.0",
      "8.0",
      "499769140.0",
      "7.0",
      "134723250.0"
    ],
    "annotated_answers": [
      "850.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nx = Symbol('x')\nroots = solve(x**10 + (13*x - 1)**10, x)\nprint(sum(1/roots[i].conjugate() for i in range(5)))"
  },
  {
    "example_id": 159,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2451.8210855473253"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "sum = 1\nfor i in range(1, 100):\n    sum += i**2 / (2 * i + 1)\nprint(sum)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor a in range(1, 10):\n    for b in range(1, 10):\n        for c in range(1, 10):\n            if 2 * b**4 + a**3 * b**3 + a**2 * b**2 + a * b + 1 == 0:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13535.0"
    ],
    "annotated_answers": [
      "13535.0"
    ],
    "solution": "from math import floor\n\nexpression = floor(((7**0.5 + 5**0.5)**6))\nprint(expression)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1209.0"
    ],
    "solution": "def f(x):\n    if x == 5:\n        return 3\n    if x == 4:\n        return 2\n    if x == 2015:\n        return 1\n    return f(x - 1) + f(x + 1)\nprint(f(2015))"
  },
  {
    "example_id": 163,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nf = x**6 - 4*x**5 + 3*x**3 + x**2 - 1\nf = f.as_numer_denom()[1]\np = Poly(f, x, domain='ZZ')\nprint(p.degree())"
  },
  {
    "example_id": 164,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0",
      "16.0",
      "18.0",
      "39.0",
      "44.0",
      "78.0",
      "99.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "import sympy as sp\n\nz1 = sp.Symbol('z1')\nz2 = sp.Symbol('z2')\nz3 = sp.Symbol('z3')\n\nz = sp.Symbol('z')\n\nexpr = (z3 - z1) / (z2 - z1) * (z - z2) / (z - z3)\n\nexpr = expr.subs({z1: 18 + 83*sp.I, z2: 18 + 39*sp.I, z3: 78 + 99*sp.I})\n\nexpr = expr.subs({z: sp.re(z)})\n\nexpr = expr.subs({z: sp.re(z)})\n\nprint(expr)"
  },
  {
    "example_id": 165,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "92.0"
    ],
    "solution": "import itertools\n\nsum = 0\nfor a, b, c, d in itertools.product(range(0, 5), repeat=4):\n    if d <= c <= b <= a <= 4:\n        p = 4 * (1 + 0j) ** a * (1 + 0j) ** b * (1 + 0j) ** c * (1 + 0j) ** d\n        if p.conjugate() == 0:\n            sum += p.real\nprint(sum)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import *\n\na, b, c, d = symbols('a b c d')\n\nexpression = (a * c + b * d)**2 + (b * c - a * d)**2\n\nprint(expression)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor k in range(1, 101):\n    if k % 2!= 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 168,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nexpression = sympy.log(2, 3) * sympy.log(3, 4) * sympy.log(4, 5) * sympy.log(5, 6) * sympy.log(6, 7) * sympy.log(7, 8)\nprint(expression)"
  },
  {
    "example_id": 169,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2009.0",
      "9002.0",
      "2.0",
      "2009.0",
      "9002.0",
      "2009.0",
      "9002.0",
      "3.0",
      "4036081.0",
      "2009.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\na = sympy.symbols(\"a\")\nb = sympy.symbols(\"b\")\nc = sympy.symbols(\"c\")\nx = sympy.symbols(\"x\")\np = x**3 + a*x**2 + b*x + c\np0 = p.subs([(x, 2009 + 9002*sympy.pi*sympy.I)])\np1 = p.subs([(x, 2009)])\np2 = p.subs([(x, 9002)])\nprint(p0)\nprint(p1)\nprint(p2)\nprint(p0.as_real_imag())\nprint(p1.as_real_imag())\nprint(p2.as_real_imag())"
  },
  {
    "example_id": 170,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "z = 100 + 75j\nprint(abs(z))"
  },
  {
    "example_id": 171,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "from sympy import solve, Symbol\n\nx = Symbol('x', real=True, positive=True)\nroots = solve((1/(x-1) + 1/(x-5) + 1/(x-10) + 1/(x-25) - 2), x)\nprint(sum(roots))"
  },
  {
    "example_id": 172,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sp\nx, y, z = sp.symbols(\"x y z\")\nexpression = sp.Abs(x**2 + y**2 + z**2)\nprint(expression)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 4\nx1, y1 = 0, 0\nx2, y2 = 1, 1\nexpression = (y2 - y1) * (x2 - x1) / (x2 ** 2 - x1 ** 2)\nprint(expression)"
  },
  {
    "example_id": 174,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "384.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "expression = 2009**4 - 4*2007**4 + 6*2005**4 - 4*2003**4 + 2001**4\nprint(expression)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "1000.0"
    ],
    "solution": "count = 0\nfor m in range(1, 1001):\n    for n in range(1, m + 1):\n        if m * n <= m + n:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "560.9999999999999"
    ],
    "annotated_answers": [
      "561.0"
    ],
    "solution": "a = [1, 1]\nb = [1, 3]\nfor i in range(2, 33):\n    a.append(a[i - 1] + a[i - 1]**2 / a[i - 2])\n    b.append(b[i - 1] + b[i - 1]**2 / b[i - 2])\nprint(b[32] / a[32])"
  },
  {
    "example_id": 177,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "from sympy import symbols, solve, diff, Eq, simplify\na, b = symbols('a b')\nx = symbols('x')\neq = x**4 + a * x**3 + 3 * x**2 + b * x + 1\nsol = solve(eq, x)\nprint(simplify(a**2 + b**2))"
  },
  {
    "example_id": 178,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "length = 0\nfor i in range(2009, 2011):\n    length += 1\nprint(length)"
  },
  {
    "example_id": 179,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0",
      "6.0",
      "377.0",
      "5.0",
      "2071.0",
      "4.0",
      "3719.0",
      "3.0",
      "529.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = sympy.expand((1/(7-x)*(1+x)*(1-x) + 3*x**2 - 18*x - 22*(x**2 - 1)*(x - 7) + 3/(x - 2) - 3/(x - 1)*(x - 2)))\nprint(sympy.solve(expression, x))"
  },
  {
    "example_id": 180,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5842405849569903"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import log\nx = log(10, 3) - log(19, 3)\nprint(x)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = (2*x**2 + x + 3) / (x**2 + x + 1) - (2*x + 1) / (x + 1)\nsolution = sympy.solve(expression, x)\nprint(solution)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "expression = log(log(2, x), 2)**2\nprint(expression)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "27.0",
      "2.0",
      "2.0",
      "27.0",
      "2.0",
      "-108.0",
      "6.0",
      "27.0",
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import sympy as sp\n\na, b, c, p, q = sp.symbols('a, b, c, p, q')\n\neq1 = a**3 + p*a**2 + q*a - 19\neq2 = a**3 - a*b**2 + b*c**2 - c\n\nroots1 = sp.solve(eq1, a)\nroots2 = sp.solve(eq2, a)\n\nans = sum(roots1) + sum(roots2)\nprint(ans)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from sympy import sympify\n\na = sympify('2*a + 5')\nb = sympify('2*b + 5')\nc = sympify('2*c + 5')\n\nprint(a**3 + b**3 + c**3)"
  },
  {
    "example_id": 185,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "633.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 2\nexpression = a**6 + 3 * a**5 + (3 * a**2 + 3) * a**4 + (a**3 + 6 * a) * a**3 + (3 * a**2 + 3) * a**2 + 3 * a * a + 1\nprint(expression)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.25"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x1 = (2 + 2**4) / 4\nx2 = 2 * (2 + 2**4) / 4\nx3 = 2 * (2 + 2**4) / 4\nx4 = (2 + 2**4) / 4\nk = x1**2 - x2\nprint(k)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.627416997969522"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "expression = abs((-2 - 2*1j)**3)\nprint(expression)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Compute A, B, C\nA = 6\nB = 12\nC = 3\n\n# Verify A, B, C satisfy the constraints\nassert A * B * C % C == 0\nassert B % C == 0\nassert C % 2 == 1\n\n# Compute A + B + C\nprint(A + B + C)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "from math import prod\nprint(prod([10, 4/3, 6/4, 8/5, 10/6, 12/7, 14/8, 16/9, 18/10]))"
  },
  {
    "example_id": 190,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 2\ny = 3\nz = 4\nprint(x * y + y * z + z * x)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 6**(2/2)\ny = 6**(2/5)\nprint(x)"
  },
  {
    "example_id": 192,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "59.150000000000006"
    ],
    "annotated_answers": [
      "743.0"
    ],
    "solution": "r = 19 / 100\nfloor = 0\nfor i in range(1, 92):\n    floor += r + i / 100\n    if floor >= 546:\n        break\nprint(floor)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "16.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from scipy.optimize import minimize\n\ndef f(x):\n    a, b, c, d = x\n    return (a + b + c + d) * (1 / a + 1 / b + 1 / c + 1 / d)\n\nresult = minimize(f, [1, 1, 1, 1])\nprint(result)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z = 64/5 - 48/5j\nprint(abs(z))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "7.0",
      "1.0",
      "3.0",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from fractions import Fraction\n\nfor x in [Fraction(1, 7), Fraction(1, 3), Fraction(1, 2), Fraction(1, 1)]:\n    if x == Fraction(1, 7) or x == Fraction(1, 3) or x == Fraction(1, 2) or x == Fraction(1, 1):\n        print(x)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17146.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "n = 0\nwhile True:\n    n += 1\n    r = 0.001\n    if (n + r)**3 % 1 == 0:\n        print(n)\n        break"
  },
  {
    "example_id": 197,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "0.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "10.0",
      "2.0"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "import sympy\nr = sympy.symbols('r:99')\nexpression = sum(r**2/(r+1) for r in r)\nprint(expression)"
  },
  {
    "example_id": 198,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def min_value(x, y, z):\n    return 10 * x**2 + 10 * y**2 + z**2\n\n\ndef is_min(x, y, z):\n    return xy + xz + yz == 1\n\n\ndef find_min(x, y, z):\n    return min(x, y, z), min(x, y, z), min(x, y, z)\n\n\ndef main():\n    x, y, z = find_min(1, 1, 1)\n    print(min_value(x, y, z))\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 199,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "def e(x):\n    return x**2\n\n\ndef o(x):\n    return x**2\n\n\ndef f(x):\n    return e(x) + o(x)\n\n\nprint(f(2))"
  },
  {
    "example_id": 200,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "199.0"
    ],
    "solution": "count = 0\nfor x in range(1, 10001):\n    if x**2 + 10000*x <= 10000*x:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def is_root(n):\n    def is_integer_root(n):\n        return n**2 % 2 == 0\n    if is_integer_root(n):\n        return True\n    else:\n        return False\n\ndef count_roots(n):\n    count = 0\n    for i in range(1, n):\n        if is_root(i):\n            count += 1\n    return count\n\nprint(count_roots(42))"
  },
  {
    "example_id": 202,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x1, y1 = 5, 8\nx2, y2 = 7, 14\nslope = (y2 - y1) / (x2 - x1)\nb = y1 - slope * x1\na = slope\nprint(a - b)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.292916592733344"
    ],
    "annotated_answers": [
      "-80.0"
    ],
    "solution": "c = 1 + (-8 + 24**(1/3)) / (24**(1/3) + (-8 + 24**(1/3)))\nprint(c)"
  },
  {
    "example_id": 204,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8080.0"
    ],
    "annotated_answers": [
      "8080.0"
    ],
    "solution": "def func(x, y):\n    return (x + 1/y) * (x + 1/y + 2018) + (y + 1/x) * (y + 1/x + 2018)\n\nx = 1\ny = 1\nwhile func(x, y) > func(x + 1, y) + func(x, y + 1):\n    x += 1\n    y += 1\nprint(func(x, y))"
  },
  {
    "example_id": 205,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.9999999999999996"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 3\nfor i in range(12345):\n    x = (1 + x) / (1 - x)\nprint(x)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "from math import sqrt\n\na, b, c, d = 0, 0, 0, 0\nfor p in range(2, 100):\n    if p**2 % 4 == 0:\n        continue\n    for i in range(2, p//2 + 1):\n        if p % i == 0:\n            continue\n        for j in range(2, p//2 + 1):\n            if p % j == 0:\n                continue\n            for k in range(2, p//2 + 1):\n                if p % k == 0:\n                    continue\n                for l in range(2, p//2 + 1):\n                    if p % l == 0:\n                        continue\n                    if sqrt(b) == int(sqrt(b)):\n                        a, b, c, d = int(sqrt(b)), int(sqrt(b)), int(sqrt(b)), int(sqrt(b))\n                        break\nprint(a + b + c + d)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6309297535714574"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import log\nprint(log(2) / log(3))"
  },
  {
    "example_id": 208,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17958.0"
    ],
    "annotated_answers": [
      "-63.0"
    ],
    "solution": "a = 17955 // 3\nb = a + 1\nc = a + 2\nprint(a + b + c)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.4"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print((9 + 3*6)/5)"
  },
  {
    "example_id": 210,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.166666666666667"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 1\ny = 3\nz = 2\nprint(x + y / z + y / x + z / y)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "h = -3\nk = 3\na = 6\nb = 6\nprint(h + k + a + b)"
  },
  {
    "example_id": 212,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "245.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "c = 10 * 30 - 55\nprint(c)"
  },
  {
    "example_id": 213,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "340.0"
    ],
    "solution": "count = 0\nfor n in range(1, 1000):\n    if (n < 1000) and (n & (n - 1)) == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def sign(x):\n    if x < 0:\n        return -1\n    elif x == 0:\n        return 0\n    else:\n        return 1\n\nsum = 0\nfor n in range(-10, 21):\n    sum += sign(n)\nprint(sum)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import expand, factorial\n\ndef get_coeff(x, n):\n    return expand((x + 3)**n).coeff(x**n)\n\nmax_k = 0\nmax_val = 0\nfor k in range(1, 51):\n    val = get_coeff(3, k)\n    if val > max_val:\n        max_val = val\n        max_k = k\nprint(max_k)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-4.0",
      "41.0",
      "8.0",
      "41.0",
      "2.0",
      "36.0",
      "2.0",
      "4.0",
      "41.0",
      "36.0",
      "41.0",
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x y')\neq1 = x**2 + y**2 + 6*x - 24*y + 72\neq2 = x**2 - y**2 + 6*x + 16*y - 46\nsolution = sympy.solve([eq1, eq2], [x, y])\ndist = 0\nfor point in solution:\n    dist += sympy.sqrt((point[0] + 3)**2 + (point[1] - 2)**2)\nprint(dist)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "36.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1971.0",
      "2.0",
      "27.0",
      "1583.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "from sympy import solve, Symbol\n\nx = Symbol('x', real=True)\nroots = solve(x**3 + 9*x**2 - 9*x - 8, x)\n\nr, s, t = roots\nexpression = (r + s) * (s + t) * (t + r)\nprint(expression)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "k = 100\nQ1 = sympy.Poly(sympy.symbols('x'), [1, k - 29, k])\nQ2 = sympy.Poly(sympy.symbols('x'), [2, 2 * k - 43, k])\nP = Q1 * Q2\nprint(P)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "1.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "n = 2\nexpression = 0 + 1j\nfor i in range(1, n+1):\n    expression += i * (i**2)\nprint(expression)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "a = [1, 4, 15, 2]\nb = [1, 4, 16, 2]\nc = [1, 4, 15, 2]\nc.append(a[-1] + b[-1])\nprint(c[-1])"
  },
  {
    "example_id": 221,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0",
      "2.0",
      "21.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "-5.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nsol = solve(x**6 + x**4 - 115*x**3 + x**2 + 1, x)\nprint(sol)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "401.0"
    ],
    "solution": "def f(x):\n    return 6 * x - 2005\n\nn = 1\nwhile f(n)!= 6 * n - 2005:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 223,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "a, b, c, d = 0.25, 0.25, 0.5, 0.5\nexpression = 1 / a + 1 / b + 4 / c + 16 / d\nprint(expression)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def g(x):\n    return x**2 - 11*x + 30\n\ndef f(x):\n    return x**4 - 14*x**3 + 62*x**2 - 91*x + 42\n\ndef solve(x):\n    y = f(x)\n    return g(y)\n\ndef main():\n    x = 10**100\n    y = solve(x)\n    print(y)\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 225,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def f(x):\n    return 2 * x - 2\nprint(f(12) - f(2))"
  },
  {
    "example_id": 226,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor x in range(1, 100):\n    for y in range(1, 100):\n        fx = lambda x: 2**x\n        fy = lambda y: 2**y\n        fxy = lambda xy: fx(x) * fy(y) - 2\n        if fxy(x * y) == fxy(x) * fxy(y):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 1\nwhile True:\n    degree = 0\n    for i in range(1, n+1):\n        degree += abs(i)\n    if degree % 2 == 0:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 228,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "7.0",
      "4.0",
      "2.0",
      "4.0",
      "3.0",
      "1.0",
      "5.0",
      "7.0",
      "4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import Symbol, solve\n\na, b, c, d, e = [Symbol(f\"x{i}\") for i in range(1, 6)]\n\neq = a**5 + 7*a**4 - 2\neq = eq.subs({a: b, b: c, c: d, d: e, e: a})\n\nsol = solve(eq)\n\nexpression = 0\nfor x in sol:\n    expression += x**3 / (x - a) / (x - b) / (x - c) / (x - d) / (x - e)\nprint(expression)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9331.0"
    ],
    "annotated_answers": [
      "254.0"
    ],
    "solution": "a0, a1, a2, a3, a4, a5 = 1, 1, 1, 1, 1, 1\n\ndef Q(x):\n    return a0 + a1*x + a2*x**2 + a3*x**3 + a4*x**4 + a5*x**5\n\n# a0 + a1*1 + a2*1^2 + a3*1^3 + a4*1^4 + a5*1^5 = 4\n# a0 + a1*5 + a2*5^2 + a3*5^3 + a4*5^4 + a5*5^5 = 152\n\nprint(Q(6))"
  },
  {
    "example_id": 230,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import sqrt, simplify\na = (5 / (sqrt(3) + sqrt(2)))\nb = (1 / (sqrt(3) - sqrt(2)))\nprint(simplify(sqrt(a) + sqrt(b)))"
  },
  {
    "example_id": 231,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "8.0",
      "5.0",
      "6.0",
      "10.0",
      "7.0",
      "4.0",
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "112.0"
    ],
    "solution": "a = [2, 5, 8]\nfor i in range(2, 2023):\n    a.append((4 * a[-1] + 4 * a[-2] + 4 * a[-3]) % 11)\nprint(a)\nprint(a[2018] * a[2020] * a[2022])"
  },
  {
    "example_id": 232,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def f(x):\n    return x**2 + (4 - x**2)\nimport scipy.optimize\nprint(scipy.optimize.minimize(f, 0).x)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = [0, 0, 1, 0]\ng = [1, 1, 1, 1]\na_plus_g = [sum(x) for x in zip(a, g)]\nprint(a_plus_g)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = -3\ny = 5\nprint(x**2 + y**2)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "omega = -1 + 4j\nexpression = abs(omega**2 + 2*omega - 8)\nprint(expression)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "154.0"
    ],
    "solution": "N = 2 ** (1 + (19-1).bit_length() - 1) - 19\nprint(N + 1)"
  },
  {
    "example_id": 237,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import floor\n\ndef area(x, y):\n    if floor(x) * floor(y) == 16:\n        return 1\n    else:\n        return 0\n\nprint(sum(area(x, y) for x in range(1, 101) for y in range(1, 101)))"
  },
  {
    "example_id": 238,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = sp.Symbol('x')\neq1 = (4*x-23)/(x**2+5*x-24)\neq2 = (C/(x-3)+D/(x+8))\nsolution = sp.solve(eq1-eq2, [C, D])\nprint(solution)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.7777777777777857"
    ],
    "annotated_answers": [
      "175.0"
    ],
    "solution": "x = 18 / 6\ny = 32 / 6\nexpression = x**2 + y**2 + 2 * x * y - 14 * x - 14 * y + 49\nprint(expression)"
  },
  {
    "example_id": 240,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2007.0"
    ],
    "solution": "def f(x):\n    if x <= 0.5:\n        return 2 * x\n    else:\n        return 2 - 2 * x\n\ndef f_rec(x, n):\n    if n == 0:\n        return x\n    else:\n        return f_rec(f(x), n - 1)\n\nx = 0.5\nfor i in range(2005):\n    x = f_rec(x, 1)\n\nprint(x)"
  },
  {
    "example_id": 241,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "199.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "count = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        if (a**2 - a * 24) * (b**2 - b * 36) == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 242,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(2, 3, 4)"
  },
  {
    "example_id": 243,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "c = 23\nprint(c)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = -1\nb = -1\nc = 1\nprint(a**4 + b**4 + c**4)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-78740.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    return x**7 + 5*x**3 + 10\n\nprint(f(-5))"
  },
  {
    "example_id": 246,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.9999999999999998"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import sqrt\n\nexpression = abs(-1 + sqrt(3) * 1j)\nprint(expression)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0",
      "12.0",
      "15.0",
      "6.0",
      "18.0",
      "15.0",
      "6.0",
      "6.0",
      "12.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import expand, simplify\nfrom sympy.abc import x\n\nexpression = (x + 1/x)**6 - (x**6 + 1/x**6) - 2\nexpression = expand(expression)\nexpression = simplify(expression)\nexpression = expression.subs(x, x**3)\nprint(expression)"
  },
  {
    "example_id": 248,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import sqrt, Max\n\nf = lambda x, y: x * sqrt(1 - y**2) + y * sqrt(1 - x**2)\n\nprint(Max(f(-1, 1), f(1, -1), f(1, 1), f(-1, -1)))"
  },
  {
    "example_id": 249,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "746.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from sympy import Point, Segment\n\np1 = Point(0, 0)\np2 = Point(50, 22)\n\nsegment = Segment(p1, p2)\n\nprint(segment.length)"
  },
  {
    "example_id": 250,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.1666666666666665"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "slope = (-28 + 3**2) / (3 - 3**2)\nprint(slope)"
  },
  {
    "example_id": 251,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "def f(x):\n    return x * x\n\nprint(f(5))"
  },
  {
    "example_id": 252,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 1\nb = 1\nc = 1\nwhile a * b + b * c + c * a < a * b * c:\n    a += 1\n    b += 1\n    c += 1\nprint(a**2)"
  },
  {
    "example_id": 253,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.141592653589793"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\nprint(pi)"
  },
  {
    "example_id": 254,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "819.0"
    ],
    "solution": "a1 = 0\nfor i in range(19):\n    a1 += 1\n    if i!= 92:\n        a1 -= 1\nprint(a1)"
  },
  {
    "example_id": 255,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor x in range(1, 100):\n    if x**5 == x**4 + 72*x**3:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "a = 32"
  },
  {
    "example_id": 257,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2021.0"
    ],
    "annotated_answers": [
      "504.0"
    ],
    "solution": "a = 2016\nwhile a % 2!= 1 or a % 3!= 2:\n    a += 1\nprint(a)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from math import sqrt\n\ndef upperparab(x):\n    return sqrt(8 * x)\n\ndef lowerparab(x):\n    return -sqrt(8 * x)\n\nA = (-1, 1)\nB = (2, 4)\nC = (-1, -1)\nD = (2, -4)\n\narea = (A[0] - C[0]) * (B[1] - C[1]) + (B[0] - C[0]) * (D[1] - C[1])\nprint(area)"
  },
  {
    "example_id": 259,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\na = 0.5\nb = 0.5\nprint(math.sqrt(a + b) / (a * b + 1))"
  },
  {
    "example_id": 260,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "324.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "count = 0\nfor x in range(1, 20):\n    for y in range(1, 20):\n        z = 19 - x - y\n        if (x!= y) and (x!= z) and (y!= z):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 261,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "128.0",
      "-2.7369518454533694",
      "-0.0",
      "128.0",
      "-0.23125660038568163",
      "2.5813483772881365",
      "128.0",
      "-0.23125660038568163",
      "-2.5813483772881365",
      "128.0",
      "2.1744489997468897",
      "0.0",
      "128.0",
      "0.02501604647784301",
      "0.0",
      "-1.0000000000000002",
      "0.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "# https://en.wikipedia.org/wiki/Quintic_function\n# https://en.wikipedia.org/wiki/Geometric_progression\n# https://en.wikipedia.org/wiki/Finite_difference\n\nimport numpy as np\n\nP, Q, R, S = 1, 1, 1, 1\n\nx = np.roots([1, -40, P, Q, R, S])\n\n# x = [ 1.00000000e+00-5.00000000e-01j  1.00000000e+00+5.00000000e-01j -1.00000000e+00+0.00000000e+00j -1.00000000e+00-0.00000000e+00j  1.00000000e+00+0.00000000e+00j ]\n\nx = np.sort(x)\n\n# x = [ 1.00000000e+00-5.00000000e-01j -1.00000000e+00-0.00000000e+00j -1.00000000e+00+0.00000000e+00j  1.00000000e+00+0.00000000e+00j  1.00000000e+00+5.00000000e-01j ]\n\nr = [1.0 / x[i] for i in range(5)]\n\n# r = [ 1.00000000e+00  2.00000000e+00  4.00000000e+00  8.00000000e+00  1.00000000e+01 ]\n\nprint(r)\n\nprint(sum(r))"
  },
  {
    "example_id": 262,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "143.0"
    ],
    "annotated_answers": [
      "913.0"
    ],
    "solution": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nfib_sum = 0\nfor i in range(1, 11):\n    fib_sum += fib(i)\nprint(fib_sum)"
  },
  {
    "example_id": 263,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 1\nb = 3\nc = 2\nprint(a/b + b/a + a/c + c/a + b/c + c/b)"
  },
  {
    "example_id": 264,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "n = 0\nwhile True:\n    m = n + 1\n    sum_odd = sum(range(1, m + 1, 2))\n    sum_even = sum(range(1, n + 1, 2))\n    if sum_odd == 212 + sum_even:\n        n += 1\n    else:\n        break\nprint(n)"
  },
  {
    "example_id": 265,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def f(x):\n    return max([abs(x + 15), abs(x + 12), abs(x + 8), abs(x - 1), abs(x - 3), abs(x - 19)])\nprint(min(f(x) for x in range(-1000, 1000)))"
  },
  {
    "example_id": 266,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "-256.0"
    ],
    "solution": "import math\na = 2**5 - 4\nprint(a)"
  },
  {
    "example_id": 267,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0",
      "7.0",
      "6.0",
      "5.0",
      "7.0",
      "7.0",
      "5.0",
      "6.0",
      "7.0",
      "6.0",
      "5.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "from sympy import sqrt\nexpression = (sqrt(5) + sqrt(6) + sqrt(7)) * (sqrt(5) - sqrt(6) + sqrt(7)) * (sqrt(5) + sqrt(6) - sqrt(7)) * (sqrt(5) - sqrt(6) - sqrt(7))\nprint(expression)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.717948717948718"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "w1 = 32 + 170j\nw2 = -7 + 64j\nw3 = -9 + 200j\nw4 = 1 + 27j\nw5 = -14 + 43j\n\n# find z1, z2, z3, z4, z5 such that\n# sum(z_k - w_k) = 0\n\n# find z1\nz1 = w1 - (w1 - w2) - (w1 - w3) - (w1 - w4) - (w1 - w5)\n\n# find z2\nz2 = w2 - (w1 - w2) - (w2 - w3) - (w2 - w4) - (w2 - w5)\n\n# find z3\nz3 = w3 - (w1 - w3) - (w2 - w3) - (w3 - w4) - (w3 - w5)\n\n# find z4\nz4 = w4 - (w1 - w4) - (w2 - w4) - (w3 - w4) - (w4 - w5)\n\n# find z5\nz5 = w5 - (w1 - w5) - (w2 - w5) - (w3 - w5) - (w4 - w5)\n\n# find slope of mean line\nslope = (z1 - z2).imag / (z1 - z2).real\nprint(slope)"
  },
  {
    "example_id": 269,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def get_degree(a, b, c):\n    return max(len(str(a)), len(str(b)), len(str(c)))"
  },
  {
    "example_id": 270,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "990.0"
    ],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "import math\n\na = 0\nb = 0\nfor i in range(1, 1001):\n    a += math.ceil(math.log2(i))\n    b += math.floor(math.log2(i))\nprint(a - b)"
  },
  {
    "example_id": 271,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9801.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor a in range(1, 100):\n    for b in range(1, 100):\n        if a * b**2 + b * a**2 >= 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 272,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.683219498733718"
    ],
    "annotated_answers": [
      "3980025.0"
    ],
    "solution": "from math import log, sqrt\nx = sqrt(1995)\nexpression = x**log(x, 1995)\nprint(expression)"
  },
  {
    "example_id": 273,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\ny = (27*x**2+9*x+3)/(27*x**3+9*x**2+3*x+1)\nsolve(y.as_numer_denom()[1], x)"
  },
  {
    "example_id": 274,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "898.0"
    ],
    "solution": "x = [211, 375, 420, 523]\nfor i in range(5, 531):\n    x.append(x[-1] - x[-2] + x[-3] - x[-4])\nprint(sum(x[531:]))"
  },
  {
    "example_id": 275,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        if a/a + b/b == 2/17:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 276,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy as sy\nfrom sympy import solve\n\nx = sy.Symbol('x')\nexpression = x**4 - 2 * x**2 - 7\nprint(len(solve(expression, x)))"
  },
  {
    "example_id": 277,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 21 - 20j\nb = 29\nprint(abs(a))"
  },
  {
    "example_id": 278,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "327680.0"
    ],
    "annotated_answers": [
      "327680.0"
    ],
    "solution": "def a_n(n):\n    return 4 * n**3 + 6 * n**2 + 4 * n + 1\n\nsum = 0\nfor n in range(8, 24):\n    sum += a_n(n)\nprint(sum)"
  },
  {
    "example_id": 279,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import solve, Symbol\n\na = Symbol('a', real=True)\nx = Symbol('x')\n\nroots = solve(x**3 + a * x**2 + a * x + 1, x)\n\nmin_a = 0\nfor root in roots:\n    if root.is_real:\n        min_a = max(min_a, abs(root))\n\nprint(min_a)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7860229394.073187"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "a = 27\nb = 99\nratio = b / a\nfor i in range(1, 16):\n    if a == b:\n        break\n    a = a * ratio\n    b = b * ratio\na_9 = a\nprint(a_9)"
  },
  {
    "example_id": 281,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "8.0",
      "6.0",
      "4.0",
      "2.0",
      "1.0",
      "100.0",
      "8.0",
      "6.0",
      "4.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nprint(x**100)\nprint(x**8 - x**6 + x**4 - x**2 + 1)\nprint(x**100 % (x**8 - x**6 + x**4 - x**2 + 1))"
  },
  {
    "example_id": 282,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "1.0",
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 5\nb = 2\nc = 11\nd = 3\ne = 1\nf = 2\ng = 1\nh = 3\ni = 1\nj = 5\nk = 2\nl = 11\nm = 3\nn = 5\no = 2\np = 1\nq = 3\nr = 1\ns = 11\nt = 3\nu = 5\nv = 2\nw = 1\nx = 3\ny = 1\nz = 5\nprint((x, y, z))"
  },
  {
    "example_id": 283,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = sympy.cos(x)**3 + sympy.cos(x)**2\nprint(expression)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000000000000.0",
      "1",
      "20",
      "1",
      "28",
      "100000000.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "log12_162 = 4\nlog12_1250 = 8\ndiff = 8\nlog12_x = log12_162 + diff\nlog12_y = log12_162 + 2 * diff\nlog12_z = log12_162 + 3 * diff\nprint(10**log12_x)\nprint(10**log12_y)\nprint(10**log12_z)\nprint(10**log12_1250)"
  },
  {
    "example_id": 285,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import sqrt\n\nx = sqrt(0.5)\ny = sqrt(0.5)\n\nprint((x + y)**2)"
  },
  {
    "example_id": 286,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "7.0",
      "2.0",
      "2.0",
      "1.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import symbols\n\nz1, z2 = symbols('z1 z2')\nexpression = abs((2*z1 + 7*z2)/(2*z1 - 7*z2))\nprint(expression)"
  },
  {
    "example_id": 287,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor i in range(0, 100):\n    for j in range(0, 100):\n        if i**2 == j * (-j):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 288,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "def f(x):\n    return x * (x + 2)\n\nprint(f(8))"
  },
  {
    "example_id": 289,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "135.0",
      "2.0",
      "27.0",
      "29.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nexpression = x**3 + 3*x + 5\nprint(solve(expression, x))"
  },
  {
    "example_id": 290,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a = 7j\nb = 4j\nprint(abs(a*b))"
  },
  {
    "example_id": 291,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0",
      "10.0",
      "20.0",
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import scipy.optimize as opt\n\ndef f(x):\n    return (x + 5) * (x + 2) / (x + 1)\n\nprint(opt.fmin(f, 1))"
  },
  {
    "example_id": 292,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y = 2, 3\nd = (x * y - x - y) / (x - y)\nprint(d)"
  },
  {
    "example_id": 293,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.998999899989585",
      "-5.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "sum = 0\nfor k in range(2, 10000):\n    sum += (k - 3) / (k * (k**2 - 1))\nprint(sum)"
  },
  {
    "example_id": 294,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def compute_coeff(polynomial):\n    coeff = []\n    for i in range(len(polynomial)):\n        coeff.append(polynomial[i])\n    return coeff\n\ndef sum_coeff(polynomial):\n    coeff = compute_coeff(polynomial)\n    return sum(coeff)\n\ndef main():\n    polynomial = [1, 23, 17, -18, -24, 108]\n    print(sum_coeff(polynomial))\n\nmain()"
  },
  {
    "example_id": 295,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "77.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor a_2 in range(-10, 11):\n    for a_1 in range(-10, 11):\n        if a_1 % 2 == 0:\n            if a_2 % 2 == 0:\n                if a_2 == 0:\n                    count += 1\n                else:\n                    if a_2 % 4 == 2:\n                        count += 1\n            else:\n                if a_2 % 4 == 2:\n                    count += 1\nprint(count)"
  },
  {
    "example_id": 296,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        if (a**2 - 2)**2 - 4 * b == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 297,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "208340833400000.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import gcd\ndef f(n):\n    return (n+1)//gcd(n, n+2) * (n+2)//gcd(n, n+2)\ndef fsum(n):\n    return sum(f(i) for i in range(n))\nprint(fsum(100000))"
  },
  {
    "example_id": 298,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "440.0"
    ],
    "solution": "a = 23\nc1 = -223\nc2 = 223\nprint(c1 + c2)"
  },
  {
    "example_id": 299,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "from sympy import *\nr, s, t = symbols('r, s, t')\nexpression = r**2 * s**2 + s**2 * t**2 + t**2 * r**2\nprint(expression)"
  },
  {
    "example_id": 300,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import sqrt\nx = 5 + sqrt(3)\nprint(x * x.conjugate())"
  },
  {
    "example_id": 301,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.43999999999999995"
    ],
    "annotated_answers": [
      "0.61"
    ],
    "solution": "a = [2.56, 2.61, 2.65, 2.71, 2.79, 2.82, 2.86]\nA = [int(round(a[i])) for i in range(len(a))]\nprint(max([abs(A[i] - a[i]) for i in range(len(a))]))"
  },
  {
    "example_id": 302,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "from sympy import *\n\nx, y = symbols('x y')\nd = 2 * (x**2 + y**2) - 1\n\nprint(d)"
  },
  {
    "example_id": 303,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "662.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "a1 = 1\na2 = 1 + 9\na3 = a2 + 9\na4 = a3 + 9\na5 = a4 + 576\nprint(a1 + a2 + a3 + a4 + a5)"
  },
  {
    "example_id": 304,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0",
      "8.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\ny1 = sympy.Abs(x - 1) + sympy.Abs(x - 3)\ny2 = 8\narea = sympy.integrate(sympy.Abs(y1 - y2), (x, -sympy.oo, sympy.oo))\nprint(area)"
  },
  {
    "example_id": 305,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-26.0"
    ],
    "solution": "import sympy\n\nz = sympy.Symbol('z')\nz = sympy.I**(1/3)/2 + sympy.I**(2/3)/2\n\nf = sympy.Poly(x**3 - 3*x**2 - 4*x + 4, x)\n\nr1, r2, r3 = f.roots()\ns1 = r1 + r2*z + r3*z**2\ns2 = r1*z + r2*z**2 + r3\ns3 = r1*z**2 + r2 + r3*z\n\ng = sympy.Poly(s1**3 + s2**2 + s3, x)\n\nprint(g.coeffs()[0].real)"
  },
  {
    "example_id": 306,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = 5\ny = 2\nprint(x * y)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-54.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "t = -27\nx = 3\nexpression = x**3 - 3*x**2 + t*x + 27\nprint(expression)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import solve, symbols\nx = symbols('x')\nroots = solve(x**4 - 80*x - 36, x)\nprint(sum(roots))"
  },
  {
    "example_id": 309,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 0\nb = 0\nc = 1\nd = 0\nprint(a + 2*b + 3*c + 4*d)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, sqrt, Rational\n\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\n\nlambda_ = sqrt(5)/2\n\nprint(lambda_)"
  },
  {
    "example_id": 311,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 1\nb = 0.5\nexpression = a + 1 / (b * (a - b))\nprint(expression)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1810.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "volume = 10*13*14 - 10\nprint(volume)"
  },
  {
    "example_id": 313,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.083357585591887"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\nx, y, z = math.cos(math.pi / 6), math.cos(math.pi / 3), math.cos(math.pi / 4)\nprint(3 * x + 4 * y + 12 * z)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.01",
      "0.01",
      "0.01",
      "0.01",
      "0.01",
      "0.01",
      "0.01",
      "0.01",
      "0.01",
      "0.01"
    ],
    "annotated_answers": [
      "134.0"
    ],
    "solution": "# This problem can be solved by linear programming.\n# If x_i is the number of votes for candidate i, then\n# the constraints are:\n# x_i / 100 <= (x_j / 100) - 1 for i!= j\n# and the objective function is to minimize the sum of x_i.\n\nfrom scipy.optimize import linprog\nimport numpy as np\n\ncandidates = np.arange(27) + 1\n\n# The objective function is the sum of x_i.\n# The constraints are that x_i / 100 <= (x_j / 100) - 1 for i!= j.\n# The bounds are [0, 100] for each x_i.\nA = np.eye(27)\nb = np.ones(27) / 100\nbounds = [(0, 100)] * 27\n\nres = linprog(candidates, A_eq=A, b_eq=b, bounds=bounds)\nprint(res.x)"
  },
  {
    "example_id": 315,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "672.0"
    ],
    "annotated_answers": [
      "224.0"
    ],
    "solution": "a = 3\nfor i in range(2006, 2007):\n    a = (a**2 + 2007) // a\nprint(a)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "import math\n\nprint(abs(9j - 12) * abs(3 + 4j))"
  },
  {
    "example_id": 317,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.333333333333336"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = 1\nc = 1\nexpression = (2*a + 1/3*b)**2 + (2*b + 1/3*c)**2 + (2*c + 1/3*a)**2\nprint(expression)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7976.0"
    ],
    "annotated_answers": [
      "997.0"
    ],
    "solution": "from math import sqrt\nfrom math import acos\nfrom math import pi\n\ndef distance(x1, y1, x2, y2):\n    return sqrt((x1 - x2)**2 + (y1 - y2)**2)\n\ndef angle(x1, y1, x2, y2):\n    return acos((x2 - x1) / distance(x1, y1, x2, y2))\n\ndef find_tangent(circle_radius, center_x, center_y, point_x, point_y):\n    distance_from_center = distance(center_x, center_y, point_x, point_y)\n    if distance_from_center <= circle_radius:\n        return (point_x, point_y)\n    else:\n        angle_from_center = angle(center_x, center_y, point_x, point_y)\n        tangent_x = point_x + circle_radius * cos(angle_from_center)\n        tangent_y = point_y + circle_radius * sin(angle_from_center)\n        return (tangent_x, tangent_y)\n\ndef main():\n    circle_radius = 1994\n    center_x = 2 * circle_radius\n    center_y = 2 * circle_radius\n    point_x = 2 * circle_radius\n    point_y = 2 * circle_radius\n    tangent_x, tangent_y = find_tangent(circle_radius, center_x, center_y, point_x, point_y)\n    print(tangent_x + tangent_y)\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 319,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a = -1\nb = 1\nc = 2\nprint(a + b + c)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import Poly, Symbol\n\nx = Symbol(\"x\")\nq = Poly(2*x**7 - 5*x**4 + 3*x**3 - x + 5, x)\nprint(q.degree())"
  },
  {
    "example_id": 321,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "626.0000000000002"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a = 1\nb = 5**(1/2)\nexpression = a**4 + b**8\nprint(expression)"
  },
  {
    "example_id": 322,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0000000000000002"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "z = 1 - 5j\nprint(abs(z**5) / (abs(z)**5))"
  },
  {
    "example_id": 323,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 379\nwhile x > 1:\n    if x * (x + 1) * (x + 2) * (x + 3) + 1 == 379**2:\n        break\n    x -= 1\nprint(x)"
  },
  {
    "example_id": 324,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "3.0",
      "5.0",
      "6.0",
      "2.0",
      "6.0",
      "3.0",
      "5.0",
      "7.0",
      "2.0",
      "5.0",
      "3.0",
      "6.0",
      "7.0",
      "2.0",
      "3.0",
      "5.0",
      "6.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "import sympy\nexpression = (sympy.sqrt(3) + sympy.sqrt(5) + sympy.sqrt(6) + sympy.sqrt(7))**2 + (sympy.sqrt(3) - sympy.sqrt(5) + sympy.sqrt(6) + sympy.sqrt(7))**2 + (sympy.sqrt(3) + sympy.sqrt(5) - sympy.sqrt(6) + sympy.sqrt(7))**2 + (sympy.sqrt(3) + sympy.sqrt(5) + sympy.sqrt(6) - sympy.sqrt(7))**2\nprint(expression)"
  },
  {
    "example_id": 325,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0",
      "3.0",
      "5.0",
      "5.0",
      "3.0",
      "10.0",
      "2.0",
      "4.0",
      "2.0",
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x', real=True)\nexpression = (x - 1)**7 + 3 * (x - 1)**6 + (x - 1)**5 + 1\nsol = solve(expression - x**5, x)\nprint(min(sol))"
  },
  {
    "example_id": 326,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "x = 12\ny = 6\nz = 8\nprint(x + y + z)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "999.0",
      "-2.0",
      "1.0",
      "998.0",
      "-2.0",
      "1.0",
      "997.0",
      "-2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-338016.0"
    ],
    "solution": "import sympy as sp\n\nexpression = 0\nfor i in range(1, 2016 + 1):\n    expression += 1 / (1 - sp.symbols(f'x_{i}'))**2\nprint(expression)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\n\nF1, F2 = sympy.symbols('F1, F2')\nx = sympy.symbols('x')\nk = (F1 - F2) / (F1**2 - F2**2)\nprint(k)"
  },
  {
    "example_id": 329,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1003.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(n):\n    return n // 2\n\nprint(f(2007))"
  },
  {
    "example_id": 330,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = sympy.log(2, (2*x + 8)/(x + 2)) + sympy.log(2, (x + 2)/(x - 5))\nsolution = sympy.solve(expression - 3)\nprint(solution)"
  },
  {
    "example_id": 331,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "expression = abs((1-1j)**8)\nprint(expression)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\n\na = sympy.Symbol('a')\nb = sympy.Symbol('b')\nexpression = sympy.Eq(a**3 - b**3, a - b)\nsolutions = sympy.solve(expression, a)\nprint(solutions)"
  },
  {
    "example_id": 333,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1500001.0"
    ],
    "annotated_answers": [
      "996506.0"
    ],
    "solution": "count = 0\ncurrent = 1\nwhile count < 500000:\n    current += 3\n    count += 1\nprint(current)"
  },
  {
    "example_id": 334,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "9.0",
      "6.0",
      "3.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import *\n\nx = Symbol('x')\nexpression = (x**9 - x**6 + x**3 - 1) % (x**2 + x + 1)\nprint(expression)"
  },
  {
    "example_id": 335,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import *\na = sympify(\"(sqrt(25) - 5)/2\")\nprint(a)"
  },
  {
    "example_id": 336,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-26.0",
      "0.0",
      "2.0",
      "-66.0",
      "0.0",
      "40.0",
      "2.0",
      "-26.0",
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import numpy as np\nimport sympy as sym\n\nc1 = sym.Circle(sym.Point(10, 0), 36)\nc2 = sym.Circle(sym.Point(15, 0), 81)\n\np = sym.Point(10, 0)\nq = sym.Point(-15, 0)\n\nl = sym.Line(p, q)\n\nfor p in c1.intersection(l):\n    for q in c2.intersection(l):\n        print(p, q)\n        print(p.distance(q))"
  },
  {
    "example_id": 337,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "2.0",
      "2.0",
      "8.0",
      "3.0",
      "9.0",
      "2.0",
      "4.0",
      "2.0",
      "40.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x, y')\na, b = sympy.symbols('a, b')\nh, k = sympy.symbols('h, k')\n\neq = 9*x**2 + 4*y**2 - 54*x + 40*y + 145\n\neq2 = (x - h)**2/a**2 + (y - k)**2/b**2 - 1\n\neq_solve = sympy.solve([eq, eq2], [x, y, h, k, a, b])\n\nprint(eq_solve)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "448987642706.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = [1, 1, 0]\nfor n in range(2, 100):\n    a.append(a[n-2] - 2 * a[n-1] + a[n])\nprint(sum(a))"
  },
  {
    "example_id": 339,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import I\ncount = 0\nfor z1 in range(-100, 100):\n    for z2 in range(-100, 100):\n        if z1 * z2 == I * z1 / z2 == I:\n            if abs(z1) == abs(z2) == 1:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.9588279448054093"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import log\nprint(log(log(log(256, 64), 256)))"
  },
  {
    "example_id": 341,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "10.0",
      "3.0",
      "25.0",
      "2.0",
      "36.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import Symbol, expand\n\nr = Symbol('r')\nexpression = (r - 1) * (r + 2) * (r + 6) * (r + 3)\nprint(expand(expression))"
  },
  {
    "example_id": 342,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def factor(x):\n    factors = []\n    for i in range(1, int(x**0.5) + 1):\n        if x % i == 0:\n            factors.append(i)\n    return factors\n\ndef factorize(x):\n    factors = factor(x)\n    if len(factors) == 1:\n        return [x]\n    else:\n        return [factors[0]] + factorize(x//factors[0])\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef gcds(numbers):\n    return functools.reduce(gcd, numbers)\n\ndef lcms(numbers):\n    return functools.reduce(lcm, numbers)\n\ndef x12_minus_1(x):\n    factors = factorize(x**12 - 1)\n    return lcms(map(len, factors))\n\nprint(x12_minus_1(1))"
  },
  {
    "example_id": 343,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import math\na = 3\nb = 4\nh = 1\nk = 2\nexpression = a + k\nprint(expression)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import numpy as np\nx = np.arange(-10, 11)\ny = np.arange(-10, 11)\nz = np.arange(-10, 11)\nexpression = 2*x**2 + 5*y**2 + 2*z**2 + 4*x*y - 4*y*z - 2*z - 2*x\nmin_value = np.amin(expression)\nprint(min_value)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "print(abs(5-12j))"
  },
  {
    "example_id": 346,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.316375287739983",
      "200"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "def p(x):\n    return x**100 + x**99 + x**98 + x**97 + x**96 + x**95 + x**94 + x**93 + x**92 + x**91 + x**90 + x**89 + x**88 + x**87 + x**86 + x**85 + x**84 + x**83 + x**82 + x**81 + x**80 + x**79 + x**78 + x**77 + x**76 + x**75 + x**74 + x**73 + x**72 + x**71 + x**70 + x**69 + x**68 + x**67 + x**66 + x**65 + x**64 + x**63 + x**62 + x**61 + x**60 + x**59 + x**58 + x**57 + x**56 + x**55 + x**54 + x**53 + x**52 + x**51 + x**50 + x**49 + x**48 + x**47 + x**46 + x**45 + x**44 + x**43 + x**42 + x**41 + x**40 + x**39 + x**38 + x**37 + x**36 + x**35 + x**34 + x**33 + x**32 + x**31 + x**30 + x**29 + x**28 + x**27 + x**26 + x**25 + x**24 + x**23 + x**22 + x**21 + x**20 + x**19 + x**18 + x**17 + x**16 + x**15 + x**14 + x**13 + x**12 + x**11 + x**10 + x**9 + x**8 + x**7 + x**6 + x**5 + x**4 + x**3 + x**2 + x**1 + x\n\nprint(p(102))"
  },
  {
    "example_id": 347,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nx = Symbol('x')\np = Symbol('p')\n\npolynomial = p + p**2 - 6 * x\nsolution = solve(polynomial, p)\nprint(sum(solution))"
  },
  {
    "example_id": 348,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-46.0"
    ],
    "solution": "import sympy as sy\n\nf = sy.symbols('f', real=False)\na = sy.symbols('a', real=False)\nb = sy.symbols('b', real=False)\nx = sy.symbols('x')\n\nf_exp = x**4 - 6*x**3 + 26*x**2 + p*x + 65\nroots = sy.roots(f_exp)\n\nfor i in range(4):\n    real_part = sy.re(roots[i])\n    imag_part = sy.im(roots[i])\n    a_k = real_part\n    b_k = imag_part\n\np_value = a_k**2 * b_k + b_k**2 * a_k + a_k**2 * c_k + b_k**2 * c_k + c_k**2 * a_k + c_k**2 * b_k\nprint(p_value)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1080.0"
    ],
    "annotated_answers": [
      "973.0"
    ],
    "solution": "n = 0\nwhile True:\n    n += 1\n    a = n * (n + 1) // 2\n    if a < 1000:\n        continue\n    else:\n        break\nprint(n + a)"
  },
  {
    "example_id": 350,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import math\ndef f(x):\n    return x**2 + 6*x + 1\ndef g(x):\n    return -f(x)\nR = set()\nfor x in range(-100, 101):\n    for y in range(-100, 101):\n        if f(x) + f(y) <= 0 and f(x) - f(y) <= 0:\n            R.add((x, y))\narea = 0\nfor (x1, y1), (x2, y2) in zip(R, R):\n    area += math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\nprint(int(round(area)))"
  },
  {
    "example_id": 351,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "11.0",
      "4.0",
      "2.0",
      "3.0",
      "11.0",
      "4.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\n\nK = Symbol('K')\nL = Symbol('L')\nM = Symbol('M')\n\ndef find_min_sum(K, L, M):\n    x = Symbol('x')\n    sol = solve((x**4 - K*x**3 + K*x**2 + L*x + M), x)\n    a, b, c, d = sol\n    return a**2 + b**2 + c**2 + d**2\n\nprint(find_min_sum(1, 1, 1))"
  },
  {
    "example_id": 352,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4036.0"
    ],
    "solution": "n = 1\nwhile True:\n    sum_of_squares = 0\n    for k in range(1, n+1):\n        sum_of_squares += (k / n) ** 2\n    if sum_of_squares >= 1:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 353,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-263.0"
    ],
    "annotated_answers": [
      "-588.0"
    ],
    "solution": "coefficient = 0\nfor i in range(1, 16):\n    coefficient += (-1)**i * (i + 1) * (i + 15)\nprint(coefficient)"
  },
  {
    "example_id": 354,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "19941989.0"
    ],
    "solution": "n = 19941994\nexpression = int(sqrt(n**2 - 10 * n + 29))\nprint(expression)"
  },
  {
    "example_id": 355,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    for y in range(1, 51):\n        if x**2 + 2*y**2 + 0.5 <= x*(2*y + 1):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def p(x):\n    if x == 55:\n        return 8\n    elif x == 83:\n        return 8\n    elif x == 204:\n        return 8\n    elif x == 232:\n        return 8\n    elif x == 103:\n        return 13\n    else:\n        return 0\n\nsum = 0\nfor i in range(1, 287):\n    sum += p(i)\nprint(sum)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-150.0"
    ],
    "annotated_answers": [
      "-150.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 101):\n    sum += (-1)**(i+1) * (3*i + 2)\nprint(sum)"
  },
  {
    "example_id": 358,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nz = Symbol('z', complex=True)\nsol = solve(z**3 + z**2 - z**2 + 2*z, z)\nprint(sum(sol))"
  },
  {
    "example_id": 359,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "p, q = 0, 0\nfor k in range(2, 100):\n    p, q = p + q, p\nprint(p*q)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.333333333333334"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 8\nb = 2\nexpression = (a**2 + b**2) / (a - b)\nprint(expression)"
  },
  {
    "example_id": 361,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "4.0",
      "84.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import sympy as sp\nx, y, z, w = sp.symbols('x y z w')\nexpression = sp.expand(sp.expand((x**2/sp.Pow(2, 2) - 1) + (y**2/sp.Pow(2, 2) - sp.Pow(3, 2)) + (z**2/sp.Pow(2, 2) - sp.Pow(5, 2)) + (w**2/sp.Pow(2, 2) - sp.Pow(7, 2))))\nprint(expression)"
  },
  {
    "example_id": 362,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "expression = 8 * sympy.symbols('x')**3 - 27\nfactorized = sympy.factor(expression)\nprint(factorized)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.286236849565615",
      "16"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 1\nb = 1\nfor n in range(123456789):\n    a, b = b, a + 3 * n**2 + 9 * n + 7\nprint(b - a)"
  },
  {
    "example_id": 364,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import fabs\n\n\ndef solve_equation(x):\n    return fabs(x) * fabs(x - 5) - 3\n\n\ndef find_solutions(x):\n    return [x for x in range(1000) if solve_equation(x) == 0]\n\n\ndef sum_solutions(solutions):\n    return sum(solutions)\n\n\nprint(sum_solutions(find_solutions(1)))"
  },
  {
    "example_id": 365,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "14.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "14.0",
      "5.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import Symbol, solve, Eq, pprint\nx = Symbol('x')\nsolutions = solve(Eq(5*x**4 - 10*x**3 + 10*x**2 - 5*x - 11, 0), x)\npprint(solutions)"
  },
  {
    "example_id": 366,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.155443620884047",
      "69"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "a_n = 14\nfor i in range(2, 100):\n    a_n = 24 - 5 * a_n\nprint(a_n)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "n = int(144 / (96 - 3 * 144))\nprint(n)"
  },
  {
    "example_id": 368,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "226.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "def polynomial(x):\n    return x**2 - 2*x + 2\n\ndef quadratic(x):\n    return 2*x**2 - 4*x + 3\n\ndef check(P):\n    return P(11) == 181 and polynomial(11) <= P(11) <= quadratic(11) and polynomial(16) <= P(16) <= quadratic(16)\n\ndef find(P):\n    return P(16)\n\nP = lambda x: x**2 - 2*x + 2\nprint(check(P))\nprint(find(P))"
  },
  {
    "example_id": 369,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = 5\nb = 8\nc = 2\nd = 4\ne = 7\n\nfor x in range(1, 100):\n    if (x + 2)**4 == a + b/(x + 2) + c/((x + 2)**2) + d/((x + 2)**3) + e/((x + 2)**4):\n        print(a + b + c + d + e)"
  },
  {
    "example_id": 370,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0",
      "-9.0",
      "-8.0",
      "-7.0",
      "-6.0",
      "-5.0",
      "-4.0",
      "-3.0",
      "-2.0",
      "-1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def f(x):\n    return -x**4 + 2*x\n\nfor x in range(-10, 10):\n    if x!= 0:\n        if f(x) + f(1 - x)!= -x**2 + 2:\n            print(x)\n\nalpha = 1 - 1j\nbeta = 1 + 1j\nprint(alpha**2 + beta**2)"
  },
  {
    "example_id": 371,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = -1\nb = 1\nc = 1\nprint((a * b - c) * (a * c - b) * (b * c - a))"
  },
  {
    "example_id": 372,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "576.0"
    ],
    "solution": "x = 8**2\nwhile True:\n    x_new = (x + 1) / (1 + x**0.5)\n    if x_new == x:\n        break\n    x = x_new\nprint(x)"
  },
  {
    "example_id": 373,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "# The value is a/b/c\n# a = 3, b = 12, c = 15\n# a/b/c = 3/12/15 = 1/4\nprint(3 + 12 + 15)"
  },
  {
    "example_id": 374,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3968.0"
    ],
    "annotated_answers": [
      "3968.0"
    ],
    "solution": "def f(x):\n    if x**0.5 % 1 == 0:\n        return x**0.5\n    else:\n        return (f(x-1))**2 - 1\n\nprint(f(8))"
  },
  {
    "example_id": 375,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0",
      "-11.0",
      "8.0",
      "2327.0",
      "8.0",
      "-11.0",
      "8.0",
      "2327.0",
      "8.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\nfrom sympy import solve\n\nx = sympy.Symbol('x')\nexpression = 4 * x**3 - 41 * x**2 + 10 * x - 1989\nprint(solve(expression, x))"
  },
  {
    "example_id": 376,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "181.0"
    ],
    "solution": "a = [1, 1, 1]\nfor n in range(3, 1332):\n    a.append(2 * a[-1] - 2 * a[-2] + a[-3])\nprint(a[1331])"
  },
  {
    "example_id": 377,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.009802960494069233"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = [1.0/101 for i in range(101)]\nprint(sum(x[i] * x[i+1] for i in range(100)))"
  },
  {
    "example_id": 378,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor n in range(1, 1000):\n    if 3 * n**3 - 12 * n == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 379,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "242.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "z = 9 + 1j\nz2 = z**2\nz3 = z**3\nprint(z2.imag, z3.imag)"
  },
  {
    "example_id": 380,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z1 = 1\nz2 = 2\nz3 = 3\nexpression = abs(9*z1*z2 + 4*z1*z3 + z2*z3)\nprint(expression)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import math\n\n\ndef f(x):\n    return 2 * math.log10(x) - math.log10(1/100)/x\n\n\nmin_x = 0\nmin_y = float('inf')\nfor x in range(2, 100):\n    y = f(x)\n    if y < min_y:\n        min_x = x\n        min_y = y\nprint(min_x)"
  },
  {
    "example_id": 382,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import *\nx = Symbol(\"x\")\nexpression = (x + 1)**4\nprint(expression.subs(x, -1))"
  },
  {
    "example_id": 383,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol, solve, pprint\n\nx = Symbol('x')\nf = (2*x-6)/(x**3 - 7*x**2 - 2*x + 6)\n\npprint(solve(f, x))"
  },
  {
    "example_id": 384,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(0, -3)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "count = 0\nfor x in range(1, 13):\n    for y in range(1, 13):\n        for z in range(1, 13):\n            if x + 2 * y + 4 * z == 12 and x * y + 2 * x * z + 4 * y * z == 22 and x * y * z == 6:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 386,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.188868845137331",
      "63.0",
      "3.996001025798152",
      "63.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "z = (1-5j)\nexpression = 0\nfor n in range(1, 46):\n    expression += (z**n + 1/z**n)**2\nprint(expression)"
  },
  {
    "example_id": 387,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "a0 = 66\na1 = 2\nfor i in range(1, 1000):\n    if a0 == 66 and a1 == 2:\n        break\n    a0, a1 = a1, (a0 - a1) // i\nprint(abs(a1))"
  },
  {
    "example_id": 388,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 2\nb = 1\nf = lambda x: a*x + b\nf_of_f_of_f = lambda x: f(f(x))\nf_of_f_of_f(f_of_f_of_f(8))"
  },
  {
    "example_id": 389,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\na = 16\nb = 8\nc = 0\nresult = math.sqrt(c * (b - c)) + math.sqrt(c * (a - c))\nprint(result)"
  },
  {
    "example_id": 390,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\ndef distance_squared(p1, p2):\n    return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n\ndef distance_to_circle(p, center, radius):\n    return distance(p, center) - radius\n\ndef distance_squared_to_circle(p, center, radius):\n    return distance_squared(p, center) - radius ** 2\n\ndef find_max_distance(center, radius, points):\n    max_distance = 0\n    for point in points:\n        distance = distance_to_circle(point, center, radius)\n        if distance > max_distance:\n            max_distance = distance\n    return max_distance\n\ndef find_max_distance_squared(center, radius, points):\n    max_distance_squared = 0\n    for point in points:\n        distance_squared = distance_squared_to_circle(point, center, radius)\n        if distance_squared > max_distance_squared:\n            max_distance_squared = distance_squared\n    return max_distance_squared\n\ndef find_max_distance_squared_using_intersection(center, radius, points):\n    max_distance_squared = 0\n    for point in points:\n        distance_squared = find_max_distance_squared(center, radius, [point])\n        if distance_squared > max_distance_squared:\n            max_distance_squared = distance_squared\n    return max_distance_squared\n\ndef find_max_distance_using_intersection(center, radius, points):\n    max_distance = 0\n    for point in points:\n        distance = find_max_distance(center, radius, [point])\n        if distance > max_distance:\n            max_distance = distance\n    return max_distance\n\ncenter = (0, 0)\nradius = 5\npoints = [(0, 3), (-4, 0), (4, 0)]\nprint(find_max_distance(center, radius, points))\nprint(find_max_distance_squared(center, radius, points))\nprint(find_max_distance_squared_using_intersection(center, radius, points))\nprint(find_max_distance_using_intersection(center, radius, points))"
  },
  {
    "example_id": 391,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-27.0",
      "3.0",
      "2.0",
      "1593.0",
      "2.0",
      "8.0"
    ],
    "annotated_answers": [
      "-376.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nr, s, t = Symbol('r'), Symbol('s'), Symbol('t')\nf = 4 * r**3 - 59 * r**2\nsol = solve([f - 4 * s**3 - 59 * s**2 - 4 * t**3 - 59 * t**2], [r, s, t])\nprint(sol)"
  },
  {
    "example_id": 392,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "from sympy import binomial\nfrom sympy.ntheory import prime\n\nn = 31\nterm = binomial(n, n//2)\na, b = term.as_numer_denom()\nprint(b)"
  },
  {
    "example_id": 393,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2500.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor n in range(1, 101):\n    for m in range(1, 101):\n        if (n**2 + m**2) % 4 == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 394,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-7.959674848489486",
      "-3.477",
      "0.0",
      "2.149",
      "0.0",
      "3.671",
      "-1.0",
      "11.0",
      "2.516",
      "0.0",
      "-3.11",
      "0.0",
      "-1.328",
      "0.0",
      "45.0",
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from scipy.optimize import minimize\n\n\ndef func(x):\n    return x[0] * x[1] + x[0] * x[2] + x[1] * x[2]\n\n\ndef cons(x):\n    return x[0]**2 + 2 * x[1]**2 + 5 * x[2]**2 - 22\n\n\nres = minimize(func, [1, 1, 1], method=\"SLSQP\", constraints={\"type\": \"eq\", \"fun\": cons})\nprint(res)"
  },
  {
    "example_id": 395,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        if a**2 + b**2 == 2010:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 396,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "139.29611541307906"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import math\n\n\ndef minimum_value_of_expression(a, b):\n    return 3 * a**3 * math.sqrt(3) + 2 / (a * b - 2 * b**2)\n\n\nminimum_value = minimum_value_of_expression(3, 2)\nprint(minimum_value)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import Symbol, solve\nx, y = Symbol('x'), Symbol('y')\nP1, P2 = Symbol('PF_1'), Symbol('PF_2')\nd = solve(4*x**2 - 8*x + y**2 + 4*y - 8, x)[0]\nprint(d)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "count = 0\nfor i in range(2006):\n    count += abs(count)\nprint(count)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import sympy as sp\n\nx = sp.Symbol('x')\nP = sp.Poly(5, x, domain='ZZ')\n\n# Find P(x) mod (x-1)(x-4)\nR = P % (x - 1) % (x - 4)\nprint(R)\n\n# Find P(x) mod (x-2)(x-3)\nR = P % (x - 2) % (x - 3)\nprint(R)\n\n# Find P(5)\nprint(P(5))"
  },
  {
    "example_id": 400,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y, z = 0, 0, 3\nexpression = (x * y + z) * (x * z + y)\nprint(expression)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import *\n\nalpha, beta, gamma, delta = symbols('alpha beta gamma delta')\nexpression = alpha**2 * beta + beta**2 * gamma + gamma**2 * alpha + delta**2 * beta\nprint(expression)"
  },
  {
    "example_id": 402,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "501.0"
    ],
    "solution": "import math\ncount = 0\nfor k in range(-500, 501):\n    for x in range(-500, 501):\n        if math.log(k * x) == 2 * math.log(x + 2):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 403,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import S, Symbol, diff, simplify, solve\nx = Symbol('x')\ny = (x**3-x**2+x)/(6*x**2-9*x)\ndy = diff(y, x)\n\n# Number of holes\na = len(solve(y, x))\n\n# Number of vertical asymptotes\nb = len(solve(dy, x))\n\n# Number of horizontal asymptotes\nc = len(solve(y-S(0), x))\n\n# Number of oblique asymptotes\nd = len(solve(y-S(0), x, dict=True))\n\nprint(a+2*b+3*c+4*d)"
  },
  {
    "example_id": 404,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-24.888888888888825",
      "3.333",
      "-1.0",
      "1.667",
      "-1.0",
      "2.222",
      "-1.0",
      "5.0",
      "-4.768"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "from scipy.optimize import minimize\n\ndef f(x):\n    return 3 * x[0]**2 + 12 * x[1]**2 + 27 * x[2]**2 - 4 * x[0] * x[1] - 6 * x[0] * x[2] - 12 * x[1] * x[2] - 8 * x[2] - 24\n\nresult = minimize(f, [1, 1, 1])\nprint(result)"
  },
  {
    "example_id": 405,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import Poly\nf = Poly('x**9 - x**8 - 5*x**7 + 12*x**6 - 30*x**5 + 40*x**4 - 25*x**3 + 10*x**2 - 5*x + 1')\nd = Poly('x**3 + x**2 - 3*x + 1')\nq, r = f.divmod(d)\nprint(q.degree())"
  },
  {
    "example_id": 406,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    if (x - a) * (x - b) == b * (x - a) + a * (x - b):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 407,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a, b, c = 0, 0, 0\nfor x in range(1, 100):\n    p1 = x**4 + x**3 + x**2 + x + 1\n    p2 = x**4 + 2*x**3 + 2*x**2 + 2*x + 1\n    if p1 == p2**2:\n        a, b, c = x, x**2, x**3\n        break\nprint(a + b + c)"
  },
  {
    "example_id": 408,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\n\ndef is_root(n, x):\n    return (n**(1/n) - x) / (n**(1/n) + x) == 0\n\ndef is_root_real(n, x):\n    return is_root(n, x) and not math.isnan(x)\n\ndef count_roots(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_root_real(n, i):\n            count += 1\n    return count\n\nprint(count_roots(2001))"
  },
  {
    "example_id": 409,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        z = a + b * 1j\n        if abs(z) == 1:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 410,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2101.0"
    ],
    "annotated_answers": [
      "2101.0"
    ],
    "solution": "expression = 5**4 + 5**3 * 4 + 5**2 * 4**2 + 5 * 4**3 + 4**4\nprint(expression)"
  },
  {
    "example_id": 411,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "36.0",
      "10.0",
      "14.0",
      "22.0",
      "519.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "import sympy as sp\na, b, c, d = sp.symbols(\"a b c d\")\nexpression = a**2 + b**2 + c**2 + 519 - d - 36 * sp.sqrt(10*a + 14*b + 22*c - d)\nprint(expression.expand().simplify())"
  },
  {
    "example_id": 412,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import itertools\n\ncount = 0\nfor a, b, c, d in itertools.combinations(range(-10, 10), 4):\n    if a**4 + b**4 + c**4 + d**4 == 48 and a * b * c * d == 12:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 413,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "from sympy import symbols, roots, Add\n\na, b, c = symbols('a, b, c')\nr = roots(a**3 - 7*a + 2)\nabc = Add(a, b, c)\nprint(abc + Add(a, b) + Add(a, c) + Add(b, c) + Add(a, b, c) + 1)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "495507.0"
    ],
    "annotated_answers": [
      "331.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 1:\n        return n - 2 * f(n - 1)\n    else:\n        return n // 2 - 1\n\nf1986 = f(1986)\nsum = 0\nfor n in range(1, 1986):\n    sum += f(n)\nprint(f1986 + sum)"
  },
  {
    "example_id": 415,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\nexpression = sympy.poly(x**6 + 2*x + 3, x)\nfactor = sympy.poly(x**2 - 2*x - 1, x)\nresult = expression / factor\nprint(result.as_expr())"
  },
  {
    "example_id": 416,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2223.0"
    ],
    "annotated_answers": [
      "1999.0"
    ],
    "solution": "n = 1\nwhile True:\n    sum = 0\n    for i in range(1, n + 1):\n        sum += int(str(n + i)[-1])\n    if sum > 10000:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 417,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 0.5\nb = 0.25\nprint(2/a + 1/b)"
  },
  {
    "example_id": 418,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import sympify\nfrom sympy.abc import a, b, c, d, e\nexpression = sympify(\n    a**5 / (a - b) * (a - c) * (a - d) * (a - e)\n    + b**5 / (b - a) * (b - c) * (b - d) * (b - e)\n    + c**5 / (c - a) * (c - b) * (c - d) * (c - e)\n    + d**5 / (d - a) * (d - b) * (d - c) * (d - e)\n    + e**5 / (e - a) * (e - b) * (e - c) * (e - d)\n)\nprint(expression)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "expression = abs(2 - 4j) / abs(2 + 1j)\nprint(expression)"
  },
  {
    "example_id": 420,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 1\ny = 1 / x\nprint(x**2 + y**2)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\n\ndef minimum(a, b, c):\n    return (a + b) * (a + c) * (b + c) / (a * b * c)\n\n\nprint(minimum(1, 1, 1))"
  },
  {
    "example_id": 422,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "101.0"
    ],
    "annotated_answers": [
      "101.0"
    ],
    "solution": "x = 1\nwhile (100000000 / x**4) >= 1:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 423,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "p = 4\nf = lambda x: abs(x - p) + abs(x - 15) + abs(x - p - 15)\nprint(min(f(x) for x in range(p, 15 + 1)))"
  },
  {
    "example_id": 424,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "258.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "import math\n\nn = 1\na = 1\nb = 6\nc = 36\nwhile n <= 10000:\n    if math.log(a, 6) + math.log(b, 6) + math.log(c, 6) == 6:\n        print(a + b + c)\n        break\n    n += 1\n    a = b\n    b = c\n    c = a * b"
  },
  {
    "example_id": 425,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "162.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def p(x):\n    return x**4 - 12 * x**3 + 48 * x**2 - 24 * x + 1\n\nprint(p(0) + p(4))"
  },
  {
    "example_id": 426,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.8432665651295"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)\n\ndef perimeter(p1, p2, p3):\n    return distance(p1, p2) + distance(p2, p3) + distance(p3, p1)\n\ndef semi_major_axis(p1, p2, p3):\n    p = perimeter(p1, p2, p3) / 2\n    return p / math.sin(math.pi / 3)\n\nprint(semi_major_axis((3, 10 + math.sqrt(105)), (3, 10 - math.sqrt(105)), (-5, 10)))"
  },
  {
    "example_id": 427,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "677.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        for c in range(-100, 101):\n            if a**3 + a**2 * b + a * b**2 + b**3 + b**2 * c + b * c**2 + c**3 == 0:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 428,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "remainder = (5*x + 9)**611 + (x + 5)**11 + (x - 1)**11 + 3*x**2 + 1\nprint(remainder % (x + 2))"
  },
  {
    "example_id": 429,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.94881470682153"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "x = 2**(1/3)\ny = 2**(1/3)\nz = 2**(1/3)\nexpression = x**4 + 4 * y**2 + 4 * z**4\nprint(expression)"
  },
  {
    "example_id": 430,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "3.0",
      "2.0",
      "25.0",
      "-4.0",
      "3.0",
      "2.0",
      "25.0",
      "7.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "25.0",
      "0.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\nx, y = Symbol('x'), Symbol('y')\np = solve(x**2 + 8*x*y + 7*y**2 - 225, (x, y))\nprint(p)\nprint(abs(p[0][0] + p[0][1] * 8 + p[0][1]**2 * 7)**0.5)"
  },
  {
    "example_id": 431,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "F1 = (10, 2)\nF2 = (-16, 2)\ndistance = 24\na = abs(F1[0] - F2[0])\nb = abs(F1[1] - F2[1])\nh = (F1[0] + F2[0]) / 2\nk = (F1[1] + F2[1]) / 2\nprint(h + k + a + b)"
  },
  {
    "example_id": 432,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "52.0",
      "581.0"
    ],
    "annotated_answers": [
      "962.0"
    ],
    "solution": "import sympy\n\nk = sympy.solve(sympy.Poly(sympy.Symbol('x')**3 - 52*sympy.Symbol('x')**2 + 581*sympy.Symbol('x') - sympy.Symbol('k')), sympy.Symbol('k'))[0]\nprint(k)"
  },
  {
    "example_id": 433,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "from math import gcd\n\ndef f(x):\n    return (2*x + 9) // (x - 7)\n\nx = 1\nwhile f(f(x))!= x:\n    x = f(x)\n\nprint(x)"
  },
  {
    "example_id": 434,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z = 5j\nprint(abs(z.conjugate()**2))"
  },
  {
    "example_id": 435,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    return x * (2 * x + 3) / (2 * x + 3)\n\nc = 0\nwhile f(c)!= c:\n    c += 1\nprint(c)"
  },
  {
    "example_id": 436,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "822.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "f = lambda x: x**4 + 2*x**2 + 3*x + 4\nroots = [2, -3, 5]\na, b, c = [f(x) for x in roots]\nprint(a + b + c)"
  },
  {
    "example_id": 437,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nexpression = (7*x-2)/(x**2-4)\nA, B = expression.as_numer_denom()\nprint(A+B)"
  },
  {
    "example_id": 438,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\n\nfib = sympy.fibonacci(sympy.Symbol('n'))\nfib2 = sympy.fibonacci(sympy.Symbol('n') + 2)\nsum = sympy.Sum(1 / (fib * fib2), (sympy.Symbol('n'), 1, sympy.oo))\nprint(sum)"
  },
  {
    "example_id": 439,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7021.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "expression = sum([abs(xi - 1) for xi in range(1, 120)])\nprint(expression)"
  },
  {
    "example_id": 440,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1180.3209944751381"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "x = (322**2 + 3620**2 - 4 * 3620 * 322) / (2 * 3620)\nprint(x)"
  },
  {
    "example_id": 441,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sp\na, b, c = sp.symbols('a b c')\nexpr = sp.Min(2*a**2 + 3*b**2 + 6*c**2, constraints=(a + b + c - 1, 0))\nprint(expr)"
  },
  {
    "example_id": 442,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "p = 5\nq = 0\nr = 0\na = 0\nb = 0\nc = 0\nfor i in range(1, 10000):\n    a = i\n    b = -p\n    c = -q\n    if a**3 + a**2 + p*a + q == 0 and b**3 + b**2 + p*b + r == 0:\n        if a not in [b, c] and b not in [a, c] and c not in [a, b]:\n            print(a + b + c)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nf = x**3 - 49*x**2 + 623*x - 2015\ng = f.subs(x, x + 5)\nroots = solve(g, x)\nprint(sum(roots))"
  },
  {
    "example_id": 444,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "27648.0"
    ],
    "solution": "import math\n\na, b, c, d = 0, 0, 0, 0\nmax_val = -1\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            for l in range(10):\n                if i + j + k + l == 10:\n                    val = a * b**2 * c**3 * d**4\n                    if val > max_val:\n                        max_val = val\n                        a, b, c, d = i, j, k, l\nprint(max_val)"
  },
  {
    "example_id": 445,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nexpression = 1 - sqrt(2) + 3 + sqrt(7) + 1 + sqrt(2) + 5\nprint(degree(expression))"
  },
  {
    "example_id": 446,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2376.0"
    ],
    "annotated_answers": [
      "516.0"
    ],
    "solution": "expression = 0\nfor i in range(1, 100):\n    expression += 751 - 745 + 748 - 742 + 745 - 739 + 742 - 736\nprint(expression)"
  },
  {
    "example_id": 447,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.94"
    ],
    "annotated_answers": [
      "0.63"
    ],
    "solution": "log36 = 1.63\nlog94 = round(log36 / 3**(1/2), 2)\nprint(log94)"
  },
  {
    "example_id": 448,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "5.0",
      "4.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "189.0",
      "8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\nx = Symbol('x')\na, b, c = solve(2*x**3 + 3*x**2 + 4*x + 5, x)\nprint(a*b*c + a + b + c)"
  },
  {
    "example_id": 449,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "7.0",
      "6.0",
      "7.0",
      "-7.0",
      "1.0",
      "7.0",
      "7.0",
      "7.0",
      "1.0"
    ],
    "annotated_answers": [
      "117649.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nroots = solve(x**7 - 7, x)\nK = 1\nfor i in range(len(roots)):\n    for j in range(i + 1, len(roots)):\n        K *= roots[i] + roots[j]\nprint(K**2)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "827.9999999999999"
    ],
    "annotated_answers": [
      "828.0"
    ],
    "solution": "expression = (52 + 6 * 43**0.5)**1.5 - (52 - 6 * 43**0.5)**1.5\nprint(expression)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25952256.0"
    ],
    "annotated_answers": [
      "198.0"
    ],
    "solution": "a = [99]\nfor i in range(1, 20):\n    a.append(sum(a))\nprint(a[-1])"
  },
  {
    "example_id": 452,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor x in range(-100, 101):\n    for y in range(-100, 101):\n        for z in range(-100, 101):\n            if x + y - z == 0 and x * z - x * y + y * z == 27 and x * y * z == 54:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0",
      "82.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1325.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import symbols, solve\n\nx = symbols('x')\nroots = solve(x**3 + 7*x**2 - 11*x - 2, x)\na, b, c = roots\nprint(a + b + c)"
  },
  {
    "example_id": 454,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "324726.0"
    ],
    "annotated_answers": [
      "229.0"
    ],
    "solution": "def p(x):\n    return sum(i * x**i for i in range(x+1))\n\nprint(p(6))"
  },
  {
    "example_id": 455,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "697.0"
    ],
    "solution": "from sympy import Symbol\n\nz = Symbol('z', real=False)\nn = Symbol('n', integer=True, positive=True)\n\nexpression = (z / (z + n)) - 4 * 1j\n\nprint(expression)"
  },
  {
    "example_id": 456,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "a = 200\nb = 0\nprint(a - 5 * b)"
  },
  {
    "example_id": 457,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.415558877709366"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import math\n\nsum = 0\nfor n in range(1, 10000):\n    sum += 1 / (math.sqrt(n) + math.sqrt(n + 1)) / (math.sqrt(n)**(1/4) + math.sqrt(n + 1)**(1/4))\nprint(sum)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "from sympy import solve\n\nx = sympy.symbols('x', real=True)\nexpression = x**2001 + (0.5 - x)**2001\nsolutions = solve(expression, x)\nprint(sum(solutions))"
  },
  {
    "example_id": 459,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "214.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nd = 4\nexpression = a**2 + b**2 + c**2 + d**2\nprint(expression)"
  },
  {
    "example_id": 460,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1004.0"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "expression = 0\nfor i in range(1, 2008):\n    if i % 2 == 0:\n        expression += i\n    else:\n        expression -= i\nprint(expression)"
  },
  {
    "example_id": 461,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2759.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import log\n\ndef find_min(m, n):\n    x1 = (7 + log(m)) / (8 * log(n))\n    x2 = (7 + log(n)) / (8 * log(m))\n    return min(x1, x2)\n\ndef find_max(m, n):\n    x1 = (7 + log(m)) / (8 * log(n))\n    x2 = (7 + log(n)) / (8 * log(m))\n    return max(x1, x2)\n\ndef solve(m, n):\n    min_x = find_min(m, n)\n    max_x = find_max(m, n)\n    return int((8 * log(n) * log(m) - 7 * log(n) - 6 * log(m) - 2013) * (min_x ** 2 - max_x ** 2))\n\nprint(solve(2, 3))"
  },
  {
    "example_id": 462,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import sympy\n\nexpression = sympy.sqrt(sympy.Rational(3, 4) - sympy.sqrt(sympy.Rational(1, 2))) - sympy.sqrt(sympy.Rational(3, 4) + sympy.sqrt(sympy.Rational(1, 2)))\nexpression = expression.simplify()\nprint(expression)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "S = {0, 10}\n\nwhile True:\n    added = False\n    for x in S:\n        p = x**2 - x + 1\n        if p in S:\n            S.add(x)\n            added = True\n            break\n    if not added:\n        break\n\nprint(len(S))"
  },
  {
    "example_id": 464,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1024000.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "d = 1024 * 1000\nprint(d)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nsolution = solve((1/(x**2 - 10*x - 29) + 1/(x**2 - 10*x - 45) - 2/(x**2 - 10*x - 69)), x)\nprint(solution)"
  },
  {
    "example_id": 466,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4022030.0"
    ],
    "solution": "from math import floor\n\n\ndef f(x):\n    if x < floor(x) + 0.5 / floor(x):\n        return floor(x) * abs(x - floor(x) - 0.5)\n    else:\n        return f(x - 1 / floor(x))\n\n\ndef g(x):\n    return 2 ** (x - 2007)\n\n\ncount = 0\nfor x in range(1, 1000):\n    if f(x) == g(x):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 467,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "269.00000000000006"
    ],
    "annotated_answers": [
      "269.0"
    ],
    "solution": "expression = abs(10-13j) * abs(10+13j)\nprint(expression)"
  },
  {
    "example_id": 468,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.29411764705882354"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "d1 = abs(15 + 8j)\nd2 = abs(3 - 4j)\nprint(d2/d1)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0",
      "7.0",
      "17.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\np = sympy.Poly(x**2 - 7*x + 22, x)\nq = sympy.Poly(x**2 - 11*x + 30, x)\nprint(p.subs(x, sympy.sqrt(17)))"
  },
  {
    "example_id": 470,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(2011**2011 % 100)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6981.0",
      "2.0",
      "1323.0",
      "2.0",
      "1.0",
      "3.0",
      "3.0",
      "3.0",
      "25.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "import sympy as sym\nr, s, t = sym.roots(sym.Symbol('x')**3 + 9*sym.Symbol('x')**2 + 2*sym.Symbol('x') + 1)\nprint((1/r**2) + (1/s**2) + (1/t**2))"
  },
  {
    "example_id": 472,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import *\nz1, z2, z3, z4 = symbols('z1, z2, z3, z4')\nQ = x**4 - x**3 - x**2 - 1\nP = x**6 - x**5 - x**3 - x**2 - x\nprint(P(z1) + P(z2) + P(z3) + P(z4))"
  },
  {
    "example_id": 473,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.09362109375",
      "0.24515625",
      "0.7875",
      "17.288168359375"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "import sympy\n\na, b, c, r1, r2, r3, r4 = sympy.symbols('a b c r1 r2 r3 r4')\nexpression = (4 * r1**4 - a * r1**3 + b * r1**2 - c * r1 + 5) * (r2 + r3 + r4)\nexpression += (4 * r2**4 - a * r2**3 + b * r2**2 - c * r2 + 5) * (r1 + r3 + r4)\nexpression += (4 * r3**4 - a * r3**3 + b * r3**2 - c * r3 + 5) * (r1 + r2 + r4)\nexpression += (4 * r4**4 - a * r4**3 + b * r4**2 - c * r4 + 5) * (r1 + r2 + r3)\nexpression += 1\nprint(expression.subs({r1: 1/2, r2: 1/4, r3: 1/5, r4: 1/8}).simplify())"
  },
  {
    "example_id": 474,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "16.0",
      "5.0",
      "8.0"
    ],
    "annotated_answers": [
      "-64.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy.abc import x\nexpression = sqrt(5*abs(x) + 8) - sqrt(x**2 - 16)\nprint(expression.expand())"
  },
  {
    "example_id": 475,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-71.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-10879.0"
    ],
    "solution": "b = []\nfor a in range(-100, 101):\n    if (1988 * a**2 + a) % 8891 == 0:\n        b.append(a)\n    if (8891 * a**2 + a) % 1988 == 0:\n        b.append(a)\nprint(b)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import log10\n\ncount = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        for c in range(1, 101):\n            for d in range(1, 101):\n                if a * log10(2) + b * log10(3) + c * log10(5) + d * log10(7) == 2005:\n                    count += 1\nprint(count)"
  },
  {
    "example_id": 477,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import Symbol\n\nn = 0\ntau = (1 + Symbol('sqrt(5)')) / 2\nexpression = tau**n\nwhile expression.is_Number:\n    n += 1\n    expression = tau**n\nprint(n)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import Symbol, simplify\n\nx = Symbol('x')\nf = 1 / (x**3 - 3*x**2 + 3*x - 1)\nprint(simplify(f.as_numer_denom()[1]))"
  },
  {
    "example_id": 479,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "152.2185107203483"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "a = 8**(5/4)\nb = 4**(7/4)\nprint(a * b)"
  },
  {
    "example_id": 480,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import math\n\na = 1\nb = 2\nc = 3\nd = 4\n\n# We need to find the minimum value of the expression\n# \\left\\lfloor \\frac{b + c + d}{a} \\right\\rfloor + \\left\\lfloor \\frac{a + c + d}{b} \\right\\rfloor + \\left\\lfloor \\frac{a + b + d}{c} \\right\\rfloor + \\left\\lfloor \\frac{a + b + c}{d} \\right\\rfloor\n\n# We can use the following inequalities to find the minimum\n# \\left\\lfloor \\frac{b + c + d}{a} \\right\\rfloor \\leq \\frac{b + c + d}{a}\n# \\left\\lfloor \\frac{a + c + d}{b} \\right\\rfloor \\leq \\frac{a + c + d}{b}\n# \\left\\lfloor \\frac{a + b + d}{c} \\right\\rfloor \\leq \\frac{a + b + d}{c}\n# \\left\\lfloor \\frac{a + b + c}{d} \\right\\rfloor \\leq \\frac{a + b + c}{d}\n\n# We can also use the fact that floor function is monotonic\n# \\left\\lfloor \\frac{b + c + d}{a} \\right\\rfloor + \\left\\lfloor \\frac{a + c + d}{b} \\right\\rfloor + \\left\\lfloor \\frac{a + b + d}{c} \\right\\rfloor + \\left\\lfloor \\frac{a + b + c}{d} \\right\\rfloor \\geq \\left\\lfloor \\frac{b + c + d}{a} + \\frac{a + c + d}{b} + \\frac{a + b + d}{c} + \\frac{a + b + c}{d} \\right\\rfloor\n\n# We can simplify the above expression to get the minimum value of the expression\nmin_value = math.floor((b + c + d) / a) + math.floor((a + c + d) / b) + math.floor((a + b + d) / c) + math.floor((a + b + c) / d)\n\nprint(min_value)"
  },
  {
    "example_id": 481,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "F = [0, 1]\nfor i in range(2, 2025):\n    F.append((F[-1] + F[-2]) % 3)\nprint(sum(F[2017:2025]))"
  },
  {
    "example_id": 482,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.012154409121031"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "from math import log\nx = 8\ny = 9\nprint(log(x, y)**2 + log(y, x)**2)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import roots\nfrom sympy.abc import x\nexpression = 2*x**4 - 8*x**3 + 7\nroots_ = roots(expression)\na, b, c, d = roots_\nprint(a + b + c + d)"
  },
  {
    "example_id": 484,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "501.0"
    ],
    "annotated_answers": [
      "49896.0"
    ],
    "solution": "N = 2007 // 4\nprint(N)"
  },
  {
    "example_id": 485,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "85.0",
      "-85.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from sympy import Symbol\n\nz = Symbol('z')\nexpression = z**85 + 1/z**85\nprint(expression)"
  },
  {
    "example_id": 486,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy as sym\n\nomega = sym.Symbol('omega')\n\nn = sym.Symbol('n', positive=True)\n\nexpression = (omega + 1)**n\n\nprint(sym.expand(expression))"
  },
  {
    "example_id": 487,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "496.0"
    ],
    "solution": "count = 0\nfor n in range(1, 1000):\n    x = n / n // n\n    if x > 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import sqrt\n\na = 6\nb = 4\nh = -5\nk = -5\n\nprint(h + k + a + b)"
  },
  {
    "example_id": 489,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4000.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "a1 = 50 - 4000\na4001 = 50\nexpression = abs(a1 - a4001)\nprint(expression)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sym\n\na, b, c, x = sym.symbols('a b c x')\nexpression = (x + a)**2 / (a - b) * (a - c) + (x + b)**2 / (b - a) * (b - c) + (x + c)**2 / (c - a) * (c - b)\nprint(sym.simplify(expression))"
  },
  {
    "example_id": 491,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import solve, symbols\nx, y, z = symbols('x y z')\neq = x * y * z * (x + y + z) - x * y - y * z - z * x\nsol = solve(eq, (x, y, z))\nprint(sol)"
  },
  {
    "example_id": 492,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "def find_k():\n    k = 1\n    while True:\n        n = (2002 * k) // k\n        if n % 1 == 0 and n % k == 0:\n            return k\n        k += 1\nprint(find_k())"
  },
  {
    "example_id": 493,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.421296296296298"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nexpression = a**3 / b**3 + b**3 / c**3 + c**3 / a**3\nprint(expression)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2833.376960448433"
    ],
    "annotated_answers": [
      "4014013.0"
    ],
    "solution": "import math\nprint(math.sqrt(2003**2 + 2004**2))"
  },
  {
    "example_id": 495,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "177.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "f = lambda x: x**3 + 3*x**2 - 5*x + 2\nprint(f(5))"
  },
  {
    "example_id": 496,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from math import factorial\n\n\ndef x(x):\n    return x * (x + 1) * (x + 2) * (x + 3)\n\n\ndef minimum():\n    return x(0)\n\n\nprint(minimum())"
  },
  {
    "example_id": 497,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    if 0 <= x < 2:\n        return 2 * x\n    elif 2 <= x <= 4:\n        return 8 - 2 * x\n    else:\n        raise ValueError('x must be between 0 and 4')\n\nprint(max(f(x) for x in range(5)))"
  },
  {
    "example_id": 498,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "n = 1\nwhile True:\n    product = 1\n    for k in range(1, n+1):\n        product *= k**2\n    if product >= n**2 * (n**2 + 1):\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 499,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15936063.0"
    ],
    "annotated_answers": [
      "3996.0"
    ],
    "solution": "expression = 1\nfor i in range(1996, 1998):\n    expression *= (i**2 - (i - 1)**2)\nprint(expression)"
  },
  {
    "example_id": 500,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "count = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        for c in range(1, 101):\n            if a**2 + b**2 + c**2 == a * b + a * c + b * c:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 501,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "sum = 0\nfor y in range(1, 101):\n    x = y**2 - 6 * y + 5\n    if abs(x) == y:\n        sum += x\nprint(sum)"
  },
  {
    "example_id": 502,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nexpression = x**3 - 3 * x**2 - 9 * x + 30\nprint(expression.subs(x, 3))"
  }
]