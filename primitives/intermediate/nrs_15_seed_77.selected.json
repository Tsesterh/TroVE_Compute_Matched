[
  {
    "example_id": 0,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "x = 1\nsum = 0\nif x < x**2 < x**3:\n    sum += 1\nif x < x**3 < x**2:\n    sum += 2\nif x**2 < x < x**3:\n    sum += 4\nif x**2 < x**3 < x:\n    sum += 8\nif x**3 < x < x**2:\n    sum += 16\nif x**3 < x**2 < x:\n    sum += 32\nprint(sum)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "12.0",
      "16.0",
      "24.0",
      "32.0",
      "48.0",
      "64.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Enter all the possible values of k, separated by commas.\nprint(4, 12, 16, 24, 32, 48, 64)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "82.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "omega = 1 - 5j\nexpression = abs(2*omega**2 - 4*omega - 30)\nprint(expression)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5200.0",
      "105300.0",
      "1.0",
      "24.0",
      "12.0"
    ],
    "annotated_answers": [
      "195.0"
    ],
    "solution": "# New sequence\nsum_new = 0\nfor k in range(1, 25):\n    sum_new += k * (k + 1)\nprint(sum_new)\n\n# Original sequence\nsum_old = 0\nfor k in range(1, 25):\n    sum_old += k * (k + 1) * (k + 2)\nprint(sum_old)\n\n# First, last, and middle terms of the original sequence\nfirst_term = 1\nlast_term = 24\nmiddle_term = 12\nprint(first_term, last_term, middle_term)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "from math import log\n\ndef f(x):\n    return 17 * log(x, 30) - 3 * log(x, 5) + 20 * log(x, 15) - 3 * log(x, 6) + 20 * log(x, 2)\n\nminimum = None\nx = 2\nwhile x < 100:\n    if f(x) < f(x + 1):\n        minimum = x\n        break\n    x += 1\n\nprint(minimum)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "def f(x):\n    return f(x + 1) + f(x - 1)\n\nf(15) = 20\nf(20) = 15\nf(20152015)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "w = 24\nx = 21\ny = 18\nz = 25\nprint(y + z)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from sympy import sqrt, expand_mul\n\nexpression = sqrt(2)**3 + sqrt(2)\nexpression = expand_mul(expression)\nprint(expression)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "177.0"
    ],
    "solution": "def f(x):\n    return x\n\nvalues = set()\nfor i in range(1000):\n    values.add(f(i))\nprint(len(values))"
  },
  {
    "example_id": 9,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "m = 33\nn = 67\nprint(abs(m - n))"
  },
  {
    "example_id": 10,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.125"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "r = 1\ns = 2\nprint((r / s)**3)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "112.94960212201592"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "z = 5 + 1j\nw = -4 + 10j\nexpression = abs(z + 20/w)**2 + abs(w + 12/z)**2\nprint(expression)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "count = 0\nfor a in range(-5, 6):\n    for b in range(-5, 6):\n        if abs(a + b * 1j) <= 5:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 13,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.14213562373095"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# Find maximum value of expression\nimport math\na = 1\nb = 1\nc = 1\nwhile a + b + c < 4:\n    a += 1\n    b += 1\n    c += 1\nprint(4 * math.sqrt(a) + 6 * math.sqrt(b) + 12 * math.sqrt(c) / math.sqrt(a * b * c))"
  },
  {
    "example_id": 14,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "362880.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "expression = 1\nfor i in range(1, 9):\n    expression = expression * (1 + i)\nprint(expression)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "count = 0\nfor u in range(1, 101):\n    for v in range(1, 101):\n        if u * v == 10 and int(u.real) == u.real and int(u.imag) == u.imag and int(v.real) == v.real and int(v.imag) == v.imag:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 2\nb = 1\nc = 1\nexpression = 4 * a + 3 * b + c**3 / (a - b) * b\nprint(expression)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a = 3\nb = 2\nprint(a**3 + b**3)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.3862943611198906"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import math\n\na = 1\nb = 2\nexpression = math.log(a**2) + math.log(b**2)\nprint(expression)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1007.5"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "average = sum(range(2016)) / 2016\nprint(average)"
  },
  {
    "example_id": 20,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.42857142857143"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def remainder(k, x):\n    return k * x**4 + 9 * x**3 + k * x**2 + 32 * x - 11\n\ndef quotient(k, x):\n    return x + 5\n\ndef divide(k, x):\n    return remainder(k, x) / quotient(k, x)\n\nprint(divide(10, 2))"
  },
  {
    "example_id": 21,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5486782579.0"
    ],
    "annotated_answers": [
      "2039191.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nS = 0\nfor n in range(-2019, 2019):\n    S += f(n)\nprint(S)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-16.0",
      "0.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z1 = 5j\nz2 = 1j\nexpression = (z1 - z2)**2\nprint(expression)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.000211941346"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\na = math.sqrt(2)\nb = 1\nc = 1\nd = 1\nwhile True:\n    a, b, c, d = b, c, d, a + 1 / b + 1 / c + 1 / d\n    if b > 10000:\n        break\nprint(b)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "expression = 0\nfor i in range(1, 49):\n    if i % 2 == 0:\n        expression += i\n    else:\n        expression -= i\nprint(expression)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.293865081226198"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 1 + 2j\nexpression = abs(z + 5 - 3j) + abs(z - 7 + 2j)\nprint(expression)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "-1.0",
      "1.0",
      "3.0",
      "-1.0",
      "5.0",
      "6.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import symbols\nfrom sympy.solvers import solve\n\nx, y, z = symbols('x, y, z', positive=True)\nexpression = (x**3 + 2*y**3 + 4*z**3) / (x*y*z)\nsol = solve(expression, y)\nprint(sol)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor x in range(1, 100):\n    if x**2 + 17 / x**2 == 2 * x and x**2 + 17 / x**2 == 2 * x:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "count = 1\nk = 0\nwhile count < 100:\n    count = count * 2 + 1\n    k += 1\nprint(k)"
  },
  {
    "example_id": 29,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "29800.0"
    ],
    "annotated_answers": [
      "29800.0"
    ],
    "solution": "count = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        for c in range(1, 101):\n            if a**2 * b + b**2 * c + c**2 * a == a * b**2 + b * c**2 + c * a**2:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.841903733771222"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import sqrt\n\nx = 3\ny = 3\nz = 3\nexpression = sqrt(16 - x**2) + sqrt(25 - y**2) + sqrt(36 - z**2)\nprint(expression)"
  },
  {
    "example_id": 31,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "1.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "-71.0"
    ],
    "solution": "from sympy import Poly, sqrt\n\nP = Poly((sqrt(2) + sqrt(3) + sqrt(5)), domain='QQ')\nprint(P(1))"
  },
  {
    "example_id": 32,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "511.0"
    ],
    "annotated_answers": [
      "341.0"
    ],
    "solution": "count = 0\nfor x in range(2, 513):\n    if (x**2 + x + 1) % (x**2 + x + 1) == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 33,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.99999199999355"
    ],
    "annotated_answers": [
      "250.0"
    ],
    "solution": "import math\nexpression = 1 / (math.sqrt(5**4 + 1) - math.sqrt(5**4 - 1))\nprint(expression)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "from sympy import factorial, binomial\n\nn = 99\nresult = 0\nfor k in range(n + 1):\n    result += binomial(n, k) * (-1)**k * (k + 1)**49\nprint(result)"
  },
  {
    "example_id": 35,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "-2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol\nfrom sympy.abc import z\n\nexpression = z + 1/z + z**2 + 1/(z**2)\nprint(expression)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a, b, c')\nexpression = (a + b + c) / (a + b + c + 1)\nprint(expression)"
  },
  {
    "example_id": 37,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = []\nfor i in range(-10, 11):\n    if (-i - 1)**2 + i - 1 == (-i - 1)**2 - i - 1:\n        a.append(i)\nprint(a)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(0)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor c in range(-100, 100):\n    if abs(3-c*1j) == 7:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return (x + 3)**5 * (x + 2)**8 * (x + 1)**4 * (x - 7)**2 / (x + 3)**11 * (x + 2)**6 * (x + 1)**4 * x**2\n\nimport numpy as np\nx = np.linspace(-10, 10)\ny = f(x)\n\nimport matplotlib.pyplot as plt\nplt.plot(x, y)\nplt.ylabel(\"y\")\nplt.xlabel(\"x\")\nplt.title(\"Graph of y = f(x)\")\nplt.show()"
  },
  {
    "example_id": 41,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8778.0"
    ],
    "annotated_answers": [
      "5120.0"
    ],
    "solution": "import math\nx = 1\ny = 1\nz = 1\nexpression = (1 + 5 * z) * (4 * z + 3 * x) * (5 * x + 6 * y) * (y + 18) / (x * y * z)\nprint(expression)"
  },
  {
    "example_id": 42,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(n):\n    if n % 2 == 0:\n        return f(n//2) + 1\n    else:\n        return 1\n\nprint(f(15))"
  },
  {
    "example_id": 43,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol(\"x\")\nexpression = 3 * x + 2\nexpression = expression.subs(x - 1, 4)\nprint(expression)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor x in range(-6, 7):\n    if abs(x) + 5 < 7 and abs(x - 3) > 2:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-140.29611541307906"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "from math import sqrt\nx = -(sqrt(12) + sqrt(3))**3\nprint(x)"
  },
  {
    "example_id": 46,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a, b = 2, 4\nx, y = 1, 3\nexpression = (x - x)**2 / a**2 + (y - y)**2 / b**2\nprint(expression)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "2.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import Min, sin, Symbol\nx = Symbol('x')\nexpression = Min(9 * x**2 * sin(x)**2 + 4 / x * sin(x), x)\nprint(expression)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "z = 2\nw = 5\nprint(abs(w-z))"
  },
  {
    "example_id": 49,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(i, j):\n    if i == 0 and 0 <= j <= 4:\n        return j+1\n    elif i >= 1 and j == 0:\n        return f(i-1, 1)\n    else:\n        return f(i-1, f(i, j-1))\n\nprint(f(2015, 2))"
  },
  {
    "example_id": 50,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "840.0"
    ],
    "solution": "sum = 0\nfor k in range(1, 29):\n    sum += 1/(k**2 + k)\nprint(int(sum))"
  },
  {
    "example_id": 51,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.39829654694291144"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nx = math.exp(math.log(2) + math.log(4) - 3)\nprint(x)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "from math import factorial\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\nn = 10**9\nk = 0\nwhile True:\n    k += 1\n    if binomial_coefficient(n, k) < binomial_coefficient(n + 1, k - 1):\n        break\n\na = str(k)[0]\nb = str(k)[1]\nprint(int(a) * 10 + int(b))"
  },
  {
    "example_id": 53,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-11584.0"
    ],
    "annotated_answers": [
      "277.0"
    ],
    "solution": "def p(x):\n    return 4 * (x + 3)**3 - 16 * (x - 2)**3 + 16 * (x - 4)**3 - 4 * (x + 5)**3\nprint(p(11))"
  },
  {
    "example_id": 54,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2015.0",
      "2.0",
      "2014.0",
      "3.0",
      "2013.0",
      "4.0",
      "2012.0",
      "5.0",
      "2011.0",
      "6.0"
    ],
    "annotated_answers": [
      "-2016.0"
    ],
    "solution": "from sympy import Symbol, Poly, simplify\n\nA = Symbol('A')\nB = Symbol('B')\nx = Symbol('x')\n\nexpression = Poly(x**2017 + A*x + B, x)\nprint(simplify(expression.div(Poly(x + 1)**2)))"
  },
  {
    "example_id": 55,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "# Solve for a, b, c\na = -1\nb = 1\nc = 1\n\n# Find the largest possible value of |a| + |b| + |c|.\nprint(abs(a) + abs(b) + abs(c))"
  },
  {
    "example_id": 56,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "54.0",
      "6.0"
    ],
    "annotated_answers": [
      "-108.0"
    ],
    "solution": "from sympy import Symbol, Min\nx, y = Symbol('x'), Symbol('y')\nexpression = x**6 + y**6 - 54*x*y\nprint(Min(expression, x, y))"
  },
  {
    "example_id": 57,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "450.0"
    ],
    "annotated_answers": [
      "450.0"
    ],
    "solution": "def harmonic_mean(numbers):\n    return sum(1/numbers) / len(numbers)\n\ndef geometric_mean(numbers):\n    return pow(product(numbers), 1/len(numbers))\n\ndef product(numbers):\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n\nnumbers = [2700, 75]\nprint(geometric_mean(numbers))"
  },
  {
    "example_id": 58,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36100.0"
    ],
    "annotated_answers": [
      "41230.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 20):\n    sum += i * i**2\nprint(sum)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2 ** (6/2)\nprint(x)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "z1 = 2j\nz2 = 3j\nz3 = 4j\nexpression = abs(z1 - z2)**2 + abs(z1 - z3)**2 + abs(z2 - z3)**2\nprint(expression)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor x in range(-100, 101):\n    for y in range(-100, 101):\n        if (x + y)**2 == (x + 1) * (y - 1):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "936.0"
    ],
    "solution": "import math\n\nx = math.sqrt(104*math.sqrt(6) + 468*math.sqrt(10) + 144*math.sqrt(15) + 2006)\na, b, c = 1, 1, 1\nwhile a*b*c < x:\n    a += 1\n    b += 1\n    c += 1\nprint(a*b*c)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "count = 0\nfor n in range(1, 10000):\n    if (7**5 - 1) / (7**n - 1) == (7 + 3) / (7 - 1):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 64,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def crosses(p, y, x):\n    return p(x) == y\n\ndef is_tangent(p, y, x):\n    return p(x) == y and p(x+1) == y\n\ndef find_intersection(p, y, x):\n    return p(x) == y and p(x+1)!= y\n\ndef least_possible_degree(p):\n    min_degree = 1000000\n    for degree in range(1, 1000000):\n        if crosses(p, 1, 0):\n            min_degree = min(min_degree, degree)\n        if crosses(p, 3, 0):\n            min_degree = min(min_degree, degree)\n        if crosses(p, 5, 0):\n            min_degree = min(min_degree, degree)\n        if is_tangent(p, 1, 0):\n            min_degree = min(min_degree, degree)\n        if is_tangent(p, 3, 0):\n            min_degree = min(min_degree, degree)\n        if is_tangent(p, 5, 0):\n            min_degree = min(min_degree, degree)\n        if find_intersection(p, 1, 0):\n            min_degree = min(min_degree, degree)\n        if find_intersection(p, 3, 0):\n            min_degree = min(min_degree, degree)\n        if find_intersection(p, 5, 0):\n            min_degree = min(min_degree, degree)\n    return min_degree\n\ndef polynomial(x):\n    return x**3 + 2*x**2 - 3*x + 1\n\nprint(least_possible_degree(polynomial))"
  },
  {
    "example_id": 65,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nexpression = abs(math.sqrt(5) + 2j)\nprint(expression)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "a = 1\nfor n in range(1, 100):\n    a = a**2 - a\nprint(a)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-101.0",
      "-101.0",
      "-101.0",
      "-101.0",
      "-101.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\np = x**3 - 6*x**2 + 4*x - 8\np = p.subs(x, -3)\nprint(p)\np = p.subs(x, 4)\nprint(p)\np = p.subs(x, 5)\nprint(p)\np = p.subs(x, 7)\nprint(p)\np = p.subs(x, 12)\nprint(p)"
  },
  {
    "example_id": 68,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "3.0",
      "5.0",
      "2.0",
      "16.0",
      "8.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "import sympy\ny = sympy.Symbol('y')\nexpression = (6*y**3 + 5*y**2 - 16*y + 8) / (2*y + 3)\nprint(expression)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "458331.89022803114"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import sqrt\na, b, c, d = 1 - 5j, 2 - 4j, 3 - 3j, 4 - 2j\nexpression = abs((a + b) * (a + c) * (a + d) * (b + c) * (b + d) * (c + d))\nprint(expression)"
  },
  {
    "example_id": 70,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "361.0",
      "8836.0"
    ],
    "annotated_answers": [
      "4561.0"
    ],
    "solution": "f = lambda x: x**2\nprint(f(19))\nprint(f(94))"
  },
  {
    "example_id": 71,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "from math import ceil\nprint(ceil(3**100 + 2**100) / (ceil(3**96 + 2**96)))"
  },
  {
    "example_id": 72,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0",
      "303.0",
      "3.0",
      "303.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nc = Symbol('c', real=True)\n\nsol = solve(3 * c**2 - 36 * c + 7, c)\n\nprint(sol)"
  },
  {
    "example_id": 73,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 3 * y**2\nprint(x**3)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nexpression = x**2 - 13*x + 22\nsolution = solve(expression, x)\nprint(sum(solution))"
  },
  {
    "example_id": 75,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "105.00000000000001"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "x = [97]\nfor i in range(1, 9):\n    x.append(i / x[-1])\nprint(x[0] * x[1] * x[2] * x[3] * x[4] * x[5] * x[6] * x[7])"
  },
  {
    "example_id": 76,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def f(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return f(n - 1) + f(n - 2)\n\nn = 0\nwhile f(n) <= 1000000:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "136.0"
    ],
    "annotated_answers": [
      "272.0"
    ],
    "solution": "import math\nn = 17\nsum = 0\nwhile True:\n    sum += math.comb(n, 15) / math.comb(n, 17)\n    n += 1\n    if sum > 1:\n        break\nprint(sum)"
  },
  {
    "example_id": 78,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "3.0",
      "27.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import Symbol\n\nx = Symbol('x')\ny = Symbol('y')\n\nfraction = (8*x**3 + 27*y**3) / (2*x + 3*y)\n\nprint(fraction.as_numer_denom())"
  },
  {
    "example_id": 79,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import *\nx, y, z = symbols('x y z')\nexpression = x + 108 / ((x - y)**3 * (y - z)**2 * z)\nprint(expression)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import log10\ncount = 0\nfor a in range(10):\n    for b in range(10):\n        for c in range(10):\n            for d in range(10):\n                if a * log10(2) + b * log10(3) + c * log10(5) + d * log10(7) == 2005:\n                    count += 1\nprint(count)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0",
      "52.0",
      "51.0",
      "50.0",
      "49.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol\n\nz = Symbol('z')\nexpression = z**49 + z**50 + z**51 + z**52 + z**53\nprint(expression)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.6666666666666667"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def f(n):\n    if n < a:\n        return 4*n + 3\n    else:\n        return 7*n - 12\na = (12 - 7) / (4 - 7)\nprint(a)"
  },
  {
    "example_id": 83,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "192060.0",
      "6.0",
      "470449.0"
    ],
    "annotated_answers": [
      "66673.0"
    ],
    "solution": "from sympy import expand, sqrt, Rational\n\nexpression = expand((sqrt(2) + sqrt(3))**12)\nprint(expression)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "533.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "a = 2\nb = 3\nc = 4\nd = 5\nexpression = (a * d - b * c)**2 + (a * c + b * d)**2\nprint(expression)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.99999999"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "from scipy.optimize import minimize\n\ndef func(x):\n    return (x**7 + 32*x**2 + 128)/(x**3)\n\nresult = minimize(func, 1)\nprint(result.x)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.013671875"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "p = lambda x: 210 * (x + 10)**(-1) * (8 * (x - 4))**(-1) * (x + 6)**(-1)\nprint(p(10))"
  },
  {
    "example_id": 87,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a = 1\nfor i in range(1, 9):\n    a = 1 / (1 - a)\nprint(a**9)"
  },
  {
    "example_id": 88,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "c = 3\nf = lambda x: c * x / (2 * x + 3)\nprint(f(f(3)))"
  },
  {
    "example_id": 89,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4950.0"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 101):\n    sum += i\nsum -= 100\nprint(sum)"
  },
  {
    "example_id": 90,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for n in range(2, 100):\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n            if len(factors) == 2:\n                break\n    if len(factors) == 2:\n        break\nprint(n)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 3\ny = 2\nexpression = x**2 - 6 * x + y**2\nprint(expression)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "508.0"
    ],
    "solution": "a, b, c, d, e, f = [0] * 6\nfor i in range(5):\n    a, b, c, d, e, f = b, c, d, e, f, a\na, b, c, d, e, f = a + 6*b + 21*c + 36*d + 32*e + 720*f, b + 2*c + 6*d + 24*e + 240*f, c + 3*d + 9*e + 120*f, d + 4*e + 16*f, e + 5*f, f\nprint(a)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import symbols, solve\n\na = symbols('a', real=False)\nroots = solve((a**2 - 1) * (a**2 + 1) - a**3, a)\n\nsum = 0\nfor root in roots:\n    if len(set(root.conjugate() for root in roots)) == 2:\n        sum += root\n\nprint(sum)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import symbols, solve\n\nx = symbols('x')\nroots = solve(x**3 - 3*x - 5, x)\na, b, c = roots\nprint(a*b*c)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1050.0"
    ],
    "annotated_answers": [
      "1052.0"
    ],
    "solution": "n = 1000\nk = 50\nprint(n + k)"
  },
  {
    "example_id": 96,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 100):\n    for b in range(-100, 100):\n        if a**2 + a * b + b**2 == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-90.0"
    ],
    "annotated_answers": [
      "-48.0"
    ],
    "solution": "def f(x):\n    return x**4 - 154*x**3 + 407*x**2 - 452*x + 108\nprint(f(1))"
  },
  {
    "example_id": 98,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "8.0",
      "3.0",
      "3.0",
      "8.0"
    ],
    "annotated_answers": [
      "-81.0"
    ],
    "solution": "import sympy\n\nexpression = (sympy.S(3) + sympy.I * sympy.sqrt(3)) ** 8 + (sympy.S(3) - sympy.I * sympy.sqrt(3)) ** 8\nprint(expression)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6245047927124712"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "common_ratio = (3072 / 24) ** (1/10)\nprint(common_ratio)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "expression = 0\nfor i in range(1, 101):\n    expression += i\nprint(expression)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "7.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol\n\nx = Symbol('x')\nexpression = (5*x-7) / ((x-1)**3)\nprint(expression)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "11.0",
      "-6.0",
      "11.0",
      "-5.0",
      "11.0",
      "-6.0",
      "11.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import symbols, solve, Add, Mul\na1, b1, a2, b2, an, bn = symbols('a1 b1 a2 b2 an bn')\neq1 = Add(a1, Mul(10, b1, 1/Add(a1, b1))) - 5\neq2 = Add(b1, Mul(10, a1, 1/Add(a1, b1))) - 4\neq3 = Add(a2, Mul(10, b2, 1/Add(a2, b2))) - 5\neq4 = Add(b2, Mul(10, a2, 1/Add(a2, b2))) - 4\neq5 = Add(a2, Mul(10, b2, 1/Add(a2, b2))) - 5\neq6 = Add(b2, Mul(10, a2, 1/Add(a2, b2))) - 4\nans = solve((eq1, eq2, eq3, eq4, eq5, eq6), (a1, b1, a2, b2, an, bn))\nprint(ans)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "from sympy import Symbol, solve, Poly\n\na = Symbol('a', integer=True)\nb = Symbol('b', integer=True)\nx = Symbol('x')\n\nP = Poly(x**3 - a*x**2 + b*x - 65, x)\n\npairs = [(a, b) for a in range(101) for b in range(101)]\n\np = 0\nfor a, b in pairs:\n    z = solve(P.subs(x, 0), x)\n    p += sum(z)\n\nprint(p)"
  },
  {
    "example_id": 104,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import *\nx, y = symbols('x y')\neq1 = x + y - 2\neq2 = x**5 + y**5 - 82\nsol = solve((eq1, eq2), (x, y))\nprint(sum([x**2 + y**2 for x, y in sol]))"
  },
  {
    "example_id": 105,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol\n\na = Symbol('a', complex=True)\nb = Symbol('b', complex=True)\n\nsum = 0\nfor i in range(1, 101):\n    for j in range(1, 101):\n        for k in range(1, 101):\n            if abs(a) == abs(b) == abs(a + b):\n                sum += a / b\nprint(sum)"
  },
  {
    "example_id": 106,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "1.0",
      "7.0",
      "1.0",
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nsol = solve(x**3 - 14 * x**2 + 18 * x + 72, x)\nprint(sol)"
  },
  {
    "example_id": 107,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0",
      "5.0",
      "2.0",
      "2.0",
      "15.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import Min\nfrom sympy import Symbol\n\nx, y, z = Symbol('x'), Symbol('y'), Symbol('z')\nexpression = 2*x**2 + 2*y**2 + 5*z**2 - 2*x*y - 4*y*z - 4*x - 2*z + 15\nprint(Min(expression))"
  },
  {
    "example_id": 108,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import symbols, simplify\nfrom sympy.abc import z\n\nexpression = abs(z - 3)**2 + abs(z - 5 + 2*1j)**2 + abs(z - 1 + 1*1j)**2\nz_min = symbols('z_min')\nsol = simplify(expression.subs(z, z_min))\nprint(sol)"
  },
  {
    "example_id": 109,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from math import sqrt\n\ndef f(x):\n    return sqrt(5 * x**2 + 2 * x * sqrt(5) + 1) + x * sqrt(5)\n\nprint(min(f(x) for x in range(100)))"
  },
  {
    "example_id": 110,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "2.0",
      "1.0",
      "3.0",
      "-2.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\ncondition1 = (a + 1) * (b + 1) * (c + 1) - 1\ncondition2 = (a + 2) * (b + 2) * (c + 2) - 2\ncondition3 = (a + 3) * (b + 3) * (c + 3) - 3\nsol = sympy.solve([condition1, condition2, condition3], [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "import math\n\ndef f(x):\n    return math.floor(x)\n\ndef g(x):\n    return math.ceil(x)\n\ndef h(x):\n    return math.floor(x) + 1\n\ndef t(x):\n    return math.ceil(x) + 1\n\ndef a(x):\n    return math.ceil(x) - 1\n\ndef b(x):\n    return math.floor(x) - 1\n\nn = 0\ns = 0\nfor x in range(1, 10):\n    for y in range(1, 10):\n        for z in range(1, 10):\n            if f(x + f(y + z)) + f(f(x + y) + z) == 2 * y:\n                n += 1\n                s += f(5)\n\nprint(n * s)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import Symbol\na = Symbol('a')\nb = Symbol('b')\nc = Symbol('c')\nd = Symbol('d')\nx = Symbol('x')\n\nexpression = a * x**3 + b * x - c\nexpression2 = x**2 + b * x + c\n\nprint(expression.subs(x, expression2.args[0]))"
  },
  {
    "example_id": 113,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import log, Symbol\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nexpression = (log(a, b)**3 + log(b, c)**3 + log(c, a)**3).expand()\nprint(expression)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "2014.0"
    ],
    "solution": "from math import floor\n\na = 1\nb = 2\nc = 1\nwhile True:\n    if a % b!= 1:\n        break\n    a, b, c = b, c, a + b + c\n\nprint(a + b + c)"
  },
  {
    "example_id": 115,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0",
      "1.0",
      "7.5",
      "7.5",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from sympy import *\nf_1, f_2, p = symbols('f_1 f_2 p')\nr = sqrt(26 / (15 / 2 * (1 - (f_1 - p)**2 / (f_1 - f_2)**2)))\nprint(r)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nP = Poly(x**4 - 6*x**2 + 2, x)\nprint(P.subs(x, sqrt(1+sqrt(6))))"
  },
  {
    "example_id": 117,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-2.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1.0",
      "27.0",
      "111.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nexpression_1 = x**4 - 5*x**2 - x + 4\nexpression_2 = x**2 - 3*x\nsolutions = sp.solve([expression_1 - expression_2], x)\nprint(solutions)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0",
      "7.0",
      "0.0",
      "7.0",
      "14.0",
      "27.0",
      "44.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return (abs(x**2 - 6 * x + 8) + abs(x**2 + x - 6))\n\nprint(f(-1))\nprint(f(1))\nprint(f(2))\nprint(f(3))\nprint(f(4))\nprint(f(5))\nprint(f(6))"
  },
  {
    "example_id": 119,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol\n\nz = Symbol('z')\nexpression = z**3 + z + 1/z\nprint(expression)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 1\nb = 1\nc = 1\nexpression = (b*c)/(a**2) + (a*c)/(b**2) + (a*b)/(c**2)\nprint(expression)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = sympy.sqrt(x + sympy.sqrt(3 * x + 6)) + sympy.sqrt(x - sympy.sqrt(3 * x + 6)) - 6\nprint(expression.simplify())"
  },
  {
    "example_id": 122,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "def f(x, y):\n    if x == 1 and y == 2:\n        return 1\n    return x + y * f(y, x)\nprint(f(1, 2))"
  },
  {
    "example_id": 123,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-30.0",
      "5.0",
      "3.0",
      "3.0",
      "5.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Symbol, solve, Add, Mul\n\na1, b1 = Symbol('a1'), Symbol('b1')\na2, b2 = Symbol('a2'), Symbol('b2')\na3, b3 = Symbol('a3'), Symbol('b3')\na4, b4 = Symbol('a4'), Symbol('b4')\na5, b5 = Symbol('a5'), Symbol('b5')\n\nsolutions = [\n    solve((a1 + (17*a1 + 6*b1)/(a1**2 + b1**2) - 6, b1 + (6*a1 - 17*b1)/(a1**2 + b1**2)), (a1, b1)),\n    solve((a2 + (17*a2 + 6*b2)/(a2**2 + b2**2) - 6, b2 + (6*a2 - 17*b2)/(a2**2 + b2**2)), (a2, b2)),\n    solve((a3 + (17*a3 + 6*b3)/(a3**2 + b3**2) - 6, b3 + (6*a3 - 17*b3)/(a3**2 + b3**2)), (a3, b3)),\n    solve((a4 + (17*a4 + 6*b4)/(a4**2 + b4**2) - 6, b4 + (6*a4 - 17*b4)/(a4**2 + b4**2)), (a4, b4)),\n    solve((a5 + (17*a5 + 6*b5)/(a5**2 + b5**2) - 6, b5 + (6*a5 - 17*b5)/(a5**2 + b5**2)), (a5, b5)),\n]\n\nans = 0\nfor sol in solutions:\n    ans += Add(*[Mul(a, b) for a, b in sol])\nprint(ans)"
  },
  {
    "example_id": 124,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "405.0"
    ],
    "annotated_answers": [
      "405.0"
    ],
    "solution": "print(abs(-324 + 243j))"
  },
  {
    "example_id": 125,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "count = 0\nfor n in range(2, 2011):\n    product = 1\n    for i in range(1, n+1):\n        product *= 1 + 1/i\n    if int(product) == product:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5555555555555556"
    ],
    "annotated_answers": [
      "2150.0"
    ],
    "solution": "c2 = (1 + 5) / 9\nc1 = 1 / 3\nc0 = 1\nexpression = c2**2 + c1**2 + c0**2\nprint(expression)"
  },
  {
    "example_id": 127,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    for y in range(1, 101):\n        for z in range(1, 101):\n            if (x + 1/y) * (y + 1/z) * (z + 1/x) == 8:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3656.0"
    ],
    "annotated_answers": [
      "676.0"
    ],
    "solution": "def f(x):\n    return x**5 + 2*x**4 - 5*x**3 - 4*x**2 + x + 1\nprint(f(5))"
  },
  {
    "example_id": 129,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2932480.0"
    ],
    "annotated_answers": [
      "348.0"
    ],
    "solution": "def arithmetic_sequence(n, d):\n    return [n + i * d for i in range(n)]\n\ndef multiply_sequences(s1, s2):\n    return [s1[i] * s2[i] for i in range(len(s1))]\n\ns1 = arithmetic_sequence(1440, 20)\ns2 = arithmetic_sequence(1716, 20)\neighth_term = multiply_sequences(s1, s2)[7]\nprint(eighth_term)"
  },
  {
    "example_id": 130,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "4.0",
      "3.0",
      "3.0",
      "81.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import Symbol, solve\n\n# Let's assume that the box is rectangular with a, b, c being its sides.\n# The volume of the box is given by:\n# 216 = 2 * (a * b + b * c + c * a)\n# The surface area of the box is given by:\n# 2 * (a * b + b * c + c * a) + 2 * (a^2 + b^2 + c^2)\n# The surface area is also given by:\n# 2 * a * b + 2 * b * c + 2 * c * a + 2 * (a^2 + b^2 + c^2)\n# Let's try to find the smallest possible values of a, b, and c.\n# To do this, we can assume that a, b, and c are all positive integers.\n# We can then try to find the values of a, b, and c that minimize the surface area.\n# We can then find the volume of the box and compare it to 216.\n\n# We will use the Sympy library to solve the problem.\n# We will define the variables a, b, and c as symbols.\na, b, c = Symbol('a'), Symbol('b'), Symbol('c')\n\n# We will define the surface area of the box as a function of a, b, and c.\nsurface_area = 2 * (a * b + b * c + c * a) + 2 * (a**2 + b**2 + c**2)\n\n# We will define the volume of the box as a function of a, b, and c.\nvolume = 2 * (a * b + b * c + c * a)\n\n# We will use the solve function to find the values of a, b, and c that minimize the surface area.\n# We will give the solve function a list of equations to solve.\n# The first equation is the equation for the surface area of the box.\n# The second equation is the equation for the volume of the box.\n# We will give the solve function the value of 216 for the volume of the box.\nresult = solve([surface_area, volume - 216], [a, b, c])\n\n# We will print the result.\nprint(result)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "286.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "x = 2\ny = 3\nexpression = 2 * x**3 + (x * y)**3 + 2 * y**3\nprint(expression)"
  },
  {
    "example_id": 132,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = -0.5\ny = 0.5\nG = sum(x**i * y**(i-1) for i in range(1, 1000))\nG_prime = sum(y**i * x**(i-1) for i in range(1, 1000))\nprint(x + y)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "4.0",
      "2.0",
      "9.0",
      "4.0",
      "42.0",
      "243.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "from sympy import *\nx = symbols(\"x\")\nexpression = 9 * x**3 - 20 * x - 8 * sqrt(2)\nsolution = solve(expression, x)\nprint(solution)"
  },
  {
    "example_id": 134,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor n in range(3, 100):\n    for x1 in range(1, n + 1):\n        x2 = n - x1\n        if x1 * x2 + x2 * x1 > 0:\n            break\n    else:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor x in range(-100, 101):\n    for y in range(-100, 101):\n        for z in range(-100, 101):\n            if x**4 + y**4 + z**4 - 4*x*y*z == -1:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "763.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\np = sympy.Poly(x**3 + 313*x**2 - 77*x - 8, x)\nprint(p.coeff_monomial(x**20))"
  },
  {
    "example_id": 137,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "359.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\ndef sector_area(theta, r):\n    return r**2 * theta / 2\n\ndef arc_length(theta, r):\n    return r * theta\n\ndef find_optimal_theta(r):\n    optimal_theta = 0\n    optimal_area = 0\n    for theta in range(1, 360):\n        area = sector_area(theta, r)\n        if area > optimal_area:\n            optimal_theta = theta\n            optimal_area = area\n    return optimal_theta\n\nprint(find_optimal_theta(10))"
  },
  {
    "example_id": 138,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-45.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(5 * -9)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "numbers = [1, 2, 3, 4]\nsum_numbers = sum(numbers)\nsum_squares = sum(x**2 for x in numbers)\nmean = sum_numbers / len(numbers)\nprint(mean)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "-3.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\na, b, c, d = sympy.symbols('a b c d')\nexpression = a**2 + b**2 + c**2 + d**2\nconstraint = a + b + c + d - 1\nsolution = sympy.solve([expression, constraint], [a, b, c, d])\nprint(solution)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import Symbol\n\na, b, c, d, e = Symbol('a'), Symbol('b'), Symbol('c'), Symbol('d'), Symbol('e')\nexpression = (a**4 / (a - b) / (a - c) / (a - d) / (a - e)) + (b**4 / (b - a) / (b - c) / (b - d) / (b - e)) + (c**4 / (c - a) / (c - b) / (c - d) / (c - e)) + (d**4 / (d - a) / (d - b) / (d - c) / (d - e)) + (e**4 / (e - a) / (e - b) / (e - c) / (e - d))\nprint(expression)"
  },
  {
    "example_id": 142,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4004.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "sequence = [2001, 2002, 2003]\nfor i in range(3, 2004):\n    sequence.append(sequence[-2] + sequence[-1] - sequence[-3])\nprint(sequence[-1])"
  },
  {
    "example_id": 143,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nexpression = (x + 8) * (x + 5)**2 * (x + 1)**3 * x**5 * (x - 3)**2 / (x + 7) * (x + 5)**2 * x * (x - 3)**3 * (x - 4)\nprint(len(solve(expression, x)))"
  },
  {
    "example_id": 144,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "9.9498743710662"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import sqrt\nx = 0\ny = 0\nwhile x * x + y * y < 100:\n    x = x + 1\n    y = sqrt(100 - x * x)\nprint(x, y)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "553.0"
    ],
    "solution": "import math\n\ndef is_cubic_root(n):\n    return int(math.pow(n, 1.0 / 3))**3 == n\n\ndef find_cubic_roots(k):\n    roots = []\n    for i in range(1, k):\n        if is_cubic_root(i**3 + k):\n            roots.append(i)\n    return roots\n\ndef solve(k):\n    roots = find_cubic_roots(k)\n    max_value = 0\n    for i in range(1, 71):\n        if i in roots:\n            max_value = max(max_value, i / k)\n    return max_value\n\nprint(solve(100))"
  },
  {
    "example_id": 146,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "169.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 156 + 65j\nprint(abs(z))"
  },
  {
    "example_id": 147,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy.abc import x\nfrom sympy import factor\n\nexpression = x**8 + 98 * x**4 + 1\nfactored = factor(expression)\np, q = factored.args\nprint(p.subs(x, 1) + q.subs(x, 1))"
  },
  {
    "example_id": 148,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return (6 * x**3 + 4 * x**2 - 11 * x + 5) / (3 * x**3 - 15 * x + 20)\n\nprint(f(0))"
  },
  {
    "example_id": 149,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "expression = (1990**3 - 1000**3 - 990**3) / (1990 * 1000 * 990)\nprint(expression)"
  },
  {
    "example_id": 150,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = -1\ny = -1\nz = -1\nexpression = x**3 * y + y**3 * z + z**3 * x\nprint(expression)"
  },
  {
    "example_id": 151,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "128.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "N = 2**7\nprint(N)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "import math\n\na, b, c = 1, 1, 1\nexpression = (a + b + c) * ((a + b) ** 2 + (a + b + 4 * c) ** 2) / math.prod([a, b, c])\nprint(expression)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "67.0"
    ],
    "solution": "count = 0\nfor n in range(1, 101):\n    if (x**2 + x + 1).divides(x**(2*n) + 1 + (x + 1)**(2*n)):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "z = 2j\nw = 5j\nprint(abs(z + w))"
  },
  {
    "example_id": 155,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1700.0"
    ],
    "annotated_answers": [
      "1700.0"
    ],
    "solution": "for x in range(10, 1000000):\n    if x - 19 * (x // 19) == 9 and x - 89 * (x // 89) == 9:\n        print(x)\n        break"
  },
  {
    "example_id": 156,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, b, c = 1, 2, 3\nA, B = (b**2 - 4*a*c) / (4*a), (b**2 - 4*a*c) / (4*a)\nprint(A + B)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6336.0"
    ],
    "annotated_answers": [
      "1112.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\npolynomial = x**4 - 3*x**3 + 11*x**2 - 27*x + 3\nroots = solve(polynomial - 1, x)\nprint(polynomial.subs(x, -2) + 7*polynomial.subs(x, 6))"
  },
  {
    "example_id": 158,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "850.0"
    ],
    "solution": "import sympy\n\nr1, r2, r3, r4, r5 = sympy.symbols('r1 r2 r3 r4 r5')\n\nexpression = (1 / (r1 * r2.conjugate() + 1 / (r1 * r2.conjugate() + 1 / (r1 * r2.conjugate() + 1 / (r1 * r2.conjugate() + 1 / (r1 * r2.conjugate()))))))\nprint(expression)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "expression = 1\nfor n in range(1, 101):\n    expression += 1 / 3**n\nprint(expression)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor a in range(1, 100):\n    for b in range(1, 100):\n        for c in range(1, 100):\n            for d in range(1, 100):\n                if (2 * a**4 + a**3 * b + a**2 * c + a * d + 1) % (a**3 * b + a**2 * c + a * d + 1) == 0:\n                    count += 1\nprint(count)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13535.0"
    ],
    "annotated_answers": [
      "13535.0"
    ],
    "solution": "import math\nprint(math.floor((math.sqrt(7) + math.sqrt(5))**6))"
  },
  {
    "example_id": 162,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "1209.0"
    ],
    "solution": "def f(x):\n    if x == 5:\n        return 3\n    if x == 4:\n        return 2\n    if x == 2015:\n        return 4\n    if x == 2016:\n        return 5\n    return 2 * f(x + 1) + f(x - 1)\nprint(f(2015))"
  },
  {
    "example_id": 163,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "5.0",
      "3.0",
      "4.0",
      "3.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Symbol, factor\nx = Symbol('x')\nq = factor(x**6 - 4*x**5 + 3*x**3 + x**2 - 1)\nprint(q)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "import sympy\n\nz1 = 18 + 83 * 1j\nz2 = 18 + 39 * 1j\nz3 = 78 + 99 * 1j\n\nz = sympy.symbols('z')\n\nexpression = (z3 - z1) / (z2 - z1) * (z - z2) / (z - z3)\n\nsolution = sympy.solve(expression.real, z)\n\nprint(solution)"
  },
  {
    "example_id": 165,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "20.0"
    ],
    "annotated_answers": [
      "92.0"
    ],
    "solution": "from sympy import Symbol, Poly, solve, S\n\nd = Symbol('d', integer=True, positive=True)\nc = Symbol('c', integer=True, positive=True)\nb = Symbol('b', integer=True, positive=True)\na = Symbol('a', integer=True, positive=True)\n\nz0 = Symbol('z0', complex=True)\n\npolynomials = []\nfor k in range(5):\n    polynomial = 4 * z0**(4-k) + a * z0**(3-k) + b * z0**(2-k) + c * z0**(1-k) + d\n    polynomials.append(polynomial)\n\npolynomial_values = []\nfor polynomial in polynomials:\n    polynomial_values.append(polynomial.subs(z0, 1))\n\nprint(S(sum(polynomial_values)))"
  },
  {
    "example_id": 166,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 1\nb = 1\nc = 1\nd = 1\nexpression = (a * c + b * d)**2 + (b * c - a * d)**2\nprint(expression)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor k in range(1, 100):\n    if (k**2 - k) % 4!= 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 168,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nexpression = sympy.log(3, 2) * sympy.log(4, 3) * sympy.log(5, 4) * sympy.log(6, 5) * sympy.log(7, 6) * sympy.log(8, 7)\nprint(expression)"
  },
  {
    "example_id": 169,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 2009 + 9002 * 1j\nb = 2009\nc = 9002\nx = sympy.Symbol('x')\np = x**12 + a*x**8 + b*x**4 + c\np_factors = p.factor().as_real_imag()\nprint(len(p_factors[0]))"
  },
  {
    "example_id": 170,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "z = 100 + 75j\nprint(abs(z))"
  },
  {
    "example_id": 171,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "26.0",
      "1.0",
      "2.0",
      "27.0",
      "1.0",
      "2.0",
      "28.0",
      "1.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x', complex=True)\nroots = []\nfor i in range(1, 26):\n    root = 1/((x-i) + (x-25))\n    roots.append(root)\nsum_roots = sum(roots)\nprint(sum_roots)"
  },
  {
    "example_id": 172,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef dist(x, y, z):\n    return np.sqrt(x**2 + y**2 + z**2)\n\ndef distance(x, y, z):\n    return min(dist(0, 0, 0), dist(0, 0, z), dist(0, x, 0), dist(0, y, 0), dist(x, 0, 0), dist(y, 0, 0), dist(z, 0, 0), dist(x, y, 0), dist(x, 0, z), dist(0, y, z), dist(x, y, z))\n\ndef curve(x, y, z):\n    return x * z**2 == 2\n\ndef find(x, y, z):\n    return curve(x, y, z) and distance(x, y, z) == min(distance(x, y, z), distance(x + 1, y, z), distance(x - 1, y, z), distance(x, y + 1, z), distance(x, y - 1, z), distance(x, y, z + 1), distance(x, y, z - 1))\n\ndef find_all():\n    for x in range(1, 100):\n        for y in range(1, 100):\n            for z in range(1, 100):\n                if find(x, y, z):\n                    print(x, y, z)\n\nfind_all()"
  },
  {
    "example_id": 173,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 2\nx1 = -a\ny1 = a**2\nx2 = a\ny2 = a**2\n\nc1 = (x1*y2 - y1*x2) / (x1*x2 + y1*y2)\nc2 = (x2*y1 - y2*x1) / (x1*x2 + y1*y2)\nc3 = a\n\nprint(c1 + c2 + c3)"
  },
  {
    "example_id": 174,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "384.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "expression = 2009**4 - 4 * 2007**4 + 6 * 2005**4 - 4 * 2003**4 + 2001**4\nprint(expression)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "1000.0"
    ],
    "solution": "count = 0\nfor m in range(1, 1001):\n    for n in range(1, m + 1):\n        if m * n <= m + n:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "560.9999999999999"
    ],
    "annotated_answers": [
      "561.0"
    ],
    "solution": "a = [1, 1]\nb = [1, 3]\nfor i in range(2, 33):\n    a.append(a[i - 1] + a[i - 1]**2 / a[i - 2])\n    b.append(b[i - 1] + b[i - 1]**2 / b[i - 2])\nprint(b[32] / a[32])"
  },
  {
    "example_id": 177,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = -1\nb = -1\nexpression = a**2 + b**2\nprint(expression)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 2009\nb = 2011\ninterval_length = b - a\nprint(interval_length)"
  },
  {
    "example_id": 179,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "5.0",
      "71.0",
      "4.0",
      "528.0",
      "3.0",
      "1408.0",
      "2.0",
      "56.0",
      "2259.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nexpression = (1/(7 - x) * (1 + x) * (1 - x)) + (3*x**2 - 18*x - 22)/(x**2 - 1) * (x - 7) + 3/(x - 2) - 3/(x - 1) * (x - 2)\nprint(sp.solve(expression, x))"
  },
  {
    "example_id": 180,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.095903274289385"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\nx = math.log(10, 3)\nprint(x)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nexpression = (2*x**2+x+3) / (x**2+x+1) - (2*x+1) / (x+1)\nprint(expression.expand())"
  },
  {
    "example_id": 182,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "256.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "x = 2 ** 2 ** 2\nprint(x)\nprint(x**2)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0",
      "9.0",
      "20829.0",
      "18.0",
      "443.0",
      "54.0",
      "1.0",
      "3.0",
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import *\n\nx = Symbol('x')\n\nsol1 = solve(x**3 + 5*x**2 + 4*x - 19, x)\nsol2 = solve(x**3 - 3*x**2 - 2*x - 1, x)\n\nprint(sol1[0] + sol1[1] + sol1[2] + 1 + sol2[0] + sol2[1] + sol2[2] + 1)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import sympy as sp\na, b, c = sp.symbols('a, b, c')\nexpression = a**3 + b**3 + c**3\nprint(expression.subs({a: 2*a + 5, b: 2*b + 5, c: 2*c + 5}))"
  },
  {
    "example_id": 185,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\na = Symbol('a')\nexpression = x**6 + 3*a*x**5 + (3*a**2 + 3)*x**4 + (a**3 + 6*a)*x**3 + (3*a**2 + 3)*x**2 + 3*a*x + 1\nsol = solve(expression, x)\nprint(sol)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "expression1 = (x - 2)**4 - (x - 2)\nexpression2 = x**2 - k * x + k\ncommon_roots = expression1.roots & expression2.roots\nk = common_roots[0]\nprint(k)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "63.999999999999986"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "import cmath\n\nexpression = abs((-2-2*cmath.sqrt(3)*1j)**3)\nprint(expression)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "145544850.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\n\ndef factorize(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve(P, x):\n    return P(x)\n\ndef main():\n    A = 0\n    B = 0\n    C = 0\n    for a in range(1, 100):\n        for b in range(1, 100):\n            for c in range(1, 100):\n                P = (lambda x: (a**2 * b + b**2 * c + c**2 * x) * math.log(x))\n                if is_prime(solve(P, 5)):\n                    A += a\n                    B += b\n                    C += c\n    print(A + B + C)\n\nmain()"
  },
  {
    "example_id": 189,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "from math import prod\nprint(prod([10, 4/3, 6/4, 8/5, 10/6, 12/7, 14/8, 16/9, 18/10]))"
  },
  {
    "example_id": 190,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 2\ny = 3\nz = 4\nprint(x * y + y * z + z * x)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "36.0",
      "25.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\nexpression1 = sympy.log(x - y, 6) + sympy.log(x + y, 6)\nexpression2 = sympy.log(y, 5) * x\nresult1 = sympy.solve(expression1 - 2, x)\nresult2 = sympy.solve(expression2 - 2, x)\nprint(result1[0])\nprint(result2[0])"
  },
  {
    "example_id": 192,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "743.0"
    ],
    "solution": "count = 0\nfor i in range(1, 101):\n    if sum(range(19, 92, 10)) == 546:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "16.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from scipy.optimize import minimize\n\ndef objective(x):\n    a, b, c, d = x\n    return (a + b + c + d) * (1 / a + 1 / b + 1 / c + 1 / d)\n\nresult = minimize(objective, [1, 1, 1, 1])\nprint(result)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z = 64/5 - 48j/5\nprint(abs(z))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import gcd\n\ndef count_roots(a3, a2, a1):\n    count = 0\n    for i in range(1, 7):\n        if gcd(i, a3) == 1 and gcd(i, a2) == 1 and gcd(i, a1) == 1:\n            count += 1\n    return count\n\nprint(count_roots(1, 0, -14))"
  },
  {
    "example_id": 196,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "for n in range(1, 1000000):\n    r = n / 1000.0\n    if (n + r)**3 % 1 == 0:\n        print(n)\n        break"
  },
  {
    "example_id": 197,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "10.0",
      "2.0",
      "10.0",
      "1.0",
      "11.0",
      "2.0"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "from math import factorial\nfrom sympy import Symbol\n\nx = Symbol('x')\nroots = [Symbol('r_%d' % i) for i in range(1, 99)]\nexpression = sum([(root**2/(root + 1)) for root in roots])\nprint(expression)"
  },
  {
    "example_id": 198,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.96"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y, z = 0.3, 0.3, 0.4\nexpression = 10 * x**2 + 10 * y**2 + z**2\nprint(expression)"
  },
  {
    "example_id": 199,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "def e(x):\n    return x**2\n\ndef o(x):\n    return x**2\n\ndef f(x):\n    return e(x) + o(x)\n\nprint(f(2))"
  },
  {
    "example_id": 200,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "199.0"
    ],
    "solution": "count = 0\nfor x in range(1, 10000):\n    if x**2 + 10000 * x <= 10000 * x:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0",
      "42.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from math import gcd\n\ndef gcd_list(L):\n    if len(L) == 1:\n        return L[0]\n    else:\n        return gcd(L[0], gcd_list(L[1:]))\n\ndef is_integer(n):\n    return n % 1 == 0\n\ndef is_integer_root(n):\n    return is_integer(n) and n % 1 == 0\n\ndef largest_possible_integer_roots(n):\n    roots = []\n    for i in range(1, n + 1):\n        root = i\n        while not is_integer_root(root):\n            root += 1\n        roots.append(root)\n    return len(roots)\n\ndef largest_possible_integer_roots_using_gcd(n):\n    roots = []\n    for i in range(1, n + 1):\n        root = i\n        while not is_integer_root(root) or not is_integer(gcd(n, root)):\n            root += 1\n        roots.append(root)\n    return len(roots)\n\nprint(largest_possible_integer_roots(42))\nprint(largest_possible_integer_roots_using_gcd(42))"
  },
  {
    "example_id": 202,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = (14 - 8) / (7 - 5)\nb = 8 - a * 5\nprint(a - b)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "158.33333333333334"
    ],
    "annotated_answers": [
      "-80.0"
    ],
    "solution": "c = -(-8**3 + 4**3 - 3**3) / 3\nprint(c)"
  },
  {
    "example_id": 204,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8080.0"
    ],
    "annotated_answers": [
      "8080.0"
    ],
    "solution": "x = 1\ny = 1\nexpression = (x + 1/y) * (x + 1/y + 2018) + (y + 1/x) * (y + 1/x + 2018)\nprint(expression)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.000000000000001"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 3\nfor i in range(12344):\n    x = (1 + x) / (1 - x)\nprint(x)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "2.0",
      "4.0",
      "11.0",
      "2.0",
      "4.0",
      "11.0",
      "4.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "from sympy import *\n\n# Side lengths\na = 2\nb = 3\nc = 1\nd = 4\n\n# Circumcircle\nx, y = symbols('x, y')\ne = x**2 + y**2 - 1\n\n# Side CD\nf = x - y\ng = x + y\n\n# Area\nh = a**2 * b - c**2\n\n# Expression\nexpression = simplify(h * (f**2 + g**2 - e) / d)\n\n# Solution\nprint(expression)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "S = sum(1.0 / 2**i for i in range(1, 100))\nprint(S)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-63.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nprint(a + b + c)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import pi\nfrom sympy import *\n\n# A = 3, B = 5, C = 6, D = 7, E = 9\nA = 3\nB = 5\nC = 6\nD = 7\nE = 9\n\n# The sums of the numbers at the ends of the line segments\n# AB, BC, CD, DE, EA form an arithmetic sequence\n\n# The middle term is 7\nprint(7)"
  },
  {
    "example_id": 210,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 3\ny = 2\nz = 1\nexpression = (x + y) / z + (y + z) / x + (x + z) / y\nprint(expression)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import math\n\ndef upperhyper(x):\n    return 3 * math.sqrt((x + 1) ** 2 / 4 - 1) + 3\n\ndef lowerhyper(x):\n    return -3 * math.sqrt((x + 1) ** 2 / 4 - 1) + 3\n\ncount = 0\nfor i in range(-10, 11):\n    for j in range(-10, 11):\n        if (i - 1) ** 2 / 4 - 1 == j ** 2 / 4 - 1:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 212,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-245.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "c = 55 - 30 * 10\nprint(c)"
  },
  {
    "example_id": 213,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "340.0"
    ],
    "solution": "count = 0\nfor n in range(1, 1000):\n    if n < 1000 and (n//2)**2 == n:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def sgn(x):\n    if x < 0:\n        return -1\n    elif x == 0:\n        return 0\n    else:\n        return 1\n\nsum = 0\nfor n in range(-10, 21):\n    sum += sgn(n)\nprint(sum)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0414093201713376",
      "64"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import expand_mul, factorial\n\ndef max_coefficient(n):\n    return expand_mul(factorial(n))\n\nprint(max_coefficient(50))"
  },
  {
    "example_id": 216,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "41.0",
      "2.0",
      "144.0",
      "2.0",
      "41.0",
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\ny = Symbol('y')\n\ndef distance(point1, point2):\n    return (point1[0] - point2[0])**2 + (point1[1] - point2[1])**2\n\neq1 = x**2 + y**2 + 6*x - 24*y + 72\neq2 = x**2 - y**2 + 6*x + 16*y - 46\n\nsolutions = solve([eq1, eq2], [x, y])\n\nsum = 0\nfor solution in solutions:\n    sum += distance(solution, (-3, 2))\n\nprint(sum)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "36.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1971.0",
      "2.0",
      "27.0",
      "1583.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "from sympy import roots\nfrom sympy.abc import x\nr, s, t = roots(x**3 + 9*x**2 - 9*x - 8)\nprint((r + s)*(s + t)*(t + r))"
  },
  {
    "example_id": 218,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "k = 0\nfor i in range(29, 100):\n    for j in range(2*i - 43, 100):\n        if (i - j) % 3 == 0:\n            k = i\n            print(k)\n            break\n    if k!= 0:\n        break"
  },
  {
    "example_id": 219,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "n = 0\nfor i in range(1, 1000):\n    sum = 0\n    for j in range(1, i + 1):\n        sum += j * (i - j + 1)**2\n    if sum == 48 + 49 * i:\n        n = i\n        break\nprint(n)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "a = [1, 4, 15, 2]\nb = [1, 4, 16, 2]\nc = [1, 4, 15, 2, 17]\nprint(c[4])"
  },
  {
    "example_id": 221,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0",
      "2.0",
      "21.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "-5.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nroots = solve(x**6 + x**4 - 115*x**3 + x**2 + 1, x)\nprint(roots)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "401.0"
    ],
    "solution": "def f(x):\n    return 6 * x - 2005\n\nn = 1\nwhile f(n)!= 6 * n - 2005:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 223,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "a, b, c, d = 0.25, 0.25, 0.5, 0.5\nexpression = 1 / a + 1 / b + 4 / c + 16 / d\nprint(expression)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from math import factorial\n\n\ndef g(x):\n    return x**2 - 11*x + 30\n\n\ndef f(x):\n    return x**4 - 14*x**3 + 62*x**2 - 91*x + 42\n\n\ndef solve(f):\n    result = 0\n    for k in range(1, 101):\n        for n in range(1, 101):\n            for m in range(1, 101):\n                if g(f(k)) == g(n)**2 - 14*g(n)*g(m) + 62*g(n)**2 - 91*g(n)*g(m) + 42*g(m)**2:\n                    result += k**n * m**m\n    return result\n\n\nprint(solve(f))"
  },
  {
    "example_id": 225,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def f(x):\n    return 2 * x\n\nprint(f(12) - f(2))"
  },
  {
    "example_id": 226,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    for y in range(1, 101):\n        fx = lambda z: z**2 - 2\n        fy = lambda z: z**2 - 2\n        fxy = lambda z: z**2 - 2\n        if fx(x) * fy(y) == fxy(x * y):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import solve, Symbol\nn = Symbol('n', integer=True, positive=True)\na = Symbol('a', integer=True)\n\nsolution = solve(a**n - 1, a)\nprint(max(solution))"
  },
  {
    "example_id": 228,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\n\na, b, c, d, e = sympy.symbols(\"a, b, c, d, e\")\nexpression = a**3 / (a - b) / (a - c) / (a - d) / (a - e) + b**3 / (b - a) / (b - c) / (b - d) / (b - e) + c**3 / (c - a) / (c - b) / (c - d) / (c - e) + d**3 / (d - a) / (d - b) / (d - c) / (d - e) + e**3 / (e - a) / (e - b) / (e - c) / (e - d)\nprint(expression)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "4.0",
      "2.0",
      "616.0",
      "3.0",
      "2.0",
      "4.0",
      "2.0",
      "304.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "47440.0"
    ],
    "annotated_answers": [
      "254.0"
    ],
    "solution": "from sympy import *\na, b, c, d, e, f = symbols('a b c d e f')\nexpression = (a + b + c)**2 + (b + c + d)**2 + (c + d + e)**2 + (d + e + f)**2\nexpression = expand(expression)\nexpression = expression.subs({a: 4, b: 152})\nprint(expression)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "3.0",
      "0.333333333333333",
      "5.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "3.0",
      "0.333333333333333"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import sqrt\n\nexpression = (5 / (sqrt(3) + sqrt(2)) + 1 / (sqrt(3) - sqrt(2)))**(1/3)\nprint(expression)\nprint(expression.expand())"
  },
  {
    "example_id": 231,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "112.0"
    ],
    "solution": "a = [2, 5, 8]\nfor n in range(3, 2023):\n    a.append(a[-1] + a[-2] + a[-3])\n    a[-1] %= 11\nprint(a[2018] * a[2020] * a[2022])"
  },
  {
    "example_id": 232,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "minimum = 0\nfor x in range(0, 2):\n    for y in range(0, 2):\n        if x**2 + y**2 == 4 * x * y:\n            minimum = min(minimum, x**2 + y**2)\nprint(minimum)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 0\ng = 0\nfor i in range(4):\n    a += 1\n    g += 1\nprint(a + g)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = -3\ny = 5\nprint(x**2 + y**2)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "omega = -1 + 4j\nexpression = abs(omega**2 + 2*omega - 8)\nprint(expression)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0",
      "32.0"
    ],
    "annotated_answers": [
      "154.0"
    ],
    "solution": "from math import log2\n\nN1 = 2**(1 + int(log2(18)))\nN2 = 2**(1 + int(log2(17)))\n\nprint(N1, N2)"
  },
  {
    "example_id": 237,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import floor\n\ndef area(x, y):\n    if floor(x) * floor(y) == 16:\n        return 1\n    else:\n        return 0\n\nprint(sum(area(x, y) for x in range(1, 101) for y in range(1, 101)))"
  },
  {
    "example_id": 238,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "C = 0\nD = 0\nfor x in range(-10, 10):\n    if x!= -8 and x!= 3:\n        if (4 * x - 23) / (x**2 + 5 * x - 24) == (C / (x - 3) + D / (x + 8)):\n            C = C * x + C\n            D = D * x + D\nprint(C * D)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "18.0",
      "2.0",
      "32.0",
      "209.0",
      "2.0",
      "2.0",
      "14.0",
      "2.0",
      "14.0",
      "49.0"
    ],
    "annotated_answers": [
      "175.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\nexpression = sympy.Max(x**2 + y**2 + 2*x*y - 14*x - 14*y + 49, \n                        x**2 - 18*x + y**2 - 32*y + 91 - 300)\nprint(expression)"
  },
  {
    "example_id": 240,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2007.0"
    ],
    "solution": "from math import floor\n\n\ndef f(x):\n    if x < 0.5:\n        return 2 * x\n    else:\n        return 2 - 2 * x\n\n\ndef f_power(x, n):\n    if n == 0:\n        return x\n    elif n % 2 == 0:\n        return f(f_power(x, n // 2))\n    else:\n        return f(f_power(x, n // 2)) * f(x)\n\n\ndef count_values(n):\n    count = 0\n    for x in range(101):\n        if f_power(x / 100, n) == 0.5:\n            count += 1\n    return count\n\n\nprint(count_values(2005))"
  },
  {
    "example_id": 241,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "count = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        if (a - 24)**2 - b * (b - 36) == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 242,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
  },
  {
    "example_id": 243,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0",
      "9.0",
      "97.0",
      "27.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "107637.0",
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import solve, symbols, Eq\n\nc = symbols('c', integer=True)\ny = symbols('y', integer=True)\n\neq1 = Eq(3*y**3 - 13*y**2 + 11*y + 23, 3*y + 2)\neq2 = Eq(y**2 - 5*y + c, 0)\n\nsol1 = solve(eq1, y)\nsol2 = solve(eq2, c)\n\nprint(sol1)\nprint(sol2)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import *\na, b, c = symbols('a,b,c')\nexpression = a**4 + b**4 + c**4\nconstraints = [a + b + c == 0, a**2 + b**2 + c**2 == 4]\nsolve(constraints, a, b, c)\nprint(expression.subs(dict(solve(constraints, a, b, c))))"
  },
  {
    "example_id": 245,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-78740.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    return x**7 + 5*x**3 + 10\n\nprint(f(-5))"
  },
  {
    "example_id": 246,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.9999999999999998"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import sqrt\nexpression = abs(-1 + sqrt(3) * 1j)\nprint(expression)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Symbol, simplify\nx = Symbol('x', positive=True)\nexpression = (x + 1/x)**6 - (x**6 + 1/x**6) - 2\nexpression /= (x + 1/x)**3 + (x**3 + 1/x**3)\nprint(simplify(expression))"
  },
  {
    "example_id": 248,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import symbols\nx, y = symbols('x y')\nf = x * (1 - y**2)**0.5 + y * (1 - x**2)**0.5\nprint(f.subs({x: -1, y: -1}))"
  },
  {
    "example_id": 249,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.62600113499065"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import math\n\n# distance between foci\nprint(math.sqrt(50**2 + 22**2))"
  },
  {
    "example_id": 250,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "6.0",
      "37.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x, y')\nf1 = -2 * (x - 3)**2 - 28\nf2 = -2 * y**2 + 28\nslope = sympy.solve(f1 - f2, y)[0]\nprint(slope)"
  },
  {
    "example_id": 251,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "def f(x):\n    return x * x\n\nprint(f(5))"
  },
  {
    "example_id": 252,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 1\nb = 1\nc = 1\nwhile a + b + c < a * b * c:\n    a += 1\n    b += 1\n    c += 1\nprint(a * b * c)"
  },
  {
    "example_id": 253,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.141592653589793"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\nprint(pi)"
  },
  {
    "example_id": 254,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "819.0"
    ],
    "solution": "a = 1\nfor i in range(2, 100):\n    if a**2 - a - 1 == 0:\n        a = a**2 - a - 1\n    else:\n        a = a**2 - a - 1\nprint(a)"
  },
  {
    "example_id": 255,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor x in range(0, 100):\n    if x**5 == x**4 + 72*x**3:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2048.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "a = 16\nexpression = a**3 - 12 * a**2 + a * 64\nprint(expression)"
  },
  {
    "example_id": 257,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "504.0"
    ],
    "solution": "a = 2016\nb = 1\nwhile a > 1:\n    b = (a + b) // 2\n    a = a - b\nprint(a)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "-8.0",
      "6.0",
      "2.0",
      "-4.0",
      "3.0",
      "2.0",
      "4.0",
      "4.0",
      "3.0",
      "2.0",
      "8.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import Symbol, Eq, solve\n\nx = Symbol('x')\ny = Symbol('y')\n\n# circle equation\ncircle_eq = Eq(x**2 + y**2, 2)\n\n# parabola equation\nparab_eq = Eq(y**2, 8*x)\n\n# solve equations simultaneously\nsol = solve((circle_eq, parab_eq), (x, y), dict=True)\n\n# find area of the quadrilateral\narea = 0\nfor soln in sol:\n    x1, y1 = soln[x], soln[y]\n    area += abs(x1*y1)\n\nprint(area)"
  },
  {
    "example_id": 259,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 0.5\nb = 0.5\nexpression = (a + b) / (a * b + 1)\nprint(expression)"
  },
  {
    "example_id": 260,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "437.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "count = 0\nfor x in range(1, 20):\n    for y in range(1, 20):\n        for z in range(1, 20):\n            if set([pow(1, x), pow(1 + 1, y), z]) == set([pow(1, x), pow(1 + 1, y)]):\n                count += 1\nprint(count)"
  },
  {
    "example_id": 261,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "P = 40\nQ = 1\nR = 1\nS = 10\nexpression = abs(S)\nprint(expression)"
  },
  {
    "example_id": 262,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88.0"
    ],
    "annotated_answers": [
      "913.0"
    ],
    "solution": "fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\nprint(sum(fib[:10]))"
  },
  {
    "example_id": 263,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nprint(a / b + b / a + a / c + c / a + b / c + c / b)"
  },
  {
    "example_id": 264,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "212.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "n = 0\nwhile True:\n    n += 1\n    if sum(range(1, n+1, 2)) + 212 == sum(range(1, n+1, 2)) + n:\n        print(n)\n        break"
  },
  {
    "example_id": 265,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def f(x):\n    return max(abs(x + 15), abs(x + 12), abs(x + 8), abs(x - 1), abs(x - 3), abs(x - 19))\n\nprint(min(f(x) for x in range(-20, 20)))"
  },
  {
    "example_id": 266,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "4.0",
      "3.0",
      "4.0",
      "3.0",
      "3.0",
      "8.0",
      "9.0",
      "16.0"
    ],
    "annotated_answers": [
      "-256.0"
    ],
    "solution": "from sympy import Symbol, solve, log\na = Symbol('a')\nb = Symbol('b')\nx = Symbol('x')\neq = 8*x**3 + 4*a*x**2 + 2*b*x + a\nroots = solve(eq, x)\nprint(sum([log(root, 2) for root in roots]))"
  },
  {
    "example_id": 267,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0",
      "7.0",
      "5.0",
      "6.0",
      "7.0",
      "6.0",
      "5.0",
      "7.0",
      "7.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "import sympy as sym\n\nexpression = sym.prod([sym.sqrt(5) + sym.sqrt(6) + sym.sqrt(7),\n                        -sym.sqrt(5) + sym.sqrt(6) + sym.sqrt(7),\n                        sym.sqrt(5) - sym.sqrt(6) + sym.sqrt(7),\n                        sym.sqrt(5) + sym.sqrt(6) - sym.sqrt(7)])\n\nprint(expression)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "w1 = 32 + 170j\nw2 = -7 + 64j\nw3 = -9 + 200j\nw4 = 1 + 27j\nw5 = -14 + 43j\n\nz1 = 32 + 170j\nz2 = -7 + 64j\nz3 = -9 + 200j\nz4 = 1 + 27j\nz5 = -14 + 43j\n\nsum = (z1 - w1) + (z2 - w2) + (z3 - w3) + (z4 - w4) + (z5 - w5)\nprint(sum)"
  },
  {
    "example_id": 269,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\ndegree = 0\nfor x in range(min(a, b, c), max(a, b, c)):\n    if a - x == 0 or b - x == 0 or c - x == 0:\n        continue\n    degree += 1\nprint(degree)"
  },
  {
    "example_id": 270,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "990.0"
    ],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "import math\na = 0\nb = 0\nfor i in range(1, 1001):\n    a += math.ceil(math.log2(i))\n    b += math.floor(math.log2(i))\nprint(a - b)"
  },
  {
    "example_id": 271,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\nfor a in range(1, 100):\n    for b in range(1, 100):\n        if math.sqrt(a * b**2 + b) == math.sqrt(a * b**2 + b**2):\n            print(a, b)"
  },
  {
    "example_id": 272,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1995.0"
    ],
    "annotated_answers": [
      "3980025.0"
    ],
    "solution": "from math import log, sqrt\n\nx = 1995\nexpression = x ** log(x, 1995)\nprint(expression)"
  },
  {
    "example_id": 273,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "2.0",
      "9.0",
      "3.0",
      "27.0",
      "3.0",
      "9.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\ny = (27*x**2 + 9*x + 3)/(27*x**3 + 9*x**2 + 3*x + 1)\nprint(y.as_numer_denom())"
  },
  {
    "example_id": 274,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "375.0"
    ],
    "annotated_answers": [
      "898.0"
    ],
    "solution": "x = [211, 375, 420, 523]\nfor n in range(5, 531):\n    x.append(x[-1] - x[-2] + x[-3] - x[-4])\nx.append(x[-1] - x[-2] + x[-3] - x[-4])\nx.append(x[-1] - x[-2] + x[-3] - x[-4])\nprint(sum(x[531:534]) + sum(x[753:756]) + sum(x[975:978]))"
  },
  {
    "example_id": 275,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor a in range(1, 1000000):\n    b = 17 * a / 2 - a\n    if a > b and a % 1 == b % 1 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 276,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nexpression = x**4 - 2*x**2 - 7\nprint(len(solve(expression, x)))"
  },
  {
    "example_id": 277,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 21 - 20 * 1j\nb = 29\nprint(abs(a))"
  },
  {
    "example_id": 278,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "327680.0"
    ],
    "annotated_answers": [
      "327680.0"
    ],
    "solution": "def an(n):\n    return 4 * n**3 + 6 * n**2 + 4 * n + 1\n\nsum = 0\nfor n in range(8, 24):\n    sum += an(n)\nprint(sum)"
  },
  {
    "example_id": 279,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8110247585828749"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 0.8110247585828749\nprint(a)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3234496.146776405"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "a = 27\nb = 99\nratio = b / a\na_9 = ratio**9 * a\nprint(a_9)"
  },
  {
    "example_id": 281,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "expression = x**100\npolynomial = x**8 - x**6 + x**4 - x**2 + 1\nremainder = expression % polynomial\nprint(remainder)"
  },
  {
    "example_id": 282,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "3.0",
      "10.0",
      "9.0",
      "307.0",
      "432.0",
      "126249.0",
      "432.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\neq1 = (2*x**2 - 3*x)/(x**2 - x) + 5*x - 11\neq2 = 3*x**2 + 5*x + 2/(x**2 - 1)\nsol = sympy.solve(eq1 - eq2, x)\nprint(sol)"
  },
  {
    "example_id": 283,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import cos, sin, tan\n\nx = 0\nexpression = cos(x)**3 + cos(x)**2\nprint(expression)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1794.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "x = 162\ny = 1250\nz = x + 3 * (y - x) / 2\nprint(z)"
  },
  {
    "example_id": 285,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import sqrt\n\ndef max_value(x, y):\n    if x**2 + y**2 == 1:\n        return (x + y)**2\n    else:\n        return 0\n\nprint(max_value(1, 1))"
  },
  {
    "example_id": 286,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "7.0",
      "2.0",
      "2.0",
      "1.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import symbols, Abs\nz1, z2 = symbols('z1 z2')\nexpression = Abs(2*z1 + 7*z2) / Abs(2*z1 - 7*z2)\nprint(expression)"
  },
  {
    "example_id": 287,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    for y in range(1, 101):\n        if x**2 == y and y == -x:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 288,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "def f(x):\n    return 4 * x + 2 * x**2\n\nprint(f(8))"
  },
  {
    "example_id": 289,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "135.0",
      "2.0",
      "27.0",
      "29.0",
      "2.0",
      "1.0",
      "3.0",
      "3.0",
      "3.0",
      "135.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sp\nx = sp.symbols('x')\nexpression = sp.solveset(x**3 + 3*x + 5, x)\nprint(expression)"
  },
  {
    "example_id": 290,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a = 7\nb = 4\nprint(abs(a * b))"
  },
  {
    "example_id": 291,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 1\nwhile True:\n    try:\n        x += 1\n        if (x + 5) * (x + 2) / (x + 1) < (x + 1) * (x + 2) / (x + 5):\n            continue\n        else:\n            print(x)\n            break\n    except:\n        print(x)\n        break"
  },
  {
    "example_id": 292,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "d = 1 / (1 - 2)\nprint(d)"
  },
  {
    "example_id": 293,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.999989999944304",
      "-7.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "sum = 0\nfor k in range(2, 1000000):\n    sum += (k - 3) / (k * (k**2 - 1))\nprint(sum)"
  },
  {
    "example_id": 294,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "23.0",
      "-18.0",
      "-24.0",
      "108.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import Symbol, poly, factor\nx = Symbol('x')\np = poly((x**23 + 23 * x**17 - 18 * x**16 - 24 * x**15 + 108 * x**14) / (x**4 - 3 * x**2 - 2 * x + 9))\nprint(p.coeffs())"
  },
  {
    "example_id": 295,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from fractions import Fraction\n\na1 = Fraction(2, 3)\na2 = Fraction(1, 2)\n\nroots = set()\n\nfor i in range(1, 4):\n    for j in range(1, 4):\n        if a1**i * a2**j == -Fraction(4, 1):\n            roots.add(Fraction(i, j))\n\nprint(len(roots))"
  },
  {
    "example_id": 296,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        if a**2 - 2 == (b + 2)**2:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 297,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import fibonacci\nsum = 0\nfor n in range(1, 100):\n    sum += fibonacci(n+1) / (fibonacci(n) * fibonacci(n+2))\nprint(sum)"
  },
  {
    "example_id": 298,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "440.0"
    ],
    "solution": "a = 3\nc1 = 4\nc2 = 12\nprint(c1 + c2)"
  },
  {
    "example_id": 299,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "from sympy import symbols, expand, simplify\nr, s, t = symbols('r s t')\nexpression = expand(r**2 * s**2 + s**2 * t**2 + t**2 * r**2)\nprint(simplify(expression))"
  },
  {
    "example_id": 300,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import sqrt\nexpression = (5 + sqrt(3)) * (5 - sqrt(3))\nprint(expression)"
  },
  {
    "example_id": 301,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8599999999999999"
    ],
    "annotated_answers": [
      "0.61"
    ],
    "solution": "# Find the maximum error\nM = max(abs(int(a_i) - a_i) for a_i in [2.56, 2.61, 2.65, 2.71, 2.79, 2.82, 2.86])\nprint(M)"
  },
  {
    "example_id": 302,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "from sympy import *\n\nx, y = symbols('x, y')\nd = (x + 1)**2 + (y + 1)**2\n\nprint(d)"
  },
  {
    "example_id": 303,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "662.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "a1 = 1\na2 = 1 + 9\na3 = a2 + 9\na4 = a3 + 9\na5 = a4 + 576\nprint(a1 + a2 + a3 + a4 + a5)"
  },
  {
    "example_id": 304,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "from sympy import Symbol, integrate\nx = Symbol('x')\nexpression = abs(x - 1) + abs(x - 3)\narea = integrate(expression, (x, 0, 8))\nprint(area)"
  },
  {
    "example_id": 305,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-26.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\nf = x**3 - 3*x**2 - 4*x + 4\ns = sympy.Symbol('s')\ng = x**3 + a*x**2 + b*x + c\n\nsolutions = f.roots()\nz = sympy.Symbol('z')\nz_val = sympy.Symbol('z_val')\n\nsolutions = [solutions[0], solutions[1], solutions[2]]\ns_vals = [s.subs(z, z_val).expand() for z_val in solutions]\ng_coef = g.coeff_monomial(x)\n\nreal_part = sum(sympy.re(g_coef[i]) for i in range(3))\nprint(real_part)"
  },
  {
    "example_id": 306,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = 7\ny = 3\nprint(x*y)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "t = 27\nx = 3\nexpression = x**3 - 3 * x**2 + t * x + 27\nprint(expression)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "14.0",
      "-2.0",
      "14.0",
      "2.0",
      "6.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import symbols\nx = symbols('x')\nroots = solve(x**4 - 80*x - 36, x)\nprint(roots)"
  },
  {
    "example_id": 309,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 0\nb = 1\nc = 1\nd = 0\nprint(a+2*b+3*c+4*d)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.118033988749895"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import sqrt\n\nlambda_ = sqrt(5) / 2\nprint(lambda_)"
  },
  {
    "example_id": 311,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 1\nb = 0.5\nexpression = a + 1/b/(a - b)\nprint(expression)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1810.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "volume = 10 * 13 * 14 - 10 * 1\nprint(volume)"
  },
  {
    "example_id": 313,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.964101615137755"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\n\nx = math.cos(math.pi / 3)\ny = math.sin(math.pi / 3)\nz = math.sqrt(1 - x**2 - y**2)\n\nprint(3*x + 4*y + 12*z)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "134.0"
    ],
    "solution": "count = 0\nfor i in range(1, 28):\n    count += 1\nprint(count)"
  },
  {
    "example_id": 315,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2016.0"
    ],
    "annotated_answers": [
      "224.0"
    ],
    "solution": "def next_a(a):\n    return a * a + 2007\n\na = 3\nfor i in range(2006, 2007):\n    a = next_a(a)\nprint(a)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "expression = abs(9*1j - 12) * abs(3 + 4*1j)\nprint(expression)"
  },
  {
    "example_id": 317,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.22222222222223"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nexpression = (2*a + 1/3*b)**2 + (2*b + 1/3*c)**2 + (2*c + 1/3*a)**2\nprint(expression)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1994.0",
      "2.0"
    ],
    "annotated_answers": [
      "997.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import Point, Circle, Line\n\ncircle = Circle((0, 0), 1994)\ntangent = Line((2 * 1994, 2 * 1994), slope=1)\npoint = circle.intersection(tangent)\nprint(point[0].x + point[0].y)"
  },
  {
    "example_id": 319,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6666666666666666"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a = -1\nb = 1\nc = 2\nexpression = (a + b + c) / (a * (a + b + c) + b * (b + c) + c * (c + a))\nprint(expression)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nq = 1 / (x**2 + 1)\nprint(q)"
  },
  {
    "example_id": 321,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "626.0000000000002"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "from math import sqrt\n\na = 1\nb = sqrt(5) / a\n\nprint(a**4 + b**8)"
  },
  {
    "example_id": 322,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "4.0",
      "10.0",
      "2.0",
      "3.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import Symbol, re, im\nz = Symbol('z', real=False)\nexpression = im(z**5) / (re(z)**5)\nprint(expression)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "for x in range(1, 100):\n    if x * (x + 1) * (x + 2) * (x + 3) + 1 == 379**2:\n        print(x)\n        break"
  },
  {
    "example_id": 324,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0",
      "6.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "expression = (((-1) ** (1/2) + (1 ** (1/2)) + (1 ** (1/2)) + (1 ** (1/2))) ** 2) + (((1 ** (1/2)) - (1 ** (1/2)) + (1 ** (1/2)) + (1 ** (1/2))) ** 2) + (((1 ** (1/2)) + (1 ** (1/2)) - (1 ** (1/2)) + (1 ** (1/2))) ** 2) + (((1 ** (1/2)) + (1 ** (1/2)) + (1 ** (1/2)) - (1 ** (1/2))) ** 2)\nprint(expression)"
  },
  {
    "example_id": 325,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "-5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy import symbols\n\nx = symbols('x')\nexpression = (x - 1)**7 + 3*(x - 1)**6 + (x - 1)**5 + 1\nexpression = expression / (x - 1)**5\nprint(simplify(expression))"
  },
  {
    "example_id": 326,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "x, y, z = 24 / 24, 48 / 24, 72 / 24\nprint(x + y + z)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-2.0"
    ],
    "annotated_answers": [
      "-338016.0"
    ],
    "solution": "from sympy import Symbol\nfrom sympy import binomial\nfrom sympy import expand_mul\n\nx = Symbol('x', real=True)\nexpression = expand_mul(1 / (1 - x)**2)\nprint(expression)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import numpy as np\nimport sympy as sp\n\nF1 = np.array([0, 1])\nF2 = np.array([0, -1])\n\ncenter = (F1 + F2) / 2\nradius = np.linalg.norm(F1 - center)\n\nk = 1 / (radius**2)\nprint(k)"
  },
  {
    "example_id": 329,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2015028.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    return x * (x + 1) // 2\n\nprint(f(2007))"
  },
  {
    "example_id": 330,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0",
      "8.0",
      "2.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nexpression = sp.log(2*x+8)/sp.log(x+2) + sp.log(x+2)/sp.log(x-5) - 3\nprint(expression)"
  },
  {
    "example_id": 331,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import math\nprint(abs((1 - 1j)**8))"
  },
  {
    "example_id": 332,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 0\nwhile a**3 - 1**3!= 0:\n    a += 1\nprint(a)"
  },
  {
    "example_id": 333,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "500002.0"
    ],
    "annotated_answers": [
      "996506.0"
    ],
    "solution": "n = 1\nwhile n <= 500000:\n    n += 3\nprint(n)"
  },
  {
    "example_id": 334,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "9.0",
      "6.0",
      "3.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nexpression = (x**9 - x**6 + x**3 - 1) % (x**2 + x + 1)\nprint(expression)"
  },
  {
    "example_id": 335,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\n\ndef parab(x):\n    return 9 - x**2\n\nT = (1, 9 - 1**2)\nX = (T[0] + 1, parab(T[0] + 1))\nY = (T[0] + 1, parab(T[0] + 1) + T[1] + 1)\n\nprint(X[0])\nprint(Y[0])\nprint(sqrt(25))\nprint(T[0])"
  },
  {
    "example_id": 336,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import numpy as np\n\ndef circle_radius(center, equation):\n    x, y = center\n    a, b = np.array(equation).reshape(2)\n    return np.sqrt(a**2 + b**2)\n\ndef circle_tangent_line(center, equation):\n    x, y = center\n    a, b = np.array(equation).reshape(2)\n    x0, y0 = center\n    return np.array([y - b * (x0 - x), -b * (y0 - y) + a * (x0 - x)])\n\ndef circle_tangent_point(center1, center2, equation1, equation2):\n    x1, y1 = center1\n    x2, y2 = center2\n    a1, b1 = np.array(equation1).reshape(2)\n    a2, b2 = np.array(equation2).reshape(2)\n    return (x1 - x2) * b1 * b2 + (y1 - y2) * a1 * a2, (x1 - x2) * a1 * b2 + (y1 - y2) * b1 * a2\n\ndef shortest_line_segment(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n    return np.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\ndef main():\n    c1 = np.array([10, 0])\n    c2 = np.array([15, 0])\n    r1 = circle_radius(c1, [36, 0])\n    r2 = circle_radius(c2, [81, 0])\n    t1 = circle_tangent_line(c1, [36, 0])\n    t2 = circle_tangent_line(c2, [81, 0])\n    p1 = circle_tangent_point(c1, c2, [36, 0], [81, 0])\n    p2 = circle_tangent_point(c2, c1, [81, 0], [36, 0])\n    print(shortest_line_segment(p1, p2))\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 337,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.055555555555557"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 9\nb = 4\nc = -54\nd = 40\ne = 145\n\nh = -c/b\nk = -d/a\n\nprint(h + k + a + b)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.6570662602877636",
      "33"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = [1, 1, 1]\nfor n in range(3, 100):\n    a.append(a[-2] - 2 * a[-1] + a[-3])\nprint(sum(a))"
  },
  {
    "example_id": 339,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor real in range(1, 100):\n    for imag in range(1, 100):\n        z1 = complex(real, imag)\n        z2 = 1 / z1\n        if z1 * z2 == 0 + 1j:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0",
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Using SymPy\nimport sympy\nlog256 = sympy.log(256, 2)\nlog64 = sympy.log(64, 2)\nprint(sympy.log(log256, log64))"
  },
  {
    "example_id": 341,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "5.0",
      "1.0",
      "5.0",
      "2.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import *\nr = Symbol('r')\nexpression = (r - 1)*(r + 2)*(r + 6)*(r + 3)\nprint(expression.subs(r, -1 + 5*I))"
  },
  {
    "example_id": 342,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nfactors = factor(x**12 - 1)\npolynomials = [factor.as_expr() for factor in factors]\ncount = len(polynomials)\nprint(count)"
  },
  {
    "example_id": 343,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport math\n\na = 4\nb = 3\nh = 2\nk = 1\n\nprint(a+k)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "5.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import sympy as sp\nx, y, z = sp.symbols('x y z')\nexpression = sp.Min(2*x**2 + 5*y**2 + 2*z**2 + 4*x*y - 4*y*z - 2*z - 2*x)\nprint(expression)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "expression = abs(5-12j)\nprint(expression)"
  },
  {
    "example_id": 346,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.174309748172216",
      "200"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "def p(x):\n    return x**100 - x**99 + x**98 - x**97 + x**96 - x**95 + x**94 - x**93 + x**92 - x**91 + x**90 - x**89 + x**88 - x**87 + x**86 - x**85 + x**84 - x**83 + x**82 - x**81 + x**80 - x**79 + x**78 - x**77 + x**76 - x**75 + x**74 - x**73 + x**72 - x**71 + x**70 - x**69 + x**68 - x**67 + x**66 - x**65 + x**64 - x**63 + x**62 - x**61 + x**60 - x**59 + x**58 - x**57 + x**56 - x**55 + x**54 - x**53 + x**52 - x**51 + x**50 - x**49 + x**48 - x**47 + x**46 - x**45 + x**44 - x**43 + x**42 - x**41 + x**40 - x**39 + x**38 - x**37 + x**36 - x**35 + x**34 - x**33 + x**32 - x**31 + x**30 - x**29 + x**28 - x**27 + x**26 - x**25 + x**24 - x**23 + x**22 - x**21 + x**20 - x**19 + x**18 - x**17 + x**16 - x**15 + x**14 - x**13 + x**12 - x**11 + x**10 - x**9 + x**8 - x**7 + x**6 - x**5 + x**4 - x**3 + x**2 - x + 1\n\nprint(p(102))"
  },
  {
    "example_id": 347,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1868443807.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "def p(x):\n    return x**3 + 2*x**2 + 3*x + 1\n\nprint(p(p(10)))"
  },
  {
    "example_id": 348,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-46.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x', real=False)\nf = x**4 - 6*x**3 + 26*x**2 + Symbol('p')*x + 65\na, b = solve(f.as_poly().all_coeffs()[0::2], (x.as_real_imag()[0], x.as_real_imag()[1]))\np = f.as_poly()(a[0] + b[0]*1j)\nprint(p)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2003000.0"
    ],
    "annotated_answers": [
      "973.0"
    ],
    "solution": "n = 1\nwhile n < 1000:\n    n += 1\n    a = 2 * n * (n + 1)\n    if a < 1000:\n        n += 1\nprint(n + a)"
  },
  {
    "example_id": 350,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "-5.0",
      "64.0",
      "-4.0",
      "64.0",
      "-4.0",
      "64.0",
      "-7.0",
      "64.0",
      "-3.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import numpy as np\nfrom sympy import solve\n\nf = lambda x: x**2 + 6*x + 1\n\ndef get_points(f, x):\n    \"\"\"\n    f: function\n    x: real number\n    \"\"\"\n    y = f(x)\n    if y >= 0:\n        return []\n    else:\n        return [(x, y)]\n\ndef get_area(points):\n    \"\"\"\n    points: list of points\n    \"\"\"\n    x_coords = [x for (x, y) in points]\n    y_coords = [y for (x, y) in points]\n    return 0.5 * np.abs(np.trapz(y_coords, x_coords))\n\ndef main():\n    x0 = -10\n    x1 = 10\n    x_values = np.arange(x0, x1 + 1)\n    points = []\n    for x in x_values:\n        points.extend(get_points(f, x))\n    print(points)\n    print(get_area(points))\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 351,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import solve, Symbol\n\nK = Symbol('K')\nL = Symbol('L')\nM = Symbol('M')\n\nx = Symbol('x')\n\neq = x**4 - K*x**3 + K*x**2 + L*x + M\n\nroots = solve(eq, x)\n\nmin_sum = 0\n\nfor root in roots:\n    min_sum += root**2\n\nprint(min_sum)"
  },
  {
    "example_id": 352,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4036.0"
    ],
    "solution": "n = 1\nsum = 0\nwhile sum < 1:\n    sum += (n * (n / n)**2)\n    n += 1\nprint(n - 1)"
  },
  {
    "example_id": 353,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-588.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\n\nexpression = simplify(1 - x)\nfor i in range(2, 16):\n    expression *= 1 + i * x\n\nprint(expression.coeff(x**2))"
  },
  {
    "example_id": 354,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "19941989.0"
    ],
    "solution": "n = 19941994\nexpression = floor(sqrt(n**2 - 10 * n + 29))\nprint(expression)"
  },
  {
    "example_id": 355,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor x in range(0, 1001):\n    for y in range(0, 1001):\n        if x**2 + 2 * y**2 + 0.5 <= x * (2 * y + 1):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "372642061077.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def poly(x):\n    return x**4 - 8*x**3 + 8*x**2 - 8*x + 1\n\ns = 0\nfor x in range(1, 287):\n    s += poly(x)\nprint(s)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-150.0"
    ],
    "annotated_answers": [
      "-150.0"
    ],
    "solution": "sum = 0\nfor n in range(1, 101):\n    sum += (-1)**(n+1) * (3*n + 2)\nprint(sum)"
  },
  {
    "example_id": 358,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy as sp\n\nz = sp.Symbol('z')\nexpression = z**3 + z**2 - sp.Abs(z)**2 + 2*z\nprint(expression)"
  },
  {
    "example_id": 359,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(m, n):\n    if m == 1 and n == 1:\n        return 1\n    elif m == 1 or n == 1:\n        return 1\n    else:\n        return f(m - 1, n) + f(m, n - 1) + f(m - 1, n - 1)\n\n\ndef S(k):\n    return sum(f(a, b) for a in range(1, k + 1) for b in range(1, k + 1))\n\n\np = 0\nq = 0\nfor k in range(2, 100):\n    p = p * k + q\n    q = p * k\n    p, q = q, p\nprint(p * q)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.333333333333334"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 8\nb = 2\nprint((a**2 + b**2) / (a - b))"
  },
  {
    "example_id": 361,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15473.0",
      "2.0",
      "102960.0",
      "2.0",
      "91.0",
      "2.0",
      "144.0",
      "2.0",
      "6557.0",
      "2.0",
      "166320.0",
      "2.0",
      "15089.0",
      "2.0",
      "144144.0",
      "2.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import sympy\n\nx, y, z, w = sympy.symbols('x y z w')\n\nexpr = 0\nfor i in range(1, 9):\n    expr += x**2 / (i**2 - 1) + y**2 / (i**2 - 3**2) + z**2 / (i**2 - 5**2) + w**2 / (i**2 - 7**2)\nexpr = expr.simplify()\n\nprint(expr)"
  },
  {
    "example_id": 362,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = 2\nb = -3\nc = 3\nd = -2\ne = 9\nprint(a + b + c + d + e)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import primefactors\n\na = 1\nb = 1\nfor n in range(1, 123456790):\n    a, b = b, a\n    if primefactors(a) == primefactors(b):\n        break\nprint(b - a)"
  },
  {
    "example_id": 364,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import sqrt\n\ndef is_integer(n):\n    return n == int(n)\n\n\ndef is_solution(x):\n    return abs(x) * abs(x - 5) == 3\n\n\ndef find_solutions():\n    solutions = []\n    for x in range(-1000, 1001):\n        if is_solution(x):\n            solutions.append(x)\n    return solutions\n\n\ndef find_sum():\n    sum = 0\n    for solution in find_solutions():\n        if is_integer(solution):\n            sum += solution\n    return sum\n\n\nprint(find_sum())"
  },
  {
    "example_id": 365,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "14.0",
      "5.0",
      "10.0",
      "5.0",
      "5.0",
      "5.0",
      "14.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nexpression = 5*x**4 - 10*x**3 + 10*x**2 - 5*x - 11\nprint(solve(expression, x))"
  },
  {
    "example_id": 366,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.155443620884047",
      "69"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "a = 14\nn = 2\nwhile n < 100:\n    a = 24 - 5 * a\n    n += 1\nprint(a)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "n = 0\nwhile True:\n    a = 96 / (n + 1)\n    b = 144 / (n + 1)\n    c = 216 / (n + 1)\n    if a**2 + b**2 + c**2 == a**3 + b**3 + c**3:\n        n += 1\n    else:\n        break\nprint(n)"
  },
  {
    "example_id": 368,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-49.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "# P(x) = ax^2 + bx + c\n# P(11) = 181\n# P(16) = a*16^2 + b*16 + c\n\n# P(11) = 181\n# 11^2 - 2*11 + 2 = 121\n# 2*11^2 - 4*11 + 3 = 245\n\n# P(16) = a*16^2 + b*16 + c\n# 16^2 - 2*16 + 2 = 256\n# 2*16^2 - 4*16 + 3 = 512\n\n# P(x) = ax^2 + bx + c\n# P(x) = 181\n# a*x^2 + b*x + c = 181\n# a*x^2 + b*x + c - 181 = 0\n# (x + 7)(a*x + b) = 0\n\n# x + 7 = 0\n# a*x + b = 0\n\n# a*x = -b\n# x = -b/a\n\n# a*(-b/a) + b = 0\n# a*(-b) + b = 0\n# a*(-7) + b = 0\n# a*(-7) + 181 = 0\n# a = -7\n# b = 181\n\n# a*16^2 + b*16 + c = -49\n# 16^2 - 2*16 + 2 = 256\n# 2*16^2 - 4*16 + 3 = 512\n\n# P(16) = -49\n\nprint(-49)"
  },
  {
    "example_id": 369,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "4.0",
      "8.0",
      "3.0",
      "2.0",
      "2.0",
      "4.0",
      "7.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import Symbol, simplify\nx = Symbol('x')\nexpression = (5*x**4 - 8*x**3 + 2*x**2 + 4*x + 7) / (x + 2)**4\nresult = simplify(expression)\nprint(result)"
  },
  {
    "example_id": 370,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nf = sp.Function('f')\neq1 = sp.Eq(x**2 * f(x) + f(1 - x), -x**4 + 2*x)\neq2 = sp.Eq(f(x), f(1 - x))\nsol = sp.solve([eq1, eq2], f(x))\nalpha = sp.Symbol('alpha')\nbeta = sp.Symbol('beta')\nprint(alpha**2 + beta**2)"
  },
  {
    "example_id": 371,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 1\nb = -1\nc = -1\nprint((a*b-c)*(a*c-b)*(b*c-a))"
  },
  {
    "example_id": 372,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "576.0"
    ],
    "solution": "def sqrt(x):\n    return x**0.5\n\ndef cfrac(x):\n    return 1 / (1 + sqrt(x))\n\ndef cfrac_iter(x, n):\n    result = 1\n    for i in range(n):\n        result = 1 / (1 + sqrt(result))\n    return result\n\ndef find_root(f, x0, tol):\n    x1 = x0\n    while abs(x1 - x0) > tol:\n        x0 = x1\n        x1 = x0 - f(x0) / (f(x0) - f(x1))\n    return x1\n\ndef solve_sqrt_cfrac(x):\n    return find_root(lambda x: sqrt(x) - cfrac_iter(x, 10), x, 1e-6)\n\nprint(solve_sqrt_cfrac(8))"
  },
  {
    "example_id": 373,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "# The minimum value of the expression is of the form a * sqrt(b) / c,\n# for some positive integers a, b, and c, where a and c are relatively prime,\n# and b is not divisible by the square of a prime.\n# The given expression can be written as:\n# (x^4 + 1)(y^4 + 1)(z^4 + 1) = x^4 y^4 + 1 = x^4 z^4 + 1 = y^4 z^4 + 1\n# So, we have to find the minimum value of:\n# (x^4 + 1)(y^4 + 1)(z^4 + 1) / x^2 y^2 z\n# So, we have to find the minimum value of:\n# a^2 b^2 / c^2\n# where a, b, and c are positive integers and a and c are relatively prime\n# and b is not divisible by the square of a prime.\n# Let's assume a = a1 * a2, b = b1 * b2, and c = c1 * c2\n# Then, we have:\n# a^2 b^2 / c^2 = a1^2 b1^2 / c1^2 * a2^2 b2^2 / c2^2\n# We want to find the minimum value of this expression.\n# Let's take a = a1 * a2 = 1, b = b1 * b2 = 2, and c = c1 * c2 = 3\n# Then, we have:\n# a^2 b^2 / c^2 = 1 * 2 / 3\n# So, the minimum value of the expression is 2 / 3.\n# Therefore, a + b + c = 1 + 2 + 3 = 6.\nprint(6)"
  },
  {
    "example_id": 374,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3968.0"
    ],
    "annotated_answers": [
      "3968.0"
    ],
    "solution": "def f(x):\n    if x**0.5 == int(x**0.5):\n        return x**0.5\n    else:\n        return (f(x-1))**2 - 1\nprint(f(8))"
  },
  {
    "example_id": 375,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 0\nwhile True:\n    x += 1\n    if 4 * x**3 - 41 * x**2 + 10 * x == 1989:\n        break\nprint(x)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "82.0"
    ],
    "annotated_answers": [
      "181.0"
    ],
    "solution": "a = [0, 0, 0]\na[0] = 1\na[1] = 10\na[2] = 100\nfor i in range(3, 1332):\n    a.append(2*a[-1] - 2*a[-2] + a[-3])\nprint(a[1331])"
  },
  {
    "example_id": 377,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    for y in range(1, 101):\n        if x**2 + y**2 == 1:\n            count += x * y\nprint(count)"
  },
  {
    "example_id": 378,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor n in range(1, 1000):\n    if 3 * n**3 - 12 * n == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 379,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-112.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "z = 9 + 1j\nz2 = z**2\nz3 = z**3\nb = (z2.imag - z3.imag) / 2\nprint(b)"
  },
  {
    "example_id": 380,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z1 = 1\nz2 = 2\nz3 = 3\nexpression = abs(9*z1*z2 + 4*z1*z3 + z2*z3)\nprint(expression)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "expression = 2 * np.log10(x) - np.log(100) / np.log(x)\nmin_val = np.min(expression)\nprint(min_val)"
  },
  {
    "example_id": 382,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "10.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy as sym\n\nx = sym.Symbol('x')\nexpression = (x + 1)**4\nprint(sym.solve(expression - 10, x)[0])"
  },
  {
    "example_id": 383,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "f = lambda x: (2*x - 6) / (x**3 - 7*x**2 - 2*x + 6)\nprint(f(x=0))"
  },
  {
    "example_id": 384,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(range(-3, 0))"
  },
  {
    "example_id": 385,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "count = 0\nfor x in range(1, 13):\n    for y in range(1, 13):\n        for z in range(1, 13):\n            if x + 2 * y + 4 * z == 12 and x * y + 2 * x * z + 4 * y * z == 22 and x * y * z == 6:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 386,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "90.0",
      "90.0",
      "6.0",
      "4.0",
      "2.0",
      "8.0",
      "88.0",
      "86.0",
      "84.0",
      "1.0",
      "90.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "from sympy import Symbol, expand, simplify\nz = Symbol('z')\nexpression = expand((z + 1/z)**2 + (z**2 + 1/z**2)**2 + (z**3 + 1/z**3)**2 + (z**45 + 1/z**45)**2)\nprint(simplify(expression))"
  },
  {
    "example_id": 387,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "from sympy import *\n\na = var('a')\nb = var('b')\nc = var('c')\n\nx = var('x')\nn = 4\n\nf = a*x**n + a*(n-1)*x**(n-1) + a*(n-2)*x**(n-2) + a*(n-3)*x**(n-3) + a*(n-4)*x**(n-4) + a*(n-5)*x**(n-5) + a*(n-6)*x**(n-6) + a*(n-7)*x**(n-7) + a*(n-8)*x**(n-8) + a*(n-9)*x**(n-9) + a*(n-10)*x**(n-10)\n\nroots = solve(f, x)\n\nleast_value = 100\n\nfor root in roots:\n    if root.is_integer:\n        if abs(f.subs(x, root)) <= least_value:\n            least_value = abs(f.subs(x, root))\n\nprint(least_value)"
  },
  {
    "example_id": 388,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 2\nb = 1\nx = 2\nexpression = a * (a * (a * x + b) + b) + b\nprint(expression)"
  },
  {
    "example_id": 389,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 16\nb = 10\nc = 0\nexpression = (c * (b - c))**0.5 + (c * (a - c))**0.5\nprint(expression)"
  },
  {
    "example_id": 390,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "-3.0",
      "3.0",
      "226585.0",
      "45317.0",
      "2.0",
      "-484.0",
      "476.0",
      "226585.0",
      "45317.0",
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import Point, Line, Circle, Symbol\n\nF1 = Point(-4, 0)\nF2 = Point(4, 0)\nP = Point(0, 3) + 2 * Point(240, 0)\nQ = Line(P, F2).intersection(Circle(P, 5))[0]\n\nell = Circle((0, 0), 1)\nell = ell.scale(7, sqrt(33))\n\nmax_value = P.distance(Q) + F1.distance(Q)\nprint(max_value)"
  },
  {
    "example_id": 391,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-376.0"
    ],
    "solution": "from sympy import sympify\nr, s, t = sympify('1 + sqrt(3) + sqrt(3)**2').as_real_imag()\nf = lambda x: 4*x**3 - 59*x**2\nprint(f(r) + f(s) + f(t))"
  },
  {
    "example_id": 392,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "from math import gcd\n\nb = 1\nwhile gcd(b, 2)!= 1:\n    b += 1\nprint(b)"
  },
  {
    "example_id": 393,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor i in range(100000):\n    if (i * i) % 2 == 0 and (i * i) % 2 == 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 394,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x = 4\ny = 2\nz = 1\nexpression = x * y + x * z + y * z\nprint(expression)"
  },
  {
    "example_id": 395,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        if a**2 + b**2 == 2010:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 396,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "139.29611541307906"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = 3\nb = 2\nexpression = 3 * a**3 * 3**0.5 + 2 / (a * b - 2 * b**2)\nprint(expression)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-9.0",
      "2.0",
      "20.0",
      "40.0",
      "2.0",
      "1.0",
      "2.0",
      "-9.0",
      "2.0",
      "20.0",
      "40.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy as sym\n\nx, y = sym.symbols('x y')\n\ndef pf_1(x, y):\n    return 4 * x**2 - 8 * x + y**2 + 4 * y - 8\n\ndef pf_2(x, y):\n    return x**2 + 2 * x * y + y**2\n\nd = sym.solve(pf_1(x, y) + pf_2(x, y) - 10, y)\nprint(d)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2011015.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "count = 0\nfor a in range(1, 2006):\n    count += abs(a)\nprint(count)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def remainder(p, q):\n    return p % q\n\ndef div(p, q):\n    return p // q\n\ndef P(x):\n    p = x**3 + 2*x**2 - 5*x - 2\n    r1 = remainder(p, x-1)\n    r2 = remainder(r1, x-4)\n    r3 = remainder(r2, x-2)\n    r4 = remainder(r3, x-3)\n    return div(r4, x-1)\n\nprint(P(0))\nprint(P(5))"
  },
  {
    "example_id": 400,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y, z = 1, 1, 1\nexpression = (x * y + z) * (x * z + y)\nprint(expression)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "90.0",
      "2009.0",
      "2.0",
      "49.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\nk = sympy.poly((sympy.Symbol('x')**4 + 90*sympy.Symbol('x') - 2009), [sympy.Symbol('x')**2 - 49*sympy.Symbol('x') + 1])\nprint(k)"
  },
  {
    "example_id": 402,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "501.0"
    ],
    "solution": "import sympy\ncount = 0\nfor k in range(-500, 500):\n    if sympy.solve(sympy.log(k * x) == 2 * sympy.log(x + 2), x) and len(sympy.solve(sympy.log(k * x) == 2 * sympy.log(x + 2), x)) == 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 403,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 1\nb = 0\nc = 1\nd = 0\nprint(a+2*b+3*c+4*d)"
  },
  {
    "example_id": 404,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-24.888888888888886"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "from scipy.optimize import minimize\n\ndef f(x):\n    return 3*x[0]**2 + 12*x[1]**2 + 27*x[2]**2 - 4*x[0]*x[1] - 6*x[0]*x[2] - 12*x[1]*x[2] - 8*x[2] - 24\n\nres = minimize(f, [0, 0, 0])\nprint(res.fun)"
  },
  {
    "example_id": 405,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import Poly\nf = Poly(\"x**9 - x**3 + 1\")\nd = Poly(\"x**3 + 1\")\nq, r = f.div(d)\nprint(q.degree())"
  },
  {
    "example_id": 406,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    if (x - a) / b + (x - b) / a == b / (x - a) + a / (x - b):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 407,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0",
      "3.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a, b, c')\n\nx = sympy.Symbol('x')\n\nf = (x**4 + a * x**3 + b * x**2 + c * x + 1)**2\ng = (x**4 + 2 * a * x**3 + 2 * b * x**2 + 2 * c * x + 1)**2\n\nsolved = sympy.solve([f - g], [a, b, c])\n\nprint(solved)"
  },
  {
    "example_id": 408,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import factorial\ndef roots(n):\n    return factorial(n) // factorial(2*n)\nprint(roots(2001))"
  },
  {
    "example_id": 409,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        z = a + b * 1j\n        if abs(z) == 1:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 410,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2101.0"
    ],
    "annotated_answers": [
      "2101.0"
    ],
    "solution": "x = 5\ny = 4\nexpression = x**4 + x**3 * y + x**2 * y**2 + x * y**3 + y**4\nprint(expression)"
  },
  {
    "example_id": 411,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "36.0",
      "10.0",
      "14.0",
      "22.0",
      "0.5",
      "519.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "from sympy import Symbol\n\na, b, c, d = Symbol('a'), Symbol('b'), Symbol('c'), Symbol('d')\nexpression = a**2 + b**2 + c**2 + 519 - d - 36 * (10 * a + 14 * b + 22 * c - d)**(1/2)\nprint(expression)"
  },
  {
    "example_id": 412,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor a in range(-2, 2):\n    for b in range(-2, 2):\n        for c in range(-2, 2):\n            for d in range(-2, 2):\n                if a**4 + b**4 + c**4 + d**4 == 48 and a*b*c*d == 12:\n                    count += 1\nprint(count)"
  },
  {
    "example_id": 413,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "from sympy import *\na, b, c = symbols('a b c')\nexpression = (a * b * c + a * b + a * c + b * c + a + b + c + 1).expand()\nprint(expression)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "331.0"
    ],
    "solution": "def fibonacci(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return -1\n    else:\n        return fibonacci(n - 1) - 2 * fibonacci(n - 2)\n\nprint(fibonacci(1) + fibonacci(2) + fibonacci(3) + fibonacci(4) + fibonacci(5) + fibonacci(6) + fibonacci(7) + fibonacci(8) + fibonacci(9) + fibonacci(10))"
  },
  {
    "example_id": 415,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "2.0",
      "6.0",
      "5.0",
      "20.0",
      "3.0",
      "3.0",
      "6.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nexpression = (x**6 + x + 1) / (x**2 - 2*x - 1)\nprint(expression.simplify().as_real_imag()[0])"
  },
  {
    "example_id": 416,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "1999.0"
    ],
    "solution": "n = 2\nsum = 0\nwhile sum < 10000:\n    n += 1\n    sum += (n - 2) * (n - 1)\nprint(n)"
  },
  {
    "example_id": 417,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b = 0.5, 0.5\nprint(2/a + 1/b)"
  },
  {
    "example_id": 418,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import symbols, Poly\n\na, b, c, d, e = symbols('a, b, c, d, e')\nexpression = Poly(a**5 + b**5 + c**5 + d**5 + e**5, [a, b, c, d, e])\nprint(expression.subs({a: a, b: b, c: c, d: d, e: e}))"
  },
  {
    "example_id": 419,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "expression = abs(2-4j) / abs(2+1j)\nprint(expression)"
  },
  {
    "example_id": 420,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = -1\ny = 1\nexpression = x**2 + y**2\nprint(expression)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import prod\n\na, b, c = 1, 2, 3\nexpression = (a + b) * (a + c) * (b + c) / prod([a, b, c])\nprint(expression)"
  },
  {
    "example_id": 422,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.0"
    ],
    "annotated_answers": [
      "101.0"
    ],
    "solution": "x = 100000000 // (10**4)\nprint(x)"
  },
  {
    "example_id": 423,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from math import fabs\n\ndef f(x, p):\n    return fabs(x - p) + fabs(x - 15) + fabs(x - p - 15)\n\np = 3.5\nmin_value = f(p, p)\nfor x in range(int(p), 15 + 1):\n    value = f(x, p)\n    if value < min_value:\n        min_value = value\nprint(min_value)"
  },
  {
    "example_id": 424,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "import math\n\na = 1\nb = 6\nc = 36\n\nwhile True:\n    if math.log(b, 6) - math.log(a, 6) == math.log(c, 6) - math.log(b, 6):\n        break\n    a = b\n    b = c\n    c = a * 6\n\nprint(a + b + c)"
  },
  {
    "example_id": 425,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-86.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def p(x):\n    return x**4 - 12*x**3 + 39*x**2 - 50*x + 1\n\nprint(p(0) + p(4))"
  },
  {
    "example_id": 426,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.246950765959598"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Find the semi-major axis\na = np.sqrt(105)\nprint(a)\n\n# Plot the ellipse\nx = np.linspace(-5, 11, 1000)\ny = np.linspace(10 - a, 10 + a, 1000)\nplt.plot(x, y)\nplt.plot([3], [10 - a], 'bo')\nplt.plot([3], [10 + a], 'bo')\nplt.show()"
  },
  {
    "example_id": 427,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1913.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        for c in range(-100, 101):\n            if a**3 + a * b + b * c + c == 0:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 428,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "expression = (5*x + 9)**611 + (x + 5)**11 + (x - 1)**11 + 3*x**2 + 1\nremainder = expression % (x + 2)\nprint(remainder)"
  },
  {
    "example_id": 429,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "4.0",
      "4.0",
      "2.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import solve, Symbol, Min\n\nx, y, z = Symbol('x'), Symbol('y'), Symbol('z')\nconstraint = (x*y*z == 2)\nsolution = solve(constraint, [x, y, z])\nexpression = x**4 + 4*y**2 + 4*z**4\nresult = Min(expression.subs(solution), expression.subs({x: 1, y: 1, z: 1}))\nprint(result)"
  },
  {
    "example_id": 430,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0",
      "2.0",
      "7.0",
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "7.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import Symbol, sqrt, simplify\nx = Symbol('x')\ny = Symbol('y')\np = (2*x - 8*x*y + 7*y**2) / (2*x + 8*x*y + 7*y**2)\nq = simplify(p**2)\nprint(sqrt(q))"
  },
  {
    "example_id": 431,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "F1 = (10, 2)\nF2 = (-16, 2)\n\na = abs(F1[0] - F2[0])\nb = abs(F1[1] - F2[1])\nh = (F1[0] + F2[0]) / 2\nk = (F1[1] + F2[1]) / 2\n\nprint(h + k + a + b)"
  },
  {
    "example_id": 432,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "962.0"
    ],
    "solution": "from sympy import primefactors\nk = 1\nwhile True:\n    factors = primefactors(k)\n    if len(factors) == 3:\n        break\n    k += 1\nprint(k)"
  },
  {
    "example_id": 433,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "f = lambda x: (2 * x + 9) / (x - 7)\nx = f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f"
  },
  {
    "example_id": 434,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z = 5j\nprint(abs(z.conjugate() ** 2))"
  },
  {
    "example_id": 435,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    return x * (2 * x + 3) / (2 * x + 3)\n\ndef iterative_solution(x):\n    while f(x)!= x:\n        x = f(x)\n    return x\n\ndef recursive_solution(x):\n    if f(x) == x:\n        return x\n    return recursive_solution(f(x))\n\nprint(iterative_solution(0))\nprint(recursive_solution(0))"
  },
  {
    "example_id": 436,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "a = 2\nb = -3\nc = 5\nexpression = a + b + c\nprint(expression)"
  },
  {
    "example_id": 437,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import Symbol\n\nx = Symbol('x')\nexpression = (7*x-2)/(x**2-4)\nprint(expression.expand())"
  },
  {
    "example_id": 438,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "52.04222681362429"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\n\ndef fibonacci_number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_number(n - 1) + fibonacci_number(n - 2)\n\ndef sum_of_fibonacci_divided_by_fibonacci_times_next_fibonacci(n):\n    return sum([1/fibonacci_number(n) * fibonacci_number(n + 2) for n in range(1, n + 1)])\n\nprint(sum_of_fibonacci_divided_by_fibonacci_times_next_fibonacci(20))"
  },
  {
    "example_id": 439,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7021.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "expression = sum([abs(x - 1) for x in range(1, 120)])\nprint(expression)"
  },
  {
    "example_id": 440,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.9369561358757983",
      "-14.0",
      "316.3289427162807"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "x = (3620 - 322**2)**0.5\nprint(x)"
  },
  {
    "example_id": 441,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0000000004941967",
      "5.0",
      "-1.0",
      "3.333",
      "-1.0",
      "1.667",
      "-1.0",
      "7.0",
      "2.0",
      "0.0",
      "2.0",
      "0.0",
      "2.0",
      "0.0",
      "29.0",
      "7.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from scipy.optimize import minimize\n\n\ndef objective(x):\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    return 2*a**2 + 3*b**2 + 6*c**2\n\n\ndef constraint(x):\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    return a + b + c - 1\n\n\nx0 = [0.5, 0.5, 0.5]\nres = minimize(objective, x0, constraints=[{'type': 'eq', 'fun': constraint}])\nprint(res)"
  },
  {
    "example_id": 442,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "p = 5\nq = -1\nr = 1\ncommon_roots = [0]\nfor x in range(1, 100):\n    if x**3 + x**2 + p * x + q == 0:\n        common_roots.append(x)\n    if x**3 + x**2 + p * x + r == 0:\n        common_roots.append(x)\nprint(common_roots)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nf = x**3 - 49*x**2 + 623*x - 2015\ng = f.subs(x, x + 5)\nroots = solve(g, x)\nprint(sum(roots))"
  },
  {
    "example_id": 444,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27648.0"
    ],
    "annotated_answers": [
      "27648.0"
    ],
    "solution": "a, b, c, d = 1, 2, 3, 4\nexpression = a * b**2 * c**3 * d**4\nprint(expression)"
  },
  {
    "example_id": 445,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nf = Poly(x**4 - 2*x**3 + x**2 - 3*x + 1, x)\nprint(f)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-872445.0"
    ],
    "annotated_answers": [
      "516.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 50):\n    sum += 745 - 742 * i\nprint(sum)"
  },
  {
    "example_id": 447,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.54"
    ],
    "annotated_answers": [
      "0.63"
    ],
    "solution": "log36 = 1.63\nlog94 = log36 / 3\nprint(round(log94, 2))"
  },
  {
    "example_id": 448,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0",
      "-1.0",
      "2.0",
      "5.0",
      "4.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import Symbol\nfrom sympy import solve\n\na = Symbol('a')\nb = Symbol('b')\nc = Symbol('c')\n\nsol = solve([2*a**3 + 3*a**2 + 4*a + 5, 2*b**3 + 3*b**2 + 4*b + 5, 2*c**3 + 3*c**2 + 4*c + 5], [a, b, c])\n\nprint(sol[0][0] * sol[0][1] * sol[0][2] + sol[0][0] + sol[0][1] + sol[0][2])"
  },
  {
    "example_id": 449,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "117649.0"
    ],
    "solution": "from sympy import symbols, prod\n\nr1, r2, r3, r4, r5, r6, r7 = symbols('r1, r2, r3, r4, r5, r6, r7')\n\nK = prod([r1 + r2, r1 + r3, r1 + r4, r1 + r5, r1 + r6, r1 + r7, r2 + r3, r2 + r4, r2 + r5, r2 + r6, r2 + r7, r3 + r4, r3 + r5, r3 + r6, r3 + r7, r4 + r5, r4 + r6, r4 + r7, r5 + r6, r5 + r7, r6 + r7])\n\nprint(K**2)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "827.9999999999999"
    ],
    "annotated_answers": [
      "828.0"
    ],
    "solution": "expression = (52 + 6 * 43**0.5)**1.5 - (52 - 6 * 43**0.5)**1.5\nprint(expression)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25952256.0"
    ],
    "annotated_answers": [
      "198.0"
    ],
    "solution": "a = [99]\nfor i in range(1, 20):\n    a.append(sum(a))\nprint(a[-1])"
  },
  {
    "example_id": 452,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor x in range(-50, 51):\n    for y in range(-50, 51):\n        for z in range(-50, 51):\n            if x + y - z == 0 and x * z - x * y + y * z == 27 and x * y * z == 54:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0",
      "3.0",
      "82.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1325.0",
      "2.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import Symbol, solve\n\na, b, c = Symbol('a'), Symbol('b'), Symbol('c')\nroots = solve([a**3 + 7*a**2 - 11*a - 2, a*b*c + b*c*a + c*a*b], [a, b, c])\na_plus_b_plus_c = roots[0] + roots[1] + roots[2]\nprint(a_plus_b_plus_c)"
  },
  {
    "example_id": 454,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44790.0"
    ],
    "annotated_answers": [
      "229.0"
    ],
    "solution": "# brute force\ndef p(x):\n    return sum(i * x**i for i in range(1, 6))\n\nprint(p(6))"
  },
  {
    "example_id": 455,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "4.0"
    ],
    "annotated_answers": [
      "697.0"
    ],
    "solution": "import sympy as sym\n\nz = sym.Symbol('z')\nn = sym.Symbol('n')\n\nexpression = (z / (z + n)) - 4*sym.I\n\nsol = sym.solve(expression, n)\n\nprint(sol)"
  },
  {
    "example_id": 456,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "a = 25\nb = 5\nexpression = a - 5*b\nprint(expression)"
  },
  {
    "example_id": 457,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.376378219832252"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from math import sqrt\nsum = 0\nfor n in range(1, 10000):\n    sum += 1 / (sqrt(n) + sqrt(n + 1)) / (sqrt(n / 4) + sqrt(n / 4 + 1))\nprint(sum)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.5",
      "2000.0",
      "500250.0",
      "1999.0",
      "166666625.0",
      "1998.0",
      "41624989593.75",
      "1997.0",
      "8312510421871.88",
      "1996.0"
    ],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "from sympy import Symbol, expand\nx = Symbol(\"x\")\nexpression = x**2001 + (1/2 - x)**2001\nexpanded = expand(expression)\nprint(expanded)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "462.0"
    ],
    "annotated_answers": [
      "214.0"
    ],
    "solution": "import sympy\na, b, c, d = sympy.symbols('a b c d')\nexpression = (a + b) * (c + d) - 143\nexpression += (a + c) * (b + d) - 150\nexpression += (a + d) * (b + c) - 169\nprint(expression.expand())"
  },
  {
    "example_id": 460,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1004.0"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "result = 0\nfor i in range(1, 2008):\n    if i % 2 == 0:\n        result += i\n    else:\n        result -= i\nprint(result)"
  },
  {
    "example_id": 461,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "-1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import log, ceil\n\ndef f(x, m, n):\n    return 8 * log(x, n) * log(x, m) - 7 * log(x, n) - 6 * log(x, m) - 2013\n\ndef solve(m, n):\n    min_x = ceil(2 ** (1/m))\n    max_x = ceil(2 ** (1/n))\n    for x in range(min_x, max_x):\n        if f(x, m, n) == 0:\n            return x\n    return -1\n\ndef get_min_x(m, n):\n    min_x = solve(m, n)\n    if min_x == -1:\n        return -1\n    return min_x\n\ndef get_min_x_product(m, n):\n    min_x1 = get_min_x(m, n)\n    min_x2 = get_min_x(n, m)\n    if min_x1 == -1 or min_x2 == -1:\n        return -1\n    return min_x1 * min_x2\n\nprint(get_min_x_product(2, 3))\nprint(get_min_x_product(3, 2))"
  },
  {
    "example_id": 462,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import sqrt\nexpression = sqrt((3 / 4) - sqrt(1 / 2)) - sqrt((3 / 4) + sqrt(1 / 2))\nprint(expression)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "S = {0, 10}\nwhile True:\n    added = False\n    for x in S:\n        polynomial = x**2 - x + 1\n        if polynomial in S:\n            S.add(x)\n            added = True\n            break\n    if not added:\n        break\nprint(len(S))"
  },
  {
    "example_id": 464,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "def lottery(d):\n    return d * 2\n\n\ndef shop(d):\n    return d - 1024\n\n\nd = 1\nwhile shop(d) >= 0:\n    d = lottery(d)\nprint(d)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0",
      "218.0",
      "1219.0",
      "14480.0",
      "3.0",
      "177968451.0",
      "1.0",
      "3.0",
      "14480.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol('x')\nexpression = sp.Eq(sp.Add(sp.Add(sp.Pow(x**2-10*x-29, -1), sp.Pow(x**2-10*x-45, -1)), sp.Mul(-2, x**2-10*x-69)), 0)\nsolutions = sp.solve(expression, x)\nprint(solutions)"
  },
  {
    "example_id": 466,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "932.0"
    ],
    "annotated_answers": [
      "4022030.0"
    ],
    "solution": "def f(x):\n    if x < int(x) + 0.5:\n        return int(x) * abs(x - int(x))\n    else:\n        return f(x - 1.0 / int(x))\n\n\ndef g(x):\n    return 2 ** (x - 2007)\n\n\ncount = 0\nfor x in range(1, 1000):\n    if f(x) == g(x):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 467,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "269.00000000000006"
    ],
    "annotated_answers": [
      "269.0"
    ],
    "solution": "print(abs(10-13j) * abs(10+13j))"
  },
  {
    "example_id": 468,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.29411764705882354"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "sasha = 15 + 8j\nchloe = 3 - 4j\ndist_sasha = abs(sasha)\ndist_chloe = abs(chloe)\nprint(dist_chloe / dist_sasha)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0",
      "2.0",
      "39.0",
      "2.0",
      "-7.0",
      "2.0",
      "39.0",
      "2.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\np = x**2 + 7*x + 22\nq = x**2 + 11*x + 30\nr = p/q\nsolution = solve(r, x)\nprint(solution)"
  },
  {
    "example_id": 470,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "result = 2011**2011\nprint(result % 100)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "-2.0",
      "-2.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "from sympy import Symbol\n\nr, s, t = Symbol('r'), Symbol('s'), Symbol('t')\nexpression = 1 / r**2 + 1 / s**2 + 1 / t**2\nprint(expression)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0",
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "z1 = 1\nz2 = -1\nz3 = -1 + 1j\nz4 = -1 - 1j\nprint(z1**6 - z1**5 - z1**3 - z1**2 - z1 + z2**6 - z2**5 - z2**3 - z2**2 - z2 + z3**6 - z3**5 - z3**3 - z3**2 - z3 + z4**6 - z4**5 - z4**3 - z4**2 - z4)"
  },
  {
    "example_id": 473,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "2.0",
      "16.0",
      "3.0",
      "20.0",
      "4.0",
      "32.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "import sympy as sy\n\nr_1, r_2, r_3, r_4 = sy.symbols('r_1 r_2 r_3 r_4')\na = (r_1 + r_2 / 4 + r_3 / 5 + r_4 / 8 - 1) / 4\nprint(a)"
  },
  {
    "example_id": 474,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-64.0"
    ],
    "solution": "from math import sqrt\nx = 8\nwhile True:\n    if sqrt(5 * abs(x) + 8) == sqrt(x**2 - 16):\n        break\n    x += 1\nprint(x)"
  },
  {
    "example_id": 475,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13723164.0",
      "-61374573.0"
    ],
    "annotated_answers": [
      "-10879.0"
    ],
    "solution": "print(1988 * 8891 - 1988**2)\nprint(8891 * 1988 - 8891**2)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import log, Symbol\nfrom sympy.solvers import solve\n\na, b, c, d = Symbol('a'), Symbol('b'), Symbol('c'), Symbol('d')\nexpression = a * log(2) + b * log(3) + c * log(5) + d * log(7)\nconstraint = expression - 2005\nsolutions = solve(constraint, [a, b, c, d])\nprint(len(solutions))"
  },
  {
    "example_id": 477,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "9.0",
      "1.0",
      "1.0",
      "8.0",
      "1.0",
      "1.0",
      "7.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import Symbol, expand, nsimplify\n\nn = Symbol(\"n\", integer=True)\nexpression = expand(1 / (1 + Symbol(\"tau\")) + 1 / (1 + Symbol(\"tau\")**2) + 1 / (1 + Symbol(\"tau\")**3) + 1 / (1 + Symbol(\"tau\")**4) + 1 / (1 + Symbol(\"tau\")**5) + 1 / (1 + Symbol(\"tau\")**6) + 1 / (1 + Symbol(\"tau\")**7) + 1 / (1 + Symbol(\"tau\")**8) + 1 / (1 + Symbol(\"tau\")**9))\nprint(nsimplify(expression - Symbol(\"tau\")**n))"
  },
  {
    "example_id": 478,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    if x**3 - 3*x**2 + 3*x - 1 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 479,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "152.2185107203483"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "a = 8**(5/4)\nb = 4**(7/4)\nprint(a * b)"
  },
  {
    "example_id": 480,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nd = 4\nexpression = int(b + c + d / a) + int(a + c + d / b) + int(a + b + d / c) + int(a + b + c / d)\nprint(expression)"
  },
  {
    "example_id": 481,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18177.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "F = [0, 1]\nfor n in range(2, 2025):\n    F.append(F[n-1] + F[n-2] % 3)\nprint(sum(F[2017:]))"
  },
  {
    "example_id": 482,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.9101784826340014"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "from math import log\n\nx, y = 2, 3\nexpression = (log(x, y)**2 + log(y, x)**2)\nprint(expression)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-2.0",
      "7.0",
      "282.0",
      "36.0",
      "7.0",
      "2.0",
      "1.0",
      "3.0",
      "7.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import solve, symbols\na, b, c, d = symbols('a, b, c, d')\nroots = solve(2*a**4 - 8*a**3 + 7, a)\nprint(roots)"
  },
  {
    "example_id": 484,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "49896.0"
    ],
    "solution": "# Length of each side\nlength = 2007 / 4\n# Maximum number of rectangles\nmax_rectangles = 2007 / length\nprint(max_rectangles)"
  },
  {
    "example_id": 485,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "-85.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "85.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from sympy import sqrt, I\nz = (1 + sqrt(5)) / 2\nprint(z**85 + 1 / z**85)"
  },
  {
    "example_id": 486,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "4.0",
      "4.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 1\nwhile n <= 100:\n    print(n, sum(1 for _ in range(n)))\n    n += 1"
  },
  {
    "example_id": 487,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "496.0"
    ],
    "solution": "count = 0\nfor n in range(1, 1000):\n    x = n / n // n\n    if x > 0 and x % 1 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-22.0",
      "10.0",
      "-21.0",
      "10.0",
      "-20.0",
      "10.0",
      "-19.0",
      "10.0",
      "-18.0",
      "10.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import numpy as np\n\ndef upper_hyper(x):\n    return (2*np.sqrt((x - 6)**2/16 + 1) - 5)\n\ndef lower_hyper(x):\n    return (-2*np.sqrt((x - 6)**2/16 + 1) - 5)\n\nn = 10\nfor i in range(-n, n+1):\n    for j in range(-n, n+1):\n        if (i**2*j + j**2*(-6 + 5*1j) + (-6 + 5*1j)**2) == i*j**2 + j*(-6 + 5*1j)**2 + (-6 + 5*1j)**2:\n            print(i + j + (-6 + 5*1j) + (-6 + 5*1j))"
  },
  {
    "example_id": 489,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.97500624843789"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "a1 = 50 / 4001\na4001 = 50 - a1\nprint(abs(a1 - a4001))"
  },
  {
    "example_id": 490,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\nx = sympy.symbols('x')\n\nexpression = (x + a)**2 / (a - b) * (a - c) + (x + b)**2 / (b - a) * (b - c) + (x + c)**2 / (c - a) * (c - b)\nprint(expression.expand())"
  },
  {
    "example_id": 491,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\ny = 1\nz = 1\nexpression = (x + y) * (y + z)\nwhile x * y * z!= 1:\n    x += 1\n    if x * y * z > 1:\n        break\nprint(expression)"
  },
  {
    "example_id": 492,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "k = 1\nwhile True:\n    if k > 2002 // k:\n        print(k)\n        break\n    k += 1"
  },
  {
    "example_id": 493,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.421296296296298"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nexpression = (a**3 / b**3) + (b**3 / c**3) + (c**3 / a**3)\nprint(expression)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2833.376960448433"
    ],
    "annotated_answers": [
      "4014013.0"
    ],
    "solution": "import math\nprint(math.sqrt(2003**2 + 2004**2))"
  },
  {
    "example_id": 495,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "59.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "f = lambda x: x**3 - 3*x**2 + 2*x - 1\nprint(f(5))"
  },
  {
    "example_id": 496,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.3819660055179793"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from scipy.optimize import minimize_scalar\n\n\ndef func(x):\n    return x * (x + 1) * (x + 2) * (x + 3)\n\n\nminimum = minimize_scalar(func)\nprint(minimum.x)"
  },
  {
    "example_id": 497,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    if 0 <= x < 2:\n        return 2*x\n    else:\n        return 8 - 2*x\nprint(max(f(x) for x in range(5)))"
  },
  {
    "example_id": 498,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "n = 0\nwhile True:\n    n += 1\n    product = 1\n    for i in range(1, n + 1):\n        product *= i**2\n    if product >= (n + 1)**2:\n        break\nprint(n)"
  },
  {
    "example_id": 499,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15872387472273.0"
    ],
    "annotated_answers": [
      "3996.0"
    ],
    "solution": "product = 1\nfor i in range(1996, 1998):\n    product *= (i**2 - i + 1)\nprint(product)"
  },
  {
    "example_id": 500,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "count = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        for c in range(1, 101):\n            if a**2 + b**2 + c**2 == a * b + a * c + b * c:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 501,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "sum = 0\nfor y in range(1, 101):\n    x = y**2 - 6*y + 5\n    if abs(x) == y:\n        sum += x\nprint(sum)"
  },
  {
    "example_id": 502,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "9.0",
      "30.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = x**3 - 3 * x**2 - 9 * x + 30\nprint(expression.rewrite(x - 3))"
  }
]