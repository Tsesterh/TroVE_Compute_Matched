[
  {
    "example_id": 0,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "x = 1\nsum = 0\nfor i in range(1, 33):\n    if eval(f\"x < x**{i} < x**{i+1}\"):\n        sum += 2**i\nprint(sum)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "7.0",
      "13.0",
      "23.0",
      "37.0",
      "53.0",
      "67.0",
      "83.0",
      "103.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "k = [1, 3, 7, 13, 23, 37, 53, 67, 83, 103]\nprint(k)"
  },
  {
    "example_id": 2,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "82.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "omega = 1 - 5j\nexpression = abs(2*omega**2 - 4*omega - 30)\nprint(expression)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "343400.0",
      "343400.0",
      "343400.0",
      "343400.0",
      "343400.0",
      "343400.0"
    ],
    "annotated_answers": [
      "195.0"
    ],
    "solution": "# Original sequence\nsum_first = 0\nsum_last = 0\nsum_middle = 0\nfor i in range(1, 101):\n    term = i * (i + 1) // 2\n    sum_first += term\n    sum_last += term\n    sum_middle += term\n    term = i * (i + 1) // 2\n    sum_first += term\n    sum_last += term\n    sum_middle += term\nprint(sum_first, sum_last, sum_middle)\n# New sequence\nsum_first = 0\nsum_last = 0\nsum_middle = 0\nfor i in range(1, 101):\n    term = i * (i + 1) // 2\n    sum_first += term\n    sum_last += term\n    sum_middle += term\n    term = i * (i + 1) // 2\n    sum_first += term\n    sum_last += term\n    sum_middle += term\nprint(sum_first, sum_last, sum_middle)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "6.0",
      "30.0",
      "3.0",
      "5.0",
      "30.0",
      "20.0",
      "2.0",
      "30.0",
      "20.0",
      "15.0",
      "30.0",
      "17.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "from sympy import log\n\ndef f(x):\n    return 17 * log(30, x) - 3 * log(5, x) + 20 * log(15, x) - 3 * log(6, x) + 20 * log(2, x)\n\nprint(f(30))"
  },
  {
    "example_id": 5,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "def f(x):\n    return f(x + 1) + f(x - 1)\n\nf(15) = 20\nf(20) = 15\nf(20152015) = f(2015) + f(2015)\n= 20 + 20\n= 40"
  },
  {
    "example_id": 6,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "v = 25\nw = 21\nx = 18\ny = 19\nz = 24\nprint(y + z)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.309920008293306"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "expression = (2**(1/3) + 2**(1/3)) * (2 - 2 * 2**(1/3) - 2**(2/3))\nprint(expression)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "177.0"
    ],
    "solution": "def f(x):\n    return x\n\nvalues = [f(i) for i in range(1000)]\nprint(len(set(values)))"
  },
  {
    "example_id": 9,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "m = 33\nn = 67\nprint(abs(m - n))"
  },
  {
    "example_id": 10,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.125"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "r = 1.0\ns = 2.0\nprint((r/s)**3)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "209.31034482758622"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "z = 5 + 1j\nw = -4 + 10j\nexpression = abs(z + 20j/w)**2 + abs(w + 12j/z)**2\nprint(expression)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "79.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "count = 0\nfor a in range(-5, 5):\n    for b in range(-5, 5):\n        if abs(a + 1j * b) <= 5:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 13,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "from math import sqrt\n\n\ndef abc_max(a, b, c):\n    if a + b + c!= 4 * a * b * c:\n        return -1\n    else:\n        return 4 * sqrt(a) + 6 * sqrt(b) + 12 * sqrt(c) / sqrt(a * b * c)\n\n\nprint(abc_max(1, 1, 1))"
  },
  {
    "example_id": 14,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import factorint, primefactors\nfrom itertools import permutations\n\ndef find_monic_polys(x):\n    factors = factorint(x)\n    for factor in factors.values():\n        if factor[0] == 1:\n            yield factor[1]\n\ndef find_factors(x):\n    factors = primefactors(x)\n    for factor in factors:\n        yield factor\n\ndef find_monic_factors(x):\n    factors = factorint(x)\n    for factor in factors.values():\n        if factor[0] == 1:\n            yield factor[1]\n\ndef find_monic_polys_of_degree(x, degree):\n    factors = factorint(x)\n    for factor in factors.values():\n        if factor[0] == 1 and factor[1].degree() == degree:\n            yield factor[1]\n\ndef compute_polynomial_product(polynomials):\n    result = 0\n    for polynomial in polynomials:\n        result += polynomial\n    return result\n\ndef solve(x):\n    factors = factorint(x)\n    polynomials = []\n    for factor in factors.values():\n        if factor[0] == 1:\n            polynomials.append(factor[1])\n    return compute_polynomial_product(polynomials)\n\nprint(solve(x))"
  },
  {
    "example_id": 15,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "count = 0\nfor u in range(1, 100):\n    for v in range(1, 100):\n        if u * v == 10 and u.real % 1 == 0 and u.imag % 1 == 0 and v.real % 1 == 0 and v.imag % 1 == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 2\nb = 1\nc = 1\nexpression = 4 * a + 3 * b + c**3 / (a - b) * b\nprint(expression)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "91.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a = 3\nb = 4\nprint(a**3 + b**3)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 2\nb = 4\nexpression = a + b\nprint(expression)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1007.5"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "sum = 0\ncount = 0\nfor i in range(2016):\n    sum += i\n    count += 1\nprint(sum / count)"
  },
  {
    "example_id": 20,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def remainder(k, x):\n    return (k * x**4 + 9 * x**3 + k * x**2 + 32 * x - 11) % (x + 5)\n\nk = 4\nwhile remainder(k, 1)!= 4:\n    k += 1\nprint(k)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5486782579.0"
    ],
    "annotated_answers": [
      "2039191.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nsum = 0\nfor n in range(-2019, 2019):\n    sum += f(n)\nprint(sum)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-16.0",
      "0.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z1 = 5j\nz2 = 1j\nexpression = (z1 - z2)**2\nprint(expression)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 1/3**(1/3)\nb = a * (1 + 1/a)**(2/3)\nprint(int(b))"
  },
  {
    "example_id": 24,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "576.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "expression = 0\nfor i in range(1, 49, 2):\n    expression += i\nprint(expression)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.70820393249937"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 1 - 5j\nexpression = abs(z + 5 - 3j) + abs(z - 7 + 2j)\nprint(expression)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy as sym\nx, y, z = sym.symbols('x y z')\nexpression = sym.expand((x**3 + 2*y**3 + 4*z**3)/(x*y*z))\nprint(expression)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor x in range(1, 1000):\n    if 2 * (x + 17 / x) == x * (2 * x + 17) and \\\n            2 * (y + 17 / y) == y * (2 * y + 17) and \\\n            2 * (z + 17 / z) == z * (2 * z + 17) and \\\n            2 * (w + 17 / w) == w * (2 * w + 17):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "k = 6\nprint(k)"
  },
  {
    "example_id": 29,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "29800.0"
    ],
    "annotated_answers": [
      "29800.0"
    ],
    "solution": "count = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        for c in range(1, 101):\n            if a**2 * b + b**2 * c + c**2 * a == a * b**2 + b * c**2 + c * a**2:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.841903733771222"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import sqrt\n\nx = 3\ny = 3\nz = 3\n\nexpression = sqrt(16 - x**2) + sqrt(25 - y**2) + sqrt(36 - z**2)\nprint(expression)"
  },
  {
    "example_id": 31,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-71.0"
    ],
    "solution": "import sympy as sp\nx = sp.Symbol(\"x\")\nP = x**8 - sp.sqrt(2) * x**6 - sp.sqrt(3) * x**5 - sp.sqrt(5) * x**4 - sp.sqrt(2) * x**3 - sp.sqrt(3) * x**2 - sp.sqrt(5) * x + 1\nprint(P.subs(x, 1))"
  },
  {
    "example_id": 32,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "341.0"
    ],
    "solution": "from sympy import Symbol, poly\n\nx = Symbol('x')\np = (x**2 + x + 1) * poly((x**256 + 1) / (x**512 + 1))\nprint(p.coeffs())"
  },
  {
    "example_id": 33,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.03363587813713127",
      "0.03363587813713127"
    ],
    "annotated_answers": [
      "250.0"
    ],
    "solution": "expression = 1 / (5**4 + 1) - 1 / (5**4 - 1)\nexpression = expression ** (1 / 4)\nprint(expression)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.04456722727821",
      "28"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "from math import factorial\n\ndef coefficient(x, n):\n    return factorial(n) // (factorial(x) * factorial(n - x))\n\nprint(coefficient(49, 99))"
  },
  {
    "example_id": 35,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-22.997041420118343",
      "-14.792899408284022"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = 1 - 5j\nexpression = z + 1/z + z**2 + 1/z**2\nprint(expression)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\n\na, b, c = sympy.symbols('a b c')\nexpression = (1 / a + 1 / b + 1 / c) / (1 / (a + b) + 1 / (a + c) + 1 / (b + c))\nprint(expression.evalf())"
  },
  {
    "example_id": 37,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 0\nprint(a)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(0.5 + 0.5 - 1)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.6457513110645907",
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import cmath\nc = cmath.sqrt(7)\nprint(c)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, simplify, factor, solve\nx = Symbol('x')\nexpression = (x + 3)**5 * (x + 2)**8 * (x + 1)**4 * (x - 7)**2 / ((x + 3)**11 * (x + 2)**6 * (x + 1)**4 * x**2)\nprint(simplify(expression))"
  },
  {
    "example_id": 41,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "18.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "5120.0"
    ],
    "solution": "from sympy import symbols, expand, factor, simplify\nx, y, z = symbols('x y z')\nexpression = (1 + 5*z) * (4*z + 3*x) * (5*x + 6*y) * (y + 18)\nexpression = expand(expression)\nexpression = factor(expression)\nexpression = simplify(expression)\nprint(expression)"
  },
  {
    "example_id": 42,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return f(n // 2) + 1\n    else:\n        return f(n // 2)\nprint(f(15))"
  },
  {
    "example_id": 43,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3/2\nprint(x)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor x in range(-7, 7):\n    if abs(x) + 5 < 7 and abs(x - 3) > 2:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.196152422706631"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "from math import sqrt\nx = (sqrt(12) - sqrt(3))**3\nprint(x)"
  },
  {
    "example_id": 46,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "h = -16\nk = 96\na = 16\nb = 4\nprint(h + k + a + b)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.126241187574625"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import sin, pi\n\n\ndef f(x):\n    return 9 * x**2 * sin(x)**2 + 4 / sin(x)\n\n\nprint(min(f(x) for x in range(1, int(pi))))"
  },
  {
    "example_id": 48,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "z = 2j\nw = 5j\nprint(abs(w - z))"
  },
  {
    "example_id": 49,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(i, j):\n    if i == 0 and 0 <= j <= 4:\n        return j + 1\n    if i >= 1 and j == 0:\n        return f(i - 1, 1)\n    if i >= 1 and 1 <= j <= 4:\n        return f(i - 1, f(i, j - 1))\n\nprint(f(2015, 2))"
  },
  {
    "example_id": 50,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "201.0"
    ],
    "annotated_answers": [
      "840.0"
    ],
    "solution": "m = 1\nn = 100\nwhile m < n:\n    sum = 0\n    for k in range(m, n):\n        sum += 1 / (k**2 + k)\n    if sum == 1 / 29:\n        break\n    m += 1\nn += 1\nprint(m + n)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.39829654694291144"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nx = math.exp(math.log(2) + math.log(4) - 3)\nprint(x)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "from math import factorial\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\nk = 1\nwhile binomial_coefficient(10**9, k) >= binomial_coefficient(10**9 + 1, k - 1):\n    k += 1\n\na = k // 10\nb = k % 10\n\nprint(10 * a + b)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36928.0"
    ],
    "annotated_answers": [
      "277.0"
    ],
    "solution": "def p(x):\n    return 4 * (x + 3)**3 - 16 * (x - 2)**3 + 16 * (x + 4)**3 - 4 * (x + 5)**3\n\nprint(p(11))"
  },
  {
    "example_id": 54,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-2016.0"
    ],
    "solution": "A = -1\nB = 1"
  },
  {
    "example_id": 55,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = -1\nb = 1\nc = 1\nexpression = abs(a) + abs(b) + abs(c)\nprint(expression)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "54.0",
      "6.0"
    ],
    "annotated_answers": [
      "-108.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\nexpression = x**6 + y**6 - 54*x*y\nprint(expression.evalf())"
  },
  {
    "example_id": 57,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "450.0"
    ],
    "annotated_answers": [
      "450.0"
    ],
    "solution": "import math\n\nmean_a = 2700\nmean_b = 75\n\na = math.sqrt(mean_a * mean_b)\nprint(a)"
  },
  {
    "example_id": 58,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "41230.0"
    ],
    "annotated_answers": [
      "41230.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 20):\n    sum += i * (i+1)**2\nprint(sum)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2**(6/2)\nprint(x)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "z1, z2, z3 = 2j, 3j, 4j\nexpression = abs(z1 - z2)**2 + abs(z1 - z3)**2 + abs(z2 - z3)**2\nprint(expression)"
  },
  {
    "example_id": 61,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor x in range(-100, 100):\n    for y in range(-100, 100):\n        if (x + y)**2 == (x + 1)*(y - 1):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 62,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "936.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nexpression = a * b * c\nprint(expression)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "count = 0\nfor n in range(1, 100):\n    if (7**5) % (7**n) == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 64,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "2.0",
      "6.0",
      "4.0",
      "5.0",
      "6.0",
      "4.0",
      "11.0",
      "3.0",
      "12.0",
      "2.0",
      "8.0",
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\np = x**7 - 2*x**6 + 4*x**5 - 6*x**4 + 11*x**3 - 12*x**2 + 8*x - 1\nprint(p)"
  },
  {
    "example_id": 65,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\nprint(abs(math.sqrt(5) + 2j))"
  },
  {
    "example_id": 66,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "a_n = 1\nfor i in range(2, 100):\n    a_n = a_n**2 - a_n * a_n + 1\nprint(a_n)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "945.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "def p(x):\n    return x**3 - 6 * x**2 + 8 * x - 15\n\nprint(p(12))"
  },
  {
    "example_id": 68,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "3.0",
      "5.0",
      "2.0",
      "16.0",
      "8.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "from sympy import Symbol\n\ny = Symbol('y')\nexpression = (6*y**3 + 5*y**2 - 16*y + 8) / (2*y + 3)\nprint(expression)"
  },
  {
    "example_id": 69,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import math\n\na, b, c, d = 1j, 1, -1j, -1\n\nexpression = abs((a + b) * (a + c) * (a + d) * (b + c) * (b + d) * (c + d))\nprint(expression)"
  },
  {
    "example_id": 70,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8836.0"
    ],
    "annotated_answers": [
      "4561.0"
    ],
    "solution": "f = lambda x: x**2\nprint(f(94))"
  },
  {
    "example_id": 71,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "from math import floor\n\nexpression = (3**100 + 2**100) / (3**96 + 2**96)\nprint(floor(expression))"
  },
  {
    "example_id": 72,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def f(x):\n    return -3 * x**2 + 36 * x - 7\n\ndef find_smallest_c():\n    smallest_c = 0\n    for c in range(1, 101):\n        if f(c) == 0:\n            smallest_c = c\n            break\n    return smallest_c\n\nprint(find_smallest_c())"
  },
  {
    "example_id": 73,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 3\ny = 2\nprint(x**3)"
  },
  {
    "example_id": 74,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from sympy import solve, Symbol\n\nx = Symbol('x')\nroots = solve((x**2 - 13*x + 22) / (x**2 - 8*x + 12), x)\nprint(roots)"
  },
  {
    "example_id": 75,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "97.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "x = 97\nfor _ in range(8):\n    x = 1 / x\nprint(x)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def fibonacci(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 0\nwhile fibonacci(n) <= 10**6:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "169711.0",
      "624.0"
    ],
    "annotated_answers": [
      "272.0"
    ],
    "solution": "from sympy import binomial\nsum = 0\nfor n in range(17, 10000):\n    sum += binomial(n, 15) / binomial(n, 17)\nprint(sum)"
  },
  {
    "example_id": 78,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 2\nb = 3\nc = 4\nprint(a+b+c)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.5"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 1\ny = 0.5\nz = 0.25\nexpression = x + 108 / (x - y)**3 * (y - z)**2 * z\nprint(expression)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import itertools\ncount = 0\nfor a, b, c, d in itertools.product(range(1, 10000), repeat=4):\n    if a * log10(2) + b * log10(3) + c * log10(5) + d * log10(7) == 2005:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0",
      "52.0",
      "51.0",
      "50.0",
      "49.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import *\nz = Symbol('z')\nexpression = z**49 + z**50 + z**51 + z**52 + z**53\nprint(expression)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = (7-4)/(7-4)\nprint(a)"
  },
  {
    "example_id": 83,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "192060.0",
      "6.0",
      "470449.0"
    ],
    "annotated_answers": [
      "66673.0"
    ],
    "solution": "from sympy import expand\nfrom sympy import sqrt\n\nexpression = expand((sqrt(2) + sqrt(3)) ** 12)\nprint(expression)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "533.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "a = 2\nb = 3\nc = 4\nd = 5\nexpression = (a * d - b * c)**2 + (a * c + b * d)**2\nprint(expression)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "161.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "def f(x):\n    return x**7 + 32*x**2 + 128\n\ndef g(x):\n    return x**3\n\nmin_val = f(1)\nmin_x = 1\nfor x in range(2, 101):\n    if f(x) < min_val:\n        min_val = f(x)\n        min_x = x\nprint(min_x)\nprint(min_val)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "774144000.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "p = lambda x: 210 * (x + 10)**2 * (x - 4)**2 * (x + 6)**2\nprint(p(10))"
  },
  {
    "example_id": 87,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a1 = 1\na2 = 1 / (1 - a1)\na3 = a2\na4 = 1 / (1 - a3)\na5 = 1 / (1 - a4)\na6 = 1 / (1 - a5)\na7 = 1 / (1 - a6)\na8 = 1 / (1 - a7)\na9 = 1 / (1 - a8)\nprint(a9**9)"
  },
  {
    "example_id": 88,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    return x / (2*x + 3)\n\ndef f_inv(x):\n    return 2 * x + 3\n\nc = f_inv(f(0))\nprint(c)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4951.0"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 101):\n    sum += i\n    if i!= 100:\n        sum -= 1\nprint(sum)"
  },
  {
    "example_id": 90,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 0\nwhile True:\n    n += 1\n    a = (n + 63) // 4\n    b = n - 4 * a\n    if a % 4 == 0 and b % 4 == 0:\n        break\nprint(n)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "9.0",
      "2.0",
      "2.0",
      "9.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import sympy\nx, y = sympy.symbols('x y')\nexpression = x**2 - 6*x + y**2\nconstraint = sympy.Abs(x + y) + sympy.Abs(x - y) - 2\nsolution = sympy.solve(expression, x, y, constraint)\nprint(solution)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1722.0"
    ],
    "annotated_answers": [
      "508.0"
    ],
    "solution": "a = -1\nb = 2\nc = 3\nd = 4\ne = 2\nf = 2\nexpression = a + 6*b + 21*c + 36*d + 32*e + 720*f\nprint(expression)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import solve\n\ndef has_two_distinct_roots(x):\n    return len(solve(x**4 + (x**2 - 1) * x**2 + x**3, x)) == 2\n\na_values = [x for x in range(1, 101) if has_two_distinct_roots(x)]\nprint(sum(a_values))"
  },
  {
    "example_id": 94,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nroots = solve(x**3 - 3*x - 5, x)\nabc = roots[0]*roots[1]*roots[2]\nprint(abc)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.4604610175871",
      "84.0"
    ],
    "annotated_answers": [
      "1052.0"
    ],
    "solution": "from scipy.special import binom\nn = 1000\nk = 50\nprint(binom(n, k))"
  },
  {
    "example_id": 96,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 100):\n    for b in range(-100, 100):\n        if (a**2 + a * b + b**2) == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-72.0",
      "2.0",
      "24.0",
      "6.0",
      "40.0",
      "3.0",
      "120.0"
    ],
    "annotated_answers": [
      "-48.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nf = Poly((x - 1 - 2*sqrt(3))*(x - 3 + sqrt(2))*(x + 1 + 2*sqrt(3))*(x + 3 - sqrt(2)), x)\nprint(f(1))"
  },
  {
    "example_id": 98,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "8.0",
      "3.0",
      "3.0",
      "8.0"
    ],
    "annotated_answers": [
      "-81.0"
    ],
    "solution": "from sympy import I, sqrt\nexpression = (3 + I * sqrt(3))**8 + (3 - I * sqrt(3))**8\nprint(expression)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6245047927124712"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "common_ratio = (3072 / 24)**(1/10)\nprint(common_ratio)"
  },
  {
    "example_id": 100,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "expression = 0\nfor i in range(1, 101):\n    expression += i\nprint(expression)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.166666666666668"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "A = 5/3\nB = 5/2\nC = 5\nprint(A + B + C)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = [5, 4, 3, 2, 1]\nb = [10, 5, 8, 3, 6]\nprint(sum(a) + sum(b))"
  },
  {
    "example_id": 103,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "from sympy import *\n\nP = x**3 - a*x**2 + b*x - 65\n\nroots = solve(P, x)\n\np_ab = 0\nfor r in roots:\n    p_ab += r\n\nprint(p_ab)"
  },
  {
    "example_id": 104,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x y')\n\neq1 = x + y - 2\neq2 = x**5 + y**5 - 82\n\nsol = sympy.solve((eq1, eq2), (x, y))\n\nexpression = 0\nfor i, j in sol:\n    expression += i**2 + j**2\n\nprint(expression)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol, Abs\n\na = Symbol(\"a\")\nb = Symbol(\"b\")\n\nif (Abs(a) == Abs(b)) and (Abs(a + b) == Abs(a + b)):\n    result = a / b\nelse:\n    result = 0\n\nprint(result)"
  },
  {
    "example_id": 106,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "2.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\ng = x**3 - 14*x**2 + 18*x + 72\nprint(g.factor())"
  },
  {
    "example_id": 107,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10.0",
      "2.0",
      "0.0",
      "2.0",
      "0.0",
      "1.0",
      "0.0",
      "4.0",
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from scipy.optimize import minimize\n\ndef objective(x):\n    return 2 * x[0]**2 + 2 * x[1]**2 + 5 * x[2]**2 - 2 * x[0] * x[1] - 4 * x[1] * x[2] - 4 * x[0] - 2 * x[2] + 15\n\nres = minimize(objective, [1, 1, 1])\nprint(res)"
  },
  {
    "example_id": 108,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy as sp\n\nz = sp.Symbol('z')\nexpression = sp.Abs(z - 3)**2 + sp.Abs(z - 5 + 2*sp.I)**2 + sp.Abs(z - 1 + sp.I)**2\nprint(expression)"
  },
  {
    "example_id": 109,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from math import sqrt\n\n\ndef f(x):\n    return sqrt(5 * x**2 + 2 * x * sqrt(5) + 1) + x * sqrt(5)\n\n\nx = -1\nwhile f(x) > 0:\n    x -= 1\nprint(x)"
  },
  {
    "example_id": 110,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a, b, c')\nexpression = (a + 1) * (b + 1) * (c + 1)\nexpression = expression.subs(a + 1, 1)\nexpression = expression.subs(b + 1, 2)\nexpression = expression.subs(c + 1, 3)\nexpression = expression.subs(a + 2, 2)\nexpression = expression.subs(b + 2, 2)\nexpression = expression.subs(c + 2, 3)\nexpression = expression.subs(a + 3, 3)\nexpression = expression.subs(b + 3, 3)\nexpression = expression.subs(c + 3, 3)\nexpression = expression.subs(a + 4, 4)\nexpression = expression.subs(b + 4, 4)\nexpression = expression.subs(c + 4, 4)\nprint(expression)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nn = 0\ns = 0\nfor i in range(100):\n    if f(5) == i:\n        n += 1\n        s += i\nprint(n * s)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\nx = sympy.symbols('x')\nexpression = sympy.Poly(a * x**3 + b * x - c)\ndivisor = sympy.Poly(x**2 + b * x + c)\nprint(expression.div(divisor))"
  },
  {
    "example_id": 113,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols('a b c')\nexpression = sympy.log(a, b)**3 + sympy.log(b, c)**3 + sympy.log(c, a)**3\nprint(expression.evalf())"
  },
  {
    "example_id": 114,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "2014.0"
    ],
    "solution": "from sympy import factorint\n\ndef get_coefficient(x):\n    factors = factorint(x)\n    numerator, denominator = factors.popitem()\n    return numerator - 1 / denominator\n\ndef find_abc(x):\n    a = get_coefficient(x)\n    b = int(a**0.5)\n    c = int(a**0.5)\n    return a, b, c\n\ndef is_valid(a, b, c):\n    return a - 1 / b**c == 0\n\ndef find_solution(x):\n    a, b, c = find_abc(x)\n    if is_valid(a, b, c):\n        return a + b + c\n    else:\n        return -1\n\nx = 2**2011\nsolution = find_solution(x)\nprint(solution)"
  },
  {
    "example_id": 115,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.88399587924336"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\n\n# Find the distance between the foci\ndef distance_between_foci(major_axis, area):\n    # The area of triangle PF1 F2 is half the area of the ellipse\n    # The area of the ellipse is half the product of the major and minor axes\n    minor_axis = math.sqrt(area / (major_axis / 2))\n    return math.sqrt(major_axis**2 - minor_axis**2)\n\n# Print the distance between the foci\nprint(distance_between_foci(15, 26))"
  },
  {
    "example_id": 116,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from sympy import sqrt\nfrom sympy.abc import x\nfrom sympy import Poly\n\nP = Poly(x**4 - 1 - sqrt(6), x)\nprint(P(1))"
  },
  {
    "example_id": 117,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol(\"x\")\ny1 = x**4 - 5*x**2 - x + 4\ny2 = x**2 - 3*x\n\npoints = sympy.solve([y1 - y2, y1.diff(x) - y2.diff(x)], [x])\nprint(sum(point[1] for point in points))"
  },
  {
    "example_id": 118,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0",
      "-9.0",
      "-8.0",
      "-7.0",
      "-6.0",
      "-5.0",
      "-4.0",
      "-3.0",
      "-2.0",
      "-1.0",
      "0.0",
      "1.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "domain = []\nfor x in range(-10, 10):\n    if (x**2 - 6*x + 8) + (x**2 + x - 6)!= 0:\n        domain.append(x)\nprint(domain)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "-2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = 1 - 1j\nprint(z**3)"
  },
  {
    "example_id": 120,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.972222222222222"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nexpression = (b*c)/(a**2) + (a*c)/(b**2) + (a*b)/(c**2)\nprint(expression)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "6.0",
      "2.0",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = sympy.sqrt(x + sympy.sqrt(3*x + 6)) + sympy.sqrt(x - sympy.sqrt(3*x + 6))\nsolution = expression.subs(x, 6)\nprint(solution)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "def f(x, y):\n    if x * y!= 1:\n        return x + y * f(y, x)\n    else:\n        return 1\n\nprint(f(1, 2))"
  },
  {
    "example_id": 123,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "5.0",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy\na1, b1, a2, b2, an, bn = sympy.symbols('a1 b1 a2 b2 a_n b_n')\nexpr = (a1 + a2 + an) * (b1 + b2 + bn)\nexpr = expr.expand()\nexpr = expr.subs({a1: a1 + b1, b1: a1 - b1, a2: a2 + b2, b2: a2 - b2})\nexpr = expr.subs({a1: a1 + b1, b1: a1 - b1, a2: a2 + b2, b2: a2 - b2})\nexpr = expr.subs({a1: a1 + b1, b1: a1 - b1, a2: a2 + b2, b2: a2 - b2})\nprint(expr)"
  },
  {
    "example_id": 124,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "405.0"
    ],
    "annotated_answers": [
      "405.0"
    ],
    "solution": "print(abs(-324 + 243j))"
  },
  {
    "example_id": 125,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "n = 1\nwhile n <= 2010:\n    if (1 + 1/n)**n == int((1 + 1/n)**n):\n        print(n)\n    n += 1"
  },
  {
    "example_id": 126,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "2.0",
      "27.0",
      "22.0"
    ],
    "annotated_answers": [
      "2150.0"
    ],
    "solution": "import sympy as sy\n\nx = sy.Symbol(\"x\")\nexpression = sy.expand((x**3 + x**2 - 5) - (x - 3)**3)\nprint(expression)"
  },
  {
    "example_id": 127,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    for y in range(1, 101):\n        for z in range(1, 101):\n            if (x + 1 / y) * (y + 1 / z) * (z + 1 / x) == 8:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "4.0",
      "3.0",
      "14.0",
      "2.0",
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "676.0"
    ],
    "solution": "from sympy import Symbol, expand, factor\n\nx = Symbol('x')\nf = x**5 + 5*x**4 - 10*x**3 - 10*x**2 + 5*x + 1\nf = expand(f)\nf = factor(f)\nprint(f)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29616.0"
    ],
    "annotated_answers": [
      "348.0"
    ],
    "solution": "n = 8\na = 1440\nb = 1716\nc = 1848\nsequence = a * (n-1) + b * (n-2) + c * (n-3)\nprint(sequence)"
  },
  {
    "example_id": 130,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "236.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "# Surface area of a box is 2 * (l * w + w * h + h * l)\nl = 8\nw = 6\nh = 5\narea = 2 * (l * w + w * h + h * l)\nprint(area)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29054.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "x = 10\ny = 3\nexpression = 2*x**3 + (x*y)**3 + 2*y**3\nprint(expression)"
  },
  {
    "example_id": 132,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sp\n\nx, y = sp.symbols('x, y')\n\nG = (1 - y) / (1 - x)\nG_prime = (1 - x) / (1 - y)\n\nprint(G - G_prime)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "from math import sqrt\na = int(sqrt(8 * sqrt(2)))\nb = int(sqrt(8 * sqrt(2)))\nc = int(sqrt(8 * sqrt(2)))\nprint(a + b + c)"
  },
  {
    "example_id": 134,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor n in range(3, 100):\n    for x1 in range(1, n + 1):\n        for x2 in range(x1 + 1, n + 1):\n            xn = -x1 - x2\n            if xn >= 0:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor x in range(-100, 101):\n    for y in range(-100, 101):\n        for z in range(-100, 101):\n            if x**4 + y**4 + z**4 - 4 * x * y * z == -1:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4558909.0"
    ],
    "annotated_answers": [
      "763.0"
    ],
    "solution": "def p(n, x):\n    if n == 1:\n        return x**3 + 313*x**2 - 77*x - 8\n    else:\n        return p(n - 1, x - n)\nprint(p(20, 0))"
  },
  {
    "example_id": 137,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.739208802178716",
      "0.0",
      "39.47841760435743",
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\n\ndef area(r, theta):\n    return r**2 * theta / 2\n\ndef arc_length(r, theta):\n    return r * theta\n\ndef theta_max(r):\n    return 2 * pi * r\n\ndef theta_min(r):\n    return 0\n\ndef theta_max_area(r):\n    return theta_max(r) * area(r, theta_max(r))\n\ndef theta_min_area(r):\n    return theta_min(r) * area(r, theta_min(r))\n\ndef theta_min_arc_length(r):\n    return theta_min(r) * arc_length(r, theta_min(r))\n\ndef theta_max_arc_length(r):\n    return theta_max(r) * arc_length(r, theta_max(r))\n\nprint(theta_max_area(1))\nprint(theta_min_area(1))\nprint(theta_max_arc_length(1))\nprint(theta_min_arc_length(1))"
  },
  {
    "example_id": 138,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-45.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(5 * -9)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "numbers = [1, 2, 3, 4, 5]\nprint(sum(numbers) / len(numbers))"
  },
  {
    "example_id": 140,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.25",
      "2.5",
      "-1.0",
      "2.5",
      "-1.0",
      "2.5",
      "-1.0",
      "2.5",
      "-1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from scipy.optimize import minimize\n\n\ndef objective(x):\n    a, b, c, d = x\n    return a**2 + b**2 + c**2 + d**2\n\n\ndef constraint(x):\n    a, b, c, d = x\n    return a + b + c + d - 1\n\n\ndef solve(a, b, c, d):\n    return minimize(objective, [a, b, c, d], constraints=[{'type': 'eq', 'fun': constraint}])\n\n\nprint(solve(0.25, 0.25, 0.25, 0.25))"
  },
  {
    "example_id": 141,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import symbols\na, b, c, d, e = symbols('a b c d e')\nexpression = (a**4 / (a - b) * (a - c) * (a - d) * (a - e)\n            + b**4 / (b - a) * (b - c) * (b - d) * (b - e)\n            + c**4 / (c - a) * (c - b) * (c - d) * (c - e)\n            + d**4 / (d - a) * (d - b) * (d - c) * (d - e)\n            + e**4 / (e - a) * (e - b) * (e - c) * (e - d))\nprint(expression.simplify())"
  },
  {
    "example_id": 142,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2000.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def get_next_term(previous_terms):\n    return previous_terms[0] + previous_terms[1] - previous_terms[2]\n\nprevious_terms = [2001, 2002, 2003]\nfor i in range(4, 2004):\n    previous_terms.append(get_next_term(previous_terms))\nprint(previous_terms[-1])"
  },
  {
    "example_id": 143,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "4.0",
      "3.0",
      "5.0",
      "1.0",
      "3.0",
      "5.0",
      "4.0",
      "8.0",
      "7.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import simplify, Symbol\n\nx = Symbol('x')\nexpression = (x + 8) * (x + 5)**2 * (x + 1)**3 * x**5 * (x - 3)**2 / (x + 7) * (x + 5)**2 * x * (x - 3)**3 * (x - 4)\nprint(simplify(expression))"
  },
  {
    "example_id": 144,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# 1 solution"
  },
  {
    "example_id": 145,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.333333333333332"
    ],
    "annotated_answers": [
      "553.0"
    ],
    "solution": "from sympy import floor, sqrt\n\nn = 70\nk = 3\n\nmax_value = 0\n\nfor i in range(1, n + 1):\n    x = sqrt(i)\n    y = floor(x)\n    if y == x:\n        max_value = max(max_value, i / k)\n\nprint(max_value)"
  },
  {
    "example_id": 146,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "169.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 156 + 65j\nprint(abs(z))"
  },
  {
    "example_id": 147,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def p(x):\n    return x**8 + 98 * x**4 + 1\n\ndef q(x):\n    return (x**8 + 98 * x**4 + 1) // p(x)\n\nprint(p(1) + q(1))"
  },
  {
    "example_id": 148,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return (6 * x**3 + 4 * x**2 - 11 * x + 5) / (3 * x**3 - 15 * x + 20)\n\nc = f(0)\nprint(c)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print((1990**3 - 1000**3 - 990**3) / (1990 * 1000 * 990))"
  },
  {
    "example_id": 150,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\n\nexpression = x**3 * y + y**3 * z + z**3 * x\nconstraint = x + y + z\n\nmaximum = expression.subs({x: -y - z, y: -x - z, z: -x - y})\nprint(maximum)"
  },
  {
    "example_id": 151,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "N = 1\nwhile True:\n    if 1 + 2 + 3 + 4 + 5 + 6 + 7 + N == 1 + 2 + 3 + 4 + 5 + 6 + 7 + N:\n        break\n    N += 1\nprint(N)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "155.6"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "a, b, c = 3, 4, 5\nexpression = (a + b + c) * ((a + b)**2 + (a + b + 4 * c)**2) / (a * b * c)\nprint(expression)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "67.0"
    ],
    "solution": "count = 0\nfor n in range(1, 101):\n    if (x**2 + x + 1).divides(x**2 * n + 1 + (x + 1)**2 * n):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "z = 2j\nw = 5j\nprint(abs(z + w))"
  },
  {
    "example_id": 155,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1700.0"
    ],
    "annotated_answers": [
      "1700.0"
    ],
    "solution": "x = 9\nwhile True:\n    x += 1\n    if x % 19 == 9 and x % 89 == 9:\n        break\nprint(x)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "2.0",
      "-4.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import Symbol, solve\n\na = Symbol('a')\nb = Symbol('b')\nc = Symbol('c')\nx = Symbol('x')\n\nf = a * x**2 + b * x + c\n\nans = solve(f, x)\n\nA, B = ans\n\nprint(A + B)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12840.0"
    ],
    "annotated_answers": [
      "1112.0"
    ],
    "solution": "def p(x):\n    return x**4 + 4*x**3 - 7*x**2 - 12*x + 1\n\nprint(p(-2) + 7*p(6))"
  },
  {
    "example_id": 158,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0",
      "13.0",
      "170.0",
      "170.0",
      "1.0",
      "810932305.0",
      "8.0",
      "499769140.0",
      "7.0",
      "134723250.0"
    ],
    "annotated_answers": [
      "850.0"
    ],
    "solution": "import sympy as sp\n\nx = sp.Symbol('x')\nf = x**10 + (13*x - 1)**10\nroots = sp.solve(f)\nprint(sum(1/r.conjugate() for r in roots))"
  },
  {
    "example_id": 159,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6349839001848923"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def sum_of_reciprocals(n):\n    return sum(1 / (i ** 2) for i in range(1, n + 1))\n\nprint(sum_of_reciprocals(100))"
  },
  {
    "example_id": 160,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor a3 in range(1, 100):\n    for a2 in range(1, 100):\n        for a1 in range(1, 100):\n            if 2 * a3**2 + a2**3 + a1**2 + 1 == 0:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13535.0"
    ],
    "annotated_answers": [
      "13535.0"
    ],
    "solution": "from math import floor\n\nexpression = floor(((7 ** (1/2)) + (5 ** (1/2))) ** 6)\nprint(expression)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1209.0"
    ],
    "solution": "def f(x):\n    if x == 5:\n        return 3\n    elif x == 4:\n        return 2\n    else:\n        return 2 * f(x + y) + f(x - y)"
  },
  {
    "example_id": 163,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nf = x**6 - 4*x**5 + 3*x**3 + x**2 - 1\nf = f.as_numer_denom()[1]\nprint(degree(f))"
  },
  {
    "example_id": 164,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "198.0",
      "-4.0",
      "2.0",
      "2454.0",
      "62532.0",
      "11.0",
      "198.0",
      "2.0",
      "833569.0",
      "913.0",
      "15.0",
      "2.0",
      "888.0",
      "56151.0",
      "11.0",
      "198.0",
      "2.0",
      "833569.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "import sympy\n\nz1 = sympy.Symbol('z1', real=True)\nz2 = sympy.Symbol('z2', real=True)\nz3 = sympy.Symbol('z3', real=True)\n\nz = sympy.Symbol('z', real=True)\n\nexpr = (z3 - z1) * (z - z2) / (z2 - z1) * (z - z3) / (z - z1)\nexpr = expr.subs({z1: 18 + 83 * sympy.I, z2: 18 + 39 * sympy.I, z3: 78 + 99 * sympy.I})\nexpr = expr.simplify()\n\nreal = sympy.re(expr)\nprint(real)"
  },
  {
    "example_id": 165,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "92.0"
    ],
    "solution": "sum = 0\nfor a in range(5, 4):\n    for b in range(a, 4):\n        for c in range(b, 4):\n            for d in range(c, 4):\n                p = 4*z**4 + a*z**3 + b*z**2 + c*z + d\n                roots = p.roots\n                if len(roots) == 1 and abs(roots[0]) == 1:\n                    sum += p.subs(z, 1)\nprint(sum)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import symbols\na, b, c, d = symbols('a b c d')\nexpression = (a*c + b*d)**2 + (b*c - a*d)**2\nprint(expression.expand())"
  },
  {
    "example_id": 167,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "k_count = 0\nfor k in range(1, 101):\n    if k**2!= k:\n        k_count += 1\nprint(k_count)"
  },
  {
    "example_id": 168,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.9999999999999996"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import log\nexpression = log(3, 2) * log(4, 3) * log(5, 4) * log(6, 5) * log(7, 6) * log(8, 7)\nprint(expression)"
  },
  {
    "example_id": 169,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\np = x**3 + 2009*x**2 + 9002*x + 1\np_roots = roots(p)\nprint(len([z for z in p_roots if not z.is_real]))"
  },
  {
    "example_id": 170,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "z = 100 + 75j\nprint(abs(z))"
  },
  {
    "example_id": 171,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nsolutions = solve((1/(x-1) + 1/(x-5) + 1/(x-10) + 1/(x-25) - 2), x)\nsum = 0\nfor s in solutions:\n    sum += s\nprint(sum)"
  },
  {
    "example_id": 172,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "0.0",
      "7.0",
      "3.0",
      "8880940.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import sympy\nfrom sympy import *\nx, y, z = symbols('x, y, z')\neq = x**2 + y**2 + z**2 - 2\nsol = solve(eq, [x, y, z])\nprint(sol)\nprint(min(abs(x) + abs(y) + abs(z)) for x, y, z in sol)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 3\nx1, y1 = 1, 2\nx2, y2 = 4, 5\nc1 = (y1 - y2) / (x1 - x2)\nc2 = (x2 * y1 - x1 * y2) / (x1 - x2)\nc3 = y1 - c1 * x1 - c2\nprint(c1 + c2 + c3)"
  },
  {
    "example_id": 174,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "384.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "expression = 2009**4 - 4 * 2007**4 + 6 * 2005**4 - 4 * 2003**4 + 2001**4\nprint(expression)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "1000.0"
    ],
    "solution": "count = 0\nfor m in range(1, 1001):\n    for n in range(1, m + 1):\n        if m * n <= m + n:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 176,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "560.9999999999999"
    ],
    "annotated_answers": [
      "561.0"
    ],
    "solution": "a = [1, 1]\nb = [1, 3]\nfor i in range(2, 33):\n    a.append(a[i - 1] + a[i - 1]**2 / a[i - 2])\n    b.append(b[i - 1] + b[i - 1]**2 / b[i - 2])\nprint(b[32] / a[32])"
  },
  {
    "example_id": 177,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 1\nb = 1\nexpression = a**2 + b**2\nprint(expression)"
  },
  {
    "example_id": 178,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 2008\nb = 2012\nprint(b - a)"
  },
  {
    "example_id": 179,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "4.0",
      "34.0",
      "3.0",
      "104.0",
      "2.0",
      "147.0",
      "0.0",
      "5.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import solve\nfrom sympy.abc import x\nexpression = (1/(7 - x) * (1 + x) * (1 - x)) + (3*x**2 - 18*x - 22)/((x**2 - 1) * (x - 7)) + (3/(x - 2)) - (3/(x - 1) * (x - 2))\nprint(solve(expression, x))"
  },
  {
    "example_id": 180,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5842405849569903"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import log\nx = log(10, 3) - log(19, 3)\nprint(x)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = (2*x**2 + x + 3)/(x**2 + x + 1) - (2*x + 1)/(x + 1)\nsolution = sympy.solve(expression, x)\nprint(solution)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4294967296.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "log2x = 2 ** (2 * 8)\nprint(log2x**2)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-19.0",
      "1.0",
      "2.0",
      "3.0",
      "-19.0",
      "4.0",
      "5.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "A = 1\nB = 2\nC = 3\nP = 4\nQ = 5\nroots_of_first = sorted([-19, A, B, C])\nroots_of_second = sorted([-19, P, Q])\nprint(roots_of_first)\nprint(roots_of_second)\nprint(roots_of_first[1:] + roots_of_second[1:])"
  },
  {
    "example_id": 184,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from sympy import Symbol\na, b, c = Symbol('a'), Symbol('b'), Symbol('c')\nexpression = a**3 + b**3 + c**3\nprint(expression)"
  },
  {
    "example_id": 185,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import *\n\nx = Symbol('x', real=True)\na = Symbol('a', real=True)\n\npoly = x**6 + 3*a*x**5 + (3*a**2 + 3)*x**4 + (a**3 + 6*a)*x**3 + (3*a**2 + 3)*x**2 + 3*a*x + 1\nsolution = solve(poly, a, dict=True)\nprint(solution)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Using the fact that the two polynomials have two roots in common\n# (x - 2) is a factor of (x^2 - kx + k)\n# (x - 2) is a factor of (x^2 - kx + k)\n# (x - 2)^2 - k = 0\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k = (x - 2)^2 - 2(x - 2) + 4\n# (x - 2)^2 - k ="
  },
  {
    "example_id": 187,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.627416997969522"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "expression = abs((-2 - 2*1j)**3)\nprint(expression)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.485599924429406"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from math import log\n\nA = 5\nB = 20\nC = 3\n\nexpression = A * log(B/C)\n\nprint(expression)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "from math import prod\nprint(prod([10, 4/3, 6/4, 8/5, 10/6, 12/7, 14/8, 16/9, 18/10]))"
  },
  {
    "example_id": 190,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 1\ny = 2\nz = 3\nprint(x * y + y * z + z * x)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "5.0",
      "-2.0",
      "6.0",
      "5.0",
      "1.0",
      "5.0",
      "2.0",
      "6.0",
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\ny = sympy.Symbol('y')\nexpression = sympy.log(x-y, 6) + sympy.log(x+y, 6)\nexpression2 = sympy.log(5*x, y)\nsolution = sympy.solve([expression, expression2], [x, y])\nprint(solution)"
  },
  {
    "example_id": 192,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "743.0"
    ],
    "solution": "r = 546 / 91\nprint(int(100 * r))"
  },
  {
    "example_id": 193,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "16.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from scipy.optimize import minimize\n\ndef objective(x):\n    return (x[0] + x[1] + x[2] + x[3]) * (1 / x[0] + 1 / x[1] + 1 / x[2] + 1 / x[3])\n\nresult = minimize(objective, [1, 1, 1, 1])\nprint(result)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z = 64/5 - 48/5j\nprint(abs(z))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from fractions import Fraction\n\nroots = [Fraction(1, 7), Fraction(1, 7**2), Fraction(1, 7**3), Fraction(1, 7**4)]\n\ncount = 0\nfor root in roots:\n    if root.denominator % 7 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "999.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "n = 1\nwhile True:\n    r = (n + 1) / 1000\n    if (n + r)**3 % 1 == 0:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 197,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "1573664496040.0",
      "10.0",
      "2.0",
      "10.0",
      "1.0",
      "14005614014756.0"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "import sympy\nfrom sympy import symbols, binomial\n\nroots = [symbols(f\"r{i}\") for i in range(1, 99)]\nexpr = sum([binomial(98, i) * roots[i]**2 / (roots[i] + 1) for i in range(98)])\nprint(expr.evalf())"
  },
  {
    "example_id": 198,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 1\ny = 1\nz = 1\nexpression = 10 * x**2 + 10 * y**2 + z**2\nprint(expression)"
  },
  {
    "example_id": 199,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "def e(x):\n    return x\n\ndef o(x):\n    return x**2\n\ndef f(x):\n    return e(x) + o(x)\n\nprint(f(2))"
  },
  {
    "example_id": 200,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "199.0"
    ],
    "solution": "count = 0\nfor x in range(1, 10001):\n    if x**2 + 10000 * x // x == 10000 * x:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 201,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def largest_integer_roots(constant):\n    roots = []\n    for i in range(1, int(constant**0.5) + 1):\n        if constant % i == 0:\n            roots.append(i)\n            constant = constant // i\n    return len(roots)\n\nprint(largest_integer_roots(42))"
  },
  {
    "example_id": 202,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = (14-8) / (7-5)\nb = 8 - a * 5\nprint(a - b)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "-80.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nroots = solve(x**3 + 8*x**2 - 4*x, x)\nprint(roots[0] + roots[1])"
  },
  {
    "example_id": 204,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8080.0"
    ],
    "annotated_answers": [
      "8080.0"
    ],
    "solution": "x = 1\ny = 1\nexpression = (x + 1/y) * (x + 1/y + 2018) + (y + 1/x) * (y + 1/x + 2018)\nprint(expression)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.000000000000001"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x_n = 3\nfor i in range(1, 12345):\n    x_n = (1 + x_n) / (1 - x_n)\nprint(x_n)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "from math import sqrt\n\na = 2\nb = 16\nc = 4\nd = 3\n\nprint(a + b + c + d)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "S = sum(1/(2**n) for n in range(1, 1000))\nprint(S)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "-63.0"
    ],
    "solution": "a, b, c = 1, 2, 4\nprint(a + b + c)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\ndef arithmetic_sequence(a, b, c):\n    return [a, b, c] if a + 1 == b and b + 1 == c else False\n\ndef find_middle(numbers):\n    if len(numbers) % 2 == 1:\n        return numbers[len(numbers) // 2]\n    else:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n\nnumbers = [3, 5, 6, 7, 9]\n\nif arithmetic_sequence(numbers[0], numbers[1], numbers[2]):\n    print(find_middle(numbers[0:3]))\nelif arithmetic_sequence(numbers[1], numbers[2], numbers[3]):\n    print(find_middle(numbers[1:4]))\nelif arithmetic_sequence(numbers[2], numbers[3], numbers[4]):\n    print(find_middle(numbers[2:5]))\nelse:\n    print(\"No sequence found\")"
  },
  {
    "example_id": 210,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.166666666666666"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 1\ny = 2\nz = 3\nexpression = x + y / z + y / x + z / y\nprint(expression)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1281.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import sqrt\n\ndef upperhyper(x):\n    return (3 * sqrt((x + 1) ** 2 / 4 - 1) + 3)\n\ndef lowerhyper(x):\n    return (-3 * sqrt((x + 1) ** 2 / 4 - 1) + 3)\n\nn = 10\ncount = 0\nfor i in range(-n, n + 1):\n    for j in range(-n, n + 1):\n        for k in range(-n, n + 1):\n            if (i ** 2 * j + j ** 2 * k + k ** 2 * i) == (i * j ** 2 + j * k ** 2 + k * i ** 2):\n                count += 1\nprint(count)"
  },
  {
    "example_id": 212,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.22774424948338634",
      "0.00414392544553437",
      "4.99792803727723",
      "5.4753349899217",
      "4.99792803727723",
      "5.4753349899217"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import Symbol, solve\n\nc = 55 - 10 * sqrt(30)\nprint(c)\n\nx = Symbol('x')\neq = x**3 - 10 * x**2 + 55 * x - c\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 213,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "658.0"
    ],
    "annotated_answers": [
      "340.0"
    ],
    "solution": "count = 0\nfor n in range(1, 1000):\n    if n < 1000 and (n).bit_length() % 2 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def sgn(x):\n    if x < 0:\n        return -1\n    elif x == 0:\n        return 0\n    else:\n        return 1\n\nsum = 0\nfor n in range(-10, 21):\n    sum += sgn(n)\nprint(sum)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import factorial\n\ndef get_coefficient(x, k):\n    return factorial(50) // (factorial(k) * factorial(50 - k)) * (x**k)\n\nmax_coefficient = 0\nmax_k = 0\nfor k in range(1, 51):\n    coefficient = get_coefficient(3, k)\n    if coefficient > max_coefficient:\n        max_coefficient = coefficient\n        max_k = k\n\nprint(max_k)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "21.0",
      "3.0",
      "2.0",
      "11.0",
      "5.0",
      "4.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "import sympy\n\nx, y = sympy.symbols('x y')\nf1 = x**2 + y**2 + 6*x - 24*y + 72\nf2 = x**2 - y**2 + 6*x + 16*y - 46\n\nroots = []\nfor f in [f1, f2]:\n    for root in sympy.solve(f, x, y):\n        roots.append(root)\n\nsum = 0\nfor root in roots:\n    sum += (root[0] - (-3))**2 + (root[1] - 2)**2\nprint(sum)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "36.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1971.0",
      "2.0",
      "27.0",
      "1583.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\nr, s, t = sympy.roots(x**3 + 9*x**2 - 9*x - 8)\nprint((r + s)*(s + t)*(t + r))"
  },
  {
    "example_id": 218,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "k = 4\nwhile True:\n    a = sympy.poly(Q1(x))\n    b = sympy.poly(Q2(x))\n    if a in sympy.factor(sympy.poly(P(x))):\n        if b in sympy.factor(sympy.poly(P(x))):\n            break\n    k += 1\nprint(k)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "n = 0\nfor i in range(1, 100):\n    if i + 2 * i**2 + 3 * i**3 + 4 * i**4 + 5 * i**5 + 6 * i**6 + 7 * i**7 + 8 * i**8 + 9 * i**9 == 48 + 49 * 1j:\n        n += 1\nprint(n)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "a = [1, 4, 15, 2]\nb = [1, 4, 16, 2]\nc = [1, 4, 15, 2, 17]\nprint(c[-1])"
  },
  {
    "example_id": 221,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0",
      "2.0",
      "21.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "-5.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import solve, symbols\nx = symbols('x')\nroots = solve(x**6 + x**4 - 115*x**3 + x**2 + 1, x)\nprint(roots)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "401.0"
    ],
    "solution": "def f(x):\n    return 6*x - 2005\nn = 1\nwhile f(n)!= 6*n - 2005:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 223,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "68.33333333333334"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "a, b, c, d = 0.1, 0.2, 0.3, 0.4\nexpression = 1/a + 1/b + 4/c + 16/d\nprint(expression)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def f(x):\n    return x**4 - 14*x**3 + 62*x**2 - 91*x + 42\n\ng = lambda x: x**2 - 11*x + 30\n\ndef solve(g, f):\n    return g(f(10**100))\n\nprint(solve(g, f))"
  },
  {
    "example_id": 225,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def f(x):\n    return 2*x - 6\n\nprint(f(12) - f(2))"
  },
  {
    "example_id": 226,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    for y in range(1, 101):\n        fx = lambda z: z**2 - 2\n        fy = lambda z: z**2 - 2\n        fxy = lambda z: z**2 - 2\n        if fxy(x * y) == fx(x) * fy(y):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-1.0",
      "-1.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import symbols, factorial\nn = symbols(\"n\")\nexpression = (1 - (-1)**n) * (1 + (-1)**n)**(n/2) * factorial(n)\nprint(expression)"
  },
  {
    "example_id": 228,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import symbols, expand, simplify\na, b, c, d, e = symbols('a, b, c, d, e')\nexpression = expand((a**3 / (a - b) / (a - c) / (a - d) / (a - e)) +\n                     (b**3 / (b - a) / (b - c) / (b - d) / (b - e)) +\n                     (c**3 / (c - a) / (c - b) / (c - d) / (c - e)) +\n                     (d**3 / (d - a) / (d - b) / (d - c) / (d - e)) +\n                     (e**3 / (e - a) / (e - b) / (e - c) / (e - d)))\nprint(simplify(expression))"
  },
  {
    "example_id": 229,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "157.0"
    ],
    "annotated_answers": [
      "254.0"
    ],
    "solution": "a0 = 4\na1 = 1\na2 = 0\na3 = 0\na4 = 0\na5 = 0\na6 = 152\nexpression = a0 + a1 * 1 + a2 * 1**2 + a3 * 1**3 + a4 * 1**4 + a5 * 1**5 + a6 * 1**6\nprint(expression)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "6.0",
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import sqrt\n\na, b = (5/(sqrt(3) + sqrt(2)) + 1/(sqrt(3) - sqrt(2))).as_numer_denom()\nprint(a + b)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "8.0",
      "4.0",
      "6.0",
      "7.0",
      "6.0",
      "8.0",
      "10.0",
      "2.0"
    ],
    "annotated_answers": [
      "112.0"
    ],
    "solution": "remainders = [2, 5, 8]\nfor n in range(3, 2023):\n    remainders.append(remainders[n-1] + remainders[n-2] + remainders[n-3])\n    remainders[n] = remainders[n] % 11\nprint(remainders)"
  },
  {
    "example_id": 232,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import math\nprint(math.sqrt(4))"
  },
  {
    "example_id": 233,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = [0, 0, 1, 0]\ng = [0, 1, 1, 1]\nprint(a[0] + g[0], a[1] + g[1], a[2] + g[2], a[3] + g[3])"
  },
  {
    "example_id": 234,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 3\ny = 5\nprint(x**2 + y**2)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "omega = -1 + 4j\nexpression = abs(omega**2 + 2*omega - 8)\nprint(expression)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "154.0"
    ],
    "solution": "def elite_status(n):\n    return 2**(1 + math.floor(math.log2(n-1))) - n\n\nelite_status(19)"
  },
  {
    "example_id": 237,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor x in range(1, 100):\n    for y in range(1, 100):\n        if x*y == 16:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 238,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "def f(x):\n    return (4*x-23)/(x**2+5*x-24)\n\n\ndef g(x):\n    return (x-3)/(x+8)\n\n\ndef h(x):\n    return f(x) - g(x)\n\n\nfor c in range(1, 101):\n    for d in range(1, 101):\n        if all(h(x) == 0 for x in range(-100, 100)):\n            print(c*d)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "4.0",
      "-7.0"
    ],
    "annotated_answers": [
      "175.0"
    ],
    "solution": "import sympy as sy\n\nx, y = sy.symbols('x y')\nexpression = (3*x**2 - 18*x + 4*y**2 - 32*y + 91)\n\nx_max = sy.solve(expression, x)[0]\ny_max = sy.solve(expression, y)[0]\n\nprint(x_max, y_max)\nprint(x_max**2 + y_max**2 + 2*x_max*y_max - 14*x_max - 14*y_max + 49)"
  },
  {
    "example_id": 240,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2007.0"
    ],
    "solution": "def f(x):\n    if 0 <= x <= 0.5:\n        return 2*x\n    else:\n        return 2 - 2*x\n\ndef f_n(x):\n    return f(f_n-1(x))\n\nn = 2005\nx = 0.5\nwhile n > 0:\n    x = f(x)\n    n -= 1\n\nprint(x)"
  },
  {
    "example_id": 241,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "199.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "count = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        if (a**2 - a * 24) * (b**2 - b * 36) == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 242,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "7.0",
      "9.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(3, 5, 7, 9)"
  },
  {
    "example_id": 243,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "13.0",
      "2.0",
      "11.0",
      "23.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import Symbol\ny = Symbol('y')\nexpression = (3 * y**3 - 13 * y**2 + 11 * y + 23) / (3 * y + 2)\nprint(expression)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = -1\nb = 1\nc = 1\nprint(a**4 + b**4 + c**4)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-78740.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    return x**7 + 5 * x**3 + 10\nprint(f(-5))"
  },
  {
    "example_id": 246,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.9999999999999998"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "expression = abs(-1 + 1j*3**0.5)\nprint(expression)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "7.0",
      "6.0",
      "3.0",
      "4.0",
      "7.0",
      "2.0",
      "1.0",
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x', positive=True)\nexpression = (x + 1/x)**6 - (x**6 + 1/x**6) - 2\nexpression = expression / (x + 1/x)**3 + (x**3 + 1/x**3)\nexpression = expression.expand().simplify()\nprint(expression)"
  },
  {
    "example_id": 248,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\n\n\ndef f(x, y):\n    return x * sqrt(1 - y**2) + y * sqrt(1 - x**2)\n\n\ndef find_max(x, y):\n    return f(x, y) if f(x, y) > f(x, -y) else f(-x, y)\n\n\ndef max_value(x, y):\n    return max(find_max(x, y), find_max(x, -y))\n\n\nprint(max_value(-1, 1))"
  },
  {
    "example_id": 249,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0",
      "2.0",
      "22.0",
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import sympy as sp\nx, y = sp.symbols('x, y')\nh = sp.sqrt(50*x**2 + 22*y**2)\nprint(h)"
  },
  {
    "example_id": 250,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "# Slope of x-axis\nm1 = 0\n# Slope of y-axis\nm2 = 0\n# Slope of common chord\nm = (m1 - m2) / (1 - m1 * m2)\nprint(m)"
  },
  {
    "example_id": 251,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "def f(x):\n    return x**2\n\ndef find_f(x):\n    return f(x)\n\nprint(find_f(5))"
  },
  {
    "example_id": 252,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 1/3\nb = 1/3\nc = 1/3\nexpression = a**2\nprint(expression)"
  },
  {
    "example_id": 253,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.141592653589793"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\n\ndef max_rect_area(r):\n    return r * r * pi\n\nprint(max_rect_area(1))"
  },
  {
    "example_id": 254,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "819.0"
    ],
    "solution": "a = 1\nfor i in range(1, 19):\n    a = a * 2 - a**2\nprint(a)"
  },
  {
    "example_id": 255,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "for x in range(1, 100):\n    if x**5 == x**4 + 72*x**3:\n        print(x)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "a = 64"
  },
  {
    "example_id": 257,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "504.0"
    ],
    "solution": "a = 2016\nwhile True:\n    if a % 2 == 0:\n        a = a // 2\n    elif a % 3 == 0:\n        a = a // 3\n    else:\n        break\nprint(a)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "1.0",
      "2.0",
      "4.0",
      "-1.0",
      "-1.0",
      "2.0",
      "-4.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from math import sqrt\n\ndef upperparab(x):\n    return sqrt(8*x)\n\ndef lowerparab(x):\n    return -sqrt(8*x)\n\nA = (-1, 1)\nB = (2, 4)\nC = (-1, -1)\nD = (2, -4)\n\nprint(A)\nprint(B)\nprint(C)\nprint(D)"
  },
  {
    "example_id": 259,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\na, b = sympy.symbols('a,b')\nexpression = (a + b)/(a * b + 1)\nprint(expression.subs({a: 1, b: 0}))"
  },
  {
    "example_id": 260,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "361.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "count = 0\nfor x in range(1, 20):\n    for y in range(1, 20):\n        z = 1\n        while (z**x + (1 + z)**y) in {z**x, (1 + z)**y}:\n            z += 1\n        if z < 20:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 261,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "P = 1\nQ = 2\nR = 3\nS = 4\nexpression = abs(S)\nprint(expression)"
  },
  {
    "example_id": 262,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88.0"
    ],
    "annotated_answers": [
      "913.0"
    ],
    "solution": "def fibonacci(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nfibs = []\nfor i in range(1, 11):\n    fibs.append(fibonacci(i))\nprint(sum(fibs))"
  },
  {
    "example_id": 263,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nprint(a / b + b / a + a / c + c / a + b / c + c / b)"
  },
  {
    "example_id": 264,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1998211.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "n_sum = sum(range(1, 2001, 2))\nm_sum = sum(range(1, 2001, 2)) + 212\n\nprint(2001 - n_sum - m_sum)"
  },
  {
    "example_id": 265,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def f(x):\n    return max(abs(x + 15), abs(x + 12), abs(x + 8), abs(x - 1), abs(x - 3), abs(x - 19))\n\nprint(min(f(x) for x in range(-100, 101)))"
  },
  {
    "example_id": 266,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-256.0"
    ],
    "solution": "import math\n\ndef solve(a):\n    x = 0\n    while True:\n        x += 1\n        if math.log2(x) > 5:\n            break\n    for b in range(x):\n        if (\n            math.log2(x**3 + 4*x**2*a + 2*b*x + a)\n            == math.log2(x**3 + 4*x**2*a + 2*b*x + a)\n        ):\n            return a\n    return a\n\n\nprint(solve(1))"
  },
  {
    "example_id": 267,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0",
      "7.0",
      "5.0",
      "6.0",
      "7.0",
      "6.0",
      "5.0",
      "7.0",
      "7.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "import sympy as sym\nexpression = sym.prod([(sym.sqrt(5) + sym.sqrt(6) + sym.sqrt(7)),\n                        (-sym.sqrt(5) + sym.sqrt(6) + sym.sqrt(7)),\n                        (sym.sqrt(5) - sym.sqrt(6) + sym.sqrt(7)),\n                        (sym.sqrt(5) + sym.sqrt(6) - sym.sqrt(7))])\nprint(expression)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "w1 = 32 + 170j\nw2 = -7 + 64j\nw3 = -9 + 200j\nw4 = 1 + 27j\nw5 = -14 + 43j\n\nsum_of_differences = (w1 - w2) + (w2 - w3) + (w3 - w4) + (w4 - w5) + (w5 - w1)\n\nprint(sum_of_differences)"
  },
  {
    "example_id": 269,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, b, c = 1, 2, 3\ndegree = 0\nfor x in range(1, 100):\n    if (x - b) * (x - c) / (a - b) * (a - c) + (x - a) * (x - c) / (b - a) * (b - c) + (x - a) * (x - b) / (c - a) * (c - b) == x**degree:\n        degree += 1\nprint(degree)"
  },
  {
    "example_id": 270,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "A = sum([math.ceil(math.log2(i)) for i in range(1, 1001)])\nB = sum([math.floor(math.log2(i)) for i in range(1, 1001)])\nprint(A-B)"
  },
  {
    "example_id": 271,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "4.0",
      "4.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import sqrt\n\nfor a in range(1, 100):\n    for b in range(1, 100):\n        if a * b**2 + b**2 * a == a * b**2 + b * a**2:\n            print(a, b)"
  },
  {
    "example_id": 272,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1995.0"
    ],
    "annotated_answers": [
      "3980025.0"
    ],
    "solution": "import math\nx = math.pow(1995, 1/math.log(1995, 1995))\nprint(x)"
  },
  {
    "example_id": 273,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "2.0",
      "9.0",
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\ny = (27*x**2 + 9*x + 3) / (27*x**3 + 9*x**2 + 3*x + 1)\nprint(y.as_numer_denom()[0].as_leading_term())"
  },
  {
    "example_id": 274,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "898.0"
    ],
    "solution": "x = [211, 375, 420, 523]\nfor n in range(4, 531):\n    x.append(x[-1] - x[-2] + x[-3] - x[-4])\nprint(sum(x[531:] + x[753:] + x[975:]))"
  },
  {
    "example_id": 275,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor a in range(1, 1000):\n    for b in range(1, 1000):\n        if a / a + b / b == 2 / 17:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 276,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nsol = solve(x**4 - 2*x**2 - 7, x)\nprint(len(sol))"
  },
  {
    "example_id": 277,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 21 - 20j\nb = 29\nprint(abs(a))"
  },
  {
    "example_id": 278,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "327680.0"
    ],
    "annotated_answers": [
      "327680.0"
    ],
    "solution": "def an(n):\n    return 4 * n**3 + 6 * n**2 + 4 * n + 1\n\nprint(sum(an(n) for n in range(8, 24)))"
  },
  {
    "example_id": 279,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Poly\na = Poly(x**3 + x**2 + x + 1, x).all_coeffs()[0]\nprint(a)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4880.333333333333"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "a = 27\nb = 99\nn = 15\nm = 11\na_9 = a * (b / a)**(n - m)\nprint(a_9)"
  },
  {
    "example_id": 281,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "8.0",
      "6.0",
      "4.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nexpression = (x**100) % (x**8 - x**6 + x**4 - x**2 + 1)\nprint(expression)"
  },
  {
    "example_id": 282,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "3.0",
      "10.0",
      "9.0",
      "307.0",
      "432.0",
      "126249.0",
      "432.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = (2*x**2 - 3*x)/(x**2 - x) + 5*x - 11\nexpression2 = 3*x**2 + 5*x + 2/(x**2 - 1)\nprint(sympy.solve(expression - expression2, x))"
  },
  {
    "example_id": 283,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = sympy.cos(x)**3 + sympy.cos(x)**2\nprint(expression)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12656.0",
      "12656.0",
      "12656.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "x = 162 * 1250 // 16\ny = 1250 * 162 // 16\nz = 162 * 1250 // 16\nprint(x, y, z)"
  },
  {
    "example_id": 285,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\ny = 0\nprint((x + y)**2)"
  },
  {
    "example_id": 286,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "7.0",
      "2.0",
      "2.0",
      "1.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import Symbol\n\nz1 = Symbol('z1')\nz2 = Symbol('z2')\nexpression = abs((2*z1 + 7*z2) / (2*z1 - 7*z2))\nprint(expression)"
  },
  {
    "example_id": 287,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "import sympy\ncount = 0\nfor i in range(5):\n    x = sympy.var('x')\n    p = sympy.Poly(x**2, x)\n    if p.degree() == 4:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 288,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "def f(x):\n    return x**2 + 2 * x\n\nprint(f(8))"
  },
  {
    "example_id": 289,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import factorial\n\ndef cubic_roots(a, b, c):\n    if a == 0:\n        return cubic_roots(b, c, 0)\n    d = (b**2 - 4*a*c)**.5\n    e = (b**2 + 4*a*c)**.5\n    return 3 - int(e == 0) - int(d == 0)\n\nprint(cubic_roots(-3, 3, 5))"
  },
  {
    "example_id": 290,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a = 7j\nb = 4j\nprint(abs(a*b))"
  },
  {
    "example_id": 291,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from math import ceil\nmin_value = ceil((5 + 2) / (1 + 1))\nprint(min_value)"
  },
  {
    "example_id": 292,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# a = 1, b = 1, c = 0\nd = 2\nprint(d)"
  },
  {
    "example_id": 293,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.999999895428873",
      "-9.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "sum = 0\nfor k in range(2, 100000000):\n    sum += (k - 3) / (k * (k**2 - 1))\nprint(sum)"
  },
  {
    "example_id": 294,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import poly, Poly\n\np = Poly(x**23 + 23*x**17 - 18*x**16 - 24*x**15 + 108*x**14, x)\nq = Poly(x**4 - 3*x**2 - 2*x + 9, x)\n\ncoefficients = [p.coeff(x, i) for i in range(p.degree() + 1)]\nprint(sum(coefficients))"
  },
  {
    "example_id": 295,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "6.0",
      "-3.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "-9.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\na2 = Symbol('a2')\na1 = Symbol('a1')\nf = 2 * x**3 + a2 * x**2 + a1 * x - 4\nroots = solve(f, x, rational=True)\nprint(roots)"
  },
  {
    "example_id": 296,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        if a**2 - 2 * b == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 297,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.704502899154068"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\nfibonacci = [0, 1]\nfibonacci_ratio = [1, 1]\n\nfor n in range(1, 100):\n    fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    fibonacci_ratio.append(fibonacci_ratio[-1] / fibonacci[-1])\n\nprint(sum(fibonacci_ratio))"
  },
  {
    "example_id": 298,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "440.0"
    ],
    "solution": "a = 3\nc1 = -a**2 + 81\nc2 = a**2 - 81\nprint(c1 + c2)"
  },
  {
    "example_id": 299,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "import sympy as sp\n\nr, s, t = sp.symbols('r s t')\nexpression = r**2 * s**2 + s**2 * t**2 + t**2 * r**2\nprint(expression.expand())"
  },
  {
    "example_id": 300,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import sqrt, Mul\nprint(Mul(5 + sqrt(3), 5 - sqrt(3), evaluate=False))"
  },
  {
    "example_id": 301,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.43999999999999995"
    ],
    "annotated_answers": [
      "0.61"
    ],
    "solution": "errors = [2.56, 2.61, 2.65, 2.71, 2.79, 2.82, 2.86]\nA = [int(round(error)) for error in errors]\nprint(max(abs(A[i] - errors[i]) for i in range(7)))"
  },
  {
    "example_id": 302,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "import math\nfrom sympy import *\n\nx = Symbol('x')\ny = Symbol('y')\n\nf1 = 1 - x**2 - y**2\nf2 = x**2 + y**2\n\nd = f1 + f2\n\nprint(d)"
  },
  {
    "example_id": 303,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "662.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "a1 = 1\na2 = a1 + 9\na3 = a2 + 9\na4 = a3 + 9\na5 = a4 + 576\nprint(a1 + a2 + a3 + a4 + a5)"
  },
  {
    "example_id": 304,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "from math import fabs\ndef area(x):\n    return fabs(x - 1) + fabs(x - 3) - 8\n\nprint(area(10))"
  },
  {
    "example_id": 305,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-26.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nf = sympy.Poly(x**3 - 3*x**2 - 4*x + 4)\ng = sympy.Poly(x**3 + sympy.Symbol('a')*x**2 + sympy.Symbol('b')*x + sympy.Symbol('c'))\nz = sympy.Symbol('z')\nz = (1 - sympy.I*sympy.sqrt(3)) / 2\ns1 = r1 + r2*z + r3*z**2\ns2 = r1*z + r2*z**2 + r3\ns3 = r1*z**2 + r2 + r3*z\ng_solutions = sympy.solve([g - s1, g - s2, g - s3], [r1, r2, r3, a, b, c])\ncoeffs = [g.coeff(x, i) for i in range(g.degree() + 1)]\nreal_coeffs = [coeff.real for coeff in coeffs]\nprint(sum(real_coeffs))"
  },
  {
    "example_id": 306,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = 7\ny = 3\nprint(x*y)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = 3\nfor t in range(1, 100):\n    if x**3 - 3 * x**2 + t * x + 27 % (x - 3) == 0:\n        print(t)\n        break"
  },
  {
    "example_id": 308,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import Symbol\nfrom sympy import solve\n\nx = Symbol('x')\nroots = solve(x**4 - 80*x - 36, x)\nsum = 0\nfor root in roots:\n    if root.is_real:\n        sum += root\nprint(sum)"
  },
  {
    "example_id": 309,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 0\nb = 0\nc = 1\nd = 0\nprint(a + 2 * b + 3 * c + 4 * d)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\ndef find_lambda():\n    lambda_ = 0\n    for i in range(10000):\n        lambda_ = i / 10000\n        for x in range(1000):\n            for y in range(1000):\n                for z in range(1000):\n                    if x**2 + y**2 + z**2 == 1:\n                        if lambda_ * x * y + y * z <= math.sqrt(5) / 2:\n                            return lambda_\n    return lambda_\n\n\nprint(find_lambda())"
  },
  {
    "example_id": 311,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 1\nb = 0.5\nexpression = a + 1/(b*(a-b))\nprint(expression)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1810.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "volume = 10 * 13 * 14 - 10\nprint(volume)"
  },
  {
    "example_id": 313,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.5000000000000036"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\n\nx, y, z = math.cos(math.pi/3), math.cos(2*math.pi/3), math.cos(4*math.pi/3)\nprint(3*x + 4*y + 12*z)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "134.0"
    ],
    "solution": "count = 0\nfor i in range(27):\n    count += 1\nprint(count)"
  },
  {
    "example_id": 315,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "224.0"
    ],
    "solution": "n = 2007\na = [3] * (n - 1)\na.insert(0, 3)\na.append(a[n - 2]**2 + 2007)\nprint(a[n - 2]**2 + a[n - 1]**2)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "expression = abs(9*1j - 12) * abs(3 + 4*1j)\nprint(expression)"
  },
  {
    "example_id": 317,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.333333333333336"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = 1\nc = 1\nexpression = (2*a + 1/3*b)**2 + (2*b + 1/3*c)**2 + (2*c + 1/3*a)**2\nprint(expression)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7976.0"
    ],
    "annotated_answers": [
      "997.0"
    ],
    "solution": "a, b = 2 * 1994, 2 * 1994\nx, y = a, b\nx2, y2 = x**2, y**2\nr2 = 1994**2\nd = (x2 + y2 - r2) / (2 * x * y)\nprint(a + b)"
  },
  {
    "example_id": 319,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a, b, c = -1, -1, -1\nwhile True:\n    if a + b + c > 0:\n        break\n    a, b, c = a + 1, b + 1, c + 1\nprint(a + b + c)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "7.0",
      "5.0",
      "4.0",
      "3.0",
      "3.0",
      "2.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import *\nx = Symbol(\"x\")\nq = x**4 + 3*x**3 - x**2 + 5\nexpression = 2*x**7 - 5*x**4 + 3*x**3 - x**2 + 5\nprint(expression.as_numer_denom()[0].as_expr())\nprint(expression.as_numer_denom()[1].as_expr())\nprint(expression.as_numer_denom()[0].as_expr() == expression.as_numer_denom()[1].as_expr())"
  },
  {
    "example_id": 321,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "641.0000000000002"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a = 2\nb = 5 ** (1/2)\nexpression = a**4 + b**8\nprint(expression)"
  },
  {
    "example_id": 322,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.608"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import im\nz = 1 - 5j\nexpression = (im(z**5))/(im(z)**5)\nprint(expression)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 1\nwhile x * (x + 1) * (x + 2) * (x + 3) + 1!= 379**2:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 324,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "4.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "expression = ((-1)**(1/2) + 1)**2 + (1 + (-1)**(1/2))**2 + (1 + 1)**2 + (1 + 1)**2\nprint(expression)"
  },
  {
    "example_id": 325,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import factorial\n\n\ndef f(x):\n    return (x - 1)**7 + 3 * (x - 1)**6 + (x - 1)**5 + 1\n\n\ndef g(x):\n    return (x - 1)**5\n\n\ndef h(x):\n    return f(x) / g(x)\n\n\nprint(min(h(x) for x in range(2, 1000)))"
  },
  {
    "example_id": 326,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "x = 24\ny = 48\nz = 72\nprint(x + y + z)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "999.0",
      "-2.0",
      "1.0",
      "998.0",
      "-2.0",
      "1.0",
      "997.0",
      "-2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-338016.0"
    ],
    "solution": "import sympy\nexpression = sum([1/(1 - sympy.symbols('x_%d' % i))**2 for i in range(1, 2017)])\nprint(expression)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nimport sympy\n\nx_1, y_1 = sympy.symbols(\"x_1, y_1\")\nx_2, y_2 = sympy.symbols(\"x_2, y_2\")\nx_3, y_3 = sympy.symbols(\"x_3, y_3\")\nx_4, y_4 = sympy.symbols(\"x_4, y_4\")\n\nF_1 = sympy.Point(x_1, y_1)\nF_2 = sympy.Point(x_2, y_2)\nC = sympy.Point(x_3, y_3)\nP1 = sympy.Point(x_4, y_4)\n\nk = sympy.Eq(F_1.distance(F_2), C.distance(P1))\n\nprint(k.subs({x_1: 0, x_2: 0, x_3: 0, x_4: 0}))"
  },
  {
    "example_id": 329,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2008.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(n):\n    return n + 1\n\nprint(f(2007))"
  },
  {
    "example_id": 330,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "2.0",
      "2.0",
      "5.0",
      "2.0",
      "14.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\nimport sympy\nx = sympy.symbols(\"x\")\nexpression = sympy.log(2, (2*x + 8) / (x + 2)) + sympy.log(2, (x + 2) / (x - 5))\nprint(expression)\nprint(expression.subs(x, 3))"
  },
  {
    "example_id": 331,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "expression = abs((1 - 1j)**8)\nprint(expression)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "count = 0\nfor a in range(1, 101):\n    if a**3 - 1**3 == a - 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 333,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1500001.0"
    ],
    "annotated_answers": [
      "996506.0"
    ],
    "solution": "n = 1\ncount = 0\nwhile count < 500000:\n    n += 3\n    count += 1\nprint(n)"
  },
  {
    "example_id": 334,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nprint(rem(x**9 - x**6 + x**3 - 1, x**2 + x + 1))"
  },
  {
    "example_id": 335,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def parab(x):\n    return 9 - x**2\n\nt = 0.8\nm = -2*t\n\nT = (t, parab(t))\nX = (T[0] + 1, m)\nY = (T[0] + 1, m)\n\narea = 25\ns = (X[0] - T[0]) * (Y[1] - T[1]) - (X[1] - T[1]) * (Y[0] - T[0])\nprint(s)"
  },
  {
    "example_id": 336,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import math\n\nc1_center = (10, 0)\nc1_radius = 6\nc2_center = (-15, 0)\nc2_radius = 9\n\np = c1_center\nq = c2_center\n\n# distance between centers of circles\ndistance = math.sqrt(math.pow(c1_center[0] - c2_center[0], 2) + math.pow(c1_center[1] - c2_center[1], 2))\n\n# radius of the smaller circle\nradius = min(c1_radius, c2_radius)\n\n# length of the shortest line segment PQ that is tangent to C1 at P and to C2 at Q\nline_length = distance - 2 * radius\n\nprint(line_length)"
  },
  {
    "example_id": 337,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 3\nb = 4\nx = 5\ny = 6\nprint(a**2 * (x - 5)**2 + b**2 * (y - 6)**2 + 1)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "448987642706.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = [1, 1, 0]\nfor i in range(2, 100):\n    a.append(a[i-2] - 2*a[i-1] + a[i])\nprint(sum(a))"
  },
  {
    "example_id": 339,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor real in range(-100, 101):\n    for imag in range(-100, 101):\n        z1 = real + 1j * imag\n        z2 = real - 1j * imag\n        if z1 * z2 == 0j and abs(z1) == abs(z2) == 1:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.9588279448054093"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import log\nprint(log(log(log(256, 64), 256)))"
  },
  {
    "example_id": 341,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "5.0",
      "1.0",
      "5.0",
      "2.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import sympify\n\nr = sympify('sqrt(5) - 1')\nprint((r - 1) * (r + 2) * (r + 6) * (r + 3))"
  },
  {
    "example_id": 342,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import factorint\nk = 0\nwhile True:\n    k += 1\n    expression = 1\n    for i in range(k):\n        expression = factorint(expression)\n    if expression == 1:\n        break\nprint(k)"
  },
  {
    "example_id": 343,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom math import sqrt, pi\nfrom numpy import real, imag\nfrom scipy.special import ellipk\n\ndef ellipse(a, b, h, k):\n    x = np.linspace(-3, 3, 100)\n    y = np.linspace(-2, 2, 100)\n    X, Y = np.meshgrid(x, y)\n    Z = (((X-h)/a)**2 + ((Y-k)/b)**2)\n    plt.contour(X, Y, Z, [1])\n    plt.show()\n\na = 1\nb = 2\nh = -1\nk = -1\nellipse(a, b, h, k)\n\nprint(a+k)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.00001527",
      "-1.0",
      "-1.21778966",
      "-6.0",
      "4.99998559",
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from scipy.optimize import minimize\n\ndef objective(x):\n    return 2 * x[0]**2 + 5 * x[1]**2 + 2 * x[2]**2 + 4 * x[0] * x[1] - 4 * x[1] * x[2] - 2 * x[2] - 2 * x[0]\n\nresult = minimize(objective, [1, 1, 1])\nprint(result.x)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "print(abs(5 - 12j))"
  },
  {
    "example_id": 346,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "301.0"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "def p(x):\n    if x == 1:\n        return 1\n    elif x == 2:\n        return 2\n    elif x == 3:\n        return 3\n    elif x == 99:\n        return 99\n    elif x == 100:\n        return 100\n    elif x == 101:\n        return 102\n    else:\n        return p(x-1) + p(x-2) + p(x-3)\nprint(p(102))"
  },
  {
    "example_id": 347,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "def P(x):\n    return 6 * x\n\nsum = P(P(10)) + P(10)\nprint(sum)"
  },
  {
    "example_id": 348,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "-46.0"
    ],
    "solution": "import sympy\nfrom sympy import solve\n\na, b = sympy.symbols(\"a b\")\nf = a**4 - 6*a**3 + 26*a**2 + b*a + 65\nroots = solve(f, a)\n\np = 65\nfor root in roots:\n    if root.is_real:\n        p -= 1\n\nprint(p)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1072.0"
    ],
    "annotated_answers": [
      "973.0"
    ],
    "solution": "def geometric_progression(a, r, n):\n    return a * r**(n-1)\n\ndef arithmetic_progression(a, d, n):\n    return a + (n-1)*d\n\na1 = 1\na2 = 2\na3 = 3\na4 = 4\n\nn1 = 1\nn2 = 2\nn3 = 3\nn4 = 4\n\na9 = geometric_progression(a1, 2, 9) + arithmetic_progression(a2, 1, 9)\na10 = geometric_progression(a2, 2, 10) + arithmetic_progression(a3, 1, 10)\n\na_9 = a9\na_10 = a10\n\nn9 = n1\nn10 = n2\n\nn = 10\n\nwhile a_9 < 1000:\n    n += 1\n    a_9 = geometric_progression(a1, 2, n9) + arithmetic_progression(a2, 1, n9)\n    a_10 = geometric_progression(a2, 2, n10) + arithmetic_progression(a3, 1, n10)\n\n    a_9 += arithmetic_progression(a4, 1, n10)\n    a_10 += arithmetic_progression(a3, 1, n10)\n\n    n9 += 1\n    n10 += 1\n\nprint(n + a_9)"
  },
  {
    "example_id": 350,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from sympy import symbols\nfrom sympy.geometry import Point, Polygon\nfrom sympy.plotting import plot\n\nx, y = symbols('x y')\nf = x**2 + 6*x + 1\nR = Polygon(Point(-1, -1), Point(1, -1), Point(1, 1), Point(-1, 1))\n\narea = R.area\nprint(area)"
  },
  {
    "example_id": 351,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nK = Symbol('K')\nL = Symbol('L')\nM = Symbol('M')\n\nx = Symbol('x')\n\neq = x**4 - K * x**3 + K * x**2 + L * x + M\nroots = solve(eq, x)\n\nsum = 0\nfor root in roots:\n    sum += root**2\n\nprint(sum)"
  },
  {
    "example_id": 352,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2018.0"
    ],
    "annotated_answers": [
      "4036.0"
    ],
    "solution": "n = 2018\nsum_k = 0\nfor k in range(1, n + 1):\n    sum_k += (k / n) ** 2\n    if sum_k > 1:\n        break\nprint(n)"
  },
  {
    "example_id": 353,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "15.0",
      "1.0",
      "14.0",
      "1.0",
      "13.0",
      "1.0",
      "12.0",
      "1.0",
      "11.0"
    ],
    "annotated_answers": [
      "-588.0"
    ],
    "solution": "from sympy import Symbol, Poly\nx = Symbol('x')\nexpression = 1\nfor i in range(1, 16):\n    expression *= (1 - i * x) * (1 + 2 * i * x)\nprint(expression)\nprint(Poly(expression).coeff_monomial(x**2))"
  },
  {
    "example_id": 354,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "19941989.0"
    ],
    "solution": "n = 19941994\nresult = int(sqrt(n**2 - 10*n + 29))\nprint(result)"
  },
  {
    "example_id": 355,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    for y in range(1, 101):\n        if x**2 + 2*y**2 + 0.5 <= x * (2*y + 1):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "321.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "expression = 0\nfor x in range(1, 287):\n    if x == 55 or x == 83 or x == 204 or x == 232 or x == 103:\n        expression += 8\n    else:\n        expression += 1\nprint(expression)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-150.0"
    ],
    "annotated_answers": [
      "-150.0"
    ],
    "solution": "def sequence_term(n):\n    return (-1)**(n+1) * (3*n + 2)\n\nprint(sum(sequence_term(n) for n in range(1, 101)))"
  },
  {
    "example_id": 358,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import sympy\nz = sympy.Symbol('z')\nexpression = z**3 + z**2 - z**2 + 2*z\nsolutions = sympy.solve(expression, z)\nprint(sum(solutions))"
  },
  {
    "example_id": 359,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "p = 0\nq = 0\nfor k in range(2, 100):\n    p += q * (k + 2)\n    q = p * (k + 2) + q * (k + 1)\nprint(p * q)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.333333333333334"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 8\nb = 2\nprint((a**2 + b**2) / (a - b))"
  },
  {
    "example_id": 361,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0",
      "2.0",
      "45.0",
      "9397.0",
      "2.0",
      "10080.0",
      "2.0",
      "3.0",
      "2.0",
      "5.0",
      "13.0",
      "2.0",
      "21.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import sympy as sp\nx, y, z, w = sp.symbols('x y z w')\nexpression = (w**2 + x**2 + y**2 + z**2)\nfor i in range(1, 9):\n    expression += (x**2 / (2**2 - i**2) + y**2 / (2**2 - 3**2) + z**2 / (2**2 - 5**2) + w**2 / (2**2 - 7**2))\nprint(expression.simplify())"
  },
  {
    "example_id": 362,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nexpression = (8*x**3 - 27)\nfactors = factor(expression)\na, b, c, d, e = symbols('a,b,c,d,e')\nsolve([factors.as_expr() == (a*x + b)*(c*x**2 + d*x + e)], [a, b, c, d, e])\nprint(a + b + c + d + e)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 1\nb = 1\nfor n in range(1, 123456790):\n    a, b = b, a\n    a, b = b % a, a\nprint(b - a)"
  },
  {
    "example_id": 364,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from math import fabs\n\ndef sum_real_solutions(expression, limit):\n    count = 0\n    for x in range(1, limit):\n        if fabs(x) * fabs(x - 5) == 3:\n            count += 1\n    return count\n\nprint(sum_real_solutions(3, 10000))"
  },
  {
    "example_id": 365,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "-5.0",
      "14.0",
      "5.0",
      "5.0",
      "10.0",
      "5.0",
      "5.0",
      "-5.0",
      "14.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import solve, symbols\n\nx = symbols('x')\nresult = solve(5*x**4 - 10*x**3 + 10*x**2 - 5*x - 11, x)\nprint(sum(result))"
  },
  {
    "example_id": 366,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.155443620884047",
      "69"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "a = 14\nfor n in range(2, 100):\n    a = 24 - 5 * a\nprint(a)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "n = 0\nfor a in range(1, 100):\n    for b in range(1, 100):\n        for c in range(1, 100):\n            if a**2 + b**2 + c**2 == 144 and a**3 + b**3 + c**3 == 216 and a + b + c == 96:\n                n += 1\nprint(n)"
  },
  {
    "example_id": 368,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "451.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "def f(x):\n    return x**2 - 2*x + 2\n\ndef g(x):\n    return 2*x**2 - 4*x + 3\n\ndef h(x):\n    return 181\n\ndef P(x):\n    return f(x) if f(x) <= h(x) else g(x)\n\nprint(P(16))"
  },
  {
    "example_id": 369,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "-48.0",
      "170.0",
      "-260.0",
      "151.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import Symbol, simplify, solve\n\na, b, c, d, e = Symbol('a'), Symbol('b'), Symbol('c'), Symbol('d'), Symbol('e')\nx = Symbol('x')\n\nexpression = (5*x**4 - 8*x**3 + 2*x**2 + 4*x + 7) / (x + 2)**4 - a - b/(x + 2) - c/(x + 2)**2 - d/(x + 2)**3 - e/(x + 2)**4\n\nsolution = solve(expression, [a, b, c, d, e])\n\nprint(simplify(solution))"
  },
  {
    "example_id": 370,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-0.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def f(x):\n    return (x**2 - x**4 + 2*x)/(x - 1 + x**2)\n\nprint(f(1))\nprint(f(0))\nprint(f(1) + f(0))"
  },
  {
    "example_id": 371,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# (a + b + c + 1)^2 = abc\n# ab + ac + bc = 0\n# ab - c = 0\n# ac - b = 0\n# bc - a = 0\n\n# ab - c = 0\n# ac - b = 0\n# bc - a = 0\n\n# ab - c = 0\n# ac - b = 0\n# bc - a = 0\n\n# (ab - c)(ac - b)(bc - a) = abc(a + b + c + 1)^2\n# (ab - c)(ac - b)(bc - a) = abc(a + b + c + 1)^2\n# (ab - c)(ac - b)(bc - a) = abc(a + b + c + 1)^2\n\nprint(\"0, 0, 0\")"
  },
  {
    "example_id": 372,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "576.0"
    ],
    "solution": "x = 8\nwhile x**2 > 8:\n    x = x / 2\nprint(x)"
  },
  {
    "example_id": 373,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "a = 1\nb = 3\nc = 2\nprint(a + b + c)"
  },
  {
    "example_id": 374,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3968.0"
    ],
    "annotated_answers": [
      "3968.0"
    ],
    "solution": "def f(x):\n    if x**0.5 == int(x**0.5):\n        return x**0.5\n    else:\n        return (f(x-1))**2 - 1\n\nprint(f(8))"
  },
  {
    "example_id": 375,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0",
      "-11.0",
      "8.0",
      "2327.0",
      "8.0",
      "-11.0",
      "8.0",
      "2327.0",
      "8.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nexpression = 4*x**3 - 41*x**2 + 10*x - 1989\nsolution = sympy.solve(expression, x)\nprint(solution)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "89.0"
    ],
    "annotated_answers": [
      "181.0"
    ],
    "solution": "a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\na.append(a[-1] * 2 - a[-2] * 2 + a[-3])\nfor i in range(1331 - len(a)):\n    a.append(a[-1] * 2 - a[-2] * 2 + a[-3])\nprint(a[-1])"
  },
  {
    "example_id": 377,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.049875621120895"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\nx = [1 / math.sqrt(101) for _ in range(101)]\nmax_value = sum(x)\nprint(max_value)"
  },
  {
    "example_id": 378,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor n in range(1, 100):\n    if 3 * n**3 - 12 * n == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 379,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from sympy import symbols, conjugate, re, im\n\nz = symbols('z', complex=True)\nb = (re(z**2) - re(z**3)) / (im(z)**2)\nprint(b)"
  },
  {
    "example_id": 380,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z1 = 1\nz2 = 2\nz3 = 3\nexpression = abs(9*z1*z2 + 4*z1*z3 + z2*z3)\nprint(expression)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from math import log10\n\n\ndef minimum(x):\n    return 2 * log10(x) - log10(1/100)\n\n\nprint(minimum(1))"
  },
  {
    "example_id": 382,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import sympify\nx = sympify('x')\nexpression = (x + 1)**4\nprint(expression.subs(x, -1))"
  },
  {
    "example_id": 383,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "f = lambda x: (2*x - 6)/(x**3 - 7*x**2 - 2*x + 6)\nprint(f(0))"
  },
  {
    "example_id": 384,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "-1.0",
      "0.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(-3, -1, 0, 1, 3)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import itertools\n\ncount = 0\nfor x, y, z in itertools.product(range(0, 13), repeat=3):\n    if x + 2 * y + 4 * z == 12 and x * y + 2 * x * z + 4 * y * z == 22 and x * y * z == 6:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 386,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "90.0",
      "6.0",
      "4.0",
      "2.0",
      "8.0",
      "-2.0",
      "-4.0",
      "-6.0",
      "-90.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "from sympy import Symbol, expand, simplify\n\nz = Symbol('z', real=True)\nexpression = expand(simplify((z + 1/z)**2 + (z**2 + 1/z**2)**2 + (z**3 + 1/z**3)**2 + (z**45 + 1/z**45)**2))\nprint(expression)"
  },
  {
    "example_id": 387,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "n = 10\na = [2] * n\na[0] = 66\na[n-1] = min(abs(a[i] * a[i+1]) for i in range(n-1))\nprint(a[n-1])"
  },
  {
    "example_id": 388,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 1\nb = 2\nf = lambda x: a * x + b\nprint(f(f(f(2))))"
  },
  {
    "example_id": 389,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c = 16, 0, 0\nmax_value = 0\nfor i in range(16):\n    for j in range(i, 16):\n        if i == j:\n            continue\n        c = 16 - i - j\n        if c < 0:\n            break\n        if c > 0:\n            value = sqrt(c * (b - c)) + sqrt(c * (a - c))\n            if value > max_value:\n                max_value = value\nprint(max_value)"
  },
  {
    "example_id": 390,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from math import sqrt\n\nell = [(0, 0), (49, 0), (0, 33), (0, 0)]\nf1 = (4, 0)\nf2 = (-4, 0)\n\np = (0, 3)\n\nq = (p[0] - f2[0], p[1] - f2[1])\n\nq1 = (p[0] - f1[0], p[1] - f1[1])\n\nmax_value = sqrt(q[0]**2 + q[1]**2) + sqrt(q1[0]**2 + q1[1]**2)\n\nprint(max_value)"
  },
  {
    "example_id": 391,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "59.0",
      "2.0",
      "4.0",
      "3.0",
      "59.0",
      "2.0",
      "4.0",
      "3.0",
      "59.0",
      "2.0"
    ],
    "annotated_answers": [
      "-376.0"
    ],
    "solution": "import sympy\nr, s, t = sympy.symbols(\"r s t\")\nf = lambda x: 4 * x**3 - 59 * x**2\nprint(f(r) + f(s) + f(t))"
  },
  {
    "example_id": 392,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "from math import gcd\n\ndef largest_term(n):\n    a = 1\n    b = 2\n    while a % gcd(a, b)!= 0 or b % gcd(a, b)!= 0:\n        a, b = b, a + b\n    return a // gcd(a, b), b // gcd(a, b)\n\nprint(largest_term(31))"
  },
  {
    "example_id": 393,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor a in range(-10, 10):\n    for b in range(-10, 10):\n        if a * a % 2 == 0 and b * b % 2 == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 394,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import numpy as np\nx, y, z = np.array([1, 2, 5]).T\nconstraints = [x**2 + 2*y**2 + 5*z**2 == 22]\nvariables = [x, y, z]\nsol = np.array(np.fmin(np.fmin(variables, constraints), 1))\nprint(sol)\nprint(sol.T[0] + sol.T[1] + sol.T[2])"
  },
  {
    "example_id": 395,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        if a**2 * b == 2010:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 396,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import sympy as sym\na, b = sym.symbols(\"a b\")\nexpression = 3 * a**3 * sym.sqrt(3) + 2 / (a * b - 2 * b**2)\nprint(expression)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# PF_1 + PF_2 = d\n# 4x^2 - 8x + y^2 + 4y - 8 = 0\nfrom sympy import solve, Symbol\nx = Symbol('x')\ny = Symbol('y')\n\n# Solve the equation\nsolution = solve((4*x**2 - 8*x + y**2 + 4*y - 8), (x, y))\n\n# Find d\nd = 0\nfor point in solution:\n    d += point[0] + point[1]\nprint(d)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6033045.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "def minimum_value(n):\n    x = [0]\n    for i in range(1, n):\n        x.append(x[i-1] + 3)\n    return sum(abs(x[i]) for i in range(n))\n\nprint(minimum_value(2006))"
  },
  {
    "example_id": 399,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-4.0",
      "9.0",
      "2.0",
      "2.0",
      "-4.0",
      "13.0",
      "2.0",
      "0.0",
      "6.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from sympy import Symbol, solve, poly\n\nx = Symbol('x')\n\n# 1st remainder\nP = poly((x - 1)*(x - 4), domain='ZZ')\nR = poly(2*x**2 - 2*x - 1, domain='ZZ')\nremainder = P.rem(R)\nprint('1st remainder:', remainder)\n\n# 2nd remainder\nP = poly((x - 2)*(x - 3), domain='ZZ')\nremainder = P.rem(R)\nprint('2nd remainder:', remainder)\n\n# P(0) = 5\nprint('P(0):', P(0))\n\n# P(5)\nprint('P(5):', P(5))"
  },
  {
    "example_id": 400,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y, z = 0, 0, 3\nexpression = (x * y + z) * (x * z + y)\nprint(expression)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "49.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import Symbol, roots\nk = Symbol('k', real=True)\nroots = [Symbol('alpha'), Symbol('beta'), Symbol('gamma'), Symbol('delta')]\nexpression = roots[0] * roots[1] - 49\nfor root in roots:\n    expression = expression.subs(root, k)\nprint(expression)"
  },
  {
    "example_id": 402,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "501.0"
    ],
    "solution": "import sympy\n\nk = sympy.Symbol('k')\nx = sympy.Symbol('x')\n\nlog_k_x = sympy.log(k*x)\nlog_x_plus_2 = sympy.log(x+2)\n\nlog_k_x_2_log_x_plus_2 = log_k_x - 2*log_x_plus_2\n\nsol = sympy.solve(log_k_x_2_log_x_plus_2, x)\nprint(len(sol))"
  },
  {
    "example_id": 403,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 0\nb = 1\nc = 0\nd = 0\nprint(a+2*b+3*c+4*d)"
  },
  {
    "example_id": 404,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "4.0",
      "6.0",
      "12.0",
      "2.0",
      "12.0",
      "8.0",
      "27.0",
      "2.0",
      "24.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "from sympy import Symbol, Min\nx, y, z = Symbol('x'), Symbol('y'), Symbol('z')\nexpression = 3 * x**2 + 12 * y**2 + 27 * z**2 - 4 * x * y - 6 * x * z - 12 * y * z - 8 * y - 24 * z\nprint(Min(expression))"
  },
  {
    "example_id": 405,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# The degree of the polynomial f(x) is 9.\n# The degree of the polynomial d(x) is 3.\n# The degree of the polynomial r(x) is 3.\n# The degree of the polynomial q(x) is 6."
  },
  {
    "example_id": 406,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor x in range(1, 101):\n    if (x - a) / b + (x - b) / a == b / (x - a) + a / (x - b):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 407,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import sympy as sp\n\na, b, c = sp.symbols('a b c')\n\nx = sp.Symbol('x')\n\nexpression_1 = x**4 + a*x**3 + b*x**2 + c*x + 1\nexpression_2 = x**4 + 2*a*x**3 + 2*b*x**2 + 2*c*x + 1\n\nresult_1 = sp.sqrt(expression_1)\nresult_2 = sp.sqrt(expression_2)\n\nprint(result_1)\nprint(result_2)\n\nprint(a + b + c)"
  },
  {
    "example_id": 408,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import factorial\n\ndef n_roots(n):\n    return (-1)**(n+1) * factorial(n) // factorial(2*n+1)\n\nprint(n_roots(2001))"
  },
  {
    "example_id": 409,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 100):\n    for b in range(-100, 100):\n        z = a + b*1j\n        if abs(z) == 1:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 410,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2101.0"
    ],
    "annotated_answers": [
      "2101.0"
    ],
    "solution": "x = 5\ny = 4\nexpression = x**4 + x**3 * y + x**2 * y**2 + x * y**3 + y**4\nprint(expression)"
  },
  {
    "example_id": 411,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "533.0",
      "364.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "a, b, c, d = 1, 2, 3, 4\nexpression = a**2 + b**2 + c**2 + 519\nexpression2 = d + 36 * (10*a + 14*b + 22*c - d)**0.5\nprint(expression)\nprint(expression2)"
  },
  {
    "example_id": 412,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import itertools\n\ncount = 0\nfor abcd in itertools.combinations(range(1, 13), 4):\n    a, b, c, d = abcd\n    if a**4 + b**4 + c**4 + d**4 == 48 and abcd == 12:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 413,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "from sympy import symbols, Poly\n\na, b, c = symbols('a b c')\nexpression = Poly(a**3 - 7*a + 2, a, b, c).as_expr()\nprint(expression)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1540255902.0"
    ],
    "annotated_answers": [
      "331.0"
    ],
    "solution": "def f(n):\n    if n == 1:\n        return 1986\n    if n % 2 == 0:\n        return n // 2 - 2 * f(n // 2)\n    else:\n        return (-1)**(n + 1) * (n - 2 * f(n // 2))\n\ns = 0\nfor i in range(1, 1986):\n    s += f(i)\nprint(s)"
  },
  {
    "example_id": 415,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "70.0",
      "29.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "from sympy import Symbol, Poly\n\na = Symbol('a')\nb = Symbol('b')\nx = Symbol('x')\n\npoly = Poly(x**6 + a*x + b, x)\ndiv = Poly(x**2 - 2*x - 1, x)\n\nprint(poly.div(div)[1])"
  },
  {
    "example_id": 416,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1114.0"
    ],
    "annotated_answers": [
      "1999.0"
    ],
    "solution": "n = 0\nsum_ = 0\nwhile sum_ < 10000:\n    n += 1\n    sum_ += (n % 10) + (sum_ % 10)\nprint(n)"
  },
  {
    "example_id": 417,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.091883092036845"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import sqrt\na = 1 - 2 * sqrt(2) / 3\nb = sqrt(2) / 3\nprint(2 / a + 1 / b)"
  },
  {
    "example_id": 418,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "7.0",
      "7.0",
      "7.0",
      "6.0",
      "6.0",
      "6.0",
      "5.0",
      "8.0",
      "7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import symbols, expand\na, b, c, d, e = symbols('a b c d e')\nexpression = expand((a**5/(a - b)*(a - c)*(a - d)*(a - e) + b**5/(b - a)*(b - c)*(b - d)*(b - e) + c**5/(c - a)*(c - b)*(c - d)*(c - e) + d**5/(d - a)*(d - b)*(d - c)*(d - e) + e**5/(e - a)*(e - b)*(e - c)*(e - d)))\nprint(expression)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "expression = abs(2-4j) / abs(2+1j)\nprint(expression)"
  },
  {
    "example_id": 420,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = -1\ny = 1\nexpression = x**2 + y**2\nprint(expression)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import sqrt\n\ndef find_minimum(a, b, c):\n    minimum = float('inf')\n    for x in range(1, int(sqrt(a)) + 1):\n        for y in range(1, int(sqrt(b)) + 1):\n            for z in range(1, int(sqrt(c)) + 1):\n                numerator = (x + y) * (x + z) * (y + z)\n                denominator = x * y * z\n                if numerator / denominator < minimum:\n                    minimum = numerator / denominator\n    return minimum\n\nprint(find_minimum(1, 1, 1))"
  },
  {
    "example_id": 422,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "85.0"
    ],
    "annotated_answers": [
      "101.0"
    ],
    "solution": "x = 1\nwhile (100000000 // x**4) > 1:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 423,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "p = 7\nf = lambda x: abs(x - p) + abs(x - 15) + abs(x - p - 15)\nprint(min(f(x) for x in range(p, 15 + 1)))"
  },
  {
    "example_id": 424,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.8394415782963756"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "from math import log\n\ndef geometric_sequence(a, r, n):\n    return a * (1 - r**n) / (1 - r)\n\na = 1\nb = 2\nc = 3\n\nwhile b - a!= (b**2 - a**2)**0.5:\n    a = b\n    b = c\n    c = geometric_sequence(b, 0.5, 1)\n\nexpression = log(a, 6) + log(b, 6) + log(c, 6)\nprint(expression)"
  },
  {
    "example_id": 425,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "82.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def p(x):\n    return x**4 - 4*x**3 + 6*x**2 - 4*x + 1\n\nprint(p(0) + p(4))"
  },
  {
    "example_id": 426,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2808688457449495"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import numpy as np\n\nf1 = np.array([3, 10 + np.sqrt(105)])\nf2 = np.array([3, 10 - np.sqrt(105)])\n\naxis1 = np.array([-5, 10])\naxis2 = np.array([11, 10])\n\nsemi_major_axis = np.linalg.norm(f1 - f2) / np.linalg.norm(axis1 - axis2)\n\nprint(semi_major_axis)"
  },
  {
    "example_id": 427,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2325.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor a in range(-100, 101):\n    for b in range(-100, 101):\n        for c in range(-100, 101):\n            if (a**2 + b*a + c) == 0:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 428,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nexpression = expand((5*x + 9)**611 + (x + 5)**11 + (x - 1)**11 + 3*x**2 + 1)\nexpression = expression.subs(x, -2)\nprint(expression)"
  },
  {
    "example_id": 429,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "2.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import sympy as sy\n\nx, y, z = sy.symbols('x y z')\nexpression = x**4 + 4*y**2 + 4*z**4\nconstraint = x*y*z == 2\nsolution = sy.solve([expression, constraint], [x, y, z])\nprint(sy.N(expression.subs(solution)))"
  },
  {
    "example_id": 430,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy as sp\n\nx, y = sp.symbols('x y')\np = sp.Point((x, y))\n\nh = sp.sqrt(x**2 + 8*x*y + 7*y**2)\n\ndistance = sp.sqrt((p[0] - 0)**2 + (p[1] - 0)**2)\n\nprint(distance)"
  },
  {
    "example_id": 431,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "F1 = (10, 2)\nF2 = (-16, 2)\ndist = 24\na = abs(F1[0] - F2[0])\nb = abs(F1[1] - F2[1])\nh = (F1[0] + F2[0]) / 2\nk = (F1[1] + F2[1]) / 2\nprint(h + k + a + b)"
  },
  {
    "example_id": 432,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "962.0"
    ],
    "solution": "from sympy import primefactors\n\nfor k in range(1, 1000):\n    factors = primefactors(k)\n    if len(factors) == 3:\n        print(k)\n        break"
  },
  {
    "example_id": 433,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "from sympy import solve\nx = symbols('x')\nf = (2*x + 9)/(x - 7)\nsolutions = solve(f(f(x)) - x, x)\nprint(reduce(lambda x, y: x * y, solutions))"
  },
  {
    "example_id": 434,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z = 5j\nprint(abs(z.conjugate() ** 2))"
  },
  {
    "example_id": 435,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.75"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    return x * (2 * x + 3) / (2 * (2 * x + 3))\n\ndef g(x):\n    return f(f(x))\n\nc = g(1) - 1\nprint(c)"
  },
  {
    "example_id": 436,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-12.5"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "roots = [2, -3, 5]\na = (roots[0] + roots[1] + roots[2]) / 2\nb = (-roots[0] * roots[1] + roots[0] * roots[2] + roots[1] * roots[2]) / 2\nc = (roots[0] * roots[1] * roots[2]) / 2\nprint(a + b + c)"
  },
  {
    "example_id": 437,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nf = (7*x - 2) / (x**2 - 4)\nA, B = f.as_numer_denom()\nprint(A + B)"
  },
  {
    "example_id": 438,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import fibonacci\n\n\ndef compute_sum():\n    sum = 0\n    for n in range(1, int(sqrt(5)) + 1):\n        if n % 2 == 0:\n            sum += 1 / fibonacci(n) / fibonacci(n + 2)\n        else:\n            sum -= 1 / fibonacci(n) / fibonacci(n + 2)\n    return sum\n\n\nprint(compute_sum())"
  },
  {
    "example_id": 439,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7022.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "expression = sum(abs(xi - 1) for xi in range(120))\nprint(expression)"
  },
  {
    "example_id": 440,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "x = 30\nprint(x)"
  },
  {
    "example_id": 441,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "5.0",
      "6.0",
      "-6.0",
      "2.0",
      "2.0",
      "1.0",
      "5.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy as sp\na, b, c = sp.symbols('a, b, c')\nexpression = 2 * a**2 + 3 * b**2 + 6 * c**2\nconstraint = a + b + c - 1\nprint(sp.solve((expression, constraint), (a, b, c)))"
  },
  {
    "example_id": 442,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "p, q, r = 1, 2, 3\na = -r / p\nb = -q / p\nc = a + b\nprint(c)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nf = x**3 - 49*x**2 + 623*x - 2015\ng = f.subs(x, x + 5)\nroots = solve(g, x)\nprint(sum(roots))"
  },
  {
    "example_id": 444,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27648.0"
    ],
    "annotated_answers": [
      "27648.0"
    ],
    "solution": "a, b, c, d = 1, 2, 3, 4\nexpression = a * b**2 * c**3 * d**4\nprint(expression)"
  },
  {
    "example_id": 445,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import sympy\n\n# Sympy's solve function solves a system of equations\n# to find the roots of the polynomial\nroots = sympy.solve([\n    (1 - sympy.sqrt(2))**2 + (3 + sympy.sqrt(7))**2 + (1 + sympy.sqrt(2))**2 + (5)**2 - 1,\n    (1 - sympy.sqrt(2))**3 + (3 + sympy.sqrt(7))**3 + (1 + sympy.sqrt(2))**3 + (5)**3 - 1,\n    (1 - sympy.sqrt(2))**4 + (3 + sympy.sqrt(7))**4 + (1 + sympy.sqrt(2))**4 + (5)**4 - 1,\n    (1 - sympy.sqrt(2))**5 + (3 + sympy.sqrt(7))**5 + (1 + sympy.sqrt(2))**5 + (5)**5 - 1\n])\n\n# The smallest possible degree of the polynomial\n# is 2 because it is the degree of the linear polynomial\n# (1 - sqrt(2))**2 + (3 + sqrt(7))**2 + (1 + sqrt(2))**2 + (5)**2 - 1\nprint(len(roots) - 1)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-872445.0"
    ],
    "annotated_answers": [
      "516.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 50):\n    sum += 745 - 742 * i\nprint(sum)"
  },
  {
    "example_id": 447,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.54"
    ],
    "annotated_answers": [
      "0.63"
    ],
    "solution": "log36 = 1.63\nlog94 = round(log36 / 3, 2)\nprint(log94)"
  },
  {
    "example_id": 448,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import Symbol\n\na = Symbol('a')\nb = Symbol('b')\nc = Symbol('c')\n\nexpression = a * b * c + a + b + c\nprint(expression.expand())"
  },
  {
    "example_id": 449,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.521263430467584",
      "24.0",
      "2.483238835027968",
      "23.0"
    ],
    "annotated_answers": [
      "117649.0"
    ],
    "solution": "roots = [1 - 2j, 1 + 2j, 1 - 3j, 1 + 3j, 1 - 4j, 1 + 4j, 1 - 5j, 1 + 5j]\nK = 1\nfor i in range(7):\n    for j in range(i + 1, 7):\n        K *= roots[i] + roots[j]\nprint(K**2)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "52.0",
      "43.0",
      "1.5",
      "43.0",
      "52.0",
      "1.5"
    ],
    "annotated_answers": [
      "828.0"
    ],
    "solution": "import sympy\nexpression = (52 + sympy.sqrt(43))**(3/2) - (52 - sympy.sqrt(43))**(3/2)\nprint(expression)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "198.0"
    ],
    "solution": "a_19 = 99\na_20 = sum(range(1, 20))\nprint(a_20)"
  },
  {
    "example_id": 452,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor x in range(-100, 101):\n    for y in range(-100, 101):\n        for z in range(-100, 101):\n            if x + y - z == 0 and x * z - x * y + y * z == 27 and x * y * z == 54:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0",
      "82.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1325.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import roots\nfrom sympy.abc import x\n\na, b, c = roots(x**3 + 7*x**2 - 11*x - 2, x)\nprint(a + b + c)"
  },
  {
    "example_id": 454,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2494.0",
      "8.748557434046233",
      "34",
      "4.427585219890319",
      "38"
    ],
    "annotated_answers": [
      "229.0"
    ],
    "solution": "def poly(x, coeff):\n    return sum(c * x**i for i, c in enumerate(coeff))\n\ncoeff = [4, 6, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\nprint(poly(1, coeff))\nprint(poly(5, coeff))\nprint(poly(6, coeff))"
  },
  {
    "example_id": 455,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "164.0",
      "164.0"
    ],
    "annotated_answers": [
      "697.0"
    ],
    "solution": "from sympy import symbols\n\nz = symbols('z')\nn = symbols('n', positive=True)\nexpression = (z/(z + n)) - 4*1j\nsolution = expression.subs(z, 164)\nprint(solution)"
  },
  {
    "example_id": 456,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "a = 25\nb = 5\nexpression = a - 5*b\nprint(expression)"
  },
  {
    "example_id": 457,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.415558877709366"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from math import sqrt\n\nsum = 0\nfor n in range(1, 10000):\n    sum += 1 / (sqrt(n) + sqrt(n + 1)) / (sqrt(n**0.25) + sqrt(n + 1)**0.25)\n\nprint(sum)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0000000000000002"
    ],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "from math import sqrt\n\nx = 0.5\nfor i in range(2001):\n    x = sqrt(x) + (1 - x) / x\nprint(x)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "71511.0"
    ],
    "annotated_answers": [
      "214.0"
    ],
    "solution": "a = 143\nb = 150\nc = 169\nd = 1\nprint(a**2 + b**2 + c**2 + d**2)"
  },
  {
    "example_id": 460,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1004.0"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "expression = 0\nfor i in range(1, 2008):\n    if i % 2 == 0:\n        expression += i\n    else:\n        expression -= i\nprint(expression)"
  },
  {
    "example_id": 461,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import log\n\ndef f(x):\n    return 8 * log(x, n) * log(x, m) - 7 * log(x, n) - 6 * log(x, m) - 2013\n\ndef df(x):\n    return 8 * (log(x, n) + log(x, m)) - 7 / x - 6 / x\n\nm = 2\nn = 3\nx = 5\n\nwhile f(x) > 0:\n    m = m + 1\n    x = x / 2\n    n = 2\n\nwhile f(x) < 0:\n    n = n + 1\n    x = x / 2\n    m = 2\n\nwhile f(x) == 0:\n    x = x / 2\n    m = m + 1\n    n = n + 1\n\nprint(m + n)"
  },
  {
    "example_id": 462,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from math import sqrt\nexpression = sqrt((3/4) - sqrt(1/2)) - sqrt((3/4) + sqrt(1/2))\nprint(expression)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "S = [0, 10]\nwhile True:\n    n = len(S)\n    for x in S:\n        if x**2 - 2*x + 1 in S:\n            S.append(x)\n    if len(S) == n:\n        break\nprint(len(S))"
  },
  {
    "example_id": 464,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1022.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "d = 1\nwhile True:\n    d *= 2\n    d -= 1024\n    if d < 0:\n        break\nprint(d)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x')\nsolution = solve(1/(x**2 - 10*x - 29) + 1/(x**2 - 10*x - 45) - 2/(x**2 - 10*x - 69), x)\nprint(solution)"
  },
  {
    "example_id": 466,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "932.0"
    ],
    "annotated_answers": [
      "4022030.0"
    ],
    "solution": "count = 0\nfor x in range(1, 1000):\n    f = x - int(x) - (x - int(x)) / (2 * int(x))\n    g = 2 ** (x - 2007)\n    if f == g:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 467,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "269.00000000000006"
    ],
    "annotated_answers": [
      "269.0"
    ],
    "solution": "expression = abs(10-13j) * abs(10+13j)\nprint(expression)"
  },
  {
    "example_id": 468,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "d1 = 15 + 8j\nd2 = 3 - 4j\nprint(abs(d2) - abs(d1))"
  },
  {
    "example_id": 469,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-18.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "def p(x):\n    return x**2 - 7 * x + 22\n\ndef p1(x):\n    return x**2 - 11 * x + 30\n\ndef p2(x):\n    return x**2 - 17 * x + p(x)\n\nprint(p2(p1(7)))"
  },
  {
    "example_id": 470,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "expression = 2011**2011\nprint(expression % 100)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6981.0",
      "2.0",
      "1323.0",
      "2.0",
      "1.0",
      "3.0",
      "3.0",
      "3.0",
      "25.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "from sympy import symbols, solve\n\nx = symbols('x')\nroots = solve(x**3 + 9*x**2 + 2*x + 1, x)\nr, s, t = roots\nprint(1/r**2 + 1/s**2 + 1/t**2)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "9.0",
      "69.0",
      "18.0",
      "25.0",
      "54.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nz1, z2, z3, z4 = Symbol('z1'), Symbol('z2'), Symbol('z3'), Symbol('z4')\nroots = solve(z1**4 - z1**3 - z1**2 - 1, z1)\n\nP = (z1**6 - z1**5 - z1**3 - z1**2 - z1) + (z2**6 - z2**5 - z2**3 - z2**2 - z2) + (z3**6 - z3**5 - z3**3 - z3**2 - z3) + (z4**6 - z4**5 - z4**3 - z4**2 - z4)\nprint(P.subs(z1, roots[0]).subs(z2, roots[1]).subs(z3, roots[2]).subs(z4, roots[3]))"
  },
  {
    "example_id": 473,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "4.0",
      "1.0",
      "4.0",
      "5.0",
      "1.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "import sympy\na, b, c = sympy.symbols(\"a b c\")\nr_1, r_2, r_3, r_4 = sympy.symbols(\"r_1 r_2 r_3 r_4\")\n\nexpression = (4*r_1**4 - a*r_1**3 + b*r_1**2 - c*r_1 + 5)*(4*r_2**4 - a*r_2**3 + b*r_2**2 - c*r_2 + 5)*(4*r_3**4 - a*r_3**3 + b*r_3**2 - c*r_3 + 5)*(4*r_4**4 - a*r_4**3 + b*r_4**2 - c*r_4 + 5)\n\nconstraint = (r_1/2 + r_2/4 + r_3/5 + r_4/8) - 1\n\nsolve = sympy.solve([expression, constraint], [a, b, c])\nprint(solve)"
  },
  {
    "example_id": 474,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-64.0"
    ],
    "solution": "x = 0\nfor i in range(1, 1000):\n    if (5 * i + 8) ** 0.5 == (i**2 - 16) ** 0.5:\n        x = i\n        break\nprint(x)"
  },
  {
    "example_id": 475,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "-10879.0"
    ],
    "solution": "b = -8891 // 1988\nprint(b)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import log10\n\ncount = 0\nfor a in range(1, 100):\n    for b in range(1, 100):\n        for c in range(1, 100):\n            for d in range(1, 100):\n                if a * log10(2) + b * log10(3) + c * log10(5) + d * log10(7) == 2005:\n                    count += 1\nprint(count)"
  },
  {
    "example_id": 477,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import sqrt\n\ntau = (1 + sqrt(5)) / 2\n\nsum = 0\nn = 0\nwhile True:\n    sum += 1 / tau**n\n    if sum == tau:\n        break\n    n += 1\n\nprint(n)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import simplify\nfrom sympy.abc import x\nexpression = 1 / (x**3 - 3 * x**2 + 3 * x - 1)\nprint(simplify(expression))"
  },
  {
    "example_id": 479,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "152.2185107203483"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "a = 8**(5/4)\nb = 4**(7/4)\nprint(a*b)"
  },
  {
    "example_id": 480,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a, b, c, d = 1, 2, 3, 4\nexpression = (b + c + d) // a + (a + c + d) // b + (a + b + d) // c + (a + b + c) // d\nprint(expression)"
  },
  {
    "example_id": 481,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "F = [0, 1]\nfor n in range(2, 2025):\n    F.append(F[n-1] + F[n-2])\n    F[n] %= 3\nprint(sum(F[2017:2025]))"
  },
  {
    "example_id": 482,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "2.0",
      "100.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "from sympy import log\n\nx = 10\ny = 100\n\nexpression = (log(y, x)**2) + (log(x, y)**2)\nprint(expression)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nx = Symbol('x')\nroots = solve(2*x**4 - 8*x**3 + 7, x)\na, b, c, d = roots\nprint(a + b + c + d)"
  },
  {
    "example_id": 484,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "501.0"
    ],
    "annotated_answers": [
      "49896.0"
    ],
    "solution": "N = 2007 // 4\nprint(N)"
  },
  {
    "example_id": 485,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "85.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from sympy import Symbol\n\nz = Symbol('z')\nexpression = (z + 1/z)**85 + (1/z + z)**85\nprint(expression)"
  },
  {
    "example_id": 486,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1000000.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import math\n\ndef nth_root(x, n):\n    return x ** (1. / n)\n\n\ndef solve_cubic(a, b, c):\n    return [(-b + nth_root(b**2 - 4 * a * c, 3)) / (2 * a) for a in [1, -1]]\n\n\ndef count_roots(a, b, c):\n    roots = solve_cubic(a, b, c)\n    return len(set(roots))\n\n\ndef count_values(n):\n    count = 0\n    for a in range(1, 101):\n        for b in range(1, 101):\n            for c in range(1, 101):\n                if count_roots(a, b, c) == n:\n                    count += 1\n    return count\n\n\ndef main():\n    for n in range(1, 101):\n        print(count_values(n))\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 487,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "496.0"
    ],
    "solution": "count = 0\nfor n in range(1, 1000):\n    x = n / n // n\n    if n == x * n // n:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0",
      "19.0",
      "16.0",
      "20.0",
      "18.0",
      "21.0",
      "20.0",
      "22.0",
      "22.0",
      "23.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import numpy as np\n\ndef upperhyper(x):\n    return (2*np.sqrt((x-6)**2/16+1) - 5)\n\ndef lowerhyper(x):\n    return (-2*np.sqrt((x-6)**2/16+1) - 5)\n\nn = 10\n\nfor i in range(-n, n+1):\n    for j in range(-n, n+1):\n        if (i**2 * j + j**2 * 6 + 6**2 * i == i * j**2 + j * 6**2 + 6 * i**2) and 1 <= i <= 100 and 1 <= j <= 100:\n            print((i+j+6+6))"
  },
  {
    "example_id": 489,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8000.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "a1 = 50\na_n = a1 + (4001 - 1) * 2\nexpression = abs(a_n - a1)\nprint(expression)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import symbols\nx = symbols('x')\na, b, c = symbols('a, b, c')\nexpression = ((x + a)**2 / (a - b) * (a - c)) + ((x + b)**2 / (b - a) * (b - c)) + ((x + c)**2 / (c - a) * (c - b))\nprint(expression)"
  },
  {
    "example_id": 491,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "198.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y, z = 1, 1, 1\nexpression = (x + y) * (y + z)\nwhile x + y + z < 100:\n    if expression < (x + 1) * (y + 1) * (z + 1):\n        x += 1\n    elif expression < (y + 1) * (x + 1) * (z + 1):\n        y += 1\n    else:\n        z += 1\n    expression = (x + y) * (y + z)\nprint(expression)"
  },
  {
    "example_id": 492,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "n = 1\nwhile True:\n    if int(2002/n) == 2002/n:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 493,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.421296296296298"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nexpression = a**3 / b**3 + b**3 / c**3 + c**3 / a**3\nprint(expression)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2833.376960448433"
    ],
    "annotated_answers": [
      "4014013.0"
    ],
    "solution": "import math\nprint(math.sqrt(2003**2 + 2004**2))"
  },
  {
    "example_id": 495,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def cubic(x):\n    return x**3 + 2*x**2 + x\n\nprint(cubic(5))"
  },
  {
    "example_id": 496,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-0.9999999999999584",
      "-0.38196592009298225",
      "20.0",
      "20.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "def f(x):\n    return x * (x + 1) * (x + 2) * (x + 3)\n\nfrom scipy.optimize import minimize_scalar\n\nminimum = minimize_scalar(f, method=\"bounded\", bounds=[-100, 100])\nprint(minimum)"
  },
  {
    "example_id": 497,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    if 0 <= x < 2:\n        return 2 * x\n    elif 2 <= x <= 4:\n        return 8 - 2 * x\n    else:\n        raise ValueError('x out of bounds')\n\nprint(max(f(x) for x in range(5)))"
  },
  {
    "example_id": 498,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def f(x):\n    return x**2 + x + 1\n\nn = 1\nwhile True:\n    product = 1\n    for i in range(1, n + 1):\n        product *= f(i**2)\n    if product >= f(1)**2 * f(2)**2 * f(n)**2:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 499,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15936063.0"
    ],
    "annotated_answers": [
      "3996.0"
    ],
    "solution": "expression = 1\nfor i in range(1996, 1998):\n    expression *= i**2 - (i - 1)**2\nprint(expression)"
  },
  {
    "example_id": 500,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "count = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        for c in range(1, 101):\n            if a**2 + b**2 + c**2 == a * b + a * c + b * c:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 501,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "sum = 0\nfor y in range(1, 100):\n    x = y**2 - 6*y + 5\n    if abs(x) == y:\n        sum += x\nprint(sum)"
  },
  {
    "example_id": 502,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "9.0",
      "30.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nexpression = (x**3 - 3*x**2 - 9*x + 30) % (x - 3)\nprint(expression)"
  }
]