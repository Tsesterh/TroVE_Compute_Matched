[
  {
    "example_id": 0,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "product = 2**3 * 4**5 * 6**7 * 8**9\nremainder = product % 13\nprint(remainder)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "439.0"
    ],
    "annotated_answers": [
      "1440.0"
    ],
    "solution": "for num in range(1, 2010, 1):\n    if num % 7 == 5 and num % 11 == 10 and num % 13 == 10:\n        print(num)\n        break"
  },
  {
    "example_id": 2,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "303.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "N = 2003\nprimes = [2]\nfor num in range(3, N, 2):\n    is_prime = True\n    for prime in primes:\n        if num % prime == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\nnum_primes = len(primes)\nprint(num_primes)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = int(10**(1/3))\nprint(x)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num_batches = 44 // 20\nnum_donuts = 20 * num_batches\nnum_donuts_left_over = num_donuts % 13\nprint(num_donuts_left_over)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "cubes = [1]\nfor num in range(2, 100, 1):\n    is_cube = True\n    for cube in cubes:\n        if num % cube == 0:\n            is_cube = False\n            break\n    if is_cube:\n        cubes.append(num)\nnum_cubes = len(cubes)\nprint(num_cubes)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 12\nremainder = (n + 4) + (n + 6) + (n + 8)\nprint(remainder % 9)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "milk_total = 8\ncoffee_total = 8\nmilk_quarter = milk_total / 4\ncoffee_sixth = coffee_total / 6\nmilk_consumed = milk_quarter\ncoffee_consumed = coffee_sixth\nmilk_remaining = milk_total - milk_consumed\ncoffee_remaining = coffee_total - coffee_consumed\nif milk_remaining == 0 and coffee_remaining == 0:\n    family_size = 1\nelse:\n    family_size = 2\nprint(family_size)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "product = 1\nfor num in range(1, 13, 2):\n    product *= num\nprint(product % 10)"
  },
  {
    "example_id": 9,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "base_6 = '682'\ndigits = [int(digit) for digit in base_6]\nproduct = digits[0] * digits[-1]\nprint(product)"
  },
  {
    "example_id": 10,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1112.0"
    ],
    "annotated_answers": [
      "100002.0"
    ],
    "solution": "a = 101\nb = 1011\nsum = a + b\nprint(sum)"
  },
  {
    "example_id": 11,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2345679012345678",
      "24",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "740.0"
    ],
    "solution": "A = 0\nB = 0\nC = 0\nnums = [num for num in range(1, 26)]\nlcm = 1\nfor num in nums:\n    lcm = lcm * num\nfor num in nums:\n    if lcm % num == 0:\n        A = A * 10 + num\n        lcm = lcm // num\nfor num in nums:\n    if lcm % num == 0:\n        B = B * 10 + num\n        lcm = lcm // num\nfor num in nums:\n    if lcm % num == 0:\n        C = C * 10 + num\n        lcm = lcm // num\nprint(A, B, C)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1058.0"
    ],
    "annotated_answers": [
      "1058.0"
    ],
    "solution": "for n in range(1399):\n    if (n*160) % 1399 == 1:\n        print(n)\n        break"
  },
  {
    "example_id": 13,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "106.0"
    ],
    "solution": "N = 1000\nfor num in range(N):\n    if num % 7 == 1:\n        print(num)\n        break"
  },
  {
    "example_id": 14,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 210**3\nb = a + 1\nprint(b-a)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "n = 280 // 40\nprint(n)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4618.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "base_2_digits = [0, 1, 10, 11, 100, 101, 110, 111]\nbase_3_digits = [0, 1, 2, 10, 11, 12, 20, 21]\nbase_10_sum = 0\nfor i in range(len(base_2_digits)):\n    base_10_sum += base_3_digits[i] * 2**i\nprint(base_10_sum)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "product = 2\nfor num in range(4, 98, 2):\n    product *= num\nprint(product % 10)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "b = 103 // 4 * 12\nprint(b)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.75"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "base_3_digits = [3**0, 3**1, 3**2, 3**3]\nbase_6_digits = [6**0, 6**1, 6**2, 6**3]\n\nnums = []\nfor base_3 in base_3_digits:\n    for base_6 in base_6_digits:\n        num = base_3 + base_6\n        if num > 9999:\n            break\n        nums.append(num)\n\navg = sum(nums) / len(nums)\nprint(avg)"
  },
  {
    "example_id": 20,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "236.0"
    ],
    "solution": "# Emperors are good at math\nregiment = 200\n# Divide by 4\nregiment //= 4\n# Divide by 3\nregiment //= 3\n# Divide by 11\nregiment //= 11\nprint(regiment)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "num_solutions = 0\nfor a in range(1, 100):\n    if a % 20 == 0:\n        continue\n    b = (a-1) % 20\n    if a * b % 20 == 4 * a % 20:\n        num_solutions += 1\nprint(num_solutions)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41956.0"
    ],
    "annotated_answers": [
      "11014.0"
    ],
    "solution": "n = 123_4 * 3_4\nprint(n)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.05625"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "frac = 9 / 160\nprint(frac % 10)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import pow\nnum = pow(29, 13) - pow(5, 13)\nprint(num % 7)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import gcd\n\ndef gcd_max(n):\n    return gcd(13*n+8, 5*n+3)\n\nmax_gcd = gcd_max(1000000000)\nprint(max_gcd)"
  },
  {
    "example_id": 26,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "387.0"
    ],
    "annotated_answers": [
      "313.0"
    ],
    "solution": "num_dozen_eggs = 200 // 12\nnum_baker_dozen_eggs = 200 // 13\nnum_eggs = num_dozen_eggs * 12 + num_baker_dozen_eggs * 13\nprint(num_eggs)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "145176.0"
    ],
    "annotated_answers": [
      "21126.0"
    ],
    "solution": "num = 315_6 * 4_6\nprint(num)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "6.0",
      "8.0",
      "10.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 2\nwhile n < 10:\n    n = n + 2\n    print(n)"
  },
  {
    "example_id": 29,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "for i in range(1, 100):\n    nums = [i, i+1, i+2]\n    if sum(nums)**(1/3) == int(sum(nums)**(1/3)):\n        print(sum(nums))\n        break"
  },
  {
    "example_id": 30,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "negative_product = 0\nfor a in range(-200, -1):\n    product = 1\n    for num in range(1, a):\n        if a % num == 0:\n            product *= num\n    if product < 0:\n        negative_product += 1\nprint(negative_product)"
  },
  {
    "example_id": 31,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "bad_ints = 0\nfor num in range(100, 200):\n    if num % 4 == 3:\n        bad_ints += 1\nprint(bad_ints)"
  },
  {
    "example_id": 32,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "m = 0\nfor num in range(1, 100):\n    if num % 10 == 1:\n        m += 1\nprint(m)"
  },
  {
    "example_id": 33,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "perfect_squares = [100, 10000, 1000000]\nnum_perfect_squares = len(perfect_squares)\nprint(num_perfect_squares)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "N = 531340\nremainder = N % 210\nprint(remainder)"
  },
  {
    "example_id": 35,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1147.0"
    ],
    "solution": "primes = []\nfor num in range(2, 40, 2):\n    is_prime = True\n    for prime in primes:\n        if num % prime == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\nmax_product = 1\nfor prime1 in primes:\n    for prime2 in primes:\n        if prime1 < prime2:\n            product = prime1 * prime2\n            if product > max_product:\n                max_product = product\nprint(max_product)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "111010101434.0"
    ],
    "annotated_answers": [
      "76028.0"
    ],
    "solution": "num1 = 324\nnum2 = 111010101110\nprint(num1 + num2)"
  },
  {
    "example_id": 37,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "product = 16**17 * 17**18 * 18**19\nunits = product % 10\nprint(units)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "a = 1575\nb = 1050\ngcd = a*7//b*3\nprint(gcd)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# set of three-digit numbers\nS = [101, 102, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n# greatest common factor\ngcf = 1\nfor num in S:\n    while num % gcf!= 0:\n        gcf += 1\nprint(gcf)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "6.0",
      "8.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "possible_values = []\nfor i in range(0, 10):\n    num = i**2\n    tens_digit = num // 10\n    if tens_digit < 10:\n        possible_values.append(tens_digit)\nprint(possible_values)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "ones_digit = 1 * 3 * 5 * 7 * 9 * 11 * 13 % 10\nprint(ones_digit)"
  },
  {
    "example_id": 42,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "199.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "n = 3**17 + 3**10\nn_str = str(n)\nn_digits = [int(digit) for digit in n_str]\nA, B, C = n_digits[0], n_digits[2], n_digits[4]\nprint(100*A + 10*B + C)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1342.0"
    ],
    "annotated_answers": [
      "6710.0"
    ],
    "solution": "r = 1342 % 13\nfor num in range(1342, 2000000000, 1342):\n    if num % 13 == r:\n        print(num)\n        break"
  },
  {
    "example_id": 44,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "119.0",
      "39.0",
      "158.0",
      "221.0",
      "21.0",
      "242.0",
      "273.0",
      "17.0",
      "290.0",
      "357.0",
      "13.0",
      "370.0",
      "663.0",
      "7.0",
      "670.0"
    ],
    "annotated_answers": [
      "142.0"
    ],
    "solution": "N = 4641\nfor a in range(100, 1000):\n    b = N // a\n    if a * b == N:\n        print(a, b, a + b)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import log10, floor\n\ndef digit_in_fraction(num, den):\n    num_digits = floor(log10(num))\n    den_digits = floor(log10(den))\n    num_decimal_places = num_digits - den_digits\n    return num_decimal_places + 1\n\nden = 17\nnum_decimal_places = digit_in_fraction(1, den)\nnum = 1\nwhile num_decimal_places > 0:\n    num *= 10\n    num_decimal_places -= 1\nprint(num % den)"
  },
  {
    "example_id": 46,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "59.0"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "linda = 2747\nsherry = 3523\njune = 3737\nconnie = 2652\ntotal = linda + sherry + june + connie\nbills = total // 100\ncoins = total % 100\nprint(coins)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "num = 2013\nbase = 10\nfor i in range(2, base):\n    num_base_b = str(num)[-1]\n    if num_base_b == str(num)[-1]:\n        print(i)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "314.0"
    ],
    "solution": "a = 2\na %= 3\na += 4\na %= 5\na += 6\na %= 7\na += 8\na %= 9\nprint(a)"
  },
  {
    "example_id": 49,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "u = 4\nprint(u)"
  },
  {
    "example_id": 50,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "num_left_over = 7 % 4\nprint(num_left_over)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "bags = 7\ncoins = 53\nmin_coins = bags * coins // 8\nprint(min_coins)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "print(81_9 - 72_9)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b, c = 1, 2, 3\nremainder = (a + b + c) % 13\nprint(remainder)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10101.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "N = 10101\nprimes = [2]\nfor num in range(3, N, 2):\n    is_prime = True\n    for prime in primes:\n        if num % prime == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\nsmallest_prime_factor = primes[0]\nlargest_prime_factor = primes[-1]\nprint(smallest_prime_factor + largest_prime_factor)"
  },
  {
    "example_id": 55,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "m = 20\nn = 34\ncommon_divisor = 8\nleast_common_multiple = 112\n\n# Calculate m+n\nm_plus_n = least_common_multiple // common_divisor\n\n# Print the result\nprint(m_plus_n)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def divisors(num):\n    divisors = [1]\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            if num // i!= i:\n                divisors.append(num // i)\n    return divisors\n\ndef common_divisors(num1, num2):\n    divisors1 = divisors(num1)\n    divisors2 = divisors(num2)\n    common_divisors = []\n    for divisor in divisors1:\n        if divisor in divisors2:\n            common_divisors.append(divisor)\n    return common_divisors\n\nprint(len(common_divisors(48, 156)))"
  },
  {
    "example_id": 57,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from sympy import lcm, gcd\n\nn = 10\nk = 10\nlcm_n_k = lcm(n, k)\ngcd_n_k = gcd(n, k)\nprint(lcm_n_k / gcd_n_k)"
  },
  {
    "example_id": 58,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "num_factors = 0\nfor num in range(1, 1000, 20):\n    if num % 20 == 0:\n        num_factors += 1\nprint(num_factors)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "number = 13**19 * 19**13\nunits_digit = number % 10\nprint(units_digit)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "222.0"
    ],
    "annotated_answers": [
      "222.0"
    ],
    "solution": "for n in range(0, 2293):\n    if 31*n % 2293 == 3:\n        print(n)\n        break"
  },
  {
    "example_id": 61,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "frac_3_7 = 3/7\nfrac_3_7_decimal = str(frac_3_7).split('.')[1]\nprint(frac_3_7_decimal[8])"
  },
  {
    "example_id": 62,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "132.0"
    ],
    "annotated_answers": [
      "3300.0"
    ],
    "solution": "r = 13200 // 100\nprint(r)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "num_cubes = 0\nfor num in range(1, 8):\n    if num**3 % 6 == 0:\n        num_cubes += 1\nprint(num_cubes)"
  },
  {
    "example_id": 64,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "a = 5\nb = 53\nlast_two_digits_a = str(a)[-2:]\nlast_two_digits_b = str(b)[-2:]\nlast_two_digits_ab = str(a-b)[-2:]\nprint(last_two_digits_ab)"
  },
  {
    "example_id": 65,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "num_fractions = 0\nfor n in range(1, 100):\n    if n % 33 == 0:\n        num_fractions += 1\nprint(num_fractions)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2196.0"
    ],
    "annotated_answers": [
      "2743.0"
    ],
    "solution": "largest = 13**3 - 1\nprint(largest)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "841.0"
    ],
    "annotated_answers": [
      "841.0"
    ],
    "solution": "k = 1000\nfor num in range(k, 1, -1):\n    if num % 3 == 1 and num % 4 == 1 and num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n        print(num)\n        break"
  },
  {
    "example_id": 68,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10199.0"
    ],
    "annotated_answers": [
      "11189.0"
    ],
    "solution": "for num in range(10000, 99999):\n    digits = [int(digit) for digit in str(num)]\n    if sum(digits) == 20:\n        print(num)\n        break"
  },
  {
    "example_id": 69,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 101):\n    sum = (sum + num) % 6\nprint(sum)"
  },
  {
    "example_id": 70,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "S = 0\nfor num in range(2010, 4019):\n    S += num\nprint(S % 2009)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "690.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "b = 151 // 5 * 23\nprint(b)"
  },
  {
    "example_id": 72,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 131\nn = 55\nbase = 10\nnum = n\ndigits = []\nwhile num > 0:\n    digits.append(num % base)\n    num //= base\ndigits.reverse()\nprint(digits)"
  },
  {
    "example_id": 73,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0",
      "1.0",
      "6.0",
      "1.0",
      "7.0",
      "1.0",
      "8.0",
      "1.0",
      "9.0",
      "1.0",
      "10.0",
      "1.0",
      "11.0",
      "1.0",
      "12.0",
      "1.0",
      "13.0",
      "1.0",
      "14.0",
      "1.0",
      "15.0",
      "1.0",
      "16.0",
      "1.0",
      "17.0",
      "1.0",
      "18.0",
      "1.0",
      "19.0",
      "1.0",
      "20.0",
      "1.0",
      "21.0",
      "1.0",
      "22.0",
      "1.0",
      "23.0",
      "1.0",
      "24.0",
      "1.0",
      "25.0",
      "1.0",
      "26.0",
      "1.0",
      "27.0",
      "1.0",
      "28.0",
      "1.0",
      "29.0",
      "1.0",
      "30.0",
      "1.0",
      "31.0",
      "1.0",
      "32.0",
      "1.0",
      "33.0",
      "1.0",
      "34.0",
      "1.0",
      "35.0",
      "1.0",
      "36.0",
      "1.0",
      "37.0",
      "1.0",
      "38.0",
      "1.0",
      "39.0",
      "1.0",
      "40.0",
      "1.0",
      "41.0",
      "1.0",
      "42.0",
      "1.0",
      "43.0",
      "1.0",
      "44.0",
      "1.0",
      "45.0",
      "1.0",
      "46.0",
      "1.0",
      "47.0",
      "1.0",
      "48.0",
      "1.0",
      "49.0",
      "1.0",
      "50.0",
      "1.0",
      "51.0",
      "1.0",
      "52.0",
      "1.0",
      "53.0",
      "1.0",
      "54.0",
      "1.0",
      "55.0",
      "1.0",
      "56.0",
      "1.0",
      "57.0",
      "1.0",
      "58.0",
      "1.0",
      "59.0",
      "1.0",
      "60.0",
      "1.0",
      "61.0",
      "1.0",
      "62.0",
      "1.0",
      "63.0",
      "1.0",
      "64.0",
      "1.0",
      "65.0",
      "1.0",
      "66.0",
      "1.0",
      "67.0",
      "1.0",
      "68.0",
      "1.0",
      "69.0",
      "1.0",
      "70.0",
      "1.0",
      "71.0",
      "1.0",
      "72.0",
      "1.0",
      "73.0",
      "1.0",
      "74.0",
      "1.0",
      "75.0",
      "1.0",
      "76.0",
      "1.0",
      "77.0",
      "1.0",
      "78.0",
      "1.0",
      "79.0",
      "1.0",
      "80.0",
      "1.0",
      "81.0",
      "1.0",
      "82.0",
      "1.0",
      "83.0",
      "1.0",
      "84.0",
      "1.0",
      "85.0",
      "1.0",
      "86.0",
      "1.0",
      "87.0",
      "1.0",
      "88.0",
      "1.0",
      "89.0",
      "1.0",
      "90.0",
      "1.0",
      "91.0",
      "1.0",
      "92.0",
      "1.0",
      "93.0",
      "1.0",
      "94.0",
      "1.0",
      "95.0",
      "1.0",
      "96.0",
      "1.0",
      "97.0",
      "1.0",
      "98.0",
      "1.0",
      "99.0",
      "1.0",
      "100.0",
      "1.0",
      "101.0",
      "1.0",
      "102.0",
      "1.0",
      "103.0",
      "1.0",
      "104.0",
      "1.0",
      "105.0",
      "1.0",
      "106.0",
      "1.0",
      "107.0",
      "1.0",
      "108.0",
      "1.0",
      "109.0",
      "1.0",
      "110.0",
      "1.0",
      "111.0",
      "1.0",
      "112.0",
      "1.0",
      "113.0",
      "1.0",
      "114.0",
      "1.0",
      "115.0",
      "1.0",
      "116.0",
      "1.0",
      "117.0",
      "1.0",
      "118.0",
      "1.0",
      "119.0",
      "1.0",
      "120.0",
      "1.0",
      "121.0",
      "1.0",
      "122.0",
      "1.0",
      "123.0",
      "1.0",
      "124.0",
      "1.0",
      "125.0",
      "1.0",
      "126.0",
      "1.0",
      "127.0",
      "1.0",
      "128.0",
      "1.0",
      "129.0",
      "1.0",
      "130.0",
      "1.0",
      "131.0",
      "1.0",
      "132.0",
      "1.0",
      "133.0",
      "1.0",
      "134.0",
      "1.0",
      "135.0",
      "1.0",
      "136.0",
      "1.0",
      "137.0",
      "1.0",
      "138.0",
      "1.0",
      "139.0",
      "1.0",
      "140.0",
      "1.0",
      "141.0",
      "1.0",
      "142.0",
      "1.0",
      "143.0",
      "1.0",
      "144.0",
      "1.0",
      "145.0",
      "1.0",
      "146.0",
      "1.0",
      "147.0",
      "1.0",
      "148.0",
      "1.0",
      "149.0",
      "1.0",
      "150.0",
      "1.0",
      "151.0",
      "1.0",
      "152.0",
      "1.0",
      "153.0",
      "1.0",
      "154.0",
      "1.0",
      "155.0",
      "1.0",
      "156.0",
      "1.0",
      "157.0",
      "1.0",
      "158.0",
      "1.0",
      "159.0",
      "1.0",
      "160.0",
      "1.0",
      "161.0",
      "1.0",
      "162.0",
      "1.0",
      "163.0",
      "1.0",
      "164.0",
      "1.0",
      "165.0",
      "1.0",
      "166.0",
      "1.0",
      "167.0",
      "1.0",
      "168.0",
      "1.0",
      "169.0",
      "1.0",
      "170.0",
      "1.0",
      "171.0",
      "1.0",
      "172.0",
      "1.0",
      "173.0",
      "1.0",
      "174.0",
      "1.0",
      "175.0",
      "1.0",
      "176.0",
      "1.0",
      "177.0",
      "1.0",
      "178.0",
      "1.0",
      "179.0",
      "1.0",
      "180.0",
      "1.0",
      "181.0",
      "1.0",
      "182.0",
      "1.0",
      "183.0",
      "1.0",
      "184.0",
      "1.0",
      "185.0",
      "1.0",
      "186.0",
      "1.0",
      "187.0",
      "1.0",
      "188.0",
      "1.0",
      "189.0",
      "1.0",
      "190.0",
      "1.0",
      "191.0",
      "1.0",
      "192.0",
      "1.0",
      "193.0",
      "1.0",
      "194.0",
      "1.0",
      "195.0",
      "1.0",
      "196.0",
      "1.0",
      "197.0",
      "1.0",
      "198.0",
      "1.0",
      "199.0",
      "1.0",
      "200.0",
      "1.0",
      "201.0",
      "1.0",
      "202.0",
      "1.0",
      "203.0",
      "1.0",
      "204.0",
      "1.0",
      "205.0",
      "1.0",
      "206.0",
      "1.0",
      "207.0",
      "1.0",
      "208.0",
      "1.0",
      "209.0",
      "1.0",
      "210.0",
      "1.0",
      "211.0",
      "1.0",
      "212.0",
      "1.0",
      "213.0",
      "1.0",
      "214.0",
      "1.0",
      "215.0",
      "1.0",
      "216.0",
      "1.0",
      "217.0",
      "1.0",
      "218.0",
      "1.0",
      "219.0",
      "1.0",
      "220.0",
      "1.0",
      "221.0",
      "1.0",
      "222.0",
      "1.0",
      "223.0",
      "1.0",
      "224.0",
      "1.0",
      "225.0",
      "1.0",
      "226.0",
      "1.0",
      "227.0",
      "1.0",
      "228.0",
      "1.0",
      "229.0",
      "1.0",
      "230.0",
      "1.0",
      "231.0",
      "1.0",
      "232.0",
      "1.0",
      "233.0",
      "1.0",
      "234.0",
      "1.0",
      "235.0",
      "1.0",
      "236.0",
      "1.0",
      "237.0",
      "1.0",
      "238.0",
      "1.0",
      "239.0",
      "1.0",
      "240.0",
      "1.0",
      "241.0",
      "1.0",
      "242.0",
      "1.0",
      "243.0",
      "1.0",
      "244.0",
      "1.0",
      "245.0",
      "1.0",
      "246.0",
      "1.0",
      "247.0",
      "1.0",
      "248.0",
      "1.0",
      "249.0",
      "1.0",
      "250.0",
      "1.0",
      "251.0",
      "1.0",
      "252.0",
      "1.0",
      "253.0",
      "1.0",
      "254.0",
      "1.0",
      "255.0",
      "1.0",
      "256.0",
      "1.0",
      "257.0",
      "1.0",
      "258.0",
      "1.0",
      "259.0",
      "1.0",
      "260.0",
      "1.0",
      "261.0",
      "1.0",
      "262.0",
      "1.0",
      "263.0",
      "1.0",
      "264.0",
      "1.0",
      "265.0",
      "1.0",
      "266.0",
      "1.0",
      "267.0",
      "1.0",
      "268.0",
      "1.0",
      "269.0",
      "1.0",
      "270.0",
      "1.0",
      "271.0",
      "1.0",
      "272.0",
      "1.0",
      "273.0",
      "1.0",
      "274.0",
      "1.0",
      "275.0",
      "1.0",
      "276.0",
      "1.0",
      "277.0",
      "1.0",
      "278.0",
      "1.0",
      "279.0",
      "1.0",
      "280.0",
      "1.0",
      "281.0",
      "1.0",
      "282.0",
      "1.0",
      "283.0",
      "1.0",
      "284.0",
      "1.0",
      "285.0",
      "1.0",
      "286.0",
      "1.0",
      "287.0",
      "1.0",
      "288.0",
      "1.0",
      "289.0",
      "1.0",
      "290.0",
      "1.0",
      "291.0",
      "1.0",
      "292.0",
      "1.0",
      "293.0",
      "1.0",
      "294.0",
      "1.0",
      "295.0",
      "1.0",
      "296.0",
      "1.0",
      "297.0",
      "1.0",
      "298.0",
      "1.0",
      "299.0",
      "1.0",
      "300.0",
      "1.0",
      "301.0",
      "1.0",
      "302.0",
      "1.0",
      "303.0",
      "1.0",
      "304.0",
      "1.0",
      "305.0",
      "1.0",
      "306.0",
      "1.0",
      "307.0",
      "1.0",
      "308.0",
      "1.0",
      "309.0",
      "1.0",
      "310.0",
      "1.0",
      "311.0",
      "1.0",
      "312.0",
      "1.0",
      "313.0",
      "1.0",
      "314.0",
      "1.0",
      "315.0",
      "1.0",
      "316.0",
      "1.0",
      "317.0",
      "1.0",
      "318.0",
      "1.0",
      "319.0",
      "1.0",
      "320.0",
      "1.0",
      "321.0",
      "1.0",
      "322.0",
      "1.0",
      "323.0",
      "1.0",
      "324.0",
      "1.0",
      "325.0",
      "1.0",
      "326.0",
      "1.0",
      "327.0",
      "1.0",
      "328.0",
      "1.0",
      "329.0",
      "1.0",
      "330.0",
      "1.0",
      "331.0",
      "1.0",
      "332.0",
      "1.0",
      "333.0",
      "1.0",
      "334.0",
      "1.0",
      "335.0",
      "1.0",
      "336.0",
      "1.0",
      "337.0",
      "1.0",
      "338.0",
      "1.0",
      "339.0",
      "1.0",
      "340.0",
      "1.0",
      "341.0",
      "1.0",
      "342.0",
      "1.0",
      "343.0",
      "1.0",
      "344.0",
      "1.0",
      "345.0",
      "1.0",
      "346.0",
      "1.0",
      "347.0",
      "1.0",
      "348.0",
      "1.0",
      "349.0",
      "1.0",
      "350.0",
      "1.0",
      "351.0",
      "1.0",
      "352.0",
      "1.0",
      "353.0",
      "1.0",
      "354.0",
      "1.0",
      "355.0",
      "1.0",
      "356.0",
      "1.0",
      "357.0",
      "1.0",
      "358.0",
      "1.0",
      "359.0",
      "1.0",
      "360.0",
      "1.0",
      "361.0",
      "1.0",
      "362.0",
      "1.0",
      "363.0",
      "1.0",
      "364.0",
      "1.0",
      "365.0",
      "1.0",
      "366.0",
      "1.0",
      "367.0",
      "1.0",
      "368.0",
      "1.0",
      "369.0",
      "1.0",
      "370.0",
      "1.0",
      "371.0",
      "1.0",
      "372.0",
      "1.0",
      "373.0",
      "1.0",
      "374.0",
      "1.0",
      "375.0",
      "1.0",
      "376.0",
      "1.0",
      "377.0",
      "1.0",
      "378.0",
      "1.0",
      "379.0",
      "1.0",
      "380.0",
      "1.0",
      "381.0",
      "1.0",
      "382.0",
      "1.0",
      "383.0",
      "1.0",
      "384.0",
      "1.0",
      "385.0",
      "1.0",
      "386.0",
      "1.0",
      "387.0",
      "1.0",
      "388.0",
      "1.0",
      "389.0",
      "1.0",
      "390.0",
      "1.0",
      "391.0",
      "1.0",
      "392.0",
      "1.0",
      "393.0",
      "1.0",
      "394.0",
      "1.0",
      "395.0",
      "1.0",
      "396.0",
      "1.0",
      "397.0",
      "1.0",
      "398.0",
      "1.0",
      "399.0",
      "1.0",
      "400.0",
      "1.0",
      "401.0",
      "1.0",
      "402.0",
      "1.0",
      "403.0",
      "1.0",
      "404.0",
      "1.0",
      "405.0",
      "1.0",
      "406.0",
      "1.0",
      "407.0",
      "1.0",
      "408.0",
      "1.0",
      "409.0",
      "1.0",
      "410.0",
      "1.0",
      "411.0",
      "1.0",
      "412.0",
      "1.0",
      "413.0",
      "1.0",
      "414.0",
      "1.0",
      "415.0",
      "1.0",
      "416.0",
      "1.0",
      "417.0",
      "1.0",
      "418.0",
      "1.0",
      "419.0",
      "1.0",
      "420.0",
      "1.0",
      "421.0",
      "1.0",
      "422.0",
      "1.0",
      "423.0",
      "1.0",
      "424.0",
      "1.0",
      "425.0",
      "1.0",
      "426.0",
      "1.0",
      "427.0",
      "1.0",
      "428.0",
      "1.0",
      "429.0",
      "1.0",
      "430.0",
      "1.0",
      "431.0",
      "1.0",
      "432.0",
      "1.0",
      "433.0",
      "1.0",
      "434.0",
      "1.0",
      "435.0",
      "1.0",
      "436.0",
      "1.0",
      "437.0",
      "1.0",
      "438.0",
      "1.0",
      "439.0",
      "1.0",
      "440.0",
      "1.0",
      "441.0",
      "1.0",
      "442.0",
      "1.0",
      "443.0",
      "1.0",
      "444.0",
      "1.0",
      "445.0",
      "1.0",
      "446.0",
      "1.0",
      "447.0",
      "1.0",
      "448.0",
      "1.0",
      "449.0",
      "1.0",
      "450.0",
      "1.0",
      "451.0",
      "1.0",
      "452.0",
      "1.0",
      "453.0",
      "1.0",
      "454.0",
      "1.0",
      "455.0",
      "1.0",
      "456.0",
      "1.0",
      "457.0",
      "1.0",
      "458.0",
      "1.0",
      "459.0",
      "1.0",
      "460.0",
      "1.0",
      "461.0",
      "1.0",
      "462.0",
      "1.0",
      "463.0",
      "1.0",
      "464.0",
      "1.0",
      "465.0",
      "1.0",
      "466.0",
      "1.0",
      "467.0",
      "1.0",
      "468.0",
      "1.0",
      "469.0",
      "1.0",
      "470.0",
      "1.0",
      "471.0",
      "1.0",
      "472.0",
      "1.0",
      "473.0",
      "1.0",
      "474.0",
      "1.0",
      "475.0",
      "1.0",
      "476.0",
      "1.0",
      "477.0",
      "1.0",
      "478.0",
      "1.0",
      "479.0",
      "1.0",
      "480.0",
      "1.0",
      "481.0",
      "1.0",
      "482.0",
      "1.0",
      "483.0",
      "1.0",
      "484.0",
      "1.0",
      "485.0",
      "1.0",
      "486.0",
      "1.0",
      "487.0",
      "1.0",
      "488.0",
      "1.0",
      "489.0",
      "1.0",
      "490.0",
      "1.0",
      "491.0",
      "1.0",
      "492.0",
      "1.0",
      "493.0",
      "1.0",
      "494.0",
      "1.0",
      "495.0",
      "1.0",
      "496.0",
      "1.0",
      "497.0",
      "1.0",
      "498.0",
      "1.0",
      "499.0",
      "1.0",
      "500.0",
      "1.0",
      "501.0",
      "1.0",
      "502.0",
      "1.0",
      "503.0",
      "1.0",
      "504.0",
      "1.0",
      "505.0",
      "1.0",
      "506.0",
      "1.0",
      "507.0",
      "1.0",
      "508.0",
      "1.0",
      "509.0",
      "1.0",
      "510.0",
      "1.0",
      "511.0",
      "1.0",
      "512.0",
      "1.0",
      "513.0",
      "1.0",
      "514.0",
      "1.0",
      "515.0",
      "1.0",
      "516.0",
      "1.0",
      "517.0",
      "1.0",
      "518.0",
      "1.0",
      "519.0",
      "1.0",
      "520.0",
      "1.0",
      "521.0",
      "1.0",
      "522.0",
      "1.0",
      "523.0",
      "1.0",
      "524.0",
      "1.0",
      "525.0",
      "1.0",
      "526.0",
      "1.0",
      "527.0",
      "1.0",
      "528.0",
      "1.0",
      "529.0",
      "1.0",
      "530.0",
      "1.0",
      "531.0",
      "1.0",
      "532.0",
      "1.0",
      "533.0",
      "1.0",
      "534.0",
      "1.0",
      "535.0",
      "1.0",
      "536.0",
      "1.0",
      "537.0",
      "1.0",
      "538.0",
      "1.0",
      "539.0",
      "1.0",
      "540.0",
      "1.0",
      "541.0",
      "1.0",
      "542.0",
      "1.0",
      "543.0",
      "1.0",
      "544.0",
      "1.0",
      "545.0",
      "1.0",
      "546.0",
      "1.0",
      "547.0",
      "1.0",
      "548.0",
      "1.0",
      "549.0",
      "1.0",
      "550.0",
      "1.0",
      "551.0",
      "1.0",
      "552.0",
      "1.0",
      "553.0",
      "1.0",
      "554.0",
      "1.0",
      "555.0",
      "1.0",
      "556.0",
      "1.0",
      "557.0",
      "1.0",
      "558.0",
      "1.0",
      "559.0",
      "1.0",
      "560.0",
      "1.0",
      "561.0",
      "1.0",
      "562.0",
      "1.0",
      "563.0",
      "1.0",
      "564.0",
      "1.0",
      "565.0",
      "1.0",
      "566.0",
      "1.0",
      "567.0",
      "1.0",
      "568.0",
      "1.0",
      "569.0",
      "1.0",
      "570.0",
      "1.0",
      "571.0",
      "1.0",
      "572.0",
      "1.0",
      "573.0",
      "1.0",
      "574.0",
      "1.0",
      "575.0",
      "1.0",
      "576.0",
      "1.0",
      "577.0",
      "1.0",
      "578.0",
      "1.0",
      "579.0",
      "1.0",
      "580.0",
      "1.0",
      "581.0",
      "1.0",
      "582.0",
      "1.0",
      "583.0",
      "1.0",
      "584.0",
      "1.0",
      "585.0",
      "1.0",
      "586.0",
      "1.0",
      "587.0",
      "1.0",
      "588.0",
      "1.0",
      "589.0",
      "1.0",
      "590.0",
      "1.0",
      "591.0",
      "1.0",
      "592.0",
      "1.0",
      "593.0",
      "1.0",
      "594.0",
      "1.0",
      "595.0",
      "1.0",
      "596.0",
      "1.0",
      "597.0",
      "1.0",
      "598.0",
      "1.0",
      "599.0",
      "1.0",
      "600.0",
      "1.0",
      "601.0",
      "1.0",
      "602.0",
      "1.0",
      "603.0",
      "1.0",
      "604.0",
      "1.0",
      "605.0",
      "1.0",
      "606.0",
      "1.0",
      "607.0",
      "1.0",
      "608.0",
      "1.0",
      "609.0",
      "1.0",
      "610.0",
      "1.0",
      "611.0",
      "1.0",
      "612.0",
      "1.0",
      "613.0",
      "1.0",
      "614.0",
      "1.0",
      "615.0",
      "1.0",
      "616.0",
      "1.0",
      "617.0",
      "1.0",
      "618.0",
      "1.0",
      "619.0",
      "1.0",
      "620.0",
      "1.0",
      "621.0",
      "1.0",
      "622.0",
      "1.0",
      "623.0",
      "1.0",
      "624.0",
      "1.0",
      "625.0",
      "1.0",
      "626.0",
      "1.0",
      "627.0",
      "1.0",
      "628.0",
      "1.0",
      "629.0",
      "1.0",
      "630.0",
      "1.0",
      "631.0",
      "1.0",
      "632.0",
      "1.0",
      "633.0",
      "1.0",
      "634.0",
      "1.0",
      "635.0",
      "1.0",
      "636.0",
      "1.0",
      "637.0",
      "1.0",
      "638.0",
      "1.0",
      "639.0",
      "1.0",
      "640.0",
      "1.0",
      "641.0",
      "1.0",
      "642.0",
      "1.0",
      "643.0",
      "1.0",
      "644.0",
      "1.0",
      "645.0",
      "1.0",
      "646.0",
      "1.0",
      "647.0",
      "1.0",
      "648.0",
      "1.0",
      "649.0",
      "1.0",
      "650.0",
      "1.0",
      "651.0",
      "1.0",
      "652.0",
      "1.0",
      "653.0",
      "1.0",
      "654.0",
      "1.0",
      "655.0",
      "1.0",
      "656.0",
      "1.0",
      "657.0",
      "1.0",
      "658.0",
      "1.0",
      "659.0",
      "1.0",
      "660.0",
      "1.0",
      "661.0",
      "1.0",
      "662.0",
      "1.0",
      "663.0",
      "1.0",
      "664.0",
      "1.0",
      "665.0",
      "1.0",
      "666.0",
      "1.0",
      "667.0",
      "1.0",
      "668.0",
      "1.0",
      "669.0",
      "1.0",
      "670.0",
      "1.0",
      "671.0",
      "1.0",
      "672.0",
      "1.0",
      "673.0",
      "1.0",
      "674.0",
      "1.0",
      "675.0",
      "1.0",
      "676.0",
      "1.0",
      "677.0",
      "1.0",
      "678.0",
      "1.0",
      "679.0",
      "1.0",
      "680.0",
      "1.0",
      "681.0",
      "1.0",
      "682.0",
      "1.0",
      "683.0",
      "1.0",
      "684.0",
      "1.0",
      "685.0",
      "1.0",
      "686.0",
      "1.0",
      "687.0",
      "1.0",
      "688.0",
      "1.0",
      "689.0",
      "1.0",
      "690.0",
      "1.0",
      "691.0",
      "1.0",
      "692.0",
      "1.0",
      "693.0",
      "1.0",
      "694.0",
      "1.0",
      "695.0",
      "1.0",
      "696.0",
      "1.0",
      "697.0",
      "1.0",
      "698.0",
      "1.0",
      "699.0",
      "1.0",
      "700.0",
      "1.0",
      "701.0",
      "1.0",
      "702.0",
      "1.0",
      "703.0",
      "1.0",
      "704.0",
      "1.0",
      "705.0",
      "1.0",
      "706.0",
      "1.0",
      "707.0",
      "1.0",
      "708.0",
      "1.0",
      "709.0",
      "1.0",
      "710.0",
      "1.0",
      "711.0",
      "1.0",
      "712.0",
      "1.0",
      "713.0",
      "1.0",
      "714.0",
      "1.0",
      "715.0",
      "1.0",
      "716.0",
      "1.0",
      "717.0",
      "1.0",
      "718.0",
      "1.0",
      "719.0",
      "1.0",
      "720.0",
      "1.0",
      "721.0",
      "1.0",
      "722.0",
      "1.0",
      "723.0",
      "1.0",
      "724.0",
      "1.0",
      "725.0",
      "1.0",
      "726.0",
      "1.0",
      "727.0",
      "1.0",
      "728.0",
      "1.0",
      "729.0",
      "1.0",
      "730.0",
      "1.0",
      "731.0",
      "1.0",
      "732.0",
      "1.0",
      "733.0",
      "1.0",
      "734.0",
      "1.0",
      "735.0",
      "1.0",
      "736.0",
      "1.0",
      "737.0",
      "1.0",
      "738.0",
      "1.0",
      "739.0",
      "1.0",
      "740.0",
      "1.0",
      "741.0",
      "1.0",
      "742.0",
      "1.0",
      "743.0",
      "1.0",
      "744.0",
      "1.0",
      "745.0",
      "1.0",
      "746.0",
      "1.0",
      "747.0",
      "1.0",
      "748.0",
      "1.0",
      "749.0",
      "1.0",
      "750.0",
      "1.0",
      "751.0",
      "1.0",
      "752.0",
      "1.0",
      "753.0",
      "1.0",
      "754.0",
      "1.0",
      "755.0",
      "1.0",
      "756.0",
      "1.0",
      "757.0",
      "1.0",
      "758.0",
      "1.0",
      "759.0",
      "1.0",
      "760.0",
      "1.0",
      "761.0",
      "1.0",
      "762.0",
      "1.0",
      "763.0",
      "1.0",
      "764.0",
      "1.0",
      "765.0",
      "1.0",
      "766.0",
      "1.0",
      "767.0",
      "1.0",
      "768.0",
      "1.0",
      "769.0",
      "1.0",
      "770.0",
      "1.0",
      "771.0",
      "1.0",
      "772.0",
      "1.0",
      "773.0",
      "1.0",
      "774.0",
      "1.0",
      "775.0",
      "1.0",
      "776.0",
      "1.0",
      "777.0",
      "1.0",
      "778.0",
      "1.0",
      "779.0",
      "1.0",
      "780.0",
      "1.0",
      "781.0",
      "1.0",
      "782.0",
      "1.0",
      "783.0",
      "1.0",
      "784.0",
      "1.0",
      "785.0",
      "1.0",
      "786.0",
      "1.0",
      "787.0",
      "1.0",
      "788.0",
      "1.0",
      "789.0",
      "1.0",
      "790.0",
      "1.0",
      "791.0",
      "1.0",
      "792.0",
      "1.0",
      "793.0",
      "1.0",
      "794.0",
      "1.0",
      "795.0",
      "1.0",
      "796.0",
      "1.0",
      "797.0",
      "1.0",
      "798.0",
      "1.0",
      "799.0",
      "1.0",
      "800.0",
      "1.0",
      "801.0",
      "1.0",
      "802.0",
      "1.0",
      "803.0",
      "1.0",
      "804.0",
      "1.0",
      "805.0",
      "1.0",
      "806.0",
      "1.0",
      "807.0",
      "1.0",
      "808.0",
      "1.0",
      "809.0",
      "1.0",
      "810.0",
      "1.0",
      "811.0",
      "1.0",
      "812.0",
      "1.0",
      "813.0",
      "1.0",
      "814.0",
      "1.0",
      "815.0",
      "1.0",
      "816.0",
      "1.0",
      "817.0",
      "1.0",
      "818.0",
      "1.0",
      "819.0",
      "1.0",
      "820.0",
      "1.0",
      "821.0",
      "1.0",
      "822.0",
      "1.0",
      "823.0",
      "1.0",
      "824.0",
      "1.0",
      "825.0",
      "1.0",
      "826.0",
      "1.0",
      "827.0",
      "1.0",
      "828.0",
      "1.0",
      "829.0",
      "1.0",
      "830.0",
      "1.0",
      "831.0",
      "1.0",
      "832.0",
      "1.0",
      "833.0",
      "1.0",
      "834.0",
      "1.0",
      "835.0",
      "1.0",
      "836.0",
      "1.0",
      "837.0",
      "1.0",
      "838.0",
      "1.0",
      "839.0",
      "1.0",
      "840.0",
      "1.0",
      "841.0",
      "1.0",
      "842.0",
      "1.0",
      "843.0",
      "1.0",
      "844.0",
      "1.0",
      "845.0",
      "1.0",
      "846.0",
      "1.0",
      "847.0",
      "1.0",
      "848.0",
      "1.0",
      "849.0",
      "1.0",
      "850.0",
      "1.0",
      "851.0",
      "1.0",
      "852.0",
      "1.0",
      "853.0",
      "1.0",
      "854.0",
      "1.0",
      "855.0",
      "1.0",
      "856.0",
      "1.0",
      "857.0",
      "1.0",
      "858.0",
      "1.0",
      "859.0",
      "1.0",
      "860.0",
      "1.0",
      "861.0",
      "1.0",
      "862.0",
      "1.0",
      "863.0",
      "1.0",
      "864.0",
      "1.0",
      "865.0",
      "1.0",
      "866.0",
      "1.0",
      "867.0",
      "1.0",
      "868.0",
      "1.0",
      "869.0",
      "1.0",
      "870.0",
      "1.0",
      "871.0",
      "1.0",
      "872.0",
      "1.0",
      "873.0",
      "1.0",
      "874.0",
      "1.0",
      "875.0",
      "1.0",
      "876.0",
      "1.0",
      "877.0",
      "1.0",
      "878.0",
      "1.0",
      "879.0",
      "1.0",
      "880.0",
      "1.0",
      "881.0",
      "1.0",
      "882.0",
      "1.0",
      "883.0",
      "1.0",
      "884.0",
      "1.0",
      "885.0",
      "1.0",
      "886.0",
      "1.0",
      "887.0",
      "1.0",
      "888.0",
      "1.0",
      "889.0",
      "1.0",
      "890.0",
      "1.0",
      "891.0",
      "1.0",
      "892.0",
      "1.0",
      "893.0",
      "1.0",
      "894.0",
      "1.0",
      "895.0",
      "1.0",
      "896.0",
      "1.0",
      "897.0",
      "1.0",
      "898.0",
      "1.0",
      "899.0",
      "1.0",
      "900.0",
      "1.0",
      "901.0",
      "1.0",
      "902.0",
      "1.0",
      "903.0",
      "1.0",
      "904.0",
      "1.0",
      "905.0",
      "1.0",
      "906.0",
      "1.0",
      "907.0",
      "1.0",
      "908.0",
      "1.0",
      "909.0",
      "1.0",
      "910.0",
      "1.0",
      "911.0",
      "1.0",
      "912.0",
      "1.0",
      "913.0",
      "1.0",
      "914.0",
      "1.0",
      "915.0",
      "1.0",
      "916.0",
      "1.0",
      "917.0",
      "1.0",
      "918.0",
      "1.0",
      "919.0",
      "1.0",
      "920.0",
      "1.0",
      "921.0",
      "1.0",
      "922.0",
      "1.0",
      "923.0",
      "1.0",
      "924.0",
      "1.0",
      "925.0",
      "1.0",
      "926.0",
      "1.0",
      "927.0",
      "1.0",
      "928.0",
      "1.0",
      "929.0",
      "1.0",
      "930.0",
      "1.0",
      "931.0",
      "1.0",
      "932.0",
      "1.0",
      "933.0",
      "1.0",
      "934.0",
      "1.0",
      "935.0",
      "1.0",
      "936.0",
      "1.0",
      "937.0",
      "1.0",
      "938.0",
      "1.0",
      "939.0",
      "1.0",
      "940.0",
      "1.0",
      "941.0",
      "1.0",
      "942.0",
      "1.0",
      "943.0",
      "1.0",
      "944.0",
      "1.0",
      "945.0",
      "1.0",
      "946.0",
      "1.0",
      "947.0",
      "1.0",
      "948.0",
      "1.0",
      "949.0",
      "1.0",
      "950.0",
      "1.0",
      "951.0",
      "1.0",
      "952.0",
      "1.0",
      "953.0",
      "1.0",
      "954.0",
      "1.0",
      "955.0",
      "1.0",
      "956.0",
      "1.0",
      "957.0",
      "1.0",
      "958.0",
      "1.0",
      "959.0",
      "1.0",
      "960.0",
      "1.0",
      "961.0",
      "1.0",
      "962.0",
      "1.0",
      "963.0",
      "1.0",
      "964.0",
      "1.0",
      "965.0",
      "1.0",
      "966.0",
      "1.0",
      "967.0",
      "1.0",
      "968.0",
      "1.0",
      "969.0",
      "1.0",
      "970.0",
      "1.0",
      "971.0",
      "1.0",
      "972.0",
      "1.0",
      "973.0",
      "1.0",
      "974.0",
      "1.0",
      "975.0",
      "1.0",
      "976.0",
      "1.0",
      "977.0",
      "1.0",
      "978.0",
      "1.0",
      "979.0",
      "1.0",
      "980.0",
      "1.0",
      "981.0",
      "1.0",
      "982.0",
      "1.0",
      "983.0",
      "1.0",
      "984.0",
      "1.0",
      "985.0",
      "1.0",
      "986.0",
      "1.0",
      "987.0",
      "1.0",
      "988.0",
      "1.0",
      "989.0",
      "1.0",
      "990.0",
      "1.0",
      "991.0",
      "1.0",
      "992.0",
      "1.0",
      "993.0",
      "1.0",
      "994.0",
      "1.0",
      "995.0",
      "1.0",
      "996.0",
      "1.0",
      "997.0",
      "1.0",
      "998.0",
      "1.0",
      "999.0",
      "1.0",
      "1000.0",
      "1.0",
      "1001.0",
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 1\nb = 1\nwhile True:\n    if a % b == 0:\n        a += 1\n        b = 1\n    else:\n        a += 1\n        b += 9\n    if a % b == 0:\n        print(a, b)\n    if a > 1000:\n        break"
  },
  {
    "example_id": 74,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "balls = [2, 4, 8]\nsums = []\nfor ball in balls:\n    for ball2 in balls:\n        if ball2 == ball:\n            continue\n        for ball3 in balls:\n            if ball3 == ball or ball3 == ball2:\n                continue\n            sum = ball + ball2 + ball3\n            if sum not in sums:\n                sums.append(sum)\nprint(sums)"
  },
  {
    "example_id": 75,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import gcd\n\nfib = [0, 1]\nfor i in range(2, 100):\n    fib.append(fib[-1] + fib[-2])\n\nmax_gcd = 0\nfor i in range(len(fib)-1):\n    gcd_val = gcd(fib[i], fib[i+1])\n    if gcd_val > max_gcd:\n        max_gcd = gcd_val\nprint(max_gcd)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "import itertools\nfrom math import gcd\n\ndef is_relatively_prime(a, b):\n    return gcd(a, b) == 1\n\ndef generate_relatively_prime_numbers():\n    for num in itertools.permutations(range(1, 7), 6):\n        if all(is_relatively_prime(num[i], num[i + 1]) for i in range(5)):\n            yield num\n\nnum_relatively_prime_numbers = len(list(generate_relatively_prime_numbers()))\nprint(num_relatively_prime_numbers)"
  },
  {
    "example_id": 77,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a, b = 3, 2\nprint(a-b)"
  },
  {
    "example_id": 78,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.274"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "num = 137\nden = 500\ndecimal = num / den\nprint(decimal)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "for n in range(1, 1000000, 1):\n    if (n % 3 == 1) and (n % 4 == 1) and (n % 5 == 4):\n        print(n)\n        break"
  },
  {
    "example_id": 80,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "679.0"
    ],
    "annotated_answers": [
      "687.0"
    ],
    "solution": "D = 9\nXY = 67\nXYD = XY * 10 + D\nXYD_value = XYD\nprint(XYD_value)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "231.0"
    ],
    "solution": "a = 33\nb = 508\nc = 77\nresidue = (c * pow(a, b-2, b)) % b\nprint(residue)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import math\n\nnum_list = []\nfor num in range(1, 1000000):\n    if len(str(num)) == 4:\n        num_list.append(num)\n\nnum_list.sort()\n\ngcd = 0\nfor i in range(len(num_list)):\n    for j in range(i+1, len(num_list)):\n        gcd = math.gcd(num_list[i], num_list[j])\n        if gcd > 1:\n            break\n    if gcd > 1:\n        break\nprint(gcd)"
  },
  {
    "example_id": 83,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "# 2n has 28 positive divisors\n# 3n has 30 positive divisors\n# 6n has 28 + 30 = 58 positive divisors\nprint(58)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "from math import log\n\ndef find_digits_sum(frac):\n    num, den = frac\n    num = str(num)\n    den = str(den)\n    num_digits = len(num)\n    den_digits = len(den)\n    digits = []\n    for i in range(num_digits):\n        digits.append(int(num[i]))\n    for i in range(den_digits):\n        digits.append(int(den[i]))\n    return sum(digits)\n\nprint(find_digits_sum((4321, 5**7*2**8)))"
  },
  {
    "example_id": 85,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "m = 6\nn = 0\nlargest_divisor = m * n\nprint(largest_divisor)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1909.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy.polys import gcd\n\ndef h(x):\n    return gcd(12*x+7, 5*x+2)\n\nsum_of_values = 0\nfor x in range(1, 1000):\n    sum_of_values += h(x)\nprint(sum_of_values)"
  },
  {
    "example_id": 87,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 30\nb = 50\ngcd = 10\nprint(gcd)"
  },
  {
    "example_id": 88,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 1\nfor i in range(1, 11):\n    if i % 5!= 0:\n        N *= i\nprint(N % 10)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "product = 1\nfor num in range(1, 100):\n    product *= 2**num\nprint(product % 100)"
  },
  {
    "example_id": 90,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "num_multiples = 0\nfor num in range(1, 8+1):\n    if num % 8 == 0:\n        num_multiples += 1\nremainder = 3**num_multiples % 8\nprint(remainder)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "999.0",
      "989.0",
      "979.0",
      "969.0",
      "959.0",
      "949.0",
      "939.0",
      "929.0",
      "919.0",
      "909.0",
      "898.0",
      "888.0",
      "878.0",
      "868.0",
      "858.0",
      "848.0",
      "838.0",
      "828.0",
      "818.0",
      "808.0",
      "797.0",
      "787.0",
      "777.0",
      "767.0",
      "757.0",
      "747.0",
      "737.0",
      "727.0",
      "717.0",
      "707.0",
      "696.0",
      "686.0",
      "676.0",
      "666.0",
      "656.0",
      "646.0",
      "636.0",
      "626.0",
      "616.0",
      "606.0",
      "595.0",
      "585.0",
      "575.0",
      "565.0",
      "555.0",
      "545.0",
      "535.0",
      "525.0",
      "515.0",
      "505.0",
      "494.0",
      "484.0",
      "474.0",
      "464.0",
      "454.0",
      "444.0",
      "434.0",
      "424.0",
      "414.0",
      "404.0",
      "393.0",
      "383.0",
      "373.0",
      "363.0",
      "353.0",
      "343.0",
      "333.0",
      "323.0",
      "313.0",
      "303.0",
      "292.0",
      "282.0",
      "272.0",
      "262.0",
      "252.0",
      "242.0",
      "232.0",
      "222.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "num = 999\nwhile num > 220:\n    if str(num) == str(num)[::-1]:\n        print(num)\n    num -= 1"
  },
  {
    "example_id": 92,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.110883423451916"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "x = 735\na = 2\nroot = x**(1/2)\nprint(root)"
  },
  {
    "example_id": 93,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "remainder = (91145 + 91146 + 91147 + 91148) % 4\nprint(remainder)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.041666666666666664"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "residue = 24**(-1) % (11**2)\nprint(residue)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "a = 3339\nb = 2961\nc = 1491\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\ngcd_ab = gcd(a, b)\ngcd_abc = gcd(gcd_ab, c)\nprint(gcd_abc)"
  },
  {
    "example_id": 96,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import factorial\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\na = factorial(10) + 2\nb = factorial(11) + 8\ngcd_ab = gcd(a, b)\nprint(gcd_ab)"
  },
  {
    "example_id": 97,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "num = 64 + 1\nwhile num % 4!= 0 or num % 8!= 0:\n    num += 1\nprint(num)"
  },
  {
    "example_id": 98,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "units_digit = (19**19+99**99) % 10\nprint(units_digit)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45537549124.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = [0, 1]\nb = [1, 2]\nfor n in range(2, 51):\n    a.append(a[n-1] + b[n-2])\n    b.append(a[n-2] + b[n-1])\nprint(a[50] + b[50])"
  },
  {
    "example_id": 100,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "A = 1\nB = 2\nresult = A * B\nprint(result)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "206.0"
    ],
    "annotated_answers": [
      "103.0"
    ],
    "solution": "leaves = 100\npages = 2 * leaves\nnum_pages = pages + 3\npages_per_7 = num_pages // 7\nnum_pages_7 = 7 * pages_per_7\nnum_pages_7_3 = num_pages_7 + 3\nprint(num_pages_7_3)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "lcm = 144 * 9\ngcd = 144 // 9\nsum = lcm // gcd\nprint(sum)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 10\nwhile n % 10!= 1:\n    n = n + 1\nprint(n)"
  },
  {
    "example_id": 104,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "sum_squares = 0\nfor i in range(1, 10):\n    sum_squares += i**2\nprint(sum_squares % 10)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "max_num_draws = 0\nfor num1 in range(1, 17):\n    for num2 in range(num1, 17):\n        if (num1 * num2) % 4 == 0:\n            max_num_draws = max(max_num_draws, num1 + num2)\nprint(max_num_draws)"
  },
  {
    "example_id": 106,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\na = 2863\nb = 1344\ngcd_ab = gcd(a, b)\nprint(gcd_ab)"
  },
  {
    "example_id": 107,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "91.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 36, 2):\n    if num % 36 == 0:\n        sum += num\nprint(sum)"
  },
  {
    "example_id": 108,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.21645100408832",
      "17"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 20\nfactorial = 1\nfor i in range(1, n):\n    factorial *= i\nprint(factorial)"
  },
  {
    "example_id": 109,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 2003 % 11\nprint(remainder)"
  },
  {
    "example_id": 110,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "57.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "b = 321\nbase_10 = 57\nprint(base_10)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 3\nk = 0\nfor num in range(1, 2**n):\n    if num % 2**n == 3:\n        k += 1\nremainder = k % 13\nprint(remainder)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "270.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "def sum_proper_divisors(num):\n    sum = 1\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            sum += i + num // i\n    return sum\n\nprint(sum_proper_divisors(198))"
  },
  {
    "example_id": 113,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2420.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "base = 44 * 55\nprint(base)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef reverse(n):\n    return int(str(n)[::-1])\n\nfor i in range(18, 100000000):\n    if is_prime(i) and is_prime(reverse(i)):\n        print(i)\n        break"
  },
  {
    "example_id": 115,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0",
      "1.0",
      "25.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 24\naxb = 0\nfor i in range(1, n+1):\n    if n % i == 0:\n        axb += i\n        if axb % n == 0:\n            c = axb // n\n            print(axb, c)\n            break\nprint(axb+1)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "favorite_number = 12\nremainder_5 = favorite_number % 7\nremainder_15 = (favorite_number * 5) % 7\nprint(remainder_15)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "sum_cubes = 0\nfor num in range(1, 22):\n    cube = num ** 3\n    sum_cubes += cube\nunits_digit = sum_cubes % 10\nprint(units_digit)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "k = 1\nwhile (k * 357) % 18!= 0:\n    k += 1\nprint(k)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "from sympy import lcm, gcd\n\ndef lcm_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if lcm(i, 700) == 7000:\n            sum += i\n    return sum\n\nprint(lcm_sum(700))"
  },
  {
    "example_id": 120,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8529.0"
    ],
    "annotated_answers": [
      "695.0"
    ],
    "solution": "num = 852_9\nbase = 10\nprint(num)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "remainder = pow(5, 999999, 7)\nprint(remainder)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "754.0"
    ],
    "annotated_answers": [
      "754.0"
    ],
    "solution": "num_str = '3254'\nnum = int(num_str, 6)\nprint(num)"
  },
  {
    "example_id": 123,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.41025641025641024"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a = 3**-1 % 19\nb = 13**-1 % 19\nprint((a + b) % 19)"
  },
  {
    "example_id": 124,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "from math import ceil\nmultiple = 72 * ceil(16/72)\nprint(multiple)"
  },
  {
    "example_id": 125,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 199, 2):\n    sum += num\nprint(sum % 7)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "102.0"
    ],
    "solution": "m = 24*n + 51\ngcd = math.gcd(2*m, 3*n)\nprint(gcd)"
  },
  {
    "example_id": 127,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "131.0"
    ],
    "annotated_answers": [
      "71.0"
    ],
    "solution": "pages = 12 * 10 + 11\nprint(pages)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "red = 8\ngreen = 13\nwhite = 1\nmin_white = (red + green) // 16\nprint(min_white)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-190.0",
      "-177.0",
      "-164.0",
      "-151.0",
      "-138.0",
      "-125.0",
      "-112.0",
      "-99.0",
      "-86.0",
      "-73.0",
      "-60.0",
      "-47.0",
      "-34.0",
      "-21.0",
      "-8.0",
      "5.0",
      "18.0",
      "31.0",
      "44.0",
      "57.0",
      "70.0",
      "83.0",
      "96.0",
      "109.0",
      "122.0",
      "135.0",
      "148.0",
      "161.0",
      "174.0",
      "187.0",
      "200.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "for num in range(-200, 201):\n    if num % 13 == 5:\n        print(num)"
  },
  {
    "example_id": 130,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "5.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nsol = sympy.solve(30*x - 42, x, modulus=47)\nprint(sol)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "count = 0\nfor n in range(1, 1001):\n    num = n / 1375\n    if num == int(num):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 132,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "6647.0"
    ],
    "solution": "base_10 = 340\nbase_7 = 340 % 7\nprint(base_7)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "116.0"
    ],
    "annotated_answers": [
      "611.0"
    ],
    "solution": "for num in range(100, 999):\n    product = 1\n    for digit in str(num):\n        product *= int(digit)\n    if product == 6:\n        print(num)\n        break"
  },
  {
    "example_id": 134,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "product = 920000 * 8000000\nnum_zeroes = len(str(product)) - len(str(product).rstrip('0'))\nprint(num_zeroes)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "result = pow(1999, 2000, 5)\nprint(result)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-8.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from math import factorial\nfrom sympy.ntheory import isprime\n\nN = 10**8\nsum_of_digits = 9\n\n# The probability that the number is prime is\n# 1/N\nprobability = 1/N\nprint(probability)"
  },
  {
    "example_id": 137,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12007.0"
    ],
    "solution": "num = 441\nbase = 7\nprint(num % base)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = 0\nfor i in range(12):\n    if (x-1) % 12 == (1-x) % 12 and (x-2) % 12 == (2-x) % 12:\n        x += 1\nprint(x)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "num_3digit_numbers = 0\nfor units in range(1, 10):\n    for tens in range(1, 10):\n        if tens % units == 0:\n            for hundreds in range(1, 10):\n                if hundreds % tens == 0:\n                    num = hundreds*100 + tens*10 + units\n                    if num > 999:\n                        num_3digit_numbers += 1\nprint(num_3digit_numbers)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 3740 % 10\nprint(n)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35760.0"
    ],
    "annotated_answers": [
      "41305.0"
    ],
    "solution": "a = 1234_5\nb = 2341_5\nprint(a+b)"
  },
  {
    "example_id": 142,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "N = int(8**0.5)\nprint(N)"
  },
  {
    "example_id": 143,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "503.0"
    ],
    "annotated_answers": [
      "503.0"
    ],
    "solution": "num_congruent = 0\nfor num in range(1, 18632):\n    if num % 37 == 23:\n        num_congruent += 1\nprint(num_congruent)"
  },
  {
    "example_id": 144,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 2\nremainder = (n + 2) * (n + 4) * (n + 6) % 7\nprint(remainder)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "121.0",
      "144.0",
      "169.0",
      "196.0",
      "225.0",
      "256.0",
      "289.0",
      "324.0",
      "361.0",
      "400.0",
      "441.0",
      "484.0",
      "529.0",
      "576.0",
      "625.0",
      "676.0",
      "729.0",
      "784.0",
      "841.0",
      "900.0",
      "961.0",
      "1024.0",
      "1089.0",
      "1156.0",
      "1225.0",
      "1296.0",
      "1369.0",
      "1444.0",
      "1521.0",
      "1600.0",
      "1681.0",
      "1764.0",
      "1849.0",
      "1936.0",
      "2025.0",
      "2116.0",
      "2209.0",
      "2304.0",
      "2401.0",
      "2500.0",
      "2601.0",
      "2704.0",
      "2809.0",
      "2916.0",
      "3025.0",
      "3136.0",
      "3249.0",
      "3364.0",
      "3481.0",
      "3600.0",
      "3721.0",
      "3844.0",
      "3969.0",
      "4096.0",
      "4225.0",
      "4356.0",
      "4489.0",
      "4624.0",
      "4761.0",
      "4900.0",
      "5041.0",
      "5184.0",
      "5329.0",
      "5476.0",
      "5625.0",
      "5776.0",
      "5929.0",
      "6084.0",
      "6241.0",
      "6400.0",
      "6561.0",
      "6724.0",
      "6889.0",
      "7056.0",
      "7225.0",
      "7396.0",
      "7569.0",
      "7744.0",
      "7921.0",
      "8100.0",
      "8281.0",
      "8464.0",
      "8649.0",
      "8836.0",
      "9025.0",
      "9216.0",
      "9409.0",
      "9604.0",
      "9801.0"
    ],
    "annotated_answers": [
      "1681.0"
    ],
    "solution": "num = 100\nwhile num < 10000:\n    if num**.5 == int(num**.5):\n        print(num)\n    num += 1"
  },
  {
    "example_id": 146,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "53.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nprimes = [prime for prime in primes if prime < 100]\nprime_sum = sum(primes)\nprime_square = prime_sum**2\nprime_square_root = int(prime_square**0.5)\nprime_list = []\nfor prime in primes:\n    if prime_square_root % prime == 0:\n        prime_list.append(prime)\nprint(prime_list)"
  },
  {
    "example_id": 147,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "marbles = 239 + 174 + 83\nremoved = marbles // 10\nprint(removed)"
  },
  {
    "example_id": 148,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "x = 2\ny = 5\nresult = (x*y) % 9\nprint(result)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "product = 1\nfor num in range(1, 9):\n    product *= num\nremainder = product % 10\nprint(remainder)"
  },
  {
    "example_id": 150,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13333.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "a = 200\nb = 400\ngcd = 6\nlcm = a*b//gcd\nprint(lcm)"
  },
  {
    "example_id": 151,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2857142857142858",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "remainder = (7j+3) * 3 / 7\nprint(remainder)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1234.0"
    ],
    "annotated_answers": [
      "110102.0"
    ],
    "solution": "ans = 1 + 11 + 111 + 1111\nprint(ans)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "units_digit = 7**53 % 10\nprint(units_digit)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "expr = ((972 - 268) * (973 - 267) * (974 - 266)) + ((968 - 272) * (967 - 273) * (966 - 274)) - (999 - 222)**3\nunits = expr % 10\nprint(units)"
  },
  {
    "example_id": 155,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6049.5"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "num_rows_A = 105\nnum_rows_B = 105 + 6\nnum_band_members_B = num_rows_B * (num_rows_B - 2) / 2\nprint(num_band_members_B)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2016.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sum = 0\nfor a in range(4):\n    for b in range(4):\n        for c in range(4):\n            num = a * 4**2 + b * 4**1 + c * 4**0\n            if num < 100:\n                sum += num\nprint(sum)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17736.0"
    ],
    "annotated_answers": [
      "5636.0"
    ],
    "solution": "sum_of_least_greatest_multiples = 0\nfor num in range(1000, 9999):\n    if num % 4 == 0:\n        if '1' in str(num) and '2' in str(num) and '3' in str(num) and '4' in str(num):\n            sum_of_least_greatest_multiples += num\nprint(sum_of_least_greatest_multiples)"
  },
  {
    "example_id": 158,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "b = 35\nfor i in range(47):\n    if (b * i) % 47 == 1:\n        print(i)"
  },
  {
    "example_id": 159,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 24\nfor num in range(2, n + 1):\n    if pow(2, n) == pow(num, num):\n        print(num)"
  },
  {
    "example_id": 160,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.875"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "num = (3**-1 + 5**-1)**-1 % 31\nprint(num)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000730880.0"
    ],
    "annotated_answers": [
      "1155.0"
    ],
    "solution": "ab = 1234\nbc = 2345\ncd = 3456\nabcd = ab * bc * cd\nprint(abcd)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.214465011907717"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "k = 240**(1/3)\nprint(k)"
  },
  {
    "example_id": 163,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10680.0"
    ],
    "annotated_answers": [
      "-2213.0"
    ],
    "solution": "n1 = 121_3\nn2 = 2122_3\nn3 = 1200_3\nn4 = 2111_3\nprint(n1 + n2 - n3 - n4)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# brute force\n# O(n^2)\n# n = number of integers\n# O(n^2)\n\nN = 84\nmin_sum = 0\nfor num_integers in range(2, N):\n    for i in range(1, N):\n        integers = list(range(1, i+1))\n        if sum(integers) == N:\n            if len(integers) == num_integers:\n                min_sum = sum(integers)\n                break\nprint(min_sum)\n\n# math\n# O(n log n)\n# n = number of integers\n# O(n log n)\n\nN = 84\nmin_sum = 0\nfor i in range(2, N+1):\n    if (N % i) == 0:\n        j = N // i\n        if (j * (j+1)) // 2 == N:\n            min_sum = i + j\n            break\nprint(min_sum)"
  },
  {
    "example_id": 165,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3525"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "frac = 141/400\nlast_digit = frac % 10\nprint(last_digit)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2016.0"
    ],
    "solution": "N = 2010\nsum_of_nice_numbers = 0\nfor num in range(N, N+10):\n    num_divisors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            num_divisors += 1\n    if num_divisors == 4:\n        sum_of_nice_numbers += num\nprint(sum_of_nice_numbers)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def divisors(n):\n    return [num for num in range(1, n + 1) if num % n == 0]\n\ndef bouncy_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    divisors_of_n = divisors(n)\n    divisors_of_f_of_n = divisors(f(n))\n    return len(divisors_of_n)!= len(divisors_of_f_of_n)\n\ndef f(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    divisors = divisors(n)\n    return sum(divisors)\n\ndef smallest_bouncy_prime():\n    n = 2\n    while True:\n        if bouncy_prime(n):\n            return n\n        n += 1\n\nprint(smallest_bouncy_prime())"
  },
  {
    "example_id": 168,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "N = 13\nfor num in range(1, N):\n    if (num * num + 1) % N!= 0:\n        print(num)\n        break"
  },
  {
    "example_id": 169,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# m must be odd\nm = 9\nfor i in range(1, m):\n    if i % 3 == 0:\n        continue\n    if i % 9 == 1:\n        print(i)"
  },
  {
    "example_id": 170,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "333.0"
    ],
    "annotated_answers": [
      "-36.0"
    ],
    "solution": "base_4 = 333\nbase_5 = 344\n\nbase_10 = base_4 % base_5\n\nprint(base_10)"
  },
  {
    "example_id": 171,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "num_bags = 3\nnum_pencils = 100\nnum_pencils_per_bag = num_pencils // num_bags\npencils_left_over = num_pencils % num_bags\nprint(pencils_left_over)"
  },
  {
    "example_id": 172,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 10\nolder_brother = 10\nyounger_brother = 0\nwhile older_brother > 0:\n    if older_brother >= x:\n        older_brother -= x\n        younger_brother += x\n    else:\n        younger_brother += older_brother\n        older_brother = 0\nprint(younger_brother)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 0\nwhile k < 6:\n    if 3 * k % 6 == 0:\n        k += 1\n    else:\n        print(k)\n        break"
  },
  {
    "example_id": 174,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "809.0"
    ],
    "annotated_answers": [
      "5067.0"
    ],
    "solution": "a = 3210\nb = 2401\nprint(a % b)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "t = 1\nwhile True:\n    if (19*t + 5*t) % t == 0:\n        print(t)\n        break\n    t += 1"
  },
  {
    "example_id": 176,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "prime_factors = [2, 3, 5, 7, 11, 13, 17, 19, 23]\nprime_exponents = [23, 19, 17, 13, 11, 7, 5, 3, 2]\nprime_with_largest_exponent = prime_factors[prime_exponents.index(max(prime_exponents))]\nprint(prime_with_largest_exponent)"
  },
  {
    "example_id": 177,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "57.0"
    ],
    "annotated_answers": [
      "57.0"
    ],
    "solution": "n = 398\nfor num in range(0, n):\n    if (num * 7) % 398 == 1:\n        print(num)\n        break"
  },
  {
    "example_id": 178,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "time_A = 6 + 11 * 4\ntime_B = 7 + 7 * 4\ntime_AB = min(time_A, time_B)\nprint(time_AB)"
  },
  {
    "example_id": 179,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0"
    ],
    "annotated_answers": [
      "1016.0"
    ],
    "solution": "import sympy\nr = sympy.var('r')\ncongruence = r**2 + 4*r + 4 - (r**2 + 2*r + 1)\nsol = sympy.solve(congruence, r)\nprint(sol)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "n = 9\nnum_divisors = 0\nfor i in range(1, n+1):\n    if n % i == 0:\n        num_divisors += 1\nprint(num_divisors)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "product = 0\nfor n in range(1, 50, 2):\n    product += n\nprint(product % 10)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-13.0"
    ],
    "annotated_answers": [
      "1076.0"
    ],
    "solution": "a = 62\nb = 75\nn = 1098\nprint(a-b)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 2\nb = 3\nm = 7\n\nL = pow(a+b, -1, m)\nR = pow(a, -1, m) + pow(b, -1, m)\n\nprint(L - R)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "remainder = 729 % 15\nprint(remainder)"
  },
  {
    "example_id": 185,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "product = 288\ngreater = product / 2\nprint(greater)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "import sympy\ngcf = sympy.gcd(6432, 132)\nresult = gcf + 11\nprint(result)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "226.0"
    ],
    "solution": "factors = []\nfor num in range(1, 100):\n    if num % 2 == 0:\n        continue\n    if num % 144 == 0:\n        factors.append(num)\nsum_of_factors = sum(factors)\nprint(sum_of_factors)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "0.8"
    ],
    "solution": "n = 0\nwhile True:\n    n += 0.5\n    if n % 1 == 0:\n        break\nprint(n)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def sum_powers(n):\n    return sum(2**i for i in range(n))\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef gcd_consecutive_terms(n):\n    return gcd(sum_powers(n), sum_powers(n+1))\n\nprint(gcd_consecutive_terms(10))"
  },
  {
    "example_id": 190,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "d = 222 % 7\nprint(d)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1981.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "M = 990\nN = 991\nsum = M + N\nprint(sum)"
  },
  {
    "example_id": 192,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "num = 1/37\nn = 291\ndigit = num**n\nprint(digit)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = 54 % 6\nprint(remainder)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "num_base_3 = '101'\nnum_base_4 = '101'\nnum_base_10 = int(num_base_3, 3) * int(num_base_4, 4)\nprint(num_base_10)"
  },
  {
    "example_id": 195,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "a = 1\nb = 1\nfor num in range(3, 2010, 2):\n    if num % 2!= 0:\n        if str(1/num)[2:] == str(1/num)[:-2]:\n            a *= num\n            b *= num - 1\nprint(a + b)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "N = 5913\nsum = 0\nfor digit in str(N):\n    sum += int(digit)\nprint(sum)"
  },
  {
    "example_id": 197,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "208.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "import math\n\ndef get_area(side1, side2):\n    area = side1 * side2\n    return area\n\ndef get_new_sides(side1, side2):\n    increase_percent = 30\n    decrease_percent = 20\n    increase_side1 = side1 + (side1 * increase_percent / 100)\n    decrease_side2 = side2 - (side2 * decrease_percent / 100)\n    return int(increase_side1), int(decrease_side2)\n\ndef main():\n    side1 = 10\n    side2 = 20\n    new_sides = get_new_sides(side1, side2)\n    new_side1 = new_sides[0]\n    new_side2 = new_sides[1]\n    area = get_area(new_side1, new_side2)\n    print(area)\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 198,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "2220.0"
    ],
    "solution": "for num in range(30, 100000000, 30):\n    if str(num)[2:] == str(num)[2:][::-1]:\n        print(num)\n        break"
  },
  {
    "example_id": 199,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "728.0"
    ],
    "annotated_answers": [
      "119.0"
    ],
    "solution": "sum = 0\nfor num in range(10, 100):\n    if num % 7 == 0:\n        sum += num\nprint(sum)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "decimal = 54317 / 80000\nprint(len(str(decimal).split('.')[1]))"
  },
  {
    "example_id": 201,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "num = 10\nwhile num < 100:\n    digits = [int(digit) for digit in str(num)]\n    if num == sum(digits) * 2:\n        print(num)\n    num += 1"
  },
  {
    "example_id": 202,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 18 - 11213141 % 18\nprint(n)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "number = 17**13 - 17\nunits = number % 10\nprint(units)"
  },
  {
    "example_id": 204,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\ndef find_digit(n, base):\n    \"\"\"\n    Finds the nth digit in a base-b number.\n\n    Parameters\n    ----------\n    n : int\n        The digit to find.\n    base : int\n        The base of the number.\n\n    Returns\n    -------\n    int\n        The nth digit in the number.\n\n    \"\"\"\n    i = 1\n    while n > i:\n        i *= base\n        n -= 1\n    return int(math.floor(19 % i))\n\nprint(find_digit(38, 10))"
  },
  {
    "example_id": 205,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "n = 34\nprint(n)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nproduct = 1\nfor prime in prime_numbers:\n    product *= prime\nprint(product % 10)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "product = 17 * 18\nresidue = product % 4\nprint(residue)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2240.0"
    ],
    "annotated_answers": [
      "319.0"
    ],
    "solution": "def convert_to_base_10(num, base):\n    num_str = str(num)\n    num_int = 0\n    for i, digit in enumerate(num_str):\n        num_int += int(digit) * base**(len(num_str) - i - 1)\n    return num_int\n\nnum = 634_7\nbase = 7\nprint(convert_to_base_10(num, base))"
  },
  {
    "example_id": 209,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "n_sum = 0\nfor n in range(1, 100):\n    if n**2 in [2400, 4800]:\n        n_sum += n\nprint(n_sum)"
  },
  {
    "example_id": 210,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "num = 196\ndivisors = [1]\nfor num in range(2, num, 1):\n    if num % 196 == 0:\n        divisors.append(num)\nnum_divisors = len(divisors)\nprint(num_divisors)"
  },
  {
    "example_id": 211,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 16\nb = 21\nn = 0\nwhile n <= 36:\n    if (a - b) % 37 == n:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 212,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1092.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "from math import sqrt\n\ndef prime_divisors(num):\n    divisors = []\n    for i in range(1, int(sqrt(num)) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            if i*i!= num:\n                divisors.append(num // i)\n    return divisors\n\ndef distinct_prime_divisors(num):\n    divisors = prime_divisors(num)\n    return list(set(divisors))\n\ndef sum_distinct_prime_divisors(num):\n    return sum(distinct_prime_divisors(num))\n\nA = sum_distinct_prime_divisors(500)\nprint(A)"
  },
  {
    "example_id": 213,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6561.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "num = 30\npower = 4\nnum_divisors = 1\nfor i in range(1, num + 1):\n    if num % i == 0:\n        num_divisors += 1\nprint(num_divisors**power)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "max_distinct_factors = 0\nfor num in range(1, 20):\n    factors = set()\n    for i in range(1, num):\n        if num % i == 0:\n            factors.add(i)\n    max_distinct_factors = max(max_distinct_factors, len(factors))\nprint(max_distinct_factors)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0",
      "65.0",
      "98.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 0\nwhile x <= 100:\n    if 64*x % 66 == 2:\n        print(x)\n    x += 1"
  },
  {
    "example_id": 216,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-56.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "A = 0\nfor num in range(16):\n    if pow(num, 2, 16) == 1:\n        A += num\nB = 0\nfor num in range(16):\n    if pow(num, 2, 16)!= 1:\n        B += num\nprint(A - B)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96904780.0"
    ],
    "annotated_answers": [
      "2145.0"
    ],
    "solution": "base6 = 2345\nbase5 = 41324\nbase10 = base6 * base5\nprint(base10)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "father_age = 1222\nfather_age_ten = 3 * 3 * 3 + 2 * 3 + 2\nprint(father_age_ten)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "num_divisors = 0\nfor divisor in range(1, 7):\n    if 1452 % divisor == 0:\n        num_divisors += 1\nprint(num_divisors)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "product = 4**5 * 5**13\nnum_digits = len(str(product))\nprint(num_digits)"
  },
  {
    "example_id": 221,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "expression = 2005**2 + 2005**0 + 2005**0 + 2005**5\nprint(expression % 100)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "465.0"
    ],
    "annotated_answers": [
      "248.0"
    ],
    "solution": "N = 3720\ngcd = 8\nnum_1 = 120\nnum_2 = N//gcd\nprint(num_2)"
  },
  {
    "example_id": 223,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from math import log\n\ndef convert_to_base(num, base):\n    digits = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    if num == 0:\n        return '0'\n    is_negative = num < 0\n    abs_num = abs(num)\n    res = ''\n    while abs_num > 0:\n        res = digits[abs_num % base] + res\n        abs_num //= base\n    if is_negative:\n        res = '-' + res\n    return res\n\nnum = 100\nbase = 64\nprint(convert_to_base(num, base))"
  },
  {
    "example_id": 224,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "n = 2\nresidue = 15\nmod = 47\nprint((residue - n*mod) % mod)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15333.0"
    ],
    "annotated_answers": [
      "6152.0"
    ],
    "solution": "n_base_10 = 0\nfor d in range(10):\n    n = 1 * d**4 * 1\n    n_base_10 += n\nprint(n_base_10)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 1\nb = 2\nremainder = a**2 + b**2 % 3\nprint(remainder)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "21022.0"
    ],
    "solution": "a = 2\nlcm = 10508\ndenominator = lcm // (a + 1) * (a - 5)\nnumerator = a**2 - 4*a + 1\nprint(numerator // denominator)"
  },
  {
    "example_id": 228,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "primes = [11, 23, 37, 59]\nsum_primes = sum(primes)\nprint(sum_primes)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "P = 9\nb = P + 1\nprint(b)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "14.8"
    ],
    "solution": "ages = [13, 14, 15, 16, 17, 18, 19]\nages_product = 705600\nages_mean = sum(ages) / len(ages)\nprint(ages_mean)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 10, 2):\n    sum += num\n    if sum % num == 0:\n        print(num)\n        break"
  },
  {
    "example_id": 232,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "p = 1\nwhile True:\n    x = pow(8, p-1, p)\n    if x == 1:\n        p += 1\n    else:\n        break\nprint(p)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "def get_num_in_base_10(num, base):\n    return int(num, base)\n\nnum_in_base_10 = get_num_in_base_10(\"62\", 7) + get_num_in_base_10(\"34\", 5)\nprint(num_in_base_10)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 7\ngcd = 1\nprint(gcd)"
  },
  {
    "example_id": 235,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 1\nwhile True:\n    if (617*n) % 18 == 943*n % 18:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "from math import gcd\n\na = 6**210\nb = 15**4\n\nprint(gcd(a, b))"
  },
  {
    "example_id": 237,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12012.0"
    ],
    "annotated_answers": [
      "100100.0"
    ],
    "solution": "b = 2\nnum = 11011\nresult = (num * (b - 1)) + 1001\nprint(result)"
  },
  {
    "example_id": 238,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "units_digit = 7**7 % 10\nprint(units_digit)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "year = 0\nwhile year % 12!= 0:\n    year += 1\nprint(year)"
  },
  {
    "example_id": 240,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for t in range(1, 23, 2):\n    if (t+2) % t == 0:\n        print(t)\n        break"
  },
  {
    "example_id": 241,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4435.0"
    ],
    "solution": "print(123 % 5)"
  },
  {
    "example_id": 242,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.333333333333336"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "def get_digits(num, base):\n    digits = []\n    while num > 0:\n        digits.append(num % base)\n        num //= base\n    digits.reverse()\n    return digits\n\ndef get_value(digits, base):\n    value = 0\n    for digit in digits:\n        value *= base\n        value += digit\n    return value\n\ndef get_average(digits, base):\n    value = get_value(digits, base)\n    num_digits = len(digits)\n    return value / num_digits\n\ndef get_avg(num, base):\n    digits = get_digits(num, base)\n    avg = get_average(digits, base)\n    return avg\n\nnum = 100\nbase = 5\navg = get_avg(num, base)\nprint(avg)"
  },
  {
    "example_id": 243,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(71 % 3)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 0\nwhile n < 6:\n    if n % 6 == 12345:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "num_digits_2 = len(bin(87)) - 2\nnum_digits_3 = len(oct(87)) - 2\nprint(num_digits_2 - num_digits_3)"
  },
  {
    "example_id": 246,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3255.0"
    ],
    "annotated_answers": [
      "3255.0"
    ],
    "solution": "base5 = '101010'\nbase10 = int(base5, 5)\nprint(base10)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "num = 12 * 15\nprint(num)"
  },
  {
    "example_id": 248,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nwhile a <= 23:\n    if a % 24 == 1:\n        print(a)\n    a += 1"
  },
  {
    "example_id": 249,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "num_digits = 10\nprint(num_digits)"
  },
  {
    "example_id": 250,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "0.0",
      "2.0",
      "0.0",
      "4.0",
      "0.0",
      "8.0",
      "0.0",
      "9.0",
      "1.0",
      "0.0",
      "1.0",
      "7.0",
      "2.0",
      "0.0",
      "2.0",
      "7.0",
      "4.0",
      "0.0",
      "4.0",
      "7.0",
      "7.0",
      "1.0",
      "7.0",
      "2.0",
      "7.0",
      "4.0",
      "7.0",
      "8.0",
      "7.0",
      "9.0",
      "8.0",
      "0.0",
      "8.0",
      "7.0",
      "9.0",
      "0.0",
      "9.0",
      "7.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "A = 0\nB = 0\nwhile A < 10:\n    while B < 10:\n        if (A**3 + B**3) % 7 == 666 % 7:\n            print((A, B))\n        B += 1\n    A += 1\n    B = 0"
  },
  {
    "example_id": 251,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 4\ny = 7\nremainder = (x + 1)**2 * (y + 5)**3 % 19\nprint(remainder)"
  },
  {
    "example_id": 252,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "last_friday = 28\nif last_friday == 28:\n    print(29)\nelse:\n    print(28)"
  },
  {
    "example_id": 253,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor num in range(15, 86, 20):\n    if num % 20 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 254,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "base_10 = 2**8 - 1\nprint(base_10)"
  },
  {
    "example_id": 255,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "362880.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "factors = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlcm = 1\nfor factor in factors:\n    lcm *= factor\n    while lcm % factor!= 0:\n        lcm += 1\nprint(lcm)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "n = 1\nwhile 80325 % n!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 257,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11331.0"
    ],
    "annotated_answers": [
      "1030.0"
    ],
    "solution": "a = 1331\nb = 10**len(str(a))\nprint(a+b)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "num_divisible_by_3 = 0\nfor num1 in range(0, 10):\n    for num2 in range(num1+1, 10):\n        if num1 % 3 == 0 or num2 % 3 == 0:\n            if (num1 * 10 + num2) % 3 == 0:\n                num_divisible_by_3 += 1\nprint(num_divisible_by_3)"
  },
  {
    "example_id": 259,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "nums = [num for num in range(100) if num % 3 == 0 and num % 4 == 0 and num % 5 == 0]\nprint(len(nums))"
  },
  {
    "example_id": 260,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "i = 1\nj = 1\nremainder = i * j % 6\nprint(remainder)"
  },
  {
    "example_id": 261,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "tens_digit = int(str(5**2005)[-2])\nprint(tens_digit)"
  },
  {
    "example_id": 262,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "AB = 912673\nA = int(str(AB)[0])\nB = int(str(AB)[1])\nprint(A + B)"
  },
  {
    "example_id": 263,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4096.0"
    ],
    "solution": "import math\n\ndef is_cube(n):\n    return n ** (1/3) == math.floor(n ** (1/3))\n\ndef is_fourth_power(n):\n    return n ** (1/4) == math.floor(n ** (1/4))\n\ndef is_cube_and_fourth_power(n):\n    return is_cube(n) and is_fourth_power(n)\n\nn = 1\nwhile not is_cube_and_fourth_power(n):\n    n += 1\n\nprint(n)"
  },
  {
    "example_id": 264,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = sum(range(1, 11)) % 9\nprint(remainder)"
  },
  {
    "example_id": 265,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "235.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nprime_sum = 0\nfor prime in primes:\n    prime_sum += prime\n    if prime_sum % 5 == 0:\n        print(prime_sum)\n        break"
  },
  {
    "example_id": 266,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(194 % 11)"
  },
  {
    "example_id": 267,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "factors = [2, 4, 6, 8, 10, 12]\nperfect_squares = [1, 4, 9, 16, 25, 36]\ncount = 0\nfor factor in factors:\n    for perfect_square in perfect_squares:\n        if factor == perfect_square:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "12.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = 12\ny = 12\nwhile x > 0 and y > 0:\n    if x * y == 144:\n        print((x, y))\n    x -= 1\n    y -= 1"
  },
  {
    "example_id": 269,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "9.0",
      "6.0",
      "6.0",
      "9.0",
      "3.0",
      "12.0",
      "12.0",
      "15.0",
      "9.0",
      "18.0",
      "6.0",
      "21.0",
      "3.0",
      "24.0",
      "12.0",
      "27.0",
      "9.0",
      "30.0",
      "6.0",
      "33.0",
      "3.0",
      "36.0",
      "12.0",
      "39.0",
      "9.0",
      "42.0",
      "6.0",
      "45.0",
      "3.0",
      "48.0",
      "12.0",
      "51.0",
      "9.0",
      "54.0",
      "6.0",
      "57.0",
      "3.0",
      "60.0",
      "12.0",
      "63.0",
      "9.0",
      "66.0",
      "6.0",
      "69.0",
      "3.0",
      "72.0",
      "12.0",
      "75.0",
      "9.0",
      "78.0",
      "6.0",
      "81.0",
      "3.0",
      "84.0",
      "12.0",
      "87.0",
      "9.0",
      "90.0",
      "6.0",
      "93.0",
      "3.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "for i in range(1, 100):\n    for j in range(1, 100):\n        if (i * j) % 3 == 0:\n            if (i + j) > 99:\n                continue\n            if (i + j) % 12 == 0:\n                print(i, j)\n                break"
  },
  {
    "example_id": 270,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "4.0",
      "4.0",
      "5.0",
      "5.0",
      "6.0",
      "6.0",
      "7.0",
      "7.0",
      "8.0",
      "8.0",
      "9.0",
      "9.0",
      "10.0",
      "10.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# tens digit\nfor tens in range(0, 11):\n    # hundreds digit\n    for hundreds in range(0, 11):\n        # check if divisible by 11\n        if (tens * 10 + hundreds) % 11 == 0:\n            print(tens, hundreds)"
  },
  {
    "example_id": 271,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "108.0",
      "2.0",
      "54.0",
      "3.0",
      "36.0",
      "4.0",
      "27.0",
      "6.0",
      "18.0",
      "9.0",
      "12.0",
      "12.0",
      "9.0",
      "18.0",
      "6.0",
      "27.0",
      "4.0",
      "36.0",
      "3.0",
      "54.0",
      "2.0",
      "108.0",
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "gcd = 2\nlcm = 108\nfor m in range(1, lcm + 1):\n    for n in range(1, lcm + 1):\n        if m * n == lcm and (m % 2 == 0 or n % 2 == 0):\n            print((m, n))"
  },
  {
    "example_id": 272,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "N = 13*7 + 17*3\nremainder = N % 36\nprint(remainder)"
  },
  {
    "example_id": 273,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "x = 196\ny = int(x ** 0.5)\nfactors = []\nfor i in range(1, y + 1):\n    if x % i == 0:\n        factors.append(i)\nsum_of_factors = sum(factors)\nprint(sum_of_factors)"
  },
  {
    "example_id": 274,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "base = 24\nexponent = 50\nremainder = pow(base, exponent, 13) - pow(15, exponent, 13)\nprint(remainder)"
  },
  {
    "example_id": 275,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def is_relatively_prime(a, b):\n    if a % b == 0:\n        return False\n    if b % a == 0:\n        return False\n    return True\n\ndef find_smallest_k():\n    k = 1\n    while True:\n        for n in range(1, 1000):\n            if not is_relatively_prime(6*n+k, 6*n+3):\n                return k\n            if not is_relatively_prime(6*n+k, 6*n+2):\n                return k\n            if not is_relatively_prime(6*n+k, 6*n+1):\n                return k\n        k += 1\n\nprint(find_smallest_k())"
  },
  {
    "example_id": 276,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(1529 % 6)"
  },
  {
    "example_id": 277,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "def get_factors(num):\n    factors = []\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.append(i)\n            factors.append(num // i)\n    return sorted(factors)\n\n\ndef box(num):\n    factors = get_factors(num)\n    product = 1\n    for i in range(len(factors)):\n        if factors[i] == num:\n            break\n        product *= factors[i]\n    return product\n\n\nprint(box(12))"
  },
  {
    "example_id": 278,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "n = 1\nwhile True:\n    if (171 - 80) % n == 0 and (468 - 13) % n == 0:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 279,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "num = '1230'\nbase = 4\ndecimal = int(num, base)\nprint(decimal)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "990.0"
    ],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "for i in range(1000, 0, -1):\n    if i % 11 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 281,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "556.0"
    ],
    "solution": "a = 10\nb = 97\nprint(a + b)"
  },
  {
    "example_id": 282,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "pages_with_sum_4 = 0\nfor page_num in range(1, 1000):\n    digits = [int(digit) for digit in str(page_num)]\n    if sum(digits) == 4:\n        pages_with_sum_4 += 1\nprint(pages_with_sum_4)"
  },
  {
    "example_id": 283,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 7\nn = 0\nfor i in range(len(str(x))):\n    if i % 2 == 1:\n        n += int(str(x)[i])\nn *= 3\nfor i in range(len(str(x))):\n    if i % 2 == 0:\n        n += int(str(x)[i])\nn %= 10\nprint(n)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "units_digit = 2**2010 % 10\nprint(units_digit)"
  },
  {
    "example_id": 285,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "for age in range(1, 75):\n    if age % 2 == 1 and age % 3 == 1 and age % 4 == 1 and age % 6 == 1 and age % 7 == 0:\n        print(age)"
  },
  {
    "example_id": 286,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 1\nwhile True:\n    num_terminating_fractions = 0\n    for k in range(1, n+1):\n        fraction = 1/k\n        if fraction % 1 == 0:\n            num_terminating_fractions += 1\n    if num_terminating_fractions == n/2:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 287,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 15\na = pow(2, n, 17)\nprint((a**2 - 2) % 17)"
  },
  {
    "example_id": 288,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "base_ten = 355\nbase_six = base_ten % 6\nprint(base_six)"
  },
  {
    "example_id": 289,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "base = 4\nnum = 120301232\nremainder = num % 8\nprint(remainder)"
  },
  {
    "example_id": 290,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "668.0"
    ],
    "annotated_answers": [
      "668.0"
    ],
    "solution": "from sympy import mod_inverse\nx = mod_inverse(100, 997)\nprint(x)"
  },
  {
    "example_id": 291,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5304.0"
    ],
    "annotated_answers": [
      "528.0"
    ],
    "solution": "answer = 68 * 78\nprint(answer)"
  },
  {
    "example_id": 292,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "7.0",
      "9.0",
      "9.0",
      "27.0",
      "2.0",
      "8.0",
      "8.0",
      "8.0",
      "26.0",
      "3.0",
      "6.0",
      "7.0",
      "9.0",
      "25.0",
      "3.0",
      "7.0",
      "8.0",
      "8.0",
      "26.0",
      "3.0",
      "8.0",
      "9.0",
      "9.0",
      "29.0",
      "4.0",
      "4.0",
      "8.0",
      "8.0",
      "24.0",
      "4.0",
      "6.0",
      "7.0",
      "8.0",
      "25.0",
      "4.0",
      "6.0",
      "9.0",
      "9.0",
      "28.0",
      "4.0",
      "7.0",
      "7.0",
      "9.0",
      "27.0",
      "4.0",
      "8.0",
      "8.0",
      "9.0",
      "29.0",
      "6.0",
      "6.0",
      "6.0",
      "9.0",
      "27.0",
      "6.0",
      "6.0",
      "7.0",
      "7.0",
      "26.0",
      "6.0",
      "6.0",
      "8.0",
      "8.0",
      "28.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "30.0",
      "6.0",
      "9.0",
      "9.0",
      "9.0",
      "33.0",
      "7.0",
      "7.0",
      "7.0",
      "8.0",
      "29.0",
      "7.0",
      "8.0",
      "8.0",
      "8.0",
      "31.0",
      "8.0",
      "8.0",
      "9.0",
      "9.0",
      "34.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "for num_1 in range(1, 10):\n    for num_2 in range(num_1, 10):\n        for num_3 in range(num_2, 10):\n            for num_4 in range(num_3, 10):\n                product = num_1 * num_2 * num_3 * num_4\n                if product % 10 == 4 and product > 1000:\n                    print(num_1, num_2, num_3, num_4)\n                    print(num_1 + num_2 + num_3 + num_4)\n                    break"
  },
  {
    "example_id": 293,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "divisors = [1, 2, 4, 5, 10, 11, 25, 26]\neven_divisors = [2, 4, 10, 26]\nprint(len(even_divisors))"
  },
  {
    "example_id": 294,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "801.0"
    ],
    "annotated_answers": [
      "801.0"
    ],
    "solution": "for num in range(600, 900, 3):\n    if num % 89 == 0:\n        print(num)"
  },
  {
    "example_id": 295,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0",
      "1720.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 40\ngcd = x+3\nlcm = x*(x+3)\nprint(gcd, lcm)"
  },
  {
    "example_id": 296,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "num_base_10 = 0\nfor num in range(1000):\n    base_3_rep = str(bin(num)[2:])\n    base_6_rep = str(oct(num)[1:])\n    if len(base_3_rep) == 4 and len(base_6_rep) == 2:\n        num_base_10 += 1\nprint(num_base_10)"
  },
  {
    "example_id": 297,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "sum = 0\nfor x in range(1, 200):\n    if 67 % (2 * x - 23) == 0:\n        sum += x\nprint(sum)"
  },
  {
    "example_id": 298,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "225.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "for num in range(225, 100, -1):\n    if num % 9 == 0 and num**0.5 == int(num**0.5):\n        print(num)\n        break"
  },
  {
    "example_id": 299,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "num = 3\nsum_of_powers = 0\nfor power in range(1, 2010, 2):\n    sum_of_powers += num**power\nprint(sum_of_powers % 10)"
  },
  {
    "example_id": 300,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import factorial\nN = 7\nremainder = factorial(N) % 23\nprint(remainder)"
  },
  {
    "example_id": 301,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.784052474507475",
      "17"
    ],
    "annotated_answers": [
      "1241.0"
    ],
    "solution": "sum = 0\nfor num in range(100, 1000):\n    cube = num**3\n    if num % 100 == 0:\n        square = num**2\n        cube = square**3\n    sum += cube\nprint(sum)"
  },
  {
    "example_id": 302,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "a = 2**306 * 3**340\nfor n in range(1, 100000):\n    if a**(1/n) == int(a**(1/n)):\n        print(n)\n        break"
  },
  {
    "example_id": 303,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num_factors = 0\nfor factor in range(1, 4001, 2):\n    if factor % 100 == 0:\n        num_factors += 1\nprint(num_factors)"
  },
  {
    "example_id": 304,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 19\nb = 3\nremainder = (a+10)*(b+10) % 20\nprint(remainder)"
  },
  {
    "example_id": 305,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for N in range(0, 1000):\n    num = 7 + (30 * N)\n    if not num % 2 == 0 and not num % 3 == 0 and not num % 5 == 0 and not num % 7 == 0:\n        print(N)\n        break"
  },
  {
    "example_id": 306,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "16592.0"
    ],
    "solution": "n = 0\nsum = 0\nwhile n < 10000:\n    n += 2005\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    if len(factors) == 21:\n        sum += n\nprint(sum)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "sum = 0\nfor num in range(0, 50, 3):\n    sum += num % 10\nprint(sum)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "E = 5\nprint(E)"
  },
  {
    "example_id": 309,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "109.0"
    ],
    "solution": "green_w = 476\ngreen_a = 104\ngreen_h = 281\nred_w = 32\nred_a = 16\nred_h = 80\ntotal_green = green_w + green_a + green_h\ntotal_red = red_w + red_a + red_h\ngreen_left_over = total_green % 94\nprint(green_left_over)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nodds = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\nintersection = [prime for prime in primes if prime in odds]\nprint(len(intersection))"
  },
  {
    "example_id": 311,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num = 527\nsum_digits = sum([int(digit) for digit in str(num)])\nprint(sum_digits)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.0",
      "32.0"
    ],
    "annotated_answers": [
      "122.0"
    ],
    "solution": "for num in range(1, 100, 1):\n    if num % 4 == 3 and num % 3 == 1 and num % 5 == 1:\n        print(num)\n        print(num+1)\n        break"
  },
  {
    "example_id": 313,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "X = 2 * (3 * (10 ** (len(str(5 * (5 + 4))) - 1))) + 2 * (5 * (10 ** (len(str(5 * (5 + 4))) - 1)))\nprint(X)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 3\nn_divisors = 27\nn_prime_divisors = 2\nn_squared_divisors = 27\nn_squared_prime_divisors = 2\nn_squared_is_prime = True\nfor num in range(3, n, 2):\n    if n % num == 0:\n        n_squared_is_prime = False\n        break\nif n_squared_is_prime:\n    n_squared_prime_divisors += 1\nn_squared_divisors = n_squared_prime_divisors * (n_squared_prime_divisors + 1) // 2\nn_divisors = n_squared_divisors\nprint(n_divisors)"
  },
  {
    "example_id": 315,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 7\nprint(n)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy.utilities.iterables import multiset_permutations\nfrom sympy.ntheory.primetest import isprime\n\ndef has_sum(sequence, target):\n    return sum(sequence) == target\n\ndef is_prime(num):\n    return isprime(num)\n\ndef increasing(sequence):\n    return all(sequence[i] < sequence[i + 1] for i in range(len(sequence) - 1))\n\ndef distinct(sequence):\n    return len(set(sequence)) == len(sequence)\n\ndef find_solutions(target, max_prime):\n    for sequence in multiset_permutations(range(1, max_prime + 1), 3):\n        if has_sum(sequence, target) and is_prime(sequence[0]) and is_prime(sequence[1]) and is_prime(sequence[2]):\n            if increasing(sequence) and distinct(sequence):\n                yield sequence\n\nnum_solutions = 0\nfor sequence in find_solutions(20, 20):\n    num_solutions += 1\nprint(num_solutions)"
  },
  {
    "example_id": 317,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "prime_numbers = [13, 17, 31, 37, 71, 73, 97]\ntotal_numbers = len(prime_numbers)\nprint(total_numbers)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "str1 = '11001010100101011'\nstr2 = '110100011000100'\n\nn = int(str1, 10) + int(str2, 10)\nm = int(bin(n)[2:], 2)\n\nprint(n-m)"
  },
  {
    "example_id": 319,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "gcf = 180 // 168\nprint(gcf)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "binary_nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]\nsum_binary_nums = sum(binary_nums)\nlargest_prime = 1000000000\nfor prime in range(2, largest_prime + 1):\n    if sum_binary_nums % prime == 0:\n        largest_prime = prime\n        break\nprint(largest_prime)"
  },
  {
    "example_id": 321,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "steps = set()\nfor num in range(130, 127, -1):\n    steps.add(num)\nfor num in range(124, 127, -1):\n    steps.add(num)\nfor num in range(124, 127, -1):\n    steps.add(num)\nfor num in range(3, 7, 1):\n    steps.add(num)\nfor num in range(11, 139, 4):\n    steps.add(num)\nprint(len(steps))"
  },
  {
    "example_id": 322,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "365.0"
    ],
    "solution": "n = 365 // 28\nprint(n)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "product = 2**3 * 3**1 * 4**3 * 5**8\nprint(len(str(product)))"
  },
  {
    "example_id": 324,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.911106167923294",
      "46"
    ],
    "annotated_answers": [
      "981.0"
    ],
    "solution": "base3 = '012'\nnum_digits = 100\nbase10 = 0\nfor i in range(num_digits):\n    base10 += int(base3[i % 3]) * (3 ** (num_digits - i - 1))\nprint(base10)"
  },
  {
    "example_id": 325,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1560.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 1560\nwhile n % 1560!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 326,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 32\nb = 23\nsum = a + b\nprint(sum)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "10.0",
      "2.0",
      "5.0",
      "5.0",
      "2.0",
      "10.0",
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "amount = 10\nfor i in range(1, amount + 1):\n    for j in range(1, amount + 1):\n        if i * j == amount:\n            print(i, j)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "138.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "b = 121\nc = 71\nbase = 10\nb_base_c = int(str(b)[::-1], base)\nc_base_b = int(str(c)[::-1], base)\nprint(b_base_c + c_base_b)"
  },
  {
    "example_id": 329,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "b = 10\nwhile True:\n    if 5 * 25 % b == 137 % b:\n        break\n    b += 1\nprint(b)"
  },
  {
    "example_id": 330,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "product = 1\nfor num in range(2, 51):\n    product += num\nprint(product % 10)"
  },
  {
    "example_id": 331,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "205.0"
    ],
    "annotated_answers": [
      "215.0"
    ],
    "solution": "stamps_per_page = 30\nnum_pages = 200 // stamps_per_page + 1\nnum_stamps = num_pages * stamps_per_page - 5\nprint(num_stamps)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "number = 28 * 7 + 6\nprint(number)"
  },
  {
    "example_id": 333,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "digits = [3, 6, 4, 8, 1]\nbase = 10\nfor digit in digits:\n    if digit == 0:\n        continue\n    else:\n        for i in range(1, base):\n            if digit == i:\n                continue\n            else:\n                for j in range(i+1, base):\n                    if digit == j:\n                        continue\n                    else:\n                        if i == j:\n                            print(i)\n                            break\n                        else:\n                            print(i)\n                            break\n                        break\n                    break\n                break\n            break\n        break"
  },
  {
    "example_id": 334,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 12):\n    sum += num\nunits_digit = sum % 10\nprint(units_digit)"
  },
  {
    "example_id": 335,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "m = 14\nn = 123\ngcd = 6\nlcm = 126\nm_plus_n = lcm // gcd\nprint(m_plus_n)"
  },
  {
    "example_id": 336,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2005.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "num1 = 1003\nnum2 = 2005 - num1\nprint(num1 + num2)"
  },
  {
    "example_id": 337,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = 2004 % 12\nprint(remainder)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1358.0"
    ],
    "annotated_answers": [
      "25168.0"
    ],
    "solution": "num_bin = '10101001110'\nnum_oct = int(num_bin, 2)\nprint(num_oct)"
  },
  {
    "example_id": 339,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "remainder = (289 + 9*51 + 3**6 + 4*187) % 17\nprint(remainder)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1",
      "18"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "A = 10**9\nB = 10**9\nAB = A*B\nprint(AB)"
  },
  {
    "example_id": 341,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "121.0"
    ],
    "solution": "nums = []\nfor i in range(1, 1000):\n    if i % 2!= 0 and i % 3!= 0 and i % 5!= 0:\n        nums.append(i)\nprint(nums[4])"
  },
  {
    "example_id": 342,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2010.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "n = 1\nwhile True:\n    dec = n / 2010\n    if dec % 1 == 0:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 343,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "p = lambda n: n**2 - n + 41\nn = 2\nwhile p(n) and p(n+1) % p(n) == 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "m = 2**1980 * 3**384 * 5**1694 * 7**343\nk = 0\nn = 0\nwhile True:\n    n += 1\n    if m**(k+1) % n == 0:\n        k += 1\n        if m**k % n == 0:\n            break\nprint(n+k)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nremainder = 7**17 % 5\nprint(remainder)"
  },
  {
    "example_id": 346,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "284.0"
    ],
    "solution": "N = 284\nsum_divisors = 0\nfor divisor in range(1, N + 1):\n    if divisor <= N / divisor and N % divisor == 0:\n        sum_divisors += divisor\nprint(sum_divisors)"
  },
  {
    "example_id": 347,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "t = 12\nprint(t)"
  },
  {
    "example_id": 348,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "num = 35\nnum **= 12\nprint(num % 10)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "14.0",
      "20.0",
      "26.0",
      "32.0",
      "38.0",
      "44.0",
      "50.0",
      "56.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "n = 0\nwhile n < 60:\n    if n % 6 == 2:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 350,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import gcd\n\ndef convergents(num, den):\n    \"\"\"\n    Compute the convergents of the continued fraction of the rational number num/den.\n    \"\"\"\n    a = num // den\n    b = num % den\n    if b == 0:\n        yield a, 1\n    else:\n        for c in convergents(den, b):\n            d, m = c\n            yield a*d + m, m*d\n\ndef convergent(num, den, n):\n    \"\"\"\n    Compute the n-th convergent of the continued fraction of the rational number num/den.\n    \"\"\"\n    a, b = num // den, num % den\n    for i in range(n):\n        a, b = a*b + a, b\n    return a//b\n\nnum = 123\nden = 999\nn = 123999\nconvergent = convergent(num, den, n)\nprint(convergent)"
  },
  {
    "example_id": 351,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "233.0"
    ],
    "solution": "n = 0\nnum = 942\nwhile num % 15!= 0:\n    num = num // 10\n    n += 1\nprint(n)"
  },
  {
    "example_id": 352,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3224.0"
    ],
    "annotated_answers": [
      "3224.0"
    ],
    "solution": "N = 6300\nsum = 0\nfor num in range(1, N, 2):\n    if N % num == 0:\n        sum += num\nprint(sum)"
  },
  {
    "example_id": 353,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "sum_of_six_consecutive_positive_odd_numbers = 0\nfor num in range(1, 7, 2):\n    sum_of_six_consecutive_positive_odd_numbers += num\ngreatest_whole_number_factor = sum_of_six_consecutive_positive_odd_numbers // 6\nprint(greatest_whole_number_factor)"
  },
  {
    "example_id": 354,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "time_to_wait = 8*60 + 35 - (5*60 + 13)\nprint(time_to_wait)"
  },
  {
    "example_id": 355,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "num = 14_8\nprint(num**2 % 10)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "p = 7\nnum = 1\nfor i in range(2, p):\n    num = (num * i) % p\nprint(num)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "451.0"
    ],
    "annotated_answers": [
      "451.0"
    ],
    "solution": "num = 10**51 - 9\nsum = 0\nwhile num > 0:\n    sum += num % 10\n    num //= 10\nprint(sum)"
  },
  {
    "example_id": 358,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 12345678+1):\n    sum += num\nremainder = sum % 5\nprint(remainder)"
  },
  {
    "example_id": 359,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "fibonacci = [1, 1, 2, 3, 5]\nfor num in range(5, 100):\n    fibonacci.append(fibonacci[-1] + fibonacci[-2])\nremainder = fibonacci[-1] % 4\nprint(remainder)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "P = 4*3*2 + 3*2 + 2\nprint(P)"
  },
  {
    "example_id": 361,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "num_repeating_decimals = 0\nfor n in range(1, 30):\n    if n % 30 == 0:\n        num_repeating_decimals += 1\nprint(num_repeating_decimals)"
  },
  {
    "example_id": 362,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "primes = [2, 3, 5]\nprimes_sum = sum(primes)\nwhile primes_sum % 7 == 0:\n    primes.append(next_prime(primes[-1]))\n    primes_sum = sum(primes)\nprint(primes_sum)"
  },
  {
    "example_id": 363,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "338.0"
    ],
    "annotated_answers": [
      "321.0"
    ],
    "solution": "n = 39500 // 123 + 17\nprint(n)"
  },
  {
    "example_id": 364,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.962809493114328"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "x = 720\na = 3\nroot = x**(1/3)\nprint(root)"
  },
  {
    "example_id": 365,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "for num in range(1, 1000000, 2):\n    if num % 3 == 2 and num % 7 == 3:\n        print(num)\n        break"
  },
  {
    "example_id": 366,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.35625"
    ],
    "annotated_answers": [
      "0.35625"
    ],
    "solution": "decimal = 57 / 160\nprint(decimal)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10010.0"
    ],
    "annotated_answers": [
      "10901.0"
    ],
    "solution": "num = 10000\nwhile num % 11!= 0:\n    num += 1\nprint(num)"
  },
  {
    "example_id": 368,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "b = 10\nwhile len(str(423)) > 3:\n    b += 1\nprint(b)"
  },
  {
    "example_id": 369,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "num_days = 0\nfor month in range(1, 13):\n    for day in range(1, 32):\n        if (day // 10) == 3:\n            num_days += 1\nprint(num_days)"
  },
  {
    "example_id": 370,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.936390936390936"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "fracs = [4/37, 3/11, 23/9]\nsum = 0\nfor frac in fracs:\n    sum += frac\nprint(sum)"
  },
  {
    "example_id": 371,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "product = 720\nlargest = 1\nfor num in range(1, 100):\n    if product % num == 0:\n        largest = num\n        break\nprint(largest)"
  },
  {
    "example_id": 372,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.24444444444444444"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "gear_1_turns = 33/3\ngear_2_turns = 45\nseconds = gear_1_turns / gear_2_turns\nprint(seconds)"
  },
  {
    "example_id": 373,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 3\nremainder = (2*n + 1) % 7\nprint(remainder)"
  },
  {
    "example_id": 374,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "nums = [22, 11, 19, 21]\ndigits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nfor digit in digits:\n    if digit not in nums:\n        print(digit)"
  },
  {
    "example_id": 375,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = (13**13 + 5) % 6\nprint(remainder)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "n = 4\nprint(n)"
  },
  {
    "example_id": 377,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "409.0"
    ],
    "solution": "print(int('58', 10) - int('18', 10))"
  },
  {
    "example_id": 378,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2\nwhile True:\n    if len(str(x**2 + x)) < 3:\n        print(x)\n        break\n    x += 1"
  },
  {
    "example_id": 379,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.058823529411764705"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "residue = 17**-1 % 83\nprint(residue)"
  },
  {
    "example_id": 380,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "b = 2\nwhile b <= 47:\n    b += 1\nprint(b)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3504.0"
    ],
    "annotated_answers": [
      "3504.0"
    ],
    "solution": "number = 3456\nwhile True:\n    number += 1\n    digits = [int(digit) for digit in str(number)]\n    if sum(digits) == 12:\n        print(number)\n        break"
  },
  {
    "example_id": 382,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "A = 1\nfor num in range(1, 300, 2):\n    if num % 300 == 0:\n        A *= num\nprint(A)\nsum_of_distinct_prime_divisors = 0\nfor prime in range(2, 300, 2):\n    if prime * prime <= A:\n        sum_of_distinct_prime_divisors += prime\nprint(sum_of_distinct_prime_divisors)"
  },
  {
    "example_id": 383,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2310.0"
    ],
    "annotated_answers": [
      "2079.0"
    ],
    "solution": "S = set()\nk = 2011\nwhile True:\n    dec_17 = k % 66\n    dec_13 = k % 105\n    if dec_17 == 0 and dec_13 == 0:\n        S.add(k)\n        if k > 2010:\n            print(k)\n            break\n    k += 1"
  },
  {
    "example_id": 384,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import math\nN = 5**100\nsum = 0\nfor i in range(len(str(N))-3, len(str(N))):\n    sum += int(str(N)[i])\nprint(sum)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "remainder = sum([7438, 7439, 7440, 7441, 7442, 7443, 7444, 7445]) % 8\nprint(remainder)"
  },
  {
    "example_id": 386,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "715.0"
    ],
    "solution": "T = 14 ** 2\nquotient = T // 14\nprint(quotient)"
  },
  {
    "example_id": 387,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 2**8 % 5\nprint(remainder)"
  },
  {
    "example_id": 388,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "N = 8 + 6 + 5\nprint(N)"
  },
  {
    "example_id": 389,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "num_divisible = 0\nfor num in range(100, 1000):\n    if num % 13 == 0:\n        num_divisible += 1\nprint(num_divisible)"
  },
  {
    "example_id": 390,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1512.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "product = 5*6*7*8*9*10\nprint(product // 100)"
  },
  {
    "example_id": 391,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "cube_sum = 0\nfor i in range(1, 7):\n    cube_sum += i\nprint(cube_sum)"
  },
  {
    "example_id": 392,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "98.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "max_num = 99\nfor num in range(max_num, 0, -1):\n    if num % num % 10 == 0 and num % 10!= num // 10:\n        print(num)\n        break"
  },
  {
    "example_id": 393,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "N = 120\nremainder = N % 6\nprint(remainder)"
  },
  {
    "example_id": 394,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.72",
      "-5.0"
    ],
    "annotated_answers": [
      "6.72"
    ],
    "solution": "num = 21\nden = 2**2 * 5**7\nresult = num / den\nprint(result)"
  },
  {
    "example_id": 395,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0010030090270812437"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "N = 997\nmodulo = 1000\ninverse = N**-1 % modulo\nprint(inverse)"
  },
  {
    "example_id": 396,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "999.0"
    ],
    "annotated_answers": [
      "43436.0"
    ],
    "solution": "n = 999\nprint(n)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 2\nprint(n)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a, b = (4*5, 3*2)\nprint(a+b)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "n = 1\nwhile n % 130 == 0 or n % 231 == 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 400,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "952.0"
    ],
    "annotated_answers": [
      "935.0"
    ],
    "solution": "X = 1000\nwhile X % 17!= 0:\n    X -= 8\nprint(X)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 100\nanswers = []\nfor num in range(n + 5, n + 11):\n    gcd = num % (n + 5)\n    answers.append(gcd)\nprint(answers)"
  },
  {
    "example_id": 402,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3087.0"
    ],
    "annotated_answers": [
      "30325.0"
    ],
    "solution": "n = 4321\nb = 5\nd = 1234\nprint(n - d)"
  },
  {
    "example_id": 403,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "num = 48\nfactors = [1, 2, 3, 4, 6, 8, 12, 16, 24, 48]\nprint(len(factors))"
  },
  {
    "example_id": 404,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "sum = 0\nfor exponent in range(1, 10):\n    sum += 11**exponent\ntens_digit = sum % 100 // 10\nprint(tens_digit)"
  },
  {
    "example_id": 405,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "quarters = 5\nwhile quarters * 5 < 10:\n    quarters += 1\nprint(quarters)"
  },
  {
    "example_id": 406,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import sqrt\nn = 4\nwhile True:\n    x = (1+2+3+n)**2\n    if sqrt(x) == int(sqrt(x)):\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 407,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 413_6\nn -= 215_6\nprint(n % 10)"
  },
  {
    "example_id": 408,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "product = 121 * 122 * 123\nmodulo = product % 4\nprint(modulo)"
  },
  {
    "example_id": 409,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "remainder = sum([1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11]) % 8\nprint(remainder)"
  },
  {
    "example_id": 410,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40507599.0"
    ],
    "annotated_answers": [
      "11121123.0"
    ],
    "solution": "a = 2012_3\nb = 201_3\nproduct = a * b\nprint(product)"
  },
  {
    "example_id": 411,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "292.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "N = 1000\nnum_divisors = 0\nfor num in range(1, N, 1):\n    divisors = set()\n    for i in range(1, num, 1):\n        if num % i == 0:\n            divisors.add(i)\n    if len(divisors) == 3:\n        num_divisors += 1\nprint(num_divisors)"
  },
  {
    "example_id": 412,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = sum(range(2000, 2007)) % 7\nprint(remainder)"
  },
  {
    "example_id": 413,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "560.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "# LCM\nlcm = 7 * 6 * 5 * 4 * 3 * 2 * 1\n# GCD\ngcd = 9\n# one of the integers is 315\nnum = 315\n# the other integer is\nother = lcm / gcd\nprint(other)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 10\nwhile a > 1:\n    if (a-1)**2 == 71:\n        break\n    a -= 1\nprint(a)"
  },
  {
    "example_id": 415,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "A = 1234\nB = 4321\n\ndiff = 0\nfor i in range(4):\n    diff += (A % 10) - (B % 10)\n    A //= 10\n    B //= 10\n\nprint(diff)"
  },
  {
    "example_id": 416,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 25):\n    factors = [1]\n    for factor in range(2, num, 1):\n        if num % factor == 0:\n            factors.append(factor)\n    if len(factors) == 5:\n        sum += num\nprint(sum)"
  },
  {
    "example_id": 417,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "195.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "b = 13*15\nprint(b)"
  },
  {
    "example_id": 418,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "a = 17\na %= 40\na = 40 - a\nprint(a)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 1+12+123+1234+12345+123456+1234567+12345678\nprint(n%9)"
  },
  {
    "example_id": 420,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 2\nb = 3\ndivisors = [1, a, 2*a, a*b, a+b, 2*a+b]\nprint(len(divisors))"
  },
  {
    "example_id": 421,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "num_congruent_to_7 = 0\nfor num in range(100, 1000):\n    if num % 19 == 7:\n        num_congruent_to_7 += 1\nprint(num_congruent_to_7)"
  },
  {
    "example_id": 422,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "750.0"
    ],
    "annotated_answers": [
      "-449.0"
    ],
    "solution": "x = 1199\nwhile x >= 0:\n    if (24*x) % 1199 == 15:\n        print(x)\n        break\n    x -= 1"
  },
  {
    "example_id": 423,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "shared = 0\nfor i in range(1, 51):\n    if str(i)[-1] == str(50 - i)[-1]:\n        shared += 1\nprint(shared)"
  },
  {
    "example_id": 424,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 13):\n    sum += num\nremainder = sum % 4\nprint(remainder)"
  },
  {
    "example_id": 425,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "num_correct = 100 - 100 % 4\nprint(num_correct)"
  },
  {
    "example_id": 426,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "m = 4\nn = 10\nremainder = (m + n) % 14\nprint(remainder)"
  },
  {
    "example_id": 427,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 1\nwhile True:\n    if (n+1)/(13-n) % 1 == 0 and (n+1)/(13-n) > 1:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 428,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19090.0"
    ],
    "annotated_answers": [
      "12023.0"
    ],
    "solution": "a = 2121_3\nb = 212_3\nprint(a - b)"
  },
  {
    "example_id": 429,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "number = 46656\nperfect_squares = []\nfor num in range(1, number + 1):\n    if num**2 == number:\n        perfect_squares.append(num)\nprint(len(perfect_squares))"
  },
  {
    "example_id": 430,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4051.0"
    ],
    "annotated_answers": [
      "3859.0"
    ],
    "solution": "num_1 = 817_9\nnum_2 = 145_9\nnum_3 = 266_9\nanswer = num_1 - num_2 - num_3\nprint(answer)"
  },
  {
    "example_id": 431,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "119.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\nnum_palindromes = 0\nfor i in range(1, 2007):\n    if is_palindrome(i):\n        num_palindromes += 1\nprint(num_palindromes)"
  },
  {
    "example_id": 432,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "143.0"
    ],
    "solution": "gcf = 1\nfor i in range(1, min(1001, 2431) + 1):\n    if (1001 % i == 0) and (2431 % i == 0):\n        gcf = i\n        break\nprint(gcf)"
  },
  {
    "example_id": 433,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef f(a):\n    return gcd(3*a**2+19*a+30, a**2+6*a+9)\n\ndef max_value(a):\n    return f(a) - a\n\na = 100\nprint(max_value(a))"
  },
  {
    "example_id": 434,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "M = 3\nN = 5\nremainder = (M+N) % 6\nprint(remainder)"
  },
  {
    "example_id": 435,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10837.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "alice_dollars = 25.67\nbailey_dollars = 17.21\ncindy_dollars = 39.17\ndaniel_dollars = 26.32\n\ntotal_dollars = alice_dollars + bailey_dollars + cindy_dollars + daniel_dollars\n\ntotal_cents = int(total_dollars * 100)\n\nprint(total_cents)"
  },
  {
    "example_id": 436,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "P = 1\nfor num in range(1, 100, 1):\n    if num > 1:\n        for i in range(2, num, 1):\n            if num % i == 0:\n                break\n        else:\n            P *= num\nprint(P % 16)"
  },
  {
    "example_id": 437,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "num = 10**100 - 9**100\nprint(len(str(num)))"
  },
  {
    "example_id": 438,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2000.0"
    ],
    "solution": "n = 2010\nnum_repeating = 0\nfor i in range(1, n + 1):\n    if i % 2010 == 0:\n        num_repeating += 1\nprint(num_repeating)"
  },
  {
    "example_id": 439,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "base = 3\nnum = 1000\nwhile num % 10 == 0:\n    num //= 10\nprint(base)"
  },
  {
    "example_id": 440,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "427.0"
    ],
    "solution": "base = 7\na = 126\nb = 54\nprint(a - b)"
  },
  {
    "example_id": 441,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "m = 100\nprint(m)"
  },
  {
    "example_id": 442,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "num_remainders = 0\nfor num in range(1, 101):\n    if num % 5 == 1:\n        num_remainders += 1\npercent = num_remainders / 100\nprint(percent)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "least_integer = 3 * 4 + 4 * 5\nprint(least_integer)"
  },
  {
    "example_id": 444,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "777.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "from sympy import primefactors\nN = 100\nwhile True:\n    num = N\n    factors = primefactors(num)\n    if sum(factors) == 47:\n        print(num)\n        break\n    N += 1"
  },
  {
    "example_id": 445,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "product = 29 * 79 + 31 * 81\nunits_digit = product % 10\nprint(units_digit)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1559.0"
    ],
    "annotated_answers": [
      "338.0"
    ],
    "solution": "num_7 = 235\nnum_5 = 1324\nbase_10 = num_7 + num_5\nprint(base_10)"
  },
  {
    "example_id": 447,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 22\nb = 22\nproduct = a * b\nproduct %= 4\nprint(product)"
  },
  {
    "example_id": 448,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import *\nN = 129\nM = 96\nremainder = (N**34 + M**38) % 11\nprint(remainder)"
  },
  {
    "example_id": 449,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "m = 6**2\nprint(m)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "6.0",
      "12.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "sum = 0\nfor i in range(0, 4):\n    sum += 2*i\n    print(sum)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "962.0",
      "17.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def convert_to_base_5(num):\n    return str(num)[::-1]\n\ndef sum_digits(num):\n    return sum([int(digit) for digit in str(num)])\n\nnum = 269\nbase_5_num = convert_to_base_5(num)\nprint(base_5_num)\nprint(sum_digits(base_5_num))"
  },
  {
    "example_id": 452,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nfor x in range(11, 100):\n    nums = [2, 4, 10, x]\n    if sum(nums) in primes:\n        print(x)\n        break"
  },
  {
    "example_id": 453,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "residue = 0\nfor num in range(1, 13):\n    residue = (residue + num) % 13\nprint(residue)"
  },
  {
    "example_id": 454,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import factorial\n\nn = 4\n\ndef superfactorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i**factorial(i)\n    return result\n\nprint(superfactorial(n)%10)"
  },
  {
    "example_id": 455,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "mod_16_inverses = [15, 7, 13, 3, 11, 9, 5, 1]\nsum_of_mod_16_inverses = sum(mod_16_inverses) % 16\nprint(sum_of_mod_16_inverses)"
  },
  {
    "example_id": 456,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "sum_of_other_cards = 99 * 50\nremoved_card_value = sum_of_other_cards % 77\nprint(removed_card_value)"
  },
  {
    "example_id": 457,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "n7 = 321\nn5 = 321\nn10 = n7-n5\nprint(n10)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "num_4 = 332\nnum_3 = 212\nprint(num_4 % num_3)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "units_digit = 18**6 % 10\nprint(units_digit)"
  },
  {
    "example_id": 460,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "n = 49\nprint(n)"
  },
  {
    "example_id": 461,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "num1 = 225**66\nnum2 = 327**66\nremainder = num1 % 17 - num2 % 17\nprint(remainder)"
  },
  {
    "example_id": 462,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 5\nb = 10\nc = 15\nremainder = (a + b + c) % 7\nprint(remainder)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "97.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "population = 137\ntime = 506\ninitial_population = population - ((time // 60) * 5)\nprint(initial_population)"
  },
  {
    "example_id": 464,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 142857 % 18\nprint(n)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "factor = 5\nremainder = factor % 2\nif remainder == 0:\n    print(factor - 1)\nelse:\n    print(factor)"
  },
  {
    "example_id": 466,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "residue = 9**(-1) % 100\nprint(residue)"
  },
  {
    "example_id": 467,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "P = 9\nb = 10\nQ = P // 2\nprint(P)"
  },
  {
    "example_id": 468,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0",
      "28.0",
      "30.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def factor(num):\n    factors = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            factors.append(i)\n            if num // i!= i:\n                factors.append(num // i)\n    return factors\n\n\nnumbers = [840, 960, 1200]\nnum_factors = []\nfor num in numbers:\n    factors = factor(num)\n    num_factors.append(len(factors))\nprint(num_factors)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = 20\nb = 10\nc = 1\nremainder = (2*a + b - c) % 19\nprint(remainder)"
  },
  {
    "example_id": 470,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1950.0"
    ],
    "annotated_answers": [
      "1950.0"
    ],
    "solution": "num = 2**2001 * 5**1950 // 4**27\nprint(len(str(num)))"
  },
  {
    "example_id": 471,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "tiles = 100\nrectangles = 10\ntiles_per_rectangle = tiles // rectangles\nprint(tiles_per_rectangle)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "num = 11\nwhile True:\n    if num**2 > num:\n        break\n    if num**3 > num:\n        break\n    num += 1\nprint(num)"
  },
  {
    "example_id": 473,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "59.0"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "def is_sum_product(n):\n    first, second = int(str(n)[0]), int(str(n)[1])\n    if n == first + second + first * second:\n        return True\n    return False\n\nsum_product = []\nfor i in range(10, 100):\n    if is_sum_product(i):\n        sum_product.append(i)\nmean = sum(sum_product) / len(sum_product)\nprint(mean)"
  },
  {
    "example_id": 474,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\nN = 453\nf = sympy.Rational(6, 13)\nprint(f.digits(N)[-1])"
  },
  {
    "example_id": 475,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "b = 6\nprint(b)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "# least number of trees\n# bought\nleast_number = 8 + 9 + 10\nprint(least_number)"
  },
  {
    "example_id": 477,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "n = 1\nwhile True:\n    divisors = set(range(1, n+1))\n    product = 1\n    for d in divisors:\n        product *= d\n    if product == n**6:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "num = 207\nif num % 11 == 0:\n    print(0)\nelse:\n    print(11 - (num % 11))"
  },
  {
    "example_id": 479,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 1\nwhile n < 10:\n    if 6 % n == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 480,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "steps = 11\ntotal_steps = 139\nremainder = total_steps % steps\nprint(remainder)"
  },
  {
    "example_id": 481,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "sum = 0\nfor i in range(101):\n    sum += 2**i\nremainder = sum % 7\nprint(remainder)"
  },
  {
    "example_id": 482,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "nums = [33818**2, 33819**2, 33820**2, 33821**2, 33822**2]\nremainder = sum(nums) % 17\nprint(remainder)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "factorial = 10\nbase = 11\nzeroes = 0\nwhile factorial > 0:\n    factorial //= base\n    zeroes += 1\nprint(zeroes)"
  },
  {
    "example_id": 484,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "A = 1\nB = 2\nC = 3\nsum = A + B + C\nprint(sum)"
  },
  {
    "example_id": 485,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "for i in range(26, 1000000000000, 2):\n    if i % 25 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 486,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "num = 629\nbase_7 = str(num)\nbase_8 = str(num)\ncommon_digits = 0\nfor digit in base_7:\n    if digit in base_8:\n        common_digits += 1\nprint(common_digits)"
  },
  {
    "example_id": 487,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "2045.0"
    ],
    "solution": "quotient = 413_5 // 2_5\nprint(quotient)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = 8\nmodulus = 17\nprint(n % modulus)"
  },
  {
    "example_id": 489,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "N = 8888\nsum = 0\nwhile N > 0:\n    sum += N % 10\n    N //= 10\nprint(sum)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12165.5"
    ],
    "annotated_answers": [
      "499.0"
    ],
    "solution": "plumber_cost = 242_5 * 3.5 + 367_8\nprint(plumber_cost)"
  },
  {
    "example_id": 491,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "power = 30\nremainder = pow(5, power, 7)\nprint(remainder)"
  },
  {
    "example_id": 492,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 2 * 3 % 5\nprint(remainder)"
  },
  {
    "example_id": 493,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0",
      "20.0",
      "21.0",
      "22.0",
      "23.0",
      "24.0",
      "25.0",
      "26.0",
      "27.0",
      "28.0",
      "29.0",
      "30.0",
      "31.0",
      "32.0",
      "33.0",
      "34.0",
      "35.0",
      "36.0",
      "37.0",
      "38.0",
      "39.0",
      "40.0",
      "41.0",
      "42.0",
      "43.0",
      "44.0",
      "45.0",
      "46.0",
      "47.0",
      "48.0",
      "49.0",
      "50.0",
      "51.0",
      "52.0",
      "53.0",
      "54.0",
      "55.0",
      "56.0",
      "57.0",
      "58.0",
      "59.0",
      "60.0",
      "61.0",
      "62.0",
      "63.0",
      "64.0",
      "65.0",
      "66.0",
      "67.0",
      "68.0",
      "69.0",
      "70.0",
      "71.0",
      "72.0",
      "73.0",
      "74.0",
      "75.0",
      "76.0",
      "77.0",
      "78.0",
      "79.0",
      "80.0",
      "81.0",
      "82.0",
      "83.0",
      "84.0",
      "85.0",
      "86.0",
      "87.0",
      "88.0",
      "89.0",
      "90.0",
      "91.0",
      "92.0",
      "93.0",
      "94.0",
      "95.0",
      "96.0",
      "97.0",
      "98.0",
      "99.0",
      "100.0",
      "101.0",
      "102.0",
      "103.0",
      "104.0",
      "105.0",
      "106.0",
      "107.0",
      "108.0",
      "109.0",
      "110.0",
      "111.0",
      "112.0",
      "113.0",
      "114.0",
      "115.0",
      "116.0",
      "117.0",
      "118.0",
      "119.0",
      "120.0",
      "121.0",
      "122.0",
      "123.0",
      "124.0",
      "125.0",
      "126.0",
      "127.0",
      "128.0",
      "129.0",
      "130.0",
      "131.0",
      "132.0",
      "133.0",
      "134.0",
      "135.0",
      "136.0",
      "137.0",
      "138.0",
      "139.0",
      "140.0",
      "141.0",
      "142.0",
      "143.0",
      "144.0",
      "145.0",
      "146.0",
      "147.0",
      "148.0",
      "149.0",
      "150.0",
      "151.0",
      "152.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "num = 2**5 * 3**6\nfactors = [1]\nfor num in range(2, int(num**0.5) + 1):\n    if num**2 % num == 0:\n        factors.append(num)\nprint(factors)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "621.0"
    ],
    "solution": "for num in range(100, 1000):\n    digits = [int(digit) for digit in str(num)]\n    product = 1\n    for digit in digits:\n        product *= digit\n    if product == 12:\n        print(num)\n        break"
  },
  {
    "example_id": 495,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "n = 100\nm = 13\nwhile n > m:\n    n -= m\n    m += 1\nprint(n)"
  },
  {
    "example_id": 496,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.125"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 2003\na = 2\nb = 4\ninverse_a = a**(-1) % n\ninverse_b = b**(-1) % n\ninverse_ab = (a*b)**(-1) % n\ninverse_a_plus_b = (a+b)**(-1) % n\nprint(inverse_a_plus_b * (inverse_a + inverse_b))"
  }
]