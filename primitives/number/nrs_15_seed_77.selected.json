[
  {
    "example_id": 0,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "product = 2**3 * 4**5 * 6**7 * 8**9\nremainder = product % 13\nprint(remainder)"
  },
  {
    "example_id": 1,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1440.0"
    ],
    "annotated_answers": [
      "1440.0"
    ],
    "solution": "N = 2010\nfor num in range(N, 0, -1):\n    if num % 7 == 5 and num % 11 == 10 and num % 13 == 10:\n        print(num)\n        break"
  },
  {
    "example_id": 2,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "303.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "N = 2003\nprimes = [2]\nfor num in range(3, N, 2):\n    is_prime = True\n    for prime in primes:\n        if num % prime == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\nnum_primes = len(primes)\nprint(num_primes)"
  },
  {
    "example_id": 3,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 0\nwhile x**3 <= 10:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 4,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num_batches = 44\nnum_donuts_per_batch = 20\nnum_donuts_per_box = 13\nnum_boxes = num_batches // num_donuts_per_batch\nnum_donuts_left_over = num_batches % num_donuts_per_batch\nprint(num_donuts_left_over)"
  },
  {
    "example_id": 5,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 3**65**10\nfactors = []\nfor i in range(1, int(n**(1/3)) + 1):\n    if n % i**3 == 0:\n        factors.append(i)\nnum_factors = len(factors)\nprint(num_factors)"
  },
  {
    "example_id": 6,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 12\nremainder = (n + 4 + n + 6 + n + 8) % 9\nprint(remainder)"
  },
  {
    "example_id": 7,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "coffee = 3/4\nmilk = 1/6\ntotal_coffee = 8\ntotal_milk = 8\n\npeople = int(total_coffee / coffee)\nprint(people)"
  },
  {
    "example_id": 8,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "product = 1\nfor num in range(1, 13, 2):\n    product *= num\nprint(product % 10)"
  },
  {
    "example_id": 9,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "base6 = \"682\"\ndigits = [int(digit) for digit in base6]\nproduct = digits[0] * digits[-1]\nprint(product)"
  },
  {
    "example_id": 10,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10001011000.0"
    ],
    "annotated_answers": [
      "100002.0"
    ],
    "solution": "num1 = 101\nnum2 = 1011\nsum = num1 + num2\nprint(bin(sum))"
  },
  {
    "example_id": 11,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "607000000001.0"
    ],
    "annotated_answers": [
      "740.0"
    ],
    "solution": "lcm = 26*10**11 + 7*10**9 + 1\nremainder = lcm % 10**12\nprint(remainder)"
  },
  {
    "example_id": 12,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1058.0"
    ],
    "annotated_answers": [
      "1058.0"
    ],
    "solution": "for num in range(1399):\n    if (num * 160) % 1399 == 1:\n        print(num)\n        break"
  },
  {
    "example_id": 13,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "106.0"
    ],
    "solution": "N = 1000\nfor num in range(N):\n    if num % 7 == 1:\n        print(num)\n        break"
  },
  {
    "example_id": 14,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44100.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 210\nb = 210**3\nprint(b//a)"
  },
  {
    "example_id": 15,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "n = 280 // 40\nprint(n)"
  },
  {
    "example_id": 16,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "97.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 1000000):\n    num_digits_2 = len(bin(num)[2:])\n    num_digits_3 = len(oct(num)[2:])\n    if num_digits_2 == 2 * num_digits_3:\n        sum += num\nprint(sum)"
  },
  {
    "example_id": 17,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "product = 2\nfor num in range(4, 99, 2):\n    product *= num\nprint(product % 10)"
  },
  {
    "example_id": 18,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "b = 103 // 4 * 12\nprint(b)"
  },
  {
    "example_id": 19,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2857142857142858",
      "2.6",
      "1.2857142857142858",
      "1.2857142857142858",
      "2.6"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def base3_digits(num):\n    digits = []\n    while num > 0:\n        digits.append(num % 3)\n        num //= 3\n    return digits\ndef base6_digits(num):\n    digits = []\n    while num > 0:\n        digits.append(num % 6)\n        num //= 6\n    return digits\ndef base10_to_base3(num):\n    digits = []\n    while num > 0:\n        digits.append(num % 3)\n        num //= 3\n    return digits\ndef base10_to_base6(num):\n    digits = []\n    while num > 0:\n        digits.append(num % 6)\n        num //= 6\n    return digits\ndef average_base3_digits(num):\n    digits = base3_digits(num)\n    total = 0\n    for digit in digits:\n        total += digit\n    return total / len(digits)\ndef average_base6_digits(num):\n    digits = base6_digits(num)\n    total = 0\n    for digit in digits:\n        total += digit\n    return total / len(digits)\ndef average_base10_digits(num):\n    digits = base10_to_base3(num)\n    total = 0\n    for digit in digits:\n        total += digit\n    return total / len(digits)\ndef average_base10_digits_base6(num):\n    digits = base10_to_base6(num)\n    total = 0\n    for digit in digits:\n        total += digit\n    return total / len(digits)\ndef average_base3_digits_base6(num):\n    digits = base3_digits(num)\n    total = 0\n    for digit in digits:\n        total += digit\n    return total / len(digits)\ndef average_base6_digits_base3(num):\n    digits = base6_digits(num)\n    total = 0\n    for digit in digits:\n        total += digit\n    return total / len(digits)\naverage_base3 = average_base3_digits(2003)\naverage_base6 = average_base6_digits(2003)\naverage_base10 = average_base10_digits(2003)\naverage_base3_base6 = average_base3_digits_base6(2003)\naverage_base6_base3 = average_base6_digits_base3(2003)\nprint(average_base3)\nprint(average_base6)\nprint(average_base10)\nprint(average_base3_base6)\nprint(average_base6_base3)"
  },
  {
    "example_id": 20,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "236.0"
    ],
    "solution": "# group of 4\nnum_groups = 200 // 4\n# group of 3\nnum_groups = num_groups // 3\n# group of 11\nnum_groups = num_groups // 11\nprint(num_groups * 11)"
  },
  {
    "example_id": 21,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "25.0",
      "45.0",
      "65.0",
      "85.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "for a in range(0, 100):\n    if a % 20 == 0:\n        continue\n    b = (a - 1) % 20\n    if a * b % 20 == 4 * a % 20:\n        print(a)"
  },
  {
    "example_id": 22,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41956.0"
    ],
    "annotated_answers": [
      "11014.0"
    ],
    "solution": "num = 123_4 * 3_4\nprint(num)"
  },
  {
    "example_id": 23,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.05625"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "decimal = 9 / 160\nprint(decimal)"
  },
  {
    "example_id": 24,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 13\nx = 29\ny = 5\nmod = 7\nresult = pow(x, n, mod) - pow(y, n, mod)\nprint(result % mod)"
  },
  {
    "example_id": 25,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import gcd\n\ndef max_gcd(n):\n    a = 13 * n + 8\n    b = 5 * n + 3\n    return gcd(a, b)\n\nprint(max_gcd(10))"
  },
  {
    "example_id": 26,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "313.0"
    ],
    "solution": "baker_dozen = 13\neggs_left = 1\nnum_containers = eggs_left // baker_dozen\nnum_containers += 1\nnum_containers *= baker_dozen\nprint(num_containers)"
  },
  {
    "example_id": 27,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "145176.0"
    ],
    "annotated_answers": [
      "21126.0"
    ],
    "solution": "product = 315_6 * 4_6\nprint(product)"
  },
  {
    "example_id": 28,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "6.0",
      "8.0",
      "10.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 2\nwhile n < 10:\n    n += 2\n    print(n)"
  },
  {
    "example_id": 29,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# Cube roots of 3\ncube_roots = [0, 1, 2]\n# Smallest perfect cube\nsmallest_cube = 3**(1/3)\n# Sum of three consecutive integers\nfor num in range(1, 1000000, 3):\n    if num**3 == smallest_cube:\n        cube_roots.append(num)\nprint(cube_roots)"
  },
  {
    "example_id": 30,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "negative_product = 0\nfor a in range(-200, -1):\n    product = 1\n    for b in range(1, a):\n        if a % b == 0:\n            product *= b\n    if product < 0:\n        negative_product += 1\nprint(negative_product)"
  },
  {
    "example_id": 31,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "num_bad_integers = 0\nfor num in range(100, 200):\n    if num % 4 == 3:\n        num_bad_integers += 1\nprint(num_bad_integers)"
  },
  {
    "example_id": 32,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "m = 0\nwhile m < 100:\n    if m % 10 == 0 or m % 100 == 0:\n        m += 1\n        continue\n    else:\n        m += 1\nprint(m)"
  },
  {
    "example_id": 33,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "perfect_squares = [100, 10000, 1000000]\nlargest_number_of_perfect_squares = 3\nprint(largest_number_of_perfect_squares)"
  },
  {
    "example_id": 34,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "N_base6 = 531340\nN_base8 = 124154\nbase6 = 6\nbase8 = 8\nremainder = N_base6 % 210\nprint(remainder)"
  },
  {
    "example_id": 35,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1147.0"
    ],
    "annotated_answers": [
      "1147.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\ngreatest_product = 0\nfor prime1 in primes:\n    for prime2 in primes:\n        if prime1 < prime2:\n            product = prime1 * prime2\n            if product > greatest_product:\n                greatest_product = product\nprint(greatest_product)"
  },
  {
    "example_id": 36,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "111010101434.0"
    ],
    "annotated_answers": [
      "76028.0"
    ],
    "solution": "num1 = 324\nnum2 = 111010101110\nsum = num1 + num2\nprint(sum)"
  },
  {
    "example_id": 37,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "product = 16**17 * 17**18 * 18**19\nunits_digit = product % 10\nprint(units_digit)"
  },
  {
    "example_id": 38,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "a = 1575\nb = 1050\ngcd = a*7//b*3\nprint(gcd)"
  },
  {
    "example_id": 39,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "S = [123, 234, 345, 456, 567, 678, 789, 890]\ngcf = 1\nfor num in S:\n    if num % gcf == 0:\n        continue\n    else:\n        while num % gcf!= 0:\n            gcf += 1\nprint(gcf)"
  },
  {
    "example_id": 40,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "9.0",
      "16.0",
      "25.0",
      "36.0",
      "49.0",
      "64.0",
      "81.0",
      "100.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "possible_values = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nprint(possible_values)"
  },
  {
    "example_id": 41,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "ones_digit = 1 * 3 * 5 * 7 * 9 * 11 * 13 % 10\nprint(ones_digit)"
  },
  {
    "example_id": 42,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "9.0",
      "1.0",
      "9.0",
      "9.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "n = 3**17 + 3**10\nn += 1\nn = str(n)\n\nnum_digits = len(n)\nn = list(n)\n\nif num_digits == 1:\n    print(n)\nelif num_digits == 2:\n    n = n[::-1]\n    n = int(''.join(n))\n    n += 1\n    n = str(n)\n    n = list(n)\n    n = n[::-1]\n    print(n)\nelse:\n    n = n[::-1]\n    n = int(''.join(n))\n    n += 1\n    n = str(n)\n    n = list(n)\n    n = n[::-1]\n    if len(n) == 3:\n        n = n[1:]\n    print(n)"
  },
  {
    "example_id": 43,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1342.0"
    ],
    "annotated_answers": [
      "6710.0"
    ],
    "solution": "r = 1342 % 13\nsmallest = 1342\nwhile smallest % 13!= r:\n    smallest += 1342\nprint(smallest)"
  },
  {
    "example_id": 44,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "158.0"
    ],
    "annotated_answers": [
      "142.0"
    ],
    "solution": "product = 4641\nsum = 0\nfor num in range(100, 1000):\n    if product % num == 0:\n        sum = num + product // num\n        break\nprint(sum)"
  },
  {
    "example_id": 45,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.058823529411764705"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import N\nfrac = 1/17\ndecimal_digits = N(frac, 4037)\nprint(decimal_digits)"
  },
  {
    "example_id": 46,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "59.0"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "linda = 2747\nsherry = 3523\njune = 3737\nconnie = 2652\ntotal = linda + sherry + june + connie\ndollars = total / 100\nremainder = total % 100\nprint(remainder)"
  },
  {
    "example_id": 47,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "N = 2013\nfor b in range(2, 10):\n    if N % b == 3:\n        print(b)"
  },
  {
    "example_id": 48,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "314.0"
    ],
    "solution": "a = 0\nfor mod in [3, 5, 7, 9]:\n    a = (a + 2) % mod\nprint(a)"
  },
  {
    "example_id": 49,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "345.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "u1 = 46\nu2 = 14*u1\nprint((u1+u2)/2)"
  },
  {
    "example_id": 50,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "num_left_over = 7\nnum_in_row = 4\nnum_rows = num_left_over // num_in_row\nprint(num_rows)"
  },
  {
    "example_id": 51,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "gold_coins = 53\nbags = 8\ntotal_coins = gold_coins * bags\n\n# If you have more than 200 coins, you could have had any number of coins\n# before finding the bag of 53 coins.\nif total_coins > 200:\n    print('You could have had any number of coins before finding the bag of 53 coins.')\nelse:\n    print(total_coins)"
  },
  {
    "example_id": 52,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "num_str = '81_9'\nbase = 9\nnum = int(num_str.replace('_', ''))\nnum -= 72\nprint(num % base)"
  },
  {
    "example_id": 53,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\n# Given conditions\n# 2ab+bc+ca \u2261 0 (mod 13)\n# ab+2bc+ca \u2261 6abc (mod 13)\n# ab+bc+2ca \u2261 8abc (mod 13)\n\n# Finding the values of a,b,c\na = 1\nb = 2\nc = 3\n\n# Finding the remainder when a+b+c is divided by 13\nremainder = (a + b + c) % 13\n\nprint(remainder)"
  },
  {
    "example_id": 54,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "N = 10101\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nsmallest_prime = 1000000000000\nlargest_prime = 0\nfor prime in primes:\n    if N % prime == 0:\n        if prime < smallest_prime:\n            smallest_prime = prime\n        if prime > largest_prime:\n            largest_prime = prime\nprint(smallest_prime + largest_prime)"
  },
  {
    "example_id": 55,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "112.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "m = 60\nn = 52\ngcd = 8\nlcm = 112\nsum = m + n\nprint(sum)"
  },
  {
    "example_id": 56,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def common_divisors(a, b):\n    divisors = []\n    for num in range(1, a + 1):\n        if a % num == 0 and b % num == 0:\n            divisors.append(num)\n    return len(divisors)\n\nprint(common_divisors(48, 156))"
  },
  {
    "example_id": 57,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "from math import lcm, gcd\nn = 12\nk = 15\nprint(lcm(n,k) / gcd(n,k))"
  },
  {
    "example_id": 58,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "num_factors = 0\nfor i in range(1, 1001, 20):\n    if i % 20 == 0:\n        num_factors += 1\nprint(num_factors)"
  },
  {
    "example_id": 59,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "number = 13**19 * 19**13\nunits_digit = number % 10\nprint(units_digit)"
  },
  {
    "example_id": 60,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "222.0"
    ],
    "annotated_answers": [
      "222.0"
    ],
    "solution": "n = 31\nfor num in range(3, 2293):\n    if n * num % 2293 == 3:\n        print(num)\n        break"
  },
  {
    "example_id": 61,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "decimal_rep = [str(3/7)]\nprint(decimal_rep[0][9])"
  },
  {
    "example_id": 62,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "132.0"
    ],
    "annotated_answers": [
      "3300.0"
    ],
    "solution": "lcm = 13200 // 100\nprint(lcm)"
  },
  {
    "example_id": 63,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "factors = []\nfor num in range(1, 8):\n    if num**3 % 3 == 0 and num**3 % 5 == 0 and num**3 % 7 == 0:\n        factors.append(num)\nprint(len(factors))"
  },
  {
    "example_id": 64,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "0.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "a = 5\nb = 53\nremainder_a = a % 9\nremainder_b = b % 6\nremainder_a_b = (a-b) % 3\nprint(remainder_a, remainder_b, remainder_a_b)"
  },
  {
    "example_id": 65,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "count = 0\nfor n in range(1, 100):\n    if n % 33 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 66,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2743.0"
    ],
    "annotated_answers": [
      "2743.0"
    ],
    "solution": "largest = 14**3 - 1\nprint(largest)"
  },
  {
    "example_id": 67,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "841.0"
    ],
    "solution": "for k in range(1000):\n    if k % 3 == 1 and k % 4 == 1 and k % 5 == 1 and k % 6 == 1 and k % 7 == 1:\n        print(k)\n        break"
  },
  {
    "example_id": 68,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10199.0"
    ],
    "annotated_answers": [
      "11189.0"
    ],
    "solution": "for num in range(10000, 100000):\n    digits = [int(digit) for digit in str(num)]\n    if sum(digits) == 20:\n        print(num)\n        break"
  },
  {
    "example_id": 69,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 101):\n    sum = (sum + num) % 6\nprint(sum)"
  },
  {
    "example_id": 70,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "S = 0\nfor num in range(2010, 4019):\n    S += num\nprint(S % 2009)"
  },
  {
    "example_id": 71,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "b = 5\nprint(b)"
  },
  {
    "example_id": 72,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 55\nN = 131\nremainder = 131 % N\nprint(remainder)"
  },
  {
    "example_id": 73,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "6.0",
      "6.0",
      "9.0",
      "9.0",
      "12.0",
      "12.0",
      "15.0",
      "15.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 1\nb = 1\nwhile a < 1000:\n    if (a/b+14*b/9*a) % 1 == 0:\n        print(a, b)\n    a += 1\n    b += 1"
  },
  {
    "example_id": 74,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "values = [2, 4, 8]\n\ndef pick_ball(values):\n    ball = values.pop()\n    return ball\n\ndef return_ball(ball, values):\n    values.append(ball)\n\ndef get_sum(values):\n    return sum(values)\n\ndef get_distinct_sums(values):\n    sums = []\n    for i in range(3):\n        ball = pick_ball(values)\n        sum = get_sum(values)\n        return_ball(ball, values)\n        sums.append(sum)\n    return sums\n\ndistinct_sums = get_distinct_sums(values)\nprint(distinct_sums)"
  },
  {
    "example_id": 75,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import fibonacci\n\ngcd = 0\nfor n in range(2, 100):\n    fib_n = fibonacci(n)\n    fib_n_plus_one = fibonacci(n + 1)\n    gcd_n_plus_one = fib_n_plus_one.gcd(fib_n)\n    if gcd_n_plus_one > gcd:\n        gcd = gcd_n_plus_one\nprint(gcd)"
  },
  {
    "example_id": 76,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "import itertools\n\ndef is_relatively_prime(n, m):\n    return n % m!= 0 and m % n!= 0\n\ndef get_relatively_prime_pairs(n):\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_relatively_prime(i, j):\n                pairs.append((i, j))\n    return pairs\n\ndef get_relatively_prime_integers(n):\n    integers = []\n    for perm in itertools.permutations(range(1, 7)):\n        if len(perm)!= n:\n            continue\n        pairs = get_relatively_prime_pairs(n)\n        if len(pairs)!= n:\n            continue\n        integers.append(int(''.join(str(d) for d in perm)))\n    return integers\n\nprint(len(get_relatively_prime_integers(6)))"
  },
  {
    "example_id": 77,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a, b = 10, 10\nlast_digit = (a + b) % 10 - (2 * a + b) % 10\nprint(last_digit)"
  },
  {
    "example_id": 78,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.274"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "numerator = 137\ndenominator = 500\ndecimal = numerator / denominator\nprint(decimal)"
  },
  {
    "example_id": 79,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "n = 12\nwhile n % 3!= 1 or n % 4!= 1 or n % 5!= 4:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 80,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "789.0"
    ],
    "annotated_answers": [
      "687.0"
    ],
    "solution": "X = 7\nY = 8\nD = 9\nXYD = 100*X + 10*Y + D\nprint(XYD)"
  },
  {
    "example_id": 81,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "341.0"
    ],
    "annotated_answers": [
      "231.0"
    ],
    "solution": "n = 508\na = 11\nb = 33\nx = 77\ny = pow(x, n-2, n)\nprint(y)"
  },
  {
    "example_id": 82,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# solution using sympy\nfrom sympy import gcd, sieve\n\ndef gcd_consecutive_integers(n):\n    sieve = [True] * (n + 1)\n    for p in range(2, int(n ** 0.5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return gcd([i for i in range(1, n + 1) if sieve[i]])\n\nprint(gcd_consecutive_integers(20))"
  },
  {
    "example_id": 83,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "n = 28 / 2 + 1\nprint(n)"
  },
  {
    "example_id": 84,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "fraction = 4321 / 5**7 * 2**8\ndigits = str(fraction).split('.')[-1]\nsum_of_digits = sum(int(digit) for digit in digits)\nprint(sum_of_digits)"
  },
  {
    "example_id": 85,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "m = 6\nn = 0\nresult = 9\nprint(result)"
  },
  {
    "example_id": 86,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1999998.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "f = lambda x: 12*x+7\ng = lambda x: 5*x+2\nh = lambda x: f(x) // g(x)\nsum = 0\nfor x in range(1, 1000000):\n    sum += h(x)\nprint(sum)"
  },
  {
    "example_id": 87,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 20\nb = 60\ngcd = 20\nprint(gcd)"
  },
  {
    "example_id": 88,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 1 * 2 * 3 * 4 * 6 * 8 * 9 * 10\nunits_digit = N % 10\nprint(units_digit)"
  },
  {
    "example_id": 89,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "product = 1\nfor i in range(1, 100):\n    product *= 2**i\nprint(product % 100)"
  },
  {
    "example_id": 90,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 0\nfor m in range(1, 9):\n    if m % 8 == 1:\n        n += 1\nremainder = 3**n % 8\nprint(remainder)"
  },
  {
    "example_id": 91,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "9.0",
      "0.0",
      "1.0",
      "9.0",
      "1.0",
      "0.0",
      "18.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "for i in range(0, 100):\n    for j in range(0, 100):\n        for k in range(0, 100):\n            if (i + j + k) % 10 == 0 and (i + j + k) // 10 == (j + k):\n                print(i, j, k)"
  },
  {
    "example_id": 92,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "x = 735\nfor a in range(1, x, 2):\n    root = int(x ** 0.5)\n    if root % a == 0:\n        print(root)\n        break"
  },
  {
    "example_id": 93,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "sum = 91145 + 91146 + 91147 + 91148\nremainder = sum % 4\nprint(remainder)"
  },
  {
    "example_id": 94,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.041666666666666664"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "b = 24**-1 % 11**2\nprint(b)"
  },
  {
    "example_id": 95,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "a = 3339\nb = 2961\nc = 1491\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(gcd(a, b), c))"
  },
  {
    "example_id": 96,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import factorial\n\nnum1 = factorial(10) + 2\nnum2 = factorial(11) + 8\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nprint(gcd(num1, num2))"
  },
  {
    "example_id": 97,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "perfect_cubes = [i**3 for i in range(1, 100)]\nperfect_squares = [i**2 for i in range(1, 100)]\nnext_number = 1\nwhile True:\n    if next_number in perfect_cubes and next_number in perfect_squares:\n        print(next_number)\n        break\n    else:\n        next_number += 1"
  },
  {
    "example_id": 98,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "number = 19**19 + 99**99\nunits = number % 10\nprint(units)"
  },
  {
    "example_id": 99,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45537549124.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = [0, 1]\nb = [1, 2]\nfor n in range(2, 51):\n    a.append(a[n-1] + b[n-2])\n    b.append(a[n-2] + b[n-1])\nprint(a[50] + b[50])"
  },
  {
    "example_id": 100,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "A = 1\nB = 2\nAB = A * B\nAB_7 = AB % 10\nprint(AB_7)"
  },
  {
    "example_id": 101,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "351.0"
    ],
    "annotated_answers": [
      "103.0"
    ],
    "solution": "num_pages = 3 + 7 * 100\nnum_leaves = num_pages // 2\nprint(num_leaves)"
  },
  {
    "example_id": 102,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "lcm = 144\ngcd = 144\nratio = lcm/gcd\nsum_of_integers = ratio**2\nprint(sum_of_integers)"
  },
  {
    "example_id": 103,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 10\nwhile n % 10!= 1:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 104,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "units_digit = sum(i**2 for i in range(1, 10)) % 10\nprint(units_digit)"
  },
  {
    "example_id": 105,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "N = 16\nperfect_squares = [1, 4, 9, 16]\nfor num in range(1, N):\n    if num in perfect_squares:\n        continue\n    for prime in range(2, N):\n        if num % prime == 0:\n            continue\n        for prime_2 in range(2, N):\n            if num % prime_2 == 0:\n                continue\n            product = prime * prime_2\n            if product in perfect_squares:\n                print(num)\n                break"
  },
  {
    "example_id": 106,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 2863\nb = 1344\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\ngcd_result = gcd(a, b)\nprint(gcd_result)"
  },
  {
    "example_id": 107,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "91.0"
    ],
    "solution": "sum_of_factors = 0\nfor num in range(1, 36, 2):\n    if num % 36 == 0:\n        sum_of_factors += num\nprint(sum_of_factors)"
  },
  {
    "example_id": 108,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import factorial\nfact = factorial(20)\nprint(fact % 10)"
  },
  {
    "example_id": 109,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 2003 % 11\nprint(remainder)"
  },
  {
    "example_id": 110,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "321.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "b = 321\nn = 57\nprint(b)"
  },
  {
    "example_id": 111,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 3\nk = 0\nfor num in range(2**n):\n    if num % 13 == 3:\n        k += 1\nprint(k)"
  },
  {
    "example_id": 112,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "270.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "def sum_of_proper_divisors(N):\n    sum = 0\n    for num in range(1, N, 1):\n        if N % num == 0:\n            sum += num\n    return sum\n\nsum = sum_of_proper_divisors(198)\nprint(sum)"
  },
  {
    "example_id": 113,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2420.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "base = 44 * 55\nprint(base)"
  },
  {
    "example_id": 114,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def is_prime(N):\n    if N < 2:\n        return False\n    for num in range(2, int(N ** 0.5) + 1):\n        if N % num == 0:\n            return False\n    return True\n\n\ndef is_reversible_prime(N):\n    if N < 10:\n        return False\n    if N % 10 == 0:\n        return False\n    rev_N = int(str(N)[::-1])\n    return is_prime(rev_N)\n\n\nN = 17\nwhile True:\n    N += 1\n    if is_reversible_prime(N):\n        print(N)\n        break"
  },
  {
    "example_id": 115,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "384.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import gcd\n\nn = 120\npositive_divisors = [i for i in range(1, n+1) if n % i == 0]\nnum_positive_divisors = len(positive_divisors)\n\na = num_positive_divisors\nb = sum(positive_divisors)\nc = gcd(a, b)\n\nprint(a+b+c)"
  },
  {
    "example_id": 116,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "fav_num = 20\nremainder = fav_num % 7\nfav_num = fav_num * 5\nremainder = fav_num % 7\nprint(remainder)"
  },
  {
    "example_id": 117,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "cubes = [i**3 for i in range(1, 22)]\nsum_of_cubes = sum(cubes)\nunits_digit = sum_of_cubes % 10\nprint(units_digit)"
  },
  {
    "example_id": 118,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "k = 18\nprint(k)"
  },
  {
    "example_id": 119,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef sum_of_all_r(n):\n    return sum(r for r in range(1, n) if lcm(r, 700) == 7000)\n\nprint(sum_of_all_r(7000))"
  },
  {
    "example_id": 120,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8529.0"
    ],
    "annotated_answers": [
      "695.0"
    ],
    "solution": "num_str = '852_9'\nbase = 10\nnum = int(num_str, base=base)\nprint(num)"
  },
  {
    "example_id": 121,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "power = 999999\nbase = 5\nremainder = base**power % 7\nprint(remainder)"
  },
  {
    "example_id": 122,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "754.0"
    ],
    "solution": "base = 6\nnum = 3254\nprint(num % base)"
  },
  {
    "example_id": 123,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.41025641025641024"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "mod = 19\ninverse = 3**-1 % mod + 13**-1 % mod\nprint(inverse % mod)"
  },
  {
    "example_id": 124,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "# Find the least positive multiple of 72 that has exactly 16 positive factors\n# by finding the least positive multiple of 72 that is divisible by 16.\n# Then, find the least positive multiple of the result that is divisible by 72.\nleast_multiple_of_72 = 16 * 48\nleast_multiple_of_16 = least_multiple_of_72 // 72\nresult = least_multiple_of_16 * 72\nprint(result)"
  },
  {
    "example_id": 125,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "remainder = sum(range(1, 199, 2)) % 7\nprint(remainder)"
  },
  {
    "example_id": 126,
    "selected_solution_index": 0,
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "102.0"
    ],
    "solution": "m = 24 * n + 51\ngcd = 1\nfor i in range(1, 100):\n    gcd = gcd * 2 % 3\n    m = m * 2 % 3\n    n = n * 2 % 3\nprint(gcd)"
  },
  {
    "example_id": 127,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "131.0"
    ],
    "annotated_answers": [
      "71.0"
    ],
    "solution": "num_pages = 12 * 10 + 11\nprint(num_pages)"
  },
  {
    "example_id": 128,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "red_jelly_beans = 8\ngreen_jelly_beans = 13\nwhite_jelly_beans = int((red_jelly_beans + green_jelly_beans) / 16)\nprint(white_jelly_beans)"
  },
  {
    "example_id": 129,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "num_congruent_to_5_mod_13 = 0\nfor num in range(-200, 201):\n    if num % 13 == 5:\n        num_congruent_to_5_mod_13 += 1\nprint(num_congruent_to_5_mod_13)"
  },
  {
    "example_id": 130,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "5.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "import sympy\nx = sympy.Symbol('x')\nmod = 47\nans = sympy.solve(30*x - 42, x, modulus=mod)\nprint(ans)"
  },
  {
    "example_id": 131,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "num_terminate = 0\nfor n in range(1, 1000):\n    num = n / 1375\n    if num == int(num):\n        num_terminate += 1\nprint(num_terminate)"
  },
  {
    "example_id": 132,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "6.0",
      "4.0"
    ],
    "annotated_answers": [
      "6647.0"
    ],
    "solution": "num = 340\nbase = 7\nresult = []\nwhile num > 0:\n    result.append(num % base)\n    num //= base\nresult.reverse()\nprint(result)"
  },
  {
    "example_id": 133,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "116.0"
    ],
    "annotated_answers": [
      "611.0"
    ],
    "solution": "for num in range(100, 1000):\n    product = 1\n    for digit in str(num):\n        product *= int(digit)\n    if product == 6:\n        print(num)\n        break"
  },
  {
    "example_id": 134,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "product = 920000 * 8000000\nnum_zeroes = len(str(product)) - len(str(product).rstrip('0'))\nprint(num_zeroes)"
  },
  {
    "example_id": 135,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\n\nn = 2000\nx = 1999\nresult = pow(x, n, 5)\nprint(result)"
  },
  {
    "example_id": 136,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef probability(n):\n    count = 0\n    for i in range(1, n):\n        num = i\n        while num > 0:\n            count += num % 10\n            num //= 10\n    return is_prime(n) / count\n\nprint(probability(10**8))"
  },
  {
    "example_id": 137,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12007.0"
    ],
    "solution": "num = 441\nbase = 7\nprint(num % base)"
  },
  {
    "example_id": 138,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "N = 12\nremainder = 0\nfor x in range(N):\n    if (x-1) % N == (1-x) % N and (x-2) % N == (2-x) % N:\n        remainder += 1\nprint(remainder)"
  },
  {
    "example_id": 139,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "count = 0\nfor units in range(1, 10):\n    for tens in range(10, 100, 10):\n        if units % tens == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 140,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "number = 3740\nprint(number % 10)"
  },
  {
    "example_id": 141,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35760.0"
    ],
    "annotated_answers": [
      "41305.0"
    ],
    "solution": "num_1 = 1234_5\nnum_2 = 2341_5\nsum_num = num_1 + num_2\nprint(sum_num)"
  },
  {
    "example_id": 142,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "N = 8\nproduct = 1\nfor num in range(1, N+1):\n    product *= num\nif product % N**2 == 0:\n    print(N)\nelse:\n    print('Not possible')"
  },
  {
    "example_id": 143,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "503.0"
    ],
    "annotated_answers": [
      "503.0"
    ],
    "solution": "num_congruent = 0\nfor num in range(1, 18632):\n    if num % 37 == 23:\n        num_congruent += 1\nprint(num_congruent)"
  },
  {
    "example_id": 144,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 2\nremainder = (n + 2) * (n + 4) * (n + 6) % 7\nprint(remainder)"
  },
  {
    "example_id": 145,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "1681.0"
    ],
    "solution": "for num in range(100, 1000):\n    if num**0.5 == int(num**0.5):\n        print(num)\n        break"
  },
  {
    "example_id": 146,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "primes = []\nfor num in range(3, 1000, 2):\n    is_prime = True\n    for prime in primes:\n        if num % prime == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\n        if sum(primes[-3:])**2 == 72361:\n            largest = primes[-1]\n            print(largest)\n            break"
  },
  {
    "example_id": 147,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "sally = 239\nwei_hwa = 174\nzoe = 83\ntotal = sally + wei_hwa + zoe\nremainder = total % 10\nprint(remainder)"
  },
  {
    "example_id": 148,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "x = 1\ny = 7\nx_equiv = (y + 5) % 9\ny_equiv = (x + 2) % 9\nprint(x_equiv, y_equiv)"
  },
  {
    "example_id": 149,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 9\nproduct = 1\nfor num in range(2, n):\n    product *= num\nremainder = product % 10\nprint(remainder)"
  },
  {
    "example_id": 150,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "133.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "a = 20\nb = 40\ngcd = 6\nlcm = (a * b) // gcd\nprint(lcm)"
  },
  {
    "example_id": 151,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2857142857142858",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "remainder = (7j+3)*3/7\nprint(remainder)"
  },
  {
    "example_id": 152,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1234.0"
    ],
    "annotated_answers": [
      "110102.0"
    ],
    "solution": "num_1 = 1\nnum_11 = 11\nnum_111 = 111\nnum_1111 = 1111\nnum_2 = 2\nresult = num_1 + num_11 + num_111 + num_1111\nprint(result)"
  },
  {
    "example_id": 153,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "units_digit = 7**53 % 10\nprint(units_digit)"
  },
  {
    "example_id": 154,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "product1 = (972 - 268) * (973 - 267) * (974 - 266)\nproduct2 = (968 - 272) * (967 - 273) * (966 - 274)\nproduct3 = (999 - 222)**3\nunits_digit = (product1 + product2 - product3) % 10\nprint(units_digit)"
  },
  {
    "example_id": 155,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "A = 105\nB = 81\nrows_A = int(A / 10)\nrows_B = int(B / 12)\nprint(rows_A)"
  },
  {
    "example_id": 156,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14816.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sum = 0\nfor A in range(4):\n    for B in range(4):\n        for C in range(4):\n            sum += (A*4+B)*4+C+200\nprint(sum)"
  },
  {
    "example_id": 157,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17736.0"
    ],
    "annotated_answers": [
      "5636.0"
    ],
    "solution": "sum = 0\nfor num in range(1000, 9999):\n    if num % 4 == 0 and '1' in str(num) and '2' in str(num) and '3' in str(num) and '4' in str(num):\n        sum += num\nprint(sum)"
  },
  {
    "example_id": 158,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "mod = 47\nb = 35\nfor i in range(1, mod):\n    if (b * i) % mod == 1:\n        print(i)\n        break"
  },
  {
    "example_id": 159,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 1\nwhile True:\n    if 2**24 == n**n:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 160,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.875"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "num = 31\ndenom = 3**-1 + 5**-1\ndenom_inv = denom**-1 % num\nprint(denom_inv)"
  },
  {
    "example_id": 161,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1123.0"
    ],
    "annotated_answers": [
      "1155.0"
    ],
    "solution": "a = 1\nb = 1\nc = 2\nd = 3\nabcd = a*1000 + b*100 + c*10 + d\nprint(abcd)"
  },
  {
    "example_id": 162,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.214465011907717"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "k = 240**(1/3)\nprint(k)"
  },
  {
    "example_id": 163,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10680.0"
    ],
    "annotated_answers": [
      "-2213.0"
    ],
    "solution": "n1 = 121_3\nn2 = 2122_3\nn3 = 1200_3\nn4 = 2111_3\nprint(n1 + n2 - n3 - n4)"
  },
  {
    "example_id": 164,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "product = 84\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]\nfor prime in primes:\n    if product % prime == 0:\n        factors = [prime]\n        while product % prime == 0:\n            product //= prime\n            factors.append(prime)\n        print(factors)\n        break\nelse:\n    print(\"No prime factors found.\")"
  },
  {
    "example_id": 165,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "141.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "numerator = 141\ndenominator = 400\nlast_digit = numerator % denominator\nprint(last_digit)"
  },
  {
    "example_id": 166,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2016.0"
    ],
    "solution": "sum = 0\nfor n in range(2010, 2020):\n    divisors = []\n    for m in range(1, n):\n        if n % m == 0:\n            divisors.append(m)\n    if len(divisors) == 4 and sum(divisors) == n:\n        sum += n\nprint(sum)"
  },
  {
    "example_id": 167,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_divisors(n):\n    return sum(divisors(n))\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_bouncy_prime(n):\n    if not is_prime(n):\n        return False\n    if not is_prime(sum_divisors(n)):\n        return False\n    return True\n\ndef find_bouncy_prime():\n    n = 1\n    while True:\n        n += 1\n        if is_bouncy_prime(n):\n            return n\n\nbouncy_prime = find_bouncy_prime()\nprint(bouncy_prime)"
  },
  {
    "example_id": 168,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "for num in range(1, 13):\n    if num not in range(1, 7):\n        print(num)"
  },
  {
    "example_id": 169,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "10.0",
      "16.0",
      "20.0",
      "40.0",
      "80.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Find all possible values of m\nm = 1\nwhile m <= 1000:\n    if (9**2) % m == 1:\n        if (3**2) % m!= 1:\n            print(m)\n    m += 1"
  },
  {
    "example_id": 170,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-11.0"
    ],
    "annotated_answers": [
      "-36.0"
    ],
    "solution": "base = 4\nnum1 = 333\nbase = 5\nnum2 = 344\nresult = num1 - num2\nprint(result)"
  },
  {
    "example_id": 171,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "pencils = 30\nbags = 3\n\nremainder = pencils % bags\nprint(remainder)"
  },
  {
    "example_id": 172,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 10\ndivisions = 10\namount_per_division = x / divisions\namount_last_division = amount_per_division * divisions\nprint(amount_last_division)"
  },
  {
    "example_id": 173,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 0\nwhile k < 6:\n    if 3*k % 6 == 0:\n        k += 1\n    else:\n        print(k)\n        break"
  },
  {
    "example_id": 174,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "809.0"
    ],
    "annotated_answers": [
      "5067.0"
    ],
    "solution": "num_base_7 = 3210 - 2401\nprint(num_base_7)"
  },
  {
    "example_id": 175,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "t = 1\nwhile True:\n    if 19 % t == 0 and 5 % t == 0:\n        print(t)\n        break\n    t += 1"
  },
  {
    "example_id": 176,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.647256211429027",
      "70"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "factors = [2, 3, 5, 7, 11, 13, 17, 19, 23]\nexponents = [23, 19, 17, 13, 11, 7, 5, 3, 2]\nproduct = 1\nfor factor, exponent in zip(factors, exponents):\n    product *= factor**exponent\nprint(product)"
  },
  {
    "example_id": 177,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "57.0"
    ],
    "annotated_answers": [
      "57.0"
    ],
    "solution": "for n in range(398):\n    if (n * 7) % 398 == 1:\n        print(n)\n        break"
  },
  {
    "example_id": 178,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "start_time_A = 6\nstart_time_B = 7\nfrequency_A = 11\nfrequency_B = 7\n\n# Camera A takes pictures at 6:00, 6:11, 6:22,...\n# Camera B takes pictures at 7:00, 7:07, 7:14,...\n\n# Camera A and Camera B take pictures at the same time at 6:11, 7:14,...\n\n# Camera A and Camera B stop taking pictures at 11:59, 12:06, 12:13,...\n\n# Camera A and Camera B take their last picture together at 11:59, 12:06, 12:13,...\n\n# Camera A and Camera B take their last picture together at 11:59 + 11 + 7 = 12:29\n\n# Camera A and Camera B take their last picture together 12 hours before noon\n\n# Noon is at 12:00\n\n# Camera A and Camera B take their last picture together 12 - 29 = 11 hours before noon\n\nprint(11)"
  },
  {
    "example_id": 179,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1016.0"
    ],
    "solution": "r = 2\nprint(r)"
  },
  {
    "example_id": 180,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "N = 9\ncount = 0\nfor i in range(1, N + 1):\n    if N % i == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 181,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "233.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def double_factorial(n):\n    product = 1\n    for num in range(1, n + 1, 2):\n        product *= num\n    return product\n\nunits_digit = 0\nfor num in range(1, 50):\n    units_digit += double_factorial(num) % 10\nprint(units_digit)"
  },
  {
    "example_id": 182,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-13.0"
    ],
    "annotated_answers": [
      "1076.0"
    ],
    "solution": "n = 62 - 75\nprint(n)"
  },
  {
    "example_id": 183,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.6333333333333333"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 2\nb = 3\nm = 7\nL = (a+b)**(-1) % m\nR = (a**(-1) + b**(-1)) % m\nprint(L - R)"
  },
  {
    "example_id": 184,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "remainder = 729 % 15\nprint(remainder)"
  },
  {
    "example_id": 185,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "product = 288\nnum_1 = 288 // 2\nnum_2 = 288 - num_1\nif num_1 > num_2:\n    greater = num_1\nelse:\n    greater = num_2\nprint(greater)"
  },
  {
    "example_id": 186,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "from sympy import gcd, lcm\n\nn = gcd(6432, 132)\nn += 11\nprint(n)"
  },
  {
    "example_id": 187,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "226.0"
    ],
    "solution": "factors = []\nsum_factors = 0\nfor num in range(1, 100, 2):\n    if num % 144 == 0:\n        factors.append(num)\n        sum_factors += num\nprint(sum_factors)"
  },
  {
    "example_id": 188,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.85"
    ],
    "annotated_answers": [
      "0.8"
    ],
    "solution": "terms = [0, 0.5, 0.6666666666666666, 0.75]\nnext_term = terms[-1] + 0.1\nprint(next_term)"
  },
  {
    "example_id": 189,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def sum_of_powers(n):\n    return sum(2**k for k in range(n+1))\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef largest_gcd(n):\n    return gcd(sum_of_powers(n), sum_of_powers(n+1))\n\nprint(largest_gcd(10))"
  },
  {
    "example_id": 190,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "d = 222 % 7\nprint(d)"
  },
  {
    "example_id": 191,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "143.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "M = 130\nN = 13\nprint(M + N)"
  },
  {
    "example_id": 192,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import log10\n\nnum = 1/37\ndigits = int(log10(num)) + 1\nprint(digits)"
  },
  {
    "example_id": 193,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = 54 % 6\nprint(remainder)"
  },
  {
    "example_id": 194,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1236141.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "def get_digits(n, base):\n    digits = []\n    while n > 0:\n        digits.append(n % base)\n        n //= base\n    return digits\n\ndef reverse(l):\n    l.reverse()\n    return l\n\ndef get_base10(l, base):\n    total = 0\n    for i, digit in enumerate(l):\n        total += digit * base ** i\n    return total\n\ndef get_base3_and_base4(n):\n    digits_3 = get_digits(n, 3)\n    digits_4 = reverse(get_digits(n, 4))\n    return digits_3, digits_4\n\ndef get_base10_from_base3_and_base4(digits_3, digits_4):\n    return get_base10(digits_3, 3) * 10 + get_base10(digits_4, 4)\n\ndef get_base10_from_n(n):\n    digits_3, digits_4 = get_base3_and_base4(n)\n    return get_base10_from_base3_and_base4(digits_3, digits_4)\n\nn = 123456\nprint(get_base10_from_n(n))"
  },
  {
    "example_id": 195,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "a = 1\nb = 1\nfor num in range(3, 2010, 2):\n    if str(1/num).count('.') == 0:\n        a *= num\n        b *= num - 1\nprint(a+b)"
  },
  {
    "example_id": 196,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "d = 0\nfor digit in str(591300000):\n    d += int(digit)\nprint(d)"
  },
  {
    "example_id": 197,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "import math\n\ndef increase_side(side, percentage):\n    return int(side * (1 + percentage))\n\ndef decrease_side(side, percentage):\n    return int(side * (1 - percentage))\n\ndef main():\n    width = 10\n    height = 5\n    new_width = increase_side(width, 0.3)\n    new_height = decrease_side(height, 0.2)\n    area = new_width * new_height\n    print(area)\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 198,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2220.0"
    ],
    "solution": "N = 30\nmultiples = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\nfor multiple in multiples:\n    if multiple % N == 0:\n        print(multiple)\n        break"
  },
  {
    "example_id": 199,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0",
      "91.0"
    ],
    "annotated_answers": [
      "119.0"
    ],
    "solution": "for num in range(10, 100):\n    if num % 7 == 0:\n        if sum(int(digit) for digit in str(num)) == 10:\n            print(num)"
  },
  {
    "example_id": 200,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "decimal = 54317 / 80000\nprint(len(str(decimal).split('.')[1]))"
  },
  {
    "example_id": 201,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "num = 0\nwhile num < 100:\n    digits = [int(digit) for digit in str(num)]\n    if sum(digits) == num:\n        print(num)\n        break\n    num += 1"
  },
  {
    "example_id": 202,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 11213141\nn %= 18\nprint(n)"
  },
  {
    "example_id": 203,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "units_digit = (17 ** 13) - 17\nprint(units_digit % 10)"
  },
  {
    "example_id": 204,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "repetend = 19**18\nn = 39\ndigit = int(repetend/10**(n-1)) % 10\nprint(digit)"
  },
  {
    "example_id": 205,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "n = 123456\nmod = 101\nprint(n % mod)"
  },
  {
    "example_id": 206,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# prime numbers less than 100\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nproduct = 1\nfor prime in primes:\n    product *= prime\nprint(product % 10)"
  },
  {
    "example_id": 207,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "product = 17 * 18\nresidue = product % 4\nprint(residue)"
  },
  {
    "example_id": 208,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6347.0"
    ],
    "annotated_answers": [
      "319.0"
    ],
    "solution": "num = 634_7\nprint(num)"
  },
  {
    "example_id": 209,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "595.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "n_sum = 0\nfor n in range(1, 100):\n    if n**2 <= 1200:\n        n_sum += n\nprint(n_sum)"
  },
  {
    "example_id": 210,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def divisors(num):\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\nnum = 196\ndivisors = divisors(num)\nprint(len(divisors))"
  },
  {
    "example_id": 211,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 16\nb = 21\nfor n in range(37):\n    if (a-b) % 37 == n:\n        print(n)"
  },
  {
    "example_id": 212,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import math\n\ndef sum_distinct_prime_divisors(n):\n    prime_divisors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            prime_divisors.append(i)\n    return sum(prime_divisors)\n\nA = sum_distinct_prime_divisors(500)\nprint(A)"
  },
  {
    "example_id": 213,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "124.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "number = 30**4\nnum_divisors = 0\nfor num in range(1, number + 1):\n    if number % num == 0:\n        num_divisors += 1\nprint(num_divisors - 1)"
  },
  {
    "example_id": 214,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "num = 19\nmax_factors = 0\nfor i in range(1, num):\n    factors = 0\n    for j in range(1, num):\n        if num % j == 0:\n            factors += 1\n    if factors > max_factors:\n        max_factors = factors\nprint(max_factors)"
  },
  {
    "example_id": 215,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\nx %= 66\nprint(x)"
  },
  {
    "example_id": 216,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-56.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "A = 0\nB = 0\nfor i in range(16):\n    if pow(i, 2, 16) == 1:\n        A += i\n    else:\n        B += i\nprint(A - B)"
  },
  {
    "example_id": 217,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220690.0"
    ],
    "annotated_answers": [
      "2145.0"
    ],
    "solution": "debt = 2345*6 + 41324*5\nprint(debt)"
  },
  {
    "example_id": 218,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2445.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "age = 1222\nlegs = 2\ncane = 1\ntotal = age * legs + cane\nprint(total)"
  },
  {
    "example_id": 219,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "num_divisors = 0\nfor num in range(1, 7):\n    if num % 1452 == 0:\n        num_divisors += 1\nprint(num_divisors)"
  },
  {
    "example_id": 220,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "num_digits = len(str(4**5 * 5**13))\nprint(num_digits)"
  },
  {
    "example_id": 221,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "expression = 2005**2 + 2005**0 + 2005**0 + 2005**5\nprint(expression % 100)"
  },
  {
    "example_id": 222,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "465.0"
    ],
    "annotated_answers": [
      "248.0"
    ],
    "solution": "lcm = 3720\ngcd = 8\nnum1 = 120\nnum2 = lcm // gcd\nprint(num2)"
  },
  {
    "example_id": 223,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "138.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "num = 100\nbase_64 = 64\nbase_62 = 62\n\ndef convert_base(num, base_from, base_to):\n    \"\"\"\n    Convert a number from base base_from to base base_to.\n    \"\"\"\n    if num == 0:\n        return '0'\n    digits = []\n    while num > 0:\n        digits.append(str(num % base_to))\n        num //= base_to\n    return ''.join(reversed(digits))\n\nresult = convert_base(num, base_64, base_62)\nprint(result)"
  },
  {
    "example_id": 224,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "n = 2\nm = 47\nk = 15\nn_residue = (n * k) % m\nprint(n_residue)"
  },
  {
    "example_id": 225,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6152.0"
    ],
    "solution": "n = 141\nsum_n = 0\nfor digit in str(n):\n    sum_n += int(digit, 8)\nprint(sum_n)"
  },
  {
    "example_id": 226,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 2\nb = 2\nremainder = (a**2 + b**2) % 3\nprint(remainder)"
  },
  {
    "example_id": 227,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27609767.25"
    ],
    "annotated_answers": [
      "21022.0"
    ],
    "solution": "lcm = 10508\na = (lcm + 5) / 2\nprint(a**2 - 4*a + 1)"
  },
  {
    "example_id": 228,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "127.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "prime1 = 12\nprime2 = 23\nprime3 = 35\nprime4 = 57\nsum = prime1 + prime2 + prime3 + prime4\nprint(sum)"
  },
  {
    "example_id": 229,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "P = 9\nb = P + 1\nprint(b)"
  },
  {
    "example_id": 230,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "14.8"
    ],
    "solution": "ages = [13, 14, 15, 16, 17, 18, 19]\nages_product = 705600\nages_mean = sum(ages) / len(ages)\nprint(ages_mean)"
  },
  {
    "example_id": 231,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "6.0",
      "28.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def get_factors(num):\n    factors = []\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.append(i)\n            if num // i!= i:\n                factors.append(num // i)\n    return factors\n\n\ndef get_factors_sum(num):\n    factors = get_factors(num)\n    sum = 0\n    for factor in factors:\n        sum += factor\n    return sum\n\n\ndef is_factor(num):\n    if get_factors_sum(num) % num == 0:\n        return True\n    return False\n\n\nfor i in range(1, 100):\n    if is_factor(i):\n        print(i)"
  },
  {
    "example_id": 232,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1058.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nsum = 0\nfor prime in primes:\n    if pow(8, prime - 1, prime) == 1:\n        sum += prime\nprint(sum)"
  },
  {
    "example_id": 233,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3072.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "num_7 = 62\nnum_5 = 34\nbase = 7\n\nnum_10 = num_7 * base**2 + num_5\nprint(num_10)"
  },
  {
    "example_id": 234,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import gcd\nn = 5\nprint(gcd(n + 7, 2*n + 1))"
  },
  {
    "example_id": 235,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 617 * 943 % 18\nprint(n)"
  },
  {
    "example_id": 236,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "from math import gcd\na = 6**210\nb = 15**4\nprint(gcd(a, b))"
  },
  {
    "example_id": 237,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12012.0"
    ],
    "annotated_answers": [
      "100100.0"
    ],
    "solution": "b = 2\nnum = 11011\nresult = num * (b-1) + 1001\nprint(result)"
  },
  {
    "example_id": 238,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "units_digit = 7**7 % 10\nprint(units_digit)"
  },
  {
    "example_id": 239,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "year = 0\nwhile year % 12!= 0:\n    year += 1\nprint(year)"
  },
  {
    "example_id": 240,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for t in range(1, 23, 2):\n    if (t+2) % t == 0:\n        print(t)"
  },
  {
    "example_id": 241,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "1.0",
      "0.0",
      "4.0",
      "3.0",
      "2.0",
      "1.0",
      "0.0",
      "4.0"
    ],
    "annotated_answers": [
      "4435.0"
    ],
    "solution": "base = 5\nN = 123\nremainders = []\nfor num in range(N, 0, -1):\n    remainder = num % base\n    remainders.append(remainder)\nprint(remainders)"
  },
  {
    "example_id": 242,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.5",
      "4.5"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "base5_digits = [x for x in range(10) if x < 5**2]\nbase8_digits = [x for x in range(10) if x < 8**2]\navg = sum(base5_digits) / len(base5_digits)\navg2 = sum(base8_digits) / len(base8_digits)\nprint(avg)\nprint(avg2)"
  },
  {
    "example_id": 243,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(71 % 3)"
  },
  {
    "example_id": 244,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 0\nwhile n <= 5:\n    if n % 6 == 12345:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 245,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def number_of_digits_in_base_2(num):\n    return len(bin(num)[2:])\n\ndef number_of_digits_in_base_3(num):\n    return len(oct(num)[2:])\n\nprint(number_of_digits_in_base_2(87) - number_of_digits_in_base_3(87))"
  },
  {
    "example_id": 246,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "183156328755.0"
    ],
    "annotated_answers": [
      "3255.0"
    ],
    "solution": "base_ten = int(bin(101010)[2:], 5)\nprint(base_ten)"
  },
  {
    "example_id": 247,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "num = 12 * 15\nprint(num)"
  },
  {
    "example_id": 248,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for a in range(1, 24):\n    if a % 24 == 1:\n        print(a)"
  },
  {
    "example_id": 249,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "num_digits = 10\nprint(num_digits)"
  },
  {
    "example_id": 250,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "0.0",
      "2.0",
      "0.0",
      "4.0",
      "0.0",
      "8.0",
      "0.0",
      "9.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "A = 0\nwhile A <= 1000:\n    B = 0\n    while B <= 1000:\n        if A*A*A%7 + B*B*B%7 == 666%7:\n            print(A, B)\n        B += 1\n    A += 1"
  },
  {
    "example_id": 251,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 4\ny = 7\nnum = (x + 1)**2 * (y + 5)**3\nremainder = num % 19\nprint(remainder)"
  },
  {
    "example_id": 252,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "import calendar\n\nyear = 2008\nmonth = 2\nday = calendar.weekday(year, month, 1)\nif calendar.isleap(year):\n    day = (day + 6) % 7\n    print(calendar.monthrange(year, month)[1])\nelse:\n    day = (day + 5) % 7\n    print(calendar.monthrange(year, month)[1])"
  },
  {
    "example_id": 253,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "num_divisible = 0\nfor num in range(15, 86, 20):\n    num_divisible += 1\nprint(num_divisible)"
  },
  {
    "example_id": 254,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "largest_number = 2**8 - 1\nprint(largest_number)"
  },
  {
    "example_id": 255,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "factors = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nfactors_product = 1\nfor factor in factors:\n    factors_product *= factor\nlcm = factors_product\na = 1\nb = 9\nwhile lcm % (a * b)!= 0:\n    a += 1\n    b -= 1\nlcm = a * b\nprint(lcm)"
  },
  {
    "example_id": 256,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "n = 80325\nwhile n % 2 == 0:\n    n //= 2\nwhile n % 3 == 0:\n    n //= 3\nwhile n % 5 == 0:\n    n //= 5\nwhile n % 7 == 0:\n    n //= 7\nprint(n)"
  },
  {
    "example_id": 257,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11331.0"
    ],
    "annotated_answers": [
      "1030.0"
    ],
    "solution": "a = 1331\nb = 10**len(str(a))\nprint(a+b)"
  },
  {
    "example_id": 258,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "divisible_by_3 = 0\nfor num in range(10):\n    if (num % 3) == 0:\n        divisible_by_3 += 1\nprint(divisible_by_3)"
  },
  {
    "example_id": 259,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0",
      "25.0",
      "20.0",
      "15.0",
      "10.0",
      "10.0",
      "5.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "num_divisible_by_3 = 33\nnum_divisible_by_4 = 25\nnum_divisible_by_5 = 20\nnum_divisible_by_3_and_4 = 15\nnum_divisible_by_3_and_5 = 10\nnum_divisible_by_4_and_5 = 10\nnum_divisible_by_3_and_4_and_5 = 5\nprint(num_divisible_by_3, num_divisible_by_4, num_divisible_by_5, num_divisible_by_3_and_4, num_divisible_by_3_and_5, num_divisible_by_4_and_5, num_divisible_by_3_and_4_and_5)"
  },
  {
    "example_id": 260,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "i = 3\nj = 5\nremainder = (i*j) % 6\nprint(remainder)"
  },
  {
    "example_id": 261,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# tens_digit = 5**2005 % 10\ntens_digit = pow(5, 2005, 10)\nprint(tens_digit)"
  },
  {
    "example_id": 262,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "AB = 912673\nA = int(str(AB)[0])\nB = int(str(AB)[1])\nprint(A + B)"
  },
  {
    "example_id": 263,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4096.0"
    ],
    "solution": "import math\n\ndef is_perfect_cube(n):\n    return n ** (1/3) == math.floor(n ** (1/3))\n\ndef is_perfect_fourth_power(n):\n    return n ** (1/4) == math.floor(n ** (1/4))\n\nfor i in range(1, 1000):\n    if is_perfect_cube(i) and is_perfect_fourth_power(i):\n        print(i)\n        break"
  },
  {
    "example_id": 264,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = sum(range(11)) % 9\nprint(remainder)"
  },
  {
    "example_id": 265,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "235.0"
    ],
    "solution": "import math\n\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef find_consecutive_prime_numbers(n):\n    prime_numbers = []\n    for i in range(2, n):\n        if is_prime(i):\n            prime_numbers.append(i)\n        if len(prime_numbers) == 3:\n            return prime_numbers\n    return None\n\n\ndef find_greatest_possible_sum(prime_numbers):\n    return sum(prime_numbers)\n\n\nprime_numbers = find_consecutive_prime_numbers(100)\nif prime_numbers is not None:\n    print(find_greatest_possible_sum(prime_numbers))\nelse:\n    print(\"No prime numbers found.\")"
  },
  {
    "example_id": 266,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "remainder = 194 % 11\nprint(remainder)"
  },
  {
    "example_id": 267,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "factors = [2, 4, 6, 8, 10, 12]\nsquares = []\nfor factor in factors:\n    if factor**2 in factors:\n        squares.append(factor)\nnum_squares = len(squares)\nprint(num_squares)"
  },
  {
    "example_id": 268,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0",
      "144.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = 144\ny = 144\nprint(x, y)"
  },
  {
    "example_id": 269,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "33.0",
      "100.0",
      "97.0",
      "100.0",
      "128.0",
      "100.0",
      "188.0",
      "100.0",
      "217.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "for num in range(1, 100):\n    if (num * (100 - num)) % 3 == 0:\n        lcm = (num * (100 - num)) // 3\n        sum = num + (100 - num)\n        print(sum, lcm)"
  },
  {
    "example_id": 270,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "4.0",
      "4.0",
      "5.0",
      "5.0",
      "6.0",
      "6.0",
      "7.0",
      "7.0",
      "8.0",
      "8.0",
      "9.0",
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "divisible_by_11 = []\nfor tens in range(10):\n    for hundreds in range(10):\n        if (tens * 10 + hundreds) % 11 == 0:\n            divisible_by_11.append((tens, hundreds))\nprint(divisible_by_11)"
  },
  {
    "example_id": 271,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "108.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "m = 2\nn = 108\nm_n = (m,n)\nif m % 2 == 0:\n    n_m = (n,m)\n    if n % 2 == 0:\n        print(m_n)\n    else:\n        print(n_m)\nelse:\n    if n % 2 == 0:\n        print(m_n)\n    else:\n        print(n_m)"
  },
  {
    "example_id": 272,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "N = 13 * 7 + 17 * 3\nremainder = N % 36\nprint(remainder)"
  },
  {
    "example_id": 273,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from math import sqrt\n\nnum = int(sqrt(196))\n\nfactors = []\n\nfor i in range(1, num + 1):\n    if num % i == 0:\n        factors.append(i)\n\nsum = 0\nfor factor in factors:\n    sum += factor\n\nprint(sum)"
  },
  {
    "example_id": 274,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = 24**50 - 15**50\nprint(x % 13)"
  },
  {
    "example_id": 275,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef is_relatively_prime(a, b, c):\n    if gcd(a, b) == 1 and gcd(a, c) == 1 and gcd(b, c) == 1:\n        return True\n    else:\n        return False\n\nk = 1\nwhile True:\n    if is_relatively_prime(6*k + 3, 6*k + 2, 6*k + 1):\n        break\n    else:\n        k += 1\nprint(k)"
  },
  {
    "example_id": 276,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "remainder = 1529 % 6\nprint(remainder)"
  },
  {
    "example_id": 277,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "factors = [1, 2, 3, 4, 6, 12]\nproduct = 1\nfor factor in factors:\n    if factor > 1 and factor < 12:\n        product *= factor\nprint(product)"
  },
  {
    "example_id": 278,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "n = 1\nwhile True:\n    if (171 - 80) % n == 0 and (468 - 13) % n == 0:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 279,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "number = '1230'\nbase = 4\ndecimal = int(number, base)\nprint(decimal)"
  },
  {
    "example_id": 280,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "990.0"
    ],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "for num in range(1000, 0, -1):\n    if num % 11 == 0:\n        print(num)\n        break"
  },
  {
    "example_id": 281,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "556.0"
    ],
    "solution": "a = 10\nb = 97\nprint(a + b)"
  },
  {
    "example_id": 282,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "num_pages = 1000\nnum_pages_with_sum_4 = 0\nfor page in range(1, num_pages):\n    digits = [int(digit) for digit in str(page)]\n    if sum(digits) == 4:\n        num_pages_with_sum_4 += 1\nprint(num_pages_with_sum_4)"
  },
  {
    "example_id": 283,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "upc = '9-78094-11006-x'\nnumbers = [int(num) for num in upc.split('-') if num.isdigit()]\nsum_odd = sum([num for i, num in enumerate(numbers) if i % 2 == 1])\ntriple_sum = sum_odd * 3\nsum_even = sum([num for i, num in enumerate(numbers) if i % 2 == 0])\nn = triple_sum + sum_even\nx = (10 - n % 10) % 10\nprint(x)"
  },
  {
    "example_id": 284,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "units = 2**2010 % 10\nprint(units)"
  },
  {
    "example_id": 285,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "for i in range(1, 75):\n    if i % 2 == 1 and i % 3 == 1 and i % 4 == 1 and i % 6 == 1 and i % 7 == 0:\n        print(i)"
  },
  {
    "example_id": 286,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 1\nwhile True:\n    num_fractions = 1\n    for k in range(2, n+1):\n        num_fractions += 1\n        if num_fractions > n/2:\n            break\n    else:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 287,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 16\nans = (2**n)**2 - 2\nans = ans % 17\nprint(ans)"
  },
  {
    "example_id": 288,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "num = 355\nprint(num % 6)"
  },
  {
    "example_id": 289,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 120301232\nr = n % 8\nprint(r)"
  },
  {
    "example_id": 290,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "668.0"
    ],
    "annotated_answers": [
      "668.0"
    ],
    "solution": "x = 1\nwhile (100*x) % 997!= 1:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 291,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5304.0"
    ],
    "annotated_answers": [
      "528.0"
    ],
    "solution": "num_base_8 = 68 * 78\nprint(num_base_8)"
  },
  {
    "example_id": 292,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "product = 1\nfor i in range(4):\n    product *= (i + 1)\n    if product % 10 == 4:\n        print(sum(range(1, 5)))\n        break"
  },
  {
    "example_id": 293,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "divisors = [1, 2, 4, 5, 10, 11, 25, 26]\neven_divisors = [2, 4, 10, 25]\nprint(len(even_divisors))"
  },
  {
    "example_id": 294,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "801.0"
    ],
    "annotated_answers": [
      "801.0"
    ],
    "solution": "for num in range(600, 900, 3):\n    if num % 89 == 0:\n        print(num)"
  },
  {
    "example_id": 295,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0",
      "1720.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 40\ngcd = x + 3\nlcm = x * (x + 3)\nprint(gcd, lcm)"
  },
  {
    "example_id": 296,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def num_base_digits(num, base):\n    digits = 0\n    while num > 0:\n        num //= base\n        digits += 1\n    return digits\n\ndef num_base_digits_in_range(start, end, base):\n    count = 0\n    for num in range(start, end+1):\n        if num_base_digits(num, base) == 4 and num_base_digits(num, 6) == 2:\n            count += 1\n    return count\n\nprint(num_base_digits_in_range(100, 1000, 10))"
  },
  {
    "example_id": 297,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "sum_of_x = 0\nfor x in range(1, 100):\n    if 67 % (2 * x - 23) == 0:\n        sum_of_x += x\nprint(sum_of_x)"
  },
  {
    "example_id": 298,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "for i in range(0, 225, 9):\n    if i**2 < 225:\n        print(i)\n        break"
  },
  {
    "example_id": 299,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "N = 2009\nsum = 0\nfor num in range(1, N+1):\n    sum += 3**num\nprint(sum % 10)"
  },
  {
    "example_id": 300,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import factorial\n\nN = 7\nremainder = factorial(N) % 23\nprint(remainder)"
  },
  {
    "example_id": 301,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "249475747500.0"
    ],
    "annotated_answers": [
      "1241.0"
    ],
    "solution": "sum = 0\nfor i in range(100, 1000):\n    for j in range(100, 1000):\n        if i**3 == j**2 or i**3 == j**3:\n            sum += i**3\nprint(sum)"
  },
  {
    "example_id": 302,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "a = 2**306 * 3**340\nfor n in range(1, 1000):\n    if a**(1/n) == int(a**(1/n)):\n        print(n)\n        break"
  },
  {
    "example_id": 303,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num_multiples = 0\nfor num in range(100, 4001, 100):\n    if num % 100 == 0:\n        num_multiples += 1\nprint(num_multiples)"
  },
  {
    "example_id": 304,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 3\nb = 5\nab = a*b\nremainder = (a+10)*(b+10) % 20\nprint(remainder)"
  },
  {
    "example_id": 305,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 1\nwhile 7 + (30 * N) in [2, 3, 5, 7]:\n    N += 1\nprint(N)"
  },
  {
    "example_id": 306,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "16592.0"
    ],
    "solution": "sum_of_n = 0\nfor n in range(1, 10000):\n    factors = set()\n    for i in range(1, n + 1):\n        if n + 2005 % i == 0:\n            factors.add(i)\n    if len(factors) == 21:\n        sum_of_n += n\nprint(sum_of_n)"
  },
  {
    "example_id": 307,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "sum = 0\nfor num in range(0, 50, 3):\n    sum += num % 10\nprint(sum)"
  },
  {
    "example_id": 308,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# E is the 5th digit from the right\nprint(5)"
  },
  {
    "example_id": 309,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "109.0"
    ],
    "solution": "green = 476 + 104 + 281\nred = 32 + 16 + 80\ngreen_left = green % 94\nprint(green_left)"
  },
  {
    "example_id": 310,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nodd_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\nintersection = [num for num in primes if num in odd_numbers]\nprint(len(intersection))"
  },
  {
    "example_id": 311,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num = 527\nbase = 4\nsum = 0\nwhile num > 0:\n    sum += num % base\n    num //= base\nprint(sum)"
  },
  {
    "example_id": 312,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "122.0"
    ],
    "solution": "for num in range(1, 100):\n    if num % 4 == 3 and num % 3 == 1 and num % 5 == 1:\n        sum = num + (num + 1)\n        print(sum)\n        break"
  },
  {
    "example_id": 313,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "X = 3*2 + 4*5\nprint(X)"
  },
  {
    "example_id": 314,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 3\nn_divisors = 27\nn_divisors_2 = n_divisors // 2\nprint(n_divisors_2)"
  },
  {
    "example_id": 315,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 10\nprint(n)"
  },
  {
    "example_id": 316,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import isprime\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef three_distinct_primes(n):\n    for i in range(2, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if isprime(i) and isprime(j) and isprime(k):\n                    if i + j + k == n:\n                        return True\n    return False\n\ndef sum_of_three(n):\n    for i in range(2, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if isprime(i) and isprime(j) and isprime(k):\n                    if i + j + k == n:\n                        return i + j + k\n    return -1\n\ndef increasing_sequences(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if isprime(i) and isprime(j) and isprime(k):\n                    if i + j + k == n:\n                        count += 1\n    return count\n\ndef main():\n    n = 20\n    count = 0\n    for i in range(2, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if isprime(i) and isprime(j) and isprime(k):\n                    if i + j + k == n:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 317,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "N = 9\ndigits = [1, 3, 7]\nnum_primes = 0\nfor num in range(100):\n    if num % 10 == 1 or num % 10 == 7:\n        continue\n    is_prime = True\n    for digit in digits:\n        if num % digit == 0:\n            is_prime = False\n            break\n    if is_prime:\n        num_primes += 1\nprint(num_primes)"
  },
  {
    "example_id": 318,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "str1 = '11001010100101011'\nstr2 = '110100011000100'\n\nn = int(str1, 10) + int(str2, 10)\nm = int(bin(n)[2:], 2)\n\nprint(n - m)"
  },
  {
    "example_id": 319,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 180\nb = 168\nwhile a!= b:\n    if a > b:\n        a = a - b\n    else:\n        b = b - a\nprint(a)"
  },
  {
    "example_id": 320,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "binary_digits = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]\nbinary_sum = 0\nfor digit in binary_digits:\n    binary_sum += digit\nlargest_prime = 2\nfor prime in range(3, int(binary_sum**0.5) + 1, 2):\n    if binary_sum % prime == 0:\n        largest_prime = prime\n        break\nprint(largest_prime)"
  },
  {
    "example_id": 321,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "steps_taken_by_jan = [130, 127, 124]\nsteps_taken_by_jen = [3, 7, 11]\nsteps_taken_by_both = set(steps_taken_by_jan).intersection(steps_taken_by_jen)\nprint(len(steps_taken_by_both))"
  },
  {
    "example_id": 322,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "365.0"
    ],
    "solution": "n = 365 // 28\nprint(n)"
  },
  {
    "example_id": 323,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "num = 2**3 * 3**1 * 4**3 * 5**8\nprint(len(str(num)))"
  },
  {
    "example_id": 324,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5768876036600566",
      "47"
    ],
    "annotated_answers": [
      "981.0"
    ],
    "solution": "def find_ninety_ninth_base_three_number():\n    number = 0\n    for digit in range(100):\n        number = number * 3 + 1\n    return number\nprint(find_ninety_ninth_base_three_number())"
  },
  {
    "example_id": 325,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1560.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 1560\nfor i in range(2, n+1):\n    if i % n == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 326,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 32_32_23\na = 32\nb = 23\nprint(a+b)"
  },
  {
    "example_id": 327,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.0",
      "1.0",
      "1.0",
      "1.0",
      "0.0",
      "0.0",
      "1.0",
      "1.0",
      "0.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import itertools\n\nfor amount in itertools.permutations([1, 0, 1]):\n    print(amount)"
  },
  {
    "example_id": 328,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "b = 121\nc = 71\nb_base_c = b // c\nc_base_b = c // b\nprint(b_base_c + c_base_b)"
  },
  {
    "example_id": 329,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "b = 3\nif 5 * 25 % b == 137 % b:\n    print(b)"
  },
  {
    "example_id": 330,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "product = 1\nfor num in range(2, 51):\n    product += num\nprint(product % 10)"
  },
  {
    "example_id": 331,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "215.0"
    ],
    "solution": "stamps = 200\npages = 30\nremainder = stamps % pages\nlast_page = remainder\nprint(last_page)"
  },
  {
    "example_id": 332,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "num = 28 * 7 + 6\nprint(num)"
  },
  {
    "example_id": 333,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "triangle = 3\nbox = 6\nbase = 10\nfor num in [36, 64, 81]:\n    digits = [int(digit) for digit in str(num)]\n    if digits.count(triangle) == 1 and digits.count(box) == 1:\n        print(triangle, box)\n        break"
  },
  {
    "example_id": 334,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "product = 1\nfor num in range(2, 12):\n    product += num\nunits_digit = product % 10\nprint(units_digit)"
  },
  {
    "example_id": 335,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "gcd = 6\nlcm = 126\nm = lcm // gcd\nn = lcm // gcd\nprint(m+n)"
  },
  {
    "example_id": 336,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "406.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "product = 2005\nfor num in range(2, 1001):\n    if product % num == 0:\n        other_num = product // num\n        if other_num!= 1:\n            print(other_num + num)\n            break"
  },
  {
    "example_id": 337,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = 2004 % 12\nprint(remainder)"
  },
  {
    "example_id": 338,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1358.0"
    ],
    "annotated_answers": [
      "25168.0"
    ],
    "solution": "num_bin = \"10101001110\"\nnum_oct = int(num_bin, 2)\nprint(num_oct)"
  },
  {
    "example_id": 339,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "remainder = (289 + 9 * 51 + 3**6 + 4 * 187) % 17\nprint(remainder)"
  },
  {
    "example_id": 340,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2193263111263526",
      "17"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "A = 123456789\nB = 987654321\nA_product = A * B\nprint(A_product)"
  },
  {
    "example_id": 341,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "121.0"
    ],
    "solution": "nums = []\nfor num in range(1, 100):\n    divisors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            divisors += 1\n    if divisors == 3:\n        nums.append(num)\nprint(nums[4])"
  },
  {
    "example_id": 342,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2010.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "n = 2010\nwhile n % 10!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 343,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "N = 1\nwhile True:\n    if (N**2 - N + 41) % (N + 1) == 0:\n        break\n    N += 1\nprint(N)"
  },
  {
    "example_id": 344,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "m = 2**1980 * 3**384 * 5**1694 * 7**343\nk = 2\nwhile True:\n    n = k\n    while True:\n        if (m**n) % (2**k) == 0:\n            break\n        n += 1\n    if (m**n) % (2**k) == 0:\n        break\nk += 1\nprint(n+k)"
  },
  {
    "example_id": 345,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "remainder = 7**17 % 5\nprint(remainder)"
  },
  {
    "example_id": 346,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "284.0"
    ],
    "solution": "N = 284\ndivisors = [1, 2, 3, 4, 6]\ndivisors_sum = sum(divisors)\nprint(divisors_sum)"
  },
  {
    "example_id": 347,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.241482788417793"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "t = 12\nlcm = 12*t\nprint(lcm**(1/3))"
  },
  {
    "example_id": 348,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "num = 35**12\nones_digit = num % 10\nprint(ones_digit)"
  },
  {
    "example_id": 349,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "14.0",
      "20.0",
      "26.0",
      "32.0",
      "38.0",
      "44.0",
      "50.0",
      "56.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "n = 0\nwhile n < 60:\n    if n % 6 == 2:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 350,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from math import floor\n\nnum = 123\ndenom = 999\n\ndecimal = num / denom\n\n# Get the number of digits\nnum_digits = floor(abs(decimal))\n\n# Get the 123,999th digit\ndigit = floor(abs(decimal) * 10**(num_digits-1))\n\nprint(digit)"
  },
  {
    "example_id": 351,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "233.0"
    ],
    "solution": "n = 0\nwhile 942 % 15**n == 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 352,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3224.0"
    ],
    "annotated_answers": [
      "3224.0"
    ],
    "solution": "num = 6300\nsum_of_divisors = 0\nfor divisor in range(1, num, 2):\n    if num % divisor == 0:\n        sum_of_divisors += divisor\nprint(sum_of_divisors)"
  },
  {
    "example_id": 353,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "for num in range(1, 21):\n    sum = 0\n    for i in range(1, 7):\n        sum += num + i\n    if sum % num == 0:\n        print(num)\n        break"
  },
  {
    "example_id": 354,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "wait = (8*60 + 35) - (5*60 + 13)\nprint(wait)"
  },
  {
    "example_id": 355,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "number = 14_8 ** 2\nprint(number % 10)"
  },
  {
    "example_id": 356,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5333333333333333"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "p = 7\nsum = 0\nfor i in range(p-2):\n    sum = (sum + (i+1)**(-1) * (p-i-1)**(-1)) % p\nprint(sum)"
  },
  {
    "example_id": 357,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "451.0"
    ],
    "annotated_answers": [
      "451.0"
    ],
    "solution": "num = 10**51 - 9\nsum = 0\nfor digit in str(num):\n    sum += int(digit)\nprint(sum)"
  },
  {
    "example_id": 358,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 12345678 + 1):\n    sum += num\nremainder = sum % 5\nprint(remainder)"
  },
  {
    "example_id": 359,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "fib = [1, 1, 2, 3, 5]\nfor num in range(5, 100, 1):\n    fib.append(fib[-1] + fib[-2])\nremainder = fib[-1] % 4\nprint(remainder)"
  },
  {
    "example_id": 360,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "P = 2 * 3 * 4\nprint(P)"
  },
  {
    "example_id": 361,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "repeating_decimals = 0\nfor n in range(1, 30):\n    fraction = n/30\n    if fraction % 1 == 0:\n        continue\n    repeating_decimals += 1\nprint(repeating_decimals)"
  },
  {
    "example_id": 362,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "# Find the least possible sum\ndef least_sum(num_primes):\n    primes = []\n    sum = 0\n    for i in range(1, num_primes + 1):\n        num = 2**i + 3**i + 5**i\n        if is_prime(num):\n            primes.append(num)\n            sum += num\n    return sum\n\n# Test if a number is prime\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Call the function\nprint(least_sum(3))"
  },
  {
    "example_id": 363,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "338.0"
    ],
    "annotated_answers": [
      "321.0"
    ],
    "solution": "n = 39500 // 123 + 17\nprint(n)"
  },
  {
    "example_id": 364,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "x = 720\na = 1\nwhile a <= x//3:\n    if x % a == 0:\n        break\n    a += 1\nprint(a)"
  },
  {
    "example_id": 365,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "for num in range(1, 1000000):\n    if num % 3 == 2 and num % 7 == 3:\n        print(num)\n        break"
  },
  {
    "example_id": 366,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.35625"
    ],
    "annotated_answers": [
      "0.35625"
    ],
    "solution": "decimal = 57 / 160\nprint(decimal)"
  },
  {
    "example_id": 367,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10010.0"
    ],
    "annotated_answers": [
      "10901.0"
    ],
    "solution": "num = 10001\nwhile num % 11!= 0:\n    num += 1\nprint(num)"
  },
  {
    "example_id": 368,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "423.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "b = 423 % 1000\nprint(b)"
  },
  {
    "example_id": 369,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "days = 0\nfor month in range(1, 13):\n    for day in range(1, 32):\n        if str(day)[0] == '3':\n            days += 1\nprint(days)"
  },
  {
    "example_id": 370,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.936390936390936"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "fracs = [4/37, 3/11, 23/9]\nsum = 0\nfor frac in fracs:\n    sum += frac\nprint(sum)"
  },
  {
    "example_id": 371,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "product = 720\nnum_list = [720, 719, 718]\nmax_num = max(num_list)\nprint(max_num)"
  },
  {
    "example_id": 372,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.24444444444444444"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Number of times one gear turns\ntime1 = 33/3\n# Number of times other gear turns\ntime2 = 45\n# Time in seconds\ntime = time1/time2\n# Next time the gears will have both marks pointing due north\nprint(time)"
  },
  {
    "example_id": 373,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 3\nremainder = (2 * n + 1) % 7\nprint(remainder)"
  },
  {
    "example_id": 374,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "numbers = [12, 21, 34, 43]\ndigits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nfor digit in digits:\n    if digit not in numbers:\n        print(digit)"
  },
  {
    "example_id": 375,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = (13**13 + 5) % 6\nprint(remainder)"
  },
  {
    "example_id": 376,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "262144.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "n = 4**9\nprint(n)"
  },
  {
    "example_id": 377,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "409.0"
    ],
    "solution": "base_9_num = 58\nbase_9_num -= 18\nprint(base_9_num)"
  },
  {
    "example_id": 378,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "num = 1\nwhile True:\n    if str(num).endswith('0') and str(num**2+num).endswith('0'):\n        print(num)\n        break\n    num += 1"
  },
  {
    "example_id": 379,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "residue = pow(17, -1, 83)\nprint(residue)"
  },
  {
    "example_id": 380,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def base_conversion(n, b):\n    return [int(i) for i in str(n)]\n\ndef smallest_base_conversion(n, b):\n    digits = base_conversion(n, b)\n    for i in range(1, len(digits)):\n        if digits[i] > digits[i-1]:\n            return b**i\n    return b\n\nb = smallest_base_conversion(47, 2)\nprint(b)"
  },
  {
    "example_id": 381,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3504.0"
    ],
    "annotated_answers": [
      "3504.0"
    ],
    "solution": "num = 3456\nwhile True:\n    num += 1\n    digits = list(map(int, str(num)))\n    if sum(digits) == 12:\n        print(num)\n        break"
  },
  {
    "example_id": 382,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "A = 300\ndistinct_prime_divisors = set()\nfor prime in range(2, int(A**0.5) + 1):\n    if A % prime == 0:\n        distinct_prime_divisors.add(prime)\n        while A % prime == 0:\n            A //= prime\nprint(sum(distinct_prime_divisors))"
  },
  {
    "example_id": 383,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2310.0"
    ],
    "annotated_answers": [
      "2079.0"
    ],
    "solution": "k = 2010\nwhile True:\n    if (17*k) % 66 == 0 and (13*k) % 105 == 0:\n        break\n    k += 1\nprint(k)"
  },
  {
    "example_id": 384,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "base = 5\nexponent = 100\nnumber = base**exponent\nsum_digits = 0\nfor digit in str(number)[-3:]:\n    sum_digits += int(digit)\nprint(sum_digits)"
  },
  {
    "example_id": 385,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "remainder = sum([7438, 7439, 7440, 7441, 7442, 7443, 7444, 7445]) % 8\nprint(remainder)"
  },
  {
    "example_id": 386,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "793714773254144.0"
    ],
    "annotated_answers": [
      "715.0"
    ],
    "solution": "T = 14**14\nquotient = T // 14\nprint(quotient)"
  },
  {
    "example_id": 387,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 2**8 % 5\nprint(remainder)"
  },
  {
    "example_id": 388,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "N = 8\nsum = 0\nfor i in range(N):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 389,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "num_divisible = 0\nfor num in range(100, 1000):\n    if num % 13 == 0:\n        num_divisible += 1\nprint(num_divisible)"
  },
  {
    "example_id": 390,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1512.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "product = 5 * 6 * 7 * 8 * 9 * 10\nprint(product // 100)"
  },
  {
    "example_id": 391,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# faces = [1, 2, 3, 4, 5, 6, 7]\nfaces = [1, 2, 3, 4, 5, 6, 7, 8]\nvertex_sum = 0\nfor face in faces:\n    for i in range(len(faces)):\n        if face in faces[i:]:\n            vertex_sum += face\n            break\nvertex_sum += sum(faces)\nprint(vertex_sum)"
  },
  {
    "example_id": 392,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "num = 99\nwhile True:\n    if num % 9 == 0 and num % 99 == 0:\n        break\n    num += 1\nprint(num)"
  },
  {
    "example_id": 393,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "N = 240\nremainder = N % 6\nprint(remainder)"
  },
  {
    "example_id": 394,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.72",
      "-5.0"
    ],
    "annotated_answers": [
      "6.72",
      "-05"
    ],
    "solution": "decimal = 21 / (2**2 * 5**7)\nprint(decimal)"
  },
  {
    "example_id": 395,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "889.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "a = 997\nb = 1000\na_inv = pow(a, b-2, b)\nprint(a_inv)"
  },
  {
    "example_id": 396,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "43436.0"
    ],
    "solution": "num = 999\nbase = 6\nprint(num % base)"
  },
  {
    "example_id": 397,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 2\nprint(n)"
  },
  {
    "example_id": 398,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "151.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a = 4 * 66 // 5\nb = 3 * 66 // 2\nprint(a+b)"
  },
  {
    "example_id": 399,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "n = 1\nwhile n % 130!= 1 and n % 231!= 1:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 400,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "952.0"
    ],
    "annotated_answers": [
      "935.0"
    ],
    "solution": "X = 1000\nwhile X % 17!= 0:\n    X -= 8\nprint(X)"
  },
  {
    "example_id": 401,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 10\nvalues = []\nfor i in range(n):\n    for j in range(n):\n        if i + 5 == j + 11:\n            values.append(i + j)\nprint(len(values))"
  },
  {
    "example_id": 402,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3087.0"
    ],
    "annotated_answers": [
      "30325.0"
    ],
    "solution": "num1 = 4321\nnum2 = 1234\nprint(num1 - num2)"
  },
  {
    "example_id": 403,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "N = 48\nnum_factors = 0\nfor num in range(1, N, 2):\n    if N % num == 0:\n        num_factors += 1\nprint(num_factors)"
  },
  {
    "example_id": 404,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 10):\n    sum += 11**i\nprint(sum % 10)"
  },
  {
    "example_id": 405,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "quarters = 10\nwhile quarters >= 5:\n    quarters -= 5\nwhile quarters >= 7:\n    quarters -= 7\nprint(quarters)"
  },
  {
    "example_id": 406,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 1\nwhile True:\n    n += 1\n    num = (1+2+3+n)**2\n    if num**0.25 == int(num**0.25):\n        print(n)\n        break"
  },
  {
    "example_id": 407,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "N = 413_6 - 215_6\nprint(N % 10)"
  },
  {
    "example_id": 408,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "product = 121 * 122 * 123\nremainder = product % 4\nprint(remainder)"
  },
  {
    "example_id": 409,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11]\nsum = 0\nfor num in nums:\n    sum += num\nremainder = sum % 8\nprint(remainder)"
  },
  {
    "example_id": 410,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40507599.0"
    ],
    "annotated_answers": [
      "11121123.0"
    ],
    "solution": "a = 2012_3\nb = 201_3\nproduct = a * b\nprint(product)"
  },
  {
    "example_id": 411,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "292.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "num_divisors = 0\nfor num in range(1, 1000):\n    divisors = set()\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.add(i)\n    if len(divisors) == 3:\n        num_divisors += 1\nprint(num_divisors)"
  },
  {
    "example_id": 412,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = sum(range(2000, 2007, 1)) % 7\nprint(remainder)"
  },
  {
    "example_id": 413,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "315.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "n = 315\nlcm = 7 * 6 * 5 * 4 * 3 * 2 * 1\ngcd = 9\nif lcm % n == 0:\n    print(n)\nelse:\n    print(lcm // n)"
  },
  {
    "example_id": 414,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = int('71'[::-1])\nprint(a)"
  },
  {
    "example_id": 415,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "A = 1234\nB = 4321\ndiff = 0\nfor i in range(4):\n    diff += (A % 10) - (B % 10)\n    A //= 10\n    B //= 10\nprint(diff)"
  },
  {
    "example_id": 416,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "nums = [4, 6, 8, 9, 10]\nsum = 0\nfor num in nums:\n    factors = set()\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            factors.add(i)\n    if len(factors) == 4:\n        sum += num\nprint(sum)"
  },
  {
    "example_id": 417,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "b = 243 % 13\nb = 243 % 15\nprint(b)"
  },
  {
    "example_id": 418,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "a = 27\nb = 17\nc = 40\nnum = (a * b) % c\nprint(num)"
  },
  {
    "example_id": 419,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = sum([1,12,123,1234,12345,123456,1234567,12345678]) % 9\nprint(n)"
  },
  {
    "example_id": 420,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 3\nb = 5\ndivisors = 0\nfor i in range(1, a+1):\n    divisors += 1\nfor i in range(1, 2*a+1):\n    divisors += 1\nfor i in range(1, a+1):\n    divisors += 1\nprint(divisors)"
  },
  {
    "example_id": 421,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "num_congruent = 0\nfor num in range(100, 1000):\n    if num % 19 == 7:\n        num_congruent += 1\nprint(num_congruent)"
  },
  {
    "example_id": 422,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-449.0"
    ],
    "annotated_answers": [
      "-449.0"
    ],
    "solution": "mod = 1199\nx = -1\nwhile (24*x) % mod!= 15:\n    x -= 1\nprint(x)"
  },
  {
    "example_id": 423,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "pages_in_common = 0\nfor num1 in range(1, 51):\n    num2 = 50 - num1\n    if str(num1)[-1] == str(num2)[-1]:\n        pages_in_common += 1\nprint(pages_in_common)"
  },
  {
    "example_id": 424,
    "selected_solution_index": 12,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 13):\n    sum = (sum + num) % 4\nprint(sum)"
  },
  {
    "example_id": 425,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "num_true = 66\nnum_false = 34\nnum_items = 100\nnum_correct = num_true + num_false\nprint(num_correct)"
  },
  {
    "example_id": 426,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "m = 4\nn = 10\nremainder = (m + n) % 14\nprint(remainder)"
  },
  {
    "example_id": 427,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 3\nnum = n+1\nden = 13-n\nif num % den == 0:\n    print('No integer value of n satisfies the condition.')\nelse:\n    print(num // den)"
  },
  {
    "example_id": 428,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1909.0"
    ],
    "annotated_answers": [
      "12023.0"
    ],
    "solution": "n = 2121\nm = 212\nprint(n - m)"
  },
  {
    "example_id": 429,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "number = 46656\nfactors = []\nfor num in range(1, number + 1):\n    if num**2 == number:\n        factors.append(num)\nnum_factors = len(factors)\nprint(num_factors)"
  },
  {
    "example_id": 430,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4051.0"
    ],
    "annotated_answers": [
      "3859.0"
    ],
    "solution": "num = 817_9 - 145_9 - 266_9\nprint(num)"
  },
  {
    "example_id": 431,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "119.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\nnum_palindromes = 0\nfor num in range(1, 2007):\n    if is_palindrome(num):\n        num_palindromes += 1\nprint(num_palindromes)"
  },
  {
    "example_id": 432,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "143.0"
    ],
    "annotated_answers": [
      "143.0"
    ],
    "solution": "num1 = 1001\nnum2 = 2431\n\ndef gcf(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcf(num2, num1 % num2)\n\nprint(gcf(num1, num2))"
  },
  {
    "example_id": 433,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef f(a):\n    return gcd(3*a**2 + 19*a + 30, a**2 + 6*a + 9)\n\ndef max_gcd_diff(a):\n    return max(f(a) - a, a - f(a))\n\nmax_diff = max_gcd_diff(100)\nprint(max_diff)"
  },
  {
    "example_id": 434,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "M = 12\nN = 15\nremainder = (M + N) % 6\nprint(remainder)"
  },
  {
    "example_id": 435,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "37.000000000000455"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "alice = 25.67\nbailey = 17.21\ncindy = 39.17\ndaniel = 26.32\ntotal = alice + bailey + cindy + daniel\nbills = round(total)\nchange = (total - bills) * 100\nprint(change)"
  },
  {
    "example_id": 436,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nproduct = 1\nfor prime in primes:\n    product *= prime\nremainder = product % 16\nprint(remainder)"
  },
  {
    "example_id": 437,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "num_digits = len(str(10**100-9**100))\nprint(num_digits)"
  },
  {
    "example_id": 438,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2000.0"
    ],
    "solution": "num_repeating = 0\nfor n in range(1, 2011):\n    fraction = n**2 / 2010\n    if str(fraction)[2:] == str(fraction)[:-2]:\n        num_repeating += 1\nprint(num_repeating)"
  },
  {
    "example_id": 439,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef largest_palindrome(base):\n    n = 1\n    while is_palindrome(n):\n        n = n * base + 1\n    return n // base - 1\n\nprint(largest_palindrome(3))"
  },
  {
    "example_id": 440,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "427.0"
    ],
    "solution": "num1 = 126\nnum2 = 54\nresult = num1 - num2\nprint(result)"
  },
  {
    "example_id": 441,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "from sympy import lcm\n\nm = 123\nwhile lcm(8*m, 10**10)!= 4*lcm(m, 10**10):\n    m += 1\nprint(m)"
  },
  {
    "example_id": 442,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "num_remainders = 0\nfor num in range(1, 101):\n    if num % 5 == 1:\n        num_remainders += 1\npercent = num_remainders / 100\nprint(percent)"
  },
  {
    "example_id": 443,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "least_integer = 3 * 4 + 4 * 5\nprint(least_integer)"
  },
  {
    "example_id": 444,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "777.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "from sympy import primefactors\n\nN = 100\nwhile N < 1000:\n    factors = primefactors(N)\n    if sum(factors) == 47:\n        print(N)\n        break\n    N += 1"
  },
  {
    "example_id": 445,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "num1 = 29 * 79 + 31 * 81\nunits_digit = num1 % 10\nprint(units_digit)"
  },
  {
    "example_id": 446,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1559.0"
    ],
    "annotated_answers": [
      "338.0"
    ],
    "solution": "num_7 = 235\nnum_5 = 1324\nanswer = num_7 + num_5\nprint(answer)"
  },
  {
    "example_id": 447,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "base = 4\nnum1 = 2\nnum2 = 2\nunits_digit = (num1 * num2) % base\nprint(units_digit)"
  },
  {
    "example_id": 448,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "remainder = (129**34 + 96**38) % 11\nprint(remainder)"
  },
  {
    "example_id": 449,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "m = 10\nprint(m)"
  },
  {
    "example_id": 450,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "6.0",
      "12.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "sum = 0\nfor i in range(4):\n    sum += 2*i\n    print(sum)"
  },
  {
    "example_id": 451,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def base_to_digits(num, base):\n    digits = []\n    while num > 0:\n        digits.append(num % base)\n        num //= base\n    return digits\n\ndef sum_digits(digits):\n    return sum(digits)\n\ndef base_to_sum_of_digits(num, base):\n    return sum_digits(base_to_digits(num, base))\n\nprint(base_to_sum_of_digits(269, 5))"
  },
  {
    "example_id": 452,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "x = 11\nwhile True:\n    if (2 + x + 10) % 10 == 1:\n        break\n    x += 1\nprint(x)"
  },
  {
    "example_id": 453,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "sum_modulo_inverses = 0\nfor num in range(1, 13):\n    sum_modulo_inverses += 13 - (num % 13)\n    sum_modulo_inverses %= 13\nprint(sum_modulo_inverses)"
  },
  {
    "example_id": 454,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 4\nn_super = n**n\nprint(n_super % 10)"
  },
  {
    "example_id": 455,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "modulo = 16\nsum = 0\nfor num in range(1, 9):\n    sum += modulo - (num % modulo)\nprint(sum % modulo)"
  },
  {
    "example_id": 456,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "sum_of_remaining_cards = 99 * 78\nremoved_card_value = sum_of_remaining_cards // 77\nprint(removed_card_value)"
  },
  {
    "example_id": 457,
    "selected_solution_index": 0,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "num_7 = 321\nnum_5 = 321\nnum_10 = num_7 - num_5\nprint(num_10)"
  },
  {
    "example_id": 458,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "base_4 = '332'\nbase_3 = '212'\nbase_10 = int(base_4, 4) - int(base_3, 3)\nprint(base_10)"
  },
  {
    "example_id": 459,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "units_digit = 18**6 % 10\nprint(units_digit)"
  },
  {
    "example_id": 460,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "for n in range(101):\n    if -314159 % 101 == n:\n        print(n)\n        break"
  },
  {
    "example_id": 461,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "num = 225**66 - 327**66\nremainder = num % 17\nprint(remainder)"
  },
  {
    "example_id": 462,
    "selected_solution_index": 13,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 5\nb = 10\nc = 15\nremainder = (a % 7 + b % 7 + c % 7) % 7\nprint(remainder)"
  },
  {
    "example_id": 463,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "population = 137\ntime = 506\nminutes_per_hour = 60\nminutes_per_hour_minus_1 = minutes_per_hour - 1\ninitial_population = population * (time // minutes_per_hour_minus_1)\nfinal_population = population * (time // minutes_per_hour)\ndifference = final_population - initial_population\nprint(difference)"
  },
  {
    "example_id": 464,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 142857\nprint(n % 18)"
  },
  {
    "example_id": 465,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "num = 5\nwhile num % 2 == 0:\n    num -= 1\nprint(num)"
  },
  {
    "example_id": 466,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "residue = 9 % 100\nprint(residue)"
  },
  {
    "example_id": 467,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "P = 9\nb = 10\nQ = P/2\nP = P - 2\nprint(P)"
  },
  {
    "example_id": 468,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "15.0",
      "20.0",
      "24.0",
      "30.0",
      "40.0",
      "60.0",
      "120.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "n1 = 840\nn2 = 960\nn3 = 1200\ndivisors = []\nfor num in range(1, max(n1, n2, n3)):\n    if n1 % num == 0 and n2 % num == 0 and n3 % num == 0:\n        divisors.append(num)\nprint(divisors)"
  },
  {
    "example_id": 469,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = 20\nb = 18\nc = 17\n\nremainder = (2*a + b - c) % 19\nprint(remainder)"
  },
  {
    "example_id": 470,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1950.0"
    ],
    "annotated_answers": [
      "1950.0"
    ],
    "solution": "expression = 2**2001 * 5**1950 // 4**27\ndigits = len(str(expression))\nprint(digits)"
  },
  {
    "example_id": 471,
    "selected_solution_index": 8,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "tiles = 10\nrectangles = 10\ntile_per_rectangle = tiles // rectangles\nprint(tile_per_rectangle)"
  },
  {
    "example_id": 472,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "num = 11\nwhile True:\n    if num ** 2 > num and num ** 3 > num:\n        break\n    num += 1\nprint(num)"
  },
  {
    "example_id": 473,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.9"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "mean = 0\nfor num in range(10, 100):\n    first_digit = int(str(num)[0])\n    second_digit = int(str(num)[1])\n    product = first_digit * second_digit\n    if num == first_digit + second_digit + product:\n        mean += num\nmean /= len(range(10, 100))\nprint(mean)"
  },
  {
    "example_id": 474,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.46153846153846156"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "frac_6_13 = 6/13\nnum_digits = 453\nfrac_6_13 = round(frac_6_13, num_digits)\nprint(frac_6_13)"
  },
  {
    "example_id": 475,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "18.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "base = 10\n\na = 6\nb = 6\nc = 5\nd = 1\n\nprint(a + b + c + d)\nprint(a + b + c + d)"
  },
  {
    "example_id": 476,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "trees = 8 + 9 + 10\nprint(trees)"
  },
  {
    "example_id": 477,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "n = 1\nwhile True:\n    product = 1\n    for i in range(1, n + 1):\n        product *= i\n    if product == n**6:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 478,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "number = 20_7\nif number % 11 == 0:\n    print(0)\nelse:\n    print(11 - (number % 11))"
  },
  {
    "example_id": 479,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "6.0",
      "12.0",
      "18.0",
      "24.0",
      "30.0",
      "36.0",
      "42.0",
      "48.0",
      "54.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 0\nwhile n < 10:\n    num_apples = 6 * n\n    if num_apples % 1 == 0:\n        print(num_apples)\n    n += 1"
  },
  {
    "example_id": 480,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "steps = 11\ntotal_steps = 139\nstart_step = 1\nend_step = start_step + total_steps % steps\nprint(end_step)"
  },
  {
    "example_id": 481,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "sum = 1\nfor i in range(100):\n    sum = (sum + 2**i) % 7\nprint(sum)"
  },
  {
    "example_id": 482,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = 0\nfor num in range(33818, 33823):\n    remainder += num**2\nremainder %= 17\nprint(remainder)"
  },
  {
    "example_id": 483,
    "selected_solution_index": 4,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "base = 11\nfactorial = 10\nnum_zeroes = 0\nwhile factorial > 0:\n    factorial //= base\n    num_zeroes += factorial\nprint(num_zeroes)"
  },
  {
    "example_id": 484,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "A = 1\nB = 2\nC = 3\nsum = A + B + C\nprint(sum)"
  },
  {
    "example_id": 485,
    "selected_solution_index": 2,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "for prime in range(26, 100, 2):\n    if prime % 25 == 2:\n        print(prime)\n        break"
  },
  {
    "example_id": 486,
    "selected_solution_index": 3,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "num = 629\nnum_base_7 = str(num)[::-1]\nnum_base_8 = str(num)[::-1]\ncommon_digits = 0\nfor digit in num_base_7:\n    if digit in num_base_8:\n        common_digits += 1\nprint(common_digits)"
  },
  {
    "example_id": 487,
    "selected_solution_index": 6,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "2045.0"
    ],
    "solution": "quotient = 413_5 // 2_5\nprint(quotient)"
  },
  {
    "example_id": 488,
    "selected_solution_index": 5,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = 8\nmodulus = 17\nremainder = n % modulus\nprint(remainder)"
  },
  {
    "example_id": 489,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "expression = '8888'\nsum_digits = sum(int(digit) for digit in expression)\nprint(sum_digits)"
  },
  {
    "example_id": 490,
    "selected_solution_index": 11,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12165.5"
    ],
    "annotated_answers": [
      "499.0"
    ],
    "solution": "plumber_cost = 242_5 * 3.5 + 367_8\nprint(plumber_cost)"
  },
  {
    "example_id": 491,
    "selected_solution_index": 7,
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = pow(5, 30, 7)\nprint(remainder)"
  },
  {
    "example_id": 492,
    "selected_solution_index": 14,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 2 * 3\nprint(remainder)"
  },
  {
    "example_id": 493,
    "selected_solution_index": 1,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "9.0",
      "16.0",
      "25.0",
      "36.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "num = 2**5 * 3**6\nperfect_squares = [1, 4, 9, 16, 25, 36]\nfactors = []\nfor num in perfect_squares:\n    if num % num == 0:\n        factors.append(num)\nprint(factors)"
  },
  {
    "example_id": 494,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "621.0"
    ],
    "solution": "for num in range(100, 1000):\n    digits = str(num)\n    product = 1\n    for digit in digits:\n        product *= int(digit)\n    if product == 12:\n        print(num)\n        break"
  },
  {
    "example_id": 495,
    "selected_solution_index": 9,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "# m = 13, 14\n# 6, 5\nn = 100\nm = 13\nnum_planets = 0\nwhile n >= m:\n    num_planets += 1\n    n -= m\nprint(num_planets)"
  },
  {
    "example_id": 496,
    "selected_solution_index": 10,
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 3\na = 1\nb = 2\nab = a*b\nab_inv = pow(ab, -1, n)\na_inv = pow(a, -1, n)\nb_inv = pow(b, -1, n)\nprint(((a_inv + b_inv)*(ab_inv-2)) % n)"
  }
]