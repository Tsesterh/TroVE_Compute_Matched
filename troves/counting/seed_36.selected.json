[
  {
    "example_id": 0,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "result = 52\nprint(result)"
  },
  {
    "example_id": 1,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "110.0"
    ],
    "solution": "# Calculate number of students who take calculus\nnum_students_calc = 15 + 15\n\n# Calculate number of students who don't take any of the classes\nnum_students_not_calc = 15\n\n# Calculate number of students who take calculus and chemistry\nnum_students_calc_chem = 75\n\n# Calculate number of students who take calculus and physics\nnum_students_calc_phys = 75\n\n# Calculate number of students who take physics\nnum_students_phys = 2 * num_students_calc_chem - num_students_calc_phys\n\n# Calculate number of students who take calculus\nnum_students_calc = 180 - num_students_not_calc - num_students_calc_chem\n\n# Calculate number of students who take both calculus and chemistry\nnum_students_both_calc_chem = 30\n\n# Calculate number of students who take both physics and calculus\nnum_students_both_phys_calc = 30\n\n# Calculate number of students who take physics\nnum_students_phys = num_students_calc - num_students_both_calc_chem + num_students_both_phys_calc\n\nprint(num_students_phys)"
  },
  {
    "example_id": 2,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2025.0",
      "-5.0",
      "-12.0",
      "5.0",
      "22.0",
      "8.227228"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "now = datetime.datetime.now()\nprint(now)"
  },
  {
    "example_id": 3,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2025.0",
      "-5.0",
      "-12.0",
      "5.0",
      "24.0",
      "28.706917"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "now = datetime.datetime.now()\nprint(now)"
  },
  {
    "example_id": 4,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "# 10 students\nn = 10\n# Chipotle or Panda Express\nm = 2\n\n# how many ways to collectively go to lunch\nresult = math.comb(n, m)\nprint(result)"
  },
  {
    "example_id": 5,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# define the number of tourist locations in Italy\nn = 5\n\n# define the number of tourist locations Mary wants to visit\nk = 3\n\n# compute the number of ways to choose k locations to visit\nresult = math.comb(n, k)\n\n# print the result\nprint(result)"
  },
  {
    "example_id": 6,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import itertools\n\n# Generate all four-digit combinations\nfor combination in itertools.combinations_with_replacement(range(2, 6), 4):\n    # Check if the combination is a palindrome\n    if combination[0] == combination[3] and combination[1] == combination[2]:\n        print(combination)"
  },
  {
    "example_id": 7,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "result = math.comb(8, 6)\nprint(result)"
  },
  {
    "example_id": 8,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110.0",
      "70.0",
      "95.0",
      "95.0",
      "-25.0",
      "15.0",
      "0.0",
      "-85.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# number of people wearing sunglasses\nsunglasses = 110\n# number of people wearing bathing suits\nbathing_suits = 70\n# number of people wearing a hat\nhat = 95\n# number of people wearing all three items\nall_three = 30 + 25 + 40\n# number of people wearing only bathing suits\nbathing_suits_only = bathing_suits - all_three\n# number of people wearing only sunglasses\nsunglasses_only = sunglasses - all_three\n# number of people wearing only a hat\nhat_only = hat - all_three\n# number of people wearing no items\nno_items = 190 - (sunglasses + bathing_suits + hat)\nprint(f'Number of people wearing sunglasses: {sunglasses}')\nprint(f'Number of people wearing bathing suits: {bathing_suits}')\nprint(f'Number of people wearing a hat: {hat}')\nprint(f'Number of people wearing all three items: {all_three}')\nprint(f'Number of people wearing only bathing suits: {bathing_suits_only}')\nprint(f'Number of people wearing only sunglasses: {sunglasses_only}')\nprint(f'Number of people wearing only a hat: {hat_only}')\nprint(f'Number of people wearing no items: {no_items}')"
  },
  {
    "example_id": 9,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "262144.0"
    ],
    "solution": "# Define the number of faces on the die\nn = 8\n\n# Define the number of rolls\nk = 6\n\n# Initialize the number of sequences\nnum_sequences = 0\n\n# Initialize the current sequence\ncurrent_sequence = []\n\n# Loop through each possible roll\nfor i in range(1, n + 1):\n    # Add the current roll to the sequence\n    current_sequence.append(i)\n\n    # If the sequence is of length k, count it\n    if len(current_sequence) == k:\n        num_sequences += 1\n\n    # If the sequence is longer than k, remove the first roll\n    if len(current_sequence) > k:\n        current_sequence.pop(0)\n\n# Print the number of sequences\nprint(num_sequences)"
  },
  {
    "example_id": 10,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "start = datetime.datetime.now()\nresult = math.factorial(3)\nend = datetime.datetime.now()\nprint(\"result =\", result)\nprint(\"time taken =\", end - start)"
  },
  {
    "example_id": 11,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "363.0"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "rows = 11\nseats = 33\nreserved = rows * seats\nprint(reserved)"
  },
  {
    "example_id": 12,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if j == i:\n                count += 1\n    return count\n\ndef solution():\n    min_value = math.inf\n    for i in range(1, 1000):\n        count = f(i)\n        if count < min_value:\n            min_value = count\n    return min_value\n\nprint(solution())"
  },
  {
    "example_id": 13,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16800.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "# Number of $7^{\\mathrm{th}}$ graders\nn = 4\n# Number of $8^{\\mathrm{th}}$ graders\nm = 6\n# Total number of students\nk = n + m\n\n# Number of ways to choose one $7^{\\mathrm{th}}$ grader\nresult = math.comb(n, 1)\n\n# Number of ways to choose three $8^{\\mathrm{th}}$ graders\nresult *= math.comb(m, 3)\n\n# Total number of ways\nresult *= math.comb(k, 4)\n\nprint(result)"
  },
  {
    "example_id": 14,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6400000000000001",
      "0.39437037037037026",
      "0.25239703703703703"
    ],
    "annotated_answers": [
      "0.076"
    ],
    "solution": "# Probability of two freshmen girls\n# (12/15)^2\np_girls = (12/15)**2\nprint(p_girls)\n\n# Probability of three freshmen boys\n# (11/15)^3\np_boys = (11/15)**3\nprint(p_boys)\n\n# Probability of two freshmen girls and three freshmen boys\np = p_girls * p_boys\nprint(p)"
  },
  {
    "example_id": 15,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "result = math.comb(16, 4) - math.comb(16, 12)\nprint(result)"
  },
  {
    "example_id": 16,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 2007):\n    sum += math.factorial(i)\n\nprint(sum%10)"
  },
  {
    "example_id": 17,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "968.0"
    ],
    "solution": "# Compute the answer\nresult = math.comb(10, 3)\nprint(result)"
  },
  {
    "example_id": 18,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def is_palindrome(num):\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return True\n    else:\n        return False\n\nresult = 0\nfor i in range(1000, 10000):\n    if is_palindrome(i):\n        result += 1\n\nprint(result)"
  },
  {
    "example_id": 19,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1540.0"
    ],
    "annotated_answers": [
      "1540.0"
    ],
    "solution": "result = math.comb(22, 19)\nprint(result)"
  },
  {
    "example_id": 20,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "result = math.comb(15, 2)\nprint(result)"
  },
  {
    "example_id": 21,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "# Define the number of students\nn = 15\n\n# Define the number of students to be selected\nk = 13\n\n# Compute the number of ways to select k students\nresult = math.comb(n, k)\n\n# Print the result\nprint(result)"
  },
  {
    "example_id": 22,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "ways = 7 * 6 / 2\nprint(ways)"
  },
  {
    "example_id": 23,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "171.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "result = math.comb(9, 1) + math.comb(9, 2) + math.comb(9, 4)\nprint(result)"
  },
  {
    "example_id": 24,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0",
      "19.0",
      "19.0",
      "19.0",
      "19.0",
      "1.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "# Create a dictionary to store the number of distinct sequences\n# for each letter of TARGET\ndistinct_seq = {'T': 1, 'A': 1, 'R': 1, 'G': 1, 'E': 1, 'L': 1}\n\n# Iterate through each letter of TARGET\nfor letter in 'TARGET':\n    # Iterate through each sequence of length 3\n    # starting from the letter\n    for seq in range(1, 4):\n        # Get the first letter of the sequence\n        first_letter = letter\n        # Get the second letter of the sequence\n        second_letter = letter\n        # Get the third letter of the sequence\n        third_letter = letter\n        # Iterate through each letter of TARGET\n        for next_letter in 'TARGET':\n            # Check if the current letter is the first letter of the sequence\n            if first_letter == letter:\n                # Check if the current letter is the second letter of the sequence\n                if second_letter == letter:\n                    # Check if the current letter is the third letter of the sequence\n                    if third_letter == letter:\n                        # Increment the number of distinct sequences\n                        # for the current letter\n                        distinct_seq[letter] += 1\n\n# Print the number of distinct sequences\n# for each letter of TARGET\nprint(distinct_seq)"
  },
  {
    "example_id": 25,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef has_units_digit_of_3(n):\n    return n % 10 == 3\n\n\ndef count_primes(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i) and has_units_digit_of_3(i):\n            count += 1\n    return count\n\n\nprint(count_primes(100))"
  },
  {
    "example_id": 26,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "111.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "result = 0\nfor i in range(1, 1000):\n    if str(i)[0] == '8':\n        result += 1\nprint(result)"
  },
  {
    "example_id": 27,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39916800.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Number of ways to arrange the letters of the word ELEVEN\nresult = math.factorial(11)\nprint(result)"
  },
  {
    "example_id": 28,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "835.0"
    ],
    "annotated_answers": [
      "835.0"
    ],
    "solution": "count = 0\nfor i in range(1, 2005):\n    if i % 3 == 0 or i % 4 == 0:\n        if i % 12!= 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 29,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 0\nwhile True:\n    mean = 0\n    for i in range(n+1):\n        mean += math.comb(n, i)\n    mean /= n+1\n    if mean > 51.2:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 30,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "result = 2 * math.factorial(7) / (math.factorial(3) * math.factorial(4))\nprint(result)"
  },
  {
    "example_id": 31,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "# Define a function to compute permutations\ndef permutations(word):\n    permutations = 1\n    for i in range(len(word)):\n        permutations *= len(word) - i\n    return permutations\n\n# Compute permutations\npermutations = permutations(\"Hawaii\")\nprint(permutations)"
  },
  {
    "example_id": 32,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "start = 17/3\nend = (17/3)**2\n\nresult = int(end - start)\nprint(result)"
  },
  {
    "example_id": 33,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# boxes of pencils\nboxes_of_pencils = 5\n# boxes of pens\nboxes_of_pens = 4\n# boxes of pens and pencils\nboxes_of_both = 2\n\n# total number of boxes\ntotal_boxes = 10\n\n# boxes that contain neither pens nor pencils\nboxes_of_neither = total_boxes - boxes_of_pencils - boxes_of_pens + boxes_of_both\n\nprint(boxes_of_neither)"
  },
  {
    "example_id": 34,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.033698267000000004"
    ],
    "annotated_answers": [
      "0.03"
    ],
    "solution": "result = (0.323 ** 3)\nprint(result)"
  },
  {
    "example_id": 35,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# 5! / 2! = 10\nresult = math.comb(5, 2)\nprint(result)"
  },
  {
    "example_id": 36,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "325.0"
    ],
    "annotated_answers": [
      "650.0"
    ],
    "solution": "ways = 26 * 25 / 2\nprint(ways)"
  },
  {
    "example_id": 37,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": ""
  },
  {
    "example_id": 38,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "# Define the number of math books\nnum_math_books = 2\n# Define the number of physics books\nnum_physics_books = 1\n\n# Define the number of books on the shelf\nnum_books = 7\n\n# Define the number of ways to arrange the books\nnum_ways = math.factorial(num_books) / (math.factorial(num_math_books) * math.factorial(num_physics_books) * math.factorial(num_books - num_math_books - num_physics_books))\n\n# Print the number of ways\nprint(num_ways)"
  },
  {
    "example_id": 39,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "# variables\nn = 6\nk = 2\n\n# define combinations\ndef combinations(n, k):\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    return combinations(n - 1, k - 1) + combinations(n - 1, k)\n\n# calculate combinations\nresult = combinations(n, k)\nprint(result)"
  },
  {
    "example_id": 40,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.0",
      "0.0",
      "1.6",
      "-05",
      "2.0",
      "0.0",
      "0.0",
      "1",
      "-06",
      "1.0",
      "0.0",
      "0.0",
      "1",
      "-06",
      "5.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "import math\nimport datetime\n\n# Define the function that counts the number of distinct arrangements\ndef count_distinct_arrangements(number_of_trees, number_of_identical_trees):\n    return math.factorial(number_of_trees) // (math.factorial(number_of_identical_trees) * math.factorial(number_of_trees - number_of_identical_trees))\n\n# Define the function that prints the number of distinct arrangements\ndef print_distinct_arrangements(number_of_trees, number_of_identical_trees):\n    print(count_distinct_arrangements(number_of_trees, number_of_identical_trees))\n\n# Define the function that prints the number of distinct arrangements and the time it took to compute\ndef print_distinct_arrangements_with_time(number_of_trees, number_of_identical_trees):\n    start_time = datetime.datetime.now()\n    print_distinct_arrangements(number_of_trees, number_of_identical_trees)\n    end_time = datetime.datetime.now()\n    print(\"Time taken to compute: \" + str(end_time - start_time))\n\n# Call the function with the arguments\nprint_distinct_arrangements_with_time(2, 2)\nprint_distinct_arrangements_with_time(2, 1)\nprint_distinct_arrangements_with_time(5, 5)\nprint_distinct_arrangements_with_time(5, 1)"
  },
  {
    "example_id": 41,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "960.0"
    ],
    "solution": "# Create a variable to count the number of ways\ncount = 0\n\n# Loop through 0 to 7\nfor i in range(8):\n\n    # If i is not 0 or 7\n    if i not in [0, 7]:\n\n        # If i + 1 is not 0 or 7\n        if (i + 1) not in [0, 7]:\n\n            # Increment count\n            count += 1\n\n# Print count\nprint(count)"
  },
  {
    "example_id": 42,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31752.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# Steve and Danny are on opposite teams\nresult = math.comb(10, 5) * math.comb(9, 5)\nprint(result)"
  },
  {
    "example_id": 43,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "# Number of points on the boundary\nboundary_points = 8\n\n# Number of points in the interior\ninterior_points = (2 * 4) - boundary_points\n\nprint(interior_points)"
  },
  {
    "example_id": 44,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "handshakes = 10 * 9 / 2\nprint(handshakes)"
  },
  {
    "example_id": 45,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def distinct_elements(n):\n    result = []\n    for i in range(n-2, n+2):\n        for j in range(2, n+2):\n            if i!= j:\n                result.append(i * j)\n    return len(set(result))\n\nn = 1\nwhile distinct_elements(n)!= 3:\n    n += 1\n\nprint(n)"
  },
  {
    "example_id": 46,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "4.0",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Get current date and time\nnow = datetime.datetime.now()\n\n# Create a list of numbers\nnumbers = [1, 2, 3, 4, 5, 6]\n\n# Create a list of divisors\ndivisors = []\n\n# Loop through each number in the list\nfor number in numbers:\n    # Create a list of divisors\n    divisors.append(number)\n\n    # Loop through each number in the list\n    for num in numbers:\n        # Check if the number is a divisor\n        if num % number == 0 and num!= number:\n            # Add the number to the list of divisors\n            divisors.append(num)\n\n# Sort the list\ndivisors = sorted(divisors)\n\n# Create a list of combinations\ncombinations = []\n\n# Loop through each number in the list\nfor num in numbers:\n    # Create a list of divisors\n    divisors = []\n\n    # Loop through each number in the list\n    for num2 in numbers:\n        # Check if the number is a divisor\n        if num2 % num == 0 and num2!= num:\n            # Add the number to the list of divisors\n            divisors.append(num2)\n\n    # Sort the list\n    divisors = sorted(divisors)\n\n    # Create a list of combinations\n    combinations.append(divisors)\n\n# Print the combinations\nprint(combinations)"
  },
  {
    "example_id": 47,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3457.0",
      "3459.0",
      "3461.0",
      "3463.0",
      "3465.0",
      "3467.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define variables\nnum = 3456\n\n# Define digits\ndigits = [3, 4, 5, 6]\n\n# Define length\nlength = 3\n\n# Define odd numbers\nodd_numbers = []\n\n# Iterate through digits\nfor digit in digits:\n    # Iterate through length\n    for i in range(length):\n        # Check if number is odd\n        if num % 2 == 1:\n            # Add number to list\n            odd_numbers.append(num)\n        # Increment number\n        num += 1\n\n# Print list\nprint(odd_numbers)"
  },
  {
    "example_id": 48,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40320.0"
    ],
    "annotated_answers": [
      "6720.0"
    ],
    "solution": "result = math.perm(len('PARABOLA'))\nprint(result)"
  },
  {
    "example_id": 49,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4495.0"
    ],
    "annotated_answers": [
      "4495.0"
    ],
    "solution": "result = math.comb(31, 28)\nprint(result)"
  },
  {
    "example_id": 50,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "840.0"
    ],
    "annotated_answers": [
      "840.0"
    ],
    "solution": "result = math.comb(8, 3) * math.comb(6, 2)\nprint(result)"
  },
  {
    "example_id": 51,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "n = 4\nk = 4\nans = 0\nfor i in range(0, k+1):\n    ans += binomial(n, i)\nprint(ans)"
  },
  {
    "example_id": 52,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "540.0"
    ],
    "solution": "# number of ways to stack cars in each lane\nstacks_left = 6\nstacks_straight = 5\nstacks_right = 4\n\n# number of ways to stack cars in each lane\ntotal_stacks = stacks_left * stacks_straight * stacks_right\n\n# print the number of ways\nprint(total_stacks)"
  },
  {
    "example_id": 53,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "result = 45\nprint(result)"
  },
  {
    "example_id": 54,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "534.0"
    ],
    "annotated_answers": [
      "147.0"
    ],
    "solution": "result = 0\nfor i in range(3):\n    result += len(str(math.factorial(i*100)))\nprint(result)"
  },
  {
    "example_id": 55,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "def is_permutation(x, y):\n    return sorted(x) == sorted(y)\n\ndef is_distinct(x):\n    return len(set(x)) == len(x)\n\ndef is_product_2310(x):\n    return x[0] * x[1] * x[2] == 2310\n\ndef three_element_sets(n):\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            yield [i, j]\n\ndef three_element_sets_2310(n):\n    for x in three_element_sets(n):\n        if is_permutation(x, [2, 3, 10]):\n            yield x\n\ndef three_element_sets_2310_product(n):\n    for x in three_element_sets_2310(n):\n        if is_product_2310(x):\n            yield x\n\ndef three_element_sets_2310_product_count(n):\n    return len(list(three_element_sets_2310_product(n)))\n\nprint(three_element_sets_2310_product_count(10))"
  },
  {
    "example_id": 56,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "n = 0\nwhile 3 ** n <= 200:\n    n += 1\nprint(n - 1)"
  },
  {
    "example_id": 57,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "result = 0\nfor i in range(10000, 100000):\n    if str(i) == str(i)[::-1]:\n        result += 1\nprint(result)"
  },
  {
    "example_id": 58,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "306.0"
    ],
    "annotated_answers": [
      "306.0"
    ],
    "solution": "result = math.factorial(18)/math.factorial(16)\nprint(result)"
  },
  {
    "example_id": 59,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "7.0",
      "2.0",
      "3.0",
      "9.0",
      "60.0",
      "0.0",
      "7.0",
      "2.0",
      "3.0",
      "9.0",
      "0.0",
      "0.0",
      "7.0",
      "2.0",
      "3.0",
      "9.0",
      "9.0",
      "0.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "import itertools\n\n# The number of people.\nn = 8\n\n# The number of positions.\nk = 3\n\n# The number of people who are not allowed to hold any of the positions.\nn_not_allowed = 0\n\n# The number of people who are allowed to hold at least one of the positions.\nn_allowed = n - n_not_allowed\n\n# The number of ways to choose the people who are allowed to hold at least one of the positions.\nn_ways = itertools.combinations(range(n), k)\n\n# The number of ways to choose the people who are allowed to hold at least one of the positions and the people who are not allowed to hold any of the positions.\nn_ways_with_gaps = itertools.combinations_with_replacement(range(n), k)\n\n# The number of ways to choose the people who are allowed to hold at least one of the positions and the people who are not allowed to hold any of the positions.\nn_ways_without_gaps = itertools.combinations(range(n), k)\n\nprint(n_ways)\nprint(n_ways_with_gaps)\nprint(n_ways_without_gaps)"
  },
  {
    "example_id": 60,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110.0"
    ],
    "annotated_answers": [
      "156.0"
    ],
    "solution": "result = math.comb(11, 3) - math.comb(11, 2)\nprint(result)"
  },
  {
    "example_id": 61,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9240.0"
    ],
    "solution": "# Number of ways to divide 12 people into 3 groups:\n# C(12, 3) = 220\n# Number of ways to divide 12 people into 4 groups:\n# C(12, 4) = 330\n# Number of ways to divide 12 people into 5 groups:\n# C(12, 5) = 660\n\n# Number of ways to divide 12 people into 4 groups:\n# C(12, 4) = 330\n\n# Henry has to be in the group of 4:\n# C(11, 4) = 330\n\n# Total number of ways to divide 12 people into 4 groups with Henry in the group of 4:\n# 330 - 330 = 0\n\nprint(0)"
  },
  {
    "example_id": 62,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2772.0"
    ],
    "annotated_answers": [
      "28800.0"
    ],
    "solution": "# Compute the number of ways\nresult = math.factorial(11) / math.factorial(5) / math.factorial(5) / math.factorial(1)\nprint(result)"
  },
  {
    "example_id": 63,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# number of slices with pepperoni\nn_pepperoni = 5\n# number of slices with mushrooms\nn_mushrooms = 8\n\n# number of slices with both\nn_both = n_pepperoni * n_mushrooms\n\nprint(n_both)"
  },
  {
    "example_id": 64,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "next = 10\nprint(next)"
  },
  {
    "example_id": 65,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8008.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# number of frosting types\nnum_frosting_types = 6\n\n# number of cupcakes\nnum_cupcakes = 10\n\n# number of cupcakes per color\ncupcakes_per_color = [4, 2, 2, 2, 3, 3]\n\n# total number of cupcakes\ntotal_cupcakes = sum(cupcakes_per_color)\n\n# number of combinations\ncombinations = math.comb(total_cupcakes, num_cupcakes)\n\n# print result\nprint(combinations)"
  },
  {
    "example_id": 66,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "result = (math.factorial(10) + math.factorial(11) + math.factorial(12))/(math.factorial(10) + math.factorial(11))\nprint(result)"
  },
  {
    "example_id": 67,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "2.0",
      "1.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "def seating(n):\n    for i in range(0, n):\n        if i % 2 == 0:\n            print(i, (i + 1) % n, (i + 2) % n, (i + 3) % n, (i + 4) % n, (i + 5) % n)\n        else:\n            print((i + 1) % n, i, (i + 2) % n, (i + 3) % n, (i + 4) % n, (i + 5) % n)\n\nseating(6)"
  },
  {
    "example_id": 68,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1201.0"
    ],
    "annotated_answers": [
      "1201.0"
    ],
    "solution": "print(301**4 % 10000)"
  },
  {
    "example_id": 69,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "5.0",
      "3.0",
      "9.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# Calculate the number of squares\n# Calculate the total number of squares\ntotal_squares = 70\n\n# Calculate the side length of the square\nside_length = math.sqrt(total_squares)\n\n# Calculate the number of squares on the side\nside_squares = math.ceil(side_length)\n\n# Calculate the number of squares on the long side\nlong_side_squares = math.ceil(side_length / 2)\n\n# Calculate the number of squares on the short side\nshort_side_squares = math.ceil(side_length / 3)\n\n# Print the number of squares on the side\nprint(side_squares)\n\n# Print the number of squares on the long side\nprint(long_side_squares)\n\n# Print the number of squares on the short side\nprint(short_side_squares)\n\n# Print the number of squares on the side\nprint(side_squares)"
  },
  {
    "example_id": 70,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "480.0"
    ],
    "solution": "ways = 6*5/2\nprint(ways)"
  },
  {
    "example_id": 71,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "# compute the number of diagonals\ndiagonals = 5\nprint(diagonals)"
  },
  {
    "example_id": 72,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12441600.0"
    ],
    "annotated_answers": [
      "12441600.0"
    ],
    "solution": "result = math.factorial(6) * math.factorial(4) * math.factorial(5) * math.factorial(3)\nprint(result)"
  },
  {
    "example_id": 73,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "504.0"
    ],
    "annotated_answers": [
      "504.0"
    ],
    "solution": "ways = 6 * 4 * 3 * 7\nprint(ways)"
  },
  {
    "example_id": 74,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2015.0",
      "2015.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 2015\n# Compute f(n)\nf_n = math.comb(n+1, n) - sum(math.comb(i, n) for i in range(n+1))\n\n# Print the minimum value of f(n) for n >= 2015\nprint('The minimum value of f(n) for n >= 2015 is:', f_n)"
  },
  {
    "example_id": 75,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "def is_perfect_square(n):\n    x = int(n**0.5)\n    return x*x == n\n\ndef count_perfect_squares(a, b):\n    count = 0\n    for i in range(a, b+1):\n        if is_perfect_square(i):\n            count += 1\n    return count\n\nprint(count_perfect_squares(10, 1000))"
  },
  {
    "example_id": 76,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "49.0",
      "4.0",
      "48.0",
      "6.0",
      "47.0",
      "8.0",
      "46.0",
      "10.0",
      "45.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "x = 1\nwhile x < 100:\n    y = (100-x)/2\n    if y.is_integer():\n        print(x,y)\n    x += 1"
  },
  {
    "example_id": 77,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# 8 toppings\nn_toppings = 8\n\n# 2 toppings\nn_pizzas = 2\n\n# calculate the number of pizzas\nresult = math.comb(n_toppings, n_pizzas)\nprint(result)"
  },
  {
    "example_id": 78,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "result = math.comb(7, 6)\nprint(result)"
  },
  {
    "example_id": 79,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.242640687119285"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# import math\nimport math\n\n# import datetime\nimport datetime\n\n# define function\ndef is_perfect_square(n):\n    return int(math.sqrt(n))**2 == n\n\n# define starting point\nstarting_point = (-3, 3)\n\n# define end point\nend_point = (0, 0)\n\n# compute distance\ndistance = math.sqrt(\n    (starting_point[0] - end_point[0])**2 + \n    (starting_point[1] - end_point[1])**2\n)\n\n# print distance\nprint(distance)"
  },
  {
    "example_id": 80,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def is_perfect_square(n):\n    return math.sqrt(n) % 1 == 0\n\ndef get_card_values():\n    # return the values of the cards\n    return [2, 0, 0, 1]\n\ndef get_card_products():\n    # return the products of the cards\n    return [2, 0, 0, 1]\n\n# initialize the values and products of the cards\nvalues = get_card_values()\nproducts = get_card_products()\n\n# initialize the number of ways to select the cards\nnumber_of_ways = 0\n\n# loop through all possible combinations\nfor i in range(len(values)):\n    for j in range(i + 1, len(values)):\n        for k in range(j + 1, len(values)):\n            # check if the product of the cards is not zero\n            if products[i] * products[j] * products[k]!= 0:\n                # increment the number of ways to select the cards\n                number_of_ways += 1\n\n# print the number of ways to select the cards\nprint(number_of_ways)"
  },
  {
    "example_id": 81,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "81.0",
      "64.0",
      "49.0",
      "36.0",
      "25.0",
      "16.0",
      "9.0",
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "n = 100\nwhile n > 0:\n    if is_perfect_square(n):\n        print(n)\n    n -= 1"
  },
  {
    "example_id": 82,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "1963.0"
    ],
    "solution": "result = 0\nfor i in range(2, 1000):\n    if math.sqrt(i) % 1 == 0:\n        result += 1\nprint(result)"
  },
  {
    "example_id": 83,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Solution 1\ndef is_perfect_square(n):\n    return int(math.sqrt(n)) ** 2 == n\n\ndef count_dinner_options(year=2003):\n    appetizers = 2 * (datetime.date(year, 1, 1).isocalendar()[1] + 1)\n    main_courses = appetizers - 1\n    desserts = appetizers - 1\n    return appetizers * main_courses * desserts\n\nprint(count_dinner_options())"
  },
  {
    "example_id": 84,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# The number of rectangles is 9.\nprint(9)"
  },
  {
    "example_id": 85,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "# Define a function to check if a number is a perfect square\ndef is_perfect_square(n):\n    x = math.sqrt(n)\n    return x == math.floor(x)\n\n# Compute the number of squares\nnum_squares = 0\nfor i in range(0, 200, 1):\n    if is_perfect_square(200 - i):\n        num_squares += 1\n        if num_squares == 4:\n            break\n\nprint(num_squares)"
  },
  {
    "example_id": 86,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "result = math.comb(6, 3)\nprint(result)"
  },
  {
    "example_id": 87,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0",
      "102.0",
      "103.0",
      "104.0",
      "106.0",
      "107.0",
      "108.0",
      "109.0",
      "110.0",
      "111.0"
    ],
    "annotated_answers": [
      "772.0"
    ],
    "solution": "for i in range(100, 1000):\n    if i % 7 == 0:\n        continue\n    if is_perfect_square(i):\n        continue\n    print(i)"
  },
  {
    "example_id": 88,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "n = 10\nm = 3\n\nresult = math.comb(n+m-1, m)\nprint(result)"
  },
  {
    "example_id": 89,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "result = math.factorial(len('THAT'))\nprint(result)"
  },
  {
    "example_id": 90,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# Set\nset = [0, 1, 2, 4, 8, 16]\n\n# Initialize count\ncount = 0\n\n# Iterate over the set\nfor i in set:\n    for j in set:\n        if i + j in set:\n            count += 1\n\nprint(count)"
  },
  {
    "example_id": 91,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "k = math.ceil(math.log2(10/21))\nprint(k)"
  },
  {
    "example_id": 92,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1140.0"
    ],
    "annotated_answers": [
      "6840.0"
    ],
    "solution": "n = 20\n\n# Calculate number of ways to select president, vice-president, and treasurer\nresult = math.comb(n, 3)\nprint(result)"
  },
  {
    "example_id": 93,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12600.0"
    ],
    "annotated_answers": [
      "12600.0"
    ],
    "solution": "# Michael can choose 2 different kinds of fruit in 15C2 = 15*14/2 = 130 ways.\n# Michael can choose 3 different kinds of soup in 10C3 = 10*9*8/6 = 120 ways.\n# In total, Michael can choose 2 different kinds of fruit and 3 different kinds of soup in 15C2 * 10C3 = 130 * 120 = 15600 ways.\n\nprint(math.comb(15, 2) * math.comb(10, 3))"
  },
  {
    "example_id": 94,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Compute the sum of two dice\ndef sum_of_dice():\n    result = 0\n    for i in range(1, 8):\n        for j in range(1, 8):\n            result += i + j\n    return result\n\n# Compute the number of possible outcomes\ndef number_of_outcomes():\n    result = 0\n    for i in range(1, 8):\n        for j in range(1, 8):\n            result += 1\n    return result\n\n# Compute the expected value of the sum of two dice\ndef expected_value():\n    return sum_of_dice() / number_of_outcomes()\n\n# Print the expected value\nprint(expected_value())"
  },
  {
    "example_id": 95,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1036.0"
    ],
    "annotated_answers": [
      "1041.0"
    ],
    "solution": "n = 1000\nis_perfect_square = lambda x: int(math.sqrt(x)) ** 2 == x\nis_perfect_cube = lambda x: int(math.pow(x, 1/3)) ** 3 == x\nis_fifth_power = lambda x: int(math.pow(x, 1/5)) ** 5 == x\n\ndef is_term(x):\n    return not is_perfect_square(x) and not is_perfect_cube(x) and not is_fifth_power(x)\n\ndef find_term(n):\n    i = 1\n    while True:\n        term = i\n        if is_term(term):\n            if n == 1:\n                return term\n            n -= 1\n        i += 1\n\nprint(find_term(n))"
  },
  {
    "example_id": 96,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "330.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# compute the number of paths from A to C\nresult = 2 * (math.factorial(11) / math.factorial(8) / math.factorial(3))\nprint(result)"
  },
  {
    "example_id": 97,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "result = 0\nfor i in range(10000, 70000, 2):\n    if str(i) == str(i)[::-1]:\n        result += 1\nprint(result)"
  },
  {
    "example_id": 98,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "cease = 'cease'\nresult = math.factorial(len(cease))\nprint(result)"
  },
  {
    "example_id": 99,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Initialize variables\nx = 0\ny = 0\n\n# Condition I\nif (x == 1) or (y == 0) or (y == 2):\n    # Condition II\n    if (x == 0) or (x == 2) or (y == 1):\n        # Print output\n        print(f\"({x}, {y})\")"
  },
  {
    "example_id": 100,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2025.0",
      "-5.0",
      "-12.0",
      "9.0",
      "22.0",
      "30.914721",
      "2025.0",
      "-5.0",
      "-12.0",
      "9.0",
      "22.0",
      "30.914747"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# import datetime\nimport datetime\n\n# Get current time\nstart_time = datetime.datetime.now()\n\n# Print start time\nprint(\"Start time:\", start_time)\n\n# Print end time\nend_time = datetime.datetime.now()\nprint(\"End time:\", end_time)"
  },
  {
    "example_id": 101,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import itertools\n\ndef isosceles_triangles(perimeter, side_lengths):\n    for sides in itertools.permutations(side_lengths):\n        if sum(sides) == perimeter and len(set(sides)) == 1:\n            yield tuple(sides)\n\nprint(sum(1 for _ in isosceles_triangles(10, range(1, 5))))"
  },
  {
    "example_id": 102,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "result = 7\nprint(result)"
  },
  {
    "example_id": 103,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "count = 0\nfor n in range(2, 101):\n    if math.comb(n, 2) % 2 == 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 104,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "222.0"
    ],
    "solution": "count = 0\nfor i in range(25, 251):\n    root = math.sqrt(i)\n    if root == int(root):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 105,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Calculate the number of different pizzas that could be ordered.\nresult = 9 ** 2\nprint(result)"
  },
  {
    "example_id": 106,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "450.0"
    ],
    "solution": "import re\n\n\ndef has_last_digit_sum_of_first_two(num):\n    return re.match(r'^(\\d{2})\\d\\1$', str(num))\n\n\ncount = 0\nfor num in range(1000, 10000):\n    if has_last_digit_sum_of_first_two(num):\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 107,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "# Calculate the number of ways to arrange 6 beads in a 2x3 grid\n# Each bead can be placed in one of 6! = 720 possible ways\n# But we need to divide by the number of ways to arrange the beads\n# in a 2x3 grid with reflections and rotations considered the same\n# So we need to divide by the number of reflections and rotations\n# of a 2x3 grid, which is 8\nresult = math.factorial(6) / 8\nprint(result)"
  },
  {
    "example_id": 108,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "# Define a function that returns True if the number is a perfect square, False otherwise.\ndef is_perfect_square(n):\n    # Check if number is a perfect square.\n    return (n**0.5).is_integer()\n\n# Define a function that returns the number of ways to place the beads.\ndef number_of_ways(n):\n    # Initialize number of ways to place the beads.\n    number_of_ways = 0\n\n    # Loop from 0 to n.\n    for i in range(n):\n        # Check if i is a perfect square.\n        if is_perfect_square(i):\n            # Increment number of ways to place the beads.\n            number_of_ways += 1\n\n    # Return number of ways to place the beads.\n    return number_of_ways\n\n# Get the number of ways to place the beads.\nresult = number_of_ways(7)\n\n# Print the result.\nprint(result)"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "# Write your code here\nresult = math.comb(11, 8)\nprint(result)"
  },
  {
    "example_id": 110,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "4.0",
      "8.0",
      "16.0",
      "32.0",
      "64.0",
      "128.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "def pascal_triangle(n):\n    triangle = [1]\n    for i in range(n-1):\n        triangle.append(sum(triangle[-i:]))\n    return triangle\n\nprint(pascal_triangle(10))"
  },
  {
    "example_id": 111,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "12.0"
    ],
    "annotated_answers": [
      "245.0"
    ],
    "solution": "# \nsouth_house_number = 1\nnorth_house_number = 3\nsouth_house_number_count = 0\nnorth_house_number_count = 0\ntotal_house_number_count = 0\ntotal_earning = 0\nwhile south_house_number <= 50:\n    south_house_number_count = south_house_number_count + 1\n    south_house_number = south_house_number + 4\n    while north_house_number <= 50:\n        north_house_number_count = north_house_number_count + 1\n        north_house_number = north_house_number + 4\n        total_house_number_count = total_house_number_count + 1\n        total_earning = total_earning + 1\nprint(\"The total house number count is\", total_house_number_count)\nprint(\"The total earning is\", total_earning)"
  },
  {
    "example_id": 112,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "560.0"
    ],
    "solution": "# compute the coefficient of x^3y^3z^2\ncoefficient = math.comb(8, 3)\nprint(coefficient)"
  },
  {
    "example_id": 113,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1440.0"
    ],
    "solution": "# Define a function is_perfect_square(n)\ndef is_perfect_square(n):\n    x = math.sqrt(n)\n    return x == math.floor(x)\n\n# Define a function is_circular(n)\ndef is_circular(n):\n    return n % 2 == 0\n\n# Define a function solve_sitting(n)\ndef solve_sitting(n):\n    if is_perfect_square(n):\n        return int(n ** 0.5)\n    else:\n        return 0\n\n# Define a function solve_sitting_circular(n)\ndef solve_sitting_circular(n):\n    if is_perfect_square(n) and is_circular(n):\n        return int(n ** 0.5)\n    else:\n        return 0\n\n# Define a function solve_sitting_no_alice_bob_eve(n)\ndef solve_sitting_no_alice_bob_eve(n):\n    if is_perfect_square(n) and is_circular(n):\n        return int(n ** 0.5)\n    else:\n        return 0\n\n# Define a function main()\ndef main():\n    n = 8\n    result = solve_sitting_no_alice_bob_eve(n)\n    print(result)\n\n# Call main()\nmain()"
  },
  {
    "example_id": 114,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Set a and b\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nb = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]\n\n# Calculate the square root\nfor a_val in a:\n    for b_val in b:\n        if math.isqrt(a_val + math.isqrt(b_val)) % 1 == 0:\n            print(f\"{a_val}, {b_val}\")"
  },
  {
    "example_id": 115,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "def is_perfect_square(n):\n    x = int(n ** 0.5)\n    return x ** 2 == n\n\ndef is_not_perfect_square(n):\n    return not is_perfect_square(n)\n\ndef count_not_perfect_squares(start, end):\n    return sum(1 for i in range(start, end + 1) if is_not_perfect_square(i))\n\nprint(count_not_perfect_squares(100, 200))"
  },
  {
    "example_id": 116,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-12441456.0"
    ],
    "annotated_answers": [
      "29700.0"
    ],
    "solution": "# number of ways to choose girls\nn_girls = 6\n# number of ways to choose boys\nn_boys = 6\n# number of teams\nn_teams = 3\n# number of jerseys of each color\nn_jerseys_per_team = 4\n\n# total number of ways to choose girls\nn_girls_choices = math.factorial(n_girls)\n# total number of ways to choose boys\nn_boys_choices = math.factorial(n_boys)\n# total number of ways to choose teams\nn_teams_choices = math.factorial(n_teams)\n# total number of ways to choose jerseys\nn_jerseys_choices = math.factorial(n_jerseys_per_team)\n\n# total number of ways to choose teams with at least one girl and one boy\nn_teams_with_girl_and_boy = n_teams_choices - (n_girls_choices * n_boys_choices)\n\n# total number of ways to choose teams with at least one girl and one boy\nn_teams_with_girl_and_boy = n_teams_choices - (n_girls_choices * n_boys_choices)\n\n# total number of ways to choose teams\nn_teams_choices = n_teams_with_girl_and_boy * n_jerseys_choices\n\nprint(n_teams_choices)"
  },
  {
    "example_id": 117,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "result = 0\nfor i in range(100, 1000):\n    if i % 11 == 0:\n        result += 1\nprint(result)"
  },
  {
    "example_id": 118,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "1.0",
      "0.0",
      "0.0",
      "2.0",
      "0.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "a = 0\nb = 0\nc = 0\n\nwhile a < 25:\n    b = 0\n    while b < 25:\n        c = 0\n        while c < 25:\n            if a**3 + b**2 + c <= 50:\n                print(a, b, c)\n            c += 1\n        b += 1\n    a += 1"
  },
  {
    "example_id": 119,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "result = 0\nfor i in range(1, int(math.sqrt(72)) + 1):\n    if 72 % i == 0:\n        result += 1\nprint(result)"
  },
  {
    "example_id": 120,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "n = 6\n\n# Calculate number of ways to arrange letters\nnum_ways = math.factorial(n)\nprint(num_ways)"
  },
  {
    "example_id": 121,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "149.0"
    ],
    "solution": "n = 51\nprint(n)"
  },
  {
    "example_id": 122,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "17.0",
      "37.0",
      "47.0",
      "67.0",
      "97.0",
      "107.0",
      "127.0",
      "137.0",
      "157.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "num = 0\nwhile num < 1000:\n    if num % 100 > 5 and num % 10 > 4 and num % 10 < 8:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            print(num)\n    num += 1"
  },
  {
    "example_id": 123,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "result = 1\nfor i in range(1, 27):\n    if i % 3 == 0:\n        result += 1\nprint(result)"
  },
  {
    "example_id": 124,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "10080.0"
    ],
    "solution": "n = 8\nresult = math.comb(n, 2)\nprint(result)"
  },
  {
    "example_id": 125,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "print(binom(12, 9))"
  },
  {
    "example_id": 126,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import itertools\n\n# create a list of all possible combinations\ncombs = []\nfor i in range(1, 15 + 1):\n    combs.extend(list(itertools.combinations(range(1, 5), i)))\n\n# count the number of combinations\ncount = 0\nfor c in combs:\n    count += 1\n\nprint(count)"
  },
  {
    "example_id": 127,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "# Calculate the number of ways to choose a 3-person committee\n# from an 8-person group\nresult = math.comb(8, 3)\nprint(result)"
  },
  {
    "example_id": 128,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "7.0",
      "7.0",
      "5.0",
      "1.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "12500.0"
    ],
    "solution": "from itertools import combinations\n\nresult = combinations(range(5, 100000), 3)\nprint(result)"
  },
  {
    "example_id": 129,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# define number of members\nnum_members = 8\n\n# define number of members to select\nnum_members_to_select = 4\n\n# calculate the number of ways\nnum_ways = math.comb(num_members, num_members_to_select)\n\n# print the result\nprint(num_ways)"
  },
  {
    "example_id": 130,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# create a list of names\nnames = ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Fred', 'Gwen']\n\n# create a list of pairs\npairs = [(names[i], names[(i+1) % 6]) for i in range(6)]\n\n# count the number of pairs that are opposite\ncount = 0\nfor pair in pairs:\n    if pair[0] == 'Fred' and pair[1] == 'Gwen':\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 131,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "2880.0"
    ],
    "solution": "result = 0\nfor i in range(1, 10):\n    for j in range(1, 10):\n        if i % 2 == 0:\n            if j % 2 == 1:\n                result += 1\n        else:\n            if j % 2 == 0:\n                result += 1\nprint(result)"
  },
  {
    "example_id": 132,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# \nresult = math.factorial(5) // math.factorial(5 - 1)\nprint(result)"
  },
  {
    "example_id": 133,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 0\nwhile math.comb(n, 2) < 0.75:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 134,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "1.0",
      "2.0",
      "3.0",
      "5.0",
      "1.0",
      "2.0",
      "4.0",
      "5.0",
      "1.0",
      "3.0",
      "4.0",
      "5.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "from itertools import combinations\n\ndef color_squares(n):\n    for combination in combinations(range(1, n+1), 4):\n        yield combination\n\nfor combination in color_squares(5):\n    print(combination)"
  },
  {
    "example_id": 135,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19679.0"
    ],
    "annotated_answers": [
      "20160.0"
    ],
    "solution": "# Total number of ways to put beads on the grid\ntotal_ways = 3 ** 9\n\n# Number of ways without purple and green beads adjacent\nways_without_purple_green_adjacent = 0\n\n# Iterate over all the possible positions of the purple bead\nfor i in range(3):\n    # Iterate over all the possible positions of the green bead\n    for j in range(3):\n        # Check if purple and green beads are adjacent\n        if abs(i - j) == 1:\n            # Increment the number of ways without purple and green beads adjacent\n            ways_without_purple_green_adjacent += 1\n\n# Total number of ways without purple and green beads adjacent\ntotal_ways_without_purple_green_adjacent = total_ways - ways_without_purple_green_adjacent\n\n# Print the result\nprint(total_ways_without_purple_green_adjacent)"
  },
  {
    "example_id": 136,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "495.0"
    ],
    "annotated_answers": [
      "495.0"
    ],
    "solution": "# Number of ways to choose books to read\nn_books = 4\n\n# Number of books on the bookshelf\nn_shelf = 12\n\n# Compute the number of ways to choose which books to read\nresult = math.comb(n_shelf, n_books)\n\n# Print the result\nprint(result)"
  },
  {
    "example_id": 137,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3003.0"
    ],
    "annotated_answers": [
      "3003.0"
    ],
    "solution": "print(6435 - 11440 + 8008)"
  },
  {
    "example_id": 138,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# define variables\nA = 20\nB = 10\nC = 7\n\n# calculate number of items in B\nnum_in_B = 10 - (C - B)\n\n# calculate number of items in A\nnum_in_A = A - num_in_B\n\n# calculate number of items in B, not in C\nnum_in_B_not_in_C = num_in_B - C\n\nprint(num_in_B_not_in_C)"
  },
  {
    "example_id": 139,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# number of chocolate chip cookies\nn_chocolate = 3\n# number of sugar cookies\nn_sugar = 4\n\n# total number of cookies\nn_total = n_chocolate + n_sugar\n\n# number of ways to eat a chocolate chip cookie first\nn_ways_chocolate = n_chocolate * (n_total - n_chocolate)\n\n# number of ways to eat a chocolate chip cookie last\nn_ways_sugar = n_sugar * (n_total - n_sugar)\n\n# number of ways to eat both\nn_ways_both = n_chocolate * n_sugar\n\n# total number of ways to eat cookies\nn_ways_total = n_ways_chocolate + n_ways_sugar + n_ways_both\n\nprint(n_ways_total)"
  },
  {
    "example_id": 140,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "1680.0"
    ],
    "solution": "result = math.comb(8, 3)\nprint(result)"
  },
  {
    "example_id": 141,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0",
      "10.0",
      "10.0",
      "5.0",
      "9.0",
      "10.0",
      "5.0",
      "10.0",
      "9.0",
      "6.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 1\nwhile x <= 10:\n    y = 1\n    while y <= 10:\n        z = 1\n        while z <= 10:\n            if x + y + z == 24:\n                print(x, y, z)\n            z += 1\n        y += 1\n    x += 1"
  },
  {
    "example_id": 142,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# compute number of ways to select 5 students from a group of 6\nresult = math.comb(6, 5)\nprint(result)"
  },
  {
    "example_id": 143,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.25"
    ],
    "annotated_answers": [
      "8.5"
    ],
    "solution": "import math\nimport datetime\n\ndef is_perfect_square(n):\n    return math.sqrt(n) == int(math.sqrt(n))\n\ndef expected_product(n):\n    # Compute the sum of the products of the numbers on the marbles.\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            sum += i*j\n    # Compute the average.\n    return sum/(n*(n-1))\n\ndef main():\n    print(\"The expected value of the product of the numbers on the marbles is {}\".format(expected_product(5)))\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 144,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1430.0"
    ],
    "annotated_answers": [
      "1430.0"
    ],
    "solution": "result = math.comb(13, 4) + math.comb(13, 9)\nprint(result)"
  },
  {
    "example_id": 145,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2520.0"
    ],
    "annotated_answers": [
      "2520.0"
    ],
    "solution": "result = math.comb(10, 2) * math.comb(8, 3)\nprint(result)"
  },
  {
    "example_id": 146,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5120.0"
    ],
    "solution": "from math import factorial\n\nN = 10\nM = 10\n\ndef combinations(N, M):\n    return factorial(N) // (factorial(M) * factorial(N - M))\n\nresult = combinations(N, M)\nprint(result)"
  },
  {
    "example_id": 147,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "# upper class soldiers\nU = 5\n# lower class soldiers\nL = 10\n# battle of Thermopylae\nu = 4\n# lower class soldiers\nl = 8\n\n# total soldiers\nT = U + L\n\n# total battalions\nB = math.ceil(T / (u + l))\n\nprint(B)"
  },
  {
    "example_id": 148,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5040.0"
    ],
    "solution": "result = math.comb(8, 8)\nprint(result)"
  },
  {
    "example_id": 149,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from itertools import combinations\n\n# compute all possible combinations\nall_combinations = list(combinations(range(14), 4))\n\n# count the number of combinations with exactly 4 red faces\nred_faces_count = 0\nfor combination in all_combinations:\n    if sum(1 for i in range(14) if combination.count(i) == 4) == 1:\n        red_faces_count += 1\n\nprint(red_faces_count)"
  },
  {
    "example_id": 150,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "253.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\ndef handshakes(n):\n    return (n * (n - 1)) // 2\n\nprint(handshakes(23))"
  },
  {
    "example_id": 151,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-142.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Calculate the number of students who did no math, no English and no science homework\n# 100 - 59 - 49 - 42 - 20 - 29 - 31 - 12 = 16\nprint(100 - 59 - 49 - 42 - 20 - 29 - 31 - 12)"
  },
  {
    "example_id": 152,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.16666666666666666"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "probability = 1/6\nprint(probability)"
  },
  {
    "example_id": 153,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def is_perfect_square(n):\n    return math.sqrt(n).is_integer()\n\ndef combinations(iterable, r):\n    # combinations('ABCD', 2) --> AB AC AD BC BD CD\n    pool = tuple(iterable)\n    n = len(pool)\n    if r > n:\n        return\n    indices = list(range(r))\n    yield tuple(pool[i] for i in indices)\n    while True:\n        for i in reversed(range(r)):\n            if indices[i]!= i + n - r:\n                break\n        else:\n            return\n        indices[i] += 1\n        for j in range(i+1, r):\n            indices[j] = indices[j-1] + 1\n        yield tuple(pool[i] for i in indices)\n\n\ndef sum_of_list(my_list):\n    return sum(my_list)\n\n\ndef count_of_increasing_lists_of_five_different_positive_integers_with_sum_of_33(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    for m in range(l+1, n):\n                        if sum_of_list([i, j, k, l, m]) == 33:\n                            count += 1\n\n    return count\n\n\ndef main():\n    n = 5\n    count = count_of_increasing_lists_of_five_different_positive_integers_with_sum_of_33(n)\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 154,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "110.0"
    ],
    "solution": "result = math.gcd(9, 11)\nprint(result)"
  },
  {
    "example_id": 155,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "# Calculate the number of possible combinations\n# for each item\n\n# Total number of items\nnumber_of_items = 3\n\n# Number of items in each denomination\nquarter = 1\nnickel = 2\npenny = 3\n\n# Calculate the number of possible combinations\n# for each item\n\nnumber_of_combinations = 0\n\n# Calculate the number of possible combinations\n# for each item\nfor i in range(number_of_items):\n    number_of_combinations += math.comb(number_of_items - i, i)\n\nprint(number_of_combinations)"
  },
  {
    "example_id": 156,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "result = 3\nprint(result)"
  },
  {
    "example_id": 157,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "n = 5\n\ndiagonals = 0\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            diagonals += 1\n\nprint(diagonals)"
  },
  {
    "example_id": 158,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "330.0"
    ],
    "annotated_answers": [
      "325.0"
    ],
    "solution": "result = math.comb(11, 4)\nprint(result)"
  },
  {
    "example_id": 159,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "result = math.comb(11, 8)\nprint(result)"
  },
  {
    "example_id": 160,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "# Compute the number of ways to take off\nn = 3\n\n# Compute the number of ways to take off\nresult = math.comb(n, 2)\nprint(result)"
  },
  {
    "example_id": 161,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "ways = 8 * 7\nprint(ways)"
  },
  {
    "example_id": 162,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import math\n\ndef count_colorings(n):\n    \"\"\"\n    Computes the number of different ways to color the triforce\n    :param n: The number of triangles\n    :return: The number of colorings\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # Compute the number of colorings of the subtriforce\n    # with n-1 triangles\n    sub_colorings = count_colorings(n-1)\n\n    # Compute the number of colorings of the triforce\n    # with n-1 triangles and a gold triangle\n    # at the top\n    return sub_colorings * (n-1)\n\nprint(count_colorings(4))"
  },
  {
    "example_id": 163,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = 3\nprint(n)"
  },
  {
    "example_id": 164,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def is_perfect_square(n):\n    return math.sqrt(n) % 1 == 0\n\ncount = 0\nfor i in range(200, 300):\n    if is_perfect_square(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 165,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "999.0"
    ],
    "annotated_answers": [
      "1092.0"
    ],
    "solution": "print(int(10**3 - 1))"
  },
  {
    "example_id": 166,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "6732.0"
    ],
    "solution": "n = 3\nk = 2\n\npermutations = math.comb(n, k)\n\nfor p in range(permutations):\n    print(p)"
  },
  {
    "example_id": 167,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2450.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "count = 0\nfor i in range(100):\n    for j in range(i+1):\n        if j % 2 == 0 and j!= 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 168,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7000.0"
    ],
    "annotated_answers": [
      "7000.0"
    ],
    "solution": "# Number of ways to choose 2 teachers = 5C2 = 10\n# Number of ways to choose 3 parents = 7C3 = 35\n# Number of ways to choose 3 students = 6C3 = 20\n\nresult = math.comb(5, 2) * math.comb(7, 3) * math.comb(6, 3)\nprint(result)"
  },
  {
    "example_id": 169,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "import math\n\ndef get_win_amount(n):\n    if n % 2 == 0:\n        return 0\n    else:\n        return n\n\ndef get_pay_amount(n):\n    return math.pow(6, n)\n\ndef get_fair_game_amount(n):\n    return get_win_amount(n) * get_pay_amount(n)\n\nprint(get_fair_game_amount(5))"
  },
  {
    "example_id": 170,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "# Solution\ndef is_perfect_square(n):\n    return math.sqrt(n).is_integer()\n\n\n# Function to return the number of elements in the list\ndef count_elements_in_list(my_list):\n    # Initialize the counter\n    count = 0\n\n    # Iterate through the list\n    for i in my_list:\n        # Increment the counter\n        count += 1\n\n    # Return the count\n    return count\n\n\n# Get the input list\nmy_list = [6, 7, 10, 11, 14, 15, 94, 95, 98]\n\n# Call the function\nresult = count_elements_in_list(my_list)\n\n# Print the result\nprint(result)"
  },
  {
    "example_id": 171,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "# Compute the number of paths from C to D\npaths = 0\nfor i in range(1, 6):\n    for j in range(1, 6):\n        if i + j == 7:\n            paths += 1\nprint(paths)"
  },
  {
    "example_id": 172,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Number of ways to select 3 beads out of 6 beads\n# that are identical\nn_ways_select_3_beads = math.comb(6, 3)\n\n# Number of ways to select 3 beads out of 3 beads\n# that are identical\nn_ways_select_3_beads_identical = math.comb(3, 3)\n\n# Number of ways to select 1 bead out of 1 bead\n# that is teal\nn_ways_select_1_bead_teal = math.comb(1, 1)\n\n# Total number of ways to arrange the bracelets\ntotal_number_bracelets = n_ways_select_3_beads * n_ways_select_3_beads_identical * n_ways_select_1_bead_teal\n\nprint(total_number_bracelets)"
  },
  {
    "example_id": 173,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "# Largest number possible in the top cell is 9 + 9 + 9 = 27\n# Smallest number possible in the top cell is 1 + 2 + 3 = 6\nprint(27 - 6)"
  },
  {
    "example_id": 174,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28121600.0"
    ],
    "annotated_answers": [
      "28121600.0"
    ],
    "solution": "new_plates = 26**4 * 10**2\nold_plates = 26**3 * 10**3\nprint(new_plates - old_plates)"
  },
  {
    "example_id": 175,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# compute 2007^3\nx = 2007**3\n\n# get the last digit\nL = str(x)[-1]\n\n# get the first digit\nF = str(x)[0]\n\n# compute sum\nresult = int(F) + int(L)\nprint(result)"
  },
  {
    "example_id": 176,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Number of students that play on exactly two teams\n# This is equal to the number of students that play on all three teams minus\n# the number of students that play on basketball and soccer\n\n# The number of students that play on all three teams\n# is 8 + 40 + 20 = 68\n\n# The number of students that play on basketball and soccer\n# is 8 + 40 = 48\n\n# The number of students that play on exactly two teams is:\n# 68 - 48 = 20\n\nprint(20)"
  },
  {
    "example_id": 177,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31360.0"
    ],
    "annotated_answers": [
      "280.0"
    ],
    "solution": "result = math.comb(8, 4) * math.comb(8, 3) * math.comb(8, 1)\nprint(result)"
  },
  {
    "example_id": 178,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "result = math.factorial(3)\nprint(result)"
  },
  {
    "example_id": 179,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "5.0",
      "6.0",
      "7.0",
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0"
    ],
    "annotated_answers": [
      "425.0"
    ],
    "solution": "def is_perfect_square(n):\n    return math.sqrt(n).is_integer()\n\ndef is_perfect_cube(n):\n    return n ** (1/3) % 1 == 0\n\ndef is_not_square_or_cube(n):\n    return not (is_perfect_square(n) or is_perfect_cube(n))\n\ndef sequence(n):\n    return [x for x in range(2, n + 1) if is_not_square_or_cube(x)]\n\nprint(sequence(400))"
  },
  {
    "example_id": 180,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "boxes = 3\nballs = 4\n\n# Calculate the number of ways to distribute the balls\n# using combinations\nnum_ways = math.comb(balls, boxes)\n\nprint(num_ways)"
  },
  {
    "example_id": 181,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11218.0"
    ],
    "annotated_answers": [
      "11218.0"
    ],
    "solution": "x = (5+2*math.sqrt(7))**4\nprint(round(x))"
  },
  {
    "example_id": 182,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "91.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Number of unit triangles in the first row\nn = 9\n\n# Number of rows\nr = 3\n\n# Number of unit triangles in the next row\nn_next = n + 2\n\n# Number of rows\nr_next = r + 1\n\n# Total number of unit triangles\ntotal = n * (r + 1) + n_next * (r_next + 1)\n\nprint(total)"
  },
  {
    "example_id": 183,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# number of ways to arrange 5 different keys on a keychain\n# = 5! / (2! * 3!)\n# = 5 * 4 * 3 * 2 * 1 / 2 * 3\n# = 5 * 2 * 1 * 3 * 2\n\nresult = math.factorial(5) / (math.factorial(2) * math.factorial(3))\nprint(result)"
  },
  {
    "example_id": 184,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# count ways to divide 12 dimes into 3 piles with odd number of dimes\n# in each pile\ndef count_divide_12_dimes_into_3_piles_with_odd_dimes(n):\n    count = 0\n    for pile_1_dimes, pile_2_dimes, pile_3_dimes in itertools.combinations(range(1, 13), 3):\n        if pile_1_dimes % 2 == 1 and pile_2_dimes % 2 == 1 and pile_3_dimes % 2 == 1:\n            count += 1\n    return count\n\n# call the function\nprint(count_divide_12_dimes_into_3_piles_with_odd_dimes(12))"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Define the number of L-shaped pieces\nN = 6\n# Define the size of each piece\nL = 3\n# Define the size of the board\nM = 3\n# Define the number of patterns\nP = (M-L+1)*(M-L+2)//2\n# Compute the number of ways to cover the board\nways = 0\n# Loop through each pattern\nfor i in range(P):\n    # Compute the number of pieces in each row\n    n = math.ceil((M-L+1-i)/L)\n    # Compute the number of pieces in each column\n    m = math.ceil((M-L+2-i)/L)\n    # Compute the number of ways to place the pieces\n    ways += math.comb(n, L)*math.comb(m, L)\n# Print the number of patterns\nprint(ways)"
  },
  {
    "example_id": 186,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# List of passengers\npassengers = ['Ali', 'Bonnie', 'Carlo', 'Dianna']\n\n# Number of front seats\nfront_seats = 2\n\n# Number of back seats\nback_seats = 2\n\n# Number of driver seats\ndriver_seats = 1\n\n# Total number of seats\ntotal_seats = front_seats + back_seats + driver_seats\n\n# Possible seating arrangements\npossible_seating_arrangements = math.comb(total_seats, driver_seats) * math.comb(total_seats - driver_seats, front_seats) * math.comb(total_seats - driver_seats - front_seats, back_seats)\n\n# Print possible seating arrangements\nprint(possible_seating_arrangements)"
  },
  {
    "example_id": 187,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Compute the number of ways to put 4 indistinguishable balls into 2 boxes\n# using combinations function\nresult = math.comb(4, 2)\nprint(result)"
  },
  {
    "example_id": 188,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.16666666666666666"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# 1/6\nresult = 1/6\nprint(result)"
  },
  {
    "example_id": 189,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1275.0"
    ],
    "annotated_answers": [
      "1275.0"
    ],
    "solution": "def triangular_number(n):\n    return sum(range(1, n+1))\n\nprint(triangular_number(50))"
  },
  {
    "example_id": 190,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "n = 120 / 6\nprint(n)"
  },
  {
    "example_id": 191,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3276.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "def is_perfect_square(n):\n    return math.sqrt(n) % 1 == 0\n\n\ndef count_permutations(num_people, num_sitting_together):\n    if num_people < num_sitting_together:\n        return 0\n\n    if num_people == num_sitting_together:\n        return 1\n\n    if num_people % num_sitting_together == 0:\n        return math.factorial(num_people) // math.factorial(num_sitting_together) // math.factorial(num_people % num_sitting_together)\n\n    if is_perfect_square(num_people) and num_people % num_sitting_together == 0:\n        return math.factorial(num_people) // math.factorial(num_sitting_together) // math.factorial(num_people % num_sitting_together)\n\n    return sum(math.factorial(num_people - i) * math.factorial(i) * math.factorial(num_sitting_together) // math.factorial(num_people - i - num_sitting_together) for i in range(num_people // num_sitting_together))\n\n\nnum_people = 8\nnum_sitting_together = 3\n\nprint(count_permutations(num_people, num_sitting_together))"
  },
  {
    "example_id": 192,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "m = 2\nn = 3\nresult = (m*n) + (m+n)\nprint(result)"
  },
  {
    "example_id": 193,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(8 + 4 * 6 // 2)"
  },
  {
    "example_id": 194,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def is_perfect_square(n):\n    return int(math.sqrt(n))**2 == n\n\ndef count_distinct_integers(n):\n    return len(set(itertools.combinations(range(1, n + 1), 2)))\n\nresult = count_distinct_integers(13)\nprint(result)"
  },
  {
    "example_id": 195,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# \nlines = 0\nfor a in range(-1,2):\n    for b in range(-1,2):\n        for c in range(-1,2):\n            for d in range(-1,2):\n                if (a == b) and (c == d):\n                    continue\n                if (a == c) and (b == d):\n                    continue\n                if (a + b) == (c + d):\n                    lines += 1\nprint(lines)"
  },
  {
    "example_id": 196,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1000000.0"
    ],
    "annotated_answers": [
      "1000000.0"
    ],
    "solution": "print(101**3 - 3*101**2 + 3*101 -1)"
  },
  {
    "example_id": 197,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "result = math.comb(7, 3) * math.comb(4, 2)\nprint(result)"
  },
  {
    "example_id": 198,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "314.0"
    ],
    "annotated_answers": [
      "314.0"
    ],
    "solution": "result = math.floor(100 * math.pi)\nprint(result)"
  },
  {
    "example_id": 199,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "# Calculate the number of squares\nsquares = 0\nfor i in range(5):\n    for j in range(5):\n        if i + j == 4:\n            squares += 1\n\nprint(squares)"
  },
  {
    "example_id": 200,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "result = math.factorial(len(\"GAMMAS\"))\nprint(result)"
  },
  {
    "example_id": 201,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# count the number of paths\ncount = 0\n# loop through all possible paths\nfor i in range(0, 10):\n    for j in range(0, 10):\n        # if the path from C to B is up and to the right\n        if (i < j and i + j == 11):\n            # increment the count\n            count += 1\n# print the count\nprint(count)"
  },
  {
    "example_id": 202,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from sympy import symbols, solve\nfrom itertools import combinations\n\n# Function to determine if a number is a perfect square\ndef is_perfect_square(n):\n    return int(n**0.5)**2 == n\n\n# Function to get all possible seating arrangements\ndef get_seating_arrangements(num_people):\n    # Get all possible combinations of people\n    people = ['Pierre', 'Rosa', 'Thomas']\n    all_combinations = combinations(people, num_people)\n    # Initialize list to store all possible seating arrangements\n    seating_arrangements = []\n    # Loop through all possible combinations\n    for combination in all_combinations:\n        # Check if the combination is a perfect square\n        if is_perfect_square(len(combination)):\n            # If it is, add it to the list of seating arrangements\n            seating_arrangements.append(combination)\n    # Return the list of seating arrangements\n    return seating_arrangements\n\n# Get all possible seating arrangements for $7$ people\nseating_arrangements = get_seating_arrangements(7)\n# Print the number of seating arrangements\nprint(len(seating_arrangements))"
  },
  {
    "example_id": 203,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define a function to check if a number is perfect square\ndef is_perfect_square(n):\n    return int(math.sqrt(n)) ** 2 == n\n\n# Define a function to check if a triangle is congruent\ndef is_congruent(a, b, c):\n    return (a + b) % c == 0\n\n# Define a function to count the number of non-congruent triangles\ndef count_non_congruent_triangles(n):\n    count = 0\n    for a, b, c in combinations(range(n), 3):\n        if not is_congruent(a, b, c):\n            count += 1\n    return count\n\n# Test the function\nprint(count_non_congruent_triangles(8))"
  },
  {
    "example_id": 204,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2600.0"
    ],
    "annotated_answers": [
      "1050.0"
    ],
    "solution": "# Define vowels\nvowels = ['A', 'E', 'I', 'O', 'U']\n\n# Define consonants\nconsonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n\n# Define list of all letters\nall_letters = vowels + consonants\n\n# Define number of ways to choose 3 distinct letters\nnum_ways_to_choose_3_distinct_letters = len(list(combinations(all_letters, 3)))\n\n# Define number of ways to choose 1 vowel\nnum_ways_to_choose_1_vowel = len(vowels)\n\n# Define number of ways to choose 2 consonants\nnum_ways_to_choose_2_consonants = len(consonants)\n\n# Define number of ways to choose 3 distinct letters, with 1 vowel and 2 consonants\nnum_ways_to_choose_3_distinct_letters_with_1_vowel_and_2_consonants = num_ways_to_choose_1_vowel * num_ways_to_choose_2_consonants\n\n# Define number of ways to choose 3 distinct letters, with 1 vowel and 2 consonants, and without regard to order\nnum_ways_to_choose_3_distinct_letters_with_1_vowel_and_2_consonants_without_regard_to_order = len(list(combinations(all_letters, 3)))\n\n# Print the number of ways to choose 3 distinct letters, with 1 vowel and 2 consonants, and without regard to order\nprint(num_ways_to_choose_3_distinct_letters_with_1_vowel_and_2_consonants_without_regard_to_order)"
  },
  {
    "example_id": 205,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# number of ways\nn = 7\n# total number of species\nm = 4\n# maximum number of consecutive same species\nk = 2\n\n# number of ways\nnCr = 0\nfor i in range(n):\n    nCr += len(list(combinations(range(m), i+1)))\n\nprint(nCr)"
  },
  {
    "example_id": 206,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# Define variables\nbasil_plants = 6\nwindow_sills = 3\n\n# Compute the number of ways to put the plants on the window sills\n# Using itertools.combinations\nbasil_combinations = itertools.combinations(range(window_sills), basil_plants)\nprint(len(list(basil_combinations)))"
  },
  {
    "example_id": 207,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\n\ndef solve(n, r):\n    return math.comb(n, r)\n\nn = 4\nr = 1\nprint(solve(n, r))"
  },
  {
    "example_id": 208,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "# Get the number of ways to distribute the fruits\nnumber_of_ways = math.comb(7, 4)\n\n# Print the result\nprint(number_of_ways)"
  },
  {
    "example_id": 209,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor i in range(1,1000):\n    if i % 2 == 0:\n        count += 1\n    else:\n        count -= 1\nprint(count)"
  },
  {
    "example_id": 210,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31254.0"
    ],
    "annotated_answers": [
      "31254.0"
    ],
    "solution": "def order_digits(num):\n    return int(''.join(sorted(str(num))))\n\ndef five_digit_numbers(num):\n    return [i for i in range(10000, 100000) if order_digits(i) == num]\n\ndef find_50th_number(num):\n    return five_digit_numbers(num)[49]\n\nprint(find_50th_number(12345))"
  },
  {
    "example_id": 211,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Define the boxes\nboxes = ['A', 'B', 'C']\n\n# Define the balls\nballs = ['green','red']\n\n# Define the number of balls to put in each box\nnumber_of_balls = {\n    'A': 2,\n    'B': 2,\n    'C': 2\n}\n\n# Compute the number of ways to put the balls in the boxes\nnumber_of_ways = math.comb(4, 2) * math.comb(2, 2) * math.comb(2, 2)\n\n# Print the result\nprint(number_of_ways)"
  },
  {
    "example_id": 212,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# Compute the value of (5! \\* 2!)/(3!)\nresult = math.factorial(5)*2/math.factorial(3)\nprint(result)"
  },
  {
    "example_id": 213,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "134020690.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = int((math.sqrt(25/216) + 1) * 100000000)\nprint(n)"
  },
  {
    "example_id": 214,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "1951.0"
    ],
    "solution": "# Define the function to check if the number is a perfect square\ndef is_perfect_square(n):\n    \"\"\"\n    Check if a number is a perfect square\n    \"\"\"\n    return (n**0.5).is_integer()\n\n# Generate all the possible words\nwords = [''.join(i) for i in itertools.combinations(list(map(chr, range(65, 91))), 3)]\n\n# Count the number of words with the letter A\ncount = 0\nfor word in words:\n    if 'A' in word:\n        count += 1\n\n# Print the result\nprint(count)"
  },
  {
    "example_id": 215,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "864000.0"
    ],
    "solution": "vowels = ['a', 'e', 'i', 'o', 'u']\ndigits = [1, 2, 4, 6]\n\n# count number of vowels\nvowel_count = 0\nfor i in vowels:\n    vowel_count += 1\n\n# count number of digits\ndigit_count = 0\nfor i in digits:\n    digit_count += 1\n\n# count number of possible license plates\nlicense_plate_count = vowel_count * digit_count\nprint(license_plate_count)"
  },
  {
    "example_id": 216,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "95.0"
    ],
    "solution": "# initialize count\ncount = 0\n\n# loop through all the factorials from 1! to 100!\nfor i in range(1, 101):\n    # check if the factorial is divisible by 9\n    if (i % 9) == 0:\n        # increase count\n        count += 1\n\n# print the count\nprint(count)"
  },
  {
    "example_id": 217,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Define number of times coin is flipped\nnum_flips = 8\n\n# Define number of heads in each flip\nnum_heads = 3\n\n# Define number of tails in each flip\nnum_tails = 2\n\n# Define number of possible outcomes\nnum_outcomes = 2**num_flips\n\n# Define number of possible outcomes with exactly num_heads heads\nnum_heads_outcomes = 2**(num_flips - num_heads)\n\n# Define number of possible outcomes with exactly num_tails tails\nnum_tails_outcomes = 2**(num_flips - num_tails)\n\n# Calculate probability of exactly num_heads heads\nprob_heads = num_heads_outcomes / num_outcomes\n\n# Calculate probability of exactly num_tails tails\nprob_tails = num_tails_outcomes / num_outcomes\n\n# Calculate probability of exactly num_heads heads over exactly num_tails tails\nprob_heads_over_tails = prob_heads / prob_tails\n\n# Print result\nprint(prob_heads_over_tails)"
  },
  {
    "example_id": 218,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# 1. Define a set of fruits\nfruits = ['apples', 'bananas', 'grapes','strawberries', 'pineapples']\n\n# 2. Define a set of all possible combinations of 3 fruits\ncombinations = list(combinations(fruits, 3))\n\n# 3. Define a list of bad combinations\nbad_combinations = [['strawberries', 'pineapples'], ['grapes', 'bananas']]\n\n# 4. Count the number of good combinations\ngood_combinations = 0\nfor combination in combinations:\n    if combination not in bad_combinations:\n        good_combinations += 1\n\nprint(good_combinations)"
  },
  {
    "example_id": 219,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4060.0"
    ],
    "annotated_answers": [
      "4060.0"
    ],
    "solution": "import math\nprint(math.comb(30, 27))"
  },
  {
    "example_id": 220,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "result = 6\nprint(result)"
  },
  {
    "example_id": 221,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100000.0",
      "3.0",
      "0.05",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "-125.0"
    ],
    "solution": "from sympy import symbols, solve\n\nx = symbols(\"x\")\ny = (10*x**3 - 0.5/x**2)**5\nprint(y)"
  },
  {
    "example_id": 222,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "2.0",
      "1.0",
      "0.0",
      "0.0",
      "-2.0",
      "1.0",
      "-4.0",
      "4.0",
      "-6.0",
      "9.0",
      "-8.0",
      "16.0",
      "-10.0",
      "25.0",
      "200.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define the dartboard\ndarts = []\nfor x in range(-6, 6):\n    for y in range(-6, 6):\n        darts.append([x, y])\n\n# Compute the probability of landing in each circle\nr = 6\nfor i in range(1, 9):\n    r -= 2\n    area = math.pi * (r ** 2)\n    probability = area / (4 * math.pi)\n    print(\"Probability of landing in circle of radius\", r, \"is\", probability)\n\n# Compute the expected number of darts in each circle\nprobabilities = []\nfor i in range(1, 9):\n    probabilities.append(math.pi * (r ** 2) / (4 * math.pi))\n\n# Compute the expected number of darts in the non-shaded region\nexpected_number_of_darts = sum(probabilities)\nprint(\"Expected number of darts in non-shaded region is\", expected_number_of_darts)"
  },
  {
    "example_id": 223,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "result = [\n    x for x in range(100)\n    if (x/3)**3 - 3*x**2 + 81*x - 729 == 25 + 2*5*3 + 9\n]\nprint(result)"
  },
  {
    "example_id": 224,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "num_of_primes = 0\nfor i in range(100, 300):\n    if math.sqrt(i) % 1 == 0:\n        num_of_primes += 1\nprint(num_of_primes)"
  },
  {
    "example_id": 225,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "840.0"
    ],
    "solution": "result = math.comb(7, 3)\nprint(result)"
  },
  {
    "example_id": 226,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "330.0"
    ],
    "annotated_answers": [
      "330.0"
    ],
    "solution": "import math\nprint(math.comb(11, 4))"
  },
  {
    "example_id": 227,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "# initialize variables\nrows = 6\ncols = 6\n\n# initialize list to store rectangles\nrects = []\n\n# loop through all possible combinations of rows and columns\nfor i in range(rows):\n    for j in range(cols):\n        # check if the current row and column form a perfect square\n        if is_perfect_square(i + j):\n            # if so, add the rectangle to the list\n            rects.append((i, j))\n\n# print the number of rectangles\nprint(len(rects))"
  },
  {
    "example_id": 228,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "153.0"
    ],
    "solution": "result = 5\nprint(result)"
  },
  {
    "example_id": 229,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "864.0"
    ],
    "solution": "result = math.comb(4+2+1, 4)\nprint(result)"
  },
  {
    "example_id": 230,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "729.0",
      "729.0",
      "1458.0",
      "2187.0",
      "2916.0",
      "3645.0",
      "4374.0",
      "5103.0",
      "5832.0",
      "6561.0"
    ],
    "annotated_answers": [
      "71.0"
    ],
    "solution": "n = 9**3\nprint(n)\n\nmultiples = []\nfor i in range(n, 9**5):\n    if i % n == 0:\n        multiples.append(i)\nprint(multiples)"
  },
  {
    "example_id": 231,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3003.0"
    ],
    "annotated_answers": [
      "1414.0"
    ],
    "solution": "girls = 8\nboys = 6\n\n# Define a function to count the number of ways to select the team\ndef select_team(girls, boys):\n    # Compute the number of ways to select the team\n    num_ways = math.comb(girls + boys, boys)\n    return num_ways\n\n# Compute the number of ways to select the team\nnum_ways = select_team(girls, boys)\n\n# Print the result\nprint(num_ways)"
  },
  {
    "example_id": 232,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "# Create a list of all possible colors\ncolors = ['white', 'brown', 'blue']\n\n# Create a list of all possible pairs of colors\npairs = list(combinations(colors, 2))\n\n# Create a list of all possible sock combinations\nsock_combinations = []\nfor pair in pairs:\n    sock_combinations.append(pair[0] +'' + pair[1])\n    sock_combinations.append(pair[1] +'' + pair[0])\n\n# Create a list of all possible ways to choose a pair of socks\n# given that they must be the same color\nchoices = []\nfor i in range(0, len(sock_combinations)):\n    choices.append(sock_combinations[i] +'and'+ sock_combinations[i])\n\n# Print the result\nprint(len(choices))"
  },
  {
    "example_id": 233,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14625.0"
    ],
    "annotated_answers": [
      "10800.0"
    ],
    "solution": "result = math.comb(26, 2) * math.comb(10, 2)\nprint(result)"
  },
  {
    "example_id": 234,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "num_math_books = 2\nnum_history_books = 3\nnum_physics_books = 4\ntotal_books = 8\n\nall_books = [\n   'math',\n   'math',\n    'history',\n    'history',\n    'history',\n    'physics',\n    'physics',\n    'physics',\n    'physics',\n]\n\n# Count the number of ways to arrange the books on the shelf\n# if no two books of the same type can be adjacent\n\n# Create a list of all the possible book combinations\npossible_book_combinations = list(itertools.combinations(all_books, total_books))\n\n# Create a list of all the possible book arrangements\npossible_book_arrangements = []\nfor book_combination in possible_book_combinations:\n    possible_book_arrangements.append(list(book_combination))\n\n# Count the number of arrangements that do not have any adjacent books of the same type\nnum_valid_arrangements = 0\nfor arrangement in possible_book_arrangements:\n    if not any(arrangement[i] == arrangement[i-1] for i in range(1, len(arrangement))):\n        num_valid_arrangements += 1\n\n# Print the number of valid arrangements\nprint(num_valid_arrangements)"
  },
  {
    "example_id": 235,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "result = sum(1 for i in range(1, 10) for j in range(1, 10) if i**2 + j**2 == 100)\nprint(result)"
  },
  {
    "example_id": 236,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Find the number of triangles\nnum_triangles = 0\nfor a in range(1, 7):\n    for b in range(1, 7):\n        if a + b < 7:\n            num_triangles += 1\nprint(num_triangles)"
  },
  {
    "example_id": 237,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "4.0",
      "10.0",
      "4.0",
      "6.0",
      "10.0",
      "4.0",
      "6.0",
      "10.0",
      "4.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "n = 10\nk = 4\n\n# Using binomial theorem\nprint(n, 'choose', k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)\nprint(k)\nprint(n-k)\nprint(n)"
  },
  {
    "example_id": 238,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "3600.0"
    ],
    "solution": "# Alice and Bob won't sit next to each other\n# Alice and Bob are people\n# P = Alice, Q = Bob\n\n# Let's first find the number of ways to seat 7 people\n# We can seat them in 7! ways\n# 7! = 5040\n\n# Now we need to find the number of ways to seat 8 people\n# we can seat them in 8! ways\n# 8! = 40320\n\n# To find the number of ways to seat 8 people without Alice and Bob sitting next to each other\n# we can subtract the number of ways to seat 8 people in which Alice and Bob sit next to each other\n\n# The number of ways to seat 8 people in which Alice and Bob sit next to each other\n# is 7! - 5040\n# 7! - 5040 = 40320 - 5040 = 35280\n\n# So, the number of ways to seat 8 people without Alice and Bob sitting next to each other\n# is 40320 - 35280 = 800\n\n# Now we need to divide by 2\n# because there are two seatings that are the same\n# (two seatings are the same if one is a rotation of the other)\n# 800 / 2 = 400\n\n# So, there are 400 ways to seat 8 people without Alice and Bob sitting next to each other\nprint(400)"
  },
  {
    "example_id": 239,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "252.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "# Compute number of ways to divide 10 players into 2 teams of 5\nnum_divisions = math.comb(10, 5)\nprint(num_divisions)"
  },
  {
    "example_id": 240,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "result = 900 / 10\nprint(result)"
  },
  {
    "example_id": 241,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def is_perfect_square(n):\n    return int(sqrt(n)) ** 2 == n\n\n\ndef num_diagonals(sides):\n    return sum([1 for i in range(sides) for j in range(i + 1, sides)])\n\n\ndef num_unique_diagonals(sides):\n    return len(set(itertools.combinations(range(sides), 2)))\n\n\ndef main():\n    print(num_diagonals(5))\n    print(num_unique_diagonals(5))\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 242,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "result = math.gcd(math.factorial(5), math.factorial(10), math.factorial(15))\nprint(result)"
  },
  {
    "example_id": 243,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1)"
  },
  {
    "example_id": 244,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "576.0"
    ],
    "solution": "import itertools\n\ndef circular_table(list_of_lists):\n    return len(list(itertools.combinations(list_of_lists, 9)))\n\nprint(circular_table([['England'] * 3, ['Germany'] * 4, ['France'] * 2]))"
  },
  {
    "example_id": 245,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1260.0"
    ],
    "solution": "# Initialize variables\nn = 8\n\n# Calculate number of ways to arrange letters of word ELLIPSE\nresult = 0\n\n# Iterate over all possible combinations of letters\nfor i in range(1, n+1):\n    for j in combinations(range(1, n+1), i):\n        # Check if the combination is a permutation of ELLIPSE\n        if ''.join(map(str, j)) == 'ELLIPSE':\n            result += 1\n\n# Print result\nprint(result)"
  },
  {
    "example_id": 246,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "result = math.comb(4, 2)\nprint(result)"
  },
  {
    "example_id": 247,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "# Define variables\na, b, c = symbols('a b c')\n\n# Compute first digit triple the final digit\nfirst_digit_triple_final_digit = a*100 + b*10 + c\n\n# Define the range of 3-digit numbers\nrange_3_digit_numbers = range(100, 1000)\n\n# Compute the number of 3-digit numbers\nnumber_3_digit_numbers = len(range_3_digit_numbers)\n\n# Compute the number of 3-digit numbers\n# that have first digit triple the final digit\nnumber_3_digit_numbers_first_digit_triple_final_digit = sum(1 for x in range_3_digit_numbers if first_digit_triple_final_digit == x)\n\n# Print the result\nprint(number_3_digit_numbers_first_digit_triple_final_digit)"
  },
  {
    "example_id": 248,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "380.0"
    ],
    "solution": "# Define variables\nn = 20\nm = 2\n\n# Compute the number of ways to choose president and vice-president\n# without any restriction\nnum_ways = math.comb(n, m)\n\n# Print the number of ways to choose president and vice-president\nprint(num_ways)"
  },
  {
    "example_id": 249,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Define a function to check if a number is a perfect square\ndef is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square\n    \"\"\"\n    return int(sqrt(n)) ** 2 == n\n\n# Find the number of ways to choose 3 from 4\nresult = math.comb(4, 3)\nprint(result)"
  },
  {
    "example_id": 250,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "result = math.perm(4, 3)\nprint(result)"
  },
  {
    "example_id": 251,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0",
      "576.0",
      "576.0"
    ],
    "annotated_answers": [
      "2880.0"
    ],
    "solution": "# Compute 6!\nn = 6\nresult = math.factorial(n)\nprint(result)\n\n# Compute (4!)^2\nn = 4\nresult = math.factorial(n) ** 2\nprint(result)\n\n# Find least common multiple\nresult = math.lcm(result, result)\nprint(result)"
  },
  {
    "example_id": 252,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Create a list of players\nplayers = [\"Helen\", \"Ines\", \"Janet\", \"Kendra\", \"Lara\", \"Monica\"]\n\n# Create a dictionary to store the number of games won by each player\nwins = {}\n\n# Initialize a counter\ncounter = 0\n\n# Loop through the list of players\nfor i in players:\n    # If the player won 4 games\n    if wins.get(i) == 4:\n        # Add the number of games won by that player to the counter\n        counter += 4\n\n# Print the counter\nprint(counter)"
  },
  {
    "example_id": 253,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 5\nprint(binomial(n, 0))"
  },
  {
    "example_id": 254,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def is_perfect_square(n):\n    return int(sqrt(n)) ** 2 == n\n\ndef solve(n):\n    result = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if is_perfect_square(n - i ** 2):\n            result += 1\n    return result\n\nn = 100\nprint(solve(n))"
  },
  {
    "example_id": 255,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "1940.0"
    ],
    "solution": "def is_perfect_square(n):\n    return int(sqrt(n))**2 == n\n\nr = 8\nd = 6\nn = 5\n\ncount = 0\nfor r_subset in itertools.combinations(range(r), n):\n    if any(i in range(d) for i in r_subset):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 256,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "2.0",
      "3.0",
      "1.0",
      "5.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# define variables\nj = 3\nk = 2\n\n# define list of people\npeople = [1, 2, 3]\n\n# define list of front seats\nfront = [1, 2]\n\n# define list of back seats\nback = [3, 4, 5]\n\n# define list of drivers\ndrivers = [1, 2]\n\n# define list of youngest children\nchildren = [3]\n\n# define list of seating arrangements\nseating_arrangements = []\n\n# loop through front seats\nfor i in front:\n    # loop through back seats\n    for j in back:\n        # loop through drivers\n        for k in drivers:\n            # loop through children\n            for l in children:\n                # if i is not equal to l\n                if i!= l:\n                    # if k is not equal to l\n                    if k!= l:\n                        # if j is not equal to l\n                        if j!= l:\n                            # if i is not equal to j\n                            if i!= j:\n                                # if k is not equal to j\n                                if k!= j:\n                                    # if l is not equal to j\n                                    if l!= j:\n                                        # if l is not equal to k\n                                        if l!= k:\n                                            # add seating arrangements to list\n                                            seating_arrangements.append((i, j, k, l))\n\n# print seating arrangements\nprint(seating_arrangements)"
  },
  {
    "example_id": 257,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0"
    ],
    "annotated_answers": [
      "839.0"
    ],
    "solution": "n = 100\nk = int(math.factorial(3) / math.factorial(3))\nprint(k + n)"
  },
  {
    "example_id": 258,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "# Create a list of all multiples of 3 and all multiples of 4\nmultiples = []\nfor i in range(1, 100):\n    if i % 3 == 0 or i % 4 == 0:\n        multiples.append(i)\n\n# Create a list of all numbers from 1 to 100\nnumbers = list(range(1, 101))\n\n# Remove all multiples of 3 and all multiples of 4 from the list of numbers\nfor m in multiples:\n    numbers.remove(m)\n\n# Print the length of the remaining list\nprint(len(numbers))"
  },
  {
    "example_id": 259,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "result = math.comb(6, 2)\nprint(result)"
  },
  {
    "example_id": 260,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# define variables\nn = 8\nk = 2\n\n# compute number of ways\nresult = math.comb(n, k)\nprint(result)"
  },
  {
    "example_id": 261,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "n = 0\nfor i in range(1, 51):\n    n += i * math.factorial(i)\n\nlargest_prime = 0\nfor p in range(2, int(math.sqrt(n)) + 1):\n    if n % p == 0:\n        largest_prime = p\n        break\n\nprint(largest_prime)"
  },
  {
    "example_id": 262,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# Initialize the number of paths to 0\nnumber_of_paths = 0\n\n# Initialize the coordinates of the origin\nx_origin = 0\ny_origin = 0\n\n# Initialize the coordinates of the point M\nx_m = 1\ny_m = 0\n\n# Initialize the coordinates of the point A\nx_a = 1\ny_a = 0\n\n# Initialize the coordinates of the point T\nx_t = 2\ny_t = 0\n\n# Initialize the coordinates of the point H\nx_h = 3\ny_h = 0\n\n# Loop through all possible paths\nfor path in itertools.product(\n    range(x_origin, x_m + 1),\n    range(y_origin, y_m + 1),\n    range(x_origin, x_a + 1),\n    range(y_origin, y_a + 1),\n    range(x_origin, x_t + 1),\n    range(y_origin, y_t + 1),\n    range(x_origin, x_h + 1),\n    range(y_origin, y_h + 1),\n):\n\n    # If the path is a valid path\n    if (\n        # If the path starts at the origin\n        (path[0] == x_origin and path[1] == y_origin)\n        # If the path ends at the origin\n        and (path[-2] == x_origin and path[-1] == y_origin)\n        # If the path does not go through any other points\n        and (\n            (path[2]!= x_m and path[3]!= y_m)\n            and (path[4]!= x_a and path[5]!= y_a)\n            and (path[6]!= x_t and path[7]!= y_t)\n            and (path[8]!= x_h and path[9]!= y_h)\n        )\n    ):\n        # Increment the number of paths\n        number_of_paths += 1\n\n# Print the number of paths\nprint(number_of_paths)"
  },
  {
    "example_id": 263,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "672.0"
    ],
    "solution": "result = math.comb(8, 5)\nprint(result)"
  },
  {
    "example_id": 264,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "non_string_instruments = (130 - (130 * 0.6))\nprint(non_string_instruments)"
  },
  {
    "example_id": 265,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "500500.0"
    ],
    "annotated_answers": [
      "500500.0"
    ],
    "solution": "print(comb(1001, 2))"
  },
  {
    "example_id": 266,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "boxes = 3\nballs = 5\n\n# number of ways to put balls in boxes\nnumber_of_ways = math.comb(balls, boxes)\nprint(number_of_ways)"
  },
  {
    "example_id": 267,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "result = 6\nprint(result)"
  },
  {
    "example_id": 268,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Initialize a set to store the numbers\nnums = set()\n# Loop through all the combinations of digits\nfor combo in combinations(range(1, 5), 4):\n    # Calculate the number\n    num = int(''.join(map(str, combo)))\n    # Check if it is a perfect square\n    if is_perfect_square(num):\n        # Add it to the set\n        nums.add(num)\n# Print the length of the set\nprint(len(nums))"
  },
  {
    "example_id": 269,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "123468.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "# Define a function to check whether a number is a perfect square\ndef is_perfect_square(n):\n    x = int(sqrt(n))\n    return x*x == n\n\n# Define a function to find the solution to the problem\ndef solution(N):\n    # Initialize a list to store the solution\n    result = []\n    # Iterate over all possible seven-digit phone numbers\n    for n in itertools.combinations(range(10), 7):\n        # Check whether the number has the desired property\n        if is_perfect_square(int(''.join(map(str, n[3:])))*int(''.join(map(str, n[:3])))):\n            # If it does, add it to the list of solutions\n            result.append(''.join(map(str, n)))\n    # Return the list of solutions\n    return result\n\n# Test the function with an example\nprint(solution(10))"
  },
  {
    "example_id": 270,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0",
      "7.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "def is_perfect_square(n):\n    return math.sqrt(n) % 1 == 0\n\ndef get_perfect_squares(start, end):\n    for i in range(start, end):\n        if is_perfect_square(i):\n            yield i\n\ndef count_perfect_squares(start, end):\n    return sum(1 for _ in get_perfect_squares(start, end))\n\ndef count_numbers_in_range(start, end):\n    return end - start\n\ndef get_number_of_numbers_in_range(start, end):\n    return count_numbers_in_range(start, end)\n\ndef get_number_of_perfect_squares_in_range(start, end):\n    return count_perfect_squares(start, end)\n\nstart = 6\nend = 86\n\nprint(get_number_of_numbers_in_range(start, end))\nprint(get_number_of_perfect_squares_in_range(start, end))"
  },
  {
    "example_id": 271,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1305.0",
      "1605.0",
      "1905.0",
      "2305.0",
      "2605.0",
      "2905.0",
      "3105.0",
      "3205.0",
      "3305.0",
      "3405.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "for a in range(1, 10):\n    for b in range(1, 10):\n        if a*b*5 % 3 == 0:\n            print(a*1000 + b*100 + 5)"
  },
  {
    "example_id": 272,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Solution\nresult = 5\nprint(result)"
  },
  {
    "example_id": 273,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "635376.0",
      "635376.0",
      "635376.0",
      "635376.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "n = 64\nm = 4\n\n# number of ways to select 4 out of 64\nnCr = math.factorial(n) / (math.factorial(m) * math.factorial(n - m))\n\n# number of ways to select 4 out of 64 that touch the bottom or one of the four lateral sides\nnCr_touching = math.factorial(n) / (math.factorial(m) * math.factorial(n - m))\n\n# number of ways to select 4 out of 64 that touch the bottom\nnCr_touching_bottom = math.factorial(n) / (math.factorial(m) * math.factorial(n - m))\n\n# number of ways to select 4 out of 64 that touch one of the four lateral sides\nnCr_touching_side = math.factorial(n) / (math.factorial(m) * math.factorial(n - m))\n\n# number of ways to select 4 out of 64 that touch one of the four lateral sides\nnCr_touching_side = math.factorial(n) / (math.factorial(m) * math.factorial(n - m))\n\n# number of ways to select 4 out of 64 that touch one of the four lateral sides\nnCr_touching_side = math.factorial(n) / (math.factorial(m) * math.factorial(n - m))\n\n# number of ways to select 4 out of 64 that touch one of the four lateral sides\nnCr_touching_side = math.factorial(n) / (math.factorial(m) * math.factorial(n - m))\n\n# number of ways to select 4 out of 64 that touch one of the four lateral sides\nnCr_touching_side = math.factorial(n) / (math.factorial(m) * math.factorial(n - m))\n\nprint(nCr_touching)\nprint(nCr_touching_bottom)\nprint(nCr_touching_side)\nprint(nCr_touching_side)\nprint"
  },
  {
    "example_id": 274,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "4.0",
      "0.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "from sympy import symbols, solve\nfrom math import sqrt\nfrom itertools import combinations\n\nx, y = symbols('x y')\n\nresult = (x+y)**4 + (x+2*y)**4\nprint(result)\n\nresult = result.coeff(x**2*y**2)\nprint(result)"
  },
  {
    "example_id": 275,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "result = math.perm(5, 5)\nprint(result)"
  },
  {
    "example_id": 276,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# function to check if number is perfect square\ndef is_perfect_square(n):\n    return int(math.sqrt(n)) ** 2 == n\n\n# find number of subsets\ncount = 0\nfor i in range(1, 12):\n    for subset in combinations(range(1, 12), i):\n        if all(is_perfect_square(j) for j in subset):\n            count += 1\nprint(count)"
  },
  {
    "example_id": 277,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Compute number of non-congruent figures\n# that can be constructed\nn_figures = 0\n\n# Create all possible combinations of two equilateral triangles\n# that can be attached to the regular pentagon ABCDE\n# in two of the five positions shown\nfor i in range(5):\n    for j in range(i+1, 5):\n        # Compute center of regular pentagon\n        # at position (x, y)\n        x = (0.5 * math.cos((2 * math.pi * i) / 5) + 0.5 * math.cos((2 * math.pi * j) / 5))\n        y = (0.5 * math.sin((2 * math.pi * i) / 5) + 0.5 * math.sin((2 * math.pi * j) / 5))\n\n        # Compute coordinates of vertices\n        # of equilateral triangles\n        # at position (x, y)\n        x1 = x + 3.1\n        y1 = y + 9.5\n        x2 = x - 3.1\n        y2 = y + 9.5\n\n        # Compute coordinates of vertices\n        # of regular pentagon\n        # at position (x, y)\n        x3 = x + 4.15\n        y3 = y + 19.4\n        x4 = x - 4.15\n        y4 = y + 19.4\n        x5 = x + 14.15\n        y5 = y + 19.4\n\n        # Compute number of non-congruent figures\n        # that can be constructed\n        # by attaching two equilateral triangles\n        # to the regular pentagon at position (x, y)\n        n_figures += 1\n\n# Print number of non-congruent figures\n# that can be constructed\nprint(n_figures)"
  },
  {
    "example_id": 278,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Define a function to check if a number is perfect square or not\ndef is_perfect_square(n):\n    return int(sqrt(n)) ** 2 == n\n\n# Calculate the number of primes in the row of Pascal's Triangle\n# that starts with a 1 followed by a 6\ndef count_primes(row):\n    # Check if the first number of the row is prime\n    if is_perfect_square(row[0]):\n        return 0\n    else:\n        # Count the number of primes in the row\n        count = 1\n        for i in range(1, len(row)):\n            if is_perfect_square(row[i]):\n                count += 1\n        return count\n\n# Calculate the number of primes in the row of Pascal's Triangle\n# that starts with a 1 followed by a 6\ncount = count_primes([1, 6])\nprint(count)"
  },
  {
    "example_id": 279,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.0",
      "1.0",
      "2.0",
      "0.0",
      "2.0",
      "3.0",
      "0.0",
      "3.0",
      "4.0",
      "1.0",
      "1.0",
      "5.0",
      "1.0",
      "2.0",
      "6.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 4\nk = 1\ncount = 0\n\nfor i in range(n):\n    for j in range(k, n):\n        if math.sqrt(i) == math.floor(math.sqrt(i)):\n            count += 1\n            print(count)\n            print(i, j)"
  },
  {
    "example_id": 280,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "393.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "brown_hair = 0.75 * 28\nright_handed = 0.67 * 28\n\nresult = int(brown_hair * right_handed)\nprint(result)"
  },
  {
    "example_id": 281,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define PAPA string\npapa = 'PAPA'\n\n# Define n\nn = len(papa)\n\n# Define letters\nletters = 'PA'\n\n# Define combinations\ncombinations = itertools.combinations(letters, n)\n\n# Define counter\ncounter = 0\n\n# Iterate through combinations\nfor combination in combinations:\n    # Define string\n    string = ''.join(combination)\n\n    # Check if string is equal to papa\n    if string == papa:\n        # Increment counter\n        counter += 1\n\n# Print counter\nprint(counter)"
  },
  {
    "example_id": 282,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Define the number of oranges\nn = 4\n\n# Define the number of groups\nk = 3\n\n# Create a list of possible groups\ngroups = [list(g) for g in combinations(range(n), k)]\n\n# Print the number of possible groups\nprint(len(groups))"
  },
  {
    "example_id": 283,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6435.0"
    ],
    "annotated_answers": [
      "6435.0"
    ],
    "solution": "result = math.comb(15, 7)\nprint(result)"
  },
  {
    "example_id": 284,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "result = math.perm(6, 5)\nprint(result)"
  },
  {
    "example_id": 285,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 0\nfor i in range(1, 15):\n    if 3**i % 15 == 0:\n        n += 1\nprint(n)"
  },
  {
    "example_id": 286,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "233.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "n = 800\ncount = 0\nfor i in range(1, n+1):\n    if '6' in str(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 287,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "720.0"
    ],
    "solution": "n = 7\ngirls = 3\nsons = 4\n\n# number of ways to arrange girls in 3 groups of 3\nnum_girl_seating = math.comb(girls, 3)\n\n# number of ways to arrange boys in 4 groups of 4\nnum_boy_seating = math.comb(sons, 4)\n\n# number of ways to arrange boys and girls in 3 groups of 4\nnum_boy_girl_seating = math.comb(sons, 4) * math.comb(girls, 3)\n\n# total number of ways to arrange all family members in 7 chairs\nnum_seating = num_boy_seating * num_girl_seating * num_boy_girl_seating\n\nprint(num_seating)"
  },
  {
    "example_id": 288,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "n_list = []\nfor n in range(1, 101):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            break\n    else:\n        n_list.append(n)\nprint(len(n_list))"
  },
  {
    "example_id": 289,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "def count_paths(A, B):\n    h = B[0] - A[0]\n    w = B[1] - A[1]\n    result = 0\n    for i in range(h+1):\n        for j in range(w+1):\n            if i == 0 or j == 0:\n                result += 1\n            else:\n                result += count_paths((A[0] + i, A[1] + j), (B[0] + i, B[1] + j))\n    return result\n\ndef is_perfect_square(n):\n    return int(sqrt(n)) ** 2 == n\n\ndef compute_paths(A, B):\n    if is_perfect_square(B[0] - A[0]) and is_perfect_square(B[1] - A[1]):\n        return count_paths(A, B)\n    else:\n        return -1\n\n# test\nA = (0, 0)\nB = (5, 5)\nprint(compute_paths(A, B))"
  },
  {
    "example_id": 290,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Write your code here\nhandshakes = 78\npeople = int(sqrt(handshakes))\n\nwhile people * (people - 1) / 2 < handshakes:\n    people += 1\n\nif people * (people - 1) / 2 == handshakes:\n    print(people)\nelse:\n    print(\"There was a mistake in the calculation.\")"
  }
]