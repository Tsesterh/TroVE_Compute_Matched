[
  {
    "example_id": 0,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "262144.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "print(64**3)"
  },
  {
    "example_id": 1,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "1.25"
    ],
    "solution": "distance = math.sqrt((0.5 + 0.5)**2 + (0.75)**2)\nprint(distance)"
  },
  {
    "example_id": 2,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "237.0",
      "237.0",
      "0.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "# Calculate the total revenue\ntotal_revenue = 3*54 + 20*2 + 35\nprint(f\"{total_revenue:.2f}\")\n# Calculate the total cost\ntotal_cost = 3*54 + 20*2 + 35\nprint(f\"{total_cost:.2f}\")\n# Calculate the profit\nprofit = total_revenue - total_cost\nprint(f\"{profit:.2f}\")"
  },
  {
    "example_id": 3,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "1584.0"
    ],
    "solution": "import itertools\n\nballs = list(range(1, 13))\n\nfor i in itertools.permutations(balls, 3):\n    if i[0]!= i[1]:\n        print(i)"
  },
  {
    "example_id": 4,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "330.0"
    ],
    "solution": "n = 11\nm = 3\n\nprint(f\"{n*m:.0f}\")"
  },
  {
    "example_id": 5,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.745056497175141"
    ],
    "annotated_answers": [
      "3.7"
    ],
    "solution": "x = 37/12\ny = 260/59\nprint((x+y)/2)"
  },
  {
    "example_id": 6,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# number of boxes that contain pencils and pens\nanswer = 13 + 9 - 3\nprint(answer)"
  },
  {
    "example_id": 7,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33422.0",
      "123.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# solve for area\narea = 2 * math.sqrt(18**2 - 18)\nprint(f\"{area:.0f}\")"
  },
  {
    "example_id": 8,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "# compute\nprint(math.sqrt(15 * 35 * 21))"
  },
  {
    "example_id": 9,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9801.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "print(99*99)"
  },
  {
    "example_id": 10,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def is_odd_divisor(n):\n    return n % 2!= 0\n\n# number of divisors\ndef num_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    return count + 1\n\n# count\ncount = 0\nfor i in range(1, 100):\n    if is_odd_divisor(num_divisors(i)):\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 11,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1518.0"
    ],
    "annotated_answers": [
      "1518.0"
    ],
    "solution": "prime_numbers = [2, 3, 5, 7]\ncomposite_numbers = [4, 6, 8, 9]\n\nprime_numbers_product = 1\ncomposite_numbers_product = 1\n\nfor number in prime_numbers:\n    prime_numbers_product *= number\n\nfor number in composite_numbers:\n    composite_numbers_product *= number\n\npositive_difference = prime_numbers_product - composite_numbers_product\n\nprint(positive_difference)"
  },
  {
    "example_id": 12,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "def least_common_multiple(a, b):\n    lcm = (a*b) // math.gcd(a, b)\n    return lcm\n\nprint(least_common_multiple(72, 96))"
  },
  {
    "example_id": 13,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "x = 107 * 109 ** 5\n\n# Find the exponent of 109 in the prime factorization of x\nexponent = math.log(x, 109)\nprint(f\"{exponent:.2f}\")"
  },
  {
    "example_id": 14,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 1/6 * 6 * 7 + 8 * 2 / 8 * (7 - 1)\nprint(f\"{a:.2f}\")"
  },
  {
    "example_id": 15,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "218.81"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print(round(14.7923412**2, 2))"
  },
  {
    "example_id": 16,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for i in range(10, 50):\n    if i % i % 10 == 0:\n        print(i)"
  },
  {
    "example_id": 17,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0",
      "80.0",
      "80.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 10\ny = 20\n\nmy_age = x\nmy_age_in_ten_years = y\nmy_age_in_twenty_years = 2 * x\n\nbrother_age = 4 * my_age\n\nbrother_age_in_ten_years = 4 * my_age_in_ten_years\nbrother_age_in_twenty_years = 4 * my_age_in_twenty_years\n\nprint(brother_age)\nprint(brother_age_in_ten_years)\nprint(brother_age_in_twenty_years)"
  },
  {
    "example_id": 18,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "777.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "# Define the variable\nn = 37\n\n# Find the largest multiple of 37 which is less than 800\nlargest_multiple = 800 - (800 % n)\n\n# Print the result\nprint(largest_multiple)"
  },
  {
    "example_id": 19,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.99999999999999"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print(math.sqrt((2.5**2)-(0.7**2))/(2.7-2.5))"
  },
  {
    "example_id": 20,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = round(sum([13, 14, 22, 52, 63, 74]), -1)\nb = round(sum([math.floor(x / 10) * 10 for x in [13, 14, 22, 52, 63, 74]]), -1)\nprint(f\"{a - b}\")"
  },
  {
    "example_id": 21,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "# Use the math library to find the number of positive multiples of 3 that are less than 20\n# Use the math library to find the number of positive multiples of 6 that are less than 20\n# Subtract the number of positive multiples of 3 that are less than 20 from the number of positive multiples of 6 that are less than 20\nprint(math.floor(19/3) - math.floor(19/6))"
  },
  {
    "example_id": 22,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3 + 4\nprint(x)"
  },
  {
    "example_id": 23,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0",
      "56.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "def rect_perimeter(w,h):\n    return 2*w + 2*h\n\ndef rect_area(w,h):\n    return w*h\n\np = 56\nw = math.sqrt(p*2)\nh = p/w\nprint(f\"The perimeter is {p:.0f} and the area is {rect_area(w,h):.0f}\")"
  },
  {
    "example_id": 24,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "a = 360\nb = 450\nc = 540\n\n# find the gcd\ngcd = math.gcd(a, b, c)\n\n# divide the three numbers by the gcd\nx = a//gcd\ny = b//gcd\nz = c//gcd\n\n# find the least common multiple\nlcm = x*y*z\n\nprint(f\"The minimum number of days before the three planets are in the exact same locations again is: {lcm}\")"
  },
  {
    "example_id": 25,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "overall_average = (84*25 + 66*20)/(25+20)\nprint(overall_average)"
  },
  {
    "example_id": 26,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def find_max_score(sarah, james, matthew):\n    score = sarah * james - matthew\n    return score\n\nmax_score = max(find_max_score(5, 3, -2), find_max_score(5, -2, 3), find_max_score(-2, 5, 3), find_max_score(-2, 3, 5), find_max_score(3, 5, -2), find_max_score(3, -2, 5))\nprint(f\"{max_score}\")"
  },
  {
    "example_id": 27,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print(math.factorial(11) // math.factorial(20))"
  },
  {
    "example_id": 28,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.5",
      "0.3333333333333333",
      "2.0",
      "1.0",
      "0.6666666666666666",
      "3.0",
      "1.5",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 4, 8, 12\ny = 4, 8, 12\nunique_values = [4/4, 4/8, 4/12, 8/4, 8/8, 8/12, 12/4, 12/8, 12/12]\nprint(unique_values)"
  },
  {
    "example_id": 29,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 8\nprint(a)"
  },
  {
    "example_id": 30,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "def count_numbers(start, end):\n    return end - start + 1\n\nprint(count_numbers(36, 93))"
  },
  {
    "example_id": 31,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "# The area of a square is equal to its side length squared\n# The area of the rectangle is equal to the sum of the areas of its two squares\n\narea = (2 * 2) + (2 * 2)\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 32,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "564.0"
    ],
    "annotated_answers": [
      "564.0"
    ],
    "solution": "print(round(563.5097))"
  },
  {
    "example_id": 33,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "256.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "primes = [2, 3, 5, 7]\ndigits = [2, 3, 5, 7]\n\nsol = []\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            for l in range(10):\n                if i in primes and j in primes and k in primes and l in primes:\n                    sol.append(1000 * i + 100 * j + 10 * k + l)\n\nprint(len(sol))"
  },
  {
    "example_id": 34,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "y = 6\nprint(y**3)"
  },
  {
    "example_id": 35,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.08"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a,b,c,d,e = 6,1.5,0.25,0.25,0.0833\ns = a+b+c+d+e\nprint(f\"{s:.2f}\")"
  },
  {
    "example_id": 36,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(3**2 + 5**2)"
  },
  {
    "example_id": 37,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(math.sqrt(6**2) - 3)"
  },
  {
    "example_id": 38,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.796550698475776"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# define variables\nheight_1 = 5\nbase_1 = 8\nleg_2 = 20\n\n# calculate the area of the first triangle\narea_1 = (height_1 * base_1) / 2\n\n# calculate the area of the second triangle\narea_2 = (leg_2 * leg_2) / 2\n\n# calculate the ratio of the areas\nratio = area_1 / area_2\n\n# calculate the missing leg of the second triangle\nleg_1 = math.sqrt(ratio * (leg_2**2 - base_1**2))\n\n# print the missing leg of the second triangle\nprint(f\"The missing leg of the second triangle is {leg_1} cm.\")"
  },
  {
    "example_id": 39,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.7058823529411764"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = -8 / 3 - 7\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 40,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3255.0"
    ],
    "annotated_answers": [
      "3380.0"
    ],
    "solution": "vowel = \"AEIOU\"\nlength = 3\ntotal = 0\nfor letter in vowel:\n    for i in range(26):\n        if i == 0:\n            total += 1\n        else:\n            total += 26\nprint(total)"
  },
  {
    "example_id": 41,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# number of possible rolls for Mary\nnum_mary = 0\n# number of possible rolls for Jenna\nnum_jenna = 0\n\nfor m in range(1, 21):\n    for j in range(1, 21):\n        if m % j == 0:\n            num_mary += 1\n            num_jenna += 1\n            print(f\"{m} is a factor of {j}\")\n            print(f\"{j} is a factor of {m}\")\n\nprint(f\"Number of possible rolls for Mary: {num_mary}\")\nprint(f\"Number of possible rolls for Jenna: {num_jenna}\")"
  },
  {
    "example_id": 42,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "participants_in_both = 28 - 6\nprint(f\"{participants_in_both}\")"
  },
  {
    "example_id": 43,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor i in range(1, 200):\n    if i % 4 == 0 and str(i)[-1] == '2':\n        count += 1\nprint(count)"
  },
  {
    "example_id": 44,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "82.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "N = 500 - 90 + 7 - 400 + 60 + 5\nprint(N)"
  },
  {
    "example_id": 45,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Find the number of two-digit positive integers whose digits sum to 7.\n# Using the fact that the sum of two digits is always greater than 10,\n# we can restrict the upper limit of the loop.\n\n# Initialize counter\ncount = 0\n\n# Loop through all two-digit positive integers\nfor i in range(10, 100):\n    # Extract the individual digits\n    tens_digit = i // 10\n    ones_digit = i % 10\n\n    # Calculate the sum of the digits\n    digit_sum = tens_digit + ones_digit\n\n    # If the sum is 7, increment the counter\n    if digit_sum == 7:\n        count += 1\n\n# Print the number of two-digit positive integers whose digits sum to 7\nprint(count)"
  },
  {
    "example_id": 46,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "answer = 0\nfor i in range(1,6):\n    for j in range(1,6):\n        if i == j:\n            answer += 1\nprint(answer)"
  },
  {
    "example_id": 47,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Evaluate 6+5-4*3/(2+1)\nprint(6+5-4*3/(2+1))"
  },
  {
    "example_id": 48,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = math.pow(math.pow(math.pow(math.pow(-345, 4), 2), 0), -2)\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 49,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2004.0",
      "2004.0"
    ],
    "annotated_answers": [
      "4007.0"
    ],
    "solution": "odd_integer = 2004\nprint(f\"The 2004th positive odd integer is {odd_integer}\")"
  },
  {
    "example_id": 50,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = math.sqrt(16)\nb = math.sqrt(4)\nc = math.sqrt(9)\nd = math.sqrt(4)\n\nprint(f\"The least prime number which is the sum of two distinct positive perfect squares is {a + b + c + d}\")"
  },
  {
    "example_id": 51,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "341400.0",
      "682800.0",
      "1024200.0",
      "1365600.0",
      "1707000.0",
      "2048400.0",
      "2389800.0",
      "2731200.0",
      "3072600.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "for x in range(10):\n    if 341400*x%3==0:\n        print(341400*x)"
  },
  {
    "example_id": 52,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-55.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "total = 200\nhistory = 126\nscience = 129\nboth = total - (history + science)\nprint(both)"
  },
  {
    "example_id": 53,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-30.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "# Find the smallest multiple of 5 greater than -32\nprint(math.ceil(-32/5)*5)"
  },
  {
    "example_id": 54,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8823.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "circle_divisible_by_4 = 35292\nprint(f\"{circle_divisible_by_4 // 4:.0f}\")"
  },
  {
    "example_id": 55,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "overlap_area = (8 - 8.5) * (11 - 8.5)\nprint(overlap_area)"
  },
  {
    "example_id": 56,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10090.0"
    ],
    "solution": "for i in range(1, 1000):\n    if len(str(i)) % 2 == 1:\n        print(i)\n        break"
  },
  {
    "example_id": 57,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.6",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "data = [4, 5, 6, 7, 8, 9]\ngrades = [1, 2, 7, 8, 3, 3, 3, 5, 6, 8]\n\n# calculate mean\nmean = sum(grades) / len(grades)\nprint(\"The arithmetic mean of the grades is:\", mean)\n\n# calculate median\nmedian = grades[len(grades)//2]\nprint(\"The median of the grades is:\", median)\n\n# calculate mode\ngrades_count = [grades.count(i) for i in grades]\ngrades_count.sort(reverse=True)\nmode = grades_count[0]\nprint(\"The mode of the grades is:\", mode)"
  },
  {
    "example_id": 58,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9800.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "lcm = 14 * 20 * 35\nprint(lcm)"
  },
  {
    "example_id": 59,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0",
      "101.0",
      "101.0",
      "101.0",
      "101.0",
      "101.0",
      "101.0",
      "101.0",
      "101.0",
      "101.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for i in range(100, 1000):\n    if is_prime(i):\n        for j in range(1, i):\n            for k in range(1, j):\n                if is_cube(j) + is_cube(k) == is_cube(i):\n                    print(i)\n                    break"
  },
  {
    "example_id": 60,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "8.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "cups = 15 / 20 * 144\nprint(cups)"
  },
  {
    "example_id": 61,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Find the area of the ring\nring_area = math.pi * (12**2 - 10**2)\n\n# Find the area of the smallest circle\nsmallest_circle_area = math.pi * 6**2\n\n# Find the radius of the smallest circle\nradius = math.sqrt(smallest_circle_area / math.pi)\n\n# Print the radius\nprint(radius)"
  },
  {
    "example_id": 62,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(8 - 4 / 2 - 1)"
  },
  {
    "example_id": 63,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.75"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = (5**2 - 2) / 4\nprint(x)"
  },
  {
    "example_id": 64,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "203.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "k = 0\nfor i in range(27):\n    if is_prime(i) and is_cube(i):\n        k += 1\nprint(k)"
  },
  {
    "example_id": 65,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define function is_prime\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define function is_cube\ndef is_cube(x):\n    return x ** 3 == x\n\n# Initialize set for prime digits\nprime_digits = set()\n\n# Loop through range of 0-9\nfor i in range(10):\n    # Check if digit is prime\n    if is_prime(i):\n        # Check if two-digit number is divisible by digit\n        if is_cube(6 * i):\n            # Add digit to set of prime digits\n            prime_digits.add(i)\n\n# Print length of set of prime digits\nprint(len(prime_digits))"
  },
  {
    "example_id": 66,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "print(600 / 3)"
  },
  {
    "example_id": 67,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88920.0"
    ],
    "annotated_answers": [
      "247000.0"
    ],
    "solution": "purchase_price = 1.8 * 49400\nprint(purchase_price)"
  },
  {
    "example_id": 68,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# \ndef is_cube(x):\n    return x**3 - x == 0\n\n# \ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# \ndef count_rectangles(points):\n    rectangles = 0\n    for i in range(len(points) - 1):\n        for j in range(i + 1, len(points)):\n            if is_cube(points[i][0] - points[j][0]) and is_cube(points[i][1] - points[j][1]):\n                rectangles += 1\n    return rectangles\n\n# \ndef main():\n    points = [(0, 0), (10, 0), (10, -10), (0, -10)]\n    print(count_rectangles(points))\n\n# \nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 69,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "def is_cube(x):\n    return x**3 - x == 0\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_ways(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_cube(i):\n            count += 1\n    return count\n\nprint(count_ways(5))"
  },
  {
    "example_id": 70,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "12.0"
    ],
    "annotated_answers": [
      "636.0"
    ],
    "solution": "x = 0\nwhile x < 24:\n    if x % 4 == 0 and x % 3 == 0 and x % 2 == 0:\n        print(x)\n    x += 1"
  },
  {
    "example_id": 71,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.7"
    ],
    "annotated_answers": [
      "2.7"
    ],
    "solution": "print(round(2.745, 1))"
  },
  {
    "example_id": 72,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "24.0",
      "36.0",
      "48.0",
      "60.0",
      "72.0",
      "84.0",
      "96.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for x in range(4, 100, 4):\n    if x % 6 == 0:\n        print(x)"
  },
  {
    "example_id": 73,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "diagonals = 5\nprint(diagonals)"
  },
  {
    "example_id": 74,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(x):\n    return x ** 3 == abs(x)\n\ndef count_cubes_in_range(start, end):\n    count = 0\n    for x in range(start, end + 1):\n        if is_prime(x) and is_cube(x):\n            count += 1\n    return count\n\nprint(count_cubes_in_range(200, 300))"
  },
  {
    "example_id": 75,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.66"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# Using the formula for the area of a pentagon\npentagon_area = 5 * math.sqrt(3)\nprint(f\"{pentagon_area:.2f}\")"
  },
  {
    "example_id": 76,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.31"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x = -0.309\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 77,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def get_prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\ndef get_prime_factors_sorted(n):\n    return sorted(get_prime_factors(n))\n\n\ndef get_least_prime_factor(n):\n    return get_prime_factors_sorted(n)[0]\n\n\ndef get_greatest_prime_factor(n):\n    return get_prime_factors_sorted(n)[-1]\n\n\ndef get_prime_factors_diff(n):\n    return get_greatest_prime_factor(n) - get_least_prime_factor(n)\n\n\nprint(get_prime_factors_diff(2000))"
  },
  {
    "example_id": 78,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.88"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Define radius of each circle\nr1 = 4\nr2 = r1 * 2\nr3 = r2 * 2\nr4 = r3 * 2\n\n# Calculate area of each circle\nA1 = math.pi * r1 ** 2\nA2 = math.pi * r2 ** 2\nA3 = math.pi * r3 ** 2\nA4 = math.pi * r4 ** 2\n\n# Calculate total area of all circles\nT = A1 + A2 + A3 + A4\n\n# Calculate length of radius of larger circle\nR = math.sqrt(T / math.pi)\n\n# Print length of radius of larger circle\nprint(f\"{R:.2f}\")"
  },
  {
    "example_id": 79,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# \n\n\ndef count_divisible(n, m):\n    count = 0\n    for i in range(1, n):\n        if i % m == 0:\n            count += 1\n    return count\n\n\nprint(count_divisible(500, 3 * 4 * 5))"
  },
  {
    "example_id": 80,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# number of houses = 6 * 10 = 60\nprint(60)"
  },
  {
    "example_id": 81,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1200.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "speed = 20 * 60\nprint(f\"{speed:.2f}\")"
  },
  {
    "example_id": 82,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "234.0"
    ],
    "annotated_answers": [
      "234.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nn = 201\nwhile n <= 360:\n    if gcd(n, 36) == 18:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 83,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "sum = 0\nfor x in range(-3, 8+1):\n    if x+5 in range(-3, 8+1):\n        sum += x+5\nprint(sum)"
  },
  {
    "example_id": 84,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(x):\n    return round(x ** (1/3)) == x ** (1/3)\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef solution(n):\n    a = int(n ** (1/3))\n    b = int(n / a)\n    c = int(n / (a * b))\n    if is_prime(a) and is_prime(b) and is_prime(c) and is_cube(a) and is_cube(b) and is_cube(c):\n        return gcd(a, b)\n    return 0\n\nprint(solution(16))"
  },
  {
    "example_id": 85,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "for i in range(1, 100):\n    if i % 2 == 1 and is_prime(i):\n        if is_cube(i):\n            print(i)\n            break"
  },
  {
    "example_id": 86,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "# Find the number of different three-course meals that can be formed\nmeals = 5 * 8 * 4\nprint(meals)"
  },
  {
    "example_id": 87,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Euclidean algorithm\ndef gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcf(518, 294))"
  },
  {
    "example_id": 88,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.48",
      "0.71",
      "3.76"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "# Define the angle\nangle = math.radians(110)\n\n# Calculate the length of the side\nside = math.cos(angle) * math.sqrt(2)\n\n# Calculate the area\narea = math.sqrt(2) / 2\n\n# Calculate the perimeter\nperimeter = 4 * math.sin(angle)\n\n# Print the results\nprint(f\"The length of the side is {side:.2f} units.\")\nprint(f\"The area of the triangle is {area:.2f} square units.\")\nprint(f\"The perimeter of the triangle is {perimeter:.2f} units.\")"
  },
  {
    "example_id": 89,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "#\na = 3 * math.sqrt(5)\nb = 5 * math.sqrt(3)\n\n#\nn = 0\nfor i in range(int(a), int(b)):\n    if is_cube(i):\n        n += 1\n\nprint(n)"
  },
  {
    "example_id": 90,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2420.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "not_mexico = 30 - 7 - 11 + 4\nprint(not_mexico)"
  },
  {
    "example_id": 91,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.483314773547883",
      "11.224972160321824",
      "7.483314773547883",
      "11.224972160321824",
      "7.483314773547883",
      "11.224972160321824",
      "8.881784197001252",
      "-16.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = math.sqrt(56)\nb = math.sqrt(126)\n\na_is_cube = is_cube(a)\nb_is_cube = is_cube(b)\n\nif a_is_cube and b_is_cube:\n    print(\"a and b are perfect cubes\")\nelse:\n    print(\"a and b are not perfect cubes\")\n\nif a_is_cube:\n    print(f\"{a} is a perfect cube\")\nelse:\n    print(f\"{a} is not a perfect cube\")\n\nif b_is_cube:\n    print(f\"{b} is a perfect cube\")\nelse:\n    print(f\"{b} is not a perfect cube\")\n\na_prime = is_prime(a)\nb_prime = is_prime(b)\n\nif a_prime and b_prime:\n    print(\"a and b are prime numbers\")\nelse:\n    print(\"a and b are not prime numbers\")\n\nif a_prime:\n    print(f\"{a} is a prime number\")\nelse:\n    print(f\"{a} is not a prime number\")\n\nif b_prime:\n    print(f\"{b} is a prime number\")\nelse:\n    print(f\"{b} is not a prime number\")\n\n# find gcd of a and b\ngcd_result = gcd(a, b)\nprint(f\"gcd of {a} and {b} is {gcd_result}\")"
  },
  {
    "example_id": 92,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.5"
    ],
    "annotated_answers": [
      "84.5"
    ],
    "solution": "print(35.2 + 49.3)"
  },
  {
    "example_id": 93,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "# Define the function\ndef sum_prime_factors(n):\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through all prime factors\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # Check if factor is prime\n        if is_prime(i):\n            # Check if factor divides n\n            while n % i == 0:\n                sum += i\n                n //= i\n    # Return the sum\n    return sum\n\n# Call the function\nprint(sum_prime_factors(85085))"
  },
  {
    "example_id": 94,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def positive_divisors(n):\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors\n\n\ndef product_of_positive_divisors(n):\n    return math.prod(positive_divisors(n))\n\n\nprint(product_of_positive_divisors(10))"
  },
  {
    "example_id": 95,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "total_boxes = 4 * 3 * 2 + 4 * 3 + 4\nprint(total_boxes)"
  },
  {
    "example_id": 96,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def trailing_zeroes(n):\n    count = 0\n    while n > 0:\n        n //= 5\n        count += n\n    return count\n\n\nprint(trailing_zeroes(42))"
  },
  {
    "example_id": 97,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "666000.0"
    ],
    "annotated_answers": [
      "666000.0"
    ],
    "solution": "print(math.prod((3**2, 2**4, 37, 5**3)))"
  },
  {
    "example_id": 98,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "for i in range(1, 21):\n    if i % 3 == 0 and i % 5 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 99,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.000000000000001"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 20\nx = x * (2/5)**2 * (3/4)**2 * (5/9)\nprint(x**5)"
  },
  {
    "example_id": 100,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.8"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "x = 87\ny = 85\nz = 87\n\n# Calculate the average\navg = (x + y + z)/5\n\n# Calculate the difference between the two test scores\ndiff = z - y\n\n# Calculate the highest test score\nhighest = avg + diff\n\nprint(f\"The highest test score is {highest:.2f}\")"
  },
  {
    "example_id": 101,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "8.0",
      "12.0",
      "16.0",
      "20.0",
      "24.0",
      "28.0",
      "32.0",
      "36.0",
      "40.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for i in range(1, 120):\n    if i % 4 == 0:\n        print(i)"
  },
  {
    "example_id": 102,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "denominator = 8\nnumerator = 5\ndifference = denominator - numerator\nprint(difference)"
  },
  {
    "example_id": 103,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(0**(5**6431564))"
  },
  {
    "example_id": 104,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "1.125"
    ],
    "solution": "a = 0.2 + 0.6\nprint(f\"{1/a:.2f}\")"
  },
  {
    "example_id": 105,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "for i in range(2, 100):\n    if i % 3 == 2 and i % 4 == 2 and i % 5 == 2 and i % 6 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 106,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print((-1)**1001)"
  },
  {
    "example_id": 107,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# \ndays_studied_for_three_hours_or_more = 0\nfor i in range(1, 11):\n    if i!= 5:\n        days_studied_for_three_hours_or_more += 1\nprint(days_studied_for_three_hours_or_more)"
  },
  {
    "example_id": 108,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "563.51"
    ],
    "annotated_answers": [
      "563.51"
    ],
    "solution": "print(round(563.5097, 2))"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3"
    ],
    "annotated_answers": [
      "7.2"
    ],
    "solution": "x = (2*6)/(6*6)\nprint(f\"{x:.1f}\")"
  },
  {
    "example_id": 110,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.18"
    ],
    "annotated_answers": [
      "13.18"
    ],
    "solution": "print(56.78 - 43.6)"
  },
  {
    "example_id": 111,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "22.5"
    ],
    "solution": "x = (2*2*5 - 2*2*2)/(2*2*2 - 2*2*5)\nprint(f\"{x:.1f}\")"
  },
  {
    "example_id": 112,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 32/2 + 8/2\nprint(x)"
  },
  {
    "example_id": 113,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "7.0",
      "7.0"
    ],
    "annotated_answers": [
      "147.0"
    ],
    "solution": "# Let's assume that Kelly can read 1 page of a book in x minutes\n# Let's assume that she reads 5 pages of fiction book in y minutes\n# Let's assume that she reads 2 pages of history textbook in z minutes\n# Let's assume that she wants to read 30 pages of each book\n\n# We know that y + z = 7\n# We know that 5y + 2z = 30\n\n# We can solve this system of equations to find x, y, and z\nx = 1\ny = 7\nz = 7\n\n# Let's print the solution\nprint(f\"x = {x}\")\nprint(f\"y = {y}\")\nprint(f\"z = {z}\")"
  },
  {
    "example_id": 114,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "234.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "perimeter = 6 * 39\nprint(perimeter)"
  },
  {
    "example_id": 115,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.4659258262890678",
      "1.4659258262890678",
      "1.4659258262890678",
      "4.397777478867203"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "count = 0\nfor i in range(1, 101):\n    if str(i).count(\"6\") > 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 116,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "set = {2/5, 1/2, 5, 10}\nmax_quotient = max(set) / min(set)\nprint(max_quotient)"
  },
  {
    "example_id": 117,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "smallest_average = 4"
  },
  {
    "example_id": 118,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "103041.0"
    ],
    "annotated_answers": [
      "103041.0"
    ],
    "solution": "print((103041 ** 0.5) ** 2)"
  },
  {
    "example_id": 119,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "price_per_doughnut = 3/4\nprice_per_dozen = price_per_doughnut * 12\nprint(price_per_dozen)"
  },
  {
    "example_id": 120,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "base = 8\nheight = (8*6)/2\nprint(f\"{height:.2f}\")"
  },
  {
    "example_id": 121,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5040.0"
    ],
    "annotated_answers": [
      "5040.0"
    ],
    "solution": "import itertools\n\ndef suitcase_lock():\n    return len(list(itertools.permutations('0123456789', 4)))\n\nprint(suitcase_lock())"
  },
  {
    "example_id": 122,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.36"
    ],
    "annotated_answers": [
      "1.36"
    ],
    "solution": "# Calculate the number of kilograms of veal to buy\nveal_weight_in_kg = 3 / 2.20\n\nprint(f\"{veal_weight_in_kg:.2f}\")"
  },
  {
    "example_id": 123,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "gcf = 1\nfor i in range(1, 10000000):\n    if (144 % i == 0) and (405 % i == 0):\n        gcf = i\n        break\nprint(gcf)"
  },
  {
    "example_id": 124,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.73"
    ],
    "annotated_answers": [
      "0.73"
    ],
    "solution": "print(0.8 - 0.07)"
  },
  {
    "example_id": 125,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "scores = [17, 10, 9, 14, 16, 8, 10]\ntotal = 0\nfor i in range(3):\n    total += scores[i+3]\nprint(total)"
  },
  {
    "example_id": 126,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "university_mall = 90 * (18/90)\nprint(university_mall)"
  },
  {
    "example_id": 127,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "588.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "num_possibilities = 14 * 42\nprint(num_possibilities)"
  },
  {
    "example_id": 128,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# calculate number of times\nnumber_of_times = 0\nfor i in range(1, 40):\n    if i % 2 == 0:\n        number_of_times += 1\n    if i % 3 == 0:\n        number_of_times += 1\n    if i % 5 == 0:\n        number_of_times += 1\nprint(number_of_times)"
  },
  {
    "example_id": 129,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.15"
    ],
    "annotated_answers": [
      "0.15"
    ],
    "solution": "print(3/20)"
  },
  {
    "example_id": 130,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = (29 - 2 - 2 - 1 - 2) / 2\nprint(x)"
  },
  {
    "example_id": 131,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "print(120)"
  },
  {
    "example_id": 132,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "135.0",
      "9.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "closest = 0\ndiff = 100\nfor i in range(9, 13):\n    if abs(0.135 - (0.331 + 0.116)) < diff:\n        diff = abs(0.135 - (0.331 + 0.116))\n        closest = i\nprint(\"The number of its male bus riders is closest to 135% of the number of its female bus riders in the grade \" + str(closest))"
  },
  {
    "example_id": 133,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "29.0",
      "11.0",
      "28.0",
      "11.0",
      "29.0",
      "12.0",
      "29.0",
      "13.0",
      "28.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "import math\n\ndef is_relatively_prime(a, b):\n    return math.gcd(a, b) == 1\n\ndef get_relatively_prime_numbers(n, m, limit):\n    for i in range(n, limit):\n        for j in range(m, limit):\n            if is_relatively_prime(i, j):\n                yield i, j\n\nrelatively_prime_numbers = list(get_relatively_prime_numbers(10, 28, 30))\nprint(relatively_prime_numbers)"
  },
  {
    "example_id": 134,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(((1*2)+(3*4)-(5*6)+(7*8))*(9*0))"
  },
  {
    "example_id": 135,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "mean = (70 + 80 + 90 + 75 + 80 + 85)/6\nprint(mean)"
  },
  {
    "example_id": 136,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(1200 * 5 * 0.01)"
  },
  {
    "example_id": 137,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.83"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "hypotenuse = math.sqrt(2**2 + 2**2)\nprint(f\"{hypotenuse:.2f}\")"
  },
  {
    "example_id": 138,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "492.0"
    ],
    "annotated_answers": [
      "1208.0"
    ],
    "solution": "# find the perimeter of the hexagon\nperimeter = 0\nfor i in range(6):\n    perimeter += 62 + 20\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 139,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11]\nproduct = 1\nfor i in primes:\n    product *= i\nprint(product % 42)"
  },
  {
    "example_id": 140,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 141,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(math.ceil((7/3) - 5))"
  },
  {
    "example_id": 142,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "shorter_length = 60 / 5\nprint(shorter_length)"
  },
  {
    "example_id": 143,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 0\nfor p in itertools.permutations([1, 2, 3, 4, 5, 6]):\n    if is_prime(p[0]) and is_cube(p[1]) and is_prime(p[2]) and is_prime(p[3]) and is_prime(p[4]) and is_prime(p[5]):\n        n = p[0]\n        break\nprint(n)"
  },
  {
    "example_id": 144,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0",
      "5.0",
      "16.0",
      "5.0",
      "24.0",
      "5.0",
      "32.0",
      "5.0",
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 30\nrow = int(math.ceil(n / 2))\ncol = n % 2\n\ndef get_number(row, col):\n    if col == 0:\n        return row\n    else:\n        return row * 2 + 1\n\nprint(get_number(row, col))"
  },
  {
    "example_id": 145,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "326.5"
    ],
    "annotated_answers": [
      "326.5"
    ],
    "solution": "print(313.9 + 12.6)"
  },
  {
    "example_id": 146,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((100/101)**(-3)*(100/101)**3)"
  },
  {
    "example_id": 147,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((1 + 2 * 3 * 4 * 5) / 11)"
  },
  {
    "example_id": 148,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "67.2"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "# Solve for tree height\ntree_height = (120 - 8) / (5 / 3)\nprint(f\"{tree_height:.2f}\")"
  },
  {
    "example_id": 149,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4500.0"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "answer = 0\nfor i in range(1000, 10000):\n    if i % 2!= 0:\n        answer += 1\nprint(answer)"
  },
  {
    "example_id": 150,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "for n in itertools.count(1):\n    if is_prime(n):\n        if is_prime(n**2 + 1):\n            if is_prime(n**2 + n + 1):\n                print(n)\n                break"
  },
  {
    "example_id": 151,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2097154.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "pythagoras_number, ptolemy_number = 2, -2\neuclid_number, hypatia_number = 1, 1\nfinal_numbers = [pythagoras_number ** 20, ptolemy_number ** 20, euclid_number ** 20, hypatia_number ** 20]\nsum_final_numbers = sum(final_numbers)\nprint(sum_final_numbers)"
  },
  {
    "example_id": 152,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "12.0",
      "2.0",
      "10.0",
      "4.0",
      "8.0",
      "6.0",
      "6.0",
      "8.0",
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def count(n):\n    if n%2==0:\n        return n\n    else:\n        return 13-n\n\nfor i in range(5000):\n    print(count(i))"
  },
  {
    "example_id": 153,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "21.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "ratio = [2,3,3,4]\nsum(ratio[:2])"
  },
  {
    "example_id": 154,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "def is_cube(x):\n    return x**3 - x == 0\n\ndef count(n):\n    return sum(1 for i in range(n+1) if is_cube(i))\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(x):\n    return x**3 - x == 0\n\ndef count(n):\n    return sum(1 for i in range(n+1) if is_cube(i))\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\nn = 100\ncount = 0\nfor i in range(n+1):\n    if is_cube(i):\n        count += 1\n\nprint(f\"{count}\")"
  },
  {
    "example_id": 155,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.05555555555555555"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "distance = (8/9) * (1/2)**4\nprint(distance)"
  },
  {
    "example_id": 156,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "area = (0.5) * 6 * 6\nprint(area)"
  },
  {
    "example_id": 157,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "n = 1391\nfor i in itertools.count(1):\n    if is_prime(i) and n % i == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 158,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "P = 8\nQ = 48\nB = (P + Q) / 2\nC = (B + Q) / 2\nD = (C + P) / 2\nprint(D)"
  },
  {
    "example_id": 159,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Solve for the largest angle\n# 180 degrees - 2 * smallest angle\n\n# Find the smallest angle\n# 90 degrees\n\n# Find the largest angle\n# 180 - 2 * 90 = 90\nprint(90)"
  },
  {
    "example_id": 160,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "multiples = 0\nfor i in range(100, 1000):\n    if i % 13 == 0:\n        multiples += 1\nprint(multiples)"
  },
  {
    "example_id": 161,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "price = 60\ndiscount = 0.25\nnew_price = price * (1 - discount)\nprint(new_price)"
  },
  {
    "example_id": 162,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "7.0",
      "1.0",
      "7.0",
      "1.0",
      "7.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "for n in itertools.count(2, 2):\n    if is_prime(n) and not is_prime(10 ** (len(str(n)) - 1) - n):\n        print(n)\n        break"
  },
  {
    "example_id": 163,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# First day\ngirl_total = 3\nboy_total = 5\n\n# Other days\nfor day in range(1, 1000000000):\n    girl_total += 3\n    boy_total += 6\n\n    if boy_total > girl_total:\n        break\n\nprint(f\"{girl_total}\")"
  },
  {
    "example_id": 164,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "sum = 0\nfor i in range(10, 20):\n    if i % 2!= 0:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 165,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.99999999999999"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "print(((6 ** 0.5) + (24 ** 0.5)) ** 2)"
  },
  {
    "example_id": 166,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "print(4*12-(4+12))"
  },
  {
    "example_id": 167,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "def chess_tournament(n):\n    return n * (n - 1) * (n - 2) / 6\n\nprint(chess_tournament(4))"
  },
  {
    "example_id": 168,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 22\nprint(f\"The correct answer would have been {n/2:.0f}\")"
  },
  {
    "example_id": 169,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# positive\npositive = 0\n# negative\nnegative = 0\n\n# for each integer from 1 to 12\nfor i in range(1, 13):\n    # if i is a multiple of 12\n    if i % 12 == 0:\n        # increment positive\n        positive += 1\n    # if i is a multiple of -12\n    if i % (-12) == 0:\n        # increment negative\n        negative += 1\n\n# print the number of positive and negative integers\nprint(f\"{positive} positive, {negative} negative\")"
  },
  {
    "example_id": 170,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "answer = 0\nfor i in range(-2, 2):\n    if 4 + 3*i < 2:\n        answer += 1\nprint(answer)"
  },
  {
    "example_id": 171,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "# create variables\nn = symbols('n')\n\n\n# define equation\neq = (n % 16) == 0 and (n % 15) == 0 and (n % 12) == 0\n\n\n# solve equation\nsol = solve(eq)\n\n\n# print solution\nprint(sol)"
  },
  {
    "example_id": 172,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# The smallest 3-digit prime numbers are 2 and 3\n# Their product is 6\nn = 6\n\n# The sum of the digits of n is 1+2+6 = 9\nprint(sum(map(int, str(n))))"
  },
  {
    "example_id": 173,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "2.0",
      "1.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Define symbols\na, b = symbols('a, b')\n# Define equation\neq = a**3 + b**3\n# Find solution\nsol = solve(eq)\n# Print solution\nprint(sol)"
  },
  {
    "example_id": 174,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(4)"
  },
  {
    "example_id": 175,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1",
      "67"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = (10**5 * 10**77) // 10**15\nprint(n)"
  },
  {
    "example_id": 176,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = symbols('x')\neq = 5*x - 3*x + 4*(1 - 4*x) - 32\nsol = solve(eq, x)\nprint(sol[0])"
  },
  {
    "example_id": 177,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4752000.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "# define variables\ntime = 60\nspeed = 15\nmile = 5280\n\n# solve for distance\ndistance = mile * time * speed\n\n# print answer\nprint(distance)"
  },
  {
    "example_id": 178,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "83.0"
    ],
    "solution": "# x = symbols('x')\nx = symbols('x')\n\n# 3x - 9 = 2x + 37\n# 3x - 2x - 9 = 37\n# 2x = 37\n# x = 19\n\nx = solve(3*x - 2*x - 9, x)\nprint(f\"{x[0]:.2f}\")"
  },
  {
    "example_id": 179,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "570.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "# define the perimeter\nperimeter = 68\n\n# define the diagonal\ndiagonal = 30\n\n# find the missing side\nside = perimeter - diagonal\n\n# find the area\narea = (side * diagonal) / 2\n\n# print the area\nprint(area)"
  },
  {
    "example_id": 180,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.33"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "# The value of x is 1/3.\nx = 1/3\nprint(f\"The value of x is {x:.2f}.\")"
  },
  {
    "example_id": 181,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.3000000000000003"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "flagpole_length = 20\nwoman_length = 6\nwoman_shadow_length = 9\n\n# find the ratio of woman's height to flagpole height\nratio = woman_length / flagpole_length\n\n# find the height of the flagpole in woman's perspective\nflagpole_height_in_woman_perspective = flagpole_length * ratio\n\n# find the height of the shadow of the flagpole in woman's perspective\nshadow_height_in_woman_perspective = woman_shadow_length * ratio\n\n# find the difference between the height of the flagpole and the height of the shadow\ndifference = flagpole_height_in_woman_perspective - shadow_height_in_woman_perspective\n\nprint(f\"The shadow of the flagpole is {difference} feet long.\")"
  },
  {
    "example_id": 182,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define the ropes\nrope1 = 18\nrope2 = 24\n\n# Define the maximum length\nmax_length = math.floor(math.gcd(rope1, rope2))\n\n# Define the number of pieces\nnum_pieces = math.floor(rope1 / max_length)\n\n# Print the solution\nprint(f\"The greatest possible length of each piece is {max_length}.\")\nprint(f\"There are {num_pieces} pieces in the ropes.\")"
  },
  {
    "example_id": 183,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "a, b, c = symbols('a, b, c')\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(x):\n    return round(x ** (1/3)) == x ** (1/3)\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef count(n):\n    return len(list(itertools.combinations(range(1, n + 1), 3)))\n\ndef triangle_area(a, b, c):\n    p = (a + b + c) / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return area\n\ndef solution(n):\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i + j == n and is_prime(i) and is_prime(j) and is_cube(i * j):\n                return count(i) + count(j)\n    return -1\n\nprint(solution(72))"
  },
  {
    "example_id": 184,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4000.0"
    ],
    "annotated_answers": [
      "3400.0"
    ],
    "solution": "x = 4000\nprint(x)"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "71.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Calculate the area of the picture in square inches\narea = 5 * 7\n\n# Calculate the area of the red border in square inches\nborder = 2 * (area + 0.5)\n\n# Print the answer\nprint(f\"The area of the visible red border is {border:.2f} square inches.\")"
  },
  {
    "example_id": 186,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# define variables\nx = 36\ny = 6\nz = 10\nw = 19\n\n# compute result\nresult = x**z / y**w\n\n# print result\nprint(result)"
  },
  {
    "example_id": 187,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20202.0",
      "20502.0",
      "20802.0",
      "21012.0",
      "21312.0",
      "21612.0",
      "21912.0",
      "22122.0",
      "22422.0",
      "22722.0"
    ],
    "annotated_answers": [
      "89898.0"
    ],
    "solution": "for i in range(10000, 99999):\n    if str(i) == str(i)[::-1] and i % 6 == 0:\n        print(i)"
  },
  {
    "example_id": 188,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# find the square\nsquare = int(math.log(8210, 10))\nprint(square)"
  },
  {
    "example_id": 189,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "20.0",
      "449.0",
      "20.0",
      "-1.0",
      "20.0",
      "449.0",
      "20.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "n = 30\na = 80\nb = 8\nc = 90\nd = 2\ne = 100\n\nx = symbols('x')\n\nf = a*x**2 + b*x + c\n\nsol = solve(f, x)\n\nprint(sol)"
  },
  {
    "example_id": 190,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "# Define variables\nx = symbols('x')\ny = symbols('y')\nz = symbols('z')\n\n# Define equations\neq1 = 3*x + 4*y - z\neq2 = x + 2*y + 3*z\neq3 = 2*x + 3*y - 4*z\n\n# Solve equations\nsolutions = solve([eq1, eq2, eq3], [x, y, z])\n\n# Print solutions\nprint(solutions)"
  },
  {
    "example_id": 191,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "132.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "total_doors = 12\n\n# number of ways to enter the building\n# = total_doors\n# = 12\n\n# number of ways to leave the building\n# = total_doors - 1\n# = 11\n\n# number of ways to enter and leave the building\n# = total_doors * (total_doors - 1)\n# = 12 * 11\n# = 132\n\nprint(132)"
  },
  {
    "example_id": 192,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# number of cookies\nnum_cookies = int(3/2 / 0.0625)\nprint(num_cookies)"
  },
  {
    "example_id": 193,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "# Find the angle ACB in degrees\nangle_ACB = math.degrees(math.acos((36 - 24) / 24))\nprint(f\"{angle_ACB:.2f}\")"
  },
  {
    "example_id": 194,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.39999999999999997"
    ],
    "annotated_answers": [
      "0.4"
    ],
    "solution": "print(2.4/6)"
  },
  {
    "example_id": 195,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# define x\nx = symbols(\"x\")\n\n# define equation\neq = (x - 4)**2\n\n# solve for x\nsol = solve(eq, x)\n\n# print solution\nprint(sol)"
  },
  {
    "example_id": 196,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "won = 0.25 * 12\nprint(won)"
  },
  {
    "example_id": 197,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "t = 0\nfor i in range(1, 10):\n    t += i\nprint(t)"
  },
  {
    "example_id": 198,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "628.0"
    ],
    "annotated_answers": [
      "628.0"
    ],
    "solution": "# using a for loop\ntotal = 0\nfor i in range(1, 200):\n    if i % 3.14 == 0:\n        total += 1\nprint(total)\n\n# using the math library\nimport math\ntotal = math.trunc(200 * math.pi)\nprint(total)"
  },
  {
    "example_id": 199,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(6*3)"
  },
  {
    "example_id": 200,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "colors = ['red', 'blue', 'green', 'yellow', 'orange', 'pink', 'purple', 'brown']\n\nshirts = [1, 1, 1, 1, 1, 1, 1, 1]\nties = [1, 1, 1, 1, 1, 1, 1, 1]\n\n# list of all possible outfits\noutfits = list(itertools.product(shirts, ties))\n\n# number of outfits that don't match\nmatch = 0\nfor o in outfits:\n    if o[0] == o[1]:\n        match += 1\n\nprint(len(outfits) - match)"
  },
  {
    "example_id": 201,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "488.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "# \na = 53 + 8 + 155 + 17 + 145 + 10 + 98 + 2\nprint(f\"{a:.2f}\")"
  },
  {
    "example_id": 202,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "77.0",
      "70.0",
      "77.0",
      "80.0",
      "69.0",
      "90.0",
      "57.0",
      "60.0",
      "51.0",
      "50.0",
      "38.0",
      "40.0",
      "34.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Set up the problem\ncountries = [\"Brazil\", \"France\", \"Peru\", \"Spain\"]\ndecade = [70, 80, 90, 60, 50, 40]\nprices = [8, 12, 6, 13, 4, 15, 10, 9]\n\n# Calculate the total number of stamps\ntotal_stamps = sum(prices)\n\n# Calculate the number of stamps by decade\nby_decade = {decade[i]: sum(prices[i:]) for i in range(len(decade))}\n\n# Print the results\nprint(f\"The total number of stamps is {total_stamps}.\")\nprint(f\"The number of stamps by decade is {by_decade}.\")"
  },
  {
    "example_id": 203,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1221.0",
      "1551.0",
      "1881.0",
      "2112.0",
      "2442.0",
      "2772.0",
      "3003.0",
      "3333.0",
      "3663.0",
      "3993.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "for i in range(1000, 9999):\n    if str(i) == str(i)[::-1] and i % 3 == 0:\n        print(i)"
  },
  {
    "example_id": 204,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# define variables\nn_chocolate = 12 * 2\nn_raisins = 12 * 2\nn_chocolate_chip = 12 * 2\nn_nuts = 12 * 2\n\n# find the smallest number of cupcakes that have none of the ingredients\nsmallest_cupcakes = min(n_chocolate, n_raisins, n_chocolate_chip, n_nuts)\n\n# print the solution\nprint(smallest_cupcakes)"
  },
  {
    "example_id": 205,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "157.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "count = 0\nfor i in range(100, 500):\n    if '3' in str(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 206,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "# Define the perimeter of the square\nsquare_perimeter = 2 * (20 + 15)\n\n# Define the perimeter of the right triangle\nright_triangle_perimeter = 2 * (20 + 15)\n\n# Calculate the area of the right triangle\nright_triangle_area = 0.5 * 15 * 20\n\n# Calculate the area of the square\nsquare_area = square_perimeter - right_triangle_perimeter\n\n# Print the answer\nprint(f\"The area of the square is {square_area:.2f} square inches\")"
  },
  {
    "example_id": 207,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "print(math.sqrt(10*15*24))"
  },
  {
    "example_id": 208,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = symbols('x')\nsol = solve(6 - x > -9, x)\nprint(sol)"
  },
  {
    "example_id": 209,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.27"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "x = symbols('x')\n\n# Find the largest angle in degrees\nlargest_angle = solve(x**2 + 3*x - 12, x)[0]\nprint(f\"{largest_angle:.2f}\")"
  },
  {
    "example_id": 210,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "multiples = 0\nfor i in range(7, 150, 7):\n    multiples += 1\nprint(multiples)"
  },
  {
    "example_id": 211,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# 1, 7\nprint(2)"
  },
  {
    "example_id": 212,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "numbers = [6, 8, 9, 11, 16]\nprint(sum(numbers)/len(numbers))"
  },
  {
    "example_id": 213,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 5\nprint(a)"
  },
  {
    "example_id": 214,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "148.6"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "heights = [625, 733, 733, 733, 858]\nnew_height = 885\nmean_height = sum(heights) / 5\n\ndiff = new_height - mean_height\nprint(f\"{diff:.2f}\")"
  },
  {
    "example_id": 215,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-21.0",
      "4.0",
      "5.0",
      "17.0",
      "4.0",
      "-21.0",
      "4.0",
      "5.0",
      "17.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b = 2, 21\nx = symbols('x')\n\n# find new length of side\nsol = solve(a * x**2 + b * x + a, x)\n\n# print the solution\nprint(sol)"
  },
  {
    "example_id": 216,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "1.0",
      "1.0",
      "1.0",
      "7.0",
      "2.0",
      "2.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "n = 8\n\n# For each row\nfor i in range(n):\n    # For each column\n    for j in range(n):\n        # If the current row and column is the same as one of the previous rows and columns\n        if i == j or i + j == n:\n            # Print the current row and column\n            print(f\"({i}, {j})\")"
  },
  {
    "example_id": 217,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Number of politicians\np = 4\n# Number of lawyers\nl = 3\n\n# Number of handshakes\nhandshakes = p * (p - 1) + l * (l - 1)\nprint(handshakes)"
  },
  {
    "example_id": 218,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2176.25"
    ],
    "annotated_answers": [
      "980.0"
    ],
    "solution": "# Define the variables\nfarthing = 1 / 4\npence = 1\nshilling = 12\npound = 20\n\n# Define the conversions\nfarthing_to_pence = 4\npence_to_shilling = 12\nshilling_to_pound = 20\n\n# Calculate the total number of farthings\ntotal_farthings = pound * shilling_to_pound * farthing_to_pence + \\\n                  shilling * pence_to_shilling * farthing_to_pence + \\\n                  pence * farthing\n\n# Print the result\nprint(f\"{total_farthings:.2f}\")"
  },
  {
    "example_id": 219,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "length = 32\nprint(length)"
  },
  {
    "example_id": 220,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(6)"
  },
  {
    "example_id": 221,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1058.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# x_value = 0\nx_value = 0\n\n# while True:\nwhile True:\n    x_value += 1\n    if 3 * x_value > 2 * x_value + 1:\n        print(f\"The least positive integer value of x for which the inequality 3x > 2x+1 is true is: {x_value}\")\n        break"
  },
  {
    "example_id": 222,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(6 + 8/2)"
  },
  {
    "example_id": 223,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "n = 20\nwhile n <= 28:\n    m = math.sqrt(n)\n    if m == int(m):\n        print(f\"There are {n} students in the class.\")\n        break\n    n += 1"
  },
  {
    "example_id": 224,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "123.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "n = 76 - (-4 * 8 - 2) + 13\nprint(n)"
  },
  {
    "example_id": 225,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "250000.0",
      "2.0",
      "250000.0",
      "2.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "# Define x and y\nx, y = symbols('x y')\n\n# Define equation for the diagonal\neq = x**2 + y**2 - 300**2 - 400**2\n\n# Solve for y\nsol = solve(eq, y)\n\n# Print the value of y\nprint(sol[0])\n\n# Print the value of y - x\nprint(sol[0] - x)"
  },
  {
    "example_id": 226,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2400.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "inches_per_mile = 20\nactual_distance = 120\ndistance_in_inches = actual_distance * inches_per_mile\nprint(distance_in_inches)"
  },
  {
    "example_id": 227,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(int(15.5))"
  },
  {
    "example_id": 228,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "100.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "# Define function to determine if number is prime\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define function to determine if number is cube\ndef is_cube(x):\n    return pow(x, 1/3) % 1 == 0\n\n# Define function to find greatest common divisor\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# Define function to count number of cubes less than n\ndef count(n):\n    count = 0\n    for i in range(1, n):\n        if is_cube(i):\n            count += 1\n    return count\n\n# Define variables\nn = 100\na = 1\nb = 1\n\n# Solve for a and b\nfor i in range(2, n):\n    if is_prime(i) and is_cube(i) and gcd(a, i) == 1 and gcd(b, i) == 1:\n        a = i\n        b = n // i\n        break\n\n# Print solution\nprint(f\"a = {a}\")\nprint(f\"b = {b}\")\nprint(f\"n = {n}\")\nprint(f\"a^3 + b^3 = {a**3 + b**3}\")"
  },
  {
    "example_id": 229,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5321.0"
    ],
    "annotated_answers": [
      "5321.0"
    ],
    "solution": "print((-math.sqrt(5321))**2)"
  },
  {
    "example_id": 230,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def largest_circle_radius(rope_length):\n    for radius in itertools.count(start=1, step=1):\n        if rope_length % (2 * radius) == 0:\n            return radius\n    return 0\n\nprint(largest_circle_radius(60))"
  },
  {
    "example_id": 231,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "949.0"
    ],
    "solution": "for i in range(73, 1000, 73):\n    if i % 73 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 232,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "boxes = 77 // 12\nprint(boxes)"
  },
  {
    "example_id": 233,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# \ndef mean(numbers):\n    return sum(numbers) / len(numbers)\n\n# \nnumbers = [8, 12, 16, 20, 24]\nprint(mean(numbers))"
  },
  {
    "example_id": 234,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.85"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "price = 60\ncommission = 5\n\n# Calculate the percentage\npercentage = commission / 100\n\n# Calculate the discount\ndiscount = price * percentage\n\n# Calculate the total price with discount\ntotal_price = price - discount\n\n# Calculate the new price with the original price\nnew_price = total_price + price\n\n# Calculate the commission\nnew_commission = new_price * percentage\n\n# Calculate the total commission\ntotal_commission = new_commission + discount\n\n# Calculate the change in cents\nchange = total_commission - discount\n\nprint(f\"The change in cents is {change:.2f}\")"
  },
  {
    "example_id": 235,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "head_height = 6 * 12 / 8\nprint(head_height)"
  },
  {
    "example_id": 236,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 35\nh = 8\nm = 15\nb = 3\n\n# find the number of students in the class\n# who did not receive an A in either course\n\n# find the number of students who did not receive an A in math\n\n# find the number of students who did not receive an A in history\n\n# add the number of students who did not receive an A in math and history\n\n# subtract the number of students who did not receive an A in both math and history\n\nprint(f\"{n - (m + h - b):.0f}\")"
  },
  {
    "example_id": 237,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "3024.0"
    ],
    "solution": "import math\n\ndef permutations(n, r):\n    if r == 0:\n        return 1\n    if n == r:\n        return 1\n    if n < r:\n        return 0\n    return permutations(n - 1, r - 1) + permutations(n - 1, r)\n\nprint(permutations(9, 4))"
  },
  {
    "example_id": 238,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(5**5//5**4-5**3+5**2*5)"
  },
  {
    "example_id": 239,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def paint_two_faces(n):\n    blue_faces = 0\n    for i in itertools.combinations(range(1, 7), 2):\n        if n not in (i[0] * i[1], i[0] + i[1]):\n            blue_faces += 1\n    return blue_faces\n\nprint(paint_two_faces(1))"
  },
  {
    "example_id": 240,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = symbols('x')\na = solve(x*5 - 21 - 2*x, x)\nprint(a[0])"
  },
  {
    "example_id": 241,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "inches_in_yard = 36\nprint(f\"{2 * inches_in_yard / 6:.2f}\")"
  },
  {
    "example_id": 242,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-34.0",
      "-17.0",
      "0.0",
      "17.0",
      "34.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "multiples = [x for x in range(-50, 50) if x % 17 == 0]\nprint(multiples)"
  },
  {
    "example_id": 243,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x = symbols(\"x\")\nsol = solve((x-2*x+3*x-4*x+5*x-6*x+7*x-8*x+9*x-10*x) - 50, x)\nprint(sol)"
  },
  {
    "example_id": 244,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(x):\n    return x ** 3 == x\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef count(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_cube(i):\n            count += 1\n    return count\n\ndef solve_archery_class(n, k):\n    students = [i for i in range(1, n + 1)]\n    archers = []\n    for i in range(k):\n        archers.append(students.pop(0))\n    return archers\n\ndef main():\n    n = 50\n    k = 30\n    archers = solve_archery_class(n, k)\n    archers_count = count(len(archers))\n    print(f\"{archers_count} archers\")\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 245,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "27.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# Define variables\nred = 12\nwhite = 4\ntwo_door = 15\nfour_door = 4\ntotal = 20\n\n# Define a function to find the number of red cars\ndef red_cars(red, white, two_door, four_door):\n    # Calculate the total number of cars\n    total = red + white + two_door + four_door\n\n    # Calculate the number of red cars\n    red_cars = red + white\n\n    # Calculate the number of red cars that are 4-door\n    red_cars_four_door = red + two_door\n\n    # Return the number of red cars that are 4-door\n    return red_cars_four_door\n\n# Call the function and print the result\nprint(f\"The number of red cars that are 4-door is: {red_cars(red, white, two_door, four_door)}\")"
  },
  {
    "example_id": 246,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.14285714285714285"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(7**-1**-1)"
  },
  {
    "example_id": 247,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "print(1+2+3-(4+5)+6)"
  },
  {
    "example_id": 248,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "C = 21\nprint(C)"
  },
  {
    "example_id": 249,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.78"
    ],
    "annotated_answers": [
      "7.78"
    ],
    "solution": "fudge_price = 10\nfudge_amount = 7/9\ntotal_price = fudge_amount * fudge_price\ntotal_price = round(total_price, 2)\nprint(f\"{total_price:.2f}\")"
  },
  {
    "example_id": 250,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# Prime numbers from 1 to 100\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n# Prime numbers from 1 to 100\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n# Find the two prime numbers\na, b = 0, 0\nfor i in range(1, len(primes)):\n    if primes[i] - primes[i - 1] == 17:\n        a = primes[i - 1]\n        b = primes[i]\n        break\n\n# Sum of the two prime numbers\nprint(a + b)"
  },
  {
    "example_id": 251,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-16.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "print(-144/9)"
  },
  {
    "example_id": 252,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define a function to check if a number is prime\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define a function to check if a number is a cube\ndef is_cube(x):\n    return x ** 3 == abs(x)\n\n# Define a function to find the greatest common divisor\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Define a function to count the number of solutions\ndef count(n):\n    return sum(is_cube(x) and is_prime(x) for x in range(1, n + 1))\n\n# Find the smallest possible number of pies that had none of these ingredients\nprint(count(3))"
  },
  {
    "example_id": 253,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "6.0",
      "10.0",
      "14.0",
      "22.0",
      "26.0",
      "34.0",
      "38.0",
      "46.0",
      "58.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "for a in range(1, 80):\n    for b in range(1, 80):\n        if gcd(a, b) == 1:\n            if is_prime(a) and is_prime(b):\n                if a * b == 80:\n                    continue\n                else:\n                    print(a * b)\n                    break"
  },
  {
    "example_id": 254,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1260.0"
    ],
    "annotated_answers": [
      "1260.0"
    ],
    "solution": "print(math.sqrt(3*6*10*15*21*28))"
  },
  {
    "example_id": 255,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "area_A = 40\narea_B = 25\narea_C = 30\narea_D = area_A - area_B - area_C\nprint(area_D)"
  },
  {
    "example_id": 256,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.75"
    ],
    "annotated_answers": [
      "16.75"
    ],
    "solution": "print(14.6 + 2.15)"
  },
  {
    "example_id": 257,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3265.0"
    ],
    "annotated_answers": [
      "351.0"
    ],
    "solution": "# Calculate the number of cake-eating days\n# between 2008 and 2016\ncake_eating_days = (2016 - 2008) * 365 + (366 - 27) + (9 - 3)\nprint(cake_eating_days)"
  },
  {
    "example_id": 258,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "0.125",
      "2.0",
      "2.0",
      "0.25",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "550.0"
    ],
    "solution": "fuel_efficient_hybrid_car_miles_per_gallon = 48\nsuv_miles_per_gallon = 15\ndistance_driven = 12000\nfuel_efficient_hybrid_car_gallons = distance_driven / fuel_efficient_hybrid_car_miles_per_gallon\nsuv_gallons = distance_driven / suv_miles_per_gallon\nsaved_gallons = fuel_efficient_hybrid_car_gallons - suv_gallons\nprint(saved_gallons)"
  },
  {
    "example_id": 259,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 6\nprint(N)"
  },
  {
    "example_id": 260,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "greatest_odd_factor = 5\nprint(greatest_odd_factor)"
  },
  {
    "example_id": 261,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 4\ny = 3\nprint(x+y)"
  },
  {
    "example_id": 262,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.000346860908775581"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(1/31/93)"
  },
  {
    "example_id": 263,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "n = 0\nfor i in range(1, 21):\n    n += 1\n    if math.sqrt(i) > 20:\n        break\nprint(n)"
  },
  {
    "example_id": 264,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(315, 108))"
  },
  {
    "example_id": 265,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\n\n# Test the average function\nprint(average([71, 72, 73, 74, 75]))"
  },
  {
    "example_id": 266,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.303"
    ],
    "annotated_answers": [
      "0.303"
    ],
    "solution": "print(3/10 + 3/1000)"
  },
  {
    "example_id": 267,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "average = (30*20+20*30)/50\nprint(average)"
  },
  {
    "example_id": 268,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\nsolve(x/2 + x/3 - 5, x)"
  },
  {
    "example_id": 269,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_cube(x):\n    return x ** 3 - 1 == 0\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef count(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n\n\ndef main():\n    n = 35\n    for i in range(1, n + 1):\n        if is_prime(i):\n            if i ** 3 - 1 < n:\n                n = i ** 3 - 1\n    print(f\"The largest prime number less than {n} is {n}\")\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 270,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "22.0",
      "33.0",
      "44.0",
      "50.0",
      "62.0",
      "75.0",
      "80.0",
      "93.0",
      "102.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "def is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))\n\ndef is_cube(x):\n    return math.pow(x, 3) % 1 == 0\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef count(n):\n    return sum(1 for i in range(n) if is_prime(i))\n\nfor p in itertools.permutations(range(10), 2):\n    a, b = p\n    for c in range(10):\n        x = a * 100 + b * 10 + c\n        if is_cube(x) and is_prime(gcd(x, count(x))):\n            print(x)\n            break"
  },
  {
    "example_id": 271,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.42"
    ],
    "annotated_answers": [
      "3.24"
    ],
    "solution": "average = sum(range(1,7))/50\nprint(average)"
  },
  {
    "example_id": 272,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "import itertools\n\ndef get_combinations(n_people, n_roles):\n    return len(list(itertools.combinations(range(1, n_people + 1), n_roles)))\n\nprint(get_combinations(8, 3))"
  },
  {
    "example_id": 273,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "# \ndef is_cube(x):\n    return x**3 - x == 0\n\n# \ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# \ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# \ndef count(n):\n    return sum(1 for i in itertools.count() if is_prime(i) and is_cube(i))\n\n# \ndef solve_equation(x):\n    return x + 4 * x\n\n# \ndef solve_equation(x):\n    return 277\n\n# \ndef find_integer():\n    for i in range(1, 100):\n        if solve_equation(i) == 277:\n            return i\n    return -1\n\n# \nprint(find_integer())"
  },
  {
    "example_id": 274,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.44"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# Get the distance from Paul to the pole\ndistance = 15 - 3\n\n# Get the distance between the poles\npole_distance = 14\n\n# Get the rope length\nrope_length = math.sqrt(distance**2 + pole_distance**2)\n\nprint(f\"{rope_length:.2f}\")"
  },
  {
    "example_id": 275,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.95"
    ],
    "annotated_answers": [
      "4.95"
    ],
    "solution": "print(max(4.5,4.45,0.45,0.54)+min(4.5,4.45,0.45,0.54))"
  },
  {
    "example_id": 276,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "n = 97\nfor i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n        n = n // i\n        break\nelse:\n    print(f\"{n:.2f}\")"
  },
  {
    "example_id": 277,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "16.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "num_list = [12, 21, 6, 11, 30]\nmedian = sum(num_list) / len(num_list)\nmean = sum(num_list) / len(num_list)\nprint(f\"{median:.2f}\")\nprint(f\"{mean:.2f}\")"
  },
  {
    "example_id": 278,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.2"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "scores = [92, 73, 79, 87]\nmean = sum(scores) / 5\nprint(f\"The mean of the scores is {mean}\")\n\n\n# create a list of all possible scores\nscores_list = list(itertools.product(range(0, 101), repeat=5))\n\n\n# calculate the sum of the mean for each score\nsum_of_means = sum([sum(score) / 5 for score in scores_list])\n\n\n# find the minimum score that results in a mean of 80\nmin_score = min(scores_list, key=lambda x: abs(sum(x) / 5 - 80))\n\n\nprint(f\"The minimum score is {min_score}\")"
  },
  {
    "example_id": 279,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.4000014000014"
    ],
    "annotated_answers": [
      "1.4"
    ],
    "solution": "print(1 / 0.714285)"
  },
  {
    "example_id": 280,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "for x in range(1, 1000):\n    if 2/3 < x/5 < 6/7:\n        print(x)"
  },
  {
    "example_id": 281,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "500.0",
      "250.0",
      "250.0",
      "250.0",
      "125.0",
      "125.0",
      "1.0",
      "1.0",
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "n = 1000\nadults = 0.5 * n\nchildren = 0.5 * adults\nfemale_adults = 0.5 * adults\nmale_adults = adults - female_adults\nfemale_children = 0.5 * female_adults\nmale_children = male_adults - female_children\nchildren_per_adult = 1\nchildren_per_female_adult = 1\nchildren_per_male_adult = 0\n\n# adults\n# \nprint(f\"Adults: {adults:.0f}\")\n\n# children\n# \nprint(f\"Children: {children:.0f}\")\n\n# female adults\n# \nprint(f\"Female Adults: {female_adults:.0f}\")\n\n# male adults\n# \nprint(f\"Male Adults: {male_adults:.0f}\")\n\n# female children\n# \nprint(f\"Female Children: {female_children:.0f}\")\n\n# male children\n# \nprint(f\"Male Children: {male_children:.0f}\")\n\n# children per adult\n# \nprint(f\"Children Per Adult: {children_per_adult:.2f}\")\n\n# children per female adult\n# \nprint(f\"Children Per Female Adult: {children_per_female_adult:.2f}\")\n\n# children per male adult\n# \nprint(f\"Children Per Male Adult: {children_per_male_adult:.2f}\")"
  },
  {
    "example_id": 282,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "112.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "dogs = 4 * 280 / 10\nprint(dogs)"
  },
  {
    "example_id": 283,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "113.1"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "r = 6\narea = math.pi * r ** 2\nprint(f\"The area of the square is {area:.2f}\")"
  },
  {
    "example_id": 284,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1944.0",
      "2000.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Find the median number of hurricanes\n# per year reaching the East Coast from 1944 through 2000\n\n# Create a dictionary to store the count of hurricanes per year\ncount_dict = {}\n\n# Loop through all the years from 1944 to 2000\nfor year in range(1944, 2001):\n\n    # Check if the year is a prime year\n    if is_prime(year):\n\n        # If it is a prime year, increment the count\n        count_dict[year] = count_dict.get(year, 0) + 1\n\n# Find the median number of hurricanes per year\n# reaching the East Coast of the U.S.\nmedian_count = sum(count_dict.values())/len(count_dict)\n\n# Print the median number of hurricanes per year\n# reaching the East Coast of the U.S.\nprint(f\"The median number of hurricanes per year reaching the East Coast from 1944 to 2000 is {median_count:.2f}\")"
  },
  {
    "example_id": 285,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "a = 15\nb = 12\nc = a - b\nprint(f\"{c:.2f}\")"
  },
  {
    "example_id": 286,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "kids = 44 // 3\nprint(kids)"
  },
  {
    "example_id": 287,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "print(math.sqrt(30*21*70))"
  },
  {
    "example_id": 288,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.1176470588235294"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "sides = 360 / 170\nprint(sides)"
  },
  {
    "example_id": 289,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.38025641025641027"
    ],
    "annotated_answers": [
      "0.38"
    ],
    "solution": "candy = 1483\nweek = 52\nlife = 75\nyear = 52 * 75\nprint(candy / year)"
  },
  {
    "example_id": 290,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-60.0",
      "-80.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "original_number = -10\nresult = original_number * 6\nprint(f\"{result:.2f}\")\nprint(f\"{result - 20:.2f}\")"
  },
  {
    "example_id": 291,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef prime_factors_of(n):\n    factors = prime_factors(n)\n    print(factors)\n\nprime_factors_of(24)\nprime_factors_of(2400)"
  },
  {
    "example_id": 292,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Time it takes to travel 1 km\ntime_km = 2.5\n# Speed of the robot\nspeed = 1\n# Length of the hallway\nlength_hallway = speed * time_km\nprint(f\"{length_hallway:.2f}\")"
  },
  {
    "example_id": 293,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# Perimeter of PQR\ndef perimeter(P, Q, R):\n    return P + Q + R\n\n# Perimeter of triangle\nP, Q, R = 8, 15, 20\n\n# Print the perimeter of triangle\nprint(f\"{perimeter(P, Q, R):.2f}\")"
  },
  {
    "example_id": 294,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "for x in range(1, 12):\n    if 12 % (x + 1) == 0:\n        print(x)\n        break"
  },
  {
    "example_id": 295,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "66.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "odd_chairs = 0\nfor row in range(1, 12):\n    for chair in range(1, 12):\n        if chair % 2!= 0:\n            odd_chairs += 1\nprint(odd_chairs)"
  },
  {
    "example_id": 296,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "# Define the angle\nangle = 120\n\n# Define the measure of the other two angles\nother_angle = 180 - angle\n\n# Print the measure of one of the other angles\nprint(other_angle)"
  },
  {
    "example_id": 297,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.666666666666664"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "area = 104 / 3\nprint(area)"
  },
  {
    "example_id": 298,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "lcm = 1\nfor i in range(2, 8):\n    lcm = lcm * i // math.gcd(lcm, i)\nprint(lcm)"
  },
  {
    "example_id": 299,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor i in range(10, 100):\n    if i % 10 == 0 and i % 15 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 300,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "89.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "# Define variables\na = 5\nb = 4\n\n# Solve for angle R\nr = 90 - (a - b)\n\n# Print result\nprint(f\"The measure of angle R is {r} degrees\")"
  },
  {
    "example_id": 301,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.12"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = math.sqrt(24) / math.sqrt(30)\nb = math.sqrt(20) / 3 * math.sqrt(25)\nprint(f\"{a/b:.2f}\")"
  },
  {
    "example_id": 302,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 21\nprint(x)"
  },
  {
    "example_id": 303,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2357.0",
      "2357.0",
      "17.0",
      "1.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_cube(x):\n    return x ** 3 == x\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef count(n):\n    return sum(int(x) for x in str(n))\n\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef prime_factors_of(n):\n    return [p for p in prime_factors(n) if is_prime(p)]\n\n\n# Find the prime factors of the number\n# 2357\nprime_factors = prime_factors_of(2357)\nprint(f\"Prime factors of 2357: {prime_factors}\")\n\n# Find the number of digits in the prime factors\n# of 2357\ndigits = [count(p) for p in prime_factors]\nprint(f\"Number of digits in prime factors: {digits}\")\n\n# Count the number of distinct digits\ndistinct_digits = len(set(digits))\nprint(f\"Number of distinct digits: {distinct_digits}\")"
  },
  {
    "example_id": 304,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "french = 8\nspanish = 12\nboth = 3\ntotal = 30\n\nprint(total - french - spanish - both)"
  },
  {
    "example_id": 305,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-82.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "x = symbols('x')\n\n# Calculate mean\nmean = 4.5\n\n# Calculate set members\nm = [5, 8, 10, 18, 19, 28, 30, x]\n\n# Calculate set mean\nm_mean = sum(m) / len(m)\n\n# Calculate x value\nx = solve(mean - m_mean, x)\n\n# Print x\nprint(x)"
  },
  {
    "example_id": 306,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = 14\nprint(x)"
  },
  {
    "example_id": 307,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 12 / 5\nx = 12 // 5\nprint(x + 3)"
  },
  {
    "example_id": 308,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Create a list of unique numbers\nnums = [2, 3, 5]\nnums = list(set(nums))\n\n# Create a list of all combinations of numbers\ncombs = [nums[i] + nums[j] + nums[k] for i in range(len(nums)) for j in range(len(nums)) for k in range(len(nums))]\n\n# Count the number of unique combinations\ncount = len(set(combs))\n\nprint(count)"
  },
  {
    "example_id": 309,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a,b,c = symbols(\"a,b,c\")\n\nn = (3*a**2*b)/(5*a*c) * (10*c)/(6*a*b)\n\nprint(n.simplify())"
  },
  {
    "example_id": 310,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "5.0",
      "2.0",
      "17.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "bills_5 = 0\nbills_2 = 0\n\nfor i in range(1, 10):\n    for j in range(1, 10):\n        if i + j == 17:\n            bills_5 += 1\n            bills_2 += 1\n\nprint(f\"There are {bills_5} combinations of $\\$5$ bills and $\\$2$ bills that can be used to make a total of $\\$17$.\")"
  },
  {
    "example_id": 311,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import math\n\ndef isosceles_right_triangle(AD, BC, DC):\n    area = (AD * BC) / 2\n    return area\n\nprint(isosceles_right_triangle(AD=5, BC=5, DC=5))"
  },
  {
    "example_id": 312,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 14\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 313,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.67"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Helicopter travel time\ntime_h = 3 + 3 + 15 / 1\n\n# Ambulance travel time\ntime_a = 40 / 60 * 20\n\n# Difference between helicopter and ambulance travel time\ntime_diff = time_h - time_a\n\nprint(f\"{time_diff:.2f}\")"
  },
  {
    "example_id": 314,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x)"
  },
  {
    "example_id": 315,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "area = 6 * 6 / 2\nprint(area)"
  },
  {
    "example_id": 316,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "print(5**3 - (3**2-5)**3)"
  },
  {
    "example_id": 317,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "576.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "num_spikers = 5\nnum_setters = 4\nnum_players = num_spikers + num_setters\n\n# Number of ways to choose 2 players out of 10\nnum_ways_to_choose_2 = math.factorial(10) // (math.factorial(2) * math.factorial(8))\n\n# Number of ways to choose 2 players out of 5 spikers\nnum_ways_to_choose_2_spikers = math.factorial(5) // (math.factorial(2) * math.factorial(3))\n\n# Number of ways to choose 2 players out of 4 setters\nnum_ways_to_choose_2_setters = math.factorial(4) // (math.factorial(2) * math.factorial(2))\n\n# Number of ways to choose 1 player out of 5 spikers\nnum_ways_to_choose_1_spiker = math.factorial(5) // math.factorial(1)\n\n# Number of ways to choose 1 player out of 4 setters\nnum_ways_to_choose_1_setter = math.factorial(4) // math.factorial(1)\n\n# Total number of ways to choose 2 players\nnum_ways_to_choose_2_total = num_ways_to_choose_2 * (num_ways_to_choose_2_spikers + num_ways_to_choose_2_setters)\n\n# Total number of ways to choose 2 players\nnum_ways_to_choose_1_total = (num_ways_to_choose_1_spiker + num_ways_to_choose_1_setter)\n\n# Number of ways to choose 2 players such that no player feels out of position\nnum_ways_to_choose_2_not_out_of_position = num_ways_to_choose_2_total - num_ways_to_choose_1_total\n\nprint(f\"Number of ways to choose 2 players such that no player feels out of position: {num_ways_to_choose_2_not_out_of_position}\")"
  },
  {
    "example_id": 318,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.921577845838872"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "# Define the perimeter of a trapezoid\ndef perimeter(a, b, c, d):\n    \"\"\"\n    Return the perimeter of the trapezoid\n    with vertices (a, b, c, d)\n    \"\"\"\n    # Use the itertools.chain function\n    # to create a chain of all the edges\n    edges = itertools.chain([(a, b), (b, c), (c, d), (d, a)])\n    # Use the sum function to add up all the edges\n    return sum(math.hypot(*edge) for edge in edges)\n\n# Test the function\nprint(f\"The perimeter of the trapezoid is: {perimeter(3, 4, 5, 6)}\")"
  },
  {
    "example_id": 319,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "distance = 10 - 8\nprint(distance)"
  },
  {
    "example_id": 320,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "-5.0",
      "0.0",
      "5.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\n\n# 1. Find the sum of the four integers\neq1 = a + b + c + d - 5\n\n# 2. Find the product of the four integers\neq2 = a * b * c * d\n\n# 3. Find the largest integer\neq3 = a + b + c + d - d\n\n# 4. Find the smallest integer\neq4 = a + b + c + d - a\n\n# 5. Find the solution to the system of equations\nsol = solve((eq1, eq2, eq3, eq4), (a, b, c, d))\n\n# 6. Find the smallest integer\nsmallest = sol[0]\n\n# 7. Print the solution\nprint(smallest)"
  },
  {
    "example_id": 321,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "decimal = 31/11111\nprint(len(str(decimal).split('.')[1]))"
  },
  {
    "example_id": 322,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "700.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "pandacats = 7\nalpacacats = 5\ncatcoolness = 2\n\nalpacacoolness = alpacacats * catcoolness\npandacoolness = pandacats * catcoolness\n\ntotalcoolness = alpacacoolness + pandacoolness\n\ntotalalpacacoolness = alpacacoolness * 70\n\nprint(f\"{totalalpacacoolness:.2f}\")"
  },
  {
    "example_id": 323,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "n = -10 // 5 - 3\nprint(n)"
  },
  {
    "example_id": 324,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "401.07045659157626"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "# Define a function for the ratio of the angles\ndef ratio(a,b,c):\n    return a/b, b/c, c/a\n\n# Define a function for the degree measure of the largest angle\ndef largest(a,b,c):\n    return a*180/math.pi if a >= b and a >= c else b*180/math.pi if b >= a and b >= c else c*180/math.pi if c >= a and c >= b else None\n\n# Define a function for the degrees of the angles\ndef degrees(a,b,c):\n    return math.acos(ratio(a,b,c)[0])*180/math.pi, math.acos(ratio(a,b,c)[1])*180/math.pi, math.acos(ratio(a,b,c)[2])*180/math.pi\n\n# Define a function for the degrees of the angles\ndef degrees(a,b,c):\n    return math.acos(ratio(a,b,c)[0])*180/math.pi, math.acos(ratio(a,b,c)[1])*180/math.pi, math.acos(ratio(a,b,c)[2])*180/math.pi\n\n# Get the degrees of the angles\na,b,c = 3,5,7\n\n# Get the degree measure of the largest angle\nprint(largest(a,b,c))"
  },
  {
    "example_id": 325,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 34\nf = 7\ncount = 0\nfor i in range(1, 30):\n    if i % f == 0:\n        count += 1\n    if i % n == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 326,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "perimeter = 2 * (12 + 16)\nprint(perimeter)"
  },
  {
    "example_id": 327,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "measure = 180 - 50\nprint(measure)"
  },
  {
    "example_id": 328,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "# Define a function that returns the number of three-digit positive integers\ndef count_three_digit_integers(n):\n    count = 0\n    for i in range(100, 1000):\n        if i % 100 == 0:\n            count += 1\n    return count\n\n# Use the function to find the answer\nprint(count_three_digit_integers(1000))"
  },
  {
    "example_id": 329,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "def is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))\n\ndef is_cube(x):\n    return round(x ** (1 / 3), 2) == x\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef count(n):\n    return sum(1 for i in range(n + 1) if is_prime(i))\n\ndef prime_factors(n):\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef prime_factors_of(n):\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\ndef solution(n):\n    if is_prime(n):\n        return 1\n    factors = prime_factors(n)\n    return sum(count(i) for i in factors)\n\nprint(solution(30))"
  },
  {
    "example_id": 330,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "list_enrico = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]\nlist_marie = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]\n\nnumber_of_common_multiples = 0\nfor number in list_marie:\n    if number in list_enrico:\n        number_of_common_multiples += 1\n\nprint(number_of_common_multiples)"
  },
  {
    "example_id": 331,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1102.5"
    ],
    "annotated_answers": [
      "735.0"
    ],
    "solution": "carpet = 21.95\npadding = 2.55\nwidth = 9\nheight = 5\ntotal = (width * height)\ncarpet_cost = total * carpet\npadding_cost = total * padding\nprint(carpet_cost + padding_cost)"
  },
  {
    "example_id": 332,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(n):\n    sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            sum += i\n    return sum\n\nprint(sum_of_primes(9))"
  },
  {
    "example_id": 333,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "n = 6\nm = 20\n\ndef least_muffins(n, m):\n    count = 0\n    while count < n:\n        count += 1\n        if count >= m:\n            return count\n    return count + 1\n\nprint(least_muffins(n, m))"
  },
  {
    "example_id": 334,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15250.0"
    ],
    "annotated_answers": [
      "298.0"
    ],
    "solution": "sum = 0\nfor i in range(100, 201):\n    if i % 2 == 0:\n        sum += i\n    else:\n        sum += i + 2\nprint(sum)"
  },
  {
    "example_id": 335,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(round(pow(1/23, 1000)))"
  },
  {
    "example_id": 336,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "side = 4 * 9\nprint(side)"
  },
  {
    "example_id": 337,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "510.0"
    ],
    "solution": "num = 520\nfor i in range(30, num):\n    if i % 30 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 338,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "import math\n\nn = 20\nr = 2\n\ndef combinations(n, r):\n    return math.factorial(n) / (math.factorial(r) * math.factorial(n - r))\n\nprint(combinations(n, r))"
  },
  {
    "example_id": 339,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "result = (2 * 100 + 200) / 4 - 50\nprint(result)"
  },
  {
    "example_id": 340,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "handshakes = 6 * 6\nprint(handshakes)"
  },
  {
    "example_id": 341,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "def sandwiches(fillings):\n    return len(list(itertools.combinations(fillings, 2)))\n\nfillings = [\n    \"turkey\",\n    \"ham\",\n    \"roast beef\",\n    \"cheese\",\n    \"tomatoes\",\n    \"peppers\",\n    \"sprouts\",\n    \"oranges\",\n    \"licorice\",\n]\n\nprint(sandwiches(fillings))"
  },
  {
    "example_id": 342,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.0",
      "78.0",
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# First, we need to find the average of Blake's test scores.\n# We can do this by summing the four test scores and dividing by 4.\nblake_average = (78 + 78 + 78 + 78) / 4\nprint(f\"Blake's average: {blake_average:.2f}\")\n\n# Now, we need to find the average of Jenny's test scores.\n# We can do this by summing the four test scores and dividing by 4.\n# However, we need to take into account the fact that Jenny scored 10 points higher than Blake on the first test,\n# 10 points lower than him on the second test, and 20 points higher on both the third and fourth tests.\n# We can do this by subtracting 10 from Blake's average on the first test, adding 10 to Blake's average on the second test,\n# and adding 20 to both Blake's averages on the third and fourth tests.\njenny_average = blake_average - 10 + 10 - 20 + 20\nprint(f\"Jenny's average: {jenny_average:.2f}\")\n\n# Now, we need to find the difference between Jenny's average and Blake's average.\n# We can do this by subtracting Blake's average from Jenny's average.\ndifference = jenny_average - blake_average\nprint(f\"Difference: {difference:.2f}\")"
  },
  {
    "example_id": 343,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-174.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "# Calculate the total amount shared\ntotal = 77\n# Create a list of the amounts shared\namounts = [44, 28, 19]\n# Create a list of the ratios\nratios = [4, 2, 1]\n# Initialize the sum to zero\nsum = 0\n# Loop through each amount and add it to the sum\nfor amount, ratio in zip(amounts, ratios):\n    sum += amount * ratio\n# Print the amount Carolyn received\nprint(f\"Carolyn received ${total - sum:.2f}\")"
  },
  {
    "example_id": 344,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-727.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n_hockey = 33\nn_baseball = 24\nn_neither = 8\n\nn_both = n_hockey * n_baseball\n\n# print(f\"{n_both}\")\n\nresult = n_hockey + n_baseball + n_neither - n_both\nprint(f\"{result}\")"
  },
  {
    "example_id": 345,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "walnuts = 9 * 3/6\nprint(walnuts)"
  },
  {
    "example_id": 346,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.42"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# \nhours = 3\nminutes = 20\n# \nangle = math.atan2(minutes, hours)\nprint(f\"{angle:.2f}\")"
  },
  {
    "example_id": 347,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef is_multiple_of_3(n):\n    return n % 3 == 0\n\ncount = 0\nfor i in range(100, 1000):\n    if is_palindrome(i) and is_multiple_of_3(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 348,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.02"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "q = 0.5\nh = 12\n\nfor i in range(h):\n    q *= 0.75\n\nprint(f\"{q:.2f}\")"
  },
  {
    "example_id": 349,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# cats that do not catch mice\ncats_do_not_catch_mice = 17\n# cats with black fur\ncats_with_black_fur = 10\n# total number of cats\ntotal_cats = 24\n\n# smallest number of cats that do not catch mice that have black fur\nsmallest_cats = cats_do_not_catch_mice + cats_with_black_fur\nprint(smallest_cats)"
  },
  {
    "example_id": 350,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def is_cube(x):\n    return x**3 == x\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef count(n):\n    c = 0\n    for i in range(1, n + 1):\n        if is_prime(i) and is_cube(i):\n            c += 1\n    return c\n\ndef prime_factors_of(n):\n    factors = []\n    while n > 1:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n        else:\n            factors.append(n)\n            break\n    return factors\n\ndef prime_factors(n):\n    factors = []\n    for p in prime_factors_of(n):\n        count = 0\n        while n % p == 0:\n            count += 1\n            n //= p\n        factors.append((p, count))\n    return factors\n\ndef solve_cubes():\n    cubes = [i**3 for i in range(1, 2008)]\n    cubes = [cube for cube in cubes if is_prime(cube)]\n    return cubes\n\ncubes = solve_cubes()\nprint(len(cubes))"
  },
  {
    "example_id": 351,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sum = 0\nfor i in range(1,11):\n    if (-3*i + 3 > -11):\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 352,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.26666666666666666"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(4/15)"
  },
  {
    "example_id": 353,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.014"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Find the number of weeks it takes for every pair of people to hug at least once\n# https://www.mathsisfun.com/combinatorics/combinations-permutations.html\n# https://www.youtube.com/watch?v=6Bj0Kw9hJ8E\n\n# The number of possible orderings of the eight people is 8! = 8 \u00d7 7 \u00d7 6 \u00d7 5 \u00d7 4 \u00d7 3 \u00d7 2 \u00d7 1 = 40,320\n# Each week, each person hugs the people immediately to their left and right.\n# So, the number of possible orderings of the eight people that satisfy the given condition is 40,320 \u00d7 7 = 288,480\n\n# Since each week, each person hugs the people immediately to their left and right,\n# we need to find the number of weeks it takes for every pair of people to hug at least once\n# We can find this by dividing the total number of possible orderings of the eight people\n# by the number of possible orderings of the eight people that satisfy the given condition\n# \n# 40,320 / 288,480 = 0.0143\n\nprint(f\"{0.0143:.3f}\")"
  },
  {
    "example_id": 354,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a = 10\na = a * 2\nprint(a)"
  },
  {
    "example_id": 355,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define function to check if number is prime\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define function to check if number is cube\ndef is_cube(x):\n    return x**3 - x == 0\n\n# Define function to find the greatest common divisor of two numbers\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# Define function to count the number of prime factors of a number\ndef count(n):\n    count = 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Define function to find the prime factors of a number\ndef prime_factors(n):\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n    return factors\n\n# Define function to find the prime factors of a number\ndef prime_factors_of(n):\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n    return factors\n\n# Find the number of two digit prime numbers that have a sum of digits equal to 8\ncount = 0\nfor i in range(10, 100):\n    if is_prime(i) and is_cube(i):\n        if count(i) == 2 and sum(prime_factors(i)) == 8:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 356,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "4.0",
      "8.0",
      "10.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "least_positive_integer_divisible_by_each_of_the_first_five_composite_numbers = [1, 2, 4, 8, 10]\nprint(least_positive_integer_divisible_by_each_of_the_first_five_composite_numbers)"
  },
  {
    "example_id": 357,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(1313, 1001))"
  },
  {
    "example_id": 358,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.9999999999999939"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(pow(7/16, 111)*pow(16/7, 111))"
  },
  {
    "example_id": 359,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 13 - 5\nprint(k)"
  },
  {
    "example_id": 360,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "wallops = 5\nballops = 3\nfallops = 11\n\n# 110 fallops = 11 x 11\n# 11 x 11 = 121\n\n# 121 wallops = 110 fallops\n# 110 fallops = 121 / 11\n\n# 121 / 11 = 11\n\n# 11 wallops = 121 / 11\n\n# 121 / 11 = 11\n\n# 11 wallops = 110 fallops\n\n# 110 fallops = 11 x 10\n\n# 11 x 10 = 110\n\n# 110 fallops = 110\n\nprint(110)"
  },
  {
    "example_id": 361,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.1"
    ],
    "annotated_answers": [
      "24.1"
    ],
    "solution": "# Define the function to return the median\ndef median(my_list):\n    my_list.sort()\n    if len(my_list) % 2 == 0:\n        return (my_list[len(my_list) // 2 - 1] + my_list[len(my_list) // 2]) / 2\n    else:\n        return my_list[len(my_list) // 2]\n\n\n# Define the list of kick return averages\nkick_return_averages = [25.0, 24.3, 24.1, 23.8, 23.4]\n\n# Call the median function and print the result\nprint(median(kick_return_averages))"
  },
  {
    "example_id": 362,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "area = 3*2\ntiles = area/6\nprint(tiles)"
  },
  {
    "example_id": 363,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "perimeter = 0\nfor i in range(8):\n    perimeter += 10\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 364,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = int((math.sqrt(200) - 1) / 6)\nprint(x)"
  },
  {
    "example_id": 365,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.05"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# set up variables\nKelly_time = 9/42\nBrenda_time = 12/45\n\n# calculate the difference\ndifference = Brenda_time - Kelly_time\n\n# print the difference\nprint(f\"{difference:.2f}\")"
  },
  {
    "example_id": 366,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.24"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "h = math.sqrt(27 - (6**2)/4)\nprint(f\"{h:.2f}\")"
  },
  {
    "example_id": 367,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "162.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "counter = 0\nfor i in range(99, 999):\n    if str(i).count('0') == 1:\n        counter += 1\nprint(counter)"
  },
  {
    "example_id": 368,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define variables\nchocolate_chips = 8\ncookies = 12\n\n# Calculate cups of chocolate chips needed to make 15 cookies\nchocolate_chips_needed = 15 / cookies * chocolate_chips\n\n# Print solution\nprint(chocolate_chips_needed)"
  },
  {
    "example_id": 369,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0",
      "68.0",
      "85.0",
      "17686800.0"
    ],
    "annotated_answers": [
      "1020.0"
    ],
    "solution": "a, b, c = 51, 68, 85\n\n# find least common multiple of a and b\nlcm_ab = a * b / math.gcd(a, b)\n\n# find least common multiple of a and c\nlcm_ac = a * c / math.gcd(a, c)\n\n# find least common multiple of b and c\nlcm_bc = b * c / math.gcd(b, c)\n\n# find least common multiple of a, b and c\nlcm_abc = lcm_ab * lcm_ac * lcm_bc\n\nprint(f\"The least common multiple of {a}, {b} and {c} is {lcm_abc}\")"
  },
  {
    "example_id": 370,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "x = symbols('x')\neq = 3*x + 2*(1 + x) - 17\nprint(eq.subs(x, 2))"
  },
  {
    "example_id": 371,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2004.0"
    ],
    "annotated_answers": [
      "2013.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_cube(x):\n    return x ** 3 - x == 1\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef count(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n\n\ndef prime_factors(n):\n    factors = []\n    while n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n = n // i\n                break\n        else:\n            factors.append(n)\n            break\n    return factors\n\n\ndef prime_factors_of(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef solve_it(n):\n    # find the prime factors of n\n    factors = prime_factors_of(n)\n    # find the gcd of the prime factors\n    gcd_factors = gcd(factors[0], factors[1])\n    # return the product of the prime factors divided by their gcd\n    return n // gcd_factors\n\n\nprint(solve_it(2004))"
  },
  {
    "example_id": 372,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 4 * (5/8) ** 55 * (8/37) ** 55\nprint(f\"{x:.10f}\")"
  },
  {
    "example_id": 373,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 0.3\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 374,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "width = 1\nheight = 1\ntile_side = 4\ntiles = (width // tile_side) * (height // tile_side)\nprint(tiles)"
  },
  {
    "example_id": 375,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "def get_time(n):\n    return [i for i in range(0, 60, n)]\n\ndef get_backups(n1, n2):\n    times = get_time(n1)\n    return len(set(times).intersection(get_time(n2)))\n\nprint(get_backups(5, 2))"
  },
  {
    "example_id": 376,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# define expression\nexpression = 2**20 + 2**20 + 2**20 + 2**21\n\n# simplify expression\nexpression = expression // 2**17\n\n# print result\nprint(expression)"
  },
  {
    "example_id": 377,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.67"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "c = 3 + 2/3\nprint(f\"{c:.2f}\")\n\n\n# \nis_prime(n)\n\n\n# \nis_cube(x)\n\n\n# \ngcd(a, b)\n\n\n# \ncount(n)\n\n\n# \nprime_factors(n)\n\n\n# \nprime_factors_of(n)"
  },
  {
    "example_id": 378,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1500.0"
    ],
    "solution": "x = symbols('x')\nsolve([3000 + x - 2000, 1500 + 1000], x)"
  },
  {
    "example_id": 379,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "height = 10 + 25 * 2\nprint(height)"
  },
  {
    "example_id": 380,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(16)"
  },
  {
    "example_id": 381,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2001.0",
      "2002.0",
      "2003.0",
      "2004.0",
      "2005.0",
      "2006.0",
      "2007.0",
      "2008.0",
      "2009.0",
      "2010.0"
    ],
    "annotated_answers": [
      "5999.0"
    ],
    "solution": "def four_digit_integers_between(lower_limit, upper_limit):\n    return [i for i in range(lower_limit, upper_limit) if len(str(i)) == 4]\n\nprint(four_digit_integers_between(2001, 8000))"
  },
  {
    "example_id": 382,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "16.0",
      "3600.0",
      "7200.0",
      "449.0",
      "449.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "# Define the variables\na = 2\nb = a * 2\n\n# Calculate the perimeter\nperimeter = b * 4\n\n# Calculate the area\narea = a * b\n\n# Calculate the new area\nnew_area = 3600\n\n# Calculate the new perimeter\nnew_perimeter = 4 * new_area / a\n\n# Calculate the difference between the new perimeter and the original perimeter\nperimeter_difference = new_perimeter - perimeter\n\n# Calculate the difference between the new area and the original area\narea_difference = new_area - area\n\n# Calculate the ratio of the difference in perimeter to the original perimeter\nperimeter_ratio = perimeter_difference / perimeter\n\n# Calculate the ratio of the difference in area to the original area\narea_ratio = area_difference / area\n\n# Print the results\nprint(\"The original area was {0:.0f} square feet.\".format(area))\nprint(\"The original perimeter was {0:.0f} feet.\".format(perimeter))\nprint(\"The new area is {0:.0f} square feet.\".format(new_area))\nprint(\"The new perimeter is {0:.0f} feet.\".format(new_perimeter))\nprint(\"The ratio of the difference in perimeter to the original perimeter is {0:.2f}.\".format(perimeter_ratio))\nprint(\"The ratio of the difference in area to the original area is {0:.2f}.\".format(area_ratio))"
  },
  {
    "example_id": 383,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "784.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "area = 28 * 28\nprint(area)"
  },
  {
    "example_id": 384,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "x = 14 * 3\nprint(x)"
  },
  {
    "example_id": 385,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(6**3, 3**6))"
  },
  {
    "example_id": 386,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1**2**235423523)"
  },
  {
    "example_id": 387,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "9.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "if 12 % 9 == 0:\n    print(\"12 is a factor of 9, so the number is 1\")\nelse:\n    print(\"12 is not a factor of 9, so the number is not 1\")"
  },
  {
    "example_id": 388,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0",
      "5.0",
      "120.0",
      "120.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Variables\ncars = 30\nred = 1/3\nfour_door = 0.5\ntwo_door = 8\nwhite = 1/2\n\n# Red and four-door cars\nred_four_door = red * four_door * cars\n\n# Two-door and white cars\ntwo_door_white = two_door * white * cars\n\n# Total two-door cars\ntotal_two_door = two_door_white\n\n# Total cars\ntotal_cars = red_four_door + two_door_white\n\n# Print result\nprint(f\"There are {total_cars} cars in your building's parking lot.\")\nprint(f\"{red_four_door} of them are four-door and red.\")\nprint(f\"{two_door_white} of them are two-door and white.\")\nprint(f\"{total_two_door} of them are two-door.\")"
  },
  {
    "example_id": 389,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "area = (9 * 4) / 2\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 390,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1056.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "def lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef gcf(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        return gcf(a - b, b)\n    else:\n        return gcf(a, b - a)\n\ndef lcg(a, b):\n    return lcm(a, b) * gcf(a, b)\n\nprint(lcg(22, 48))"
  },
  {
    "example_id": 391,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "A1 = 25\nA2 = 49\nA3 = A1 + A2\nprint(A3)"
  },
  {
    "example_id": 392,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0",
      "46.0",
      "46.0",
      "46.0",
      "46.0",
      "46.0",
      "46.0",
      "46.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "counties = ['Aiken', 'Bamberg', 'Barnwell', 'Berkeley', 'Calhoun', 'Cherokee', 'Chesterfield', 'Colleton']\nyears = [2001, 2002, 2003, 2004, 2005]\nstudents = [124, 17, 25, 583, 15, 19, 46, 64]\n\nmedian = lambda lst: sorted(lst)[len(lst)//2]\n\nfor county in counties:\n    print(f'{county} median is {median(students)}')"
  },
  {
    "example_id": 393,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "capacity = 1100\ncurrent_enrollment = 980\nincrease_rate = 0.05\n\nfor i in range(1, 100000):\n    new_enrollment = current_enrollment + (current_enrollment * increase_rate)\n    if new_enrollment > capacity:\n        print(i)\n        break\n    current_enrollment = new_enrollment"
  },
  {
    "example_id": 394,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# Assign variables\nusd = 300\npounds = 0.5 * usd\neuros = 0.5 * usd\n\n# Calculate\ndifference = euros - pounds\n\n# Print result\nprint(difference)"
  },
  {
    "example_id": 395,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.5"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "# Calculate the average score for the tests\navg_score = 99 / 2\n\n# Calculate the average score for each test\navg_test_score = avg_score / 6\n\n# Calculate the score for the final exam\nfinal_score = avg_score * 2\n\n# Calculate the score for each test\ntest_score = final_score / 6\n\nprint(f\"{test_score:.2f}\")"
  },
  {
    "example_id": 396,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "87.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "gestation_period_in_weeks = 609/7\nprint(gestation_period_in_weeks)"
  },
  {
    "example_id": 397,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "-49.0"
    ],
    "solution": "# Solve the linear system\nx = solve([2*x+3*y - 4, y - 34], [x, y])[0]\nprint(f\"{x}\")"
  },
  {
    "example_id": 398,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "print((1421//7 + 47)//50*9)"
  },
  {
    "example_id": 399,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "12.0",
      "12.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "for i in range(100):\n    if i % 10 == 0:\n        continue\n    for j in range(i, 100):\n        if j % 10 == 0:\n            continue\n        if i * j == 12:\n            print(i * j)\n            break"
  },
  {
    "example_id": 400,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "n = 18 + 13 + 5\nprint(n)"
  },
  {
    "example_id": 401,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(x):\n    return x ** 3 == abs(x)\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef count(n):\n    count = 0\n    for i in range(10):\n        if is_prime(n + i) and is_cube(n + i):\n            count += 1\n    return count\n\nn = 42789\nans = 0\nfor i in range(10):\n    if is_prime(n + i) and is_cube(n + i):\n        ans += 1\nprint(ans)"
  },
  {
    "example_id": 402,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Create a list of numbers from -36 to 48\nnumbers = list(range(-36, 48))\n\n# Print the length of the list\nprint(len(numbers))"
  },
  {
    "example_id": 403,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Define the variables\na, b, c = symbols('a b c')\n\n# Solve for the length of the altitude AD\nAD = solve(a*b/2 - a*c/2, a)[0]\n\n# Print the length of the altitude AD\nprint(f\"{AD:.2f}\")"
  },
  {
    "example_id": 404,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "3.0",
      "-3.0",
      "3.0",
      "-6.0",
      "-3.0",
      "3.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# Set up the variables\neyebrows = 2\neyes = 1\nears = 2\nlips = 2\nshoes = 2\nhair = 3\n\n# Create a list of all the possible combinations\npossible = []\nfor e in itertools.combinations(range(eyebrows), 2):\n    for f in itertools.combinations(range(ears), 2):\n        for g in itertools.combinations(range(lips), 2):\n            for h in itertools.combinations(range(shoes), 2):\n                for i in itertools.combinations(range(hair), 3):\n                    possible.append(list(e) + list(f) + list(g) + list(h) + list(i))\n\n# Find the number of complete personalities\ncount = 0\nfor x in possible:\n    if len(x) == 9:\n        count += 1\n    elif len(x) == 8:\n        count += 1\n\n# Print the number of wacky personalities\nprint(count)"
  },
  {
    "example_id": 405,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.6"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 12\npercent = 0.3\nanswer = percent * x\nprint(f\"{answer:.2f}\")"
  },
  {
    "example_id": 406,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# find number of students in Math Club\nmath_club = 0.30 * 15\nprint(f\"{math_club:.0f}\")"
  },
  {
    "example_id": 407,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.11"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "# Max must take 10 steps to go the same distance as three of his dad's steps.\n# His dad takes 30 steps to walk down the hall.\n\n# Max takes 10/3 = 3.33 steps for each of his dad's steps\n# so he takes 30 x 3.33 = 101.1 steps to walk down the hall\n\n# Max steps = 30 x 3 + 101.1 = 90.11\nprint(90.11)"
  },
  {
    "example_id": 408,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Calculate 8 / 2 / 2 + 6\nprint(8 / 2 / 2 + 6)"
  },
  {
    "example_id": 409,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# The area of rectangle ABDC is 40.\n# The area of MBCN is half the area of ABDC.\n# So the area of MBCN is 20.\nprint(20)"
  },
  {
    "example_id": 410,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "127.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "# Angle A\nangle_A = 39\n\n# Angle QBP\nangle_QBP = 14\n\n# Angle BPC\nangle_BPC = 180 - angle_A - angle_QBP\n\nprint(f\"{angle_BPC:.2f}\")"
  },
  {
    "example_id": 411,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "31855525.0",
      "2.0",
      "31855525.0",
      "3.0",
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = symbols(\"x\")\ny = symbols(\"y\")\nz = symbols(\"z\")\n\n# Part 1\nexpr1 = 317**3 + 8**3\nprint(f\"Part 1: {expr1:.2f}\")\n\n# Part 2\nexpr2 = 2**(3**2) + 317**3\nprint(f\"Part 2: {expr2:.2f}\")\n\n# Part 3\nexpr3 = expr1 - expr2\nprint(f\"Part 3: {expr3:.2f}\")"
  },
  {
    "example_id": 412,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "for n in itertools.count(1):\n    if is_cube(n):\n        print(f\"The number is {n}\")\n        break"
  },
  {
    "example_id": 413,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "import math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef permutations(n, r):\n    return factorial(n) / factorial(n-r)\n\ndef combinations(n, r):\n    return permutations(n, r) / factorial(r)\n\nprint(combinations(10, 2))"
  },
  {
    "example_id": 414,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97969.0"
    ],
    "annotated_answers": [
      "97969.0"
    ],
    "solution": "print((97969 ** 0.5) ** 2)"
  },
  {
    "example_id": 415,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "891.0"
    ],
    "solution": "x = 1000\nwhile x % 11!= 0:\n    x += 1\ny = x - 11\nwhile y % 11!= 0:\n    y -= 1\nprint(x - y)"
  },
  {
    "example_id": 416,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "100.0",
      "99.0",
      "98.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "scores = [100, 100, 99, 98]\nmean = 95\nfor score in scores:\n    if score!= mean:\n        print(score)"
  },
  {
    "example_id": 417,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# find the side length of the octagon\n# perimeter of octagon = perimeter of hexagon\n# side length of octagon = 2 * perimeter of hexagon / 8\n# side length of hexagon = 2 * perimeter / 6\n# perimeter of hexagon = 6 * side length\n# perimeter of octagon = 2 * 6 * side length / 8\n# side length of octagon = 2 * 6 * side length / 8\n# side length of octagon = 2 * side length\n# side length of octagon = 2 * 16 / 8\n# side length of octagon = 2 * 16 / 8\n# side length of octagon = 2 * 2\n# side length of octagon = 4\n\nprint(\"The side length of the octagon is 4 cm.\")"
  },
  {
    "example_id": 418,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "260.0"
    ],
    "solution": "# Define a function to check if the number is prime\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define a function to check if the number is cube\ndef is_cube(x):\n    if x == 1:\n        return False\n    for i in range(1, int(x**(1/3)) + 1):\n        if x == i**3:\n            return True\n    return False\n\n# Define a function to count the number of prime cubes less than or equal to n\ndef count(n):\n    count = 0\n    for i in range(1, int(n**(1/3)) + 1):\n        if is_prime(i) and is_cube(i):\n            count += 1\n    return count\n\n# Test the function\nprint(count(100))\nprint(count(1000))\nprint(count(10000))\nprint(count(100000))"
  },
  {
    "example_id": 419,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "291.0"
    ],
    "annotated_answers": [
      "291.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_cube(x):\n    return x ** 3 == x\n\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef count(n):\n    return sum(1 for i in range(1, n + 1) if is_prime(i))\n\n\ndef solve_problem(n):\n    for i in range(1, n + 1):\n        if is_prime(i):\n            for j in range(10, 100):\n                if is_prime(j) and i + j == n:\n                    return i * j\n\n\nprint(solve_problem(100))"
  },
  {
    "example_id": 420,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "smaller = 15 / 2\nlarger = 15 - smaller\nprint(larger)"
  },
  {
    "example_id": 421,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "time_bill = 400 / 50\ntime_sam = 400 / 40\nprint(time_sam - time_bill)"
  },
  {
    "example_id": 422,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "radius = 4\nwhile True:\n    area = math.pi * radius ** 2\n    if area - 48 * math.pi < 1e-10:\n        break\n    radius -= 1\nprint(radius)"
  },
  {
    "example_id": 423,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.67"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols(\"x\")\ny = symbols(\"y\")\n\n# distance from A to B\ndistance = solve(\n    (2 + 3*x + 2*y)**2 - (2 + 3*x - 2*y)**2, x, y)\n\nprint(f\"{distance[0][0]:.2f}\")"
  },
  {
    "example_id": 424,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "7.0",
      "21.0",
      "3.0",
      "7.0",
      "21.0",
      "21.0",
      "21.0",
      "-8.0",
      "3.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "for i in range(1, 40):\n    for j in range(1, 40):\n        if i % 3 == 0 and j % 7 == 0:\n            if i * j % 3 == 0 and i * j % 7 == 0:\n                print(f\"{i} and {j} are good numbers\")\n                print(f\"{i * j} is the product of {i} and {j}\")\n                print(f\"{i * j} is a cube\")\n                print(f\"{i * j} is a prime number\")\n                print(f\"{i * j} has {count(i * j)} digits\")"
  },
  {
    "example_id": 425,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = symbols('x')\nprint(solve(4*x + 5 - 6*x - 7, x))"
  },
  {
    "example_id": 426,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Area of right triangle\n# Area = (base * height) / 2\n# height = side opposite base\n\n# 12 cm\nbase = 12\n# 20 cm\nside = 20\n\n# height = 20\nheight = side\n\n# Area = (base * height) / 2\n# Area = (12 * 20) / 2\n# Area = 240 / 2\n# Area = 120\n\nprint(120)"
  },
  {
    "example_id": 427,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "7.0",
      "57.0",
      "8.0",
      "0.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "number_of_people = 3\nnumber_of_offices = 5\n\n# permutations\nfrom itertools import permutations\n\nresult = permutations(range(1, number_of_offices+1), number_of_people)\nprint(result)"
  },
  {
    "example_id": 428,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.6"
    ],
    "annotated_answers": [
      "0.6"
    ],
    "solution": "# Rounding to the nearest tenth\nprint(round(4/7, 1))"
  },
  {
    "example_id": 429,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Define function to check if a number is prime\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define function to check if a number is cube\ndef is_cube(x):\n    return x**3 == abs(x)\n\n# Define function to find gcd of two numbers\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# Define function to count prime factors\ndef count(n):\n    count = 0\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Find prime factorization of 20!\nfactorization = [1]\nfor i in range(2, 20 + 1):\n    if count(i) == 1:\n        factorization.append(i)\n    else:\n        for j in range(1, count(i) + 1):\n            factorization.append(i**(j))\n\n# Count prime factors\nprime_count = 0\nfor i in factorization:\n    if is_prime(i):\n        prime_count += 1\n\nprint(prime_count)"
  },
  {
    "example_id": 430,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3720.0"
    ],
    "annotated_answers": [
      "3720.0"
    ],
    "solution": "# \nprint(3.72 * 1000)"
  },
  {
    "example_id": 431,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 2520\nprint(len(set(factorint(n).keys())))"
  },
  {
    "example_id": 432,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# \nblue = 60 // 3\nprint(blue)"
  },
  {
    "example_id": 433,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Define variable\nx = symbols('x')\n\n# Define equation\neq = (x**2 - 16)**2\n\n# Solve equation\nsol = solve(eq, x)\n\n# Print solution\nprint(sol)"
  },
  {
    "example_id": 434,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "# Estimate the number of frogs in the pond\nestimate = 40 - 10 + 45\nprint(estimate)"
  },
  {
    "example_id": 435,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-28.4"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = symbols('x')\n\n# Find the sum of the four given numbers\nsum_of_four = 10 + 4 + 5 + 20\n\n# Find the average\naverage = 10.6\n\n# Find the fifth number\nfifth_number = (average - sum_of_four)\n\nprint(f\"{fifth_number:.2f}\")"
  },
  {
    "example_id": 436,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 117\nb = 119\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\na_factors = prime_factors(a)\nb_factors = prime_factors(b)\n\nprint(len(set(a_factors + b_factors)))"
  },
  {
    "example_id": 437,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "count = 0\nfor i in range(1,2501):\n    if i**2 > 2500:\n        break\n    count += 1\nprint(count)"
  },
  {
    "example_id": 438,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "# greatest common divisor\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# prime factors\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# greatest prime factor\ndef gpf(n):\n    factors = prime_factors(n)\n    return factors[-1]\n\nprint(gpf(3105))"
  },
  {
    "example_id": 439,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# compute the area of the shaded region\narea = 0\nfor i in range(1, 12):\n    for j in range(1, 12):\n        if (i + j) % 2 == 0:\n            area += 1\nprint(f\"The total area of the shaded region is {area}\")"
  },
  {
    "example_id": 440,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "print(182 + 3 * 7 - 64 / 2 + 27 / 3)"
  },
  {
    "example_id": 441,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "x = 40\nprint(x)"
  },
  {
    "example_id": 442,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-40.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(42 - 36 - 26 - 20)"
  },
  {
    "example_id": 443,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5",
      "10.0",
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define the probability of selecting a blue marble\nprob = 1/2\n\n# Calculate the number of blue marbles needed\nblue_marbles = math.ceil(20*prob)\n\n# Calculate the number of non-blue marbles needed\nnon_blue_marbles = 20 - blue_marbles\n\n# Print the results\nprint(f\"To get a probability of {prob}, {blue_marbles} blue marbles must be added to the bag.\")\nprint(f\"There are {non_blue_marbles} non-blue marbles.\")"
  },
  {
    "example_id": 444,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "pins = 100\npins_given = 66\n\n# John gave his brother 1/3 of one pile\npins_brother = 100 - (pins_given / 3)\n\n# John has 1/2 of one pile\npins = pins_given / 2\n\n# John has 1/2 of the other pile\npins += pins_brother / 2\n\nprint(f\"{pins} pins\")"
  },
  {
    "example_id": 445,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51282553.0"
    ],
    "annotated_answers": [
      "264.0"
    ],
    "solution": "# \ndef is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))\n\n# \ndef is_cube(x):\n    return x ** 3 % 1 == 0\n\n# \ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# \ndef count(n):\n    return sum(1 for i in range(100, 1000) if is_cube(i) and is_prime(i))\n\n# \ndef prime_factors(n):\n    factors = []\n    while n > 1:\n        for p in range(2, int(n ** 0.5) + 1):\n            if n % p == 0:\n                factors.append(p)\n                n //= p\n                break\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\n# \ndef find_sum_of_positive_two_digit_integers(n):\n    total = 0\n    for i in range(100, n):\n        for j in range(10, 100):\n            if i % 10!= j:\n                if is_cube(i * 10 + j) and is_prime(i * 10 + j):\n                    total += i * 10 + j\n    return total\n\n# \nsum_of_positive_two_digit_integers = find_sum_of_positive_two_digit_integers(1000)\nprint(f\"{sum_of_positive_two_digit_integers:.2f}\")"
  },
  {
    "example_id": 446,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(max(i for i in range(25) if 4*i + 3 < 25 and -7*i + 5 < 24))"
  },
  {
    "example_id": 447,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-13.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "y = 8 - 21\nprint(y)"
  },
  {
    "example_id": 448,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "# Create a list of all possible triangle sides\nsides = [8*x for x in range(1, 10)]\n\n# Check if each side is a valid perimeter\nperimeters = [sum(x) for x in itertools.combinations(sides, 3)]\n\n# Find the smallest valid perimeter\nsmallest_perimeter = min(perimeters)\n\n# Print the answer\nprint(smallest_perimeter)"
  },
  {
    "example_id": 449,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5208333333333334"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(25/4/12)"
  },
  {
    "example_id": 450,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "yards = 3 * 0.25\ninches = yards * 36\nprint(f\"{inches:.2f}\")"
  },
  {
    "example_id": 451,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1080.0"
    ],
    "annotated_answers": [
      "1080.0"
    ],
    "solution": "time = 0.30 * 3600\nprint(time)"
  },
  {
    "example_id": 452,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "distance = 19 + 16 - 3 + 4\nprint(distance)"
  },
  {
    "example_id": 453,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Define a function to calculate the time for a distance\ndef time(distance):\n    hours = distance / 1.7\n    return hours\n\n# Call the function and print the result\nprint(f\"{time(17):.2f}\")"
  },
  {
    "example_id": 454,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0",
      "6.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 0\nfor i in range(1, 1000):\n    if (12 % i) == 0:\n        n += 1\nprint(f\"The sum of all integers n such that $\\frac{12}{n}$ is also an integer is {n}\")"
  },
  {
    "example_id": 455,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40320.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "# Create a list of the 8 sprinters\nsprinters = list(range(1, 9))\n\n# Create a list of all possible medals\nmedals = list(itertools.permutations(sprinters))\n\n# Count the number of medals\nprint(len(medals))"
  },
  {
    "example_id": 456,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "x = symbols('x')\n\n# Find the degree of the largest interior angle\nangle = x + 4\n\n# Find the degree of the smallest interior angle\nangle_min = x - 2\n\n# Find the difference between the two angles\ndiff = angle - angle_min\n\n# Find the smallest angle\nmin_angle = angle_min\n\n# Find the largest angle\nmax_angle = angle\n\n# Find the degree of the largest interior angle\ndegree_max = max_angle\n\n# Find the degree of the smallest interior angle\ndegree_min = min_angle\n\n# Find the degree of the difference between the two angles\ndegree_diff = diff\n\n# Print the solution\nprint(f\"The degree of the largest interior angle is {degree_max} degrees.\")"
  },
  {
    "example_id": 457,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-16.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "x = symbols('x')\np = 76\nl = 3*x + 10\nw = x + 12\na = l*w\nb = 2*p\neq1 = a - b\nsol = solve(eq1, x)\nprint(sol)"
  },
  {
    "example_id": 458,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "print(9000 / 200)"
  },
  {
    "example_id": 459,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.9999999999999996"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 42\nprint(pow(1/a, 4) * 2 * pow(a, 4) + pow(a, 2+1-3))"
  },
  {
    "example_id": 460,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "cones = 72\ncones *= 2/3\ncones *= 2/3\nprint(cones)"
  },
  {
    "example_id": 461,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2560.0"
    ],
    "annotated_answers": [
      "2560.0"
    ],
    "solution": "bacteria_population = 10\nbacteria_growth_rate = 2\ntime_elapsed = 8\nbacteria_population *= bacteria_growth_rate ** time_elapsed\nprint(bacteria_population)"
  },
  {
    "example_id": 462,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "192.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "print(2**(2**3) - (2**2)**3)"
  },
  {
    "example_id": 463,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Write your code here\n\nt = 2\ndt = 15\nT0 = 100\n\nT1 = T0 + (T0 - 100) * (1 + (dt/t))\nprint(T1)"
  },
  {
    "example_id": 464,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0",
      "3.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "girls = 0\nboys = 0\nwhile girls < 35:\n    girls += 13\n    boys += 1\ngirls -= 13\nprint(f\"{girls} girls and {boys} boys\")"
  },
  {
    "example_id": 465,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "num = 1341\nfor i in range(1, num//2):\n    if num - 3*i**2 in range(1, num//2):\n        print(f\"The largest integer is {i}\")\n        break"
  },
  {
    "example_id": 466,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "n = 10\nm = 2\n\n# Total number of guard shifts\nguard_shifts = n * (n - 1)\n\n# Total number of nights\nnights = guard_shifts / (m * (m - 1))\n\nprint(f\"Each meerkat gets {nights:.0f} nights of sleep.\")"
  },
  {
    "example_id": 467,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "310.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "total_pots = 600\nfourth_pot_count = total_pots // 4\nsixth_pot_count = total_pots // 6\ntenth_pot_count = total_pots // 10\n\nred_balloon_count = fourth_pot_count\nblue_balloon_count = sixth_pot_count\nyellow_balloon_count = tenth_pot_count\n\nthree_colored_balloon_pots = red_balloon_count + blue_balloon_count + yellow_balloon_count\nprint(three_colored_balloon_pots)"
  },
  {
    "example_id": 468,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# The product of 3 consecutive integers is 120\n# divided by the mean of the 3 integers is 24\n# The mean of the 3 integers is 40\n# The largest of the 3 consecutive integers is 60\nprint(60)"
  },
  {
    "example_id": 469,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "# Find the area of the rectangle\nwidth = 5\narea = 2 * width\nprint(f\"The area of the rectangle is {area:.2f}\")"
  },
  {
    "example_id": 470,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "# number of outfits = number of shirts * number of pairs of pants * number of hats\n# = 5 * 6 * 8 = 240\nprint(240)"
  },
  {
    "example_id": 471,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "def number_of_handshakes(n_witches, n_sorcerers):\n    return n_witches * (n_sorcerers - 1)\n\nprint(number_of_handshakes(6, 10))"
  },
  {
    "example_id": 472,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "7.0"
    ],
    "annotated_answers": [
      "1001.0"
    ],
    "solution": "for n in itertools.count(start=1, step=1):\n    if n % 7 == 0:\n        print(f\"The least positive four-digit multiple of 7 is {n}\")\n        break"
  },
  {
    "example_id": 473,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "print(round(10.0000198*5.9999985401*6.9999852))"
  },
  {
    "example_id": 474,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "863.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "# Define a function to check if a number is prime\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define a function to check if a number is a cube\ndef is_cube(x):\n    return x ** 3 - x == 0\n\n# Define a function to calculate the gcd\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Define a function to calculate the prime factors\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if is_prime(i) and is_cube(i):\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# Define a function to count the numbers\ndef count(n):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 100 == 40:\n            count += 1\n    return count\n\n# Define a function to calculate the sum\ndef sum_of_primes(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if is_prime(i) and count(i) == 1:\n            sum += i\n    return sum\n\n# Test the function\nprint(sum_of_primes(100))"
  },
  {
    "example_id": 475,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Find the number of good workers needed\ngood_workers = 3\n\n# Find the number of bad workers needed\nbad_workers = (3/12) * 36\n\n# Calculate total workers needed\ntotal_workers = good_workers + bad_workers\n\n# Print the answer\nprint(f\"{total_workers}\")"
  },
  {
    "example_id": 476,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "p = 4\nq = 3\n\narea = 2\n\nlength = 2 * area\nwidth = 3 * area\n\nlength_sq = length ** 2\nwidth_sq = width ** 2\n\nprint(f\"The area of the quilt is {length_sq + width_sq}\")"
  },
  {
    "example_id": 477,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5937.0"
    ],
    "annotated_answers": [
      "5937.0"
    ],
    "solution": "pounds = 15832 / 8 * 3\nprint(pounds)"
  },
  {
    "example_id": 478,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Define a variable to count the number of ways\nways = 0\n\n# Define a list of scoops\nscoops = ['vanilla', 'chocolate','strawberry', 'cherry']\n\n# Iterate over all possible ways of stacking the scoops\nfor order in itertools.permutations(scoops):\n    # Check if the chocolate scoop is on the bottom\n    if order[0] == 'chocolate':\n        continue\n    # Increment the number of ways\n    ways += 1\n\n# Print the number of ways\nprint(ways)"
  },
  {
    "example_id": 479,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print((-5)**3 + (-2)**3 + 2**3 + 5**3)"
  },
  {
    "example_id": 480,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\n\ndenominator = (25 - 16)**0.5\nnumerator = (25 - 16)**0.5 - (25 - 16)**0.5\n\nanswer = numerator/denominator\nprint(f\"{answer:.2f}\")"
  },
  {
    "example_id": 481,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "distance = 4 / 0.5\nprint(distance)"
  },
  {
    "example_id": 482,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25000.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "trips = 1000000000/40000\nprint(trips)"
  },
  {
    "example_id": 483,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "betsys_pennies = 40\nbetsys_pennies += 2\nif betsys_pennies % 2 == 0:\n    print(betsys_pennies / 2)\nelse:\n    print(betsys_pennies / 2 + 1)"
  },
  {
    "example_id": 484,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.600000000000001"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "zinc_oz = 48 * 0.2\nprint(zinc_oz)"
  },
  {
    "example_id": 485,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(92 - 45 / (3 * 5) - 5**2)"
  },
  {
    "example_id": 486,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.125"
    ],
    "annotated_answers": [
      "5.5"
    ],
    "solution": "longest_side = 8.5 / 2**2\nprint(longest_side)"
  },
  {
    "example_id": 487,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "-89.0"
    ],
    "solution": "# Let angle PAB be x degrees\n# Let angle ACB be (Mx + N) degrees\n\n# Angle PAB = x\nx = 120\n\n# Angle ACB = Mx + N\nM = 1\nN = 60\n\n# Find M + N\nMN = M + N\nprint(MN)"
  },
  {
    "example_id": 488,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# \nfor x in itertools.count(1):\n    if 0.25 < x/5 < 0.666:\n        print(x)\n        break"
  },
  {
    "example_id": 489,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# 1 quarter = 25 cents\n# 1 nickel = 5 cents\n# 1 penny = 1 cent\n\n# 25 + 5 = 30\n# 25 + 1 = 26\n# 5 + 1 = 6\n# 1 + 1 = 2\n\nprint(3)"
  },
  {
    "example_id": 490,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "868.7"
    ],
    "annotated_answers": [
      "868.8"
    ],
    "solution": "print(round(543.55, 1) + round(25.23, 1) + round(299.98, 1))"
  },
  {
    "example_id": 491,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "507.0"
    ],
    "annotated_answers": [
      "507.0"
    ],
    "solution": "n = 500\nfor i in itertools.count(n + 1):\n    if i % 13 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 492,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "729.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "print(9**3)"
  },
  {
    "example_id": 493,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(2**5 - 5**2)"
  },
  {
    "example_id": 494,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Define the length of DC\nl = 2 * (0.5)\n\n# Define the area of the triangle\narea = (l * l) / 2\n\n# Print the area\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 495,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.580037664783422"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Define the points and the slope of the line\nA = (2.34, 1)\nB = (3.7, 0)\nC = (1.66, 0)\nm = 1/2\n\n# Calculate the slope of the line\nslope = (B[1] - A[1]) / (B[0] - A[0])\n\n# Calculate the y-intercept\ny_intercept = A[1] - (slope * A[0])\n\n# Calculate the x-intercept\nx_intercept = (y_intercept - slope * C[0]) / (1 - slope * slope)\n\n# Print the value of x\nprint(x_intercept)"
  },
  {
    "example_id": 496,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "count = 0\nfor n in range(5, 211):\n    if is_prime(n) and is_cube(n):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 497,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(3 * 3 + 3 * (3 + 3) - 3**3)"
  },
  {
    "example_id": 498,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Method 1\nsum = 0\nfor i in range(1, 21):\n    sum += i**2\n    if sum >= 49:\n        break\nprint(i)\n\n# Method 2\nsum = 0\nfor i in range(1, 10):\n    for j in range(1, 10):\n        sum += i**2 + j**2\n        if sum >= 49:\n            break\n    if sum >= 49:\n        break\nprint(j)"
  },
  {
    "example_id": 499,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Let's create a function to calculate the area of quadrilateral PTRS\ndef quadrilateral_area(PTRS):\n    # Calculate the area of triangle PTRS\n    area_PTRS = (PTRS[0] * PTRS[1]) / 2\n\n    # Calculate the area of quadrilateral PQRS\n    area_PQRS = 24\n\n    # Calculate the area of quadrilateral PTRS\n    area_PTRS = area_PQRS - area_PTRS\n\n    # Return the area of quadrilateral PTRS\n    return area_PTRS\n\n# Calculate the area of quadrilateral PTRS\narea = quadrilateral_area([6, 4])\n\n# Print the area of quadrilateral PTRS\nprint(f\"The area of quadrilateral PTRS is {area:.2f}.\")"
  },
  {
    "example_id": 500,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1250.0"
    ],
    "annotated_answers": [
      "1250.0"
    ],
    "solution": "# Find the exchange rate between the two countries\nexchange_rate = 1.50/1200\n\n# Calculate the equivalent value in dollars\ndollars = 1000000 * exchange_rate\nprint(f\"{dollars:.2f}\")"
  },
  {
    "example_id": 501,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.21"
    ],
    "annotated_answers": [
      "1.21"
    ],
    "solution": "print(max(1.33, 1.328) - min(0.78, 0.12))"
  },
  {
    "example_id": 502,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.84"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "# Area of the inner light gray strip\nwidth = 0.4\narea = 100\n\n# Area of the outer dark gray strip\narea_outer = area - width * width\n\n# Print the answer\nprint(f\"{area_outer:.2f}\")"
  },
  {
    "example_id": 503,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "x = 2 * 7 + 7\nprint(x)"
  },
  {
    "example_id": 504,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "count = 0\nfor i in range(1, 70):\n    if i % 2 == 0 and i < 7 * 13:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 505,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "juniors = 450\nseniors = 600\ndays = 5\n\njunior_drink = 1500\nsenior_drink = junior_drink\n\njunior_day = junior_drink * days\nsenior_day = senior_drink * days\n\nsenior_total = junior_day * (seniors / juniors)\n\nprint(f\"{senior_total:.2f}\")"
  },
  {
    "example_id": 506,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# define the variables\nlion_speed = 24\nelephant_speed = 19\ntime_in_minutes = 0\n\n# calculate the time it will take for the lion to catch the elephant\nwhile elephant_speed > lion_speed:\n    time_in_minutes += 1\n    elephant_speed -= lion_speed\n\n# print the time it will take for the lion to catch the elephant\nprint(time_in_minutes)"
  },
  {
    "example_id": 507,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "other_integer = 240 / 24\nprint(other_integer)"
  },
  {
    "example_id": 508,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "area = 60/2\nprint(area)"
  },
  {
    "example_id": 509,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2100.0"
    ],
    "annotated_answers": [
      "2100.0"
    ],
    "solution": "print(math.sqrt(5*10*14*21*15*20))"
  },
  {
    "example_id": 510,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# number of combinations for each question\na = 2\nb = 4\nc = 2\n# total number of combinations\nprint(a*b*c)"
  },
  {
    "example_id": 511,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0",
      "8.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Define variables\nflagpole_length = 15\nshadow_length = 6\nwoman_height = 5\n\n# Find the shadow length of the flagpole\nshadow_flagpole_length = flagpole_length - shadow_length\n\n# Find the height of the woman\nwoman_height_from_ground = flagpole_length - woman_height\n\n# Find the height of the woman from the ground\nwoman_height_from_flagpole = shadow_flagpole_length - woman_height_from_ground\n\n# Find the height of the flagpole from the ground\nflagpole_height_from_ground = shadow_flagpole_length + woman_height\n\n# Find the height of the flagpole from the ground\nflagpole_height_from_woman = shadow_flagpole_length + woman_height_from_flagpole\n\n# Print the answer\nprint(f\"The height of the flagpole from the ground is {flagpole_height_from_ground:.2f} feet\")\nprint(f\"The height of the flagpole from the woman is {flagpole_height_from_woman:.2f} feet\")"
  },
  {
    "example_id": 512,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7004.0"
    ],
    "annotated_answers": [
      "7004.0"
    ],
    "solution": "a, b = 3*11*13*21, 2005\nprint(a - b)"
  },
  {
    "example_id": 513,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5",
      "1.0",
      "1.73205080756888",
      "0.5",
      "1.0",
      "1.73205080756888"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Define the variables\nx, y = symbols('x y')\n\n# Define the equation\neq1 = (x**2 + y**2 - 2*x*y*math.cos(math.radians(60)))\neq2 = (x**2 + y**2 - 2*x*y*math.cos(math.radians(120)))\n\n# Solve the equation\nsolve(eq1, x, y)\n\n# Print the answer\nprint(f\"{solve(eq1, x, y)}\")"
  },
  {
    "example_id": 514,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "pints_in_quart = 2\nquarts_in_gallon = 4\nmilk_in_gallons = 2.5\npints_in_milk = milk_in_gallons * quarts_in_gallon * pints_in_quart\nprint(pints_in_milk)"
  },
  {
    "example_id": 515,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-142699.0"
    ],
    "annotated_answers": [
      "54000.0"
    ],
    "solution": "# define area of watered field\nw = 0.5 * math.pi * 500 ** 2\n\n# define area of square plot\ns = 500 ** 2\n\n# calculate area of unwatered field\nu = s - w\n\n# print answer\nprint(f\"{u:.0f}\")"
  },
  {
    "example_id": 516,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define the problem\nwands = 4\nrands = 6\nfands = 24\n\n# Define the variables\nwands_to_fands = wands / rands\nfands_to_fands = fands / fands\n\n# Define the problem\nfands_to_wands = fands_to_fands / wands_to_fands\n\n# Solve the problem\nsolution = fands_to_wands * 5\n\n# Print the solution\nprint(f\"{solution:.0f}\")"
  },
  {
    "example_id": 517,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(x):\n    return x ** 3 == abs(x)\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef count(n):\n    return sum(int(is_prime(i)) for i in range(n + 1))\n\ndef prime_factors(n):\n    factors = []\n    while n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef largest_prime_factor(n):\n    factors = prime_factors(n)\n    return factors[-1]\n\nprint(largest_prime_factor(78))"
  },
  {
    "example_id": 518,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(pow(math.sqrt(100) - math.sqrt(36), 2))"
  },
  {
    "example_id": 519,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "width = 9 * 10 / 6\nprint(width)"
  },
  {
    "example_id": 520,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "# Compute: 15 + 8^2 - 3\n\n# Step 1: Add 15 and 8^2\n# 8^2 = 64\n\n# Step 2: Subtract 3\n\n# Step 3: Print the final answer\nprint(15 + 64 - 3)"
  },
  {
    "example_id": 521,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "print(9/2)"
  },
  {
    "example_id": 522,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "print((-49)//7)"
  },
  {
    "example_id": 523,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "111.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "# Calculate how many positive multiples of 9 are less than 1000\nmultiples = 999 // 9\nprint(multiples)"
  },
  {
    "example_id": 524,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "42.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# smallest integer\ndef smallest(m):\n    return min(range(m))\n\n# mean of five consecutive integers\ndef mean(m):\n    return sum(range(m)) / 5\n\n# smallest integer\nprint(smallest(21))\n\n# mean of five consecutive integers\nprint(mean(21))"
  },
  {
    "example_id": 525,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "r = 24 / 3 + 5\nprint(r)"
  },
  {
    "example_id": 526,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "distance = math.sqrt(28 + math.sqrt(1296))\nprint(distance)"
  },
  {
    "example_id": 527,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "1.0",
      "2.0",
      "3.0",
      "12.0",
      "1.0",
      "5.0",
      "7.0",
      "11.0",
      "12.0",
      "1.0",
      "5.0",
      "7.0",
      "11.0",
      "12.0",
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define the function\ndef factor_list(n):\n    \"\"\"\n    n: positive integer\n    returns: list of positive factors of n\n    \"\"\"\n    factors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n# Define the function\ndef factors(n):\n    \"\"\"\n    n: positive integer\n    returns: list of positive integers that are less than or equal to n\n        and share no divisors with n other than 1\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if i == 1 or gcd(i, n) == 1:\n            factors.append(i)\n    return factors\n\n# Define the function\ndef ezekiel(n):\n    \"\"\"\n    n: positive integer\n    returns: list of positive integers that are less than or equal to n\n        and share no divisors with n other than 1\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if i == 1 or gcd(i, n) == 1:\n            factors.append(i)\n    return factors\n\n# Define the function\ndef count_factors(n):\n    \"\"\"\n    n: positive integer\n    returns: list of positive integers that are less than or equal to n\n        and share no divisors with n other than 1\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if i == 1 or gcd(i, n) == 1:\n            factors.append(i)\n    return len(factors)\n\n# Test the function\nn = 12\nprint(f\"The factors of {n} are: {factor_list(n)}\")\nprint(f\"The factors of {n} are: {factors(n)}\")\nprint(f\"The factors of {n} are: {ezekiel(n)}\")\nprint(f\"The number of factors of {n} is: {count_factors(n)}\")"
  },
  {
    "example_id": 528,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3628800.0"
    ],
    "annotated_answers": [
      "2520.0"
    ],
    "solution": "def lcm(numbers):\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[0] * lcm(numbers[1:])\n\nleast_common_multiple = lcm([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint(least_common_multiple)"
  },
  {
    "example_id": 529,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2400.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "# define swimmer rate and dolphin rate\nswimmer_rate = 2\ndolphin_rate = 8\n\n# calculate distance\ndistance = (dolphin_rate * 400) - (swimmer_rate * 400)\n\n# print distance\nprint(f\"{distance:.2f}\")"
  },
  {
    "example_id": 530,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.41"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "Fresh = 1.00\nGlow = 1.25\nBright = 1.50\n\n# Glow is $25\\%$ less expensive than Bright and has $33\\frac{1}{3} \\%$ more volume than Fresh.\nGlow_volume = Glow / Fresh\nGlow_price = Bright - Bright * 0.25\n\n# Glow costs $\\$1.00$ per unit of volume.\nGlow_volume_price = Glow_volume * Glow_price\n\nprint(f\"{Glow_volume_price:.2f}\")"
  },
  {
    "example_id": 531,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "154.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "n = 22\nm = 20\n\nhandshakes = sum(count(i) for i in range(1, n + 1))\n\nprint(handshakes)"
  },
  {
    "example_id": 532,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "556.0"
    ],
    "annotated_answers": [
      "1251.0"
    ],
    "solution": "students = 834 * 2 / 3\nprint(students)"
  },
  {
    "example_id": 533,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "total = 0\nfor A in range(0, 10):\n    for B in range(0, 10):\n        number = 2500 + 100*A + B\n        if number % 9 == 0:\n            total += 1\nprint(total)"
  },
  {
    "example_id": 534,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor i in [2, 3, 4, 5, 6, 8, 9]:\n    if i % 3 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 535,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "def count(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_cube(x):\n    return x**3 - x == 0\n\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef prime_factors(n):\n    factors = []\n    while n!= 1:\n        for p in range(2, int(n ** 0.5) + 1):\n            if n % p == 0:\n                factors.append(p)\n                n //= p\n                break\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\n\n# count the number of prime numbers between 2 and 100\ndef count_primes(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n\n\n# compute the sum of all prime numbers less than n\ndef sum_primes(n):\n    sum = 0\n    for i in range(2, n):\n        if is_prime(i):\n            sum += i\n    return sum\n\n\n# compute the sum of all prime numbers less than 100\ndef sum_primes_less_than_100():\n    return sum_primes(100)\n\n\n# compute the sum of all prime numbers less than 10000\ndef sum_primes_less_than_10000():\n    return sum_primes(10000)\n\n\n# compute the sum of all"
  },
  {
    "example_id": 536,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))\n\ndef is_cube(x):\n    return x ** 3 - x == 1\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef count(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef prime_factors(n):\n    factors = []\n    while n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n = n // i\n                break\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef get_digit(n, d):\n    if n == 1:\n        return 1\n    factors = prime_factors(n)\n    count = 0\n    for f in factors:\n        if f == d:\n            return count\n        count += 1\n    return 0\n\ndef solve(n, d):\n    return get_digit(n, d)\n\nn = 1 / 7\nd = 2007\nprint(solve(n, d))"
  },
  {
    "example_id": 537,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# The smallest prime number is 2 + 3 = 5\nprint(5)"
  },
  {
    "example_id": 538,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 100\nm = 3\nk = 4\n\n# count of numbers less than n, divisible by m and k\ncount = 0\nfor i in range(1, n+1):\n    if i % m == 0 and i % k == 0:\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 539,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = -1\nsum = 0\nfor i in range(2011):\n    sum += x**i\nprint(sum)"
  },
  {
    "example_id": 540,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "# Initialize count variable\ncount = 0\n\n# Loop through even numbers from 0 to 499\nfor i in range(0, 500, 2):\n    # If the number is a multiple of 5\n    if i % 5 == 0:\n        # Add 1 to count\n        count += 1\n\n# Print count\nprint(count)"
  },
  {
    "example_id": 541,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "for i in range(100, 1000):\n    if i % 9 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 542,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0",
      "72.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "def count_interior_diagonals(n):\n    count = 0\n    for k in range(1, n):\n        count += 2 * (n - k)\n    return count\n\ndef count_interior_diagonals_2(n):\n    count = 0\n    for k in range(1, n):\n        count += 2 * (n - k)\n    return count\n\nprint(count_interior_diagonals(9))\nprint(count_interior_diagonals_2(9))"
  },
  {
    "example_id": 543,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "print(17/40*160)"
  },
  {
    "example_id": 544,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Number of ice cream cones\ncones = math.floor(0.75/0.125)\nprint(cones)"
  },
  {
    "example_id": 545,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1200.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "b = 1200\nprint(b)"
  },
  {
    "example_id": 546,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "109.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "n = 109\nfactors = []\nfor i in range(2, n+1):\n    while n % i == 0:\n        n = n // i\n        factors.append(i)\nprint(factors)"
  },
  {
    "example_id": 547,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "least_number_of_days = min(9, 12, 15)\nprint(least_number_of_days)"
  },
  {
    "example_id": 548,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# GCF\ndef gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# Check if 100 and 99 have the same gcf\nprint(gcf(100, 99))"
  },
  {
    "example_id": 549,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "# Create a dictionary of the table data\ndata = {\n    \"7 days\": 0.4,\n    \"5-6 days\": 0.3,\n    \"1-4 days\": 0.2,\n    \"0 days\": 0.1\n}\n\n# Calculate the total number of households that eat dinner together at least once a week\ntotal = sum(data.values())\n\n# Calculate the number of households that eat dinner together at least once a week\nat_least_once = sum(data.values())\n\n# Print the percentage\nprint(f\"{at_least_once / total:.2%}\")"
  },
  {
    "example_id": 550,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "113.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "angle_B = 39\nangle_QBP = 14\nangle_A = 180 - (angle_B + angle_QBP)\nangle_BPC = angle_A - angle_QBP\nprint(angle_BPC)"
  },
  {
    "example_id": 551,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def arrange_books(n):\n    return n * (n - 1) * (n - 2) * (n - 3)\n\nprint(arrange_books(4))"
  },
  {
    "example_id": 552,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Define the symbols\na, b, c, d, e, f, g, h = symbols('a b c d e f g h')\n\n# Define the equation\neq = (a + b + c + d + e + f + g + h)/8 - 6\n\n# Solve the equation\nsol = solve(eq, [a, b, c, d, e, f, g, h])\n\n# Print the solution\nprint(sol)"
  },
  {
    "example_id": 553,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Initialize variables\nn = 2*3*4*5 + 1\n\n# Initialize a list to store the possible values\npossible_values = []\n\n# Loop through all the possible combinations of parentheses\nfor combination in itertools.combinations(range(len(str(n))), 4):\n    # Get the parentheses\n    parentheses = \"(\" + \"\".join(str(n)[i] for i in combination) + \")\"\n    # Substitute the parentheses into the expression\n    expression = \"\".join(str(n)[:i] + parentheses + str(n)[i+4:])\n    # Evaluate the expression\n    value = eval(expression)\n    # Add the value to the list\n    possible_values.append(value)\n\n# Count the number of unique values\nunique_values = set(possible_values)\n\n# Print the result\nprint(len(unique_values))"
  },
  {
    "example_id": 554,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "140.0",
      "120.0",
      "14400.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "# Define variables\na = 10\nb = 10\nc = 120\n\n# Calculate perimeter\nperimeter = a + b + c\nprint(f\"Perimeter: {perimeter}\")\n\n# Calculate diagonal\ndiagonal = math.sqrt(c**2 - (b**2 - a**2)/4)\nprint(f\"Diagonal: {diagonal}\")\n\n# Calculate area\narea = c**2\nprint(f\"Area: {area}\")"
  },
  {
    "example_id": 555,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Define the variables\nx = symbols('x')\nh = symbols('h')\nu = symbols('u')\ny = symbols('y')\nz = symbols('z')\nj = symbols('j')\n\n# Define the equations\neq1 = (2/3*x) == (2*x)/3\neq2 = (1-h)/2*h == (h-1)/2*h\neq3 = -(u+u**2) == -u-u**2\neq4 = -(3+y) == -3+y\neq5 = (j/2) == (1/2)*j\neq6 = x+y+z == y+x+z\n\n# Define the counter\ncounter = 0\n\n# Check the equations\nfor i in range(1, 7):\n    if solve(eq1, x) == solve(eq2, h):\n        counter += 1\n    if solve(eq3, u) == solve(eq4, y):\n        counter += 1\n    if solve(eq5, j) == solve(eq6, z):\n        counter += 1\n\n# Print the answer\nprint(counter)"
  },
  {
    "example_id": 556,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2240.0"
    ],
    "annotated_answers": [
      "680.0"
    ],
    "solution": "total_eyes = 3 * 3 * 160 + 5 * 160\nprint(f\"{total_eyes:.0f}\")"
  },
  {
    "example_id": 557,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "perimeter = 4 * 72\nprint(perimeter)"
  },
  {
    "example_id": 558,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def least(lst):\n    return min(lst)\n\ndef greatest(lst):\n    return max(lst)\n\ndef positive_difference(lst):\n    return (greatest(lst) - least(lst))\n\nlst = [3/7, 4/3, 11/8, 6/16]\nprint(positive_difference(lst))"
  },
  {
    "example_id": 559,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "4.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "x = symbols('x')\ny = solve(7 - 4*x, x)\nprint(y)\n\n\n# solve the equation\ny = solve(7 - 4*x, x)\nprint(y)\n\n\n# print the solution\nprint(y)"
  },
  {
    "example_id": 560,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "num_tests = (98 - 91) / (98 - 91) + 1\nprint(num_tests)"
  },
  {
    "example_id": 561,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "100.0",
      "20.0",
      "50.0",
      "40.0",
      "25.0",
      "50.0",
      "20.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "product = 1000\nfor i in range(1, 100):\n    if product % i == 0 and i % 10 == 0:\n        print(i, product // i)"
  },
  {
    "example_id": 562,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\n\n# Calculate number of possible values of x\nnum_possible_x = 0\nfor x in range(2, 6):\n    for y in range(5, 6):\n        num_possible_x += 1\n\nprint(num_possible_x)"
  },
  {
    "example_id": 563,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# find the area of piece \"e\"\ne_area = 4 - 0.5\nprint(f\"{e_area:.2f}\")"
  },
  {
    "example_id": 564,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print((5*4)/2)"
  },
  {
    "example_id": 565,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.53981633974483"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "import math\n\ndef area(radius):\n    return math.pi * radius ** 2\n\nprint(area(5))"
  },
  {
    "example_id": 566,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "142.0",
      "10.0",
      "23.0",
      "142.0",
      "10.0",
      "23.0",
      "10.0",
      "23.0",
      "142.0",
      "10.0",
      "23.0",
      "142.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "# Define variables\nx = symbols('x')\ny = symbols('y')\n\n# Define equations\neq1 = (x - 112)**2 + (y - 172)**2 - 80**2\neq2 = (x - 172)**2 + (y - 112)**2 - 80**2\n\n# Solve equations\nsol = solve((eq1, eq2), (x, y))\n\n# Print solution\nprint(sol)"
  },
  {
    "example_id": 567,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 55/5 - 3\nprint(x)"
  },
  {
    "example_id": 568,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "time = 2 * 300\nprint(f\"{time:.2f}\")"
  },
  {
    "example_id": 569,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "19.0",
      "4.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x, y, z = symbols('x y z')\n\na, b = 7, 2\nc, d = x, 10\n\nans = (a + b + c + d) / 4\n\nprint(f\"The value of x is: {ans}\")"
  },
  {
    "example_id": 570,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "37.5"
    ],
    "annotated_answers": [
      "37.5"
    ],
    "solution": "# Define a function to calculate the cost of the sweatshirt\ndef sweatshirt_cost(total_cost):\n    t_shirt_cost = 15.22\n    total_t_shirt_cost = 2 * t_shirt_cost\n    sweatshirt_cost = total_cost - total_t_shirt_cost\n    return sweatshirt_cost\n\n# Call the function and print the result\nprint(f\"The sweatshirt cost: {sweatshirt_cost(67.94):.2f}\")"
  },
  {
    "example_id": 571,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "40.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "# Measure of angle 1\nangle1 = 50\n\n# Measure of angle 2\nangle2 = 90 - angle1\n\nprint(f\"Angle 2: {angle2}\")"
  },
  {
    "example_id": 572,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "480.0"
    ],
    "solution": "# Calculate area of side panel\narea = 3 * 8 * 10\nprint(f\"The area of the side panel is {area:.0f} square inches.\")"
  },
  {
    "example_id": 573,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "mary_age = 30 * 3 / 5\nprint(mary_age)"
  },
  {
    "example_id": 574,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "def count_shows(n_models, n_outfits):\n    outfits = range(1, n_outfits + 1)\n    models = range(1, n_models + 1)\n    all_shows = itertools.product(models, outfits)\n    unique_shows = []\n    for show in all_shows:\n        if show not in unique_shows:\n            unique_shows.append(show)\n    return len(unique_shows)\n\nn_models = 5\nn_outfits = 5\nprint(f\"{count_shows(n_models, n_outfits):.0f}\")"
  },
  {
    "example_id": 575,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8250755.0",
      "8250755.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def count_integers(digits):\n    count = 0\n    for i in range(10**(len(digits)-1), 10**len(digits)):\n        for j in range(10**(len(digits)-1), 10**len(digits)):\n            if len(set(str(i*j))) == len(digits):\n                count += 1\n    return count\n\ndef count_integers_with_repeats(digits):\n    count = 0\n    for i in range(10**(len(digits)-1), 10**len(digits)):\n        for j in range(10**(len(digits)-1), 10**len(digits)):\n            if len(set(str(i*j))) == len(digits):\n                count += 1\n    return count\n\ndigits = [2, 4, 6, 7]\nprint(f\"{count_integers(digits)}\")\nprint(f\"{count_integers_with_repeats(digits)}\")"
  },
  {
    "example_id": 576,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "# list comprehension\ndef count(n):\n    return len([x for x in range(1, n+1) if is_prime(x)])\n\n# print result\nprint(count(100))"
  },
  {
    "example_id": 577,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# Define the letters\nA = symbols('A')\nB = symbols('B')\nC = symbols('C')\n\n# Define the code words\ncode_words = [A*A, A*B, B*B, B*A]\n\n# Define the possible combinations of letters\ncombinations = [A, B, C]\n\n# Define the number of letters\nn = 3\n\n# Define the number of possible combinations of letters\nm = len(combinations)\n\n# Initialize the counter\ncounter = 0\n\n# Iterate over all possible combinations\nfor i in itertools.combinations(combinations, n):\n    # Define the current combination\n    current = i\n\n    # Check if the current combination is a code word\n    if current in code_words:\n        # Increment the counter\n        counter += 1\n\n# Print the result\nprint(f\"{counter}\")"
  },
  {
    "example_id": 578,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Find the sum\nsum = 0\nfor i in range(6):\n    sum += i + 1\n\n# Subtract the mean from the median\nmedian = sum / 2\nmean = sum / 6\nprint(f\"{median - mean:.2f}\")"
  },
  {
    "example_id": 579,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\neq = 3*x + 2 + 3*(1+x) - 23\nprint(solve(eq, x)[0])"
  },
  {
    "example_id": 580,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "s = (0, -20)\nq = (0, 0)\np = (12, 0)\nr = (0, -5)\n\nperimeter = math.sqrt((p[0] - q[0])**2 + (p[1] - q[1])**2) + math.sqrt((p[0] - r[0])**2 + (p[1] - r[1])**2) + math.sqrt((q[0] - r[0])**2 + (q[1] - r[1])**2)\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 581,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0",
      "74.66666666666667"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define the conversion factor between Trinkets and Blinkets\ntrinket_to_blinket = 4\n\n# Define the conversion factor between Blinkets and Drinkets\nblinket_to_drinket = 3\n\n# Define the number of Drinkets in 56 Drinkets\ndrinket_56 = 56\n\n# Convert 56 Drinkets to Trinkets\ntrinket_56 = drinket_56 / blinket_to_drinket\n\n# Convert 56 Trinkets to Blinkets\nblinket_56 = trinket_56 * trinket_to_blinket\n\n# Print the result\nprint(f\"56 Drinkets is equal to {blinket_56} Blinkets\")"
  },
  {
    "example_id": 582,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "angle_m = 180 - 10\nprint(angle_m)"
  },
  {
    "example_id": 583,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0",
      "20.0",
      "20.0",
      "20.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "daps_in_baps = 4\nbaps_in_daps = 5\n\ndaps_in_baps_answer = daps_in_baps * baps_in_daps\nprint(daps_in_baps_answer)\n\nbaps_in_daps_answer = baps_in_daps * daps_in_baps\nprint(baps_in_daps_answer)\n\ndaps_in_baps_answer = daps_in_baps * baps_in_daps\nprint(daps_in_baps_answer)\n\ndaps_in_baps_answer = daps_in_baps * baps_in_daps\nprint(daps_in_baps_answer)"
  },
  {
    "example_id": 584,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = (29-5)/3\nprint(x)"
  },
  {
    "example_id": 585,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "-3969.0"
    ],
    "solution": "n = symbols('n')\n\n# find factors of 63\nfactors = factorint(63)\n\n# find prime factors\nprime_factors = [p for p in prime_factors(63)]\n\n# find both possible numbers that Marie and Jay are thinking of\nnums = list(itertools.product(prime_factors, [-1, 1]))\n\n# find the number that each of them is thinking of\nthinking_of = [n[0] * n[1] for n in nums]\n\n# find the product of the two numbers\nproduct = 1\nfor i in range(len(thinking_of)):\n    if thinking_of[i] in factors:\n        product *= thinking_of[i]\n\nprint(product)"
  },
  {
    "example_id": 586,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.57"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "# Angle PQR\nangle = math.degrees(math.atan2(10, 20))\nprint(f\"{angle:.2f}\")"
  },
  {
    "example_id": 587,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "164.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "g = 8\na = 184\nh = 10\nl = g - h\narea = a + (l * h)\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 588,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "def compute(x):\n    return (3 ** x) - (5 * 8)\n\nprint(compute(4))"
  },
  {
    "example_id": 589,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "710.0",
      "2.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1000.0",
      "27.0",
      "-245.0",
      "2.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "n = 700\np = 0.9\nx = symbols('x')\ny = symbols('y')\nz = symbols('z')\n\n# 1.\nx = solve(x**3 + 10*x**2 + 35*x + 35, x)\nx = x[0]\n\n# 2.\ny = solve(x**3 + 10*x**2 + 35*x + 35, x)\ny = y[0]\n\n# 3.\nz = solve(x**3 + 10*x**2 + 35*x + 35, x)\nz = z[0]\n\n# 4.\nresult = n - (x + y + z)\nprint(result)"
  },
  {
    "example_id": 590,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.36507936507936506"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "sum = (2/9) + (1/7)\nprint(sum)"
  },
  {
    "example_id": 591,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Dawn has 1.20 in nickels, dimes and quarters.\n# For each nickel she has one dime and for each dime she has one quarter.\n# How many total coins does she have?\n\n# Initialize variables\ncoins = 0\n\n# Convert 1.20 to a list of coins\ncoin_list = [0.05, 0.10, 0.25]\n\n# Sum the values of the list\ncoins = sum(coin_list)\n\n# Print the total number of coins\nprint(coins)"
  },
  {
    "example_id": 592,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(6*8)"
  },
  {
    "example_id": 593,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69.49"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "n = symbols('n')\n\nexpr = (2 * n) - 13.7\n\nsol = solve(expr > 125.28)\n\nprint(sol)"
  },
  {
    "example_id": 594,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6290000.0"
    ],
    "annotated_answers": [
      "6290000.0"
    ],
    "solution": "def round_to_nearest_ten_thousand(n):\n    return int(n + 9999) // 10000 * 10000\n\nprint(round_to_nearest_ten_thousand(6287215))"
  },
  {
    "example_id": 595,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "def count(n):\n    count = 0\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count + 1\n\nn = 80.5\nprint(count(n))"
  },
  {
    "example_id": 596,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.4"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "dresses = 72 / 5\nprint(dresses)"
  },
  {
    "example_id": 597,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# John's first spin\nn = 20\n\n# List of positive factors\nfactors = [i for i in range(1, n + 1) if i * i <= n and i % 2!= 0]\n\n# Create a new spinner\nspinner = itertools.cycle(factors)\n\n# Maximum number of spins\nmax_spins = 0\n\n# John's first spin\nspin = spinner.__next__()\n\nwhile spin!= 1:\n    max_spins += 1\n    spin = spinner.__next__()\n\nprint(max_spins)"
  },
  {
    "example_id": 598,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "speed = 15/2.5\nprint(speed)"
  },
  {
    "example_id": 599,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcf(180, 450))"
  },
  {
    "example_id": 600,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "1093.0"
    ],
    "solution": "def find_median(data):\n    # Sort data\n    data.sort()\n    # Find median\n    median = data[len(data) // 2]\n    return median\n\n\ndef find_mode(data):\n    # Create a dictionary\n    counts = {}\n    # Loop through data\n    for item in data:\n        # If item is in counts\n        if item in counts:\n            # Increment count\n            counts[item] += 1\n        # Else\n        else:\n            # Set count to 1\n            counts[item] = 1\n    # Find mode\n    mode = max(counts, key=counts.get)\n    return mode\n\n\ndef sum_median_mode(data):\n    # Find median\n    median = find_median(data)\n    # Find mode\n    mode = find_mode(data)\n    # Return sum\n    return median + mode\n\n\n# Test sum_median_mode\nprint(sum_median_mode([51, 52, 53, 54, 55, 56, 57]))"
  },
  {
    "example_id": 601,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(4/4/9)"
  },
  {
    "example_id": 602,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "for n in itertools.count(2):\n    if all(n % i!= 0 for i in range(2, 21)):\n        print(n)\n        break"
  },
  {
    "example_id": 603,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "sum = 26 + 52\nprint(round(sum, -1))"
  },
  {
    "example_id": 604,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print((1+1)**2)"
  },
  {
    "example_id": 605,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "# Calculate the measure of the acute angles\nalpha = 90\nbeta = 60\n\n# Calculate the measure of the other interior angles\ngamma = alpha + beta\n\n# Calculate the common measure of the large angles\nlarge_angle = gamma\n\n# Print the common measure of the large angles\nprint(f\"The common measure of the large angles is {large_angle} degrees\")"
  },
  {
    "example_id": 606,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Number of right-handed boys\nn_right_handed_boys = 4 * 4 * 36 / 2\n\n# Number of left-handed boys\nn_left_handed_boys = 36 - n_right_handed_boys\n\n# Number of left-handed girls\nn_left_handed_girls = n_left_handed_boys / 2\n\n# Number of right-handed girls\nn_right_handed_girls = n_right_handed_boys - n_left_handed_girls\n\n# Number of girls\nn_girls = n_left_handed_girls + n_right_handed_girls\n\n# Number of boys\nn_boys = 36 - n_girls\n\nprint(f\"{n_right_handed_boys} right-handed boys\")"
  },
  {
    "example_id": 607,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "h = 85\ns = 106 + 109\n\nprint(s - h)"
  },
  {
    "example_id": 608,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_cube(x):\n    return x ** 3 == x\n\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef count(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n\n\ndef mode(arr):\n    return max(set(arr), key=arr.count)\n\n\ndef median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0:\n        return (arr[len(arr) // 2] + arr[len(arr) // 2 - 1]) / 2\n    else:\n        return arr[len(arr) // 2]\n\n\ndef average(arr):\n    return sum(arr) / len(arr)\n\n\ndef main():\n    arr = [2, 4, 6, 8, 10]\n    print(f\"The mode is {mode(arr)}\")\n    print(f\"The median is {median(arr)}\")\n    print(f\"The average is {average(arr)}\")\n\n\nmain()"
  },
  {
    "example_id": 609,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "height = 7.5 - 5.5\nprint(height)"
  },
  {
    "example_id": 610,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-5.0",
      "-30.0",
      "-24.0",
      "-30.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# Compute: 6/6 - 6 + 6*6\n\n# 1. Divide 6 by 6\nresult = 6 / 6\nprint(f\"{result:.2f}\")\n\n# 2. Subtract 6\nresult = result - 6\nprint(f\"{result:.2f}\")\n\n# 3. Multiply 6 by 6\nresult = result * 6\nprint(f\"{result:.2f}\")\n\n# 4. Add 6\nresult = result + 6\nprint(f\"{result:.2f}\")\n\n# 5. Subtract 6\nresult = result - 6\nprint(f\"{result:.2f}\")"
  },
  {
    "example_id": 611,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "length = max(48, 72, 40)\nprint(length)"
  },
  {
    "example_id": 612,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.625000000000001"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "# define variables\ns = 4*math.sqrt(2)\nh = 3*math.sqrt(2)\n\n# solve for base\nbase = (s**2 - h**2) / (2*s)\n\n# print area\nprint(base*h/2)"
  },
  {
    "example_id": 613,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 735\nd = [1, 3, 7, 9, 229, 735]\n\ndef distinct_prime_factors(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n //= i\n    if n > 1:\n        factors.append(n)\n    return sum(factors)\n\nprint(distinct_prime_factors(n))"
  },
  {
    "example_id": 614,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "result = (123/321) * (456/654) * (789/987) / (123/321) / (456/654) / (789/987)\nprint(result)"
  },
  {
    "example_id": 615,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define the sides of the square\nside_length = 5\n\n# Calculate the area of the square\nsquare_area = side_length**2\n\n# Calculate the ratio of the area of the square to the area of the rectangle\nratio = (side_length + 0.4*side_length)**2 / square_area\n\n# Print the result\nprint(f\"The square's area decreases by {ratio - 1:.2%}\")"
  },
  {
    "example_id": 616,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(x):\n    return x ** 3 == abs(x)\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef count(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef problem_10():\n    # Define variables\n    s = symbols('s')\n    # Define equations\n    eq1 = s ** 3 - 3 * s ** 2 + 2 * s - 12\n    eq2 = s ** 3 - 3 * s ** 2 + s - 12\n    eq3 = s ** 3 - 3 * s ** 2 - s + 12\n    # Solve equations\n    solutions = solve((eq1, eq2, eq3), s)\n    # Print solutions\n    print(solutions)\n    # Print number of primes less than n\n    print(count(100))\n\nproblem_10()"
  },
  {
    "example_id": 617,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "x = symbols('x')\n\n# solve for x\nsolve(x**3 - 2*x**2 - 5*x - 6, x)\n\n# \nfor i in range(1, 50):\n    if i!= 41:\n        print(i)"
  },
  {
    "example_id": 618,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# \n\n# Define the function\ndef is_prime(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define the function\ndef is_cube(x):\n    return pow(x, 3) == x\n\n# Define the function\ndef gcd(a, b):\n    while b!= 0:\n        t = b\n        b = a % b\n        a = t\n    return a\n\n# Define the function\ndef count(n):\n    return int(math.sqrt(2 * n))\n\n# Define the function\ndef solution(n):\n    for i in range(1, count(n)):\n        if is_prime(i) and is_cube(i):\n            g = gcd(i, n)\n            if g == 1:\n                return i\n\n# Call the function\nprint(solution(144))"
  },
  {
    "example_id": 619,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# \ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# \ndef is_cube(x):\n    return x**3 == x\n\n# \ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# \ndef count(n):\n    count = 0\n    for x in range(1, 10):\n        for y in range(1, 10):\n            for z in range(1, 10):\n                if x!= y and x!= z and y!= z:\n                    if is_prime(int(str(x) + str(y) + str(z))):\n                        count += 1\n    return count\n\n# \ndef solution(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if i!= j and i!= k and j!= k:\n                    if is_prime(int(str(i) + str(j) + str(k))):\n                        count += 1\n    return count\n\n# \ndef main():\n    n = 4\n    print(f\"The number of prime numbers that can be created using {n} digits is {solution(n)}\")\n\n# \nif __name__ == \"__main__\":\n    main()\n\n#"
  },
  {
    "example_id": 620,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(5625**0.5)"
  },
  {
    "example_id": 621,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.944444444444445"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 1070 / 180\nprint(n)"
  },
  {
    "example_id": 622,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "9604.0"
    ],
    "solution": "import itertools\n\ncount = 0\nfor i in itertools.combinations_with_replacement(range(1, 7), 5):\n    if sum(i) % 2 == 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 623,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "perimeter = 6 * 21\nprint(perimeter)"
  },
  {
    "example_id": 624,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "9.0",
      "4.0",
      "5.0",
      "2.0",
      "4.0",
      "5.0",
      "9.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# define the variables\nx, y = symbols('x y')\n\n# define the equation\neq = (y - x**2)**2 - 16*x**2*y\n\n# solve the equation\nsol = solve(eq, y)\n\n# print the result\nprint(sol)"
  },
  {
    "example_id": 625,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6105.0"
    ],
    "annotated_answers": [
      "957.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 111):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 626,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11200.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "miles_per_day = 2800/2*8\nprint(miles_per_day)"
  },
  {
    "example_id": 627,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\nf = 5 * x + 10\ng = 10 * x + 5\nprint(solve([f - g], x))"
  },
  {
    "example_id": 628,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1188.0"
    ],
    "annotated_answers": [
      "1188.0"
    ],
    "solution": "area = (12 * 9) * 11\nprint(area)"
  },
  {
    "example_id": 629,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "# Define variables\na = 9\nb = 10\n\n# Solve for c\nc = a + b\n\n# Print the perimeter\nprint(c)"
  },
  {
    "example_id": 630,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.118033988749895"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "# Solve for y in the diagram\ny = math.sqrt(5)/2\nprint(y)"
  },
  {
    "example_id": 631,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Calculate 0^5 + (-1)^4\nprint(0**5 + (-1)**4)"
  },
  {
    "example_id": 632,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# 3^(-4) * 3^(-8) * 3^(14)\ndef power_iter(base, exponent):\n    result = 1\n    for e in exponent:\n        result *= base**e\n    return result\n\nprint(power_iter(3, [-4, -8, 14]))"
  },
  {
    "example_id": 633,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "6.0",
      "3.0",
      "9.0",
      "2.0",
      "6.0",
      "5.0",
      "4.0",
      "6.0",
      "3.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# x = symbols(\"x\")\nx = symbols(\"x\")\n\n# f = (x^4 + 6x^3 + 9x^2 + 6x + 5)\nf = (x**4 + 6*x**3 + 9*x**2 + 6*x + 5)\n\n# print(f.expand())\nprint(f.expand())\n\n# print(f.expand().factor())\nprint(f.expand().factor())\n\n# print(f.expand().factor().simplify())\nprint(f.expand().factor().simplify())\n\n# print(f.expand().factor().simplify().subs(x, 5/2))\nprint(f.expand().factor().simplify().subs(x, 5/2))\n\n# print(f.expand().factor().simplify().subs(x, 5/2))\nprint(f.expand().factor().simplify().subs(x, 5/2))\n\n# print(f.expand().factor().simplify().subs(x, 5/2))\nprint(f.expand().factor().simplify().subs(x, 5/2))\n\n# print(f.expand().factor().simplify().subs(x, 5/2))\nprint(f.expand().factor().simplify().subs(x, 5/2))"
  },
  {
    "example_id": 634,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "a = 4\nb = 3\nc = 5\nperimeter = 17\n\n# find side a\nside_a = perimeter - b - c\n\n# find side b\nside_b = perimeter - a - c\n\n# find side c\nside_c = perimeter - a - b\n\n# find the area of each triangle\narea_a = (a * b) / 2\narea_b = (b * c) / 2\narea_c = (c * a) / 2\n\n# find the area of the entire figure\narea = area_a + area_b + area_c\n\n# find the perimeter of the entire figure\nperimeter_total = a + b + c\n\n# find the perimeter of the remaining three sides of each of the squares\nperimeter_squares = side_a + side_b + side_c\n\nprint(f\"The perimeter of the remaining three sides of each of the squares is {perimeter_squares:.2f}\")"
  },
  {
    "example_id": 635,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "n = 3\ntotal_handshakes = n * (n - 1) * (n - 2) * 2\nprint(total_handshakes)"
  }
]