[
  {
    "example_id": 0,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "print(math.sqrt(64**3))"
  },
  {
    "example_id": 1,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "1.25"
    ],
    "solution": "distance = math.sqrt((0.5 + 0.5)**2 + (0.75)**2)\nprint(distance)"
  },
  {
    "example_id": 2,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "cookie_cost = 3 * 1 + 20 * 2 + 35\nprint(f\"{cookie_cost:.2f}\")"
  },
  {
    "example_id": 3,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "1584.0"
    ],
    "solution": "import itertools\nfor i in itertools.permutations(range(1, 13), 3):\n    if i[0] == i[1]:\n        continue\n    print(i)"
  },
  {
    "example_id": 4,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10886290.0"
    ],
    "annotated_answers": [
      "330.0"
    ],
    "solution": "# Create a list of all possible combinations of passing\n# from each player to the other players\n\n# 11 players\nplayers = range(1, 12)\n\n# Calculate the total number of passes required\ntotal_passes = 3 * math.factorial(10)\n\n# Calculate the number of passes per player\npasses_per_player = math.factorial(10) / math.factorial(9)\n\n# Calculate the number of passes required for each player\npasses_required = passes_per_player * len(players)\n\n# Print the solution\nprint(f\"{total_passes - passes_required:.0f}\")"
  },
  {
    "example_id": 5,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.745056497175141"
    ],
    "annotated_answers": [
      "3.7"
    ],
    "solution": "x, y = 37/12, 260/59\nprint((x+y)/2)"
  },
  {
    "example_id": 6,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pencils = 13\npencil_boxes = 9\npen_boxes = 3\n\npencil_and_pen_boxes = pencils + pen_boxes - 3\nprint(f\"{pencil_and_pen_boxes}\")"
  },
  {
    "example_id": 7,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "area = (18/4)**2\nprint(f\"{area:.0f}\")"
  },
  {
    "example_id": 8,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "print(math.sqrt(15*35*21))"
  },
  {
    "example_id": 9,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "print(99*(math.floor(0/99)))"
  },
  {
    "example_id": 10,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# define a function to calculate divisors\ndef divisors(n):\n    return [i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0]\n\n\n# calculate the number of divisors\ndef count_divisors(n):\n    return len(divisors(n))\n\n\n# list of numbers with odd number of divisors\ndef odd_divisors(n):\n    return [i for i in range(2, n) if count_divisors(i) % 2 == 1]\n\n\nprint(len(odd_divisors(103)))"
  },
  {
    "example_id": 11,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1518.0"
    ],
    "annotated_answers": [
      "1518.0"
    ],
    "solution": "smallest_primes = [2, 3, 5, 7]\nsmallest_composites = [4, 6, 8, 9]\n\nproduct_of_smallest_primes = 1\nproduct_of_smallest_composites = 1\n\nfor prime in smallest_primes:\n    product_of_smallest_primes *= prime\n\nfor composite in smallest_composites:\n    product_of_smallest_composites *= composite\n\nprint(product_of_smallest_primes - product_of_smallest_composites)"
  },
  {
    "example_id": 12,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6912.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "lcm = 72*96\nprint(lcm)"
  },
  {
    "example_id": 13,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "x = 107*109**5\nx11 = x**11\n\n# Find the exponent of 109\nexponent = int(math.log(x11, 109))\nprint(exponent)"
  },
  {
    "example_id": 14,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(f\"{math.fabs(1/(-6) * 6 * 7 + 8 * 2 / 8 * (7 - 1)):.2f}\")"
  },
  {
    "example_id": 15,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "218.81"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print(round(14.7923412**2, 2))"
  },
  {
    "example_id": 16,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for i in range(10, 50):\n    if i % i % 10 == 0:\n        print(i)"
  },
  {
    "example_id": 17,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "20.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# define variables\nx = 10\ny = 4\n\n# calculate\nmy_age = x - y\nbrother_age = 2 * (my_age + y)\n\n# print\nprint(f\"My age is {my_age}\")\nprint(f\"My brother's age is {brother_age}\")"
  },
  {
    "example_id": 18,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "777.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "# Find the largest multiple of 37 which is less than 800\nfor i in range(799, 37, -1):\n    if i % 37 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 19,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print(f\"{math.sqrt(2.5**2 - 0.7**2) / (2.7 - 2.5):.2f}\")"
  },
  {
    "example_id": 20,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = sum([13, 14, 22, 52, 63, 74])\na = round(a, -1)\nb = sum([round(13, -1), round(14, -1), round(22, -1), round(52, -1), round(63, -1), round(74, -1)])\nprint(a-b)"
  },
  {
    "example_id": 21,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "multiples_of_3 = 0\nmultiples_of_6 = 0\n\nfor i in range(1, 20):\n    if i % 3 == 0:\n        multiples_of_3 += 1\n    if i % 6 == 0:\n        multiples_of_6 += 1\n\nprint(multiples_of_6 - multiples_of_3)"
  },
  {
    "example_id": 22,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3\nwhile x < 3+4:\n    print(x)\n    x += 1"
  },
  {
    "example_id": 23,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.2"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "area = 2*(1.6)\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 24,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5400.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "# create variables\nx = 360\ny = 450\nz = 540\n\n# create equation\nlcm = math.lcm(x, y, z)\n\n# solve for least common multiple\nprint(lcm)"
  },
  {
    "example_id": 25,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "average = (84 * 25 + 66 * 20) / (25 + 20)\nprint(average)"
  },
  {
    "example_id": 26,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-11.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def team_score(scores):\n    return scores[0] * scores[1] - scores[2]\n\nscores = [5, -2, 3]\nmax_score = max(team_score(scores), team_score(scores[::-1]))\nprint(max_score)"
  },
  {
    "example_id": 27,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# Calculate the number of whole number divisors of 11\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Calculate the number of whole number divisors of 20\ndef count_divisors_2(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Calculate the product of the number of whole number divisors of 11 and 20\nprint(count_divisors(11) * count_divisors_2(20))"
  },
  {
    "example_id": 28,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "0.5",
      "1.0",
      "1.5",
      "0.3333333333333333",
      "0.6666666666666666",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "values = [4/4, 8/4, 12/4, 4/8, 8/8, 12/8, 4/12, 8/12, 12/12]\nprint(values)"
  },
  {
    "example_id": 29,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 3\nprint(a)"
  },
  {
    "example_id": 30,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "n = 93 - 36 + 1\nprint(n)"
  },
  {
    "example_id": 31,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3599.75"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "size = 60\nside = math.sqrt(size**2 - (1/2)**2)\narea = side**2\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 32,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "564.0"
    ],
    "annotated_answers": [
      "564.0"
    ],
    "solution": "print(round(563.5097))"
  },
  {
    "example_id": 33,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1061.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "# Define a function to check if a number is a prime number\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define a function to check if a number is a four-digit number\ndef is_four_digit(n):\n    if len(str(n)) == 4:\n        return True\n    return False\n\n# Find the number of prime numbers\ncount = 0\nfor i in range(1000, 10000):\n    if is_prime(i) and is_four_digit(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 34,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "y = 6\nprint(y**3)"
  },
  {
    "example_id": 35,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.58"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "cd = math.sqrt((6-1)/2)\nprint(f\"{cd:.2f}\")"
  },
  {
    "example_id": 36,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Calculate the area of the triangle\narea = (5*3)/2\n\n# Print the area of the triangle\nprint(f\"The area of the triangle is {area:.2f}\")"
  },
  {
    "example_id": 37,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 6\nprint(math.sqrt(x**2) - 3)"
  },
  {
    "example_id": 38,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0",
      "200.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def area(base, height):\n    return (base * height) / 2\n\nprint(area(8, 5))\nprint(area(20, 20))"
  },
  {
    "example_id": 39,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.67"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = -8/3\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 40,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "3380.0"
    ],
    "solution": "import string\n\nvowels = ['A', 'E', 'I', 'O', 'U']\n\ntotal = 0\nfor v in vowels:\n    for i in range(1, 26):\n        total += 1\n\nprint(total)"
  },
  {
    "example_id": 41,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "5.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Define possible rolls\nrolls = list(range(1,21))\n\n# Define factors\nfactors = []\n\n# Loop through possible rolls\nfor i in rolls:\n    # Loop through factors\n    for j in rolls:\n        # Check if factors\n        if i % j == 0:\n            factors.append(j)\n\n# Print possible rolls\nprint(factors)"
  },
  {
    "example_id": 42,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "common = 28 + 21 - 6\nprint(common)"
  },
  {
    "example_id": 43,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def is_divisible_by_4(n):\n    return n % 4 == 0\n\ndef has_2_in_units_place(n):\n    n = str(n)\n    return n[-1] == '2'\n\ndef count_numbers(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_divisible_by_4(i) and has_2_in_units_place(i):\n            count += 1\n    return count\n\nprint(count_numbers(200))"
  },
  {
    "example_id": 44,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "82.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "N = 500 - 90 + 7 - 400 + 60 + 5\nprint(N)"
  },
  {
    "example_id": 45,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "count = 0\nfor i in range(10, 100):\n    if i % 10 + i // 10 == 7:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 46,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "def count_black_squares(m):\n    count = 0\n    for i in range(m):\n        for j in range(m):\n            if i == j == 2:\n                count += 1\n    return count\n\nprint(count_black_squares(5))"
  },
  {
    "example_id": 47,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(6+5-(4*3/(2+1)))"
  },
  {
    "example_id": 48,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "result = math.pow(math.pow(math.pow(math.pow(-345, 4), 2), 0), -2) ** -4\nprint(result)"
  },
  {
    "example_id": 49,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "5.0",
      "7.0",
      "9.0",
      "11.0",
      "13.0",
      "15.0",
      "17.0",
      "19.0"
    ],
    "annotated_answers": [
      "4007.0"
    ],
    "solution": "n = 2004\nfor i in range(1, n, 2):\n    print(i)"
  },
  {
    "example_id": 50,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\n# A perfect square is a number that is the square of an integer.\n# For example, 9 is a perfect square because it can be expressed as 3^2.\n# A positive perfect square is a perfect square greater than 0.\n# For example, 4 is a positive perfect square because it can be expressed as 2^2.\n# A distinct perfect square is a perfect square that is not the same as another perfect square.\n# For example, 9 is a distinct perfect square because it is not the same as 4^2.\n\n# The least prime number which is the sum of two distinct positive perfect squares is 100.\n# To see why, consider that the sum of two distinct positive perfect squares is always an odd number.\n# Therefore, the least prime number which is the sum of two distinct positive perfect squares must be an odd number.\n# Since 100 is an odd number and is prime, it is the least prime number which is the sum of two distinct positive perfect squares.\n\nprint(100)"
  },
  {
    "example_id": 51,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "341400.0",
      "682800.0",
      "1024200.0",
      "1365600.0",
      "1707000.0",
      "2048400.0",
      "2389800.0",
      "2731200.0",
      "3072600.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "for x in range(10):\n    if 341400*x % 3 == 0:\n        print(341400*x)"
  },
  {
    "example_id": 52,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-55.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "both = 200 - 126 - 129\nprint(both)"
  },
  {
    "example_id": 53,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "-32.0",
      "35.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "print(f\"The smallest multiple of 5 greater than -32 is {5*int(math.ceil(abs(-32)/5))}\")"
  },
  {
    "example_id": 54,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "circle = '2'\nnum = '3529'\n\nif num[0] in circle:\n    print(num[0])\nelif num[1] in circle:\n    print(num[1])\nelif num[2] in circle:\n    print(num[2])\nelif num[3] in circle:\n    print(num[3])\nelse:\n    print('No digit in the circle is divisible by 4')"
  },
  {
    "example_id": 55,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "# find the area of overlap\noverlap = (8 - 8.5) * (11 - 11.5)\nprint(f\"{overlap:.0f}\")"
  },
  {
    "example_id": 56,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10090.0"
    ],
    "solution": "for i in range(1,1000):\n    if len(str(i))%2==1:\n        print(i)\n        break"
  },
  {
    "example_id": 57,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.5",
      "6.5",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "data = [4,5,6,7,8,9]\n\ndef mode(data):\n    counts = {}\n    for item in data:\n        counts[item] = counts.get(item,0) + 1\n    max_count = max(counts.values())\n    return [k for k,v in counts.items() if v == max_count]\n\ndef median(data):\n    data = sorted(data)\n    if len(data) % 2 == 0:\n        median = (data[len(data)//2] + data[len(data)//2 - 1])/2\n    else:\n        median = data[len(data)//2]\n    return median\n\ndef mean(data):\n    sum = 0\n    for i in data:\n        sum += i\n    return sum/len(data)\n\nprint(mean(data))\nprint(median(data))\nprint(mode(data))"
  },
  {
    "example_id": 58,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9800.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "lcm = 14 * 20 * 35\nprint(lcm)"
  },
  {
    "example_id": 59,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_cube(n):\n    return n ** 3 == int(n ** 3)\n\nfor i in range(10, 100):\n    if is_prime(i) and is_cube(i) and is_cube(i + 1) and is_cube(i + 2):\n        print(i)\n        break"
  },
  {
    "example_id": 60,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "flour = 15\ncookies = 20\nx = 144\nflour_needed = x / cookies * flour\nprint(f\"{flour_needed:.0f}\")"
  },
  {
    "example_id": 61,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2197.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def area(r):\n    return math.pi * r ** 2\n\nr1 = 12\nr2 = 13\n\n# Find the area of the ring\nring = area(r1 - r2)\n\n# Find the area of the smallest circle\nsmallest = area(r2)\n\n# Find the ratio of the area of the ring to the area of the smallest circle\nratio = ring / smallest\n\n# Find the radius of the smallest circle\nr = r2 / ratio\n\n# Print the result\nprint(f\"The radius of the smallest circle is {r:.2f}\")"
  },
  {
    "example_id": 62,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(8 - 4 / 2 - 1)"
  },
  {
    "example_id": 63,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.5"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = (5**2 - 2) / 2\nprint(x)"
  },
  {
    "example_id": 64,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "k = 0\nfor i in range(1, 100000):\n    if 0.2 < i / 27 < 0.8:\n        k += 1\nprint(k)"
  },
  {
    "example_id": 65,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0",
      "5.0",
      "65.0",
      "65.0",
      "1.0",
      "5.0",
      "65.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define the function to check if a number is divisible by a number\ndef is_divisible_by(x, y):\n    return x % y == 0\n\n# Define the function to check if a number is divisible by all numbers from 1 to 9\ndef is_divisible_by_all(x):\n    for i in range(1, 10):\n        if not is_divisible_by(x, i):\n            return False\n    return True\n\n# Define the function to return all the divisible numbers\ndef get_divisible_numbers(x):\n    return [i for i in range(1, 10) if is_divisible_by(x, i)]\n\n# Define the function to return the count of divisible numbers\ndef count_divisible_numbers(x):\n    return len(get_divisible_numbers(x))\n\n# Test the functions\nprint(f\"is_divisible_by(65, 5): {is_divisible_by(65, 5)}\")\nprint(f\"is_divisible_by_all(65): {is_divisible_by_all(65)}\")\nprint(f\"get_divisible_numbers(65): {get_divisible_numbers(65)}\")\nprint(f\"count_divisible_numbers(65): {count_divisible_numbers(65)}\")"
  },
  {
    "example_id": 66,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "memos_per_day = 600/3\nprint(memos_per_day)"
  },
  {
    "example_id": 67,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88920.0"
    ],
    "annotated_answers": [
      "247000.0"
    ],
    "solution": "purchase_price = 0.8 * 49400 + 49400\nprint(purchase_price)"
  },
  {
    "example_id": 68,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# Number of rectangles in figure\nrectangles = 4\nprint(rectangles)"
  },
  {
    "example_id": 69,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "def stack_books(n):\n    # calculate the number of ways to stack n books\n    ways = math.factorial(n) / (math.factorial(5) * math.factorial(n - 5))\n    return ways\n\n# calculate the number of ways to stack 5 books\nprint(stack_books(5))"
  },
  {
    "example_id": 70,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "1.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "636.0"
    ],
    "solution": "# Define the time\ntime = 12.05\n\n# Define the chimes\nchime1 = 15\nchime2 = 30\nchime3 = 45\nchime4 = 8\n\n# Define the chime frequency\nfrequency = [chime1, chime2, chime3, chime4]\n\n# Define the time to chime\ntime_to_chime = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n# Define the chime count\nchime_count = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Loop through the time and frequency\nfor t in time_to_chime:\n    for f in frequency:\n        if t % f == 0:\n            chime_count[t] += 1\n\n# Print the chime count\nprint(chime_count)"
  },
  {
    "example_id": 71,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.7"
    ],
    "annotated_answers": [
      "2.7"
    ],
    "solution": "print(round(2.745, 1))"
  },
  {
    "example_id": 72,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# List of multiples of 4 between 0 and 100\nx4 = [i*4 for i in range(1, 25)]\n\n# List of multiples of 6 between 0 and 100\nx6 = [i*6 for i in range(1, 20)]\n\n# Intersection of lists\nx46 = [i for i in x4 if i in x6]\n\n# Print the number of elements in the intersection\nprint(len(x46))"
  },
  {
    "example_id": 73,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(5)"
  },
  {
    "example_id": 74,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def sum_of_digits(num):\n    num_list = list(str(num))\n    sum_of_digits = sum(map(int, num_list))\n    return sum_of_digits\n\n\ndef count_integers(start, end, target):\n    count = 0\n    for i in range(start, end + 1):\n        if sum_of_digits(i) == target:\n            count += 1\n    return count\n\n\nprint(count_integers(200, 300, 15))"
  },
  {
    "example_id": 75,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "from sympy import symbols\nfrom sympy.geometry import Point, Polygon\n\na, b, c, d, e = symbols('a, b, c, d, e')\nA, B, C, D, E = Point(a, b), Point(c, d), Point(e, d), Point(b, e), Point(c, e)\npolygon = Polygon(A, B, C, D, E)\nprint(polygon.area)"
  },
  {
    "example_id": 76,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.01"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# find the value of x\nx = statistics.mean([math.degrees(math.atan(0.588)), math.degrees(math.atan(0.951))])\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 77,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def get_prime_factors(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(int(n))\n    return factors\n\ndef get_greatest_prime_factor(n):\n    factors = get_prime_factors(n)\n    return factors[-1]\n\ndef get_least_prime_factor(n):\n    factors = get_prime_factors(n)\n    return factors[0]\n\ndef get_positive_difference(a, b):\n    return abs(a - b)\n\nprint(get_positive_difference(get_greatest_prime_factor(2000), get_least_prime_factor(2000)))"
  },
  {
    "example_id": 78,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Calculate area of each circle\narea = math.pi * (4)**2\n# Calculate total area of the four circles\ntotal_area = 4 * area\n# Calculate the length of the radius\nradius = math.sqrt(total_area / math.pi)\nprint(f\"{radius:.2f}\")"
  },
  {
    "example_id": 79,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor i in range(1, 500):\n    if i % 3 == 0 and i % 4 == 0 and i % 5 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 80,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "number_of_houses = 6 * 10\nprint(number_of_houses)"
  },
  {
    "example_id": 81,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1200.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "speed = 20 * 60\nprint(f\"{speed:.2f}\")"
  },
  {
    "example_id": 82,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "234.0"
    ],
    "annotated_answers": [
      "234.0"
    ],
    "solution": "for i in range(200, 2000000000):\n    if (i % 36) == 18:\n        print(i)\n        break"
  },
  {
    "example_id": 83,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "sum = 0\nfor i in range(-3,9):\n    if i+5>=0 and i+5<=8:\n        sum += i+5\nprint(sum)"
  },
  {
    "example_id": 84,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.86"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# define variables\na = 16\nb = 2/math.sqrt(3)\nc = b**2\n\n# find the length of the longer leg of the smaller triangle\nx = math.sqrt((a**2 + c**2) - 2*a*c*math.cos(math.radians(30)))\n\n# print the answer\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 85,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "# find 17th odd integer\ndef odd_integers(n):\n    return [x for x in range(1, n * 2, 2)]\n\n\n# print 17th odd integer\nprint(odd_integers(17)[16])"
  },
  {
    "example_id": 86,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "# 5 appetizers\n# 8 entrees\n# 4 desserts\n\n# 5C1 * 8C1 * 4C1 = 5C1 * 8C2 * 4C1 = 5C1 * 8C3 * 4C1 = 5C2 * 8C1 * 4C1 = 5C3 * 8C1 * 4C1\n\nprint(5*8*4)"
  },
  {
    "example_id": 87,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "def gcf(a,b):\n    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\nprint(gcf(518,294))"
  },
  {
    "example_id": 88,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "# calculate the degrees of angles\nangle_ABD = 2 * math.degrees(math.asin(0.5))\nangle_AFD = 110 - angle_ABD\nprint(f\"{angle_AFD:.2f}\")"
  },
  {
    "example_id": 89,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(int((5*math.sqrt(3)) - (3*math.sqrt(5))))"
  },
  {
    "example_id": 90,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "mex = 7\neng = 11\nboth = 4\nall = 30\nnot_mex_eng = all - (mex + eng - both)\nprint(not_mex_eng)"
  },
  {
    "example_id": 91,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = math.sqrt(56)\nb = math.sqrt(126)\n\nprint(f\"{a * b:.2f}\")"
  },
  {
    "example_id": 92,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.5"
    ],
    "annotated_answers": [
      "84.5"
    ],
    "solution": "print(35.2 + 49.3)"
  },
  {
    "example_id": 93,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "def prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\nprint(sum_prime_factors(85085))"
  },
  {
    "example_id": 94,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "product = 1\nfor i in range(1, 11):\n    if 10 % i == 0:\n        product *= i\nprint(product)"
  },
  {
    "example_id": 95,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# large boxes = 4\n# small boxes = 3\n# smaller boxes = 2\n\n# total number of boxes = large boxes * small boxes * smaller boxes\n# = 4 * 3 * 2\n# = 24\n\nprint(f\"There are 24 boxes altogether.\")"
  },
  {
    "example_id": 96,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.15"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "factorial = math.factorial(42)\nprint(f\"{math.log10(factorial):.2f}\")"
  },
  {
    "example_id": 97,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "666000.0"
    ],
    "annotated_answers": [
      "666000.0"
    ],
    "solution": "print((3**2)*(2**4)*(37)*(5**3))"
  },
  {
    "example_id": 98,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "def is_divisible(n):\n    for i in range(1, 4):\n        if n % i!= 0:\n            return False\n    return True\n\ndef find_least_positive_integer_divisible_by_four_smallest_odd_positive_integers():\n    for i in range(1, 100):\n        if is_divisible(i):\n            return i\n    return -1\n\nprint(find_least_positive_integer_divisible_by_four_smallest_odd_positive_integers())"
  },
  {
    "example_id": 99,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.000000000000001"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 20 * (2/5) ** 2 * (3/4) ** 2 * (5/9)\nprint(x ** 5)"
  },
  {
    "example_id": 100,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "# define variables\nscore1 = 87\nscore2 = 85\nscore3 = 87\nscore4 = score3 + 3\nscore5 = 90\n\n# calculate highest score\nhighest_score = max(score1, score2, score3, score4, score5)\n\n# print result\nprint(f\"The highest score is {highest_score}\")"
  },
  {
    "example_id": 101,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "4.0",
      "5.0",
      "8.0",
      "10.0",
      "20.0",
      "40.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def factors(num):\n    for i in range(1, num + 1):\n        if num % i == 0:\n            yield i\n\nfor i in factors(120):\n    if i in factors(40):\n        print(i)"
  },
  {
    "example_id": 102,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "difference = 91 - 5 - 8\nprint(difference)"
  },
  {
    "example_id": 103,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(0**5**6431564)"
  },
  {
    "example_id": 104,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "1.125"
    ],
    "solution": "a = 0.2 + 0.6\nprint(1/a)"
  },
  {
    "example_id": 105,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "62.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "def is_remainder(n, x):\n    return n % x == 2\n\nfor n in range(3, 100):\n    if all(is_remainder(n, x) for x in range(3, 7)):\n        print(n)\n        break"
  },
  {
    "example_id": 106,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(pow(-1, 1001))"
  },
  {
    "example_id": 107,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Define a function that returns the number of days in October that Carla studied for three or more hours.\ndef number_of_days_studied(days):\n    # Define a dictionary to store the number of hours studied for each day.\n    hours_studied = {1: 1, 2: 5, 3: 8, 4: 10, 5: 3, 6: 3}\n    # Initialize a variable to store the number of days studied for three or more hours.\n    days_studied_3_or_more = 0\n    # Iterate over the days in the dictionary.\n    for day in hours_studied:\n        # Check if the number of hours studied for the current day is three or more.\n        if hours_studied[day] >= 3:\n            # Increment the number of days studied for three or more hours.\n            days_studied_3_or_more += 1\n    # Return the number of days studied for three or more hours.\n    return days_studied_3_or_more\n# Test the function with the given number of days.\nprint(f\"{number_of_days_studied(10)}\")"
  },
  {
    "example_id": 108,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "563.51"
    ],
    "annotated_answers": [
      "563.51"
    ],
    "solution": "print(round(563.5097, 2))"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.2"
    ],
    "solution": "CE = (4*6)/(2*6)\nprint(f\"{CE:.1f}\")"
  },
  {
    "example_id": 110,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.18"
    ],
    "annotated_answers": [
      "13.18"
    ],
    "solution": "print(56.78-43.6)"
  },
  {
    "example_id": 111,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "22.5"
    ],
    "solution": "x = 360/5\nprint(x)"
  },
  {
    "example_id": 112,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def is_remainder(n, x):\n    return n % x == 0\n\ndef factors(num):\n    return [i for i in range(1, num + 1) if is_remainder(num, i)]\n\ndef solve_sequence(n):\n    if n == 3:\n        return 8\n    if n == 4:\n        return (8 + 16) / 2\n    if n == 5:\n        return (8 + 16 + 24) / 3\n    if n == 6:\n        return (8 + 16 + 24 + 32) / 4\n    if n == 7:\n        return (8 + 16 + 24 + 32 + 48) / 5\n    return (8 + 16 + 24 + 32 + 48 + 64) / 6\n\nx = solve_sequence(6)\nprint(x)"
  },
  {
    "example_id": 113,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.17",
      "0.47",
      "1.63"
    ],
    "annotated_answers": [
      "147.0"
    ],
    "solution": "# Calculate minutes reading fiction book\nmins_reading_fiction = 7 * 5 / 30\nprint(f\"{mins_reading_fiction:.2f}\")\n\n# Calculate minutes reading history textbook\nmins_reading_history = 7 * 2 / 30\nprint(f\"{mins_reading_history:.2f}\")\n\n# Calculate total minutes reading\ntotal_mins_reading = mins_reading_fiction + mins_reading_history\nprint(f\"{total_mins_reading:.2f}\")"
  },
  {
    "example_id": 114,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "234.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "perimeter = 39 * 6\nprint(perimeter)"
  },
  {
    "example_id": 115,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "count = 0\nfor i in range(1, 100):\n    if str(i).count(\"6\") > 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 116,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "5.0",
      "10.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Define a function to find the factors of a number\ndef factors(num):\n    factors_list = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors_list.append(i)\n    return factors_list\n\n# Define a function to determine if a number is a remainder\ndef is_remainder(n, x):\n    return n % x == 0\n\n# Define a function to find the greatest common factor\ndef gcf(num1, num2):\n    factors_num1 = factors(num1)\n    factors_num2 = factors(num2)\n    common_factors = []\n    for i in factors_num1:\n        for j in factors_num2:\n            if i == j:\n                common_factors.append(i)\n    if len(common_factors) == 0:\n        return 1\n    else:\n        return max(common_factors)\n\n# Define a function to find the greatest common factor of all numbers in a list\ndef gcf_list(num_list):\n    gcf_list = []\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            gcf_list.append(gcf(num_list[i], num_list[j]))\n    return max(gcf_list)\n\n# Test the functions\nprint(factors(10))\nprint(is_remainder(10, 5))\nprint(gcf(10, 5))\nprint(gcf_list([10, 5, 15]))"
  },
  {
    "example_id": 117,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "smallest_average = (2 + 4 + 6 + 8) / 4\nprint(smallest_average)"
  },
  {
    "example_id": 118,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "103041.0"
    ],
    "annotated_answers": [
      "103041.0"
    ],
    "solution": "print((103041 ** 0.5) ** 2)"
  },
  {
    "example_id": 119,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# \ndoughnuts = 4 * 12\nprint(f\"Minh would pay ${doughnuts * 3:.2f}\")"
  },
  {
    "example_id": 120,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Find the altitude\naltitude = 8 / 2\nprint(altitude)"
  },
  {
    "example_id": 121,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "5040.0"
    ],
    "solution": "def factors(num):\n    factors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\ndef is_remainder(n, x):\n    return n % x == 0\n\nnum = 1000\n\ndef get_factors(num):\n    factors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\ndef get_remainders(num):\n    remainders = []\n    for i in get_factors(num):\n        if is_remainder(num, i):\n            remainders.append(i)\n    return remainders\n\ndef get_different_remainders(num):\n    remainders = get_remainders(num)\n    different_remainders = []\n    for i in range(len(remainders)):\n        if remainders[i] not in different_remainders:\n            different_remainders.append(remainders[i])\n    return different_remainders\n\ndef get_settings(num):\n    different_remainders = get_different_remainders(num)\n    settings = []\n    for i in range(len(different_remainders)):\n        setting = []\n        for j in range(4):\n            setting.append(different_remainders[i])\n        settings.append(setting)\n    return settings\n\ndef get_total_settings(num):\n    total_settings = 0\n    for i in get_settings(num):\n        total_settings += 1\n    return total_settings\n\nprint(get_total_settings(1000))"
  },
  {
    "example_id": 122,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.3636363636363635"
    ],
    "annotated_answers": [
      "1.36"
    ],
    "solution": "veal = 3 / 2.2\nprint(veal)"
  },
  {
    "example_id": 123,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcf(a, b):\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            return i\n    return 1\n\nprint(gcf(144, 405))"
  },
  {
    "example_id": 124,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.73"
    ],
    "annotated_answers": [
      "0.73"
    ],
    "solution": "# Compute 0.8 - 0.07\nprint(0.8 - 0.07)"
  },
  {
    "example_id": 125,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "scores = [17, 10, 9, 14, 16, 8, 10]\nnext_scores = [18, 11, 12]\nsum(next_scores)\nprint(f\"{sum(next_scores):.2f}\")"
  },
  {
    "example_id": 126,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "# Calculate the ratio of shoe stores in North Area Mall\nratio = 18 / 90\n\n# Calculate the ratio of shoe stores in University Mall\nratio_university = ratio / 9\n\n# Calculate the number of shoe stores in University Mall\nnum_shoe_stores_university = 9 * ratio_university\n\n# Print the number of shoe stores in University Mall\nprint(num_shoe_stores_university)"
  },
  {
    "example_id": 127,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "7.0",
      "14.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def factors(num):\n    factors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\ndef is_remainder(n, x):\n    return n % x == 0\n\ndef find_common_factor(a, b):\n    for i in range(1, min(a, b) + 1):\n        if is_remainder(a, i) and is_remainder(b, i):\n            return i\n    return 0\n\ndef find_common_factors(a, b):\n    factors_a = factors(a)\n    factors_b = factors(b)\n    common_factors = []\n    for i in factors_a:\n        for j in factors_b:\n            if i == j:\n                common_factors.append(i)\n    return common_factors\n\na = 14\nb = 42\ncommon_factor = find_common_factor(a, b)\ncommon_factors = find_common_factors(a, b)\nprint(f\"Common factor: {common_factor}\")\nprint(f\"Common factors: {common_factors}\")"
  },
  {
    "example_id": 128,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "import math\n\ndef lights(mins):\n    red = mins % 2\n    yellow = mins % 3\n    blue = mins % 5\n    return red and yellow and blue\n\ndef lights_on(mins):\n    return lights(mins) and lights(mins + 1)\n\ndef lights_on_seven(mins):\n    return lights_on(mins) and lights_on(mins + 1) and lights_on(mins + 2) and lights_on(mins + 3) and lights_on(mins + 4) and lights_on(mins + 5)\n\nprint(lights_on_seven(0))\nprint(lights_on_seven(1))\nprint(lights_on_seven(2))\nprint(lights_on_seven(3))\nprint(lights_on_seven(4))\nprint(lights_on_seven(5))\nprint(lights_on_seven(6))\nprint(lights_on_seven(7))"
  },
  {
    "example_id": 129,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.15"
    ],
    "annotated_answers": [
      "0.15"
    ],
    "solution": "print(3/20)"
  },
  {
    "example_id": 130,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 5\nprint(x)"
  },
  {
    "example_id": 131,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "answer = 120\nprint(answer)"
  },
  {
    "example_id": 132,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def is_remainder(n, x):\n    return n % x == 0\n\n\ndef factors(n):\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if n / i!= i:\n                factors.append(int(n / i))\n    return factors\n\n\ndef get_closest(n, x):\n    for i in factors(n):\n        if is_remainder(n, i) and abs(i - x) < abs(n - x):\n            return i\n    return n\n\n\ndef solve(grades, males, females):\n    closest = None\n    for i in range(len(grades)):\n        closest = get_closest(males[i], females[i])\n        if closest == males[i]:\n            break\n    return grades[i]\n\n\ngrades = [9, 10, 11, 12]\nmales = [41.1, 34.4, 20.6, 11.6]\nfemales = [39.4, 33.1, 13.8, 8.6]\n\nprint(solve(grades, males, females))"
  },
  {
    "example_id": 133,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def factors(num):\n    return [i for i in range(1, num + 1) if num % i == 0]\n\ndef is_remainder(n, x):\n    return n % x == 0\n\ndef get_relatively_prime_numbers(num1, num2, limit):\n    numbers = []\n    for i in range(num1, limit):\n        if is_remainder(i, num2):\n            numbers.append(i)\n    return numbers\n\nnumbers = get_relatively_prime_numbers(11, 28, 29)\nprint(numbers)"
  },
  {
    "example_id": 134,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print((1*2+3*4-5*6+7*8)*(9*0))"
  },
  {
    "example_id": 135,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "# Calculate mean\nmean = statistics.mean([70, 80, 90, 75, 80, 85])\nprint(f\"The mean is: {mean}\")"
  },
  {
    "example_id": 136,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def is_remainder(n, x):\n    return (n % x) == 0\n\ndef factors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if is_remainder(n, i):\n            factors.append(i)\n    return factors\n\nnum = 1200\nresult = 5 / 100 * 10 / 100 * num\nprint(result)"
  },
  {
    "example_id": 137,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# \nsum_of_squares = (2 ** 2) + (2 ** 2)\nprint(sum_of_squares)"
  },
  {
    "example_id": 138,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "472.0"
    ],
    "annotated_answers": [
      "1208.0"
    ],
    "solution": "# calculate perimeter\nperimeter = 62 * 6 + 20 * 5\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 139,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def get_prime_numbers(n):\n    for i in range(100):\n        if is_prime(i):\n            yield i\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_numbers_5(n):\n    for i in get_prime_numbers(n):\n        yield i\n\ndef get_product_of_prime_numbers_5(n):\n    return math.prod(get_prime_numbers_5(n))\n\nprint(get_product_of_prime_numbers_5(5) % 42)"
  },
  {
    "example_id": 140,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0",
      "72.0",
      "72.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 2\nprint(2**3*3**x)\nprint(2**3*3**2)\nprint(72)"
  },
  {
    "example_id": 141,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Define the function\ndef factors(num):\n    factors = []\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.append(i)\n            factors.append(num // i)\n    return sorted(factors)\n\n# Define the function\ndef is_remainder(n, x):\n    if n % x == 0:\n        return True\n    else:\n        return False\n\n# Calculate the solutions\nsolutions = []\nfor x in range(1, 8):\n    if is_remainder(7, x) == True:\n        solutions.append(x)\n    if is_remainder(7, x) == False:\n        solutions.append(x)\n\n# Calculate the number of solutions\nnum_solutions = len(solutions)\nprint(num_solutions)"
  },
  {
    "example_id": 142,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "long_piece = 60\nshort_piece = 60 / 5\nprint(short_piece)"
  },
  {
    "example_id": 143,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# initialize the list of numbers\nn = [3, 4, 5, 6]\n\n# calculate the sum of the numbers in each row\nrow_sum = sum(n[0:4])\n\n# calculate the sum of the numbers in each column\ncolumn_sum = sum(n[0:4])\n\n# calculate the sum of the numbers in each main diagonal\nmain_diagonal_sum = sum(n[0:4])\n\n# calculate the sum of the numbers in each secondary diagonal\nsecondary_diagonal_sum = sum(n[0:4])\n\n# calculate the difference between the row and column sums\nrow_column_difference = abs(row_sum - column_sum)\n\n# calculate the difference between the main diagonal and secondary diagonal sums\nmain_secondary_diagonal_difference = abs(main_diagonal_sum - secondary_diagonal_sum)\n\n# calculate the sum of the differences\nsum_of_differences = row_column_difference + main_secondary_diagonal_difference\n\n# print the sum of the differences\nprint(sum_of_differences)"
  },
  {
    "example_id": 144,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "row_1 = [1]\nrow_2 = [2,2]\nrow_3 = [3,3,3]\nrow_4 = [4,4,4,4]\nrow_5 = [5,5,5,5,5]\n\narrangement = row_1 + row_2 + row_3 + row_4 + row_5\nprint(arrangement)"
  },
  {
    "example_id": 145,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "326.5"
    ],
    "annotated_answers": [
      "326.5"
    ],
    "solution": "print(313.9 + 12.6)"
  },
  {
    "example_id": 146,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "-6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1/100**3)"
  },
  {
    "example_id": 147,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((1 + 2*3*4*5)/11)"
  },
  {
    "example_id": 148,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "# Calculate the height of the tree\ntree_height = 120 / 2\nprint(f\"The height of the tree is {tree_height} feet.\")"
  },
  {
    "example_id": 149,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "odd_digits = [1, 3, 5, 7, 9]\nodds = [i for i in range(10000, 100000) if str(i)[-1] in odd_digits]\nprint(sum(odds))"
  },
  {
    "example_id": 150,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "102.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "num = 100\nwhile True:\n    factors = []\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            factors.append(i)\n    if len(factors) == 3:\n        print(num)\n        break\n    num += 1"
  },
  {
    "example_id": 151,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2097154.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 1\nb = 2\nc = -2\nd = 1\n\ne = a**20\nf = b**20\ng = c**20\nh = d**20\n\nprint(e + f + g + h)"
  },
  {
    "example_id": 152,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5000.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def john_count(n):\n    if n % 2 == 0:\n        return n + 1\n    else:\n        return n - 1\n\ncount = 0\nwhile count < 5000:\n    count += 1\n    john_count(count)\n\nprint(count)"
  },
  {
    "example_id": 153,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Create a list of the apples and their respective owners\napples = [2, 3, 3, 4]\nowners = [\"Amy\", \"Betty\", \"Cathy\", \"Daisy\"]\n\n# Calculate the total number of apples\ntotal_apples = sum(apples)\n\n# Calculate the number of apples that each person will receive\npersonal_apples = [int(math.ceil(total_apples * apples[i] / sum(apples))) for i in range(len(apples))]\n\n# Print the number of apples that Betty and Cathy will have together\nprint(personal_apples[1] + personal_apples[2])"
  },
  {
    "example_id": 154,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "x = math.degrees(math.atan(math.sin(math.radians(65))/math.cos(math.radians(65))))\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 155,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.79"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "ans = (8/9)**(4/2)\nprint(f\"{ans:.2f}\")"
  },
  {
    "example_id": 156,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "triangle_area = 6 * 6 / 2\nprint(triangle_area)"
  },
  {
    "example_id": 157,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "def largest_prime_factor(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n    return max(factors)\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2 and is_prime(n):\n        factors.append(n)\n    return factors\n\n\ndef factors(n):\n    if n == 1:\n        return [1]\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if n // i!= i:\n                factors.append(n // i)\n    return factors\n\n\ndef is_remainder(n, x):\n    if n % x == 0:\n        return True\n    return False\n\n\nprint(largest_prime_factor(1391))"
  },
  {
    "example_id": 158,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "d = (8 + 48) / 2\nprint(d)"
  },
  {
    "example_id": 159,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "print(360 / 2)"
  },
  {
    "example_id": 160,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "# Define the number of multiples\nmultiples = 0\n\n# Define the starting number\nstart = 100\n\n# Define the ending number\nend = 999\n\n# Loop through the numbers\nfor i in range(start, end + 1):\n    # Check if the number is divisible by 13\n    if i % 13 == 0:\n        # Increment the counter\n        multiples += 1\n\n# Print the result\nprint(multiples)"
  },
  {
    "example_id": 161,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "original_price = 60\nnew_price = original_price * (1 - 0.25)\nprint(new_price)"
  },
  {
    "example_id": 162,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_emirp(n):\n    if n < 10:\n        return False\n    digits = [int(i) for i in str(n)]\n    digits.reverse()\n    p = int(''.join(map(str, digits)))\n    return is_prime(p)\n\ndef is_emirp_not(n):\n    if n < 10:\n        return False\n    digits = [int(i) for i in str(n)]\n    digits.reverse()\n    p = int(''.join(map(str, digits)))\n    return not is_prime(p)\n\nn = 10\nwhile True:\n    if is_emirp_not(n):\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 163,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "57.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# set the number of days\ndays = 10\n\n# set the number of miles each team runs per day\ngirls_miles = 3\nboys_miles = 5\n\n# set the number of days after the first day\ndays_after_first = days - 1\n\n# calculate the total miles each girl will run\ngirls_total = girls_miles + days_after_first * 6\n\n# calculate the total miles each boy will run\nboys_total = boys_miles + days_after_first * 5\n\n# calculate the difference between the girls and boys total\ndifference = girls_total - boys_total\n\n# set the number of javelins to order\njavelins = 0\n\n# loop through the number of days\nfor day in range(1, days + 1):\n    # loop through the number of girls\n    for girl in range(1, girls_total + 1):\n        # calculate the total miles each girl will run on a given day\n        total_girls_miles = girls_miles + (day - 1) * 6\n        # if the total miles each girl will run on a given day is greater than the total miles each boy will run on a given day\n        if total_girls_miles > boys_total:\n            # add 1 to the number of javelins to order\n            javelins += 1\n\n# print the total miles each girl will run by the time the coach orders the new equipment\nprint(f\"The total miles each girl will run by the time the coach orders the new equipment is {girls_total}.\")"
  },
  {
    "example_id": 164,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "# Solve the problem\ntotal = 0\nfor i in range(10, 21):\n    if i % 2!= 0:\n        total += i\nprint(total)"
  },
  {
    "example_id": 165,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.99999999999999"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "print(pow((pow(6, 0.5) + pow(24, 0.5)), 2))"
  },
  {
    "example_id": 166,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "print(4*12-(4+12))"
  },
  {
    "example_id": 167,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "# Number of games played\ngames = 3 * 4 * 3 + 4 * 3\nprint(games)"
  },
  {
    "example_id": 168,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 22\nprint(x/2)"
  },
  {
    "example_id": 169,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define variables\npositive = 0\nnegative = 0\n\n# Define numbers\nnum = 12\n\n# Use the math.factors function to find factors\nfor i in range(1, num + 1):\n    if num % i == 0:\n        if i > 0:\n            positive += 1\n        else:\n            negative += 1\n\n# Print results\nprint(f\"{positive} positive and {negative} negative\")"
  },
  {
    "example_id": 170,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# define the range of values\nx = symbols('x')\n\n# define the equation\neq = 4 + 3*x\n\n# solve the equation\nsol = solve(eq, x)\n\n# print the solution\nprint(sol)\n\n# print the number of integers that satisfy the equation\nprint(len(sol))"
  },
  {
    "example_id": 171,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "n = 1\nwhile True:\n    if is_remainder(n, 16) and is_remainder(n, 15) and is_remainder(n, 12):\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 172,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# find the two smallest 3-digit prime numbers\nprimes = []\nfor i in range(100, 1000):\n    if i > math.sqrt(i) and i % 2!= 0 and i % 3!= 0:\n        primes.append(i)\n\n# find the product of the two smallest 3-digit prime numbers\nn = primes[0] * primes[1]\n\n# find the sum of the digits of n\nsum_digits = 0\nfor digit in str(n):\n    sum_digits += int(digit)\n\nprint(f\"{sum_digits}\")"
  },
  {
    "example_id": 173,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Define x\nx = symbols('x')\n\n# Define AE\nAE = 40\n\n# Define AD\nAD = 30\n\n# Define BE\nBE = 20\n\n# Define C\nC = (BE + AD) / 2\n\n# Define AC\nAC = C - AE\n\n# Print AC\nprint(f\"AC = {AC:.2f}\")"
  },
  {
    "example_id": 174,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Let's define the area of the triangle\ntriangle_area = (1/2) * (1/2)\nprint(f\"The area of the triangle is {triangle_area:.2f}\")"
  },
  {
    "example_id": 175,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "num = 10**5 * 10**77 / 10**15 / (10**15)**4\n\n# \nzeroes = len(str(num)) - 1\n\nprint(zeroes)"
  },
  {
    "example_id": 176,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 1/2\nprint(x)"
  },
  {
    "example_id": 177,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "79200.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "distance = 5280 * 15\nprint(distance)"
  },
  {
    "example_id": 178,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "83.0"
    ],
    "solution": "x = symbols(\"x\")\nnum = 3*x - 9\nden = x + 37\nans = solve(num/den, x)\nprint(ans[0])"
  },
  {
    "example_id": 179,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.5"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "# define variables\nperimeter = 68\ndiagonal = 30\n\n# calculate area\narea = (perimeter**2 - diagonal**2) / (4 * (perimeter - diagonal))\n\n# print area\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 180,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.49999999999999994"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "import math\nx = math.sin(math.radians(150))\nprint(x)"
  },
  {
    "example_id": 181,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "flagpole_height = 20\nshadow_length = 9\nwoman_height = 6\n\n# Find shadow length of the flagpole\nshadow_flagpole_length = shadow_length / (woman_height/flagpole_height)\n\nprint(shadow_flagpole_length)"
  },
  {
    "example_id": 182,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "10.0",
      "5.0",
      "10.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define two variables\nx, y = symbols('x, y')\n\n# Define the equation\neq = (x + y)**2 - 250\n\n# Solve for x and y\nsol = solve(eq, x, y)\n\n# Print the solution\nprint(sol)"
  },
  {
    "example_id": 183,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "324.0",
      "324.0",
      "324.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "A = 72\nB = (72/2)/2\nC = (72/2)/2\nD = (72/2)/2\n\nprint(B*C)\nprint(B*D)\nprint(C*D)"
  },
  {
    "example_id": 184,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3000.0"
    ],
    "annotated_answers": [
      "3400.0"
    ],
    "solution": "x = 3000\nprint(x)"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Define variables\nwidth = 5\nheight = 7\nborder = 0.5\n\n# Calculate area of red border\nred_border = width * border + height * border\n\n# Print area\nprint(f\"The area of the red border is {red_border} square inches.\")"
  },
  {
    "example_id": 186,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(36**10 // 6**19)"
  },
  {
    "example_id": 187,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "201102.0"
    ],
    "annotated_answers": [
      "89898.0"
    ],
    "solution": "for i in range(100000, 999999):\n    if str(i) == str(i)[::-1] and i%6 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 188,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.91"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# \n# find the value of the square\nnum = 8210\n\n# find the factors of 8210\nfactors = []\nfor i in range(1, int(num**0.5) + 1):\n    if num % i == 0:\n        factors.append(i)\n\n# find the factor that is closest to 10\nclosest_factor = min(factors, key=lambda x: abs(x - 10))\n\n# calculate the power\npower = num / closest_factor\n\n# solve for the square\nsquare = math.log10(power)\n\n# round to the nearest hundredth\nprint(round(square, 2))"
  },
  {
    "example_id": 189,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "class_average = (80*20 + 90*8 + 100*2) / (20 + 8 + 2)\nprint(class_average)"
  },
  {
    "example_id": 190,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "# Create a list of degrees\ndegrees = [30, 85]\n\n# Find the difference between the two angles\ndiff = degrees[1] - degrees[0]\n\n# Print the answer\nprint(diff)"
  },
  {
    "example_id": 191,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "# Define the number of doors\nnum_doors = 12\n\n# Define a list of all the possible door combinations\ndoor_combinations = list(range(num_doors))\n\n# Define a list to store the number of ways to enter and leave the building\nways_to_enter_leave = []\n\n# Loop through all possible door combinations\nfor i in door_combinations:\n    # Get the door number that is used to enter the building\n    door_enter = i\n\n    # Get the door number that is used to leave the building\n    door_leave = (i + 1) % num_doors\n\n    # If the door number that is used to leave the building is not the same as the door number that is used to enter the building, then the number of ways to enter the building and leave the building is one\n    if door_leave!= door_enter:\n        ways_to_enter_leave.append(1)\n\n    # If the door number that is used to leave the building is the same as the door number that is used to enter the building, then the number of ways to enter the building and leave the building is zero\n    else:\n        ways_to_enter_leave.append(0)\n\n# Find the sum of all the ways to enter and leave the building\nsum_ways_to_enter_leave = sum(ways_to_enter_leave)\n\n# Print the sum of all the ways to enter and leave the building\nprint(sum_ways_to_enter_leave)"
  },
  {
    "example_id": 192,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "cookies = math.ceil(3/2/0.0625)\nprint(cookies)"
  },
  {
    "example_id": 193,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "103.63"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "# Find the measure in degrees of angle ACB\nACB = math.degrees(math.acos((24/36-36/36)/math.sqrt(2)))\nprint(f\"{ACB:.2f}\")"
  },
  {
    "example_id": 194,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.39999999999999997"
    ],
    "annotated_answers": [
      "0.4"
    ],
    "solution": "print(2.4/6)"
  },
  {
    "example_id": 195,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 16\nprint(x)"
  },
  {
    "example_id": 196,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "games_won = (12 * 0.25)\nprint(games_won)"
  },
  {
    "example_id": 197,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Initialize a list to store all positive integers\nt_list = []\n\n# Calculate the sum of all positive integers t that satisfy the condition\nfor t in range(1, 10):\n    if 1.2 * t <= 9.6:\n        t_list.append(t)\n\n# Sum the elements in the list\nsum = 0\nfor element in t_list:\n    sum += element\n\n# Print the sum\nprint(sum)"
  },
  {
    "example_id": 198,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "628.0"
    ],
    "solution": "# The number of positive integers less than 200\u03c0\n# is the same as the number of positive integers\n# less than 200, since \u03c0 is irrational.\ntotal = 0\nfor i in range(1, 201):\n    total += 1\nprint(total)"
  },
  {
    "example_id": 199,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Calculate $(.\\overline{6})(3)$\nprint(6/3)"
  },
  {
    "example_id": 200,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "# Color list\ncolors = [\"red\", \"blue\", \"green\", \"orange\", \"yellow\", \"purple\", \"brown\", \"pink\"]\n\n# Shirt and tie list\nshirt_and_tie = []\n\n# Refuse to wear same color shirt and tie\nfor i in range(len(colors)):\n    for j in range(len(colors)):\n        if i!= j:\n            shirt_and_tie.append((colors[i], colors[j]))\n\n# Number of outfits\nprint(len(shirt_and_tie))"
  },
  {
    "example_id": 201,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0",
      "127.0",
      "114.0",
      "74.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "# calculate total number of physicians\ntotal = 53 + 8 + 155 + 17 + 145 + 10 + 98 + 2\n\n# calculate number of physicians in each group\ngroup1 = 53 + 8\ngroup2 = 155 + 17\ngroup3 = 145 + 10\ngroup4 = 98 + 2\n\n# calculate total number of degrees\ntotal_degrees = 360\n\n# calculate central angle of each sector\ncentral_angle1 = (group1 / total) * total_degrees\ncentral_angle2 = (group2 / total) * total_degrees\ncentral_angle3 = (group3 / total) * total_degrees\ncentral_angle4 = (group4 / total) * total_degrees\n\n# print central angle of each sector\nprint(f\"{central_angle1:.0f}\")\nprint(f\"{central_angle2:.0f}\")\nprint(f\"{central_angle3:.0f}\")\nprint(f\"{central_angle4:.0f}\")"
  },
  {
    "example_id": 202,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0",
      "13.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Define variables\ndecade = [50, 60, 70, 80]\nnum_stamps = [4, 8, 12, 13]\n\n# Print results\nprint(\"The number of European stamps in the 80s is: \", num_stamps[3])"
  },
  {
    "example_id": 203,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef is_divisible_by_3(n):\n    return n % 3 == 0\n\ncount = 0\nfor n in range(1000, 10000):\n    if is_palindrome(n) and is_divisible_by_3(n):\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 204,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.2499999999999996"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "cupcakes = 13\n\nx = symbols('x')\n\n# Chocolate\nchocolate_cupcakes = cupcakes/2\nchocolate_ingredients = 1\n\n# Raisins\nraisin_cupcakes = cupcakes/3\nraisin_ingredients = 1\n\n# Chocolate chips\nchip_cupcakes = cupcakes/4\nchip_ingredients = 1\n\n# Nuts\nnut_cupcakes = cupcakes/6\nnut_ingredients = 1\n\n# Maximum number of cupcakes with no ingredients\nmax_cupcakes = cupcakes - chocolate_cupcakes - raisin_cupcakes - chip_cupcakes - nut_cupcakes\n\n# Maximum number of cupcakes with no ingredients\nprint(f\"The maximum number of cupcakes with no ingredients is {max_cupcakes}\")"
  },
  {
    "example_id": 205,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "157.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "def count_integers(n):\n    count = 0\n    for i in range(n):\n        if '3' in str(i):\n            count += 1\n    return count\n\nprint(count_integers(500) - count_integers(100))"
  },
  {
    "example_id": 206,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "153.12"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "# Define variables\np = 20 + 15\ns = (p * p) / 8\nprint(f\"{s:.2f}\")"
  },
  {
    "example_id": 207,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# Variables\nx = symbols('x')\n\n# Equations\neq1 = 10*x*x\neq2 = 15*x*x\neq3 = 24*x*x\n\n# Expressions\nexpression = eq1*eq2*eq3\n\n# Solving for x\nsolution = solve(expression,x)\n\n# Printing\nprint(solution)\n\n# Calculating\nprint(solution[0])"
  },
  {
    "example_id": 208,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "print(math.ceil(6 - -9))"
  },
  {
    "example_id": 209,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n\nangle = (a + b + c) - (a + b - c) - (a - b + c) + (a - b - c)\nprint(f\"{angle:.2f}\")"
  },
  {
    "example_id": 210,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "print(150 // 7)"
  },
  {
    "example_id": 211,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def integer_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n\nprint(integer_divisors(7))"
  },
  {
    "example_id": 212,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "numbers = [6, 8, 9, 11, 16]\nprint(statistics.mean(numbers))"
  },
  {
    "example_id": 213,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 1\nprint(a)"
  },
  {
    "example_id": 214,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "heights = [625, 733, 733, 733, 858]\nnew_height = 885\nmean_height = statistics.mean(heights)\nnew_mean_height = statistics.mean(heights + [new_height])\nprint(f\"{new_mean_height - mean_height:.0f} feet\")"
  },
  {
    "example_id": 215,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.9128784747792"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 2\nb = a + 21\n\nc = (b**2 - a**2)**0.5\n\nprint(c)"
  },
  {
    "example_id": 216,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "# Count the number of ways to place two pieces on the board.\n# The first piece can be placed in any row, so there are 8 ways to place the first piece.\n# The second piece can be placed in any column, so there are 8 ways to place the second piece.\n# Since the pieces must either be in the same row or be in the same column,\n# each pair of pieces must be placed in the same row or column.\n# Therefore, the number of ways to place two pieces on the board is:\n# 8 * 8 = 64\nprint(64)"
  },
  {
    "example_id": 217,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Define variables\npol = 4\nlaw = 3\n\n# Define the number of handshakes\nhandshake = pol * (law + 1)\n\n# Print the number of handshakes\nprint(handshake)"
  },
  {
    "example_id": 218,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1264.0",
      "1.0",
      "5.0"
    ],
    "annotated_answers": [
      "980.0"
    ],
    "solution": "# Define variables\nfarthing = 4\npenny = 12\nshilling = 20\npound = 4 * farthing + penny * shilling\n\n# Convert 1 pound and 5 pence to farthings\nfarthings = pound * farthing + 5 * penny * farthing\n\n# Print the total number of farthings\nprint(f\"There are {farthings:.0f} farthings in 1 pound and 5 pence.\")"
  },
  {
    "example_id": 219,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "# Calculate the length of AC\nlength = math.sqrt(32**2 + 0**2)\nprint(f\"{length:.2f}\")"
  },
  {
    "example_id": 220,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(6)"
  },
  {
    "example_id": 221,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 222,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(6 + (8 / 2))"
  },
  {
    "example_id": 223,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "class_size = 28 - 20 + 1\nprint(class_size)"
  },
  {
    "example_id": 224,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "123.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "a = 76 - (-4*8 - 2) + 13\nprint(f\"{a:.2f}\")"
  },
  {
    "example_id": 225,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-75.74"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "# Define variables\nx = 300\ny = 400\nz = 300\n\n# Define the function for Jim's path\ndef jim(x, y):\n    return math.sqrt(x**2 + y**2)\n\n# Define the function for Martha's path\ndef martha(z):\n    return math.sqrt(z**2 + z**2)\n\n# Find the difference in distance between the two paths\ndiff = martha(z) - jim(x, y)\n\n# Print the solution\nprint(f\"{diff:.2f}\")"
  },
  {
    "example_id": 226,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "inches = 120 / 20\nprint(inches)"
  },
  {
    "example_id": 227,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(round(15.49999999))"
  },
  {
    "example_id": 228,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "# calculate area of triangle\narea = (1/2) * (2 * 5)\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 229,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5321.0"
    ],
    "annotated_answers": [
      "5321.0"
    ],
    "solution": "print((-math.sqrt(5321))**2)"
  },
  {
    "example_id": 230,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Set radius as a variable\nradius = symbols('r')\n\n# Set the equation of the circle\nequation = (radius**2) + (0.5)**2 - radius\n\n# Solve for the maximum value of radius\nmax_radius = solve(equation, radius)[0]\n\n# Round the value to the nearest integer\nmax_radius_int = int(round(max_radius))\n\n# Print the answer\nprint(f'The largest possible radius is {max_radius_int} meters.')"
  },
  {
    "example_id": 231,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69277.0"
    ],
    "annotated_answers": [
      "949.0"
    ],
    "solution": "# Create a list of numbers from 0 to 999\nnums = list(range(1000))\n\n# Find the index of the largest multiple of 73\nlargest = max(i for i, n in enumerate(nums) if n % 73 == 0)\n\n# Print the number\nprint(largest * 73)"
  },
  {
    "example_id": 232,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "boxes = 77 // 12\nprint(boxes)"
  },
  {
    "example_id": 233,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a = [8, 12, 16, 20, 24]\nprint(statistics.mean(a))"
  },
  {
    "example_id": 234,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.4"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# original price = 60\n# commission = 5% of 60\ncommission = 60 * 0.05\n\n# discount = 20% of 60\ndiscount = 60 * 0.20\n\n# price after discount = 60 - discount\nprice_after_discount = 60 - discount\n\n# commission = 5% of price after discount\ncommission_after_discount = price_after_discount * 0.05\n\nprint(f\"{commission_after_discount:.2f}\")"
  },
  {
    "example_id": 235,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# create a variable for the height of the man\nheight = 6.0\n# create a variable for the height of the man's head\nhead_height = height / 8\n# print the height of the man's head\nprint(f\"The height of the man's head is {head_height:.2f} inches.\")"
  },
  {
    "example_id": 236,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0",
      "27.0",
      "32.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "math_a = 15\nhistory_a = 8\nboth_a = 3\ntotal = 35\n\nmath_not_a = total - math_a\nhistory_not_a = total - history_a\nboth_not_a = total - both_a\n\nprint(math_not_a, history_not_a, both_not_a)"
  },
  {
    "example_id": 237,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "3024.0"
    ],
    "solution": "n = 9\nk = 4\n\ndef permutation(n, k):\n    return math.factorial(n) / math.factorial(k) / math.factorial(n - k)\n\nprint(permutation(n, k))"
  },
  {
    "example_id": 238,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(5**5 // 5**4 - 5**3 + 5**2 * 5)"
  },
  {
    "example_id": 239,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Find the number of ways to paint two faces of a die blue\n# where the product of the numbers on the painted faces isn't equal to 6\n#\n# 1. Create a list of all possible combinations of numbers on the faces\n# 2. Filter the list to only include combinations where the product of the numbers\n#   on the painted faces is not equal to 6\n# 3. Count the number of combinations in the list\n\n# Create a list of all possible combinations of numbers on the faces\ncombinations = []\nfor i in range(1, 7):\n    for j in range(1, 7):\n        combinations.append((i, j))\n\n# Filter the list to only include combinations where the product of the numbers\n# on the painted faces is not equal to 6\nfiltered_combinations = []\nfor combination in combinations:\n    if combination[0] * combination[1]!= 6:\n        filtered_combinations.append(combination)\n\n# Count the number of combinations in the list\nprint(len(filtered_combinations))"
  },
  {
    "example_id": 240,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "original_number = 3\ntwenty_one = 21\ntwice_original_number = 2 * original_number\nresult = 2 * original_number * 5\nprint(result)"
  },
  {
    "example_id": 241,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "inches = 2 * 36\nprint(inches)"
  },
  {
    "example_id": 242,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-34.0",
      "-17.0",
      "0.0",
      "17.0",
      "34.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\ndef multiples(x, lower, upper):\n    multiples = []\n    for i in range(lower, upper):\n        if i % x == 0:\n            multiples.append(i)\n    return multiples\n\nprint(multiples(17, -50, 50))"
  },
  {
    "example_id": 243,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x = symbols('x')\n\n# solve for x\nsol = solve(x-2*x+3*x-4*x+5*x-6*x+7*x-8*x+9*x-10*x-50, x)\n\n# print the result\nprint(sol)"
  },
  {
    "example_id": 244,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "# Define lower and upper bound\nlower = 30\nupper = 50\n\n# Define number of archers\nn = 30\n\n# Define average number of archers per group\navg = (lower + upper)/2\n\n# Define standard deviation of number of archers per group\nstddev = (upper - lower)/2\n\n# Define number of groups\nnum_groups = int(math.ceil(n/avg))\n\n# Define list of possible groups\ngroup_sizes = [int(round(avg + stddev*math.sqrt(2*math.log(num_groups))*x)) for x in range(num_groups)]\n\n# Define number of archers in each group\nnum_archers = sum(group_sizes)\n\n# Print results\nprint(f\"There were {num_archers} archers in the class.\")"
  },
  {
    "example_id": 245,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "27.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# number of red cars\nn_red = 12\n\n# number of 4-door cars\nn_4door = 15\n\n# number of 2-door cars\nn_2door = 4\n\n# number of white cars\nn_white = 4\n\n# total number of cars\nn_total = n_red + n_4door + n_2door + n_white\n\n# number of red and 4-door cars\nn_red_4door = n_red + n_4door\n\n# number of 2-door and white cars\nn_2door_white = n_2door + n_white\n\n# number of 2-door cars\nn_2door = n_2door_white - n_white\n\n# number of red and 2-door cars\nn_red_2door = n_red + n_2door\n\n# number of 4-door and white cars\nn_4door_white = n_4door + n_white\n\n# number of 4-door and red cars\nn_4door_red = n_4door_white - n_red\n\n# number of 2-door and red cars\nn_2door_red = n_2door_white - n_red\n\n# print the number of red and 4-door cars\nprint(f\"The number of red and 4-door cars is: {n_red_4door}\")"
  },
  {
    "example_id": 246,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.14285714285714285"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(7 ** -1)"
  },
  {
    "example_id": 247,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "print(1 + 2 + 3 - 4 + 5 + 6)"
  },
  {
    "example_id": 248,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "C = 7 * 4\nprint(C)"
  },
  {
    "example_id": 249,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "7.78"
    ],
    "solution": "price = 10\nqty = 0.75\ncost = price*qty\nprint(f\"{cost:.2f}\")"
  },
  {
    "example_id": 250,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# Define prime numbers\na = 3\nb = 5\n# Define difference\ndifference = b - a\n# Define sum\nsum = a + b\n# Define equation\nequation = sum - difference\n# Solve equation\nsolve(equation, a, b)\n# Print solution\nprint(f\"{a + b}\")"
  },
  {
    "example_id": 251,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-16.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "print(-144/9)"
  },
  {
    "example_id": 252,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# number of pies\nn = 12\n\n# number of pies with chocolate\nn_chocolate = 3\n\n# number of pies with marshmallows\nn_marshmallows = 3\n\n# number of pies with cayenne\nn_cayenne = 3\n\n# number of pies with salted soy nuts\nn_salted_soy_nuts = 3\n\n# number of pies with no ingredients\nn_no_ingredients = 1\n\n# create variables for each ingredient\nchocolate = symbols('chocolate')\nmarshmallows = symbols('marshmallows')\ncayenne = symbols('cayenne')\nsalted_soy_nuts = symbols('salted_soy_nuts')\n\n# create a list of variables\nvariables = [chocolate, marshmallows, cayenne, salted_soy_nuts]\n\n# create a list of ingredients\ningredients = [\n    chocolate,\n    marshmallows,\n    cayenne,\n    salted_soy_nuts\n]\n\n# create a list of equations\nequations = [\n    chocolate + marshmallows + cayenne + salted_soy_nuts == n,\n    chocolate == n_chocolate,\n    marshmallows == n_marshmallows,\n    cayenne == n_cayenne,\n    salted_soy_nuts == n_salted_soy_nuts,\n]\n\n# solve the system of equations\nsolution = solve(equations, variables)\n\n# print the smallest possible number of pies\nprint(f\"{n_no_ingredients:.2f}\")"
  },
  {
    "example_id": 253,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 10\nb = 8\nprint(a*b)"
  },
  {
    "example_id": 254,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1587600.0"
    ],
    "annotated_answers": [
      "1260.0"
    ],
    "solution": "x = symbols(\"x\")\nans = 3*6*10*15*21*28\nprint(f\"{ans:.2f}\")"
  },
  {
    "example_id": 255,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "# Area of A\nA = 40\n# Area of B\nB = 25\n# Area of C\nC = 30\n\n# Area of D\nD = A + B - C\n\nprint(D)"
  },
  {
    "example_id": 256,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.75"
    ],
    "annotated_answers": [
      "16.75"
    ],
    "solution": "print(14.6+2.15)"
  },
  {
    "example_id": 257,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "351.0"
    ],
    "solution": "# Create symbols\nyear = symbols('year')\n\n# Create variables\namaretta_birthday = '7/27'\nenzo_birthday = '9/3'\n\n# Create a list of cake-eating days\ncake_eating_days = [f'{amaretta_birthday}']\n\n# Loop through each year between 2008 and 2016\nfor i in range(2008, 2017):\n    # Add Enzo's birthday to the list of cake-eating days\n    cake_eating_days.append(f'{i}-{enzo_birthday}')\n\n    # Add Amaretta's birthday to the list of cake-eating days\n    cake_eating_days.append(f'{i}-{amaretta_birthday}')\n\n# Print the total number of cake-eating days\nprint(len(cake_eating_days))"
  },
  {
    "example_id": 258,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "250.0"
    ],
    "annotated_answers": [
      "550.0"
    ],
    "solution": "distance = 12000 / 48\nprint(distance)"
  },
  {
    "example_id": 259,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = symbols('N')\nf = 21420*N - 6*N\nf_eq = solve(f, N)\nf_eq = f_eq[0]\nprint(f\"{f_eq:.0f}\")"
  },
  {
    "example_id": 260,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "for i in range(5, 1, -1):\n    if i % 2!= 0 and i % 5 == 0:\n        print(i)"
  },
  {
    "example_id": 261,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1296.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x, y = symbols('x, y')\neq = (2**x) * (3**y) - 1296\nsol = solve(eq, x, y)\nprint(sol)"
  },
  {
    "example_id": 262,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.000346860908775581"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(1/31/93)"
  },
  {
    "example_id": 263,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "# number of terms less than or equal to 20\ncount = 0\n\n# the sequence\nsequence = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\nfor n in sequence:\n    if math.sqrt(n) <= 20:\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 264,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcd(a,b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(315, 108))"
  },
  {
    "example_id": 265,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "def average(lst):\n    return sum(lst) / len(lst)\n\nlst = [71, 72, 73, 74, 75]\nprint(average(lst))"
  },
  {
    "example_id": 266,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.303"
    ],
    "annotated_answers": [
      "0.303"
    ],
    "solution": "sum = 0.3 + 0.003\nprint(sum)"
  },
  {
    "example_id": 267,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "average = (30 * 20 + 20 * 30) / (20 + 30)\nprint(average)"
  },
  {
    "example_id": 268,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 269,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "solution = 35 / 13\nprint(int(solution))"
  },
  {
    "example_id": 270,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "53.0",
      "97.0",
      "2.0",
      "59.0",
      "89.0",
      "2.0",
      "61.0",
      "83.0",
      "2.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\nfor i in range(len(primes)):\n    for j in range(i+1, len(primes)):\n        for k in range(j+1, len(primes)):\n            if primes[i] * primes[j] * primes[k] < 100:\n                continue\n            if primes[i] * primes[j] * primes[k] < 1000:\n                continue\n            if primes[i] * primes[j] * primes[k] < 10000:\n                continue\n            print(primes[i], primes[j], primes[k])\n            break"
  },
  {
    "example_id": 271,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.33"
    ],
    "annotated_answers": [
      "3.24"
    ],
    "solution": "# declare variables\nx = symbols(\"x\")\n\n# declare the constraints\nconstraints = [x >= 1, x <= 6, x - 14 >= 0, x - 5 >= 0, x - 9 >= 0, x - 7 >= 0, x - 7 >= 0, x - 8 >= 0]\n\n# solve for the average\nsolve(constraints)\n\n# solve for the average\nsolve(constraints)\n\n# define the function\ndef average(x):\n    return (14 + 5 + 9 + 7 + 7 + 8) / 6\n\n# calculate the average\nprint(f\"{average(x):.2f}\")"
  },
  {
    "example_id": 272,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40320.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "# Variables\nP = 1\nV = 1\nT = 1\n\n# Number of people\nN = 8\n\n# Permutations\npermutations = math.factorial(N) / (math.factorial(P) * math.factorial(V) * math.factorial(T))\n\n# Print\nprint(f\"The number of ways to choose a President, Vice-President, and Treasurer is: {permutations}\")"
  },
  {
    "example_id": 273,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "# Define variables\nx = symbols('x')\n\n# Define equation\neq = 5 + 4*x - 277\n\n# Find solution\nsol = solve(eq, x)\n\n# Print solution\nprint(f\"{sol[0]}\")"
  },
  {
    "example_id": 274,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.82"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# Find the distance from Paul to the ground\nd = 3\n\n# Find the distance between the poles\nL = 14\n\n# Find the height of the rope from the ground\nh = 15\n\n# Find the height of the rope from the ground\nR = math.sqrt(h**2 - d**2)\n\n# Find the distance from Paul to the pole\nx = 5\n\n# Find the distance from Paul to the center of the rope\ny = math.sqrt(R**2 - x**2)\n\n# Find the length of the rope\nL = x + y\n\n# Print the length of the rope\nprint(f\"{L:.2f}\")"
  },
  {
    "example_id": 275,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.95"
    ],
    "annotated_answers": [
      "4.95"
    ],
    "solution": "print(max(4.5, 4.45, 0.45, 0.54) + min(4.5, 4.45, 0.45, 0.54))"
  },
  {
    "example_id": 276,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "fact = 97\nwhile fact > 1:\n    if 97 % fact == 0:\n        print(fact)\n        break\n    else:\n        fact -= 1"
  },
  {
    "example_id": 277,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "median = 12\nmean = (12 + 21 + 6 + 11 + 30) / 5\nprint(median + mean)"
  },
  {
    "example_id": 278,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.32879660222682"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "# create a list of test scores\nscores = [92, 73, 79, 87]\n\n# calculate the mean of the first four tests\nmean = statistics.mean(scores[:4])\n\n# calculate the standard deviation of the first four tests\nstdev = statistics.stdev(scores[:4])\n\n# find the minimum number of points Hadley must score on the final test\nmin_points = mean - stdev\n\n# print the minimum number of points\nprint(min_points)"
  },
  {
    "example_id": 279,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.4000014000014"
    ],
    "annotated_answers": [
      "1.4"
    ],
    "solution": "print(1/0.714285)"
  },
  {
    "example_id": 280,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.33333333333333"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# set up variables\nx = symbols('x')\n\n# set up inequality\nineq = (x/5) > (2/3)\n\n# solve inequality\nsol = solve(ineq, x)\n\n# print solution\nprint(sol)"
  },
  {
    "example_id": 281,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Calculate the percentage of children in Mathopolis\npercent_children = (1/2) * (1/2) * 100\nprint(percent_children)"
  },
  {
    "example_id": 282,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "373.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "dogs, cats = symbols('dogs cats')\ntotal = 280\nratio = 4/3\n\n# find the number of dogs\ndogs = total * ratio\n\nprint(f\"There are {dogs:.0f} dogs at the pound.\")"
  },
  {
    "example_id": 283,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.7",
      "36.0",
      "37.7",
      "37.7",
      "37.7"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Define variables\nr = 6\nc = 12 * math.pi\n\n# Find the area of the square\ns = r**2\n\n# Find the circumference of the circle\nC = 2 * math.pi * r\n\n# Check that the circumference is correct\nprint(f\"The circumference of the circle is {C:.2f} units.\")\n\n# Check that the area of the square is correct\nprint(f\"The area of the square is {s:.2f} square units.\")\n\n# Check that the area of the circle is correct\nprint(f\"The area of the circle is {C:.2f} square units.\")\n\n# Check that the area of the circle is correct\nprint(f\"The area of the circle is {C:.2f} square units.\")\n\n# Check that the area of the circle is correct\nprint(f\"The area of the circle is {C:.2f} square units.\")"
  },
  {
    "example_id": 284,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Create list of hurricane counts\nhurricanes = [5, 14, 17, 12, 2, 4, 2, 1]\n\n# Get median of hurricane counts\nmedian = statistics.median(hurricanes)\n\n# Print the median\nprint(median)"
  },
  {
    "example_id": 285,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Define variables\ntip = 0.15\ntotal = 12\n\n# Calculate percentage tip\ntip_percentage = tip / total\n\n# Print result\nprint(f\"{tip_percentage:.2%}\")"
  },
  {
    "example_id": 286,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "kids = 44 // 3\nprint(kids)"
  },
  {
    "example_id": 287,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\nz = symbols('z')\n\nexpr = x**2 + y**2 + z**2\nexpr = expr.expand()\n\nprint(expr)"
  },
  {
    "example_id": 288,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4722222222222222"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "sides = 170 / 360\nprint(sides)"
  },
  {
    "example_id": 289,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.38025641025641027"
    ],
    "annotated_answers": [
      "0.38"
    ],
    "solution": "consumption = 1483 / 75 / 52\nprint(consumption)"
  },
  {
    "example_id": 290,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.666666666666668"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "num = 20 - 20/6\nprint(num)"
  },
  {
    "example_id": 291,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "1728.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "prime_factors = [2, 2, 2, 3]\ntotal = 1\nfor prime_factor in prime_factors:\n    total *= prime_factor\n    if total == 2400:\n        break\nelse:\n    total *= 2\n    total *= 2\n    total *= 2\n    total *= 3\n    total *= 3\nprint(prime_factors)\nprint(total)"
  },
  {
    "example_id": 292,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.03"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# define constants\nspeed = 1000/3600\nhallway_time = 90\n\n# define variables\ndistance = hallway_time * speed\nlength = distance/1000\n\n# print result\nprint(f\"{length:.2f}\")"
  },
  {
    "example_id": 293,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "perimeter = 8 + 20 + 25\nprint(perimeter)"
  },
  {
    "example_id": 294,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "x = 11\nprint(x)"
  },
  {
    "example_id": 295,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3721.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "rows = 11\nchairs_per_row = 11\ntotal_chairs = rows * chairs_per_row\nodd_chairs = sum(range(1, total_chairs+1, 2))\nprint(f\"{odd_chairs} chairs have odd numbers\")"
  },
  {
    "example_id": 296,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "import math\n\n# The measure of the angle in degrees is given by the formula:\n# A = 360 / n\n# where A is the measure of the angle in degrees and n is the number of sides of the polygon\n\n# In this case, the polygon has 5 sides, so the measure of the angle in degrees is:\nprint(360 / 5)"
  },
  {
    "example_id": 297,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.67"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "# define area of each square\nsquare_area = 104/3\n\n# print area of each square\nprint(f\"The area of each square is {square_area:.2f} square inches.\")"
  },
  {
    "example_id": 298,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "def lcm(numbers):\n    \"\"\"\n    Returns the least common multiple of all positive integers smaller than 8.\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        multiples = []\n        for i in range(1, numbers[0]+1):\n            for num in numbers:\n                if i % num == 0:\n                    multiples.append(i)\n        return multiples[len(multiples)-1]\n\nprint(lcm([1, 2, 3, 4, 5, 6, 7]))"
  },
  {
    "example_id": 299,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "3.0",
      "6.0",
      "9.0",
      "12.0",
      "15.0",
      "18.0",
      "21.0",
      "24.0",
      "27.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 0\nwhile a <= 99:\n    if (a*100) % 150 == 0 and a*100 % 100 == 0:\n        print(a)\n    a += 1"
  },
  {
    "example_id": 300,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "angle = 5\nprint(angle)"
  },
  {
    "example_id": 301,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0048"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "simplified = (24/30) / (20/3*25)\nprint(simplified)"
  },
  {
    "example_id": 302,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.2",
      "5.44444444444444"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# define variables\nx = symbols('x')\n\n# define equations\neq1 = 3/5 < x/7\neq2 = x/7 < 7/9\n\n# solve equations\nsol = solve((eq1, eq2), x)\n\n# print solution\nprint(sol)"
  },
  {
    "example_id": 303,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# Symbolic variables\na, b, c, d = symbols('a, b, c, d')\n\n# Formulas\nf1 = a + b + c + d - 1\nf2 = a*b*c*d\nf3 = a*b + a*c + a*d + b*c + b*d + c*d\nf4 = a*b*c + a*b*d + a*c*d + b*c*d\nf5 = a*b*c*d\n\n# Solve the equations\nans1 = solve(f1)\nans2 = solve(f2)\nans3 = solve(f3)\nans4 = solve(f4)\nans5 = solve(f5)\n\n# Print the answers\nprint(f\"Answer 1: {ans1}\")\nprint(f\"Answer 2: {ans2}\")\nprint(f\"Answer 3: {ans3}\")\nprint(f\"Answer 4: {ans4}\")\nprint(f\"Answer 5: {ans5}\")\n\n# Find the length of the list\nlen_ans1 = len(ans1)\nlen_ans2 = len(ans2)\nlen_ans3 = len(ans3)\nlen_ans4 = len(ans4)\nlen_ans5 = len(ans5)\n\n# Print the length of the list\nprint(f\"Length of List 1: {len_ans1}\")\nprint(f\"Length of List 2: {len_ans2}\")\nprint(f\"Length of List 3: {len_ans3}\")\nprint(f\"Length of List 4: {len_ans4}\")\nprint(f\"Length of List 5: {len_ans5}\")"
  },
  {
    "example_id": 304,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "total = 30\nfrench = 8\nspanish = 12\nboth = 3\n\nprint(total - french - spanish - both)"
  },
  {
    "example_id": 305,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-82.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "x = symbols('x')\nset = [5, 8, 10, 18, 19, 28, 30, x]\nmean = 4.5\nmean_set = sum(set) / len(set)\nx = solve(mean_set - mean, x)\nprint(x)"
  },
  {
    "example_id": 306,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = 13\nprint(x)"
  },
  {
    "example_id": 307,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = symbols('x')\nsolve(5*x - 3 == 12)\nprint(f\"{5*x + 3}\")"
  },
  {
    "example_id": 308,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "num_list = [2, 3, 5]\n\n# create a list of all possible numbers\npossible_nums = []\nfor i in num_list:\n    for j in num_list:\n        for k in num_list:\n            possible_nums.append(i*100 + j*10 + k)\n\n# remove duplicates\npossible_nums = list(set(possible_nums))\n\n# count the number of distinct numbers\ndistinct_nums = len(possible_nums)\n\nprint(f\"{distinct_nums}\")"
  },
  {
    "example_id": 309,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c = 3, 5, 6\nprint((a**2 * b) / (5 * c) * (10 * c) / (6 * a * b))"
  },
  {
    "example_id": 310,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "number_of_different_combinations = 17 // 7\nprint(number_of_different_combinations)"
  },
  {
    "example_id": 311,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "import math\n\ndef area(base, height):\n    return (base * height) / 2\n\nbase = 5\nheight = 5\nprint(area(base, height))"
  },
  {
    "example_id": 312,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 7\nprint(x)"
  },
  {
    "example_id": 313,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Initialize the speed of the ambulance\nambulance_speed = 40\n\n# Initialize the distance of the ambulance's route\nambulance_route = 20\n\n# Initialize the speed of the helicopter\nhelicopter_speed = 1\n\n# Initialize the distance of the helicopter's route\nhelicopter_route = 15\n\n# Initialize the time for the helicopter to take off\nhelicopter_takeoff_time = 3\n\n# Initialize the time for the helicopter to land\nhelicopter_landing_time = 3\n\n# Calculate the time for the ambulance to complete its trip\nambulance_time = ambulance_route / ambulance_speed\n\n# Calculate the time for the helicopter to complete its trip\nhelicopter_time = helicopter_route / helicopter_speed\n\n# Calculate the difference in time between the ambulance and the helicopter\ndifference = helicopter_time - ambulance_time\n\n# Calculate the difference in time between the ambulance and the helicopter\ndifference = helicopter_time - ambulance_time\n\n# Print the difference in time between the ambulance and the helicopter\nprint(f\"The difference in time between the ambulance and the helicopter is {difference:.2f} minutes.\")"
  },
  {
    "example_id": 314,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x)"
  },
  {
    "example_id": 315,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import math\n\ndef isosceles_right_triangle(a, b, c):\n    if a == b == c:\n        return (a * b) / 2\n    return None\n\nprint(isosceles_right_triangle(6, 6, 6))"
  },
  {
    "example_id": 316,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "print(5**3 - (3**2-5)**3)"
  },
  {
    "example_id": 317,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# Setter\nsetter = 4\n# Spiker\nspiker = 5\n# Either\neither = 1\n\n# Total\ntotal = setter + spiker + either\n\n# Create a list of sets\nsets = []\nfor i in range(0, setter):\n    sets.append('S')\n\nfor i in range(0, spiker):\n    sets.append('P')\n\nfor i in range(0, either):\n    sets.append('E')\n\n# Create a list of permutations\npermutations = []\nfor i in range(0, len(sets)):\n    permutations.append(sets[i:])\n\n# Print the number of permutations\nprint(len(permutations))"
  },
  {
    "example_id": 318,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "129.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "perimeter = 30 + 24 + 25 + 50\nprint(perimeter)"
  },
  {
    "example_id": 319,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "least_feet = 2\nprint(least_feet)"
  },
  {
    "example_id": 320,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "smallest = 1\nwhile (smallest + 1) + (13 - smallest) < 5:\n    smallest = smallest + 1\nprint(smallest)"
  },
  {
    "example_id": 321,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "980.0",
      "980.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\n# If you want to get the exact repeating digits\ndecimal = 31/11111\nn = 1000\nrepeating_digits = 0\nwhile decimal!= round(decimal, n):\n    decimal = round(decimal, n)\n    n += 1\nrepeating_digits = n - len(str(decimal))\nprint(repeating_digits)\n\n# If you want to get the approximate repeating digits\ndecimal = 31/11111\nn = 1000\nwhile decimal!= round(decimal, n):\n    decimal = round(decimal, n)\n    n += 1\nprint(n - len(str(decimal)))"
  },
  {
    "example_id": 322,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8",
      "2.67",
      "0.8"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# cats and alpacas\ncats = 2\nalpacas = 5\n\n# pandas and cats\npandas = 3\ncats = 7\n\n# total alpacas and cats\ntotal_alpacas = alpacas + pandas\ntotal_cats = cats + pandas\n\n# total alpacas and cats\ntotal_alpacas = alpacas + pandas\ntotal_cats = cats + pandas\n\n# alpacas and cats\nalpacas = 70\n\n# total pandas\ntotal_pandas = pandas\n\n# ratio of alpacas and cats\nratio_alpacas_cats = alpacas / cats\n\n# ratio of total alpacas and cats\nratio_total_alpacas_cats = total_alpacas / total_cats\n\n# ratio of alpacas and pandas\nratio_alpacas_pandas = alpacas / pandas\n\n# ratio of total alpacas and pandas\nratio_total_alpacas_pandas = total_alpacas / total_pandas\n\n# ratio of total alpacas and cats\nratio_total_alpacas_cats = total_alpacas / total_cats\n\n# print(f\"{ratio_alpacas_cats:.2f}\")\nprint(f\"{ratio_total_alpacas_cats:.2f}\")\n\n# print(f\"{ratio_alpacas_pandas:.2f}\")\nprint(f\"{ratio_total_alpacas_pandas:.2f}\")\n\n# print(f\"{ratio_total_alpacas_cats:.2f}\")\nprint(f\"{ratio_total_alpacas_cats:.2f}\")"
  },
  {
    "example_id": 323,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "n = -10 // 5\nprint(n)"
  },
  {
    "example_id": 324,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-165.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "# define variables\na = 3\nb = 5\nc = 7\n\n# find the sum of the angles\nsum = a + b + c\n\n# find the degree measure of the largest angle\nlargest_angle = sum - 180\n\nprint(f\"The degree measure of the largest angle is {largest_angle:.2f}\")"
  },
  {
    "example_id": 325,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define the number of factors\nnum_of_factors = 0\n\n# Define the factors\nfactors = [1, 2, 3, 4, 8, 14, 17, 29, 56, 91]\n\n# Iterate over the factors\nfor factor in factors:\n    # Check if the factor is a factor or multiple of 34\n    if factor % 34 == 0:\n        # Increment the number of factors\n        num_of_factors += 1\n\n# Print the number of factors\nprint(num_of_factors)"
  },
  {
    "example_id": 326,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "perimeter = 2*(12+16)\nprint(perimeter)"
  },
  {
    "example_id": 327,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "supplement = 180 - 50\nprint(supplement)"
  },
  {
    "example_id": 328,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "# define variables\nn = 100\n\n# define the number of digits\ndigits = 3\n\n# define the number of integers\nintegers = 0\n\n# define the number of three-digit positive integers\nthree_digits = 0\n\n# loop through the numbers\nfor i in range(1, n):\n    # convert to string\n    num = str(i)\n\n    # check if the number has 3 digits\n    if len(num) == digits:\n        # check if the number is positive\n        if int(num) > 0:\n            # increment the integer count\n            integers += 1\n\n            # increment the three-digit positive integer count\n            three_digits += 1\n\n# print the number of three-digit positive integers\nprint(f\"{three_digits} out of {integers} are three-digit positive integers\")"
  },
  {
    "example_id": 329,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0",
      "0.87",
      "60.0",
      "0.5",
      "60.0",
      "1.73",
      "60.0",
      "0.58",
      "60.0",
      "1.15",
      "60.0",
      "2.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# define angle x in degrees\nx = 60\n\n# convert to radians\nrad = x * math.pi / 180\n\n# calculate sin(rad)\nsin_rad = math.sin(rad)\n\n# calculate cos(rad)\ncos_rad = math.cos(rad)\n\n# calculate tan(rad)\ntan_rad = math.tan(rad)\n\n# calculate cot(rad)\ncot_rad = 1 / tan_rad\n\n# calculate csc(rad)\ncsc_rad = 1 / sin_rad\n\n# calculate sec(rad)\nsec_rad = 1 / cos_rad\n\n# calculate cot(rad)\ncot_rad = 1 / tan_rad\n\n# print results\nprint(f\"sin({x}): {sin_rad:.2f}\")\nprint(f\"cos({x}): {cos_rad:.2f}\")\nprint(f\"tan({x}): {tan_rad:.2f}\")\nprint(f\"cot({x}): {cot_rad:.2f}\")\nprint(f\"csc({x}): {csc_rad:.2f}\")\nprint(f\"sec({x}): {sec_rad:.2f}\")"
  },
  {
    "example_id": 330,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "enrico = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]\nmarie = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]\n\nprint(len(set(marie).intersection(enrico)))"
  },
  {
    "example_id": 331,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "330.75"
    ],
    "annotated_answers": [
      "735.0"
    ],
    "solution": "# carpet cost\ncarpet_cost = 21.95\n# padding cost\npadding_cost = 2.55\n\n# carpet area\ncarpet_area = (4-2) * (5-2)\n# padding area\npadding_area = (6.5-4) * (5-2)\n\n# total area\ntotal_area = carpet_area + padding_area\n\n# cost of carpet\ncarpet_cost_total = carpet_cost * total_area\n# cost of padding\npadding_cost_total = padding_cost * total_area\n\n# total cost\ntotal_cost = carpet_cost_total + padding_cost_total\n\n# round to 2 decimal places\nprint(f\"The total cost is: ${round(total_cost, 2):.2f}\")"
  },
  {
    "example_id": 332,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "# list of first 9 prime numbers\nfirst_9_prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n# sum of first 9 prime numbers\nsum = sum(first_9_prime_numbers)\n\n# print sum\nprint(sum)"
  },
  {
    "example_id": 333,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "20.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "# Variables\nmuffins, croissants = symbols('muffins, croissants')\n\n# Equation\neq = (muffins - 5*croissants) >= 20\n\n# Solve for muffins\nsol = solve(eq, muffins)\n\n# Print the solution\nprint(f\"The least possible number of muffins in the baker's original batch is {sol}.\")"
  },
  {
    "example_id": 334,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "298.0"
    ],
    "solution": "# Define variables\nm = 100\nn = 200\n\n# Define prime function\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n# Define perfect square function\ndef is_perfect_square(num):\n    if num**0.5 == int(num**0.5):\n        return True\n    else:\n        return False\n\n# Define sum function\ndef sum_primes(m, n):\n    sum = 0\n    for i in range(m, n+1):\n        if is_prime(i) and is_perfect_square(i+1):\n            sum += i\n    return sum\n\n# Print result\nprint(sum_primes(m, n))"
  },
  {
    "example_id": 335,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(round(1/(23**1000)))"
  },
  {
    "example_id": 336,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.7777777777777777"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define the length of the smaller square\na = 4\n\n# Define the ratio of the area of the smaller square to the area of the entire dart board\nratio = 4/9\n\n# Define the length of the larger square\nb = a * ratio\n\n# Print the length of the larger square\nprint(b)"
  },
  {
    "example_id": 337,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "510.0"
    ],
    "annotated_answers": [
      "510.0"
    ],
    "solution": "largest_multiple_of_30 = 520 - (520 % 30)\nprint(largest_multiple_of_30)"
  },
  {
    "example_id": 338,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef permutations(n, r):\n    return factorial(n) / factorial(n-r)\n\ndef combinations(n, r):\n    return permutations(n, r) / factorial(r)\n\nn = 20\nr = 2\n\nprint(combinations(n, r))"
  },
  {
    "example_id": 339,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "original_number = 500\ndouble_number = original_number * 2\nresult = (double_number + 200) / 4 - (original_number / 2)\nprint(result)"
  },
  {
    "example_id": 340,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "shakes = 6 * 6\nprint(shakes)"
  },
  {
    "example_id": 341,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# make a list of all the fillings\nfillings = ['turkey', 'ham', 'roast beef', 'cheese', 'tomatoes', 'peppers','sprouts', 'oranges', 'licorice']\n\n# create a variable for the number of sandwiches\nnum_sandwiches = 0\n\n# loop through the list of fillings\nfor filling_1 in fillings:\n    for filling_2 in fillings:\n        # check if the fillings are the same\n        if filling_1 == filling_2:\n            # if they are the same, don't add another sandwich\n            pass\n        else:\n            # if they're different, add one to the number of sandwiches\n            num_sandwiches += 1\n\n# print the answer\nprint(num_sandwiches)"
  },
  {
    "example_id": 342,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "Blake = 78\nJenny = 78 + 10 - 10 + 20 + 20\nprint(Jenny - Blake)"
  },
  {
    "example_id": 343,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.22"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n\neq1 = a + b + c - 77\neq2 = a/4 + b/2 + c/1 - a\neq3 = a/4 + b/2 + c/1 - b\n\nsol = solve([eq1, eq2, eq3], [a, b, c])\n\nprint(f\"{sol[a]:.2f}\")"
  },
  {
    "example_id": 344,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-165.77708006279434"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Number of students who played hockey or baseball\nN = 33 + 24 + 8\n\n# Number of students who played hockey\nH = 33\n\n# Number of students who played baseball\nB = 24\n\n# Number of students who played neither hockey nor baseball\nNH = 8\n\n# Percentage of students who played hockey\npH = (H / N) * 100\n\n# Percentage of students who played baseball\npB = (B / N) * 100\n\n# Percentage of students who played neither hockey nor baseball\npNH = (NH / N) * 100\n\n# Probability of playing both hockey and baseball\np_and = (pH * pB) / (1 - pNH)\n\nprint(\"Probability of playing both hockey and baseball:\", p_and)"
  },
  {
    "example_id": 345,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "# Variables\nnuts = 9\npecan_weight = 2\nwalnut_weight = 3\ncashew_weight = 1\n\n# Calculations\nwalnut_pounds = (walnut_weight / pecan_weight) * nuts\nwalnut_pounds = walnut_pounds\n\n# Expressions\nprint(f\"{walnut_pounds:.1f}\")"
  },
  {
    "example_id": 346,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.33"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# angle = 30 + (20 / 60)\nangle = 30 + (20 / 60)\nprint(f\"{angle:.2f}\")"
  },
  {
    "example_id": 347,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "111.0",
      "141.0",
      "171.0",
      "222.0",
      "252.0",
      "282.0",
      "303.0",
      "333.0",
      "363.0",
      "393.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "for i in range(100, 1000):\n    if i == int(str(i)[::-1]):\n        if i % 3 == 0:\n            print(i)"
  },
  {
    "example_id": 348,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "x = 12 / 2\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 349,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\n\ny = solve(x * 17 + 10 * x - 24, x)\n\nprint(y)"
  },
  {
    "example_id": 350,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "251.0",
      "1.0",
      "3.0",
      "-251.0",
      "1.0",
      "3.0",
      "251.0",
      "1.0",
      "3.0",
      "3.0",
      "-251.0",
      "1.0",
      "3.0",
      "251.0",
      "1.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\n\n# positive even perfect cubes are less than 2008\n# x**3 < 2008\n# x**3 - 2008 < 0\n\n# solve for x**3 = 2008\nsol = solve(x**3 - 2008, x)\n\n# print the solution\nprint(sol)\n\n# print the positive even perfect cubes less than 2008\nprint(f\"{sol[0]**(1/3):.0f}\")"
  },
  {
    "example_id": 351,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = symbols('n')\nsolve_n = solve(n, 3*n + 3 > -11)\nsolve_n = [i for i in solve_n if i > 0]\nsum_solve_n = sum(solve_n)\nprint(f\"{sum_solve_n}\")"
  },
  {
    "example_id": 352,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.26666666666666666"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# The 1000th digit to the right of the decimal point when 4/15 is expressed as a decimal is 1\n\nprint(4/15 % 10)"
  },
  {
    "example_id": 353,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# First, create a list of 8 names\nnames = ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Helen']\n\n# Next, create a list of 62 hugs.\nhugs = []\nfor i in range(62):\n    hugs.append([])\n\n# Now, create a list of all possible pairs of names.\npairs = []\nfor i in range(8):\n    for j in range(i+1, 8):\n        pairs.append([names[i], names[j]])\n\n# Now, create a list of all possible pairs of hugs.\nhugs_pairs = []\nfor i in range(62):\n    for j in range(i+1, 62):\n        hugs_pairs.append([hugs[i], hugs[j]])\n\n# Finally, write a loop that counts the number of times each pair of hugs occurs.\ncount = 0\nwhile True:\n    count += 1\n    for pair in pairs:\n        for hug in hugs_pairs:\n            if pair[0] in hug and pair[1] in hug:\n                count += 1\n    if count >= 62:\n        break\n\n# Print the result.\nprint(f\"It takes {count} weeks for each pair of people to hug at least once.\")"
  },
  {
    "example_id": 354,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "A = 10\nA = A * 2\nprint(A)"
  },
  {
    "example_id": 355,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define the function\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Define the digits function\ndef digits(n):\n    return [int(x) for x in str(n)]\n\n# Define the sum function\ndef sum_digits(n):\n    return sum(digits(n))\n\n# Define the is_prime_with_sum function\ndef is_prime_with_sum(n):\n    if not is_prime(n):\n        return False\n    if sum_digits(n) == 8:\n        return True\n    return False\n\n# Define the solution\nsolution = 0\n\n# Iterate over the numbers\nfor i in range(10, 100):\n    if is_prime_with_sum(i):\n        solution += 1\n\nprint(f\"{solution}\")"
  },
  {
    "example_id": 356,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "8.0",
      "8.0",
      "16.0",
      "16.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "for i in range(1, 6):\n    n = 2**(i-1)\n    print(n, n // 1)"
  },
  {
    "example_id": 357,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nprint(gcd(1313, 1001))"
  },
  {
    "example_id": 358,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.9999999999999939"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(pow(7/16, 111) * pow(16/7, 111))"
  },
  {
    "example_id": 359,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 13 - 5\nprint(k)"
  },
  {
    "example_id": 360,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110.0",
      "3.0",
      "11.0",
      "110.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Define variables\nwallops = 110\nballops = 11\nfallops = 3\n\n# Equations\neq1 = wallops - ballops\neq2 = ballops - fallops\n\n# Solve Equations\nsolve(eq1, fallops)\nsolve(eq2, wallops)\n\n# Print Result\nprint(f\"{wallops:.0f} wallops are equivalent to {fallops:.0f} fallops\")\nprint(f\"{ballops:.0f} ballops are equivalent to {wallops:.0f} wallops\")"
  },
  {
    "example_id": 361,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.1"
    ],
    "annotated_answers": [
      "24.1"
    ],
    "solution": "from statistics import median\naverages = [25.0, 24.3, 24.1, 23.8, 23.4]\nprint(median(averages))"
  },
  {
    "example_id": 362,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.17"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# define the variables\nx = 6\ny = 6\nl = 3\nw = 2\n\n# Calculate the area of the floor\nfloor_area = l * w\n\n# Calculate the number of tiles needed\ntiles = floor_area / (x * y)\n\n# round the answer to 2 decimal places\nprint(f\"{tiles:.2f}\")"
  },
  {
    "example_id": 363,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "perimeter = 10 + 6 + 4 + 8\nprint(perimeter)"
  },
  {
    "example_id": 364,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Define function\ndef get_x_values(x):\n    if x**2 < 200:\n        return x\n    else:\n        return None\n\n# Define the range of x values\nx_values = range(0, 1000, 6)\n\n# Create a list of all possible values of x\nx_list = [x for x in x_values if get_x_values(x)]\n\n# Print the number of possible values of x\nprint(f\"There are {len(x_list)} possible values of x.\")"
  },
  {
    "example_id": 365,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Kelly\nK_n = 9\nK_e = 12\nK_avg = 42\n\n# Brenda\nB_n = 9\nB_e = 12\nB_avg = 45\n\n# calculate distance\nK_dist = K_n + K_e\nB_dist = B_n + B_e\n\n# calculate time\nK_time = K_dist/K_avg\nB_time = B_dist/B_avg\n\n# calculate time difference\ndiff = B_time - K_time\n\n# calculate minutes\nmins = diff*60\n\n# print solution\nprint(f\"{mins:.2f}\")"
  },
  {
    "example_id": 366,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.6"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# find height using formula for area of triangle\nh = sqrt(27)/2\nprint(f\"{h:.2f}\")"
  },
  {
    "example_id": 367,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "162.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "count = 0\nfor i in range(99, 1000):\n    if str(i).count('0') == 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 368,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "chocolate_chips = 8\ncookies = 12\n\nchocolate_chips_needed = int(cookies/chocolate_chips)\n\nprint(f\"{chocolate_chips_needed}\")"
  },
  {
    "example_id": 369,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "294780.0"
    ],
    "annotated_answers": [
      "1020.0"
    ],
    "solution": "lcm = 51 * 68 * 85\nprint(lcm)"
  },
  {
    "example_id": 370,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "x = symbols('x')\n\neq1 = 3*x + 2*(1 + x) - 17\n\nsol = solve(eq1, x)\n\nprint(f\"Solution is {sol}\")\n\neq2 = 6*x + 5\n\nprint(f\"{eq2.subs(x, sol[0]):.2f}\")"
  },
  {
    "example_id": 371,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2007.0"
    ],
    "annotated_answers": [
      "2013.0"
    ],
    "solution": "# define the variables\nn = 2004\nm = 1\n\n# find the common factor\ncommon_factor = n // m\n\n# find the first odd-numbered year after 2006 with the same property\nyear = 2007\nwhile year % 2 == 0:\n    year += 1\n\nprint(year)"
  },
  {
    "example_id": 372,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\n\neq1 = (4*x/8)**55 * (8/37)**55\neq2 = (4*y/8)**55 * (8/37)**55\n\nsolve(eq1, x)\nsolve(eq2, y)\n\nprint(f\"{solve(eq1, x)[0]:.2f}\")\nprint(f\"{solve(eq2, y)[0]:.2f}\")"
  },
  {
    "example_id": 373,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "4.0",
      "41.0",
      "4.0",
      "41.0",
      "4.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Define the variables\nx = symbols('x')\n\n# Define the equation\neq1 = 2*x**2 + 3*x - 4\n\n# Solve for x\nsol = solve(eq1, x)\n\n# Print the solution\nprint(f\"The value of x is {sol}\")"
  },
  {
    "example_id": 374,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Define the problem\ndef square_tiles(x):\n    # Define the area\n    area = x ** 2\n    # Define the tile size\n    tile_size = 4\n    # Define the total area of tiles needed\n    total_area = area / tile_size\n    # Find the number of tiles needed\n    tiles = int(total_area)\n    return tiles\n\n# Call the function\nprint(square_tiles(1))"
  },
  {
    "example_id": 375,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0",
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "backup_freq = [5, 2]\nnum_backups = [0, 0]\nfor i in range(24 * 60):\n    if i % backup_freq[0] == 0 and i % backup_freq[1] == 0:\n        num_backups[0] += 1\n    elif i % backup_freq[0] == 0:\n        num_backups[1] += 1\n\nprint(num_backups)"
  },
  {
    "example_id": 376,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# solve problem\nprint(f\"{(2**20 + 2**20 + 2**20 + 2**21)//2**17:.2f}\")"
  },
  {
    "example_id": 377,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\n\n# 3m + 2n = 2x\n# m + n = x/3\n# m = x/3 - n\n# n = x/3 - m\n\n# 2m + 3n = 2y\n# 2m + 3n = 2y\n# 2m + 3n = 2y\n\n# solve the system of equations\nsol = solve([3*x + 2*y - 2*x/3, 2*x/3 - x/3 - y], [x, y])\n\n# print the solution\nprint(sol)"
  },
  {
    "example_id": 378,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "500.0"
    ],
    "annotated_answers": [
      "1500.0"
    ],
    "solution": "x = 500\nprint(x)"
  },
  {
    "example_id": 379,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "height = 10 + 2 * 25\nprint(height)"
  },
  {
    "example_id": 380,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(4 * 4)"
  },
  {
    "example_id": 381,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2001.0",
      "2002.0",
      "2003.0",
      "2004.0",
      "2005.0",
      "2006.0",
      "2007.0",
      "2008.0",
      "2009.0",
      "2010.0"
    ],
    "annotated_answers": [
      "5999.0"
    ],
    "solution": "def check(num):\n    if num > 2000 and num < 8000:\n        return True\n    else:\n        return False\n\nfor i in range(2000,8000):\n    if check(i):\n        print(i)"
  },
  {
    "example_id": 382,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "576.0",
      "600.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "w = 12\nl = 2*w\np = 4*w\na = 2*w*l\n\n# calculate new length and width\nw_new = math.sqrt(3600/p)\nl_new = 2*w_new\n\n# calculate new perimeter and area\np_new = 4*w_new\na_new = l_new*p_new\n\n# print results\nprint(f\"Original garden: {a:.0f} sqft\")\nprint(f\"New garden: {a_new:.0f} sqft\")"
  },
  {
    "example_id": 383,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "784.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "area = 28**2\nprint(area)"
  },
  {
    "example_id": 384,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "x = 12\nprint(x)"
  },
  {
    "example_id": 385,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(6**3, 3**6))"
  },
  {
    "example_id": 386,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1**(2**235423523))"
  },
  {
    "example_id": 387,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "if 9 % 12 == 0:\n    print(12)\nelif 12 % 9 == 0:\n    print(9)\nelse:\n    print(1)"
  },
  {
    "example_id": 388,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define Variables\nn_red = 1/3\np_4door = 0.5\np_2door = 0.2\nn_white = 8\n\n# Define variables\nn_4door_red = 0\n\n# Find n_4door_red\nn_4door_red = int(n_red * p_4door)\n\n# Print Solution\nprint(f\"There are {n_4door_red} 4-door and red cars.\")"
  },
  {
    "example_id": 389,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "# define variables\na = 9\nb = 12\nc = 3\nd = 8\n\n# find area\narea = (a*b)/2\n\n# print solution\nprint(f\"The area of the figure is {area:.2f}\")"
  },
  {
    "example_id": 390,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0",
      "48.0",
      "528.0",
      "22.0",
      "48.0",
      "2.0",
      "22.0",
      "48.0",
      "1056.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "def lcm(a, b):\n    lcm = (a * b) / gcd(a, b)\n    return lcm\n\na = 22\nb = 48\n\nlcm = lcm(a, b)\nprint(f\"The least common multiple of {a} and {b} is {lcm}\")\n\ngcf = gcd(a, b)\nprint(f\"The greatest common factor of {a} and {b} is {gcf}\")\n\nproduct = lcm * gcf\nprint(f\"The product of the least common multiple and the greatest common factor of {a} and {b} is {product}\")"
  },
  {
    "example_id": 391,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1225.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "area_A1 = 25\narea_A2 = 49\narea_A3 = area_A1 * area_A2\nprint(area_A3)"
  },
  {
    "example_id": 392,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "counties = ['Aiken', 'Bamberg', 'Barnwell', 'Berkeley', 'Calhoun', 'Cherokee', 'Chesterfield', 'Colleton']\nyears = ['2001', '2002', '2003', '2004', '2005']\n\nmedian = []\nfor i in range(len(counties)):\n    count = 0\n    for j in range(len(years)):\n        if int(years[j]) > 2000:\n            count += 1\n    median.append(counties[i])\n    median.append(count)\nprint(median)"
  },
  {
    "example_id": 393,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = math.ceil((1100 - 980) / (0.05 * 1100))\nprint(n)"
  },
  {
    "example_id": 394,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.34589800443456"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# convert USD to GBP\nGBP = 300 / 1.64\n\n# convert USD to EUR\nEUR = 300 / 1.32\n\n# calculate difference\ndifference = EUR - GBP\nprint(difference)"
  },
  {
    "example_id": 395,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "204.65"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "# Variables\nn = 6\nm = 2\nx = 99\ny = 90\n\n# Exam points\nexam_points = 2 * x\n\n# Total points\ntotal_points = n * x + m * y\n\n# Average points\naverage_points = total_points / (n + m)\n\n# Percentage\npercentage = (exam_points / average_points) * 100\n\n# Print\nprint(f\"{percentage:.2f}\")"
  },
  {
    "example_id": 396,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "87.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "print(609 / 7)"
  },
  {
    "example_id": 397,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "-49.0"
    ],
    "solution": "# create variables x and y\nx, y = symbols('x y')\n\n# solve for x\nx = solve(2*x + 3*y - 4, x)\nprint(f\"x = {x}\")"
  },
  {
    "example_id": 398,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "print((1421 / 7 + 47) / 50 * 9)"
  },
  {
    "example_id": 399,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0",
      "34.0",
      "43.0",
      "62.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "for x in range(10, 100):\n    if x % 10 == 0:\n        continue\n    if x % 100 == 0:\n        continue\n    if (x // 10) * (x % 10) == 12:\n        print(x)"
  },
  {
    "example_id": 400,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "# Set variables\nbiology = 18\nspanish = 13\nboth = 5\n\n# Set equations\nbiology_equation = biology + both - 18\nspanish_equation = spanish + both - 13\nboth_equation = both\n\n# Solve equations\nbiology_solution = solve(biology_equation, both)\nspanish_solution = solve(spanish_equation, both)\nboth_solution = solve(both_equation, both)\n\n# Print solution\nprint(f\"{biology_solution}\")\nprint(f\"{spanish_solution}\")\nprint(f\"{both_solution}\")"
  },
  {
    "example_id": 401,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "result = 0\nfor i in range(10):\n    n = 42789*10**(3*i) + 37\n    if n % 3 == 0:\n        result += i\nprint(result)"
  },
  {
    "example_id": 402,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "51.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "numbers = [-36, -29, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 29, 36, 41, 48]\nprint(len(numbers))"
  },
  {
    "example_id": 403,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "175.0",
      "67.6530975637888",
      "27.571428571428573",
      "27.571428571428573",
      "1.0",
      "24.0",
      "7.0",
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from math import sqrt\n\ndef triangle_area(base, height):\n    return 0.5 * base * height\n\ndef triangle_perimeter(base, height):\n    return base + height + sqrt(height**2 + base**2)\n\ndef triangle_altitude(base, height, x):\n    return (height**2 + base**2 - x**2) / (2 * height)\n\ndef triangle_altitude_length(base, height, x):\n    return triangle_altitude(base, height, x)\n\ndef triangle_base(height, x):\n    return 2 * x / height\n\ndef triangle_height(base, x):\n    return sqrt(base**2 - x**2)\n\ndef triangle_x_coordinate(base, height, x):\n    return x\n\ndef triangle_y_coordinate(base, height, x):\n    return triangle_height(base, x)\n\nbase = 25\nheight = 14\nx = 7\n\nprint(triangle_area(base, height))\nprint(triangle_perimeter(base, height))\nprint(triangle_altitude(base, height, x))\nprint(triangle_altitude_length(base, height, x))\nprint(triangle_base(height, x))\nprint(triangle_height(base, x))\nprint(triangle_x_coordinate(base, height, x))\nprint(triangle_y_coordinate(base, height, x))"
  },
  {
    "example_id": 404,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# Define variables\neyebrows = 2\neyes = 1\nears = 2\nlips = 2\nshoes = 2\nhair = 3\n\n# Define functions\ndef count_personalities(eyebrows, eyes, ears, lips, shoes, hair):\n    return (eyebrows + 1) * (eyes + 1) * (ears + 1) * (lips + 1) * (shoes + 1) * (hair + 1)\n\n# Define variables\ntotal = 0\nfor e in range(eyebrows + 1):\n    for ey in range(eyes + 1):\n        for er in range(ears + 1):\n            for l in range(lips + 1):\n                for s in range(shoes + 1):\n                    for h in range(hair + 1):\n                        total += 1\n                        if ey == 0 and er == 0 and l == 0 and s == 0 and h == 0:\n                            continue\n                        print(f\"{total}: {eyebrows} eyebrows, {eyes} eyes, {ears} ears, {lips} lips, {shoes} shoes, {hair} hair\")"
  },
  {
    "example_id": 405,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.6"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 12\nprint(f\"{x*30/100:.2f}\")"
  },
  {
    "example_id": 406,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "science_club = 15\nmath_club = math.ceil(0.3 * science_club * 0.8)\nprint(f\"{math_club}\")"
  },
  {
    "example_id": 407,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "steps = 30 / 3\nprint(steps)"
  },
  {
    "example_id": 408,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# 8 div 2 div 2 + 6\nprint(8 / 2 / 2 + 6)"
  },
  {
    "example_id": 409,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.324555320336759"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from math import sqrt\na = 40\nb = sqrt(a)\nprint(b)"
  },
  {
    "example_id": 410,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "def trisector(a, b, c, d, e, f):\n    ''' Calculate trisector of angle b of scalene triangle abc\n        given the measures of the angles a, c, and f '''\n    g = 180 - a - c\n    h = 180 - b - f\n    i = 180 - d - e\n    j = (a + b + c + d + e + f) / 2\n    k = (a * b * c * d * e * f) ** (1/2)\n    l = (g * h * i * j * k) ** (1/2)\n    return l\n\n# Measure of angle B in degrees\nb = 39\n# Measure of angle QBP in degrees\nqbp = 14\n# Measure of angle QCP in degrees\nqcp = 90 - qbp\n# Measure of angle BPC in degrees\nbpc = trisector(90, b, 90, qbp, qcp, 90)\nprint(f\"{bpc:.2f}\")"
  },
  {
    "example_id": 411,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(317**3+8**3-(2**(3**2)+317**3))"
  },
  {
    "example_id": 412,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "number = math.sqrt(225)\nprint(number)"
  },
  {
    "example_id": 413,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "import math\n\ndef number_of_combinations(total_items, number_of_people):\n    return math.factorial(total_items) // (math.factorial(number_of_people) * math.factorial(total_items - number_of_people))\n\nprint(number_of_combinations(10, 2))"
  },
  {
    "example_id": 414,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97969.0"
    ],
    "annotated_answers": [
      "97969.0"
    ],
    "solution": "print(math.pow(97969, 0.5) ** 2)"
  },
  {
    "example_id": 415,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "891.0"
    ],
    "solution": "# define variables\nx = 1100\ny = 1099\n\n# compute difference\ndifference = x - y\n\n# print result\nprint(f\"{difference}\")"
  },
  {
    "example_id": 416,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "# set the quiz scores\nscores = [100, 100, 99, 98, 100]\n\n# find the missing score\nmissing = scores[0]\n\n# find the mean\nmean = statistics.mean(scores)\n\n# calculate the difference\ndiff = missing - mean\n\n# solve for the missing score\nsolve(diff, missing)\n\n# print the result\nprint(f\"{missing:.2f}\")"
  },
  {
    "example_id": 417,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "side = 16\nprint(side)"
  },
  {
    "example_id": 418,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "260.0"
    ],
    "annotated_answers": [
      "260.0"
    ],
    "solution": "number_of_letters = 26\nnumber_of_digits = 10\ntotal_possible_license_plates = number_of_letters * number_of_digits\nprint(total_possible_license_plates)"
  },
  {
    "example_id": 419,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "291.0",
      "979.0",
      "1411.0",
      "2059.0",
      "2419.0",
      "2491.0",
      "2491.0",
      "2419.0",
      "2059.0",
      "1411.0",
      "979.0",
      "291.0"
    ],
    "annotated_answers": [
      "291.0"
    ],
    "solution": "prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\nfor prime_1 in prime_numbers:\n    for prime_2 in prime_numbers:\n        if prime_1 + prime_2 == 100:\n            print(prime_1 * prime_2)"
  },
  {
    "example_id": 420,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 15 - 2\ny = 4 * x\nz = 2 * 10\nprint(z - y)"
  },
  {
    "example_id": 421,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "bill = 400 / 50\nsam = 400 / 40\nprint(sam - bill)"
  },
  {
    "example_id": 422,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "d = 16\nA = math.pi * (d/2)**2\n\n# area of circle decreased by 48pi\nA_new = A - 48*math.pi\n\n# solve for radius\nr = (A_new/math.pi)/(d/2)\n\n# print result\nprint(f\"The radius is {r:.2f}\")"
  },
  {
    "example_id": 423,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.605551275463989"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "AB = math.sqrt((2)**2 + (3)**2)\nprint(AB)"
  },
  {
    "example_id": 424,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "# define the number of marbles\nn = 100\n\n# define the number of marbles in each bag\nb18 = int(18 * math.ceil(n / 18))\nb42 = int(42 * math.ceil(n / 42))\n\n# print the answer\nif b18 < b42:\n    print(b18)\nelse:\n    print(b42)"
  },
  {
    "example_id": 425,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = -1\nprint(x)"
  },
  {
    "example_id": 426,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "area = 12 * 20 / 2\nprint(area)"
  },
  {
    "example_id": 427,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# define the variables\nx, y, z = symbols('x y z')\n\n# define the equation\neq = (x + y + z) - 5\n\n# solve the equation\nsol = solve(eq, [x, y, z])\n\n# print the solution\nprint(f\"The number of ways to assign 3 people to 5 different offices is {sol[0]}\")"
  },
  {
    "example_id": 428,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.6"
    ],
    "annotated_answers": [
      "0.6"
    ],
    "solution": "print(round(4/7, 1))"
  },
  {
    "example_id": 429,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# set the number of factors\nn = 20\n\n# create a list of prime numbers\nprimes = [2,3,5,7,11,13,17,19]\n\n# initialize the number of primes to 0\nnum_primes = 0\n\n# loop over the primes\nfor p in primes:\n    # if the prime divides n!\n    if n % p == 0:\n        # increment the number of primes\n        num_primes += 1\n\n# print the number of primes\nprint(num_primes)"
  },
  {
    "example_id": 430,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3720.0"
    ],
    "annotated_answers": [
      "3720.0"
    ],
    "solution": "print(3720)"
  },
  {
    "example_id": 431,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 1215\nfactors = []\nfor i in range(2, int(sqrt(n))+1):\n    if n % i == 0:\n        factors.append(i)\n        factors.append(n//i)\nprint(f\"{len(set(factors))}\")"
  },
  {
    "example_id": 432,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "blue = 3 * 60\nprint(blue)"
  },
  {
    "example_id": 433,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# create variables\na = 4\nb = 4\nc = 4\nd = 4\ne = 4\nf = 4\ng = 4\nh = 4\nk = 4\n\n# calculate the perpendicular distance from point E to line DF\nx = (d**2 + f**2 - c**2 - e**2) / (2 * d * f)\n\n# calculate the square of the perpendicular distance\ny = x**2\n\n# display the answer\nprint(f\"{y:.2f}\")"
  },
  {
    "example_id": 434,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "401.0",
      "2.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "# Define variables\npond_size = 40\nprevious_day = 10\n\n# Define symbols\nx = symbols('x')\n\n# Define equation\neq = x**2 + x - 100\n\n# Solve equation\nsol = solve(eq, x)\n\n# Define pond_size\npond_size = sol[0]\n\n# Print answer\nprint(f\"Pond size: {pond_size}\")"
  },
  {
    "example_id": 435,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.6"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# set up the problem\na, b, c, d, e = symbols('a b c d e')\n\n# set up the equation\neq1 = a + b + c + d + e == 10.6\n\n# solve for the value of e\nsolve(eq1, e)\n\n# find the value of e\ne = 10.6 - a - b - c - d\n\n# print the value of e\nprint(e)"
  },
  {
    "example_id": 436,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# prime factors\nfactors = []\n\n# prime factorization\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n# loop through prime factors\nfor p in primes:\n    if (117 * 119) % p == 0:\n        factors.append(p)\n\n# print result\nprint(len(factors))"
  },
  {
    "example_id": 437,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16043.0"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "digits = len(''.join(str(n**2) for n in range(1, 2501)))\nprint(digits)"
  },
  {
    "example_id": 438,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef greatest_prime_factor(n):\n    if n == 1 or n == 0:\n        return 1\n    for i in range(int(n ** 0.5), n, 1):\n        if is_prime(i) and n % i == 0:\n            return i\n    return 1\n\nprint(greatest_prime_factor(3105))"
  },
  {
    "example_id": 439,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0",
      "25.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define variables\nx, y = symbols('x, y')\n\n# Define equations\neq1 = 2*x + 3*y - 6\neq2 = 3*x + 2*y - 8\n\n# Find solution\nsol = solve([eq1, eq2], [x, y])\n\n# Print answer\nprint(f\"The total area of the shaded region is {sol[x]*sol[y]} square units.\")"
  },
  {
    "example_id": 440,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "print(182+21-32+9)"
  },
  {
    "example_id": 441,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "2.0",
      "16.0",
      "2.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "# Define variables\nx = symbols('x')\ny = symbols('y')\n\n# Define equations\neq1 = (x**2 + y**2 - 16)**2 - 4*(x**2 + y**2 - 16)*(x**2 + y**2 - 16)\neq2 = (x**2 + y**2 - 16)**2 - 4*(x**2 + y**2 - 16)*(x**2 + y**2 - 16)\n\n# Solve equations\nsolution = solve((eq1, eq2), (x, y))\n\n# Print solution\nprint(solution)"
  },
  {
    "example_id": 442,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-40.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "not_brought = 42 - 36 - 26 - 20\nprint(not_brought)"
  },
  {
    "example_id": 443,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# number of marbles in the bag\nN = 20\n\n# number of blue marbles in the bag\nk = 5\n\n# probability of selecting a blue marble at random\np = 1/2\n\n# probability of selecting a non-blue marble at random\nq = 1 - p\n\n# number of blue marbles to add to the bag\nn = int(N * p / (k * q))\n\n# print solution\nprint(n)"
  },
  {
    "example_id": 444,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "john_pins = 66\nbrother_pins = int(john_pins/2)\nprint(brother_pins)"
  },
  {
    "example_id": 445,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "264.0"
    ],
    "solution": "# Define the function\ndef sum_of_digits(n):\n    # Initialize the sum\n    sum_digits = 0\n    # Extract digits from the number\n    digits = list(str(n))\n    # Sum up the digits\n    for digit in digits:\n        sum_digits += int(digit)\n    return sum_digits\n\n# Define the function\ndef three_times_larger(n):\n    # Initialize the three times larger number\n    three_times_larger = 0\n    # Extract the digits from the number\n    digits = list(str(n))\n    # Check if the number is a two-digit number\n    if len(digits) == 2:\n        # Check if the digit is three times the other digit\n        if digits[0] * 3 == digits[1]:\n            # Return the number\n            three_times_larger = n\n    return three_times_larger\n\n# Define the function\ndef is_positive(n):\n    # Check if the number is positive\n    if n > 0:\n        # Return the number\n        return n\n    else:\n        # Return 0\n        return 0\n\n# Initialize the sum\nsum_positive_numbers = 0\n\n# Loop from 100 to 999\nfor i in range(100, 1000):\n    # Check if the number is positive\n    if is_positive(i):\n        # Check if the sum of the digits is 3\n        if sum_of_digits(i) == 3:\n            # Check if the number is three times larger than the other digit\n            if three_times_larger(i)!= 0:\n                # Add the number to the sum\n                sum_positive_numbers += i\n\n# Print the sum\nprint(sum_positive_numbers)"
  },
  {
    "example_id": 446,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-19.0",
      "7.0",
      "11.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# define n\nn = symbols('n')\n\n# define inequalities\ninequality1 = 4*n + 3 < 25\ninequality2 = -7*n + 5 < 24\n\n# solve inequalities\nsolutions = solve([inequality1, inequality2], n)\n\n# print solutions\nprint(solutions)"
  },
  {
    "example_id": 447,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "y = 21 - 2*8\nprint(y)"
  },
  {
    "example_id": 448,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "perimeter = 8*3\nprint(perimeter)"
  },
  {
    "example_id": 449,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5208333333333334"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(25/4/12)"
  },
  {
    "example_id": 450,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "yards = 3*0.25\ninches = yards * 36\nprint(f\"{inches:.2f}\")"
  },
  {
    "example_id": 451,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1080.0"
    ],
    "annotated_answers": [
      "1080.0"
    ],
    "solution": "time = 0.30 * 3600\nprint(time)"
  },
  {
    "example_id": 452,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "-3.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Define the initial position\nx0 = 0\ny0 = 0\n\n# Define the coordinates for each leg of the journey\nx1 = x0 + 19\ny1 = y0\n\nx2 = x1 - 16\ny2 = y1\n\nx3 = x2 - 3\ny3 = y2 - 3\n\nx4 = x3 + 4\ny4 = y3\n\n# Print the final position\nprint(f\"Final position: ({x4}, {y4})\")"
  },
  {
    "example_id": 453,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "time = 17/1.7\nprint(time)"
  },
  {
    "example_id": 454,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = symbols('n')\nx = 12/n\nsol = solve(x, n)\nans = 0\nfor i in sol:\n    ans += i\nprint(f\"{ans:.2f}\")"
  },
  {
    "example_id": 455,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-1.0",
      "2.0",
      "-1.0",
      "2.0",
      "0.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "# define variables\nN = 8\nA = 1\nB = 2\nC = 3\n\n# define the equation\nx = symbols('x')\neq = A*x**(N-1) + B*x**(N-2) + C*x**(N-3)\n\n# solve for x\nsolution = solve(eq,x)\n\n# print the solution\nprint(solution)\n\n# print the answer\nprint(f\"There are {solution[0]} ways to award the medals.\")"
  },
  {
    "example_id": 456,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "# initialize variables\nx = symbols('x')\n\n# define equations\neq1 = x + x + x - 2*x - 2*x + 2*x + 2*x + x + 4*x - 360\n\n# solve for x\nsol = solve(eq1, x)\n\n# print solution\nprint(f\"{sol[0]}\")"
  },
  {
    "example_id": 457,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "x = symbols('x')\nperimeter = 76\narea = (3*x + 10) * (x + 12)\nequation = perimeter - area\nsol = solve(equation, x)\nprint(f\"{sol[0]:.0f} square feet\")"
  },
  {
    "example_id": 458,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "print(0.005 * 9000)"
  },
  {
    "example_id": 459,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.9999999999999996"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 42\nprint((1/a)**4 * 2 * a**4 + a**(2+1-3))"
  },
  {
    "example_id": 460,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "starting_cones, noon_cones, ending_cones = 72, 72*2/3, 72*2/3*2/3\nprint(ending_cones)"
  },
  {
    "example_id": 461,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "5.0",
      "2.0",
      "1.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "2560.0"
    ],
    "solution": "# Define x\nx = symbols('x')\n\n# Define the equation\neq1 = 2 ** x - 10\n\n# Find the solution\nsol = solve(eq1, x)\n\n# Print the result\nprint(sol)\n\n# Print the value of x\nprint(sol[0])"
  },
  {
    "example_id": 462,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "256.0",
      "2.0",
      "2.0",
      "3.0",
      "256.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "0.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "# 2^(2^3)\na = 2 ** 2 ** 3\nprint(f\"2^{(2^3)} = {a}\")\n\n# (2^2)^3\nb = 2 ** 2 ** 3\nprint(f\"(2^2)^3 = {b}\")\n\n# 2^(2^3) - (2^2)^3\nc = a - b\nprint(f\"2^{(2^3)} - (2^2)^3 = {c}\")"
  },
  {
    "example_id": 463,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "280.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "rate_of_increase = 1.5 # degrees per 15 minutes\ntemperature = 100 # initial temperature\ntime = 120 # time in minutes\n\ntemperature_increase = rate_of_increase * time\nnew_temperature = temperature + temperature_increase\nprint(new_temperature)"
  },
  {
    "example_id": 464,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Define variables\nn = 35\ng = 13\nb = n - g\n\n# Print the answer\nprint(b)"
  },
  {
    "example_id": 465,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "a, b, c = symbols('a, b, c')\n\ndef is_consecutive(n):\n    if n < 3:\n        return False\n    a, b = n - 2, n - 1\n    if a**2 + b**2 == n**2:\n        return True\n    return False\n\ndef largest_consecutive_integer(n):\n    for i in range(n, 1, -1):\n        if is_consecutive(i):\n            return i\n    return -1\n\nprint(f\"{largest_consecutive_integer(1341)}\")"
  },
  {
    "example_id": 466,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# number of nights\nn = 10\n\n# number of meerkats\nm = 10\n\n# number of guard shifts\ng = 2\n\n# number of nights guarded by each meerkat\nd = n/g\n\n# number of nights each meerkat can sleep\ns = d* (m-1)\n\nprint(s)"
  },
  {
    "example_id": 467,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define variables\nnum_of_pots = 600\nnum_of_red_balloons = 0\nnum_of_blue_balloons = 0\nnum_of_yellow_balloons = 0\nnum_of_pots_with_three_colored_balloons = 0\n\n# Define equations\n# Every 4th pot has a red balloon\n# Every 6th pot has a blue balloon\n# Every 10th pot has a yellow balloon\n\n# 4th, 12th, 16th, 20th, 24th, 28th, 32nd, 36th, 40th, 44th, 48th, 52nd, 56th, 60th\n\n# 6th, 12th, 18th, 24th, 30th, 36th, 42nd, 48th, 54th, 60th\n\n# 10th, 20th, 30th, 40th, 50th, 60th\n\n# Calculate number of pots with each color\n# num_of_red_balloons = 600 / 4 = 150\n# num_of_blue_balloons = 600 / 6 = 100\n# num_of_yellow_balloons = 600 / 10 = 60\n\n# Calculate number of pots with three colored balloons\n# num_of_pots_with_three_colored_balloons = 150 + 100 + 60 = 310\n\nprint(f\"There are {num_of_pots_with_three_colored_balloons} pots with three different colored balloons\")"
  },
  {
    "example_id": 468,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "8.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# initialize variables\na, b, c = symbols('a b c')\n\n# define product of consecutive integers\nproduct = a * b * c\n\n# define mean of consecutive integers\nmean = (a + b + c) / 3\n\n# define equation\neq = product / mean - 24\n\n# solve equation\nsol = solve(eq, a)\n\n# get largest consecutive integer\nmax_int = sol[0]\n\n# print largest consecutive integer\nprint(max_int)"
  },
  {
    "example_id": 469,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.00000000000001"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "# Variables\nl = 5 * math.sqrt(5)\nw = l / 2\narea = 2 * w * l\nprint(f\"The area of the rectangle is: {area}\")"
  },
  {
    "example_id": 470,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "# define variables\nshirts = 5\npants = 6\nhats = 8\n\n# define function\ndef outfits(shirts, pants, hats):\n    return shirts * pants * hats\n\n# print solution\nprint(outfits(shirts, pants, hats))"
  },
  {
    "example_id": 471,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# The number of handshakes is equal to the number of witches + number of sorcerers - number of sorcerers who shake hands with each other\n\n# Witches\nwitches = 6\n\n# Sorcerers\nsorcerers = 10\n\n# Sorcerers who shake hands with each other\nshakers = 5\n\n# Total handshakes\nhandshakes = witches + sorcerers - shakers\n\n# Print result\nprint(handshakes)"
  },
  {
    "example_id": 472,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "1001.0"
    ],
    "solution": "# Define the variable\nx = symbols('x')\n\n# Define the equation\neq = x*7\n\n# Solve the equation\nsol = solve(eq,x)\n\n# Print the solution\nprint(sol)\n\n# Print the least positive 4-digit number\nprint(sol[0])\n\n# Print the least positive 4-digit multiple of 7\nprint(sol[0]*7)"
  },
  {
    "example_id": 473,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "print(round(10.0000198*5.9999985401*6.9999852))"
  },
  {
    "example_id": 474,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "486.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "sum = 0\nfor i in range(10, 100):\n    if i % 10 == 4:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 475,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define the variables\n# h - the number of hours required to paint the house\n# g - the number of good workers\n# b - the number of bad workers\n\n# Define the equation\n# 36 * b + 12 * g = h\n\n# Create a list of good workers\ngood_workers = [1, 2, 3]\n\n# Create a list of bad workers\nbad_workers = [4, 5, 6]\n\n# Define the hours\nhours = [12, 36, 3]\n\n# Define the solution\nsolution = solve(hours[2] == (36 * bad_workers[0]) + (12 * good_workers[0]))\n\n# Print the solution\nprint(f\"The number of bad workers is: {bad_workers[0]}\")"
  },
  {
    "example_id": 476,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "picture_area = 2\npicture_length, picture_width = 1, 1/3\nquilt_length, quilt_width = 2 * picture_length, 3 * picture_width\nquilt_area = quilt_length * quilt_width\nprint(quilt_area)"
  },
  {
    "example_id": 477,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5937.0"
    ],
    "annotated_answers": [
      "5937.0"
    ],
    "solution": "apples_picked = 15832\nhours_picked = 8\napples_picked_in_3_hours = apples_picked / hours_picked * 3\nprint(apples_picked_in_3_hours)"
  },
  {
    "example_id": 478,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "count = 4\nfor i in range(1, count + 1):\n    if i % 4!= 0:\n        print(i)"
  },
  {
    "example_id": 479,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "1.0",
      "3.0",
      "3.0",
      "3.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# create symbols for variables\nx, y, z = symbols('x y z')\n\n# create expression\nexpr = (x**3) + (y**3) + (z**3)\n\n# solve for x, y, z\nsol = solve(expr, (x, y, z))\n\n# print the result\nprint(sol)"
  },
  {
    "example_id": 480,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(math.sqrt(25-16)/(math.sqrt(25)-math.sqrt(16)))"
  },
  {
    "example_id": 481,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "distance = 4 / 0.5\nprint(distance)"
  },
  {
    "example_id": 482,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25000.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "distance = 1000000000\ncircumference = 40000\n\nprint(distance / circumference)"
  },
  {
    "example_id": 483,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "# 40 - 50 pennies\npenny_count = 10\n\n# possible arrangements\narrangements = 3\n\n# add two more pennies\npenny_count += 2\n\n# only one way to arrange\narrangements = 1\n\n# original pennies\noriginal_pennies = penny_count - 2\n\n# print(f\"{original_pennies}\")\nprint(f\"{original_pennies}\")"
  },
  {
    "example_id": 484,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Declare variables\nzinc_percent = 0.2\ncopper_percent = 0.8\nzinc_ounces = 0.5 * 48\ncopper_ounces = 0.5 * 48\n\n# Declare formulas\nzinc_formula = (zinc_percent * copper_ounces) / 100\ncopper_formula = (copper_percent * copper_ounces) / 100\ntotal_formula = zinc_formula + copper_formula\n\n# Print results\nprint(f\"Zinc: {round(zinc_formula)} ounces\")\nprint(f\"Copper: {round(copper_formula)} ounces\")\nprint(f\"Total: {round(total_formula)} ounces\")"
  },
  {
    "example_id": 485,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(92 - 45 / (3 * 5) - 5 ** 2)"
  },
  {
    "example_id": 486,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.5"
    ],
    "annotated_answers": [
      "5.5"
    ],
    "solution": "# Initialize variables\n# Length of the longest side\nL = 11\n# Length of the shorter side\nS = 8.5\n\n# Create a loop to find the length of the longest side\n# after the second fold\nwhile L > S:\n    L = L/2\n\nprint(f\"{L:.1f}\")"
  },
  {
    "example_id": 487,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "151.0"
    ],
    "annotated_answers": [
      "-89.0"
    ],
    "solution": "M = 1\nN = 150\n\nprint(M + N)"
  },
  {
    "example_id": 488,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(math.floor(3/4) - math.ceil(2/3))"
  },
  {
    "example_id": 489,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.0",
      "31.0",
      "31.0",
      "31.0",
      "31.0",
      "31.0",
      "31.0",
      "31.0",
      "31.0",
      "31.0",
      "31.0",
      "31.0",
      "31.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "quarters = 1\nnickels = 1\npennies = 1\n\nsums = [quarters * 25 + nickels * 5 + pennies]\n\nfor quarter in range(0, 2):\n    for nickel in range(0, 2):\n        for penny in range(0, 3):\n            sums.append(quarters * 25 + nickels * 5 + pennies)\n\nprint(sums)"
  },
  {
    "example_id": 490,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "868.7"
    ],
    "annotated_answers": [
      "868.8"
    ],
    "solution": "# round each number to nearest tenth and add the results\nprint(round(543.55, 1) + round(25.23, 1) + round(299.98, 1))"
  },
  {
    "example_id": 491,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "507.0"
    ],
    "annotated_answers": [
      "507.0"
    ],
    "solution": "smallest_positive_multiple_of_13 = (500 // 13 + 1) * 13\nprint(smallest_positive_multiple_of_13)"
  },
  {
    "example_id": 492,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "print(sqrt(9**3))"
  },
  {
    "example_id": 493,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# 2^5 = 32\n# 5^2 = 25\n\n# positive difference between 32 and 25 is 7\nprint(abs(32 - 25))"
  },
  {
    "example_id": 494,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Define x and y\nx, y = symbols('x y')\n\n# Define the area of the triangle\narea = (1/2) * x * y\n\n# Define the equation\neq = (x + y) ** 2 - 16\n\n# Find the solution\nsol = solve(eq, x)\n\n# Print the solution\nprint(sol)"
  },
  {
    "example_id": 495,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "3.0",
      "8.0",
      "2.0",
      "49.0",
      "12.0",
      "7.0",
      "366.0",
      "14.0",
      "5.0",
      "2.0",
      "3.0",
      "8.0",
      "2.0",
      "49.0",
      "366.0",
      "14.0",
      "12.0",
      "7.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# define variables\nx = symbols('x')\n\n# define equations\neq1 = (3*x - 8)**2 + 5*x**2 - 49\neq2 = (3*x + 8)**2 + 5*x**2 - 49\n\n# solve for x\nsol = solve(eq1,eq2,x)\n\n# print result\nprint(sol)"
  },
  {
    "example_id": 496,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "25.0",
      "49.0",
      "81.0",
      "121.0",
      "169.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def is_odd_perfect_square(n):\n    return math.sqrt(n) % 1 == 0 and n % 2 == 1\n\ndef odd_perfect_squares_between(a, b):\n    return [x for x in range(a, b + 1) if is_odd_perfect_square(x)]\n\nprint(odd_perfect_squares_between(5, 211))"
  },
  {
    "example_id": 497,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(3*3 + 3*(3+3) - 3**3)"
  },
  {
    "example_id": 498,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "49.0",
      "48.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# find the sum of the terms\ndef sum_of_squares(n):\n    i = 1\n    while i <= n:\n        i = i + 1\n    return i\n\n# find the number of terms\ndef num_of_terms(n):\n    i = 1\n    while sum_of_squares(i) < n:\n        i = i + 1\n    return i\n\n# find the fewest number of perfect square terms smaller than 49 that can be added together for a sum of 49\ndef fewest_number_of_terms(n):\n    i = 1\n    while sum_of_squares(i) < n:\n        i = i + 1\n    return i\n\nprint(f\"The fewest number of perfect square terms smaller than 49 that can be added together for a sum of 49 is {fewest_number_of_terms(49)}\")"
  },
  {
    "example_id": 499,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Define variables\nPQ = 6\nQR = 4\nTR = 2\nTS = 4\n\n# Define equations\nPQR = PQ + QR + TR\nPQS = PQ + QR + TR + TS\n\n# Solve for PQR\nPQR = PQ + QR + TR\n\n# Solve for PQS\nPQS = PQ + QR + TR + TS\n\n# Print results\nprint(\"The area of quadrilateral PTRS is\", PQS)"
  },
  {
    "example_id": 500,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "960000.0",
      "0.0"
    ],
    "annotated_answers": [
      "1250.0"
    ],
    "solution": "# define the variables\nexchange_rate = 1200/1.50\n# 1992 dollars\ndollars_1992 = 1200\n# 1992 lira\nlira_1992 = 1200/exchange_rate\n# 1992 dollars\ndollars_1992 = 1200\n# 1992 lira\nlira_1992 = 1200/exchange_rate\n# equivalent dollar\nequivalent_dollar = dollars_1992*exchange_rate\n# equivalent lira\nequivalent_lira = lira_1992/exchange_rate\n# equivalent dollar\nequivalent_dollar = dollars_1992*exchange_rate\n# equivalent lira\nequivalent_lira = lira_1992/exchange_rate\nprint(f\"{equivalent_dollar:.2f}\")\nprint(f\"{equivalent_lira:.2f}\")"
  },
  {
    "example_id": 501,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.21"
    ],
    "annotated_answers": [
      "1.21"
    ],
    "solution": "print(max(0.78, 0.12, 1.33, 1.328) - min(0.78, 0.12, 1.33, 1.328))"
  },
  {
    "example_id": 502,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.84"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "# Declare variables\nwidth = 0.4\narea_light_gray = 100\n\n# Calculate the area of the dark gray strip\narea_dark_gray = area_light_gray - (width * width)\n\n# Print the area of the dark gray strip\nprint(f\"The area of the dark gray strip is {area_dark_gray} square inches.\")"
  },
  {
    "example_id": 503,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "# x = symbols('x')\nx = symbols('x')\n\n# equation = solve(2*x + 7 - 81, x)\nequation = solve(2*x + 7 - 81, x)\n\n# print(equation)\nprint(equation)"
  },
  {
    "example_id": 504,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "a = 7\nb = 13\nn = 0\nfor i in range(1, a*b+1):\n    if i % 2 == 0:\n        n += 1\nprint(n)"
  },
  {
    "example_id": 505,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2000.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "# number of seniors\nn = 600\n# number of juniors\nm = 450\n# average number of cartons per junior\nj = 1500\n# average number of cartons per senior\ns = j/m\n# total cartons\nt = n*s\nprint(f\"{t:.0f}\")"
  },
  {
    "example_id": 506,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# define variables\nelephant_speed = 19\nlion_speed = 24\n\n# define time\ntime = 0\n\n# define loop\nwhile elephant_speed > lion_speed:\n    elephant_speed = elephant_speed - lion_speed\n    time = time + 1\n\nprint(f\"{time:.2f}\")"
  },
  {
    "example_id": 507,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "lcm = 240\ngcd = 24\nif lcm % gcd == 0:\n    print(lcm // gcd)\nelse:\n    print('lcm is not divisible by gcd')"
  },
  {
    "example_id": 508,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "area = 60 / 2\nprint(area)"
  },
  {
    "example_id": 509,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.69"
    ],
    "annotated_answers": [
      "2100.0"
    ],
    "solution": "x = symbols('x')\nf = 5*x**5 + 10*x**4 + 14*x**3 + 21*x**2 + 15*x + 20\nsol = solve(f, x)\nprint(f\"{sol[0]:.2f}\")"
  },
  {
    "example_id": 510,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a = 2\nb = 4\nc = 2\n\nprint(a*b*c)"
  },
  {
    "example_id": 511,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "f = 15\nw = 5\ns = 6\n\na = f - w\nb = f - s\n\nprint(f\"The length of the shadow is {b:.2f}\")"
  },
  {
    "example_id": 512,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7004.0"
    ],
    "annotated_answers": [
      "7004.0"
    ],
    "solution": "a, b = symbols('a b')\neq = 3 * 11 * 13 * 21 - 2005 - b\nsol = solve(eq, b)\nprint(f\"{sol[0]}\")"
  },
  {
    "example_id": 513,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "minute_angle = 6 * (8 - 3)\nprint(f\"{minute_angle:.2f}\")"
  },
  {
    "example_id": 514,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "pints_in_quart = 2\npints_in_gallon = 8\n\nquarts_in_gallon = 4\n\ngallons = 2\n\npints = pints_in_quart * quarts_in_gallon * gallons\nprint(f\"There are {pints} pints in 2 1/2 gallons of milk.\")"
  },
  {
    "example_id": 515,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2500.0",
      "2.0",
      "2500.0",
      "2.0",
      "247500.0"
    ],
    "annotated_answers": [
      "54000.0"
    ],
    "solution": "# Define variables\nx = symbols('x')\ny = symbols('y')\n\n# Define functions\nf = x**2 + y**2 - 2500\ng = x**2 + y**2 - 2500\n\n# Find solution to f(x,y) = 0\nsol = solve((f, g), (x, y))\n\n# Print solution\nprint(sol)\n\n# Calculate area of land not watered\narea = 500**2 - (sol[0][0]**2 + sol[0][1]**2)\nprint(f\"{area:.3f}\")"
  },
  {
    "example_id": 516,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "wands = 4\nrands = 6\nfands = 24\n\nwands_to_fands = wands * rands\nfands_to_wands = fands * wands\n\nwands_to_fands = wands_to_fands / fands\nfands_to_wands = fands_to_wands / wands\n\nprint(f\"{wands_to_fands:.2f}\")"
  },
  {
    "example_id": 517,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef largest_prime_factor(n):\n    if is_prime(n):\n        return n\n    else:\n        factors = get_prime_factors(n)\n        return max(factors)\n\nprint(largest_prime_factor(78))"
  },
  {
    "example_id": 518,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print((math.sqrt(100) - math.sqrt(36))**2)"
  },
  {
    "example_id": 519,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "width = 9 / 6 * 10\nprint(width)"
  },
  {
    "example_id": 520,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "print(15 + 8**2 - 3)"
  },
  {
    "example_id": 521,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "print(9/2)"
  },
  {
    "example_id": 522,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "# compute (-49) / 7\nprint(-49/7)"
  },
  {
    "example_id": 523,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "111.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "def multiples_of_9(n):\n    count = 0\n    for i in range(1, n):\n        if i % 9 == 0:\n            count += 1\n    return count\n\nprint(multiples_of_9(1000))"
  },
  {
    "example_id": 524,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# Find the smallest of the five integers\nsmallest = 21 - 4 * (5 - 1) / 2\nprint(smallest)"
  },
  {
    "example_id": 525,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "r = 24/3 + 5\nprint(r)"
  },
  {
    "example_id": 526,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def simplify(x):\n    return sqrt(x)\n\nprint(simplify(28 + sqrt(1296)))"
  },
  {
    "example_id": 527,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Create a list of factors\nfactors = []\nfor i in range(1, 13):\n    if 12 % i == 0:\n        factors.append(i)\n\n# Create a list of numbers that are less than or equal to each factor and share no divisors with the factor other than 1\nnumbers = []\nfor factor in factors:\n    for i in range(1, factor + 1):\n        if i % factor == 0 and i > 1:\n            numbers.append(i)\n\n# Print the length of the list\nprint(len(numbers))"
  },
  {
    "example_id": 528,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3628800.0"
    ],
    "annotated_answers": [
      "2520.0"
    ],
    "solution": "def least_common_multiple(n):\n    if n == 1:\n        return 1\n    else:\n        return n * least_common_multiple(n - 1)\n\nlcm = least_common_multiple(10)\nprint(f\"{lcm}\")"
  },
  {
    "example_id": 529,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "# Define variables\nt = symbols('t')\n\n# Define the equations\ns = 2*t\nd = 8*t\n\n# Solve for t\nsol = solve(s - d, t)\n\n# Print the result\nprint(f\"The swimmer is {sol[0]} meters from the finish line.\")"
  },
  {
    "example_id": 530,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5625",
      "1.5625"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "# Glow cost\nglow_cost = 1.00 * 1.25 \n# Bright cost\nbright_cost = 1.00 * 1.25 * 1.25\n# Bright volume\nbright_volume = 1.25\n# Fresh volume\nfresh_volume = 1.00\n\n# Glow volume\nglow_volume = fresh_volume * (1.00 + 0.25)\n\n# Bright cost\nbright_cost = glow_cost * (1.00 + 0.25)\n\n# Bright volume\nbright_volume = glow_volume * (1.00 + 0.25)\n\nprint(bright_volume)\nprint(bright_cost)"
  },
  {
    "example_id": 531,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "440.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "max_handshakes = 22 * 20\nprint(max_handshakes)"
  },
  {
    "example_id": 532,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "556.0"
    ],
    "annotated_answers": [
      "1251.0"
    ],
    "solution": "total_students = 2/3 * 834\nprint(total_students)"
  },
  {
    "example_id": 533,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "6.0",
      "4.0",
      "8.0",
      "5.0",
      "1.0",
      "6.0",
      "3.0",
      "7.0",
      "5.0",
      "8.0",
      "7.0",
      "9.0",
      "9.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "for A in range(1, 10):\n    for B in range(1, 10):\n        if (25 * A + B) % 9 == 0:\n            print(A, B)"
  },
  {
    "example_id": 534,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6.0",
      "2.0",
      "9.0",
      "3.0",
      "12.0",
      "2.0",
      "3.0",
      "15.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def get_sum(n):\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    return sum\n\ndef is_divisible(n):\n    if n % 3 == 0:\n        return True\n    else:\n        return False\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_divisible_numbers(n):\n    divisible_numbers = []\n    for i in range(2, n):\n        if is_divisible(i):\n            divisible_numbers.append(i)\n    return divisible_numbers\n\ndef get_divisible_numbers_with_divisors(n):\n    divisible_numbers = get_divisible_numbers(n)\n    for i in range(len(divisible_numbers)):\n        divisible_numbers[i] = (divisible_numbers[i], get_divisors(divisible_numbers[i]))\n    return divisible_numbers\n\ndef main():\n    numbers = get_divisible_numbers_with_divisors(100)\n    for i in numbers:\n        print(f\"{i[0]} has divisors {i[1]}\")\n\nmain()"
  },
  {
    "example_id": 535,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "# Define a function\ndef is_leap_year(year):\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    else:\n        return False\n\n# Create a list of leap years between 1900 and 2019\nleap_years = []\nfor year in range(1900, 2020):\n    if is_leap_year(year):\n        leap_years.append(year)\n\n# Print the number of leap years\nprint(len(leap_years))"
  },
  {
    "example_id": 536,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.14285714285714285"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "decimal_place = 2007\n\ndecimal_place_value = 1/7\n\nprint(decimal_place_value)"
  },
  {
    "example_id": 537,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def smallest_prime_sum(a, b):\n    c = a + b\n    if c > 2 and all(c % i!= 0 for i in range(2, int(c**0.5) + 1)):\n        return c\n\nprint(smallest_prime_sum(2, 3))"
  },
  {
    "example_id": 538,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "24.0",
      "36.0",
      "48.0",
      "60.0",
      "72.0",
      "84.0",
      "96.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "number = 3\nwhile number < 100:\n    if number % 4 == 0:\n        print(number)\n    number += 3"
  },
  {
    "example_id": 539,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = -1\nsum = 0\nfor i in range(2011):\n    sum += x**i\nprint(sum)"
  },
  {
    "example_id": 540,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "count = 0\nfor i in range(0, 500, 10):\n    count += 1\nprint(count)"
  },
  {
    "example_id": 541,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "number = 100\nwhile True:\n    if number % 9 == 0:\n        print(number)\n        break\n    number += 1"
  },
  {
    "example_id": 542,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# define variable\nn = 9\n\n# solve for interior diagonal\ninterior_diagonal = (n * (n - 3)) / 2\nprint(interior_diagonal)"
  },
  {
    "example_id": 543,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "eyes = 17/40 * 160\nprint(eyes)"
  },
  {
    "example_id": 544,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "cones = math.ceil(3/4 * 32)\nprint(cones)"
  },
  {
    "example_id": 545,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1200.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "b = 1200\na = int(b/2)\nprint(b)"
  },
  {
    "example_id": 546,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.347628085935161",
      "174.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "n = 109\nk = 3\n\n# 109!\nf = 1\nfor i in range(1, n+1):\n    f *= i\n\n# 3**k\nresult = f // math.pow(3, k)\n\nprint(result)"
  },
  {
    "example_id": 547,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "# Days between report\ndays = [9, 12, 15]\n\n# Calculate least common multiple\nlcm = 1\nfor i in days:\n    lcm = lcm * i // math.gcd(lcm, i)\n\n# Calculate the number of days\nn_days = lcm / days[0]\n\n# Print answer\nprint(f\"The least number of days is {n_days}\")"
  },
  {
    "example_id": 548,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def gcf(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcf(99, 100))"
  },
  {
    "example_id": 549,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "percentage = (40 + 30 + 20 + 10)/100\nprint(percentage)"
  },
  {
    "example_id": 550,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.01"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "# Variables\na = 39\nb = 14\nc = 180 - a - b\n\n# Calculations\nd = 2 * math.sin(math.radians(a / 2)) * math.sin(math.radians(c / 2))\n\n# Calculations\ne = math.sin(math.radians(a)) * math.sin(math.radians(b))\n\n# Calculations\nf = math.sin(math.radians(b)) * math.sin(math.radians(c))\n\n# Calculations\ng = math.sin(math.radians(c)) * math.sin(math.radians(a))\n\n# Calculations\nh = d - e - f + g\n\n# Calculations\ni = math.degrees(math.acos(h))\n\n# Print solution\nprint(f\"{i:.2f}\")"
  },
  {
    "example_id": 551,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "import math\n\ndef arrange(n):\n    return math.factorial(n) / math.factorial(n - 4)\n\nprint(arrange(4))"
  },
  {
    "example_id": 552,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "82.5"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Initialize list\nx = [2, 3, 4, 5, 6, 7, 8, 9]\n\n# Calculate arithmetic mean\nmean = statistics.mean(x)\n\n# Calculate the sum of the elements\nsum = sum(x)\n\n# Calculate the difference between the mean and the sum\ndiff = mean - sum\n\n# Find the missing integer\nmissing = sum - diff\n\n# Print result\nprint(f\"The missing integer is {missing}\")"
  },
  {
    "example_id": 553,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "1.0",
      "121.0",
      "144.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# define variables\na = 2\nb = 3\nc = 4\nd = 5\ne = 1\n\n# calculate values\nval1 = (a * b * c * d) + e\nval2 = (a * (b * c)) * (d + e)\n\n# print values\nprint(f\"The expression {a} * {b} * {c} * {d} + {e} can be evaluated as either {val1} or {val2}\")"
  },
  {
    "example_id": 554,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "perimeter = 4 * 10\nprint(perimeter)"
  },
  {
    "example_id": 555,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "answers = []\n\ndef is_equivalent(expression1, expression2):\n    try:\n        sympy.sympify(expression1) == sympy.sympify(expression2)\n        return True\n    except:\n        return False\n\nfor i in range(1, 7):\n    expression1 = f'{i}/3x'\n    expression2 = f'{i}x/3'\n    answer = is_equivalent(expression1, expression2)\n    answers.append(answer)\n\nfor i in range(1, 7):\n    expression1 = f'{i}/2'\n    expression2 = f'1/2*{i}'\n    answer = is_equivalent(expression1, expression2)\n    answers.append(answer)\n\nprint(sum(answers))"
  },
  {
    "example_id": 556,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "320.0",
      "160.0"
    ],
    "annotated_answers": [
      "680.0"
    ],
    "solution": "x = symbols('x')\n\n# Calculate the number of aliens with 3 eyes\nnum_with_3_eyes = 3*160*x\n\n# Calculate the number of aliens with 5 eyes\nnum_with_5_eyes = 160*(1-x)\n\n# Calculate the total number of eyes\nnum_eyes = num_with_3_eyes + num_with_5_eyes\n\n# Print the solution\nprint(f\"The total number of eyes is: {num_eyes}\")"
  },
  {
    "example_id": 557,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Perimeter of a square\nperimeter = 4 * sqrt(9)\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 558,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = 3/7, 4/3, 11/8, 6/16\ns = sorted([a, b, c, d])\nprint(s[-1] - s[0])"
  },
  {
    "example_id": 559,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "print(8*4 + 2)"
  },
  {
    "example_id": 560,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "tests = 3\nprint(tests)"
  },
  {
    "example_id": 561,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "a = 500\nb = 500\nprint(a + b)"
  },
  {
    "example_id": 562,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\n\n# Define the equation\neq = (54*y) - (x*y)\n\n# Solve for x\nsol = solve(eq, x)\n\n# Print the solution\nprint(sol)"
  },
  {
    "example_id": 563,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5",
      "2.5",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "2.5",
      "2.0",
      "2.0",
      "2.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Area of triangle ABD\ns = (2 + 2 + 2)/2\narea = s*(1/2)\nprint(f\"The area of triangle ABD is {area:.2f}\")\n\n# Area of triangle BCE\ns = (4 + 4 + 2)/2\narea = s*(1/2)\nprint(f\"The area of triangle BCE is {area:.2f}\")\n\n# Area of triangle DCF\ns = (4 + 4 + 4)/2\narea = s*(1/2)\nprint(f\"The area of triangle DCF is {area:.2f}\")\n\n# Area of triangle BAE\ns = (4 + 2 + 2)/2\narea = s*(1/2)\nprint(f\"The area of triangle BAE is {area:.2f}\")\n\n# Area of triangle BAD\ns = (2 + 2 + 4)/2\narea = s*(1/2)\nprint(f\"The area of triangle BAD is {area:.2f}\")\n\n# Area of triangle CBE\ns = (4 + 4 + 4)/2\narea = s*(1/2)\nprint(f\"The area of triangle CBE is {area:.2f}\")\n\n# Area of triangle DAE\ns = (4 + 4 + 2)/2\narea = s*(1/2)\nprint(f\"The area of triangle DAE is {area:.2f}\")\n\n# Area of triangle DBE\ns = (2 + 2 + 4)/2\narea = s*(1/2)\nprint(f\"The area of triangle DBE is {area:.2f}\")\n\n# Area of triangle ABC\ns = (2 + 4 + 2)/2\narea = s*(1/2)\nprint(f\"The area of triangle ABC is {area:.2f}\")\n\n# Area of triangle ADB\ns = (2 + 4 + 4)/2\narea = s*(1/2)\nprint(f\"The area of triangle ADB is {area:.2f}\")\n\n# Area of triangle CDE\ns = (4 + 2 + 4)/2\narea"
  },
  {
    "example_id": 564,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 5\nm = 2\n\n# calculate the number of ways to choose a committee\n# using the combination function\nfrom math import factorial\n\ndef choose(n, m):\n    return factorial(n) // (factorial(m) * factorial(n - m))\n\nprint(choose(n, m))"
  },
  {
    "example_id": 565,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "# Problem:\n# Three circular arcs of radius 5 units bound the region shown.\n# Arcs AB and AD are quarter-circles, and arc BCD is a semicircle.\n# What is the area, in square units, of the region?\n\n# Symbols\nx = symbols('x')\ny = symbols('y')\n\n# Area of quarter-circle\nA_quarter = (x**2 + y**2) * 4\n\n# Area of semicircle\nA_semi = (x**2 + y**2) * 2\n\n# Area of region\nA = A_quarter + A_semi\n\n# Solve for area\nprint(f\"The area of the region is: {A}\")"
  },
  {
    "example_id": 566,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-120.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "# assign the variables\nw = 80\nh1 = 112\nh2 = 172\nl = 3*w/4\n\n# calculate the height of the train\nt = (h1 - h2) - l\nprint(f\"{t:.2f}\")"
  },
  {
    "example_id": 567,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 55 / 5 - 3\nprint(x)"
  },
  {
    "example_id": 568,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "time = 300/2\nprint(time)"
  },
  {
    "example_id": 569,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 7\nprint(x)"
  },
  {
    "example_id": 570,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "37.5"
    ],
    "annotated_answers": [
      "37.5"
    ],
    "solution": "sweatshirt = 67.94 - (2 * 15.22)\nprint(sweatshirt)"
  },
  {
    "example_id": 571,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "# Define variables\nm1 = 50\nm2 = 90\nl1 = 60\nl2 = 120\n\n# Define equations\neq1 = (l1**2 + l2**2 - m1**2 - m2**2) / (2 * l1 * l2)\neq2 = (l1**2 + l2**2 - m1**2 - m2**2) / (2 * l1 * l2)\n\n# Solve equations\nsolve(eq1, eq2)\n\n# Print results\nprint(f\"{m2:.2f}\")"
  },
  {
    "example_id": 572,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "164.0"
    ],
    "annotated_answers": [
      "480.0"
    ],
    "solution": "# Area of side panel\nside_panel = (8 * 8) + (10 * 10)\nprint(f\"{side_panel:.2f}\")"
  },
  {
    "example_id": 573,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "age_mary = 30 * 3 / 5\nprint(age_mary)"
  },
  {
    "example_id": 574,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "def fashion_show(n):\n    return n * (n - 1) / 2\n\nprint(fashion_show(5))"
  },
  {
    "example_id": 575,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "digits = [2, 4, 6, 7]\nnumbers = []\n\nfor i in range(0, 10):\n    for j in range(0, 10):\n        numbers.append(i*10 + j)\n\nnumber_list = [int(x) for x in numbers]\n\ndef gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nfor i in range(0, len(digits)):\n    number_list = [x for x in number_list if x % 10 == digits[i]]\n\nprint(len(number_list))"
  },
  {
    "example_id": 576,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "n = 101 - 25\nprint(n)"
  },
  {
    "example_id": 577,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# Define the variables\nA, B, C = symbols('A B C')\n\n# Define the code words\ncode_words = {\n    'AA': A*A,\n    'AB': A*B,\n    'BB': B*B,\n    'BA': B*A\n}\n\n# Define the number of different three-letter code words\ndifferent_code_words = 0\n\n# Iterate over the code words\nfor code_word in code_words:\n    # Get the code word expression\n    expression = code_words[code_word]\n\n    # Get the different variables in the expression\n    variables = expression.free_symbols\n\n    # Check if the expression is different from the others\n    if len(variables) == 3:\n        different_code_words += 1\n\nprint(f\"{different_code_words} different three-letter code words\")"
  },
  {
    "example_id": 578,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "105.0",
      "105.0",
      "105.0",
      "105.0",
      "105.0",
      "105.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Define variables\na, b, c, d, e = symbols('a b c d e')\n\n# Define equation\neq1 = a + b + c + d + e - 5\n\n# Find the solutions\nsol = solve(eq1, [a, b, c, d, e])\n\n# Print the solutions\nprint(f'The solution is {sol}')\n\n# Define variables\nx, y = symbols('x y')\n\n# Define equation\neq2 = x + y - 105\n\n# Find the solutions\nsol = solve(eq2, [x, y])\n\n# Print the solutions\nprint(f'The solution is {sol}')\n\n# Define variables\nx, y = symbols('x y')\n\n# Define equation\neq3 = x + y - 105\n\n# Find the solutions\nsol = solve(eq3, [x, y])\n\n# Print the solutions\nprint(f'The solution is {sol}')\n\n# Define variables\nx, y = symbols('x y')\n\n# Define equation\neq4 = x + y - 105\n\n# Find the solutions\nsol = solve(eq4, [x, y])\n\n# Print the solutions\nprint(f'The solution is {sol}')\n\n# Define variables\nx, y = symbols('x y')\n\n# Define equation\neq5 = x + y - 105\n\n# Find the solutions\nsol = solve(eq5, [x, y])\n\n# Print the solutions\nprint(f'The solution is {sol}')\n\n# Define variables\nx, y = symbols('x y')\n\n# Define equation\neq6 = x + y - 105\n\n# Find the solutions\nsol = solve(eq6, [x, y])\n\n# Print the solutions\nprint(f'The solution is {sol}')\n\n# Define variables\nx, y = symbols('x y')\n\n# Define equation\neq7 = x + y - 105\n\n# Find the solutions\nsol = solve(eq7, [x, y])\n\n# Print the solutions\nprint(f'The solution is {sol}')\n\n# Define variables\nx, y"
  },
  {
    "example_id": 579,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\n\neq = (3*x + 2 + 3*(1+x) - 23)\n\nsol = solve(eq, x)\n\nprint(sol)"
  },
  {
    "example_id": 580,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.3"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "# Calculate the perimeter of the triangle\nperimeter = sqrt((5 - 13)**2 + (37 - 13)**2)\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 581,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0",
      "18.666666666666668"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define variables\nDrinkets = 56\nBlinkets = 3\nTrinkets = 4\n\n# Calculate value of Drinkets\nDrinkets_value = Drinkets / Blinkets\n\n# Calculate value of Blinkets\nBlinkets_value = Blinkets / Trinkets\n\n# Calculate value of Trinkets\nTrinkets_value = Trinkets / Trinkets\n\n# Print value of Drinkets\nprint(f\"{Drinkets} Drinkets is equal to {Drinkets_value} Trinkets.\")"
  },
  {
    "example_id": 582,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "angle = 180 - 10\nprint(angle)"
  },
  {
    "example_id": 583,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0",
      "21.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "daps = 7\nyaps = 4\nbaps = 3\n\ndaps_to_baps = daps * yaps\nbaps_to_daps = baps * daps\n\nprint(f\"{daps_to_baps:.2f}\")\nprint(f\"{baps_to_daps:.2f}\")"
  },
  {
    "example_id": 584,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 29 - 5\nprint(x)"
  },
  {
    "example_id": 585,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-3969.0"
    ],
    "solution": "# Find the number of positive and negative multiples of 63\n# that are factors of the same number\n# and then multiply the two numbers together\n\n# Find the positive and negative multiples of 63\npos_multiples = [i for i in range(1, 64) if i % 63 == 0]\nneg_multiples = [i for i in range(-1, -64) if i % 63 == 0]\n\n# Find the number that is a factor of both the positive and negative multiples\n# and is also a multiple of 63\ncommon_factor = [i for i in pos_multiples if i in neg_multiples]\n\n# Multiply the positive and negative multiples together\nproduct = len(common_factor) * 63\n\nprint(product)"
  },
  {
    "example_id": 586,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.01"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "# 128 degrees = 2\u03c0 radians\ndegrees = 2 * math.pi\n\n# PT parallel to QR\n# solve for angle PQR in degrees\nangle = math.degrees(math.atan2(10, 7))\n\nprint(f\"Angle PQR: {angle:.2f} degrees\")"
  },
  {
    "example_id": 587,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.2"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "side_garden = 184\nside_house = 20\n\nlength_house = side_garden / side_house\nprint(length_house)"
  },
  {
    "example_id": 588,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "# compute 3^4-5*8\nprint(3**4 - 5*8)"
  },
  {
    "example_id": 589,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# 90% of 700 is 630\n# 700 - 630 is 70\nprint(70)"
  },
  {
    "example_id": 590,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.36507936507936506"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "sum_of_fractions = 2/9 + 1/7\nprint(sum_of_fractions)"
  },
  {
    "example_id": 591,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1",
      "0.05",
      "0.25"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Initialize variables\ncoins = 0\n# Create a list of symbols for each coin\ncoin_symbols = symbols('nickel dime quarter')\n# Create a list of the values for each coin\ncoin_values = [0.05, 0.10, 0.25]\n\n# Iterate over the symbols and values and add the total number of coins\nfor symbol, value in zip(coin_symbols, coin_values):\n    coins += symbol * value\nprint(coins)"
  },
  {
    "example_id": 592,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(6*8)"
  },
  {
    "example_id": 593,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "277.96"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# double the number and then decrease by 13.7\ndoub_num = 2*(125.28 + 13.7)\nprint(doub_num)\n\n\n# find the smallest integer that satisfies the condition\nmin_int = int(doub_num)\nprint(min_int)"
  },
  {
    "example_id": 594,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6290000.0"
    ],
    "annotated_answers": [
      "6290000.0"
    ],
    "solution": "print(round(6287215, -4))"
  },
  {
    "example_id": 595,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.5",
      "23.811761799581316",
      "27.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# Create a list of numbers\nnumbers = [2.5, 5.5, 8.5, 11.5, 14.5, 17.5, 20.5, 23.5, 26.5, 29.5, 32.5, 35.5, 38.5, 41.5, 44.5, 47.5, 50.5, 53.5, 56.5, 59.5, 62.5, 65.5, 68.5, 71.5, 74.5, 77.5, 80.5]\n\n# Calculate the mean of the list\nmean = statistics.mean(numbers)\n\n# Calculate the standard deviation of the list\nstd_dev = statistics.stdev(numbers)\n\n# Print the results\nprint(\"Mean:\", mean)\nprint(\"Standard Deviation:\", std_dev)\n\n# Calculate the number of numbers in the list\nnum_numbers = len(numbers)\n\n# Print the number of numbers\nprint(\"There are\", num_numbers, \"numbers in the list.\")"
  },
  {
    "example_id": 596,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "dresses = 72 // 5\nprint(dresses)"
  },
  {
    "example_id": 597,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "max_spins = 0\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\nwhile nums:\n    num = nums.pop()\n    if num == 1:\n        continue\n    factors = []\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            factors.append(i)\n    new_nums = [x for x in nums if x not in factors]\n    nums = new_nums\n    max_spins += 1\n\nprint(max_spins)"
  },
  {
    "example_id": 598,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "average_speed = 15 / 2.5\nprint(average_speed)"
  },
  {
    "example_id": 599,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "gcf = 90\nprint(gcf)"
  },
  {
    "example_id": 600,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0",
      "51.0",
      "54.0",
      "105.0"
    ],
    "annotated_answers": [
      "1093.0"
    ],
    "solution": "# create a list of data\ndata = [51, 52, 53, 54, 55, 56, 57]\n\n# calculate the median\nmedian = statistics.median(data)\nprint(f\"Median: {median}\")\n\n# calculate the mode\nmode = statistics.mode(data)\nprint(f\"Mode: {mode}\")\n\n# calculate the sum\nsum = statistics.mean(data)\nprint(f\"Sum: {sum}\")\n\n# print the result\nprint(f\"Sum of Median and Mode: {median + mode}\")"
  },
  {
    "example_id": 601,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(4 / 4/9)"
  },
  {
    "example_id": 602,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "# define list of numbers\nnums = list(range(1,21))\n\n# create a list of factors\nfactors = []\nfor i in nums:\n    factors.extend([x for x in nums if x*i % 20 == 1])\n\n# find the smallest positive integer greater than 1 and relatively prime to the product of the first 20 positive integers\nsmallest = 1\nwhile True:\n    if len(factors) == 0:\n        smallest += 1\n        factors = [x for x in nums if x*smallest % 20 == 1]\n    else:\n        break\n\nprint(smallest)"
  },
  {
    "example_id": 603,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "sum = 26 + 52\nprint(round(sum, -1))"
  },
  {
    "example_id": 604,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(pow(1 - pow(-1, 11), 2))"
  },
  {
    "example_id": 605,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "360.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "# Angle A = 30\nA = 30\n\n# Angle B = 60 - A\nB = 60 - A\n\n# Angle C = 120 - (A + B)\nC = 120 - (A + B)\n\n# Angle D = 180 - (A + B + C)\nD = 180 - (A + B + C)\n\n# Angle E = 360 - (A + B + C + D)\nE = 360 - (A + B + C + D)\n\n# Solve for the sum of the angles\nsum_angles = A + B + C + D + E\n\n# Print the sum of the angles\nprint(f\"The sum of the angles is {sum_angles} degrees.\")"
  },
  {
    "example_id": 606,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Variables\nnum_right_handed_boys = 0\nnum_left_handed_boys = 0\nnum_left_handed_girls = 0\nnum_right_handed_girls = 0\nnum_girls_on_team = 0\nnum_boys_on_team = 0\n\n# Right handed boys\nnum_right_handed_boys = 4 * num_left_handed_boys\nprint(f\"{num_right_handed_boys}\")\n\n# Left handed boys\nnum_left_handed_boys = num_girls_on_team // 2\nprint(f\"{num_left_handed_boys}\")\n\n# Left handed girls\nnum_left_handed_girls = num_girls_on_team // 2\nprint(f\"{num_left_handed_girls}\")\n\n# Right handed girls\nnum_right_handed_girls = num_girls_on_team - num_left_handed_girls\nprint(f\"{num_right_handed_girls}\")\n\n# Total number of girls on the team\nnum_girls_on_team = num_left_handed_girls + num_right_handed_girls\nprint(f\"{num_girls_on_team}\")\n\n# Total number of boys on the team\nnum_boys_on_team = num_left_handed_boys + num_right_handed_boys\nprint(f\"{num_boys_on_team}\")\n\n# Total number of people on the team\nnum_people_on_team = num_boys_on_team + num_girls_on_team\nprint(f\"{num_people_on_team}\")"
  },
  {
    "example_id": 607,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "history = 85\nscience = 106 + 109\n\nsenior_class = history + science\nprint(f\"{senior_class}\")"
  },
  {
    "example_id": 608,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "6.0",
      "2.0",
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import statistics\n\nnumbers = [2, 4, 6, 8, 10]\n\nprint(statistics.mean(numbers)) # 5\nprint(statistics.median(numbers)) # 5\nprint(statistics.mode(numbers)) # 8\nprint(max(numbers) - min(numbers)) # 2"
  },
  {
    "example_id": 609,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(7.5 - 5.5)"
  },
  {
    "example_id": 610,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "1.0",
      "1.0",
      "2.0",
      "9.0",
      "6.0",
      "6.0",
      "9.0",
      "6.0",
      "6.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# define variables\na, b = symbols('a b')\n\n# define equations\neq1 = a / b - 6 + (6 * b)\n\n# solve for a\na_val = solve(eq1, a)\n\n# solve for b\nb_val = solve(eq1, b)\n\n# print solutions\nprint(f\"a: {a_val}\")\nprint(f\"b: {b_val}\")"
  },
  {
    "example_id": 611,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "max_length = 72\nprint(max_length)"
  },
  {
    "example_id": 612,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "# Define Variables\nh = 4 * math.sqrt(2)\nb = 2 * h\n\n# Find Area\narea = (h * b) / 2\n\n# Print Answer\nprint(f\"The area of the triangle is {area:.2f}\")"
  },
  {
    "example_id": 613,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def prime_factors(n):\n    i = 2\n    factors = []\n    while i ** 2 <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\nprint(sum_prime_factors(735))"
  },
  {
    "example_id": 614,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1*1*1*1*1*1)"
  },
  {
    "example_id": 615,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "side_a = 10\nside_b = 10\nside_a_new = side_a * 0.6\nside_b_new = side_b * 1.5\narea_old = side_a * side_b\narea_new = side_a_new * side_b_new\npercent_decrease = (area_old - area_new) / area_old\nprint(percent_decrease * 100)"
  },
  {
    "example_id": 616,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7847.669717820699"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# create variables\na = 12\nb = a * 2\nc = a * 3\n\n# find the sum of the lengths of the sides\nx = a + b + c\n\n# find the perimeter of the triangle\np = 2 * x\n\n# find the area of the triangle\narea = (sqrt(p * (p - a) * (p - b) * (p - c))) / 4\n\n# find the length of the longest side\nlongest = 2 * area\n\n# print the result\nprint(f\"The length of the longest side of the triangle is {longest} meters\")"
  },
  {
    "example_id": 617,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0",
      "48.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "# Define variables\nn = 48\nm = 47\nd = 100\n\n# Calculate answer\ndef exit_distance(n, m):\n    return (n - m) * 6\n\nanswer = exit_distance(n, m)\n\n# Check answer\nif answer > d:\n    print(f\"{answer:.2f}\")\nelse:\n    print(\"There is no possible distance between exit 47 and exit 48.\")"
  },
  {
    "example_id": 618,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = 2 * math.pi / 144\nn = int(round(1 / x))\nprint(n)"
  },
  {
    "example_id": 619,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "numbers = ['1', '3', '6', '7']\n\nprimes = []\nfor i in numbers:\n    for j in numbers:\n        for k in numbers:\n            if i == j or i == k or j == k:\n                continue\n            else:\n                if int(i) * int(j) * int(k) == 360:\n                    primes.append(int(i) * int(j) * int(k))\n\nprint(len(primes))"
  },
  {
    "example_id": 620,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(5625**0.5)"
  },
  {
    "example_id": 621,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Define variables\nn = symbols('n')\n\n# Define formula\nangles = [1070, n * 1070]\n\n# Define equation\nangles_sum = sum(angles)\n\n# Define solution\nsolution = solve(angles_sum - 360, n)\n\n# Print solution\nprint(f\"{solution[0]:.0f}\")"
  },
  {
    "example_id": 622,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "243.0"
    ],
    "annotated_answers": [
      "9604.0"
    ],
    "solution": "# create a list of numbers\nnumber_list = []\n\n# iterate over all possible combinations of digits\nfor num1 in range(1, 7):\n    for num2 in range(1, 7):\n        for num3 in range(1, 7):\n            for num4 in range(1, 7):\n                for num5 in range(1, 7):\n                    # check if number is odd and has 5 digits\n                    if num1 % 2!= 0 and num2 % 2!= 0 and num3 % 2!= 0 and num4 % 2!= 0 and num5 % 2!= 0 and len(str(num1 * 10000 + num2 * 1000 + num3 * 100 + num4 * 10 + num5)) == 5:\n                        # add number to list\n                        number_list.append(num1 * 10000 + num2 * 1000 + num3 * 100 + num4 * 10 + num5)\n\n# print the number of odd five-digit counting numbers\nprint(len(number_list))"
  },
  {
    "example_id": 623,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "# perimeter of one of the triangles is 21\ns = 21\n# perimeter of a hexagon is 6s\nprint(6*s)"
  },
  {
    "example_id": 624,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0",
      "22.0",
      "22.0",
      "57.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# Create a list of trapezoid's perimeter\nperimeter = [5, 5, 3, 9]\n\n# Create a list of trapezoid's area\narea = [5, 5, 3, 9]\n\n# Create a list of trapezoid's height\nheight = [9, 9, 4.5, 4.5]\n\n# Create a list of trapezoid's base\nbase = [15, 15, 13.5, 13.5]\n\n# Create a list of trapezoid's volume\nvolume = []\n\n# Calculate the volume of each trapezoid\nfor i in range(len(area)):\n    volume.append(area[i] * height[i])\n\n# Calculate the sum of all trapezoid's volume\ntotal_volume = sum(volume)\n\n# Calculate the sum of all trapezoid's area\ntotal_area = sum(area)\n\n# Calculate the sum of all trapezoid's perimeter\ntotal_perimeter = sum(perimeter)\n\n# Calculate the sum of all trapezoid's base\ntotal_base = sum(base)\n\n# Print the result\nprint(f\"The sum of all trapezoid's volume is: {total_volume}\")\nprint(f\"The sum of all trapezoid's area is: {total_area}\")\nprint(f\"The sum of all trapezoid's perimeter is: {total_perimeter}\")\nprint(f\"The sum of all trapezoid's base is: {total_base}\")"
  },
  {
    "example_id": 625,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6105.0"
    ],
    "annotated_answers": [
      "957.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 111):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 626,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "800.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "furlongs = 2800\nfortnights = 2\nmiles = furlongs * 8\ndays = fortnights * 14\navg_miles = miles / days\nprint(f\"{avg_miles:.2f}\")"
  },
  {
    "example_id": 627,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "number = 5\nprint(10 + 5 * number)"
  },
  {
    "example_id": 628,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1188.0"
    ],
    "annotated_answers": [
      "1188.0"
    ],
    "solution": "area = 12 * 9 * 11\nprint(area)"
  },
  {
    "example_id": 629,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "perimeter = 9 + 10 + 11\nprint(perimeter)"
  },
  {
    "example_id": 630,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "0.75",
      "0.5",
      "1.0",
      "2.0",
      "0.75",
      "0.5"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "# Variables\nx = symbols('x')\ny = symbols('y')\n\n# Define equation\neq = (x + 0.5)**2 + (y + 0.5)**2 - 1\n\n# Solve equation\nsol = solve(eq, y)\n\n# Print result\nprint(sol)"
  },
  {
    "example_id": 631,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(0**5 + (-1)**4)"
  },
  {
    "example_id": 632,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "5.0",
      "2.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "1.0",
      "2.0",
      "4782969.0",
      "0.00015241579027587258",
      "0.012345679012345678",
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Create a variable x\nx = symbols('x')\n\n# Use the solve function to find the value of x\nx = solve(x**4 - 3*x**2 + 1, x)\n\n# Print the value of x\nprint(x)\n\n# Use the math module to calculate 3^14\nprint(math.pow(3, 14))\n\n# Use the math module to calculate 3^(-8)\nprint(math.pow(3, -8))\n\n# Use the math module to calculate 3^(-4)\nprint(math.pow(3, -4))\n\n# Use the math module to calculate 3^(-4) * 3^(-8) * 3^14\nprint(math.pow(3, -4) * math.pow(3, -8) * math.pow(3, 14))"
  },
  {
    "example_id": 633,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "print(16/25 * (5/2)**4)"
  },
  {
    "example_id": 634,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "# Set the sides of the triangle ABC\na = 3\nb = 4\nc = 5\n\n# Calculate the perimeter of triangle ABC\nP = a + b + c\n\n# Calculate the perimeter of the nine-sided figure\nF = 3 * (a + b + c)\n\n# Print the perimeter of the nine-sided figure\nprint(f\"{F:.2f}\")"
  },
  {
    "example_id": 635,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "# Variables\nn = 3 # number of teams\nm = 4 # number of players per team\n\n# Total number of handshakes\nhandshakes = n * m * (m-1) / 2 + n * m * (m-1) / 2 + n * m * (m-1) / 2\n\nprint(handshakes)"
  }
]