[
  {
    "example_id": 0,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "print(64**(3/2))"
  },
  {
    "example_id": 1,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "1.25"
    ],
    "solution": "distance = math.sqrt((0.5 + 0.5)**2 + (0.75)**2)\nprint(distance)"
  },
  {
    "example_id": 2,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "114.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "sale = 54*1 + 20*2 + 35\ncost = 15\nprint(f\"{sale - cost}\")"
  },
  {
    "example_id": 3,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "1584.0"
    ],
    "solution": "import itertools\n\nballs = list(range(1, 13))\nn = 3\n\ndef draw_balls(balls, n):\n    for perm in itertools.permutations(balls, n):\n        if perm[0]!= perm[1]:\n            yield perm\n\nprint(list(draw_balls(balls, n)))"
  },
  {
    "example_id": 4,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110.0"
    ],
    "annotated_answers": [
      "330.0"
    ],
    "solution": "# 11 * 10 = 110\nprint(110)"
  },
  {
    "example_id": 5,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.745056497175141"
    ],
    "annotated_answers": [
      "3.7"
    ],
    "solution": "x = 37/12\ny = 260/59\nprint((x+y)/2)"
  },
  {
    "example_id": 6,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pencils = 13\npencils_in_box = math.ceil(pencils / 20)\npens = 9\npens_in_box = math.ceil(pens / 20)\nneither = 3\nneither_in_box = math.ceil(neither / 20)\n\nanswer = pencils_in_box * pens_in_box - neither_in_box\nprint(answer)"
  },
  {
    "example_id": 7,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "area = (18 / 2) ** 2\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 8,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "print(math.sqrt(15 * 35 * 21))"
  },
  {
    "example_id": 9,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9899.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "print(99*100 - 1)"
  },
  {
    "example_id": 10,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "5.0",
      "7.0",
      "11.0",
      "12.0",
      "13.0",
      "16.0",
      "17.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if count % 2 == 0:\n        return count // 2\n    else:\n        return count // 2 + 1\n\ndef is_odd_divisor_count(n):\n    return count_divisors(n) % 2 == 1\n\ndef list_odd_divisor_count(n):\n    return [x for x in range(1, n) if is_odd_divisor_count(x)]\n\nprint(list_odd_divisor_count(100))"
  },
  {
    "example_id": 11,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1518.0"
    ],
    "annotated_answers": [
      "1518.0"
    ],
    "solution": "# smallest prime numbers\np1 = 2\np2 = 3\np3 = 5\np4 = 7\n\n# smallest composite numbers greater than 0\nc1 = 4\nc2 = 6\nc3 = 8\nc4 = 9\n\n# product of the four smallest prime numbers\nproduct1 = p1 * p2 * p3 * p4\n\n# product of the four smallest composite numbers greater than 0\nproduct2 = c1 * c2 * c3 * c4\n\n# positive difference\nprint(product1 - product2)"
  },
  {
    "example_id": 12,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "print(lcm(72, 96))"
  },
  {
    "example_id": 13,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.40812452820854",
      "134"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "x = 107 * 109 ** 5\nexponent = 11\nprint(x ** exponent)"
  },
  {
    "example_id": 14,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 6\nb = 7\nc = 8\nd = 2\ne = 8\nf = 7\n\nans = (a*b*c + d*e*f) / (e*f)\n\nprint(ans)"
  },
  {
    "example_id": 15,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "218.81"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print(round(14.7923412**2, 2))"
  },
  {
    "example_id": 16,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    numbers = []\n    for i in range(10, 50):\n        if i % i % 10 == 0:\n            numbers.append(i)\n    return numbers\n\nprint(number_of_whole_numbers_between_10_and_50(64))"
  },
  {
    "example_id": 17,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 10\ny = 50\nans = lcm(x, y)\nprint(ans)"
  },
  {
    "example_id": 18,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "777.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "largest_multiple = 800 - 800 % 37\nprint(largest_multiple)"
  },
  {
    "example_id": 19,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.4"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "distance = math.sqrt((2.5**2) - (0.7**2))\nprint(distance)"
  },
  {
    "example_id": 20,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = sum([13, 14, 22, 52, 63, 74])\na = round(a/10)*10\n\nb = sum([round(i/10)*10 for i in [13, 14, 22, 52, 63, 74]])\n\nprint(a-b)"
  },
  {
    "example_id": 21,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "number_of_multiples_of_6_less_than_20 = 0\nnumber_of_multiples_of_3_less_than_20 = 0\nfor i in range(1, 20):\n    if i % 6 == 0:\n        number_of_multiples_of_6_less_than_20 += 1\n    if i % 3 == 0:\n        number_of_multiples_of_3_less_than_20 += 1\nprint(number_of_multiples_of_6_less_than_20 - number_of_multiples_of_3_less_than_20)"
  },
  {
    "example_id": 22,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3 + 4\nprint(x)"
  },
  {
    "example_id": 23,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "perimeter = 56\narea = perimeter * lcm(10,50) / lcm(10,50)\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 24,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "15.0",
      "18.0",
      "21.0",
      "24.0",
      "27.0",
      "30.0",
      "33.0",
      "36.0",
      "39.0",
      "42.0",
      "45.0",
      "48.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "n = 10\nwhile n <= 50:\n    if n % 3 == 0:\n        print(n)\n    n = n + 1"
  },
  {
    "example_id": 25,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "overall_average = (84*25 + 66*20)/(25 + 20)\nprint(overall_average)"
  },
  {
    "example_id": 26,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "points = [5, -2, 3]\npoints = [5, -2, 3]\n\nmax_score = 0\n\n# for i in range(len(points)):\n#     for j in range(i+1, len(points)):\n#         max_score = max(max_score, points[i] * points[j])\n\n# print(max_score)\n\nfor i in range(len(points)):\n    for j in range(len(points)):\n        max_score = max(max_score, points[i] * points[j])\n\nprint(max_score)"
  },
  {
    "example_id": 27,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "N = 11\nM = 20\nprint(N*M)"
  },
  {
    "example_id": 28,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.5",
      "0.3333333333333333",
      "2.0",
      "1.0",
      "0.6666666666666666",
      "3.0",
      "1.5",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "unique_values = [4/4, 4/8, 4/12, 8/4, 8/8, 8/12, 12/4, 12/8, 12/12]\nprint(unique_values)"
  },
  {
    "example_id": 29,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = lcm(8,11)\nprint(a)"
  },
  {
    "example_id": 30,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "print(len(list(range(36, 93+1))))"
  },
  {
    "example_id": 31,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "area = 2 * (lcm(10,50) + lcm(10,50))\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 32,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "564.0"
    ],
    "annotated_answers": [
      "564.0"
    ],
    "solution": "print(round(563.5097))"
  },
  {
    "example_id": 33,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "13.0",
      "17.0",
      "19.0",
      "23.0",
      "29.0",
      "31.0",
      "37.0",
      "41.0",
      "43.0",
      "47.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "n = 10\nwhile n < 50:\n    if n % 2!= 0 and n % 3!= 0 and n % 5!= 0 and n % 7!= 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 34,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "y = 6\nprint(y**3)"
  },
  {
    "example_id": 35,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return lcm(n, 50) - lcm(n, 10)\n\nprint(number_of_whole_numbers_between_10_and_50(1))"
  },
  {
    "example_id": 36,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "area = 5 * 5\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 37,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(math.sqrt(6**2)-3)"
  },
  {
    "example_id": 38,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Define variables\nh = 5\nb = 8\nl = 20\n\n# Calculate hypotenuse of first triangle\nc1 = math.sqrt(h**2 + b**2)\n\n# Calculate hypotenuse of second triangle\nc2 = math.sqrt(l**2 + b**2)\n\n# Calculate legs of second triangle\na = lcm(h, b)\nb = a - h\n\n# Calculate legs of first triangle\na = lcm(h, b)\nb = a - h\n\n# Print solution\nprint(f\"{b:.0f}\")"
  },
  {
    "example_id": 39,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-17.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = -8\nx = 3*x + 7\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 40,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "3380.0"
    ],
    "solution": "# Solution\ndef number_of_whole_numbers_between_10_and_50(n):\n    count = 0\n    for i in range(10, 50):\n        if i % n == 0:\n            count += 1\n    return count\n\nprint(number_of_whole_numbers_between_10_and_50(3))"
  },
  {
    "example_id": 41,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "1.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import math\n\nfor m in range(1, 21):\n    for j in range(1, 21):\n        if m % j == 0:\n            print(f'Both win: Mary rolls {m}, Jenna rolls {j}')"
  },
  {
    "example_id": 42,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "participation_in_mathcounts = 28\nparticipation_in_science_club = 21\nparticipation_in_neither = 6\ntotal_students = 50\n\nparticipation_in_both = lcm(participation_in_mathcounts, participation_in_science_club)\n\nprint(f\"{participation_in_both}\")"
  },
  {
    "example_id": 43,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor i in range(1, 200):\n    if i % 4 == 0 and str(i)[-1] == \"2\":\n        count += 1\nprint(count)"
  },
  {
    "example_id": 44,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "82.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "N = 500 - 90 + 7 - 400 + 60 + 5\nprint(N)"
  },
  {
    "example_id": 45,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "25.0",
      "34.0",
      "43.0",
      "52.0",
      "61.0",
      "70.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def two_digit_positive_integers(n):\n    for i in range(10, 100):\n        if sum(int(j) for j in str(i)) == n:\n            yield i\n\nfor i in two_digit_positive_integers(7):\n    print(i)"
  },
  {
    "example_id": 46,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# \ndef number_of_whole_numbers_between_10_and_50(n):\n    return (lcm(10, 50) // 10) - 1\n\nprint(number_of_whole_numbers_between_10_and_50(5))"
  },
  {
    "example_id": 47,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    count = 0\n    for i in range(10, 51):\n        if i % n == 0:\n            count += 1\n    return count\n\nprint(number_of_whole_numbers_between_10_and_50(6))"
  },
  {
    "example_id": 48,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = (-345)**4\nx = x**2\nx = x**0\nx = x**-2\nx = x**-4\nprint(x)"
  },
  {
    "example_id": 49,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "5.0",
      "7.0",
      "9.0",
      "11.0",
      "13.0",
      "15.0",
      "17.0",
      "19.0"
    ],
    "annotated_answers": [
      "4007.0"
    ],
    "solution": "num = 1\nwhile num <= 2004:\n    if num % 2 == 1:\n        print(num)\n        num += 1\n    else:\n        num += 1"
  },
  {
    "example_id": 50,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# find the least prime number which is the sum of two distinct positive perfect squares\nx = (2**2) + (3**2)\ny = (4**2) + (5**2)\nz = (6**2) + (7**2)\n\n# find the least prime number\nleast_prime = x\nif y < least_prime:\n    least_prime = y\nif z < least_prime:\n    least_prime = z\n\nprint(f\"{least_prime}\")"
  },
  {
    "example_id": 51,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "3.0",
      "6.0",
      "9.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "for x in range(10):\n    if (341400 + x) % 3 == 0:\n        print(x)"
  },
  {
    "example_id": 52,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "history_takers = 126\nscience_takers = 129\nboth_takers = history_takers + science_takers\nprint(both_takers)"
  },
  {
    "example_id": 53,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-160.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "# lcm(a, b) = a*b / gcd(a, b)\n# lcm(5, -32) = 5*(-32) / gcd(5, -32)\n# lcm(5, -32) = 5*(-32) / 32\n# lcm(5, -32) = -160\n# -160 is the smallest multiple of 5 greater than -32\nprint(-160)"
  },
  {
    "example_id": 54,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(9)"
  },
  {
    "example_id": 55,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "# \nprint(lcm(10,50))"
  },
  {
    "example_id": 56,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10090.0"
    ],
    "solution": "n = 1000\n\ndef number_of_whole_numbers_between_10_and_50(n):\n    count = 0\n    for i in range(10, 50):\n        if str(i).count(\"0\") == n:\n            count += 1\n    return count\n\nprint(number_of_whole_numbers_between_10_and_50(n))"
  },
  {
    "example_id": 57,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.2",
      "8.0",
      "6.1"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "# Calculate median\nmedian = (8+6+4+2+1)/5\nprint(f\"Median = {median}\")\n\n# Calculate mode\nmode = 8\nprint(f\"Mode = {mode}\")\n\n# Calculate mean\nmean = (median + mode) / 2\nprint(f\"Mean = {mean}\")"
  },
  {
    "example_id": 58,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9800.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "lcm = 14 * 20 * 35\nprint(lcm)"
  },
  {
    "example_id": 59,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return sum(range(10, 50))\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_sum_of_cubes(n):\n    for i in range(1, int(n ** 0.5) + 1):\n        for j in range(1, int(n ** 0.5) + 1):\n            for k in range(1, int(n ** 0.5) + 1):\n                if i ** 3 + j ** 3 + k ** 3 == n:\n                    return True\n    return False\n\ndef find_prime_sum_of_cubes(n):\n    for i in range(1, n):\n        if is_prime(i) and is_sum_of_cubes(i):\n            return i\n\nprint(find_prime_sum_of_cubes(100))"
  },
  {
    "example_id": 60,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.2"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "flour_needed = 15\nnumber_of_cookies = 20\ncookies_needed = 144\n\ncookies_needed = 144\n\nflour_needed = cookies_needed/number_of_cookies\n\nprint(flour_needed)"
  },
  {
    "example_id": 61,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "113.09733552923255",
      "113.09733552923255",
      "113.09733552923255",
      "153.93804002589985"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import math\n\nradius_of_smallest_circle = 6\n\narea_of_smallest_circle = math.pi * radius_of_smallest_circle ** 2\n\narea_of_ring = area_of_smallest_circle\n\nradius_of_largest_circle = math.sqrt(area_of_ring / math.pi)\n\nradius_of_second_largest_circle = 12 - radius_of_largest_circle\n\narea_of_second_largest_circle = math.pi * radius_of_second_largest_circle ** 2\n\nradius_of_third_largest_circle = 13 - radius_of_second_largest_circle\n\narea_of_third_largest_circle = math.pi * radius_of_third_largest_circle ** 2\n\nprint(area_of_smallest_circle, area_of_ring, area_of_second_largest_circle, area_of_third_largest_circle)"
  },
  {
    "example_id": 62,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(8-4/2-1)"
  },
  {
    "example_id": 63,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.5"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = (5**2 - 2) / 2 - 1\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 64,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "k = 0\nfor i in range(10, 51):\n    if 2/3 < i/27 < 8/9:\n        k += 1\nprint(k)"
  },
  {
    "example_id": 65,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "9.0",
      "9.0",
      "9.0",
      "9.0",
      "9.0",
      "9.0",
      "9.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def divisible_by_n(n):\n    if n % 10 == 0:\n        return 10\n    else:\n        return 9\n\nprint(divisible_by_n(1))\nprint(divisible_by_n(2))\nprint(divisible_by_n(3))\nprint(divisible_by_n(4))\nprint(divisible_by_n(5))\nprint(divisible_by_n(6))\nprint(divisible_by_n(7))\nprint(divisible_by_n(8))\nprint(divisible_by_n(9))\nprint(divisible_by_n(0))"
  },
  {
    "example_id": 66,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "print(600 / 3)"
  },
  {
    "example_id": 67,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88920.0"
    ],
    "annotated_answers": [
      "247000.0"
    ],
    "solution": "purchase_price = (0.8 * 49400) + 49400\nprint(purchase_price)"
  },
  {
    "example_id": 68,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# 10 + 20 + 30 + 40 + 50 = 150\nprint(lcm(10,20,30,40,50))\n\n\n# 10, 20, 30, 40, 50\nprint(divisible_by_n(10,20,30,40,50))"
  },
  {
    "example_id": 69,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42500.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "total = 0\nfor i in range(10, 50):\n    total += lcm(i, i)\n    total += lcm(i, i+1)\nprint(total)"
  },
  {
    "example_id": 70,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10272.0"
    ],
    "annotated_answers": [
      "636.0"
    ],
    "solution": "# calculate the number of times the clock chimes in a 24 hour period\ntime_per_hour = 2 * 15 + 4 * 30 + 6 * 45 + 8\n\n# calculate the number of hours in a day\nhours_in_day = 24\n\n# calculate the total number of times the clock chimes\ntotal_number_of_times = time_per_hour * hours_in_day\n\n# print the total number of times the clock chimes\nprint(total_number_of_times)"
  },
  {
    "example_id": 71,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.7"
    ],
    "annotated_answers": [
      "2.7"
    ],
    "solution": "print(round(2.745, 1))"
  },
  {
    "example_id": 72,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "7.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "number_of_whole_numbers_between_10_and_50 = lambda n: sum([divisible_by_n(n, i) for i in range(10, 50)])\n\ndivisible_by_n = lambda n, x: x % n == 0\n\nprint(number_of_whole_numbers_between_10_and_50(4))\nprint(number_of_whole_numbers_between_10_and_50(6))"
  },
  {
    "example_id": 73,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pentagon_diagonals = 5\nprint(pentagon_diagonals)"
  },
  {
    "example_id": 74,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def sum_of_digits(x):\n    return sum(int(y) for y in str(x))\n\ndef count_integers(start, end, sum):\n    count = 0\n    for i in range(start, end + 1):\n        if sum_of_digits(i) == sum:\n            count += 1\n    return count\n\nprint(count_integers(200, 300, 15))"
  },
  {
    "example_id": 75,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# area of pentagon\narea = (lcm(3, 4)**2)/2\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 76,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return lcm(n,10)\n\nprint(number_of_whole_numbers_between_10_and_50(10))"
  },
  {
    "example_id": 77,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef greatest_prime_factor(n):\n    return prime_factors(n)[-1]\n\ndef least_prime_factor(n):\n    return prime_factors(n)[0]\n\nprint(least_prime_factor(2000))\nprint(greatest_prime_factor(2000))\nprint(abs(greatest_prime_factor(2000) - least_prime_factor(2000)))"
  },
  {
    "example_id": 78,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Find the total area of the four smaller circles\narea_of_small_circles = 4 * math.pi * (4/2)**2\n\n# Find the total area of the four larger circles\narea_of_large_circles = 4 * math.pi * (4/2)**2 * 4\n\n# Find the ratio of the area of the large circles to the area of the small circles\nratio = area_of_large_circles / area_of_small_circles\n\n# Find the length of the radius of the large circle\nradius = 2 * math.sqrt(ratio)\n\n# Print the length of the radius of the large circle\nprint(f\"The length of the radius of the large circle is {radius:.2f} inches.\")"
  },
  {
    "example_id": 79,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "counter = 0\nfor i in range(1, 500):\n    if i % 3 == 0 and i % 4 == 0 and i % 5 == 0:\n        counter += 1\nprint(counter)"
  },
  {
    "example_id": 80,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Define variables\nstreet_count = 6\nhouse_count = 10\n\n# Define a function to count the total number of houses in a neighborhood\ndef count_houses(street_count, house_count):\n    total_houses = street_count * house_count\n    return total_houses\n\n# Call the function\nprint(count_houses(street_count, house_count))"
  },
  {
    "example_id": 81,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.33"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "distance = 20/60\nprint(f\"{distance:.2f}\")"
  },
  {
    "example_id": 82,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "234.0"
    ],
    "annotated_answers": [
      "234.0"
    ],
    "solution": "for i in range(201, 300):\n    if i % 36 == 18:\n        print(i)\n        break"
  },
  {
    "example_id": 83,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "# Given the conditions\n# x + 5 <= 8 and x is an integer\n# We can find the sum of all possible solutions by finding the sum of all the divisible integers between 10 and 50\n\n# First, we find the sum of all integers between 10 and 50\nsum_of_integers = sum_of_digits(50) - sum_of_digits(10)\n\n# Then, we find the sum of all divisible integers between 10 and 50\ndivisible_sum = sum_of_digits(50) - sum_of_digits(10) + 1\n\n# Finally, we find the sum of all possible solutions by subtracting the sum of all integers between 10 and 50 from the sum of all divisible integers between 10 and 50\npossible_solutions_sum = divisible_sum - sum_of_integers\n\nprint(f\"The sum of all possible solutions is: {possible_solutions_sum}\")"
  },
  {
    "example_id": 84,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.08"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Calculate the length of the longer leg of the smaller triangle\nlength_of_longer_leg = math.sqrt(16**2 - (16/3)**2)\nprint(f\"{length_of_longer_leg:.2f}\")"
  },
  {
    "example_id": 85,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "for i in range(1, 1000000, 2):\n    if i == 17:\n        print(i)"
  },
  {
    "example_id": 86,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "appetizer = 5\nentree = 8\ndessert = 4\n\nmeals = appetizer * entree * dessert\nprint(meals)"
  },
  {
    "example_id": 87,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "gcf = 1\nfor i in range(1, min(518, 294) + 1):\n    if 518 % i == 0 and 294 % i == 0:\n        gcf = i\n        break\nprint(gcf)"
  },
  {
    "example_id": 88,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-200.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "# BAD = 110 degrees\n# CDA = 100 degrees\n# AFB = 60 degrees\n# DCF = 100 degrees\n\n# BAD = 110 degrees\nBAD = 110\n\n# CDA = 100 degrees\nCDA = 100\n\n# AFB = 60 degrees\nAFB = 60\n\n# DCF = 100 degrees\nDCF = 100\n\n# FAD = 10 degrees\nFAD = 10\n\n# \nangle_AFD = 180 - BAD - CDA - AFB - DCF - FAD\n\n# \nprint(f\"{angle_AFD:.0f}\")"
  },
  {
    "example_id": 89,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(int((5*math.sqrt(3)) - (3*math.sqrt(5))))"
  },
  {
    "example_id": 90,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Import math library\nimport math\n\n# Import math library\nfrom math import lcm\n\n# Define the variables\nmexico_england = 30\nmexico = 7\nengland = 11\nboth = 4\n\n# Calculate the number of students not in either\nnot_mexico = mexico_england - mexico\nnot_england = mexico_england - england\nnot_both = both\n\n# Print the result\nprint(f\"The number of students not in either Mexico or England is {not_mexico + not_england + not_both}\")"
  },
  {
    "example_id": 91,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a = math.sqrt(56)\nb = math.sqrt(126)\nc = a * b\nprint(f\"{a+b:.0f}\")"
  },
  {
    "example_id": 92,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.5"
    ],
    "annotated_answers": [
      "84.5"
    ],
    "solution": "print(35.2 + 49.3)"
  },
  {
    "example_id": 93,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "def prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\nprint(sum_prime_factors(85085))"
  },
  {
    "example_id": 94,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def positive_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef product(my_list):\n    result = 1\n    for i in my_list:\n        result *= i\n    return result\n\nprint(product(positive_divisors(10)))"
  },
  {
    "example_id": 95,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# \ntotal_boxes = 4 * 3 * 2\nprint(total_boxes)"
  },
  {
    "example_id": 96,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "4.0",
      "6.0",
      "4.0",
      "2.0",
      "3.0",
      "4.0",
      "6.0",
      "8.0",
      "12.0",
      "24.0",
      "59.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    count = 0\n    for i in range(10, 51):\n        if i % n == 0:\n            count += 1\n    return count\n\ndef divisible_by_n(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef sum_of_digits(x):\n    sum = 0\n    for digit in str(x):\n        sum += int(digit)\n    return sum\n\ndef count_integers(start, end, sum):\n    count = 0\n    for i in range(start, end + 1):\n        if sum_of_digits(i) == sum:\n            count += 1\n    return count\n\ndef prime_factors(n):\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\ndef sum_prime_factors(n):\n    sum = 0\n    for i in prime_factors(n):\n        sum += i\n    return sum\n\nprint(number_of_whole_numbers_between_10_and_50(10))\nprint(divisible_by_n(10))\nprint(sum_of_digits(42))\nprint(count_integers(10, 50, 10))\nprint(prime_factors(24))\nprint(sum_prime_factors(24))"
  },
  {
    "example_id": 97,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "666000.0"
    ],
    "annotated_answers": [
      "666000.0"
    ],
    "solution": "print((3**2)*(2**4)*(37)*(5**3))"
  },
  {
    "example_id": 98,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "def smallest_odds(n):\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            return False\n    return True\n\nfor i in range(1, 1000000):\n    if smallest_odds(i):\n        print(i)\n        break"
  },
  {
    "example_id": 99,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "0.0952598689224204"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(20*((2/5)**2)*((3/4)**2)*(5/9)**5)"
  },
  {
    "example_id": 100,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "90.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "# Ed's highest test score\nhighest_test_score = 87 + 3\nprint(f\"{highest_test_score}\")"
  },
  {
    "example_id": 101,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    count = 0\n    for i in range(10, 50):\n        if i % n == 0:\n            count += 1\n    return count\n\ndef divisible_by_n(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef sum_of_digits(x):\n    return sum(int(digit) for digit in str(x))\n\ndef count_integers(start, end, sum):\n    count = 0\n    for i in range(start, end+1):\n        if sum_of_digits(i) == sum:\n            count += 1\n    return count\n\ndef prime_factors(n):\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\ndef smallest_odds(n):\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            count += 1\n    return count\n\n# Question\nn = 120\ncount_integers(10, 50, sum_of_digits(n))"
  },
  {
    "example_id": 102,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "def difference(n, d):\n    return n - d\n\n\ndef main():\n    n, d = 5, 8\n    print(f\"{difference(n, d):.2f}\")"
  },
  {
    "example_id": 103,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(0**5**6431564)"
  },
  {
    "example_id": 104,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.8"
    ],
    "annotated_answers": [
      "1.125"
    ],
    "solution": "a = 0.2 + 0.6\nprint(f\"{a:.2f}\")"
  },
  {
    "example_id": 105,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "for i in range(2, 50):\n    if i % 3 == 2 and i % 4 == 2 and i % 5 == 2 and i % 6 == 2:\n        print(i)"
  },
  {
    "example_id": 106,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(-1)"
  },
  {
    "example_id": 107,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "15.0",
      "15.0",
      "15.0",
      "10.0",
      "50.0",
      "15.0",
      "15.0",
      "15.0",
      "15.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# \ndef number_of_whole_numbers_between_10_and_50(n):\n    # your code here\n    return n\n\n# \ndef divisible_by_n(n):\n    # your code here\n    return n\n\n# \ndef sum_of_digits(x):\n    # your code here\n    return x\n\n# \ndef count_integers(start, end, sum):\n    # your code here\n    return start, end, sum\n\n# \ndef prime_factors(n):\n    # your code here\n    return n\n\n# \ndef sum_prime_factors(n):\n    # your code here\n    return n\n\n# \ndef smallest_odds(n):\n    # your code here\n    return n\n\nprint(number_of_whole_numbers_between_10_and_50(15))\nprint(divisible_by_n(15))\nprint(sum_of_digits(15))\nprint(count_integers(10, 50, 15))\nprint(prime_factors(15))\nprint(sum_prime_factors(15))\nprint(smallest_odds(15))"
  },
  {
    "example_id": 108,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "563.51"
    ],
    "annotated_answers": [
      "563.51"
    ],
    "solution": "print(round(563.5097, 2))"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "7.2"
    ],
    "solution": "import math\n\n# distance = math.sqrt((0.5 + 0.5)**2 + (0.75)**2)\n# print(f\"{distance:.2f}\")"
  },
  {
    "example_id": 110,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "13.18"
    ],
    "annotated_answers": [
      "13.18"
    ],
    "solution": "print(56.78 - 43.6)"
  },
  {
    "example_id": 111,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "9.0"
    ],
    "annotated_answers": [
      "22.5"
    ],
    "solution": "x = 0.1 * (120 - 30)\nprint(f\"{x:.1f}\")"
  },
  {
    "example_id": 112,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 40"
  },
  {
    "example_id": 113,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "70.0"
    ],
    "annotated_answers": [
      "147.0"
    ],
    "solution": "total_minutes = 7 * lcm(5,2)\nprint(f\"{total_minutes:.2f}\")"
  },
  {
    "example_id": 114,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "s = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39\ns = 39"
  },
  {
    "example_id": 115,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return sum(1 for i in range(10, 50) if str(i).count(\"6\") == n)\n\ndef divisible_by_n(n):\n    return sum(1 for i in range(10, 50) if i % n == 0)\n\ndef sum_of_digits(x):\n    return sum(int(i) for i in str(x))\n\ndef count_integers(start, end, sum):\n    return sum(1 for i in range(start, end) if sum_of_digits(i) == sum)\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\ndef smallest_odds(n):\n    return sum(i for i in range(1, n + 1) if i % 2 == 1)"
  },
  {
    "example_id": 116,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Find the greatest common divisor of 10 and 50\ngcd = lcm(10, 50)\n\n# Find the quotient\nquotient = 50 // gcd\n\n# Print the answer\nprint(quotient)"
  },
  {
    "example_id": 117,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def smallest_average(n):\n    min_avg = 1000000\n    for i in range(10, 50):\n        if i % 2 == 0 and sum_of_digits(i) % 2 == 0:\n            if count_integers(10, i, sum=n) > 0:\n                for j in range(10, 50):\n                    if j % 2 == 0 and sum_of_digits(j) % 2 == 0:\n                        if count_integers(i, j, sum=n) > 0:\n                            for k in range(10, 50):\n                                if k % 2 == 0 and sum_of_digits(k) % 2 == 0:\n                                    if count_integers(j, k, sum=n) > 0:\n                                        for l in range(10, 50):\n                                            if l % 2 == 0 and sum_of_digits(l) % 2 == 0:\n                                                if count_integers(k, l, sum=n) > 0:\n                                                    avg = (i + j + k + l) / n\n                                                    if avg < min_avg:\n                                                        min_avg = avg\n    return min_avg"
  },
  {
    "example_id": 118,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10617447681.0"
    ],
    "annotated_answers": [
      "103041.0"
    ],
    "solution": "print(103041**2)"
  },
  {
    "example_id": 119,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "total_cost = 3 * 4 * 12\nprint(total_cost)"
  },
  {
    "example_id": 120,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def triangle_altitude(b):\n    return b / 2\n\nprint(f\"{triangle_altitude(8):.2f}\")"
  },
  {
    "example_id": 121,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5040.0"
    ],
    "annotated_answers": [
      "5040.0"
    ],
    "solution": "import math\n\ndef combinations(n,r):\n    return math.factorial(n) / math.factorial(n-r)\n\nprint(combinations(10,4))"
  },
  {
    "example_id": 122,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.3636363636363635"
    ],
    "annotated_answers": [
      "1.36"
    ],
    "solution": "veal = 3/2.2\nprint(veal)"
  },
  {
    "example_id": 123,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcf(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a%b)\n\nprint(gcf(144,405))"
  },
  {
    "example_id": 124,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.73"
    ],
    "annotated_answers": [
      "0.73"
    ],
    "solution": "print(0.8 - 0.07)"
  },
  {
    "example_id": 125,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "def sum_of_next_three_scores(scores, sum):\n    scores_sum = sum(scores)\n    if scores_sum >= sum:\n        return True\n    else:\n        return False\n\n\ndef sum_of_next_three_scores(scores, sum):\n    scores_sum = sum(scores)\n    if scores_sum >= sum:\n        return True\n    else:\n        return False\n\n\ndef sum_of_next_three_scores(scores, sum):\n    scores_sum = sum(scores)\n    if scores_sum >= sum:\n        return True\n    else:\n        return False\n\n\ndef sum_of_next_three_scores(scores, sum):\n    scores_sum = sum(scores)\n    if scores_sum >= sum:\n        return True\n    else:\n        return False\n\n\ndef sum_of_next_three_scores(scores, sum):\n    scores_sum = sum(scores)\n    if scores_sum >= sum:\n        return True\n    else:\n        return False\n\n\ndef sum_of_next_three_scores(scores, sum):\n    scores_sum = sum(scores)\n    if scores_sum >= sum:\n        return True\n    else:\n        return False\n\n\ndef sum_of_next_three_scores(scores, sum):\n    scores_sum = sum(scores)\n    if scores_sum >= sum:\n        return True\n    else:\n        return False\n\n\ndef sum_of_next_three_scores(scores, sum):\n    scores_sum = sum(scores)\n    if scores_sum >= sum:\n        return True\n    else:\n        return False\n\n\ndef sum_of_next_three_scores(scores, sum):\n    scores_sum = sum(scores)\n    if scores_sum >= sum:\n        return True\n    else:\n        return False\n\n\ndef sum_of_next_three_scores(scores, sum):\n    scores_sum = sum(scores)\n    if scores_sum >= sum:\n        return True"
  },
  {
    "example_id": 126,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "# Define the number of stores at the North Area Mall\nnorth_area_mall_stores = 18\n\n\n# Define the number of stores at the University Mall\nuniversity_mall_stores = lcm(9, 90)\n\n\n# Print the number of stores at the University Mall\nprint(university_mall_stores)"
  },
  {
    "example_id": 127,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return int((n-10)*(n-11)/2)\n\n\ndef divisible_by_n(n):\n    return [i for i in range(10, 50) if i % n == 0]\n\n\ndef sum_of_digits(x):\n    return sum([int(digit) for digit in str(x)])\n\n\ndef count_integers(start, end, sum):\n    return sum([i for i in range(start, end+1) if sum_of_digits(i) == sum])\n\n\ndef prime_factors(n):\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\n\ndef smallest_odds(n):\n    return [i for i in range(1, n+1) if sum_prime_factors(i) % 2 == 1]\n\n\ndef gcf(a, b):\n    while a!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n\n\n\ndef answer(n, m):\n    return len(set(divisible_by_n(n) + divisible_by_n(m)))\n\n\n\nprint(answer(14, 42))"
  },
  {
    "example_id": 128,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return n * (n + 1) // 2\n\n\ndef divisible_by_n(n):\n    return n % 2 == 0\n\n\ndef sum_of_digits(x):\n    return sum(map(int, str(x)))\n\n\ndef count_integers(start, end, sum):\n    return sum(1 for i in range(start, end + 1) if sum_of_digits(i) == sum)\n\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\n\ndef smallest_odds(n):\n    return [i for i in range(1, n + 1) if i % 2 == 1 and i % 3 == 1 and i % 5 == 1]\n\n\ndef gcf(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef solution(n):\n    red_light = 2\n    yellow_light = 3\n    blue_light = 5\n    time = 7 * 60\n    count = 0\n    for i in range(time):\n        if divisible_by_n(i // red_light):\n            if divisible_by_n(i // yellow_light):\n                if divisible_by_n(i // blue_light):\n                    count += 1\n    return count"
  },
  {
    "example_id": 129,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.15"
    ],
    "annotated_answers": [
      "0.15"
    ],
    "solution": "print(3/20)"
  },
  {
    "example_id": 130,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3"
  },
  {
    "example_id": 131,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "120"
  },
  {
    "example_id": 132,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# \ngrade = 11"
  },
  {
    "example_id": 133,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Define a function that returns the number of whole numbers between 10 and 30\ndef number_of_whole_numbers_between_10_and_50(n):\n    return n - 10\n\n# Define a function that returns whether a number is divisible by 28\ndef divisible_by_n(n):\n    return n % 28 == 0\n\n# Define a function that returns the sum of the digits of a number\ndef sum_of_digits(x):\n    return sum(int(digit) for digit in str(x))\n\n# Define a function that returns the count of integers between 10 and 30 that are relatively prime with 28\ndef count_integers(start, end, sum):\n    return sum(n for n in range(start, end) if gcf(n, 28) == 1 and divisible_by_n(n))\n\n# Define a function that returns the greatest common factor of two numbers\ndef gcf(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Define a function that returns the sum of the prime factors of a number\ndef sum_prime_factors(n):\n    factors = prime_factors(n)\n    return sum(factors[i] for i in range(len(factors)))\n\n# Define a function that returns the smallest odd number greater than 1\ndef smallest_odds(n):\n    return n + 1\n\n# Define a function that returns the prime factors of a number\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# Define a function that returns the sum of the digits of the numbers between 10 and 30\ndef sum_digits(n):\n    return sum(sum_of_digits(x) for x in range(10, 30))\n\n# Calculate the sum of the"
  },
  {
    "example_id": 134,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(((1*2)+(3*4)-(5*6)+(7*8))*(9*0))"
  },
  {
    "example_id": 135,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "x = [70, 80, 90, 75, 80, 85]\ny = [70, 80, 90, 75, 80, 85]\nprint(sum(x)/len(x))"
  },
  {
    "example_id": 136,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "5 % 10 * 1200"
  },
  {
    "example_id": 137,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a = 10\nb = 50\n\ndef number_of_whole_numbers_between_10_and_50(n):\n    return (b - a) * n\n\ndef divisible_by_n(n):\n    return n * (n + 1) // 2\n\ndef sum_of_digits(x):\n    return sum(int(digit) for digit in str(x))\n\ndef count_integers(start, end, sum):\n    count = 0\n    for i in range(start, end + 1):\n        if sum_of_digits(i) == sum:\n            count += 1\n    return count\n\ndef prime_factors(n):\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n\ndef sum_prime_factors(n):\n    factors = prime_factors(n)\n    return sum(factors)\n\ndef smallest_odds(n):\n    odds = []\n    for i in range(1, n + 1):\n        if sum_of_digits(i) % 2 == 1:\n            odds.append(i)\n    return odds\n\ndef gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcf(a, b)\n\ndef solution(n):\n    return lcm(number_of_whole_numbers_between_10_and_50(n), divisible_by_n(n))"
  },
  {
    "example_id": 138,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1208.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return n - 10 + 1\n\n\ndef divisible_by_n(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n\ndef sum_of_digits(x):\n    if x == 0:\n        return 0\n    else:\n        return x % 10 + sum_of_digits(x // 10)\n\n\ndef count_integers(start, end, sum):\n    count = 0\n    for x in range(start, end + 1):\n        if sum_of_digits(x) == sum:\n            count += 1\n    return count\n\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\n\ndef smallest_odds(n):\n    odds = []\n    for i in range(n):\n        if i % 2!= 0:\n            odds.append(i)\n    return odds\n\n\ndef gcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcf(a, b)"
  },
  {
    "example_id": 139,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "72.0",
      "30.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "prime_numbers = []\nfor i in range(5):\n    prime_numbers.append(2)\n    for j in range(2, 10):\n        if prime_numbers[-1] % j == 0:\n            prime_numbers.append(prime_numbers[-1] + 1)\n            break\nprint(prime_numbers)\nprint(prime_numbers[0] * prime_numbers[1] * prime_numbers[2] * prime_numbers[3] * prime_numbers[4])\nprint(prime_numbers[0] * prime_numbers[1] * prime_numbers[2] * prime_numbers[3] * prime_numbers[4] % 42)"
  },
  {
    "example_id": 140,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 141,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import math\nx = 7\nprint(int((x - 5)/3))"
  },
  {
    "example_id": 142,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "short = 60 / 5\nprint(short)"
  },
  {
    "example_id": 143,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 25"
  },
  {
    "example_id": 144,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    # The number of whole numbers between 10 and 50 is 10 + 11 +... + 41\n    return sum(range(10, 51, 1))\n\ndef divisible_by_n(n):\n    return sum(range(1, n+1))\n\ndef sum_of_digits(x):\n    return sum(int(digit) for digit in str(x))\n\ndef count_integers(start, end, sum):\n    count = 0\n    for i in range(start, end+1):\n        if sum_of_digits(i) == sum:\n            count += 1\n    return count\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\ndef smallest_odds(n):\n    return sum(i for i in range(1, n+1, 2))\n\ndef gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef problem_30(n):\n    return sum_prime_factors(n) + smallest_odds(n)"
  },
  {
    "example_id": 145,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "326.5"
    ],
    "annotated_answers": [
      "326.5"
    ],
    "solution": "print(313.9 + 12.6)"
  },
  {
    "example_id": 146,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def simplify(a, b):\n    return (a**-3 * a**3)"
  },
  {
    "example_id": 147,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((1 + 2 * 3 * 4 * 5) / 11)"
  },
  {
    "example_id": 148,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "112.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "tree = 120 - 8\nprint(tree)"
  },
  {
    "example_id": 149,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "7.0"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return n * (n + 1) // 2\n\ndef divisible_by_n(n):\n    return (n + 1) // 2\n\ndef sum_of_digits(x):\n    return sum([int(digit) for digit in str(x)])\n\ndef count_integers(start, end, sum):\n    return sum(range(start, end + 1))\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\ndef smallest_odds(n):\n    return [i for i in range(1, n + 1) if i % 2!= 0]\n\ndef gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(sum_prime_factors(number_of_whole_numbers_between_10_and_50(4)))"
  },
  {
    "example_id": 150,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "from math import lcm\n\n# find least perfect square with 3 different prime factors\ndef least_perfect_square(n):\n    for i in range(1, n):\n        if i**2 % 3 == 0:\n            return i**2"
  },
  {
    "example_id": 151,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2097154.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 1\nb = 1\nc = 2\nd = -2\n\nsum = a**20 + b**20 + c**20 + d**20\nprint(sum)"
  },
  {
    "example_id": 152,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    \"\"\"\n    Returns the number of whole numbers between 10 and 50\n    \"\"\"\n    return lcm(10, 50)\n\ndef divisible_by_n(n):\n    \"\"\"\n    Returns the sum of the digits of n\n    \"\"\"\n    return sum(int(i) for i in str(n))\n\ndef sum_of_digits(x):\n    \"\"\"\n    Returns the sum of the digits of x\n    \"\"\"\n    return sum(int(i) for i in str(x))\n\ndef count_integers(start, end, sum):\n    \"\"\"\n    Returns the number of integers between start and end that are divisible by sum\n    \"\"\"\n    count = 0\n    for i in range(start, end + 1):\n        if i % sum == 0:\n            count += 1\n    return count\n\ndef prime_factors(n):\n    \"\"\"\n    Returns the prime factors of n\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef sum_prime_factors(n):\n    \"\"\"\n    Returns the sum of the prime factors of n\n    \"\"\"\n    return sum(prime_factors(n))\n\ndef smallest_odds(n):\n    \"\"\"\n    Returns the smallest odd divisor of n\n    \"\"\"\n    for i in range(1, n + 1):\n        if i % 2!= 0 and n % i == 0:\n            return i\n\ndef gcf(a, b):\n    \"\"\"\n    Returns the greatest common factor of a and b\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a"
  },
  {
    "example_id": 153,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# \ndef number_of_whole_numbers_between_10_and_50(n):\n    return sum(1 for i in range(10,50) if i%n==0)\n\n\n# \ndef divisible_by_n(n):\n    return sum(1 for i in range(1,50) if i%n==0)\n\n\n# \ndef sum_of_digits(x):\n    return sum(int(digit) for digit in str(x))\n\n\n# \ndef count_integers(start, end, sum):\n    return sum(1 for i in range(start,end+1) if sum_of_digits(i) == sum)\n\n\n# \ndef prime_factors(n):\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\n# \ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\n\n# \ndef smallest_odds(n):\n    return sum(1 for i in range(1,n+1) if i%2==1)\n\n\n# \ndef gcf(a,b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\n# \ndef solution(A, B, C, D):\n    return A*B*C*D/gcf(A,B)*gcf(B,C)*gcf(C,D)*gcf(D,A)"
  },
  {
    "example_id": 154,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "x = 65"
  },
  {
    "example_id": 155,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": ""
  },
  {
    "example_id": 156,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def area_of_right_triangle(side1, side2):\n    \"\"\"\n    Calculate the area of a right triangle.\n    \"\"\"\n    return (side1 * side2) / 2\n\n\n# Call the function\nprint(area_of_right_triangle(6, 6))"
  },
  {
    "example_id": 157,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "largest_prime_factor = 1391"
  },
  {
    "example_id": 158,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "48.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "d = lcm(48, 8)\nprint(d)"
  },
  {
    "example_id": 159,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# \ndef number_of_whole_numbers_between_10_and_50(n):\n    return sum(range(10, 50 + 1, 1))\n\n# \ndef divisible_by_n(n):\n    return [x for x in range(1, n + 1) if x % n == 0]\n\n# \ndef sum_of_digits(x):\n    return sum(int(digit) for digit in str(x))\n\n# \ndef count_integers(start, end, sum):\n    return sum(range(start, end + 1, sum))\n\n# \ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# \ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\n# \ndef smallest_odds(n):\n    return [x for x in range(1, n + 1) if x % 2!= 0]\n\n# \ndef gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a"
  },
  {
    "example_id": 160,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "count = 0\nfor i in range(100, 1000):\n    if i % 13 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 161,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "new_price = 60 * 0.75\nprint(new_price)"
  },
  {
    "example_id": 162,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "def is_emirp(n):\n    if n < 10:\n        return False\n    if n % 10 in [2, 5, 6, 8]:\n        return False\n    if sum_of_digits(n) % 2 == 0:\n        return False\n    if lcm(n, 10)!= n:\n        return False\n    if n % 2 == 0:\n        return False\n    if sum_of_digits(n) % 2 == 0:\n        return False\n    if sum_of_digits(n) % 3 == 0:\n        return False\n    if sum_of_digits(n) % 5 == 0:\n        return False\n    if sum_of_digits(n) % 7 == 0:\n        return False\n    if sum_of_digits(n) % 11 == 0:\n        return False\n    if sum_of_digits(n) % 13 == 0:\n        return False\n    if sum_of_digits(n) % 17 == 0:\n        return False\n    if sum_of_digits(n) % 19 == 0:\n        return False\n    if sum_of_digits(n) % 23 == 0:\n        return False\n    if sum_of_digits(n) % 29 == 0:\n        return False\n    if sum_of_digits(n) % 31 == 0:\n        return False\n    if sum_of_digits(n) % 37 == 0:\n        return False\n    if sum_of_digits(n) % 41 == 0:\n        return False\n    if sum_of_digits(n) % 43 == 0:\n        return False\n    if sum_of_digits(n) % 47 == 0:\n        return False\n    if sum_of_digits(n) % 53 == 0:\n        return False\n    if sum_of_digits(n) % 59 == 0:\n        return False"
  },
  {
    "example_id": 163,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "30.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "def find_javelins(girls, boys):\n    total_girls = girls * 3\n    total_boys = boys * 5\n    for i in range(girls, boys):\n        if total_girls > total_boys:\n            total_girls += 3\n        else:\n            total_boys += 5\n    return total_girls\n\nprint(find_javelins(10, 50))"
  },
  {
    "example_id": 164,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "def sum_composites(start, end):\n    sum = 0\n    for i in range(start, end):\n        if i % 2!= 0:\n            sum += i\n    return sum\n\nprint(sum_composites(10, 20))"
  },
  {
    "example_id": 165,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.99999999999999"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "expression = (6 ** 0.5 + 24 ** 0.5) ** 2\nprint(expression)"
  },
  {
    "example_id": 166,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "print((4*12)-(4+12))"
  },
  {
    "example_id": 167,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "# number of games\nnumber_of_games = 12"
  },
  {
    "example_id": 168,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print(22/2)"
  },
  {
    "example_id": 169,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "-12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# positive\npositive = 12 // 1\n# negative\nnegative = 12 // -1\nprint(positive, negative)"
  },
  {
    "example_id": 170,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x_satisfy = 1\nprint(x_satisfy)"
  },
  {
    "example_id": 171,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "for i in range(1, 100000):\n    if i % 16 == 0 and i % 15 == 0 and i % 12 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 172,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def smallest_prime_factors(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n\nn = smallest_prime_factors(300) * smallest_prime_factors(300)\nprint(n)\nprint(sum(map(int, str(n))))"
  },
  {
    "example_id": 173,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "lcm(40, 30) + lcm(40, 20)"
  },
  {
    "example_id": 174,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return lcm(n, 10)\n\n\ndef divisible_by_n(n):\n    for i in range(n, 51, n):\n        if i % n == 0:\n            return i\n\n\ndef sum_of_digits(x):\n    return sum(int(digit) for digit in str(x))\n\n\ndef count_integers(start, end, sum):\n    count = 0\n    for i in range(start, end):\n        if sum_of_digits(i) == sum:\n            count += 1\n    return count\n\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\n\ndef smallest_odds(n):\n    for i in range(1, n+1, 2):\n        if i % 3 == 0:\n            return i\n\n\ndef gcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a % b)"
  },
  {
    "example_id": 175,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "41.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return sum(1 for i in range(n) if 10 <= i <= 50)\n\ndef divisible_by_n(n):\n    return sum(1 for i in range(n) if i % 2 == 0)\n\ndef sum_of_digits(x):\n    return sum(map(int, str(x)))\n\ndef count_integers(start, end, sum):\n    return sum(1 for i in range(start, end) if sum_of_digits(i) == sum)\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\ndef smallest_odds(n):\n    return sum(i for i in range(1, n + 1) if i % 2 == 1)\n\ndef gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(number_of_whole_numbers_between_10_and_50(1000000000))"
  },
  {
    "example_id": 176,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 1/5\nprint(x)"
  },
  {
    "example_id": 177,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "79200.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "distance = 5280 * 15\nprint(distance)"
  },
  {
    "example_id": 178,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "83.0"
    ],
    "solution": "x = solve(0.5*3*x - 9 - 37, x)\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 179,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "289.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "# Area = (Perimeter / 4) * (Perimeter / 4)\nperimeter = 68\ndiagonal = 30\narea = (perimeter / 4) * (perimeter / 4)\nprint(f\"The area of the rhombus is {area:.2f}\")"
  },
  {
    "example_id": 180,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = 0.5"
  },
  {
    "example_id": 181,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return int((50-10)*n)\n\n\ndef divisible_by_n(n):\n    return int(n)\n\n\ndef sum_of_digits(x):\n    return int(x)\n\n\ndef count_integers(start, end, sum):\n    return int(sum)\n\n\ndef prime_factors(n):\n    return int(n)\n\n\ndef sum_prime_factors(n):\n    return int(n)\n\n\ndef smallest_odds(n):\n    return int(n)\n\n\ndef gcf(a,b):\n    return int(a*b)"
  },
  {
    "example_id": 182,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# \ndef solution(a,b):\n    return lcm(a,b)"
  },
  {
    "example_id": 183,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75",
      "0.75",
      "0.75",
      "2.25"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# The area of triangle $ABD$\narea_1 = (0.5 * 0.5 + 0.5 * 0.5 + 0.5 * 0.5)\nprint(area_1)\n\n# The area of triangle $BAC$\narea_2 = (0.5 * 0.5 + 0.5 * 0.5 + 0.5 * 0.5)\nprint(area_2)\n\n# The area of triangle $BAD$\narea_3 = (0.5 * 0.5 + 0.5 * 0.5 + 0.5 * 0.5)\nprint(area_3)\n\n# The area of triangle $ABD$ + the area of triangle $BAC$ + the area of triangle $BAD$\ntotal_area = area_1 + area_2 + area_3\nprint(total_area)"
  },
  {
    "example_id": 184,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3400.0"
    ],
    "solution": "x = 5000"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "lcm(5,7) * 0.5"
  },
  {
    "example_id": 186,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "36**10 // 6**19"
  },
  {
    "example_id": 187,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20202.0"
    ],
    "annotated_answers": [
      "89898.0"
    ],
    "solution": "for i in range(10000, 99999):\n    if str(i) == str(i)[::-1] and i % 6 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 188,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# 8210 = 8.21 \\times 10^3\nprint(3)"
  },
  {
    "example_id": 189,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "class_average = ((20*80 + 8*90 + 2*100)/30)\nprint(class_average)"
  },
  {
    "example_id": 190,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "# \ndef number_of_whole_numbers_between_10_and_50(n):\n    return int(lcm(10,50)/n)\n\n# \ndef divisible_by_n(n):\n    return int(sum(i for i in range(10,51) if i%n==0))\n\n# \ndef sum_of_digits(x):\n    return sum(int(y) for y in str(x))\n\n# \ndef count_integers(start, end, sum):\n    count = 0\n    for i in range(start, end+1):\n        if sum_of_digits(i) == sum:\n            count += 1\n    return count\n\n# \ndef prime_factors(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        while n%i == 0:\n            factors.append(i)\n            n = n//i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# \ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\n# \ndef smallest_odds(n):\n    return sum(i for i in range(1, n+1) if i%2!=0)\n\n# \ndef gcf(a,b):\n    while b!= 0:\n        a, b = b, a%b\n    return a"
  },
  {
    "example_id": 191,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return lcm(10, 50)\n\n\ndef divisible_by_n(n):\n    return sum(x for x in range(1, n+1) if x % n == 0)\n\n\ndef sum_of_digits(x):\n    return sum(int(digit) for digit in str(x))\n\n\ndef count_integers(start, end, sum):\n    return sum(range(start, end+1))\n\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    return factors\n\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\n\ndef smallest_odds(n):\n    return sum(x for x in range(1, n+1) if x % 2 == 1)\n\n\ndef gcf(a,b):\n    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a"
  },
  {
    "example_id": 192,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Solution\n# Annie has 3/2 pounds of cookie dough. If she needs 1/16 of a pound to make one cookie, \n# how many cookies can she make?\n# \n# Number of cookies = 3/2 / 1/16\n# \n# 3/2 = 1.5\n# 1/16 = 0.0625\n# \n# Number of cookies = 1.5 / 0.0625\n# \n# Number of cookies = 24\n# \n# Therefore, Annie can make 24 cookies."
  },
  {
    "example_id": 193,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "def number_of_whole_numbers_between_10_and_50(n):\n    return lcm(n, 10)\n\n\ndef divisible_by_n(n):\n    return sum(i for i in range(1, n+1) if i % n == 0)\n\n\ndef sum_of_digits(x):\n    return sum(map(int, str(x)))\n\n\ndef count_integers(start, end, sum):\n    return sum(range(start, end+1))\n\n\ndef prime_factors(n):\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            yield i\n            while n % i == 0:\n                n //= i\n            if n == 1:\n                yield n\n\n\ndef sum_prime_factors(n):\n    return sum(prime_factors(n))\n\n\ndef smallest_odds(n):\n    return sum(i for i in range(1, n+1) if i % 2!= 0)\n\n\ndef gcf(a,b):\n    return a if b == 0 else gcf(b, a % b)"
  },
  {
    "example_id": 194,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.39999999999999997"
    ],
    "annotated_answers": [
      "0.4"
    ],
    "solution": "print(2.4/6)"
  },
  {
    "example_id": 195,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 4"
  },
  {
    "example_id": 196,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "won_games = 12 * 0.25\nprint(won_games)"
  },
  {
    "example_id": 197,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Let t be the sum of all positive integers t such that 1.2t <= 9.6\n# 1.2t = 9.6\n# t = 9.6/1.2\n# t = 8"
  },
  {
    "example_id": 198,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "628.0"
    ],
    "solution": "less_than_200pi = 0\nfor i in range(1, 200):\n    if i * 3.14 < 200:\n        less_than_200pi += 1\nprint(less_than_200pi)"
  },
  {
    "example_id": 199,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def calculate_product(a, b):\n    return a * b"
  },
  {
    "example_id": 200,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "n_colors = 8\nn_shirts = n_ties = 1\n\nn_outfits = lcm(n_shirts, n_ties)**n_colors\n\nprint(n_outfits)"
  },
  {
    "example_id": 201,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22561.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "# calculate the number of degrees\ndegrees = lcm(53, 155) + lcm(8, 17) + lcm(145, 98)\nprint(f\"{degrees}\")"
  },
  {
    "example_id": 202,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0",
      "17.0",
      "6.0",
      "12.0",
      "9.0",
      "13.0",
      "4.0",
      "38.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "eu = 12 # number of stamps in the 80s\npe = 9 # number of stamps in the 70s\nsp = 13 # number of stamps in the 60s\nfr = 4 # number of stamps in the 50s\nbr = 6 # number of stamps in the 40s\n\n# Calculate the number of stamps in each decade\neu_dec = eu + pe\nsp_dec = sp + fr\nbr_dec = br\n\n# Calculate the number of stamps in each country\neu_bra = eu\neu_fra = pe\neu_per = sp\neu_spa = fr\n\n# Calculate the number of stamps in each country\neu_sum = eu_bra + eu_fra + eu_per + eu_spa\n\nprint(f\"The number of stamps in each decade is {eu_dec}, {sp_dec}, and {br_dec}.\")\nprint(f\"The number of stamps in each country is {eu_bra}, {eu_fra}, {eu_per}, and {eu_spa}.\")\nprint(f\"The number of stamps in each country is {eu_sum}.\")"
  },
  {
    "example_id": 203,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "n = 1000\nn_divisible_by_3 = 0\nfor i in range(1000, 10000):\n    if str(i) == str(i)[::-1] and i % 3 == 0:\n        n_divisible_by_3 += 1\nprint(n_divisible_by_3)"
  },
  {
    "example_id": 204,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "cupcakes = 12 * 12\nprint(cupcakes)"
  },
  {
    "example_id": 205,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "def at_least_two_3s(n):\n    if n < 100 or n > 500:\n        return False\n    s = str(n)\n    c = s.count('3')\n    return c >= 2\n\nprint(sum(at_least_two_3s(n) for n in range(100, 501)))"
  },
  {
    "example_id": 206,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.75",
      "96.82"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "# Square perimeter = 2(a + b + c + d)\n# Square area = a^2\n# Right triangle perimeter = a + b + c + d\n# Right triangle area = (base * height) / 2\n\n# Let's set up the perimeter of the square and the right triangle\na = 10\nb = 10\nc = 20\nd = 15\n\n# Find the perimeter of the right triangle\np = a + b + c + d\n\n# Find the area of the right triangle\nh = math.sqrt(c**2 - (b**2)/4)\nr = (b * h) / 2\n\n# Find the perimeter of the square\nq = 2 * (a + b + c + d)\n\n# Find the area of the square\ns = (q - p) / 4\n\n# Print the results\nprint(f\"Square area: {s:.2f} square inches\")\nprint(f\"Right triangle area: {r:.2f} square inches\")"
  },
  {
    "example_id": 207,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "print(math.sqrt(10*15*24))"
  },
  {
    "example_id": 208,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = 6 - 9\nprint(int(x))"
  },
  {
    "example_id": 209,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "print(60)"
  },
  {
    "example_id": 210,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "multiples = 0\nfor i in range(7, 150, 7):\n    multiples += 1\nprint(multiples)"
  },
  {
    "example_id": 211,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "1.0",
      "7.0",
      "2.0",
      "7.0",
      "4.0",
      "7.0",
      "5.0",
      "7.0",
      "7.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(7, 1)\nprint(7, 2)\nprint(7, 4)\nprint(7, 5)\nprint(7, 7)"
  },
  {
    "example_id": 212,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print((6 + 8 + 9 + 11 + 16) / 5)"
  },
  {
    "example_id": 213,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-56.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 5**2 - 9**2\nprint(a)"
  },
  {
    "example_id": 214,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "# Calculate the mean height of the five tallest buildings in 1985\nmean_height = 733\n\n# Calculate the height of the tallest building in 1985\ntallest = 858\n\n# Calculate the height of the shortest building in 1985\nshortest = 625\n\n# Calculate the height of the new building\nnew_height = 885\n\n# Calculate the difference between the new height and the mean height\ndiff = new_height - mean_height\n\n# Calculate the least common multiple of the heights of the five tallest buildings in 1985\nlcm_heights = lcm(tallest, shortest)\n\n# Calculate the difference between the new height and the mean height divided by the least common multiple of the heights of the five tallest buildings in 1985\nincrease = diff / lcm_heights\n\n# Print the answer\nprint(f\"{increase:.2f}\")"
  },
  {
    "example_id": 215,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "side = int(lcm(2,21)/2)\nprint(side)"
  },
  {
    "example_id": 216,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "# The number of ways to put down two pieces on a 8x8 chessboard\n# is equal to the number of ways to put down one piece on the board\n# and the number of ways to put down the second piece on the board\n# which is equal to the number of ways to put down one piece on the board\n# which is equal to 64.\nprint(64)"
  },
  {
    "example_id": 217,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "n_politicians = 4\nn_lawyers = 3\nn_handshakes = lcm(n_politicians, n_lawyers)\nprint(f\"{n_handshakes}\")"
  },
  {
    "example_id": 218,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "980.0"
    ],
    "solution": "total_farthing = lcm(4, 12, 20)\nprint(f\"{total_farthing}\")"
  },
  {
    "example_id": 219,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "c = 32\nb = 36\na = lcm(c, b)\nprint(f\"{a:.2f}\")"
  },
  {
    "example_id": 220,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(6)"
  },
  {
    "example_id": 221,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 2\nwhile not 3*x > 2*x + 1:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 222,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(6 + 8/2)"
  },
  {
    "example_id": 223,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "140.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "# Jon has 20 to 28 students in his class\n# find the least common multiple of 20 and 28\nlcm_20_28 = lcm(20, 28)\nprint(f\"{lcm_20_28}\")"
  },
  {
    "example_id": 224,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "123.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "print(76 - (-4 * 8 - 2) + 13)"
  },
  {
    "example_id": 225,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "894.78"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "# Martha's distance\nm_distance = 300 + 400\n\n# Jim's distance\nj_distance = math.sqrt((300/2)**2 + 400**2)\n\n# difference between j and m\ndiff = m_distance - j_distance\n\n# convert to feet\ndiff_feet = diff * 3.28\n\n# round to nearest hundredth\ndiff_round = round(diff_feet, 2)\n\n# print difference\nprint(diff_round)"
  },
  {
    "example_id": 226,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2400.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "inches_per_mile = 20\nactual_distance = 120\ninches_apart = actual_distance * inches_per_mile\nprint(inches_apart)"
  },
  {
    "example_id": 227,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(round(15.49999999))"
  },
  {
    "example_id": 228,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "# find the least common multiple of 2, 3, and 5\nlcm235 = lcm(2,3,5)\n\n# calculate the area of the figure\narea = lcm235 / 2\n\n# round the area to the nearest hundredth\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 229,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5321.0"
    ],
    "annotated_answers": [
      "5321.0"
    ],
    "solution": "print(lcm(5321, -5321))"
  },
  {
    "example_id": 230,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def lcm(a, b):\n    return a * b / math.gcd(a, b)\n\ndef find_largest_radius(length):\n    for i in range(1, int(length / 2) + 1):\n        if length % i == 0:\n            return i\n\n# print(find_largest_radius(60))\nprint(f\"{find_largest_radius(60)}\")"
  },
  {
    "example_id": 231,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7227.0"
    ],
    "annotated_answers": [
      "949.0"
    ],
    "solution": "largest_multiple = 73*99\nprint(largest_multiple)"
  },
  {
    "example_id": 232,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "cds_needed = (77 + 11) // 12\nprint(cds_needed)"
  },
  {
    "example_id": 233,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "mean = (8 + 12 + 16 + 20 + 24) / 5\nprint(mean)"
  },
  {
    "example_id": 234,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "coat_price = 60\ncommission_percent = 5\ncommission = coat_price * commission_percent / 100\ncommission = int(commission * 100) / 100\nprint(f\"{commission:.2f}\")"
  },
  {
    "example_id": 235,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 16\ny = 8\nprint(f\"{lcm(x, y):.2f}\")"
  },
  {
    "example_id": 236,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "not_A_in_math = 35 - 15 - 8 - 3\nprint(not_A_in_math)"
  },
  {
    "example_id": 237,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "3024.0"
    ],
    "solution": "import math\n\ndef choose_officers(num_officers, num_people):\n    return math.factorial(num_people) // (math.factorial(num_officers) * math.factorial(num_people - num_officers))\n\nprint(choose_officers(4, 9))"
  },
  {
    "example_id": 238,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(5**5//5**4-5**3+5**2*5**1)"
  },
  {
    "example_id": 239,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "count = 0\nfor i in range(1, 7):\n    for j in range(1, 7):\n        if i*j!= 6:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 240,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "105.0",
      "63.0",
      "42.0",
      "21.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 21\nb = 2 * a\nc = b + a\nd = 5 * a\n\nprint(f\"{d:.0f}\")\nprint(f\"{c:.0f}\")\nprint(f\"{b:.0f}\")\nprint(f\"{a:.0f}\")"
  },
  {
    "example_id": 241,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "print(2 * 36)"
  },
  {
    "example_id": 242,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "17.0",
      "34.0",
      "17.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "lcm = 17\nfor i in range(1, 50):\n    if i % lcm == 0:\n        print(f\"{i} is a multiple of 17\")"
  },
  {
    "example_id": 243,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0",
      "32.0",
      "14.0",
      "-10.0",
      "-40.0",
      "-76.0",
      "-118.0",
      "-166.0",
      "-220.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x = 50\nfor i in range(1, 10):\n    x = x - 2*i + 3*i - 4*i + 5*i - 6*i + 7*i - 8*i + 9*i - 10*i\n    print(f\"{x}\")"
  },
  {
    "example_id": 244,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "# Find the least common multiple of 30 and 50\nlcm_val = lcm(30, 50)\n\n# Print the answer\nprint(lcm_val)"
  },
  {
    "example_id": 245,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# 4-door and red\nprint(15 - 4)"
  },
  {
    "example_id": 246,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.14285714285714285"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(7**-1)"
  },
  {
    "example_id": 247,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "print(1 + 2 + 3 - 4 + 5 + 6)\nprint(1+2+3-(4+5)+6)\nprint(1+2+3-9+6)\nprint(6-9+6)\nprint(3)"
  },
  {
    "example_id": 248,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "C = 21\nprint(C)"
  },
  {
    "example_id": 249,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.78"
    ],
    "annotated_answers": [
      "7.78"
    ],
    "solution": "total_cost = round(7/9 * 10, 2)\nprint(total_cost)"
  },
  {
    "example_id": 250,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# Define the variables\na = 1\nb = 2\n# Define the function to find the prime numbers\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n# Find the prime numbers\nwhile not is_prime(a + b):\n    a += 1\n    b = a + 17\n# Calculate the sum of the prime numbers\nprint(f\"{a + b:.0f}\")"
  },
  {
    "example_id": 251,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-16.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "print(-144//9)"
  },
  {
    "example_id": 252,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "864.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Find the lcm of the fractions\nlcm_1 = lcm(3, 3)\nlcm_2 = lcm(3, 4)\nlcm_3 = lcm(3, 6)\nlcm_4 = lcm(3, 12)\n\n# Find the least common multiple of the fractions\nlcm_total = lcm_1 * lcm_2 * lcm_3 * lcm_4\n\n# Find the number of pies needed\nnum_pies = lcm_total // 3\n\nprint(num_pies)"
  },
  {
    "example_id": 253,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 10\nb = 8\nab = a*b\nprint(ab)"
  },
  {
    "example_id": 254,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1260.0"
    ],
    "solution": "# Define variables\na, b, c, d, e, f = symbols('a, b, c, d, e, f')\n\n# Define the equation\neq1 = a**2 + b**2 + c**2 + d**2 + e**2 + f**2\n\n# Solve for a, b, c, d, e, f\nans = solve(eq1, [a, b, c, d, e, f])\n\n# print the answer\nprint(ans)"
  },
  {
    "example_id": 255,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "D = 40 - 25 - 30\nprint(D)"
  },
  {
    "example_id": 256,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.75"
    ],
    "annotated_answers": [
      "16.75"
    ],
    "solution": "print(14.6 + 2.15)"
  },
  {
    "example_id": 257,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1095.0",
      "2016.0"
    ],
    "annotated_answers": [
      "351.0"
    ],
    "solution": "# Set up variables\namaretta_birthday = 7/27\nenzo_birthday = 9/3\n\n# Calculate number of days between birthdays\ndays_between_birthdays = math.ceil(enzo_birthday - amaretta_birthday)\n\n# Calculate number of years between birthdays\nyears_between_birthdays = math.ceil(enzo_birthday - amaretta_birthday)\n\n# Calculate number of cake-eating days\ncake_eating_days = lcm(years_between_birthdays, 365)\n\n# Print results\nprint(f\"There will be {cake_eating_days} cake-eating days in 2016.\")"
  },
  {
    "example_id": 258,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0",
      "-750.0"
    ],
    "annotated_answers": [
      "550.0"
    ],
    "solution": "# Define variables\nmiles = 12000\nefficiency = 48\naverage = 15\n\n# Calculate gallons\ngallons = miles / average\n\n# Calculate lcm of efficiency and average\nlcm_efficiency = lcm(efficiency, average)\n\n# Calculate gallons for hybrid\ngallons_hybrid = miles / lcm_efficiency\n\n# Print results\nprint(f\"If Karla drives a fuel-efficient hybrid car averaging {efficiency} miles per gallon, she would have saved {gallons_hybrid - gallons:.2f} gallons of gasoline last year.\")"
  },
  {
    "example_id": 259,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 5\nprint(N)"
  },
  {
    "example_id": 260,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "for i in range(5, 1000):\n    if i % 5 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 261,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1296.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x, y = symbols('x, y')\neq = 2**x * 3**y - 1296\nsol = solve(eq, (x, y))\nprint(f\"{sol}\")"
  },
  {
    "example_id": 262,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.000346860908775581"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(1/31/93)"
  },
  {
    "example_id": 263,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "n = 0\nfor i in range(1, 10000):\n    if (i ** 0.5) <= 20:\n        n += 1\nprint(n)"
  },
  {
    "example_id": 264,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(315, 108))"
  },
  {
    "example_id": 265,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "average = (71 + 72 + 73 + 74 + 75) / 5\nprint(average)"
  },
  {
    "example_id": 266,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.303"
    ],
    "annotated_answers": [
      "0.303"
    ],
    "solution": "print(round(0.3 + 0.003, 3))"
  },
  {
    "example_id": 267,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0",
      "30.0",
      "60.0",
      "30.0",
      "20.0",
      "60.0",
      "60.0",
      "1.2"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# find the lcm of 20 and 30\nlcm_20_30 = lcm(20, 30)\nprint(f\"lcm_20_30: {lcm_20_30}\")\n\n# find the lcm of 30 and 20\nlcm_30_20 = lcm(30, 20)\nprint(f\"lcm_30_20: {lcm_30_20}\")\n\n# find the lcm of all numbers\nlcm_all = lcm(lcm_20_30, lcm_30_20)\nprint(f\"lcm_all: {lcm_all}\")\n\n# find the average\naverage = lcm_all / 50\nprint(f\"average: {average}\")"
  },
  {
    "example_id": 268,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 6\nprint(x)"
  },
  {
    "example_id": 269,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def is_solution(x):\n    return 13 * x + 8 < 35\n\nfor x in range(1000):\n    if is_solution(x):\n        print(x)"
  },
  {
    "example_id": 270,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "# define variables\np1 = 2\np2 = 3\np3 = 5\n\n# calculate products\np1p2 = p1 * p2\np1p3 = p1 * p3\np2p3 = p2 * p3\n\n# calculate lcm\nlcm = lcm(p1p2, p1p3, p2p3)\n\n# solve for product of primes\nproduct = lcm\n\n# print solution\nprint(product)"
  },
  {
    "example_id": 271,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.24"
    ],
    "solution": "outcomes = {1: 14, 2: 5, 3: 9, 4: 7, 5: 7, 6: 8}\ntotal = 0\nfor i in outcomes:\n    total += outcomes[i]\nmean = total / 50\nprint(f\"{mean:.2f}\")"
  },
  {
    "example_id": 272,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "x, y, z = symbols('x y z')\n\nsol = solve(x + y + z - 8, x)\n\nprint(f\"The number of ways is {sol[0]}\")"
  },
  {
    "example_id": 273,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "int_var = 5\nresult = 5 * int_var\nprint(result)"
  },
  {
    "example_id": 274,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "201.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "r = 14\nh = 15\nl = 5\nd = 3\n\n# Solve for the rope length\nrope_length = lcm(h, r) - (r - l)\n\nprint(f\"{rope_length:.2f}\")"
  },
  {
    "example_id": 275,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.95"
    ],
    "annotated_answers": [
      "4.95"
    ],
    "solution": "sum = 4.5 + 0.45\nprint(sum)"
  },
  {
    "example_id": 276,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "largest_prime_factor = 97\nprint(largest_prime_factor)"
  },
  {
    "example_id": 277,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a, b, c, d, e = symbols('a, b, c, d, e')\n\n# find the median\nmedian = (a + b + c + d + e) / 5\n\n# find the mean\nmean = (a + b + c + d + e) / 5\n\n# find the sum\nsum = median + mean\n\n# print the sum\nprint(sum)"
  },
  {
    "example_id": 278,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40138240.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "# Variables\nx = 92\ny = 73\nz = 79\nw = 87\n\n# LCM\nlcm_x_y_z_w = lcm(x,y,z,w)\n\n# Quotient\nq = lcm_x_y_z_w / x\n\n# Final test score\nf = 80 * q\n\n# Minimum score required\nm = f - 80\n\nprint(m)"
  },
  {
    "example_id": 279,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.4000014000014"
    ],
    "annotated_answers": [
      "1.4"
    ],
    "solution": "print(1/0.714285)"
  },
  {
    "example_id": 280,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 15\nprint(x)"
  },
  {
    "example_id": 281,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.125"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "child_percent = 0.5*0.5*0.5\nprint(child_percent)"
  },
  {
    "example_id": 282,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1960.0",
      "840.0",
      "280.0",
      "280.0",
      "280.0",
      "280.0",
      "70.0",
      "93.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "dogs = 280 * 4\ncats = 280 * 3\ntotal = dogs + cats\nprint(f\"{total:d} dogs and {cats:d} cats\")\n\ndogs = dogs // 4\ncats = cats // 3\nprint(f\"{dogs:d} dogs and {cats:d} cats\")\n\nprint(f\"{dogs:d} dogs and {cats:d} cats\")\n\ndogs = dogs // 4\ncats = cats // 3\nprint(f\"{dogs:d} dogs and {cats:d} cats\")"
  },
  {
    "example_id": 283,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "452.39",
      "75.4"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# radius\nr = 12\n\n# circumference\nc = 2*math.pi*r\n\n# area\na = math.pi*r**2\n\nprint(f\"Area: {a:.2f} square units\")\nprint(f\"Circumference: {c:.2f} units\")"
  },
  {
    "example_id": 284,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1944.0",
      "2000.0",
      "-1.0",
      "2.0",
      "41.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = symbols('x')\neq = [x**2 + x - 10]\nsol = solve(eq)\nprint(f\"The median number of hurricanes per year reaching the East Coast from 1944 through 2000 is {sol[0]}.\")"
  },
  {
    "example_id": 285,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Declare variables\ntotal_cost = 12\ntip = 15\n\n# calculate percent tip\npercent_tip = (tip/total_cost) * 100\n\n# print percent tip\nprint(f\"{percent_tip:.2f}%\")"
  },
  {
    "example_id": 286,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "kids = 44 // 3\nprint(kids)"
  },
  {
    "example_id": 287,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "distance = math.sqrt(30*21*70)\nprint(distance)"
  },
  {
    "example_id": 288,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "a = 170\nn = int(lcm(a, 360) / a)\nprint(n)"
  },
  {
    "example_id": 289,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.38025641025641027"
    ],
    "annotated_answers": [
      "0.38"
    ],
    "solution": "candy_per_week = 1483/52/75\nprint(candy_per_week)"
  },
  {
    "example_id": 290,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-80.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = -10\ny = x * 6\nprint(y - 20)"
  },
  {
    "example_id": 291,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 2\nb = 3\nc = 2\nd = 2\n\nn = 2\n\n# Find the smallest number of primes\n# that can be multiplied to make n\nwhile True:\n    # Find the product of n primes\n    product = lcm(a, b, c, d)\n    # Check if product is equal to n\n    if product == n:\n        # If product is equal to n\n        # then we have found the answer\n        print(f\"{n} primes = {product}\")\n        break\n    # Else increment n\n    n += 1"
  },
  {
    "example_id": 292,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "hallway_length = 1000 / 2.5\nprint(hallway_length)"
  },
  {
    "example_id": 293,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "perimeter = 8 + 20 + 25\nprint(perimeter)"
  },
  {
    "example_id": 294,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "x = 11\nprint(x)"
  },
  {
    "example_id": 295,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "n = 11\n\nchairs = []\n\nfor i in range(1, n+1):\n    for j in range(1, n+1):\n        if i % 2!= 0 and j % 2!= 0:\n            chairs.append(i*j)\n\nprint(f\"There are {len(chairs)} chairs with odd numbers\")"
  },
  {
    "example_id": 296,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "print(360/5)"
  },
  {
    "example_id": 297,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1201.78"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "side = 104 / 3\narea = side**2\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 298,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "# lcm(a, b) = (a*b) / gcd(a, b)\nprint(lcm(1, 2, 3, 4, 5, 6, 7))"
  },
  {
    "example_id": 299,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "count = 0\nfor i in range(10, 100):\n    if i % 10 == 0 and i % 15 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 300,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "# define the variables\nP = 5\nQ = 5\nR = 0\n\n# define the symbol\nx = symbols('x')\n\n# solve the equation\nsol = solve(Q*x + P*x - R*x)\n\n# print the solution\nprint(sol)"
  },
  {
    "example_id": 301,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 24/30\nb = 20/3*25\n\n# simplified value of a/b\nc = a/b\nprint(f\"{c:.2f}\")"
  },
  {
    "example_id": 302,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 21\nprint(x)"
  },
  {
    "example_id": 303,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "answer = 4\nprint(answer)"
  },
  {
    "example_id": 304,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "answer = 30 - 8 - 12 - 3\nprint(answer)"
  },
  {
    "example_id": 305,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "x = symbols('x')\n\na = 5\nb = 8\nc = 10\nd = 18\ne = 19\nf = 28\ng = 30\n\nn = 8\n\nmean = (a + b + c + d + e + f + g) / n\n\nx = solve((mean - 4.5) - x, x)[0]\nprint(f\"{x:.0f}\")"
  },
  {
    "example_id": 306,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = 14\nprint(x)"
  },
  {
    "example_id": 307,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 12 / 5\nprint(5 * x + 3)"
  },
  {
    "example_id": 308,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# create list of all possible house number combinations\nhouse_numbers = [\n    '235',\n    '253',\n    '325',\n    '352',\n    '523',\n    '532',\n]\n\n# find the greatest common divisor (gcd) of all the numbers\ngcd_list = [math.gcd(int(x), int(y)) for x in house_numbers for y in house_numbers]\n\n# find the least common multiple (lcm) of all the numbers\nlcm_list = [lcm(int(x), int(y)) for x in house_numbers for y in house_numbers]\n\n# find the number of combinations\nnumber_of_combinations = len(gcd_list)\n\n# print the number of combinations\nprint(f\"{number_of_combinations}\")"
  },
  {
    "example_id": 309,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 2\nb = 3\nc = 4\n\nresult = (3*a**2*b)/(5*a*c) * (10*c)/(6*a*b)\nprint(result)"
  },
  {
    "example_id": 310,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "15.0",
      "5.0",
      "2.0",
      "2.0",
      "2.0",
      "15.0",
      "5.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# 5 dollar bills\ndollar_5 = [5, 10, 15, 20, 25]\n# 2 dollar bills\ndollar_2 = [2, 4, 6, 8, 10]\n\n# total amount\ntotal = 17\n\n# combinations of 5 dollar bills\nfor i in range(len(dollar_5)):\n    # combinations of 2 dollar bills\n    for j in range(len(dollar_2)):\n        # combination amount\n        combination = dollar_5[i] + dollar_2[j]\n        if combination == total:\n            print(f\"Combination 1: {dollar_5[i]} 5 dollar bills + {dollar_2[j]} 2 dollar bills\")\n            print(f\"Combination 2: {dollar_5[i]} 5 dollar bills + {dollar_2[j]} 2 dollar bills\")"
  },
  {
    "example_id": 311,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "area = 0.5 * 5 * 5\nprint(area)"
  },
  {
    "example_id": 312,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 7\nprint(x)"
  },
  {
    "example_id": 313,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "ambulance_time = 20 / 40\nhelicopter_time = 15 / 1\n\ntotal_time = ambulance_time + helicopter_time * 6\nprint(f\"{total_time:.2f}\")"
  },
  {
    "example_id": 314,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x)"
  },
  {
    "example_id": 315,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "area = 6 * 6 / 2\nprint(area)"
  },
  {
    "example_id": 316,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "61.0",
      "1.0",
      "3.0",
      "3.0",
      "61.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\n\neq1 = 5**3 - (3**2-5)**3\neq2 = x**3 - y**3\n\nprint(solve([eq1 - eq2], [x, y]))"
  },
  {
    "example_id": 317,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "820299375.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "n = 10\npref_spiker = 5\npref_setter = 4\nfine = 1\n\n# Number of ways to choose spiker\nn_spiker = math.comb(n, pref_spiker)\n\n# Number of ways to choose setter\nn_setter = math.comb(n - pref_spiker, pref_setter)\n\n# Number of ways to choose setter and spiker\nn_setter_spiker = math.comb(n_spiker, pref_setter)\n\n# Number of ways to choose setter and spiker with fine player\nn_setter_spiker_fine = math.comb(n_setter, fine)\n\n# Total number of ways\nn_total = n_setter_spiker * n_setter_spiker_fine\n\n# Number of ways to choose setter and spiker with fine player\nprint(f\"Total number of ways: {n_total}\")"
  },
  {
    "example_id": 318,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "229.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "a = 3\nb = 1.5\nc = 68\nd = 24\ne = 18\nperimeter = 2 * (a + b + c + d + e)\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 319,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(10 + 8)"
  },
  {
    "example_id": 320,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "smallest = 1\nwhile smallest < 13:\n    if smallest + 1 + 2 + 3 == 5:\n        break\n    smallest += 1\nprint(smallest)"
  },
  {
    "example_id": 321,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def repeating_decimal(num):\n    num_str = str(num)\n    repeating = ''\n    for i in range(len(num_str)):\n        if num_str[i] == '.':\n            repeating = num_str[i+1:]\n            break\n    if repeating == '':\n        return 0\n    else:\n        return len(repeating)\nprint(repeating_decimal(31/11111))"
  },
  {
    "example_id": 322,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 2\nb = 5\nc = 3\nd = 7\ne = 70\n\nx = lcm(a, b)\ny = lcm(c, d)\nz = lcm(x, y)\n\nprint(f\"{z/e:.2f}\")"
  },
  {
    "example_id": 323,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "n = -10//5 - 3\nprint(n)"
  },
  {
    "example_id": 324,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "a = 3\nb = 5\nc = 7\nlargest = max(a, b, c)\nprint(largest)"
  },
  {
    "example_id": 325,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "7.0",
      "34.0",
      "2.0",
      "7.0",
      "34.0",
      "3.0",
      "7.0",
      "34.0",
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# 1, 2, 3, 4, 8, 14, 17, 29, 56, 91\nx = symbols('x')\nnum_list = [1, 2, 3, 4, 8, 14, 17, 29, 56, 91]\n\n# Check if each number in the list is a factor of 34 or a multiple of 7\nfor num in num_list:\n    if num % 7 == 0 or num % 34 == 0:\n        print(f\"{num} is a factor or multiple of 7 or 34\")\n    else:\n        print(f\"{num} is not a factor or multiple of 7 or 34\")"
  },
  {
    "example_id": 326,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "perimeter = 2 * (12 + 16)\nprint(perimeter)"
  },
  {
    "example_id": 327,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "measure = 180 - 50\nprint(measure)"
  },
  {
    "example_id": 328,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "three_digit_int = 100\nprint(three_digit_int)"
  },
  {
    "example_id": 329,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.41"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "x = (math.sqrt(50) + math.sqrt(60))/2\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 330,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def multiples(n, k):\n    return [n * i for i in range(1, k + 1)]\n\ndef lcm(a, b):\n    return (a * b) // math.gcd(a, b)\n\ndef count_common(list1, list2):\n    return len(set(list1).intersection(set(list2)))\n\ndef main():\n    multiples_of_3 = multiples(3, 20)\n    multiples_of_6 = multiples(6, 10)\n    common_multiples = count_common(multiples_of_3, multiples_of_6)\n    print(f\"{common_multiples} multiples of 3 and 6\")\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 331,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "490.0"
    ],
    "annotated_answers": [
      "735.0"
    ],
    "solution": "#calculate the area of the room\nroom_area = 5*4\n#calculate the cost of the carpet\ncarpet_cost = room_area * 21.95\n#calculate the cost of the padding\npadding_cost = room_area * 2.55\n#print the total cost\nprint(carpet_cost + padding_cost)"
  },
  {
    "example_id": 332,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "# Find the first 9 prime numbers\nprime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n# Find the sum of the first 9 prime numbers\nsum_of_prime_numbers = sum(prime_numbers)\nprint(sum_of_prime_numbers)"
  },
  {
    "example_id": 333,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "print(10 + 5 * 6)"
  },
  {
    "example_id": 334,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15150.0"
    ],
    "annotated_answers": [
      "298.0"
    ],
    "solution": "def sum_of_primes(lower, upper):\n    perfect_squares = [x**2 for x in range(lower, upper+1) if x**2 in range(lower, upper+1)]\n    primes = [x for x in range(lower, upper+1) if x not in perfect_squares]\n    return sum(primes)\n\nlower = 100\nupper = 200\n\nprint(sum_of_primes(lower, upper))"
  },
  {
    "example_id": 335,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(round(pow(1/23, 1000)))"
  },
  {
    "example_id": 336,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "side = 9 * 4\nprint(side)"
  },
  {
    "example_id": 337,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "510.0"
    ],
    "annotated_answers": [
      "510.0"
    ],
    "solution": "print(520 - (520 % 30))"
  },
  {
    "example_id": 338,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "# 20 choose 2 = 190\nprint(190)"
  },
  {
    "example_id": 339,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a = 10\nb = 20\n\nresult = (2*a + 200)/4 - (a/2)\nprint(result)"
  },
  {
    "example_id": 340,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "handshakes = 6 * 6\nprint(handshakes)"
  },
  {
    "example_id": 341,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "number_of_sandwiches = 9 * 8 / 2\nprint(number_of_sandwiches)"
  },
  {
    "example_id": 342,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "blake_average = 78\njenny_average = blake_average + 10 - 10 + 20\nprint(jenny_average - blake_average)"
  },
  {
    "example_id": 343,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "A = 77\nB = A/2\nC = A/4\nD = A/8\n\nx = symbols('x')\n\nsol = solve(x*4 - x*2 - x, x)\n\nprint(f\"{sol[0]:.2f}\")"
  },
  {
    "example_id": 344,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "264.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Define variables\na = 33\nb = 24\nc = 8\n\n# Find the least common multiple\nlcm_ab = lcm(a, b)\n\n# Find the least common multiple\nlcm_abc = lcm(lcm_ab, c)\n\n# Print the solution\nprint(lcm_abc)"
  },
  {
    "example_id": 345,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.4"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "# Setup\nnuts = 9\npecans = walnuts = cashews = 0\n\n# Calculate\nwalnuts = nuts * 3 / 5\ncashews = nuts * 1 / 5\n\n# Print\nprint(f\"There are {walnuts:.1f} pounds of walnuts in the mixture.\")"
  },
  {
    "example_id": 346,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = 3\nb = 20\n\ngcd = math.gcd(a, b)\n\na = a // gcd\nb = b // gcd\n\nangle = a*360/12 + b*360/12/60\n\nprint(f\"{angle:.2f}\")"
  },
  {
    "example_id": 347,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "111.0",
      "141.0",
      "171.0",
      "222.0",
      "252.0",
      "282.0",
      "303.0",
      "333.0",
      "363.0",
      "393.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef is_multiple_of_3(n):\n    return n % 3 == 0\n\ndef multiples_of_3_palindromes():\n    for i in range(100, 1000):\n        if is_palindrome(i) and is_multiple_of_3(i):\n            yield i\n\nprint(list(multiples_of_3_palindromes()))"
  },
  {
    "example_id": 348,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "h = 12\nq = 8\n\ndef stack(h, q):\n    return q * h\n\nprint(stack(h, q))"
  },
  {
    "example_id": 349,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "smallest_number_of_cats = 10\nprint(smallest_number_of_cats)"
  },
  {
    "example_id": 350,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "3.0",
      "6.0",
      "9.0",
      "33.0",
      "66.0",
      "99.0",
      "111.0",
      "141.0",
      "171.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# \nn = 0\nwhile n < 2008:\n    if is_palindrome(n) and is_multiple_of_3(n):\n        print(n)\n    n += 1"
  },
  {
    "example_id": 351,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sum = 0\nfor i in range(1,100):\n    if(-3*i +3 >-11):\n        sum +=i\nprint(sum)"
  },
  {
    "example_id": 352,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.26666666666666666"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(4/15)"
  },
  {
    "example_id": 353,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "486.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def hug_count(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 3\n\ndef hug_all(n):\n    count = 1\n    for i in range(1, n):\n        count *= hug_count(i)\n    return count\n\nprint(hug_all(8))"
  },
  {
    "example_id": 354,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "A = 2 * (10 + 5)\nprint(A)"
  },
  {
    "example_id": 355,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "800.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import math\n\ndef sum_digits(n):\n    return sum(int(x) for x in str(n))\n\nfor i in range(100, 1000):\n    if i % 100 == 0 and sum_digits(i) == 8:\n        print(i)"
  },
  {
    "example_id": 356,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0",
      "30.0",
      "30.0",
      "30.0",
      "30.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "# Find the least positive integer divisible by each of the first five composite numbers\nfor i in range(5):\n    divisor = 2 + i\n    while True:\n        if divisor % 2 == 0 and divisor % 3 == 0 and divisor % 5 == 0:\n            print(divisor)\n            break\n        divisor += 1"
  },
  {
    "example_id": 357,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(1313, 1001))"
  },
  {
    "example_id": 358,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.9999999999999939"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((7/16)**111 * (16/7)**111)"
  },
  {
    "example_id": 359,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = (13 - 5) / 2\nprint(k)"
  },
  {
    "example_id": 360,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6050.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Solve for wallops\nwallops = 110\nballops = 5\nfallops = 11\n\n# Solve for number of wallops equivalent to 110 fallops\nwallops_equivalent = lcm(ballops, fallops) * wallops // gcd(ballops, fallops)\n\n# Print the answer\nprint(wallops_equivalent)"
  },
  {
    "example_id": 361,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.1"
    ],
    "annotated_answers": [
      "24.1"
    ],
    "solution": "def get_median(lst):\n    lst.sort()\n    if len(lst) % 2 == 0:\n        median = (lst[len(lst) // 2 - 1] + lst[len(lst) // 2]) / 2\n    else:\n        median = lst[len(lst) // 2]\n    return median\n\ndef median_kick_return_averages():\n    average_yards = [25.0, 24.3, 24.1, 23.8, 23.4]\n    return get_median(average_yards)\n\nprint(f\"{median_kick_return_averages():.1f}\")"
  },
  {
    "example_id": 362,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Find the length and width of the room\nlength = 3\nwidth = 2\n\n# Calculate the area of the room\narea = length * width\n\n# Calculate the number of six-inch by six-inch tiles needed to cover the room\ntiles = area // 36\n\n# Print the number of tiles needed to cover the room\nprint(tiles)"
  },
  {
    "example_id": 363,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "perimeter = 30\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 364,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0",
      "2.0",
      "10.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols('x')\n\n# Solve for x\nsol = solve(x**2 - 200, x)\n\n# Find all possible values of x\nall_x = []\nfor s in sol:\n    all_x.append(s)\n\n# Print all possible values of x\nprint(all_x)"
  },
  {
    "example_id": 365,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.48"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Calculate the time\ntime_to_prime = 9/42 + 12/45\nprint(f\"{time_to_prime:.2f}\")\n\n\n# Calculate the minutes earlier\nbrenda_arrival = brenda_time - kelly_time\nprint(f\"{brenda_arrival:.2f}\")"
  },
  {
    "example_id": 366,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "h = 9\nprint(f\"{h:.2f}\")"
  },
  {
    "example_id": 367,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "162.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "count = 0\nfor i in range(99, 999):\n    if str(i).count(\"0\") == 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 368,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.875"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "cups = 15/8\nprint(cups)"
  },
  {
    "example_id": 369,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "294780.0"
    ],
    "annotated_answers": [
      "1020.0"
    ],
    "solution": "lcm = 51 * 68 * 85\nprint(lcm)"
  },
  {
    "example_id": 370,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "x = symbols('x')\nsol = solve([3*x + 2*(1+x) - 17], [x])\nprint(sol)"
  },
  {
    "example_id": 371,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2007.0"
    ],
    "annotated_answers": [
      "2013.0"
    ],
    "solution": "def is_common_factor(x, y):\n    if x == y:\n        return True\n    if x < y:\n        return is_common_factor(y % x, x)\n    return False\n\ndef get_common_factor(x, y):\n    if x == y:\n        return x\n    if x < y:\n        return get_common_factor(y % x, x)\n\ndef get_next_year(year):\n    return year + 1\n\ndef has_property(year):\n    x = year % 1000\n    y = year % 10\n    return is_common_factor(x, y)\n\ndef find_next_year():\n    year = 2006\n    while True:\n        year = get_next_year(year)\n        if has_property(year):\n            return year\n\nprint(find_next_year())"
  },
  {
    "example_id": 372,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 4*5/8\nb = 8/37\nprint(f\"{a**55 * b**55:.2f}\")"
  },
  {
    "example_id": 373,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "1.0",
      "3.0",
      "3.0",
      "3.0",
      "0.0",
      "7.0",
      "81.0",
      "779.0",
      "50.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = 3\nb = 5\nx = 3\nprint(f\"{lcm(a, b) = }\")\nprint(f\"{gcd(a, b) = }\")\nprint(f\"{is_palindrome(x) = }\")\nprint(f\"{is_multiple_of_3(x) = }\")\nprint(f\"{multiples_of_3_palindromes() = }\")"
  },
  {
    "example_id": 374,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "tiles = 16\nprint(tiles)"
  },
  {
    "example_id": 375,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "# Create a variable for the number of minutes in a day\nminutes_per_day = 24 * 60\n\n# Find the least common multiple of 5 and 2, which is the least common multiple of 10 and 30\nlcm_5_2 = lcm(5, 2)\n\n# Find the number of times the computers back up data at the same time\ntimes_backup_same_time = minutes_per_day // lcm_5_2\n\n# Print the number of times\nprint(times_backup_same_time)"
  },
  {
    "example_id": 376,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "print((2**20 + 2**20 + 2**20 + 2**21)//2**17)"
  },
  {
    "example_id": 377,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Create variables\ncherry = 3\ncheese = 2\ndanishes = cherry + cheese\n\n# Calculate total number of danishes\ndanishes = cherry + cheese\n\n# Print solution\nprint(danishes)"
  },
  {
    "example_id": 378,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "500.0"
    ],
    "annotated_answers": [
      "1500.0"
    ],
    "solution": "x = 500\nprint(f\"{x:.0f}\")"
  },
  {
    "example_id": 379,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "height = 10 + 2 * 25\nprint(height)"
  },
  {
    "example_id": 380,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(4*4)"
  },
  {
    "example_id": 381,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2000.0",
      "2001.0",
      "2002.0",
      "2003.0",
      "2004.0",
      "2005.0",
      "2006.0",
      "2007.0",
      "2008.0",
      "2009.0"
    ],
    "annotated_answers": [
      "5999.0"
    ],
    "solution": "for i in range(2000, 8000):\n    if len(str(i)) == 4:\n        print(i)"
  },
  {
    "example_id": 382,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "12.0",
      "0.75",
      "6.93"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "# original length and width\nl = 4\nw = 2\n\n# area of the original garden\narea = l * w\n\n# perimeter of the original garden\nperimeter = 2 * (l + w)\n\n# new length and width\nl_new = l + (perimeter - 2 * l) / 2\nw_new = w + (perimeter - 2 * w) / 2\n\n# area of the new garden\narea_new = l_new * w_new\n\n# perimeter of the new garden\nperimeter_new = 4 * (l_new + w_new)\n\n# area of the new garden is 3600\n# perimeter of the new garden is doubled\n# perimeter_new = 2 * perimeter\n\n# solve for l_new and w_new\n# using the equation for area_new\n# and the equation for perimeter_new\n\n# solve for l_new\n# using the equation for area_new and perimeter_new\nl_new = math.sqrt(area_new / perimeter_new)\n\n# solve for w_new\n# using the equation for area_new and perimeter_new\nw_new = math.sqrt(area_new / perimeter_new)\n\n# calculate the area of the original garden\narea = l * w\n\n# calculate the perimeter of the original garden\nperimeter = 2 * (l + w)\n\n# calculate the area of the new garden\narea_new = l_new * w_new\n\n# calculate the perimeter of the new garden\nperimeter_new = 4 * (l_new + w_new)\n\nprint(f\"The original garden's area was {area:.2f} square feet.\")\nprint(f\"The original garden's perimeter was {perimeter:.2f} feet.\")\nprint(f\"The new garden's area is {area_new:.2f} square feet.\")\nprint(f\"The new garden's perimeter is {perimeter_new:.2f} feet.\")"
  },
  {
    "example_id": 383,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "784.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "area = 28 ** 2\nprint(area)"
  },
  {
    "example_id": 384,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Define x\nx = symbols('x')\n\n# Define equation\neq = (x/3 + x/4) - 14\n\n# Solve for x\nsol = solve(eq, x)\n\n# Print solution\nprint(sol)"
  },
  {
    "example_id": 385,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(6**3, 3**6))"
  },
  {
    "example_id": 386,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1**(2**235423523))"
  },
  {
    "example_id": 387,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\n\ndef is_multiple_of_3(n):\n    return n % 3 == 0\n\n\ndef multiples_of_3_palindromes():\n    for n in range(1, 1000):\n        if is_multiple_of_3(n) and is_palindrome(n):\n            yield n\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\na, b = 9, 12\nx = lcm(a, b)\ny = x // a\nz = x // b\n\nprint(f\"The number is {y}.\")"
  },
  {
    "example_id": 388,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "total_cars = 30\nred_cars = 1/3 * total_cars\nwhite_cars = 8\ntwo_door_cars = 0.8 * white_cars\nfour_door_cars = 0.5 * total_cars\nfour_door_red_cars = four_door_cars * red_cars\nprint(four_door_red_cars)"
  },
  {
    "example_id": 389,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "128.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "area = (9 * 4) + (8 * 7) + (12 * 3)\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 390,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0",
      "48.0",
      "528.0",
      "22.0",
      "48.0",
      "2.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "# \ndef lcm(a, b):\n    return a*b // math.gcd(a, b)\n\n# \ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# \ndef is_multiple_of_3(n):\n    return n % 3 == 0\n\n# \ndef multiples_of_3_palindromes():\n    for i in range(1, 1000):\n        if is_multiple_of_3(i) and is_palindrome(i):\n            print(i)\n\n# \ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\n# \ndef main():\n    a = 22\n    b = 48\n    print(f\"The least common multiple of {a} and {b} is {lcm(a, b)}.\")\n    print(f\"The greatest common factor of {a} and {b} is {gcd(a, b)}.\")\n\n# \nmain()"
  },
  {
    "example_id": 391,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "A3 = 25 + 49\nprint(A3)"
  },
  {
    "example_id": 392,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.5",
      "35.5",
      "35.5",
      "35.5",
      "35.5",
      "35.5",
      "35.5",
      "35.5"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "import numpy as np\n\ncounties = [\"Aiken\", \"Bamberg\", \"Barnwell\", \"Berkeley\", \"Calhoun\", \"Cherokee\", \"Chesterfield\", \"Colleton\"]\nstudents = [124, 17, 25, 583, 15, 19, 46, 64]\nyears = [2001, 2002, 2003, 2004, 2005]\n\n# Create a dictionary with the counties as the keys and their median students as the values\ncounty_median_students = {}\nfor county in counties:\n    county_median_students[county] = np.median(students)\n\n# Print out the median students for each county\nfor county, median_students in county_median_students.items():\n    print(\"The median number of students in {} was {}.\".format(county, median_students))"
  },
  {
    "example_id": 393,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 5\n\nfor i in range(1, n):\n    enrollment = 980 + (980 * 0.05)**i\n    if enrollment > 1100:\n        print(i)\n        break"
  },
  {
    "example_id": 394,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "182.93"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# convert US dollars to pounds\npounds = 300/1.64\nprint(f\"{pounds:.2f}\")\n\n\n# convert US dollars to euros\neuros = 300/1.32\nprint(f\"{euros:.2f}\")\n\n\n# calculate difference\nprint(f\"{euros - pounds:.2f}\")"
  },
  {
    "example_id": 395,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.25"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "average_test = 90\ntotal_tests = 6 + 2\nscore_per_test = average_test / total_tests\nprint(score_per_test)"
  },
  {
    "example_id": 396,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "87.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "weeks = 609 / 7\nprint(weeks)"
  },
  {
    "example_id": 397,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "-49.0"
    ],
    "solution": "x = (4 - 34) / 3\nprint(x)"
  },
  {
    "example_id": 398,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1835.46",
      "1835.46"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "a = 1421\nb = 7\nc = 47\nd = 50\ne = 9\n\n# Solution 1\nans1 = (a/b) + c/d\nans1 = ans1 * e\nprint(ans1)\n\n# Solution 2\nans2 = (a/b) + c/d\nans2 = ans2 * e\nprint(ans2)"
  },
  {
    "example_id": 399,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0",
      "34.0",
      "43.0",
      "62.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def check_product(n):\n    digits = [int(digit) for digit in str(n)]\n    product = 1\n    for digit in digits:\n        product *= digit\n    if product == 12:\n        return True\n    else:\n        return False\n\nfor i in range(100):\n    if check_product(i):\n        print(i)"
  },
  {
    "example_id": 400,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "total = 18 + 13 + 5\nprint(total)"
  },
  {
    "example_id": 401,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 1\nwhile (42789000 + n*37) % 3!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 402,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# -36, -29, -22,..., 41, 48\nlist = np.arange(-36, 48, 9)\nprint(len(list))"
  },
  {
    "example_id": 403,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# calculate the length of the altitude AD\nAD = 25/2\nprint(f\"{AD:.2f}\")"
  },
  {
    "example_id": 404,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1594323.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "hair = 3\neyebrows = 2\neyes = 1\nears = 2\nlips = 2\nshoes = 2\nclown_shoes = 1\n\ntotal = hair + eyebrows + eyes + ears + lips + shoes + clown_shoes\n\n# If a complete Mr. Potato Head personality includes eyebrows, eyes, ears, lips, shoes and optionally hair, how many different wacky personalities can Tom come up with?\n\n# Note that Mr. Potato Head can be bald.\n\n# You cannot \"mix and match\".  For example, you cannot take the left eyebrow from one pair and the right eyebrow from the other pair.\n\n# Complete list of items:\n# hair\n# eyebrows\n# eyes\n# ears\n# lips\n# shoes\n# clown_shoes\n\n# Total number of items:\ntotal\n\n# Complete list of combinations:\ncombinations = 3 ** total\n\n# Print result:\nprint(f\"Number of different wacky personalities: {combinations}\")"
  },
  {
    "example_id": 405,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.5999999999999996"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 12\nprint(x*0.3)"
  },
  {
    "example_id": 406,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.6"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "math_club = (15 * 0.3) * 0.8\nprint(math_club)"
  },
  {
    "example_id": 407,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "# define variables\nx = 10\ny = 30\n\n# solve for x\nx = lcm(x, y)\nx = int(x)\n\n# print solution\nprint(f\"Max must take {x} steps to walk down the hall.\")"
  },
  {
    "example_id": 408,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(8//2//2+6)"
  },
  {
    "example_id": 409,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "a = (0, 0); b = (8, 0); c = (8, -5); d = (6, -5);\nm = (4, 0); n = (6, -5);\nl = lcm(8, 4);\nx = symbols(\"x\")\ny = symbols(\"y\")\neq1 = (b[0] - a[0]) * x + (b[1] - a[1]) * y + a[0] * b[1] - a[1] * b[0]\neq2 = (c[0] - a[0]) * x + (c[1] - a[1]) * y + a[0] * c[1] - a[1] * c[0]\neq3 = (d[0] - a[0]) * x + (d[1] - a[1]) * y + a[0] * d[1] - a[1] * d[0]\neq4 = (m[0] - a[0]) * x + (m[1] - a[1]) * y + a[0] * m[1] - a[1] * m[0]\neq5 = (n[0] - a[0]) * x + (n[1] - a[1]) * y + a[0] * n[1] - a[1] * n[0]\neq = [eq1, eq2, eq3, eq4, eq5]\ns = solve(eq, [x, y])\nx1, y1 = s[x], s[y]\nprint(f\"{x1:.2f}, {y1:.2f}\")"
  },
  {
    "example_id": 410,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "b = 39\nc = 14\na = 180 - b - c\n\n# Find the measure of angle BPC\nbpc = a - b - c\n\nprint(f\"{bpc:.2f}\")"
  },
  {
    "example_id": 411,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(317**3 + 8**3 - (2**(3**2) + 317**3))"
  },
  {
    "example_id": 412,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "print(math.sqrt(225))"
  },
  {
    "example_id": 413,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def get_combinations(n):\n    return n * (n - 1) / 2\n\nprint(get_combinations(10))"
  },
  {
    "example_id": 414,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "313.0"
    ],
    "annotated_answers": [
      "97969.0"
    ],
    "solution": "print(97969 ** 0.5)"
  },
  {
    "example_id": 415,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "891.0"
    ],
    "annotated_answers": [
      "891.0"
    ],
    "solution": "x = lcm(11, 1001)\ny = 11**2 - 11\n\nprint(f\"{x - y}\")"
  },
  {
    "example_id": 416,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.25"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\nz = symbols('z')\nw = symbols('w')\na = symbols('a')\nb = symbols('b')\nc = symbols('c')\nd = symbols('d')\n\nscores = [100, 100, 99, 98]\n\ntotal_sum = sum(scores)\n\nmean = total_sum / len(scores)\n\nmisplaced_score = mean - 95\n\nprint(f\"{misplaced_score:.2f}\")"
  },
  {
    "example_id": 417,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define perimeter of regular hexagon\nperimeter_hex = 6 * 16\n\n# Define perimeter of regular octagon\nperimeter_oct = 8 * 16\n\n# Calculate missing side length\nside_length = lcm(perimeter_hex, perimeter_oct) / perimeter_oct\n\n# Print result\nprint(f\"{side_length} cm\")"
  },
  {
    "example_id": 418,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "260.0"
    ],
    "solution": "# Variables\nA = symbols('A')\nB = symbols('B')\n\n# Equations\neq1 = A + B\neq2 = A*B\n\n# Solve\nsol = solve((eq1, eq2))\n\n# Print\nprint(sol)"
  },
  {
    "example_id": 419,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.3055679639455185",
      "36"
    ],
    "annotated_answers": [
      "291.0"
    ],
    "solution": "# prime numbers less than 100\nprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\n# find prime numbers less than 100\nprimes_less_than_100 = []\nfor p in primes:\n    if p < 100:\n        primes_less_than_100.append(p)\n\n# find prime numbers with 1 and 2 digits\nprime_with_1_digits = []\nprime_with_2_digits = []\nfor p in primes_less_than_100:\n    if len(str(p)) == 1:\n        prime_with_1_digits.append(p)\n    elif len(str(p)) == 2:\n        prime_with_2_digits.append(p)\n\n# find prime numbers with 1 and 2 digits\nprime_with_1_digits = []\nprime_with_2_digits = []\nfor p in primes_less_than_100:\n    if len(str(p)) == 1:\n        prime_with_1_digits.append(p)\n    elif len(str(p)) == 2:\n        prime_with_2_digits.append(p)\n\n# find the product of prime numbers with 1 and 2 digits\nproduct = 1\nfor p in prime_with_1_digits:\n    product *= p\nfor p in prime_with_2_digits:\n    product *= p\nprint(f\"{product}\")"
  },
  {
    "example_id": 420,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Define variables\nx, y = symbols('x y')\n\n# Define equation\neq1 = x + y - 15\n\n# Define equation\neq2 = 4*x - 2*y - 60\n\n# Solve equations\nsol = solve((eq1, eq2), (x, y))\n\n# Print solution\nprint(sol)"
  },
  {
    "example_id": 421,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "bill_time = 400 / 50\nsam_time = 400 / 40\nprint(sam_time - bill_time)"
  },
  {
    "example_id": 422,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.72"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Define the variables\nx = symbols('x')\n\n# Define the equation\neq = (16 - x)**2 - 48*math.pi\n\n# Solve the equation\nsol = solve(eq, x)\n\n# Print the answer\nprint(f\"{sol[0]:.2f}\")"
  },
  {
    "example_id": 423,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Create symbols\nx, y = symbols('x y')\n\n# Define equations\neq1 = x**2 + y**2 - 4\neq2 = (x + 3)**2 + y**2 - 9\n\n# Solve equations\nsol = solve([eq1, eq2])\n\n# Find coordinates of point B\nx1, y1 = sol[0]\nx2, y2 = sol[1]\n\n# Find distance between point A and point B\ndistance = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n\n# Print distance\nprint(f\"{distance:.2f}\")"
  },
  {
    "example_id": 424,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.190601897395912",
      "17"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "# create a function that returns the smallest number of marbles\ndef min_marbles(n):\n    # create a list of numbers from 1 to n\n    nums = list(range(1, n + 1))\n    # find the least common multiple of the numbers\n    lcm = np.lcm.reduce(nums)\n    # find the greatest common divisor of the numbers\n    gcd = np.gcd.reduce(nums)\n    # return the smallest number of marbles\n    return lcm // gcd\n\n# call the function and print the result\nprint(min_marbles(42))"
  },
  {
    "example_id": 425,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = -1\nprint(x)"
  },
  {
    "example_id": 426,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "area = 12 * 20 / 2\nprint(area)"
  },
  {
    "example_id": 427,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# Define the number of people and offices\nn = 3\nm = 5\n\n# Define the number of ways to assign people to offices\nways = 0\n\n# Define the number of people and offices\nfor i in range(0, m+1):\n    ways += lcm(i, m-i)\n\nprint(ways)"
  },
  {
    "example_id": 428,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.6"
    ],
    "annotated_answers": [
      "0.6"
    ],
    "solution": "print(round(4/7, 1))"
  },
  {
    "example_id": 429,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "total_factors = 20\nfactors = [2, 3, 5, 7, 11, 13, 17, 19]\nprint(len(set(factors)))"
  },
  {
    "example_id": 430,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3720.0"
    ],
    "annotated_answers": [
      "3720.0"
    ],
    "solution": "print(3.72*1000)"
  },
  {
    "example_id": 431,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "39.0",
      "39.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 1\nwhile True:\n    if n % 10 == 9:\n        continue\n    a, b = n, n+10\n    if math.gcd(a, b) == 1:\n        break\n    n += 1\nprint(f\"{n}\")\n\nn = 2\nwhile True:\n    a, b = n, n+10\n    if math.gcd(a, b) == 1:\n        break\n    n += 1\nprint(f\"{n}\")\n\na, b = n, n+10\nn = lcm(a, b)\nprint(f\"{n}\")\n\nprint(f\"{len(np.unique(np.array(list(map(math.gcd, range(n+1, 2*n+1))))) )}\")"
  },
  {
    "example_id": 432,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "num_green_marbles, num_blue_marbles = 60, 60 // 3\nprint(num_blue_marbles)"
  },
  {
    "example_id": 433,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "6.249999999999998",
      "25.0",
      "25.0",
      "25.0",
      "25.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\ndef square(x):\n    return x**2\n\ndef triangle(x):\n    return (x * math.sin(math.pi/6))**2\n\ndef rectangle(x):\n    return x**2\n\ndef rhombus(x):\n    return x**2\n\ndef kite(x):\n    return x**2\n\ndef polygon(x):\n    return x**2\n\nprint(square(5))\nprint(triangle(5))\nprint(rectangle(5))\nprint(rhombus(5))\nprint(kite(5))\nprint(polygon(5))"
  },
  {
    "example_id": 434,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "# Number of frogs captured\nn = 45\n# Number of frogs observed\nm = 40\n# Number of frogs marked the previous day\np = 10\n# Pond size\nL = 100\n\n# Calculate the number of frogs in the pond\nfrogs = (n - m + p) * L / (n + m - p)\n\n# Round up to the nearest integer\nfrogs = math.ceil(frogs)\n\n# Print the answer\nprint(f\"The best estimate of how many frogs live in the pond is {frogs}.\")"
  },
  {
    "example_id": 435,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "4.0",
      "5.0",
      "20.0",
      "7.8"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Create a list of the numbers\nnum_list = [10, 4, 5, 20]\n\n# Calculate the average\navg = sum(num_list) / 5\n\n# Calculate the difference between the average and the first number\ndiff = avg - num_list[0]\n\n# Find the fifth number\nnum_list.append(num_list[0] + diff)\n\nprint(num_list)"
  },
  {
    "example_id": 436,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 117*119\nnum_factors = 0\nfor i in range(1,n+1):\n    if n%i == 0:\n        num_factors += 1\nprint(f\"{num_factors}\")"
  },
  {
    "example_id": 437,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2500.0",
      "157.0"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "def get_perfect_square_sequence(n):\n    \"\"\"\n    Return the sequence of perfect squares from 1 to n.\n    \"\"\"\n    sqrt_n = int(math.sqrt(n))\n    perfect_square_sequence = []\n    for i in range(1, sqrt_n + 1):\n        perfect_square_sequence.append(i**2)\n    return perfect_square_sequence\n\ndef get_digits_in_perfect_square_sequence(perfect_square_sequence):\n    \"\"\"\n    Return the number of digits in the perfect square sequence.\n    \"\"\"\n    digit_count = 0\n    for i in perfect_square_sequence:\n        digit_count += len(str(i))\n    return digit_count\n\ndef main():\n    n = 2500\n    perfect_square_sequence = get_perfect_square_sequence(n)\n    digit_count = get_digits_in_perfect_square_sequence(perfect_square_sequence)\n    print(f\"The number of digits in the perfect square sequence from 1 to {n} is {digit_count}.\")\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 438,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_factors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\ndef get_prime_factors(n):\n    factors = get_factors(n)\n    prime_factors = []\n    for factor in factors:\n        if is_prime(factor):\n            prime_factors.append(factor)\n    return prime_factors\n\ndef greatest_prime_factor(n):\n    return max(get_prime_factors(n))\n\nprint(greatest_prime_factor(3105))"
  },
  {
    "example_id": 439,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-90.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Variables\na, b = symbols('a, b')\n\n# Equations\neq1 = 4*a + 5*b - 20\neq2 = 2*a + 3*b - 15\n\n# Solve\nsol = solve([eq1, eq2], [a, b])\n\n# Print\nprint(f\"The total area of the shaded region is {lcm(4, 5) * sol[a] + lcm(2, 3) * sol[b]}:\")"
  },
  {
    "example_id": 440,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "print(182 + 3*7 - 64//2 + 27//3)"
  },
  {
    "example_id": 441,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0",
      "4.0",
      "2.0",
      "9.0",
      "192.0",
      "4.0",
      "2.0",
      "9.0",
      "192.0",
      "56.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "# Create variables\nx, y = symbols('x y')\n\n# Create equations\neq1 = x**2 + 16*y**2 - 112*x - 144*y + 64\neq2 = x**2 + 16*y**2 - 112*x - 144*y + 64\n\n# Solve equations\nsol = solve([eq1, eq2], [x, y])\n\n# Print solution\nprint(sol)"
  },
  {
    "example_id": 442,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "16.0",
      "22.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Number of people in class\nn = 42\n\n# Number of people who brought yoga mats\ny = 36\n\n# Number of people who brought eco-friendly water bottles\nw = 26\n\n# Number of people who brought both yoga mats and water bottles\nb = 20\n\n# Number of people who didn't bring a yoga mat\ny_no = n - y\n\n# Number of people who didn't bring an eco-friendly water bottle\nw_no = n - w\n\n# Number of people who didn't bring both yoga mats and water bottles\nb_no = n - b\n\n# Print result\nprint(\"Number of people who didn't bring a yoga mat:\", y_no)\nprint(\"Number of people who didn't bring an eco-friendly water bottle:\", w_no)\nprint(\"Number of people who didn't bring both yoga mats and water bottles:\", b_no)"
  },
  {
    "example_id": 443,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 20\nm = 5\np = 0.5\n\ndef solve_problem(n, m, p):\n    # calculate number of blue marbles needed\n    num_blue = int(lcm(n, m) / gcd(n, m) * p)\n    return num_blue\n\nprint(solve_problem(n, m, p))"
  },
  {
    "example_id": 444,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "16.0",
      "84.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "# Original number of pins\nn = 100\n\n# Number of pins in each pile\npiles = int(n / 2)\n\n# Number of pins John gave his brother\nbrother = int(piles / 3)\n\n# Number of pins John has left\nremaining = n - brother\n\nprint(f\"John originally had {n} pins.\")\nprint(f\"He gave {brother} pins to his brother.\")\nprint(f\"He has {remaining} pins left.\")"
  },
  {
    "example_id": 445,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "10.0",
      "10.0",
      "10.0",
      "10.0",
      "10.0",
      "10.0",
      "10.0",
      "10.0",
      "11.0"
    ],
    "annotated_answers": [
      "264.0"
    ],
    "solution": "# positive two-digit integers\nfor i in range(10, 100):\n  for j in range(10, 100):\n    if i % 10 == 3 * j % 10:\n      print(i)"
  },
  {
    "example_id": 446,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 1\nwhile n < 12:\n    if 4*n + 3 < 25 and -7*n + 5 < 24:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 447,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-13.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "y = 8 - 21\nprint(y)"
  },
  {
    "example_id": 448,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "a = 8\nb = 8\nc = 8\n\n# find lcm of a, b and c\nl = lcm(a, b, c)\n\n# find hcf of a, b and c\nh = gcd(a, b, c)\n\n# find perimeter\np = l\n\n# find area\nA = (l**2)/(4*h)\n\n# print perimeter and area\nprint(f\"Perimeter of the smallest possible right triangle is: {p}\")\nprint(f\"Area of the smallest possible right triangle is: {A}\")"
  },
  {
    "example_id": 449,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5208333333333334"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(25/4/12)"
  },
  {
    "example_id": 450,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "x = 3*0.25\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 451,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1080.0"
    ],
    "annotated_answers": [
      "1080.0"
    ],
    "solution": "seconds = 0.30 * 3600\nprint(seconds)"
  },
  {
    "example_id": 452,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-23.0",
      "19.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Variables\nx = symbols('x')\ny = symbols('y')\nz = symbols('z')\n\n# Equations\neq1 = 19*x + 16*y + 3*z + 4*y\neq2 = 19*x + 16*y + 3*z + 4*z\n\n# Solve system of equations\nsol = solve([eq1, eq2], [x, y, z])\n\n# Print solution\nprint(f\"The traveler is {sol[x]} miles from the starting point.\")"
  },
  {
    "example_id": 453,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "time = 17/1.7\nprint(time)"
  },
  {
    "example_id": 454,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = symbols('n')\nf = 12/n\nsol = solve(f, n)\nprint(sum(sol))"
  },
  {
    "example_id": 455,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "# define variables\ngold = 1\nsilver = 2\nbronze = 3\n\n# create list of all possible combinations\ncombinations = list(itertools.product(range(1,8), repeat=3))\n\n# loop through all combinations and count number of gold, silver, and bronze\ntotal = 0\nfor combination in combinations:\n    gold_count = combination.count(1)\n    silver_count = combination.count(2)\n    bronze_count = combination.count(3)\n    total += lcm(gold_count, silver_count, bronze_count)\n\n# print answer\nprint(total)"
  },
  {
    "example_id": 456,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "x = symbols('x')\n\n# degree of the largest angle\nlargest_angle = x - 2\n\n# degree of the smallest angle\nsmallest_angle = x + 2\n\n# degree of the second smallest angle\nsecond_smallest_angle = x + 4\n\n# degrees of the remaining angles\nremaining_angles = [x, x, x, x, x]\n\n# degree measure of each interior angle\ndegree_measures = [largest_angle, smallest_angle, second_smallest_angle] + remaining_angles\n\n# sum of degree measures\nsum_of_degree_measures = sum(degree_measures)\n\n# solution\nsolution = solve(sum_of_degree_measures, x)\n\n# print(solution)\nprint(f\"The largest interior angle is {solution[0]} degrees\")"
  },
  {
    "example_id": 457,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "1.0",
      "15.0",
      "1.0",
      "21.0",
      "1.0",
      "30.0",
      "1.0",
      "35.0",
      "1.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "# Find the LCM of 3 and 4\nlcm_of_3_and_4 = lcm(3, 4)\nprint(f\"{lcm_of_3_and_4}\")\n\n# Find the GCD of 3 and 4\ngcd_of_3_and_4 = gcd(3, 4)\nprint(f\"{gcd_of_3_and_4}\")\n\n# Find the LCM of 3 and 5\nlcm_of_3_and_5 = lcm(3, 5)\nprint(f\"{lcm_of_3_and_5}\")\n\n# Find the GCD of 3 and 5\ngcd_of_3_and_5 = gcd(3, 5)\nprint(f\"{gcd_of_3_and_5}\")\n\n# Find the LCM of 3 and 7\nlcm_of_3_and_7 = lcm(3, 7)\nprint(f\"{lcm_of_3_and_7}\")\n\n# Find the GCD of 3 and 7\ngcd_of_3_and_7 = gcd(3, 7)\nprint(f\"{gcd_of_3_and_7}\")\n\n# Find the LCM of 3 and 10\nlcm_of_3_and_10 = lcm(3, 10)\nprint(f\"{lcm_of_3_and_10}\")\n\n# Find the GCD of 3 and 10\ngcd_of_3_and_10 = gcd(3, 10)\nprint(f\"{gcd_of_3_and_10}\")\n\n# Find the LCM of 5 and 7\nlcm_of_5_and_7 = lcm(5, 7)\nprint(f\"{lcm_of_5_and_7}\")\n\n# Find the GCD of 5 and 7\ngcd_of_5_and_7 = gcd(5, 7)\nprint(f\"{gcd_of_5_and_7}\")\n\n#"
  },
  {
    "example_id": 458,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "print(9000/200)"
  },
  {
    "example_id": 459,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.9999999999999996"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "answer = ((1/42)**4)*2*(42**4)+(42**(2+1-3))\nprint(answer)"
  },
  {
    "example_id": 460,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "cones = 72\ncones_noon = cones * 2/3\ncones_end = cones_noon * 2/3\nprint(cones_end)"
  },
  {
    "example_id": 461,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2560.0"
    ],
    "annotated_answers": [
      "2560.0"
    ],
    "solution": "bacteria = 10\n\nfor i in range(1, 9):\n    bacteria *= 2\n\nprint(bacteria)"
  },
  {
    "example_id": 462,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "192.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "print(2**(2**3) - (2**2)**3)"
  },
  {
    "example_id": 463,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# The temperature in a desert rose 1.5 degrees in 15 minutes\n# If this rate of increase remains constant,\n# how many degrees will the temperature rise in the next 2 hours?\n\n# Let T(t) be the temperature at time t\n# Let \u0394T be the change in temperature\n\n# \u0394T = 1.5\n\n# T(t) = T0 + \u0394Tt\n# T0 = 0\n\n# T(t) = \u0394Tt\n\n# dT = \u0394Tdt\n# dT = 1.5dt\n\n# dt = dT/1.5\n# dt = 2\n\n# T(t) = \u0394Tt\n# T(2) = 1.5(2)\n# T(2) = 3\n\n# T(t) = \u0394Tt\n# T(2) = 1.5(2)\n# T(2) = 3\n\n# T(2) = 3\n\n# The temperature will rise 3 degrees in the next 2 hours\n\nprint(f\"The temperature will rise 3 degrees in the next 2 hours\")"
  },
  {
    "example_id": 464,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "girls = 35\nboys = 35 // 13\nprint(boys)"
  },
  {
    "example_id": 465,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1341.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "x, y, z = symbols('x y z')\n\neq = x + y + z - 1341\n\nsol = solve(eq, (x, y, z))\n\nlargest = max(sol, key=lambda x: x[1])\n\nprint(largest)"
  },
  {
    "example_id": 466,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "meerkats = 10\nnights = 2\nfor i in range(nights):\n    for j in range(meerkats):\n        if i == j:\n            continue\n        print(i)"
  },
  {
    "example_id": 467,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x, y, z = symbols('x y z')\n# red balloon\nR = 4\n# blue balloon\nB = 6\n# yellow balloon\nY = 10\n\n# total number of pots\nN = 600\n\n# find the least common multiple of R, B, Y\nL = lcm(R, B, Y)\n\n# find the greatest common divisor of R, B, Y\nG = gcd(R, B, Y)\n\n# find the number of pots with three different colored balloons\n# by dividing the total number of pots by the least common multiple\n# and multiplying by the greatest common divisor\nnum_pots = N / L * G\n\n# print the number of pots with three different colored balloons\nprint(num_pots)"
  },
  {
    "example_id": 468,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "36.0",
      "3.0",
      "144.0",
      "2.0",
      "5184.0",
      "480.0",
      "2.0",
      "2.0",
      "36.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a*b*c - 120\neq2 = (a+b+c)/3 - 24\nans = solve([eq1, eq2], [a, b, c])\nprint(ans)"
  },
  {
    "example_id": 469,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.5"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "# Define length\nL = 5*math.sqrt(5)\n\n# Define width\nW = L/2\n\n# Find area\nA = W*L\n\n# Print answer\nprint(f\"The area of the rectangle is {A:.2f}\")"
  },
  {
    "example_id": 470,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "outfits = 5 * 6 * 8\nprint(outfits)"
  },
  {
    "example_id": 471,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# define variables\nw = 6\ns = 10\n\n# define handshake function\ndef handshake(w, s):\n    h = 0\n    for x in range(w):\n        h += lcm(x + 1, s)\n    return h\n\n# print solution\nprint(f\"{handshake(w, s):.0f}\")"
  },
  {
    "example_id": 472,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "1001.0"
    ],
    "solution": "num = 7\nfor i in range(1000, 10000):\n    if i % num == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 473,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "print(round(10.0000198 * 5.9999985401 * 6.9999852))"
  },
  {
    "example_id": 474,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43740.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "sum = 0\nfor i in range(10, 100):\n    for j in range(10, 100):\n        if i % 10 == 4 * j % 10:\n            sum += i\nprint(sum)"
  },
  {
    "example_id": 475,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define x and y\nx = 3\ny = 36\n\n# Solve for the lcm\nlcm_value = lcm(x, y)\n\n# Define time needed to paint the house\nt = 3\n\n# Define the number of good workers\nn = 3\n\n# Define the number of bad workers\nm = lcm_value / t - n\n\n# Print the number of bad workers needed\nprint(f\"You need {m} bad workers to paint your house on time.\")"
  },
  {
    "example_id": 476,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# set variables\nw = 2\nl = 4\na = 2\n\n# set equation\nx = l * w\n\n# set equation\ny = a * w\n\n# solve for x\nx = l * w\n\n# solve for y\ny = a * w\n\n# calculate area\narea = x * y\n\n# round area\narea = round(area, 2)\n\n# print area\nprint(area)"
  },
  {
    "example_id": 477,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5937.0"
    ],
    "annotated_answers": [
      "5937.0"
    ],
    "solution": "pick_per_hour = 15832/8\nprint(pick_per_hour * 3)"
  },
  {
    "example_id": 478,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Define the variables\nn_vanilla, n_chocolate, n_strawberry, n_cherry = symbols('n_vanilla, n_chocolate, n_strawberry, n_cherry')\n\n# Define the constraints\nconstraints = [n_chocolate + n_strawberry + n_cherry + n_vanilla == 4, n_chocolate!= 0]\n\n# Find the solution to the constraints\nsol = solve(constraints, [n_vanilla, n_chocolate, n_strawberry, n_cherry])\n\n# Count the number of solutions\nn_solutions = len(sol)\n\n# Print the solution\nprint(n_solutions)"
  },
  {
    "example_id": 479,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(pow(-5, 3) + pow(-2, 3) + pow(2, 3) + pow(5, 3))"
  },
  {
    "example_id": 480,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Using the quadratic formula\na = 25 - 16\nb = 25 - 16\nc = 0\nd = b**2 - 4*a*c\nx1 = (-b + math.sqrt(d)) / (2*a)\nx2 = (-b - math.sqrt(d)) / (2*a)\nprint(f\"The solution is {x1} or {x2}\")"
  },
  {
    "example_id": 481,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 4\ny = 0.5\nprint(f\"{x/y:.2f}\")"
  },
  {
    "example_id": 482,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25000.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "trips = 1000000000 / 40000\nprint(trips)"
  },
  {
    "example_id": 483,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "import math\n\ndef get_perimeter(a, b):\n    return 2 * (a + b)\n\ndef get_area(a, b):\n    return a * b\n\ndef get_number_of_ways(n):\n    ways = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if get_perimeter(i, j) == n and get_area(i, j) == n:\n                ways += 1\n    return ways\n\ndef get_number_of_ways_with_two_more_pennies(n):\n    ways = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if get_perimeter(i + 2, j) == n and get_area(i + 2, j) == n:\n                ways += 1\n    return ways\n\ndef main():\n    number_of_ways = get_number_of_ways(40)\n    number_of_ways_with_two_more_pennies = get_number_of_ways_with_two_more_pennies(40)\n    if number_of_ways == 3 and number_of_ways_with_two_more_pennies == 1:\n        print(\"The number of pennies is 40\")\n    else:\n        print(\"The number of pennies is not 40\")\n\nmain()"
  },
  {
    "example_id": 484,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "373.24"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "zinc_percent = 0.20\ncopper_percent = 0.80\n\ncopper_oz = 48\n\ncopper_gm = copper_oz * 31.1035\nzinc_gm = copper_gm * (1 - copper_percent) / (1 - zinc_percent)\n\nprint(f\"{zinc_gm:.2f} grams of zinc are in the trumpet\")"
  },
  {
    "example_id": 485,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(92 - 45 / (3 * 5) - 5 ** 2)"
  },
  {
    "example_id": 486,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.2"
    ],
    "annotated_answers": [
      "5.5"
    ],
    "solution": "# define the function\ndef fold(n, m, x):\n    if n == 0:\n        return m\n    else:\n        return m - (x/fold(n-1, m, x))\n\n# define the variables\nn = 2\nm = 11\nx = 8.5\n\n# calculate the length of the longest side\nlength = fold(n, m, x)\n\n# round the answer\nprint(f\"{length:.1f}\")"
  },
  {
    "example_id": 487,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-89.0"
    ],
    "solution": "M = 1\nN = 1\n\nprint(M+N)"
  },
  {
    "example_id": 488,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "for x in range(1, 100):\n    if 0.25 < x/5 < 0.67:\n        print(x)"
  },
  {
    "example_id": 489,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "quarter = 25\nnickel = 5\npenny = 1\n\n# find the least common multiple of quarter, nickel and penny\nlcm_of_three = lcm(quarter, nickel, penny)\n\n# find the greatest common divisor of quarter, nickel and penny\ngcd_of_three = gcd(quarter, nickel, penny)\n\n# find all the possible combinations of the coins\ncombinations = itertools.combinations([quarter, nickel, penny], 2)\n\n# count the number of combinations that add up to the lcm\nnumber_of_combinations = sum(\n    int(sum(i) == lcm_of_three) for i in combinations\n)\n\n# print the number of possible combinations\nprint(f\"There are {number_of_combinations} possible combinations.\")"
  },
  {
    "example_id": 490,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "868.7"
    ],
    "annotated_answers": [
      "868.8"
    ],
    "solution": "print(round(543.55,1) + round(25.23,1) + round(299.98,1))"
  },
  {
    "example_id": 491,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6487.0"
    ],
    "annotated_answers": [
      "507.0"
    ],
    "solution": "a = 13\nb = 500\n\n# find the lcm of a and b\nlcm = lcm(a,b)\n\n# find the gcd of a and lcm\ngcd = gcd(a,lcm)\n\n# find the solution to the equation\nx = lcm - gcd\n\nprint(x)"
  },
  {
    "example_id": 492,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "729.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "print(9**3)"
  },
  {
    "example_id": 493,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# $2^5 = 32$\n# $5^2 = 25$\nprint(32 - 25)"
  },
  {
    "example_id": 494,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.5",
      "3.5",
      "7.0",
      "3.5"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import math\n\n# area of triangle ABC\ns = 0.5 * (3 + 4)\nprint(s)\n\n# area of triangle BCD\nt = 0.5 * (3 + 4)\nprint(t)\n\n# area of triangle ABCD\nu = s + t\nprint(u)\n\n# area of triangle ABCD\nv = u / 2\nprint(v)"
  },
  {
    "example_id": 495,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Define variables\nx = symbols('x')\na, b = symbols('a b')\n\n# Define equations\neq1 = a*x - b\neq2 = a*x + b\n\n# Solve equations\nsol = solve((eq1, eq2))\n\n# Print answer\nprint(sol[0])"
  },
  {
    "example_id": 496,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "25.0",
      "49.0",
      "81.0",
      "121.0",
      "169.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for i in range(5, 211):\n    if i % 2!= 0 and i**0.5 % 1 == 0:\n        print(i)"
  },
  {
    "example_id": 497,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "10.0",
      "10.0",
      "10.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# define the variables\nx = symbols('x')\ny = symbols('y')\n\n# define the equations\neq1 = 3*3 + 3*(3 + 3) - 3**3\neq2 = x*x + y*y - 100\n\n# solve the equations\nsol = solve([eq1, eq2], [x, y])\n\n# print the solution\nprint(sol)"
  },
  {
    "example_id": 498,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def min_perfect_squares(n):\n    i = 1\n    while i * i < n:\n        i += 1\n    return n // i + 1\n\nprint(min_perfect_squares(49))"
  },
  {
    "example_id": 499,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0",
      "2.0",
      "24.0",
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Define the variables\nx, y = symbols('x, y')\n\n# Define the equation\neq = x**2 + y**2 - 24\n\n# Solve the equation\nsol = solve(eq, x, y)\n\n# Print the solution\nprint(sol)\n\n# Define the function\ndef min_perfect_squares(n):\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            j = n // i\n            if i**2 + j**2 == n:\n                return i, j\n    return None\n\n# Print the answer\nprint(min_perfect_squares(100))"
  },
  {
    "example_id": 500,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1800.0"
    ],
    "annotated_answers": [
      "1250.0"
    ],
    "solution": "# Calculate the number of dollars equivalent to 1,000,000 lira\ndollars = 1200 * 1.50\nprint(f\"{dollars:.2f}\")"
  },
  {
    "example_id": 501,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.21"
    ],
    "annotated_answers": [
      "1.21"
    ],
    "solution": "print(max([0.78, 0.12, 1.33, 1.328]) - min([0.78, 0.12, 1.33, 1.328]))"
  },
  {
    "example_id": 502,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.84"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "import math\nwidth = 0.4\narea = 100\nouter_area = area - width * width\nprint(outer_area)"
  },
  {
    "example_id": 503,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "x = 2*7 + 7\nprint(x)"
  },
  {
    "example_id": 504,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "a, b = 7, 13\n\ndef min_perfect_squares(n):\n    \"\"\"Return the minimum number of perfect squares required to sum to n.\"\"\"\n    i = 1\n    while i * i < n:\n        i += 1\n    count = 0\n    while i * i <= n:\n        count += 1\n        i += 1\n    return count\n\n\ndef num_even_positive_ints_less_than_ab(a, b):\n    \"\"\"Return the number of even positive integers less than ab.\"\"\"\n    return sum(2 * i for i in range(1, min_perfect_squares(a * b)))\n\n\nprint(num_even_positive_ints_less_than_ab(a, b))"
  },
  {
    "example_id": 505,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.75"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "# find the average number of cartons of milk per day\njuniors_per_day = 1500/5\n\n# find the average number of cartons of milk per day\nseniors_per_day = juniors_per_day/2\n\n# find the total number of cartons of milk per day\ntotal_per_day = juniors_per_day + seniors_per_day\n\n# find the total number of cartons of milk per week\ntotal_per_week = total_per_day*5\n\n# find the average number of cartons of milk per day\nseniors_per_day = total_per_week/600\n\n# print the average number of cartons of milk per day\nprint(f\"The average number of cartons of milk per day is {seniors_per_day:.2f}\")"
  },
  {
    "example_id": 506,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.09429824561403508"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define variables\nelephant_speed = 19\nlion_speed = 24\n\n# Define constants\nminutes_per_mile = 60\n\n# Calculate time for elephant to catch lion\nelephant_to_lion_time = (1/elephant_speed)\nlion_to_elephant_time = (1/lion_speed)\n\n# Calculate total time\ntotal_time = elephant_to_lion_time + lion_to_elephant_time\n\n# Print result\nprint(f\"It will take {total_time} minutes for the lion to catch the elephant.\")"
  },
  {
    "example_id": 507,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Find the least common multiple\nlcm = 240\n\n# Find the greatest common divisor\ngcd = 24\n\n# One of the integers is 48\nx = 48\n\n# Find the other integer\ny = lcm // gcd\n\n# Print the other integer\nprint(y)"
  },
  {
    "example_id": 508,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "# Area of a domino\narea = 2 * 2 * 60\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 509,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2100.0"
    ],
    "annotated_answers": [
      "2100.0"
    ],
    "solution": "print(math.sqrt(5*10*14*21*15*20))"
  },
  {
    "example_id": 510,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4096.0",
      "8.0",
      "64.0",
      "8.0",
      "512.0",
      "4096.0",
      "4096.0",
      "4096.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Define the number of options for each question\n# There are 2 options for question a, and 4 options for question b, and 2 options for question c\n# 2^3 = 8 different answer combinations\na = 2\nb = 4\nc = 2\n\n# Calculate the total number of different combinations\n# 8 * 8 * 8 = 512 different answer combinations\nprint(a**3 * b**3 * c**3)\n\n# Calculate the number of different combinations for the first question\n# 2 * 8 = 16 different answer combinations for question a\nprint(a**3)\n\n# Calculate the number of different combinations for the second question\n# 4 * 8 = 32 different answer combinations for question b\nprint(b**3)\n\n# Calculate the number of different combinations for the third question\n# 2 * 8 = 16 different answer combinations for question c\nprint(c**3)\n\n# Calculate the number of different combinations for the first two questions\n# 16 * 32 = 512 different answer combinations for question a and b\nprint(a**3 * b**3)\n\n# Calculate the number of different combinations for the first two questions and the third question\n# 16 * 32 * 16 = 1024 different answer combinations for question a, b, and c\nprint(a**3 * b**3 * c**3)\n\n# Calculate the number of different combinations for the first two questions and the third question\n# 16 * 32 * 16 = 1024 different answer combinations for question a, b, and c\nprint(a**3 * b**3 * c**3)\n\n# Calculate the number of different combinations for the first two questions and the third question\n# 16 * 32 * 16 = 1024 different answer combinations for question a, b, and c\nprint(a**3 * b**3 * c**3)\n\n# Calculate the number of different combinations for the first two questions and the third question\n# 16 * 32 * 16 = 1024 different answer combinations for question a, b, and c"
  },
  {
    "example_id": 511,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "shadow_distance = 15 - 5 - 6\nprint(shadow_distance)"
  },
  {
    "example_id": 512,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7004.0"
    ],
    "annotated_answers": [
      "7004.0"
    ],
    "solution": "a, b = symbols('a, b')\nexpr = 3 * 11 * 13 * 21 - 2005 - a * b\nsol = solve(expr, b)\nprint(sol)"
  },
  {
    "example_id": 513,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# calculate the degree measure of the smaller angle formed by the minute and hour hands\n# given that the 12-hour analog clock reads 8:00\n\n# convert 8:00 to 8:00:00\nhour_angle = 8*60\n\n# convert 0:00 to 0:00:00\nmin_angle = 0*60\n\n# calculate the degree measure of the smaller angle formed by the minute and hour hands\nangle = math.atan2(math.sin(min_angle), math.cos(hour_angle))\n\n# convert the angle from radians to degrees\nangle = math.degrees(angle)\n\n# print the degree measure of the smaller angle formed by the minute and hour hands\nprint(angle)"
  },
  {
    "example_id": 514,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "pints = 2*2\nquarts = 4\ngallons = 2\nmilk = gallons * quarts\nmilk_pints = milk/pints\nprint(f\"{milk_pints}\")"
  },
  {
    "example_id": 515,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "249980.37"
    ],
    "annotated_answers": [
      "54000.0"
    ],
    "solution": "# Calculate the area of the watered circular field\narea_watered = (math.pi * 5**2) / 4\n\n# Calculate the area of the square plot of land\narea_square = 500**2\n\n# Calculate the area of the land that is not watered\narea_unwatered = area_square - area_watered\n\n# Print the result\nprint(f\"{area_unwatered:.2f}\")"
  },
  {
    "example_id": 516,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Calculate lcm of 4 and 6\nlcm_4_6 = lcm(4, 6)\n\n# Calculate lcm of 24 and 8\nlcm_24_8 = lcm(24, 8)\n\n# Calculate lcm of lcm_4_6 and lcm_24_8\nlcm_total = lcm(lcm_4_6, lcm_24_8)\n\n# Calculate gcd of lcm_total and 5\ngcd_5_lcm_total = gcd(5, lcm_total)\n\n# Calculate 5/gcd_5_lcm_total\nans = 5 / gcd_5_lcm_total\n\nprint(f\"{ans:.2f}\")"
  },
  {
    "example_id": 517,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def min_perfect_squares(n):\n    \"\"\"Return the minimum number of perfect squares needed to sum up to n.\n    >>> min_perfect_squares(12)\n    3\n    >>> min_perfect_squares(13)\n    4\n    >>> min_perfect_squares(100)\n    10\n    \"\"\"\n    # Initialize the list of perfect squares\n    perfect_squares = []\n    # Initialize the number of perfect squares needed\n    num_perfect_squares = 0\n\n    # Loop through the range of perfect squares\n    for i in range(int(n**0.5), 0, -1):\n        # Check if i is a perfect square\n        if i**0.5 == int(i**0.5):\n            # Add i to the list of perfect squares\n            perfect_squares.append(i)\n            # Increment the number of perfect squares needed\n            num_perfect_squares += 1\n\n    # Return the number of perfect squares needed\n    return num_perfect_squares\n\n\n# Test the min_perfect_squares function\nprint(min_perfect_squares(100))"
  },
  {
    "example_id": 518,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print((math.sqrt(100) - math.sqrt(36))**2)"
  },
  {
    "example_id": 519,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "width = 9/6*10\nprint(width)"
  },
  {
    "example_id": 520,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "print(15 + 8**2 - 3)"
  },
  {
    "example_id": 521,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "print(9/2)"
  },
  {
    "example_id": 522,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "print((-49) // 7)"
  },
  {
    "example_id": 523,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "111.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "count = 0\nfor i in range(1, 1000):\n    if i % 9 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 524,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# given mean is 21\nmean = 21\n\n# generate the list of five consecutive integers\nn = np.arange(5)\n\n# find the smallest number in the list\nsmallest = n[0]\n\n# loop through the list and compare each number with the smallest\nfor i in n:\n    if i < smallest:\n        smallest = i\n\n# print the smallest number\nprint(smallest)"
  },
  {
    "example_id": 525,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "r = 24/3 + 5\nprint(r)"
  },
  {
    "example_id": 526,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(math.sqrt(28 + math.sqrt(1296)))"
  },
  {
    "example_id": 527,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define the factors of 12\nfactors = [2, 3, 4, 6, 12]\n\n# Define the list of numbers that Ezekiel writes\nnumbers = []\n\n# Loop through each factor\nfor factor in factors:\n\n    # Define the list of integers less than or equal to the factor and \n    # that share no divisors with the factor other than 1.\n    # E.g. for 4, this list would be [1, 2, 3, 4].\n    less_than_factor = [x for x in range(1, factor + 1) if gcd(x, factor) == 1]\n\n    # Add the list of integers to the total list\n    numbers.extend(less_than_factor)\n\n# Print the length of the total list\nprint(len(numbers))"
  },
  {
    "example_id": 528,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2520.0"
    ],
    "annotated_answers": [
      "2520.0"
    ],
    "solution": "def lcm(x,y):\n    return x*y // math.gcd(x,y)\n\ndef lcm_list(my_list):\n    if len(my_list) == 2:\n        return lcm(my_list[0], my_list[1])\n    else:\n        return lcm(my_list[0], lcm_list(my_list[1:]))\n\nprint(lcm_list(list(range(1,10))))"
  },
  {
    "example_id": 529,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0",
      "4.0",
      "50.0",
      "4.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "# Solve the equation 2x + 8y = 400\n# using the extended Euclidean algorithm\n# and the fact that gcd(2, 8) = 2\n# to find the solution x = 100\n# and y = 200\nx, y = symbols('x y')\nsolve_x = solve(2*x + 8*y - 400, x)\nsolve_y = solve(2*x + 8*y - 400, y)\nx_value = solve_x[0]\ny_value = solve_y[0]\nprint(f\"The swimmer is {x_value} meters from the finish line.\")\nprint(f\"The dolphin is {y_value} meters from the finish line.\")"
  },
  {
    "example_id": 530,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.3333333333333333"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "# Fresh cost\nfresh_cost = 1.00\n# Bright cost\nbright_cost = 60.00 + fresh_cost\n# Glow cost\nglow_cost = 0.75 * bright_cost\n# Glow volume\nglow_volume = 0.75 * 0.75 * bright_cost\n\n# cost per unit of volume\nglow_cost_per_unit = glow_cost / glow_volume\n\nprint(glow_cost_per_unit)"
  },
  {
    "example_id": 531,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "440.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "max_handshakes = 22 * 20\nprint(max_handshakes)"
  },
  {
    "example_id": 532,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "556.0"
    ],
    "annotated_answers": [
      "1251.0"
    ],
    "solution": "total_students = 2/3 * 834\nprint(total_students)"
  },
  {
    "example_id": 533,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2119145.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = symbols('a')\nb = symbols('b')\nn = 9\n\ndef f(x):\n    return x[0] * 10 + x[1] - n\n\ndef df(x):\n    return [x[1] - x[0], 1]\n\nx0 = [0, 0]\n\nres = minimize(f, x0, jac=df)\n\nprint(f\"{res.x[0] * 10 + res.x[1]:.0f}\")"
  },
  {
    "example_id": 534,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def divisible_by_3(n):\n    digits = [int(digit) for digit in str(n)]\n    if sum(digits) % 3 == 0 and digits[-1] == 0:\n        return len([digit for digit in digits if digit in [2, 4, 6, 8, 9]])\n    else:\n        return 0\n\nprint(divisible_by_3(10))\nprint(divisible_by_3(11))\nprint(divisible_by_3(12))\nprint(divisible_by_3(13))\nprint(divisible_by_3(14))\nprint(divisible_by_3(15))\nprint(divisible_by_3(16))\nprint(divisible_by_3(17))\nprint(divisible_by_3(18))\nprint(divisible_by_3(19))"
  },
  {
    "example_id": 535,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2008.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "# Set the variable 'x' to be the value of the expression\nx = 2008\n\n# Print the value of the expression\nprint(x)"
  },
  {
    "example_id": 536,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "7.0",
      "7.0",
      "7.0",
      "7.0",
      "7.0",
      "7.0",
      "7.0",
      "7.0",
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def digits(n):\n    while n >= 1:\n        n, remainder = divmod(n, 10)\n        yield remainder\n\nfor i in range(2007):\n    print(next(digits(7)))"
  },
  {
    "example_id": 537,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "6.0",
      "4.0",
      "8.0",
      "5.0",
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def prime_sum(a, b):\n    if a >= b:\n        return False\n    if a * 2 == b:\n        return True\n    if b * 2 == a:\n        return True\n    return False\n\nfor i in range(100):\n    for j in range(100):\n        if prime_sum(i, j):\n            print(i, j)\n            break"
  },
  {
    "example_id": 538,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def is_divisible(n, d):\n    return n % d == 0\n\n\ndef is_positive(n):\n    return n > 0\n\n\ndef is_less_than_100(n):\n    return n < 100\n\n\ndef is_divisible_by_3_and_4(n):\n    return is_divisible(n, 3) and is_divisible(n, 4)\n\n\ndef is_divisible_by_3_and_4_and_positive(n):\n    return is_divisible_by_3_and_4(n) and is_positive(n)\n\n\ndef is_less_than_100_and_divisible_by_3_and_4(n):\n    return is_less_than_100(n) and is_divisible_by_3_and_4(n)\n\n\ndef is_less_than_100_and_divisible_by_3_and_4_and_positive(n):\n    return is_less_than_100_and_divisible_by_3_and_4(n) and is_positive(n)\n\n\ndef count_numbers_less_than_100_and_divisible_by_3_and_4(n):\n    return len(list(filter(is_less_than_100_and_divisible_by_3_and_4, range(1, n + 1))))\n\n\nprint(count_numbers_less_than_100_and_divisible_by_3_and_4(100))"
  },
  {
    "example_id": 539,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "def sum_of_powers(x, n):\n    return sum(x**i for i in range(n+1))\n\nprint(sum_of_powers(-1, 2011))"
  },
  {
    "example_id": 540,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "count = 0\nfor i in range(0, 500, 2):\n    if i == 5 * (i // 5):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 541,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0",
      "117.0",
      "126.0",
      "135.0",
      "144.0",
      "153.0",
      "162.0",
      "171.0",
      "180.0",
      "189.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "for i in range(100, 1000):\n    if i % 9 == 0:\n        print(i)"
  },
  {
    "example_id": 542,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# regular polygon has n sides\nn = 9\n\n# create a list of interior diagonals\ndiagonals = []\nfor i in range(n):\n    diagonals.append(math.sqrt((n-1)**2 + i**2))\n\n# print the length of the interior diagonals\nprint(len(diagonals))"
  },
  {
    "example_id": 543,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "print(17/40 * 160)"
  },
  {
    "example_id": 544,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "cones = math.ceil(3/4/0.32)\nprint(cones)"
  },
  {
    "example_id": 545,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1200.0",
      "1.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "b = 1200\na = 1200 // b\nprint(b, a)"
  },
  {
    "example_id": 546,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "exponent = 0\nfor i in range(1, 109):\n    if 109 % i == 0:\n        exponent += 1\nprint(exponent)"
  },
  {
    "example_id": 547,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "# Get the least common multiple\nlcm_of_3 = lcm(9,12,15)\n\n# Get the least common multiple of 3\nlcm_of_3 = lcm(9,12,15)\n\n# Get the gcd of 3\ngcd_of_3 = gcd(9,12,15)\n\n# Get the number of days between 3 students\ndays_between_students = lcm_of_3 // gcd_of_3\n\n# Print the number of days\nprint(days_between_students)"
  },
  {
    "example_id": 548,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcf(99, 100))"
  },
  {
    "example_id": 549,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "7.0",
      "0.4",
      "1.0",
      "5.0",
      "0.3",
      "2.0",
      "1.0",
      "0.2",
      "3.0",
      "0.0",
      "0.1",
      "0.9999999999999999"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'Days': [7,5,1,0],\n                   'Percent': [0.4,0.3,0.2,0.1]})\n\nprint(df)\n\nprint(df['Percent'].sum())"
  },
  {
    "example_id": 550,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "87.8787639281135",
      "2.025648363389024"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "a, b, c = symbols(\"a b c\")\n\n# find the measures of the angles\na = 39\nb = 14\nc = 180 - a - b\n\n# find the measures of the sides\ns = (a + b + c) / 2\n\n# find the perimeter of the triangle\nP = s * (s - a) * (s - b) * (s - c)\n\n# find the area of the triangle\nA = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n# find the length of the side that bisects the angle\nL = (P / (4 * A)) ** 0.5\n\n# find the measure of the angle\nB = (L / 2) * (180 / (L + 1))\n\nprint(B)"
  },
  {
    "example_id": 551,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def arrange_books(n, k):\n    \"\"\"\n    Arrange n books on a shelf.\n    There are k different books.\n    \"\"\"\n    # Calculate the number of ways to arrange n books.\n    num_ways = 0\n    for i in range(n):\n        num_ways += lcm(i+1, k)\n    return num_ways\n\n# Test the function.\nn = 4\nk = 4\nprint(arrange_books(n, k))"
  },
  {
    "example_id": 552,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Create a list of 8 positive integers\nintegers = [2, 4, 6, 8, 10, 12, 14, 16]\n\n# Create a list of 7 positive integers\nintegers_without_one = integers[0:-1]\n\n# Calculate the arithmetic mean of the 8 positive integers\narithmetic_mean_of_8 = sum(integers) / 8\n\n# Calculate the arithmetic mean of the 7 positive integers\narithmetic_mean_of_7 = sum(integers_without_one) / 7\n\n# Calculate the difference between the arithmetic mean of the 8 positive integers and the arithmetic mean of the 7 positive integers\ndifference = arithmetic_mean_of_8 - arithmetic_mean_of_7\n\n# Find the integer that is removed\ninteger_removed = integers[0]\n\n# Print the integer that is removed\nprint(integer_removed)\n\n# Print the difference between the arithmetic mean of the 8 positive integers and the arithmetic mean of the 7 positive integers\nprint(difference)"
  },
  {
    "example_id": 553,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\n\ndef f(n):\n    return (2*3*4*5) + x\n\ndef g(n):\n    return (2*3*4*5) + (1+x)\n\nprint(len(list(itertools.combinations(range(1,12), 3))))"
  },
  {
    "example_id": 554,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.81780460041329"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "perimeter = 4 * math.sqrt(120)\nprint(perimeter)"
  },
  {
    "example_id": 555,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "yes = 1\nno = 0\n\nans = yes + no + no + yes + no + yes\nprint(ans)"
  },
  {
    "example_id": 556,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "680.0"
    ],
    "solution": "total_eyes = (160 * 3/8) + (160 * 5/8)\nprint(total_eyes)"
  },
  {
    "example_id": 557,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Find the perimeter of the square\nperimeter = 4*math.sqrt(9)\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 558,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def greatest(x, y):\n    if x > y:\n        return x\n    else:\n        return y\n\ndef least(x, y):\n    if x < y:\n        return x\n    else:\n        return y\n\ndef difference(x, y):\n    return abs(x - y)\n\ndef solution(s):\n    return difference(greatest(s[0], s[1]), least(s[2], s[3]))\n\ns = [1, 2, 3, 4]\nprint(solution(s))"
  },
  {
    "example_id": 559,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "x = 5\nprint(8*5 + 2)"
  },
  {
    "example_id": 560,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "tests = (98 - 91) / (98 - 91)\nprint(tests)"
  },
  {
    "example_id": 561,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0",
      "1.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "product = 1000\n\nfor i in range(1, 100):\n    if product % i == 0:\n        print(product // i)\n        print(i)\n        break"
  },
  {
    "example_id": 562,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2\nwhile x <= 54/5:\n    print(x)\n    x += 1"
  },
  {
    "example_id": 563,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(math.sqrt(16))"
  },
  {
    "example_id": 564,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# The number of ways to choose 2 people from a group of 5 people\n# is equal to the number of ways to choose the first person\n# and the number of ways to choose the second person\n# which is equal to 5*4/2*1 = 10\nprint(10)"
  },
  {
    "example_id": 565,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.53981633974483"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "from math import pi\n\ndef area(r):\n    return pi * r ** 2\n\nprint(area(5))"
  },
  {
    "example_id": 566,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "# define variables\nx = symbols('x')\na = 80\nb = 112\nc = 172\n\n# define function\ndef f(x):\n    return a*x - b*x**2 + c*x**3\n\n# solve for x\nsol = solve(f(x), x)\n\n# extract solution\nsol = sol[0]\n\n# print solution\nprint(f\"{sol:.2f}\")"
  },
  {
    "example_id": 567,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 55/5 - 3\nprint(x)"
  },
  {
    "example_id": 568,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# 1. Get number of seconds to paint 1 dimple\nt = 2\n\n# 2. Get number of dimples to paint\nn = 300\n\n# 3. Get number of seconds to paint n dimples\ntime = t * n\n\n# 4. Get number of minutes to paint n dimples\nminutes = time / 60\n\n# 5. Print the number of minutes\nprint(f\"{minutes:.2f}\")"
  },
  {
    "example_id": 569,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 8\nprint(x)"
  },
  {
    "example_id": 570,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "37.5"
    ],
    "annotated_answers": [
      "37.5"
    ],
    "solution": "sweatshirt = 67.94 - 15.22 - 15.22\nprint(sweatshirt)"
  },
  {
    "example_id": 571,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7448.45",
      "7448.45",
      "7448.45",
      "7448.45",
      "7448.45",
      "7448.45",
      "7448.45",
      "7448.45",
      "7448.45",
      "7448.45"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "# create a list of angles\nangles = [50, 0, 0, 0]\n# create a list of sides\nsides = [2, 2, 3, 3]\n# create a list of perpandiculars\nperpandiculars = [0, 0, 0, 1]\n# create a list of parallel\nparallel = [1, 0, 0, 0]\n# create a list of measures\nmeasures = [0, 0, 0, 0]\n\n# create a list of all possible combinations of angles and sides\ncombinations = list(itertools.product(angles, sides, perpandiculars, parallel, measures))\n\n# create a list of all possible combinations of angles and sides\nfor i in combinations:\n    angle1 = i[0]\n    side1 = i[1]\n    perpandicular1 = i[2]\n    parallel1 = i[3]\n    measure1 = i[4]\n\n    angle2 = 180 - angle1\n    side2 = side1\n    perpandicular2 = perpandicular1\n    parallel2 = parallel1\n    measure2 = measure1\n\n    # calculate the measure in degrees of angle 2\n    measure2 = angle2 * (180 / math.pi)\n\n    # print the measure in degrees of angle 2\n    print(f\"{measure2:.2f}\")"
  },
  {
    "example_id": 572,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "480.0"
    ],
    "solution": "# area of one side panel\ns = 0.1\narea = 2*(s*8 + s*8 + s*10)\nprint(f\"{area:.0f}\")"
  },
  {
    "example_id": 573,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "age_of_mary = 30 * 3 / 5\nprint(age_of_mary)"
  },
  {
    "example_id": 574,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.84"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# define variables\nn = 5\nm = 2\nx = symbols('x')\n\n# define function\nf = x**n + (n-m)*x**(n-1) + (n-m)*(n-1)*x**(n-2) + (n-m)*(n-1)*(n-2)*x**(n-3) + (n-m)*(n-1)*(n-2)*(n-3)*x**(n-4) + (n-m)*(n-1)*(n-2)*(n-3)*(n-4)*x**(n-5)\n\n# solve function\nsolve(f, x)\n\n# print solution\nprint(f\"{solve(f, x)[0]:.2f}\")"
  },
  {
    "example_id": 575,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0",
      "1.0",
      "84.0",
      "10000000000.0",
      "10000000000.0",
      "10000000000.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# find the lcm of 2, 4, 6, and 7\nlcm_num = lcm(2, 4, 6, 7)\n\n# print the lcm\nprint(f\"LCM = {lcm_num}\")\n\n# find the gcd of 2, 4, 6, and 7\ngcd_num = gcd(2, 4, 6, 7)\n\n# print the gcd\nprint(f\"GCD = {gcd_num}\")\n\n# find the number of integers that can be formed\nnum_ints = lcm_num // gcd_num\n\n# print the number of integers\nprint(f\"Number of integers = {num_ints}\")\n\n# find the number of integers that can be formed\nnum_ints = 10**10\n\n# print the number of integers\nprint(f\"Number of integers = {num_ints}\")\n\n# find the number of integers that can be formed\nnum_ints = 10**10\n\n# print the number of integers\nprint(f\"Number of integers = {num_ints}\")\n\n# find the number of integers that can be formed\nnum_ints = 10**10\n\n# print the number of integers\nprint(f\"Number of integers = {num_ints}\")"
  },
  {
    "example_id": 576,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "length = 100 - 25 + 1\nprint(length)"
  },
  {
    "example_id": 577,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# Define the letters\nA, B, C = symbols('A B C')\n\n# Define the code words\ncode_words = ['AA', 'AB', 'BA', 'BB']\n\n# Define the three letter code words\nthree_letter_code_words = ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']\n\n# Use itertools to find all possible combinations\ncombinations = list(itertools.combinations_with_replacement(code_words, 3))\n\n# Initialize the total count\ncount = 0\n\n# Loop through all possible combinations\nfor combination in combinations:\n    # If the combination is in the list of three letter code words\n    if combination in three_letter_code_words:\n        # Increment the count\n        count += 1\n\n# Print the total count\nprint(count)"
  },
  {
    "example_id": 578,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "7.5",
      "3.0",
      "10.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nd = 4\ne = 5\nsum = a+b+c+d+e\nmedian = (a+b+c+d+e)/2\nmean = (a+b+c+d+e)/5\nprint(sum)\nprint(median)\nprint(mean)\nresult = sum - median + mean\nprint(result)"
  },
  {
    "example_id": 579,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "18.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\neq = 3*x + 2 + 3*(1+x) - 23\nprint(eq)\nsolve(eq, x)"
  },
  {
    "example_id": 580,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.72"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "# Perimeter of triangle PQS\nperimeter = (12 * math.sqrt(3) + 5 * math.sqrt(3)) / 2\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 581,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0",
      "64.0",
      "1.0",
      "64.0",
      "1.0",
      "64.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# create a list of all possible combinations\n# of integers for each unit of currency\ndrinkets = np.arange(1, 51)\ntrinkets = np.arange(1, 13)\nblinkets = np.arange(1, 10)\n\n# use itertools to create a list of all possible combinations\n# of integers for each unit of currency\ncombinations = itertools.product(drinkets, trinkets, blinkets)\n\n# create a dictionary to store the results\nresults = {}\n\n# loop through each combination and calculate the value\n# of 56 Drinkets\nfor d, t, b in combinations:\n    # calculate the value of 56 Drinkets in Trinkets\n    # using the exchange rate\n    trinkets_value = 56 * 4 / 3\n\n    # calculate the value of 56 Drinkets in Blinkets\n    # using the exchange rate\n    blinkets_value = 56 * 4 / 3 * 3 / 7\n\n    # calculate the value of 56 Drinkets in Drinkets\n    drinkets_value = 56\n\n    # add the results to the dictionary\n    results[d, t, b] = drinkets_value\n\n# find the key with the smallest value\n# this will be the exchange rate that gives\n# the smallest value for 56 Drinkets\nmin_key = min(results, key=results.get)\n\n# print the exchange rate that gives\n# the smallest value for 56 Drinkets\nprint(f\"The exchange rate that gives the smallest value for 56 Drinkets is: {min_key}\")"
  },
  {
    "example_id": 582,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "angle_m = 180 - 10\nprint(angle_m)"
  },
  {
    "example_id": 583,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "52.5"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "daps_per_yap = 4\nbaps_per_yap = 5\nbaps_per_dap = 3\ndaps_to_baps = 42\nyaps_to_daps = daps_to_baps / daps_per_yap\nbaps_to_daps = yaps_to_daps * baps_per_yap\nprint(baps_to_daps)"
  },
  {
    "example_id": 584,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = (29-5)/3\nprint(x)"
  },
  {
    "example_id": 585,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.000000000000014",
      "0.0"
    ],
    "annotated_answers": [
      "-3969.0"
    ],
    "solution": "# Define function\ndef f(x):\n    return np.abs(x) - 63\n\n# Find roots\nroots = np.roots(np.array([1, -1, 63]))\n\n# Find positive and negative solutions\nsolution = [i for i in roots if i > 0]\n\n# Find product\nproduct = np.prod(solution)\n\n# Print result\nprint(product)"
  },
  {
    "example_id": 586,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "128.0"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "angle = 128\nprint(angle)"
  },
  {
    "example_id": 587,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-176.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "x = 8\na = 184\nl = x - a\nprint(f\"{l:.2f}\")"
  },
  {
    "example_id": 588,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "1.0",
      "4.0",
      "2.0",
      "5.0",
      "1.0",
      "4.0",
      "2.0",
      "-5.0",
      "1.0",
      "4.0",
      "2.0",
      "5.0",
      "1.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "a, b = symbols('a,b')\nf = a**4 - 5*b**8\nsol = solve(f, a, b)\nprint(sol)\n\n\na, b = symbols('a,b')\nf = a**4 - 5*b**8\nsol = solve(f, a, b)\nprint(sol)\n\n\na, b = symbols('a,b')\nf = a**4 - 5*b**8\nsol = solve(f, a, b)\nprint(sol)\n\n\na, b = symbols('a,b')\nf = a**4 - 5*b**8\nsol = solve(f, a, b)\nprint(sol)\n\n\na, b = symbols('a,b')\nf = a**4 - 5*b**8\nsol = solve(f, a, b)\nprint(sol)\n\n\na, b = symbols('a,b')\nf = a**4 - 5*b**8\nsol = solve(f, a, b)\nprint(sol)\n\n\na, b = symbols('a,b')\nf = a**4 - 5*b**8\nsol = solve(f, a, b)\nprint(sol)\n\n\na, b = symbols('a,b')\nf = a**4 - 5*b**8\nsol = solve(f, a, b)\nprint(sol)\n\n\na, b = symbols('a,b')\nf = a**4 - 5*b**8\nsol = solve(f, a, b)\nprint(sol)\n\n\na, b = symbols('a,b')\nf = a**4 - 5*b**8\nsol = solve(f, a, b)\nprint(sol)\n\n\na, b = symbols('a,b')\nf = a**4 - 5*b**8\nsol = solve(f, a, b)\nprint(sol)\n\n\na, b = symbols('a,b')\nf = a"
  },
  {
    "example_id": 589,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-3579014.7966667153",
      "-3.579",
      "7.0",
      "1.0",
      "0.0",
      "0.0",
      "1.0",
      "32.0",
      "16.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# Define the function\ndef f(x):\n    return x - (0.9 * x)\n\n# Find the minimum value of the function\nmin_value = minimize(f, 700)\n\n# Print the minimum value\nprint(min_value)"
  },
  {
    "example_id": 590,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.36507936507936506"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print((2/9) + (1/7))"
  },
  {
    "example_id": 591,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0",
      "9.6",
      "9.6"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Coin values\nNICKEL_VALUE = 0.05\nDIME_VALUE = 0.10\nQUARTER_VALUE = 0.25\n\n# Number of coins\nNICKELS = 1.20 / NICKEL_VALUE\nDIMES = NICKELS * DIME_VALUE / QUARTER_VALUE\nQUARTERS = DIMES * QUARTER_VALUE / QUARTER_VALUE\n\nprint(f\"{NICKELS:.2f} nickels\")\nprint(f\"{DIMES:.2f} dimes\")\nprint(f\"{QUARTERS:.2f} quarters\")"
  },
  {
    "example_id": 592,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Find the smallest positive multiple of 6 that is also a multiple of 8\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef get_smallest_multiple(n):\n    multiples = []\n    for i in range(1, n + 1):\n        multiples.append(i * n)\n    return min(multiples)\n\n\n# Find the smallest positive multiple of 6 that is also a multiple of 8\ndef get_smallest_multiple_of_6_and_8():\n    return get_smallest_multiple(6)\n\n\nprint(get_smallest_multiple_of_6_and_8())"
  },
  {
    "example_id": 593,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "78.35750000000012",
      "6.85",
      "0.0",
      "3.0",
      "-9.537",
      "-7.0",
      "5.0",
      "-1.0",
      "8.0",
      "4.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "def func(x):\n    return x ** 2 - 13.7 * x + 125.28\n\n\nres = minimize(func, 1)\nprint(res)"
  },
  {
    "example_id": 594,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6290000.0"
    ],
    "annotated_answers": [
      "6290000.0"
    ],
    "solution": "print(round(6287215, -4))"
  },
  {
    "example_id": 595,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "nums = np.arange(2.5, 84, 3.5)\nprint(len(nums))"
  },
  {
    "example_id": 596,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "dresses = 72 // 5\nprint(dresses)"
  },
  {
    "example_id": 597,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def get_factors(n):\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if n / i!= i:\n                factors.append(int(n / i))\n    return factors\n\n\ndef get_spin(n):\n    if n == 20:\n        return 0\n    factors = get_factors(n)\n    spinner = [i for i in range(1, 21)]\n    for i in factors:\n        spinner = [i for i in spinner if i!= i]\n    return len(spinner)\n\n\ndef get_max_spins(n):\n    max_spins = 0\n    for i in range(1, 21):\n        max_spins += get_spin(i)\n    return max_spins\n\n\nprint(get_max_spins(20))"
  },
  {
    "example_id": 598,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "speed = 15 / 2.5\nprint(speed)"
  },
  {
    "example_id": 599,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def gcf(a, b):\n    return a if b == 0 else gcf(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcf(a, b)\n\nprint(lcm(180, 450))"
  },
  {
    "example_id": 600,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "1093.0"
    ],
    "solution": "# Calculate the sum of median and mode\n\n# Calculate the median\nmedian = 51 + 52 + 53 + 54 + 55 + 56 + 57\nmedian = median/7\n\n# Calculate the mode\nmode = 0 + 0 + 0 + 2 + 2 + 2 + 1\nmode = mode/7\n\n# Calculate the sum\nsum = median + mode\n\nprint(f\"The sum of the median and mode is {sum}\")"
  },
  {
    "example_id": 601,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(4 / 4 / 9)"
  },
  {
    "example_id": 602,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "smallest = 2\nfor i in range(2, 20):\n    while not (smallest % i):\n        smallest += 1\nprint(smallest)"
  },
  {
    "example_id": 603,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "# define variables\na = 26\nb = 52\n\n# define function\ndef round_to_nearest_tenth(x):\n    return int(x/10 + 0.5) * 10\n\n# print solution\nprint(f\"{round_to_nearest_tenth(a + b):.0f}\")"
  },
  {
    "example_id": 604,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    return (1-(-1)**(11))**2 - x\n\nprint(f(0))"
  },
  {
    "example_id": 605,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-60.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "# degrees = 180 - (180 - small_angle) * 2\ndegrees = 180 - (180 - 60) * 2\nprint(degrees)"
  },
  {
    "example_id": 606,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# 4 * # right-handed boys = # total boys\n# 4 * # right-handed boys = 36 / 2\n# 4 * # right-handed boys = 18\n\n# 2 * # left-handed boys = # total boys\n# 2 * # left-handed boys = 18 / 2\n# 2 * # left-handed boys = 9\n\n# 2 * # girls = # left-handed boys\n# 2 * # girls = 9\n\n# 2 * # girls = # total boys\n# 2 * # girls = 9 / 2\n# 2 * # girls = 4.5\n\n# 4.5 * # right-handed boys = # total boys\n# 4.5 * # right-handed boys = 18\n# 4.5 * # right-handed boys = 73\n\nprint(73)"
  },
  {
    "example_id": 607,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7310.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "x = 106\ny = 109\nn = 85\n\n# Create a list of all possible combinations of \n# history and science students.\nall_combs = itertools.product(range(x+1), range(y+1))\n\n# Create a list of all combinations where the \n# number of students taking both history and \n# science is 85.\ndesired_combs = [c for c in all_combs if sum(c) == n]\n\n# Convert the list of tuples to a list of integers.\ndesired_combs = [int(sum(c)) for c in desired_combs]\n\n# Find the sum of all combinations that meet the \n# criteria.\ntotal = sum(desired_combs)\n\nprint(f\"{total}\")"
  },
  {
    "example_id": 608,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Set the integers\nx = [1, 2, 3, 4, 5]\n\n# Calculate the mean\nmean = sum(x)/len(x)\n\n# Calculate the median\nmedian = sorted(x)[len(x)//2]\n\n# Calculate the mode\nmode = max(set(x), key=x.count)\n\n# Calculate the smallest and largest integers\nsmallest = min(x)\nlargest = max(x)\n\n# Calculate the difference\ndifference = largest - smallest\n\n# Print the answer\nprint(difference)"
  },
  {
    "example_id": 609,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(7.5 - 5.5)"
  },
  {
    "example_id": 610,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# 6/6-6+6*6\nprint(6/6-6+6*6)"
  },
  {
    "example_id": 611,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "max_length = 72\nprint(max_length)"
  },
  {
    "example_id": 612,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 4*sqrt(2)\ns = (a/2)**2\nprint(f\"{s:.2f}\")"
  },
  {
    "example_id": 613,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def distinct_prime_factors(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return sum(factors)\n\nprint(distinct_prime_factors(735))"
  },
  {
    "example_id": 614,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 123\nb = 321\nc = 456\nd = 654\ne = 789\nf = 987\n\nsimplify = (a/b) * (c/d) * (e/f) * (a/b)**-1 * (c/d)**-1 * (e/f)**-1\n\nprint(simplify)"
  },
  {
    "example_id": 615,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-125.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Find the area of the square\nside_length = 5\narea = side_length**2\n\n# Find the length of one side of the new rectangle\nnew_side_length = side_length * 1.5\n\n# Find the area of the new rectangle\nnew_area = new_side_length**2\n\n# Find the percentage decrease in area\npercent_decrease = 100 * (area - new_area) / area\n\nprint(percent_decrease)"
  },
  {
    "example_id": 616,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "36.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "x = 12\ny = x * 3 / 2\nz = x * 3 / 1\nprint(y)\nprint(z)"
  },
  {
    "example_id": 617,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "94.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "distance = 100 - 6\nprint(distance)"
  },
  {
    "example_id": 618,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sides = 144 / 360\nprint(sides)"
  },
  {
    "example_id": 619,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define the number of digits to choose\ndigits = 2\n\n# Create a list of all possible combinations of digits\ndigits_list = list(itertools.combinations_with_replacement(range(1, 8), digits))\n\n# Create a list to store the prime numbers\nprime_list = []\n\n# Loop through each combination of digits\nfor digit in digits_list:\n    # Create a number from the combination of digits\n    number = int(\"\".join(map(str, digit)))\n\n    # Check if the number is prime\n    if math.gcd(number, lcm(number, 1)) == 1:\n        # Add the prime number to the list\n        prime_list.append(number)\n\n# Print the number of prime numbers\nprint(f\"There are {len(prime_list)} prime numbers in the list.\")"
  },
  {
    "example_id": 620,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(5625**0.5)"
  },
  {
    "example_id": 621,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "sides = int(1070/180)\nprint(sides)"
  },
  {
    "example_id": 622,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8404.0"
    ],
    "annotated_answers": [
      "9604.0"
    ],
    "solution": "# create the range of numbers\nnumbers = [1, 2, 3, 4, 5, 6, 7]\n\n# create the list of all possible combinations\nall_combinations = itertools.product(numbers, repeat=5)\n\n# create a list of all valid numbers\nvalid_numbers = []\n\n# loop through all combinations and add valid numbers to list\nfor combination in all_combinations:\n    if sum(combination) % 2 == 1:\n        valid_numbers.append(combination)\n\n# calculate the number of valid numbers\nnumber_of_valid_numbers = len(valid_numbers)\n\n# print the answer\nprint(number_of_valid_numbers)"
  },
  {
    "example_id": 623,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "perimeter = 6 * 21\nprint(perimeter)"
  },
  {
    "example_id": 624,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# find the lengths of the trapezoid\na = 5\nb = 5\nc = 3\nd = 9\n\n# find the area of the trapezoid\narea = (0.5 * (a + b) * c) + (0.5 * (a + d) * b)\n\nprint(f\"The area of the trapezoid is {area:.2f} square centimeters.\")"
  },
  {
    "example_id": 625,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6105.0"
    ],
    "annotated_answers": [
      "957.0"
    ],
    "solution": "sum = 0\nfor i in range(1,111):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 626,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1600.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "miles_per_day = 2800 * 8 / 14\nprint(f\"{miles_per_day:.2f}\")"
  },
  {
    "example_id": 627,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0",
      "35.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 5\nprint(10 + 5 * x)\nprint(10 + 5 * x)"
  },
  {
    "example_id": 628,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1188.0"
    ],
    "annotated_answers": [
      "1188.0"
    ],
    "solution": "area = 9*12*11\nprint(area)"
  },
  {
    "example_id": 629,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "leg_length = 9\nperimeter = leg_length + (leg_length + 1) + (leg_length + 2)\nprint(perimeter)"
  },
  {
    "example_id": 630,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5235987755982988"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "import math\ny = math.radians(30)\nprint(y)"
  },
  {
    "example_id": 631,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def f(x):\n    return x**5 - x**4 + 1\n\nres = minimize(f, 0)\nprint(res)"
  },
  {
    "example_id": 632,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(3**-4 * 3**-8 * 3**14)"
  },
  {
    "example_id": 633,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "print((16/25)*((5/2)**4))"
  },
  {
    "example_id": 634,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "# Find the perimeter of triangle ABC\ns = 17\n# Find the length of side BC\nb = 4\n# Find the length of side AC\na = 5\n# Find the length of side AB\nc = s - a - b\n# Find the area of triangle ABC\nA = 0.5 * a * b\n# Find the area of triangle ADB\nB = 0.5 * a * c\n# Find the area of triangle BCD\nC = 0.5 * b * c\n# Find the area of triangle ABCD\nD = 0.5 * a * b + 0.5 * b * c + 0.5 * c * a\n# Find the perimeter of triangle ABCD\nP = a + b + c + D\n# Find the perimeter of the remaining three sides of each of the squares\np = lcm(a,b,c) * 3\n# Print the perimeter of the nine-sided figure\nprint(f\"{p:.2f}\")"
  },
  {
    "example_id": 635,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "# Number of handshakes\nn = 3\n\n# Number of teams\nm = 3\n\n# Number of players\nk = 4\n\n# Number of handshakes between team members\nl = 1\n\n# Number of handshakes between opposing teams\nj = 3\n\n# Total number of handshakes\nhandshakes = (n * (n - 1) * (k - 1) * l) + (m * (m - 1) * (k - 1) * j)\n\nprint(handshakes)"
  }
]