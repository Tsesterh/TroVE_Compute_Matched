[
  {
    "example_id": 0,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "print(math.sqrt(64**3))"
  },
  {
    "example_id": 1,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "1.25"
    ],
    "solution": "distance = math.sqrt((0.5 + 0.5)**2 + (0.75)**2)\nprint(distance)"
  },
  {
    "example_id": 2,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-63.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "# calculate total cost\ntotal = 3*1 + 20*2 + 35\n# calculate profit\nprofit = 15 - total\nprint(profit)"
  },
  {
    "example_id": 3,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "1584.0"
    ],
    "solution": "import itertools\n\nnum_balls = 12\nnum_balls_drawn = 3\n\nnum_choices = num_balls - num_balls_drawn + 1\n\npermutations = itertools.permutations(range(1, num_balls + 1), num_balls_drawn)\n\nfor permutation in permutations:\n    if permutation[0]!= permutation[1]:\n        print(permutation)\n        num_choices -= 1\n        if num_choices == 0:\n            break"
  },
  {
    "example_id": 4,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "330.0"
    ],
    "solution": "# Let x be the number of times the ball is passed\n# Each player passes the ball to each of the other players exactly three times.\n# So, the number of times the ball is passed is 3x\n# The number of players is 11\n# The number of times the ball is passed is x\n# The passing drill is over when x is 33\n# x = 33\n\nprint(33)"
  },
  {
    "example_id": 5,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.745056497175141"
    ],
    "annotated_answers": [
      "3.7"
    ],
    "solution": "x = 37 / 12\ny = 260 / 59\nprint((x + y) / 2)"
  },
  {
    "example_id": 6,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Create variables for the number of boxes containing pencils and pens\nnum_pencils = 13\nnum_pens = 9\n\n# Create variables for the number of boxes containing neither pens nor pencils\nnum_no_pencils_or_pens = 3\n\n# Create variables for the total number of boxes\ntotal_boxes = 20\n\n# Calculate the number of boxes containing both pens and pencils\nnum_boxes_pencils_and_pens = total_boxes - (num_pencils + num_pens + num_no_pencils_or_pens)\n\n# Print the number of boxes containing both pens and pencils\nprint(num_boxes_pencils_and_pens)"
  },
  {
    "example_id": 7,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Define variables\nperimeter = 18\nwidth = 4\n\n# Calculate area\narea = perimeter**2 / (4 * math.tan(math.pi / 4))\nprint(f\"The area of the original square is {area:.2f} square inches.\")"
  },
  {
    "example_id": 8,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "print(math.sqrt(15*35*21))"
  },
  {
    "example_id": 9,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9899.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "print(99*100 - 1)"
  },
  {
    "example_id": 10,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor i in range(1, 100):\n    if i % 2!= 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 11,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1518.0"
    ],
    "annotated_answers": [
      "1518.0"
    ],
    "solution": "# smallest prime numbers\na = 2\nb = 3\nc = 5\nd = 7\n\n# smallest composite numbers greater than 0\ne = 4\nf = 6\ng = 8\nh = 9\n\n# product of the four smallest prime numbers\nprime_product = a*b*c*d\n\n# product of the four smallest composite numbers greater than 0\ncomposite_product = e*f*g*h\n\n# positive difference between the product of the four smallest prime numbers and the product of the four smallest composite numbers greater than 0\npositive_difference = abs(prime_product - composite_product)\n\nprint(positive_difference)"
  },
  {
    "example_id": 12,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "def lcm(a, b):\n    return a*b // math.gcd(a, b)\nprint(lcm(72, 96))"
  },
  {
    "example_id": 13,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "x = 107 * 109**5\ny = x**11\nz = math.gcd(y, x)\nprint(f\"{math.log10(z) // 1:.0f}\")"
  },
  {
    "example_id": 14,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(1/6*6*7+8*2/8*(7-1))"
  },
  {
    "example_id": 15,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "218.81"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print(round(14.7923412**2, 2))"
  },
  {
    "example_id": 16,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "answer = 0\nfor i in range(10, 50):\n    if i % i % 10 == 0:\n        answer += 1\nprint(answer)"
  },
  {
    "example_id": 17,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0",
      "82.0",
      "80.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\nme = 20\nmy_brother = 4 * me\n\nprint(my_brother)\n\ntwo_years_from_now = my_brother + 2\n\nprint(two_years_from_now)\n\nprint(my_brother)"
  },
  {
    "example_id": 18,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "777.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "a = 800\nb = 37\nprint(a // b * b)"
  },
  {
    "example_id": 19,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.99999999999999"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "simplify = math.sqrt(2.5**2 - 0.7**2) / (2.7 - 2.5)\nprint(simplify)"
  },
  {
    "example_id": 20,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "numbers = [13, 14, 22, 52, 63, 74]\na = round(sum(numbers), -1)\nb = round(sum(round(x, -1) for x in numbers), -1)\nprint(a - b)"
  },
  {
    "example_id": 21,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "solve = math.floor(19/3) - math.floor(19/6)\nprint(solve)"
  },
  {
    "example_id": 22,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(int((3+4)/3))"
  },
  {
    "example_id": 23,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.0",
      "0.0",
      "0.8"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "A = (0,0)\nB = (1,0)\nD = (0,0.8)\nC = B+D\nprint(C)"
  },
  {
    "example_id": 24,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "360.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "def is_multiple(a, b):\n    return a % b == 0\n\ndef get_gcd(a, b):\n    if a < b:\n        return get_gcd(b, a)\n    elif a % b == 0:\n        return b\n    else:\n        return get_gcd(b, a % b)\n\ndef find_smallest_multiple(a, b, c):\n    gcd = get_gcd(a, get_gcd(b, c))\n    if gcd == 1:\n        return 1\n    else:\n        return a * b * c // gcd\n\ndef find_period(a, b, c):\n    smallest_multiple = find_smallest_multiple(a, b, c)\n    if is_multiple(smallest_multiple, a):\n        return a\n    elif is_multiple(smallest_multiple, b):\n        return b\n    else:\n        return c\n\nprint(find_period(360, 450, 540))"
  },
  {
    "example_id": 25,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "overall_average = (84 * 25 + 66 * 20) / (25 + 20)\nprint(overall_average)"
  },
  {
    "example_id": 26,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "# Calculate the maximum possible score\n# 5 * 3 - 2 = 13\nprint(5*3 - 2)"
  },
  {
    "example_id": 27,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n = 11\nm = 20\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nn_divisor = divisor(n)\nm_divisor = divisor(m)\n\nprint(f\"{n_divisor * m_divisor}\")"
  },
  {
    "example_id": 28,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "8.0",
      "4.0",
      "12.0",
      "8.0",
      "4.0",
      "8.0",
      "12.0",
      "12.0",
      "4.0",
      "12.0",
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# unique values\nx = [4, 8, 12]\ny = [4, 8, 12]\n\n# create list of all possible values\nvalues = []\nfor x_value in x:\n    for y_value in y:\n        if x_value!= y_value:\n            values.append(f\"{x_value}/{y_value}\")\n\n# print list of values\nprint(values)"
  },
  {
    "example_id": 29,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 8\nb = 11 - a\nc = a + b\nprint(a)"
  },
  {
    "example_id": 30,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "n = 93 - 36 + 1\nprint(n)"
  },
  {
    "example_id": 31,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1800.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "side = math.sqrt(60**2 / 2)\narea = side**2\nprint(f\"{area:.0f}\")"
  },
  {
    "example_id": 32,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "564.0"
    ],
    "annotated_answers": [
      "564.0"
    ],
    "solution": "print(round(563.5097))"
  },
  {
    "example_id": 33,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2057.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "count = 0\nfor i in range(1000, 10000):\n    if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\n        continue\n    count += 1\nprint(count)"
  },
  {
    "example_id": 34,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "y = 6\nprint(y**3)"
  },
  {
    "example_id": 35,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "CD = math.sqrt((71/12 - 47/12)**2 + (0 - 0)**2)\nprint(f\"{CD:.2f}\")"
  },
  {
    "example_id": 36,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.83"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "area = (5**2 + 3**2)**0.5\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 37,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(math.sqrt(6**2) - 3)"
  },
  {
    "example_id": 38,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.68"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "h = 5\nb = 8\ns = (h**2 + b**2)**0.5\nt = 20\n\n# solve for leg length\nleg = (t**2 + s**2)**0.5 - s\n\nprint(f\"{leg:.2f}\")"
  },
  {
    "example_id": 39,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.6666666666666665"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = -8/3\nprint(x)"
  },
  {
    "example_id": 40,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "3380.0"
    ],
    "solution": "vowel = ['A', 'E', 'I', 'O', 'U']\n\ndef vowel_words(vowel):\n    for i in vowel:\n        for j in vowel:\n            for k in vowel:\n                yield i+j+k\n\nprint(len(list(vowel_words(vowel))))"
  },
  {
    "example_id": 41,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from math import sqrt\n\n# possible rolls for Mary\nfor m in range(1, 21):\n    # possible rolls for Jenna\n    for j in range(1, 21):\n        # check if m is a factor of j\n        if j % m == 0:\n            print(f\"Mary rolls {m}, Jenna rolls {j}\")\n\n# possible rolls for Mary\nfor m in range(1, 21):\n    # possible rolls for Jenna\n    for j in range(1, 21):\n        # check if j is a factor of m\n        if m % j == 0:\n            print(f\"Mary rolls {m}, Jenna rolls {j}\")"
  },
  {
    "example_id": 42,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "both = 28 + 21 - 6\nprint(both)"
  },
  {
    "example_id": 43,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor i in range(1, 201):\n    if i % 4 == 0 and str(i)[-1] == '2':\n        count += 1\nprint(count)"
  },
  {
    "example_id": 44,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-72.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "N = 400 - 60 + 5 - (500 - 90 + 7)\nprint(N)"
  },
  {
    "example_id": 45,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n\ndef is_sum_seven(n):\n    return sum_digits(n) == 7\n\ndef count_sevens(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_seven(i))\n\nprint(count_sevens(10, 99))"
  },
  {
    "example_id": 46,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# Black center square\nblack_center = 1\n\n# Number of squares\nn_squares = 25\n\n# Number of squares with black center square\nn_squares_with_black_center = 5\n\nprint(f\"{n_squares_with_black_center:.2f}\")"
  },
  {
    "example_id": 47,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Using eval() function\nprint(eval(\"6+5-4*3/(2+1)\"))"
  },
  {
    "example_id": 48,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(math.pow(math.pow(math.pow(math.pow(-345, 4), 2), 0), -2))"
  },
  {
    "example_id": 49,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2005.0"
    ],
    "annotated_answers": [
      "4007.0"
    ],
    "solution": "i = 1\nwhile i < 2004:\n    i += 2\nprint(i)"
  },
  {
    "example_id": 50,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "9.0",
      "9.0",
      "9.0",
      "9.0",
      "9.0",
      "25.0",
      "25.0",
      "25.0",
      "25.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "for i in range(2, 1000):\n    for j in range(2, 1000):\n        if (i + j) ** 0.5 == int((i + j) ** 0.5) and (i + j) % 2 == 1:\n            print(i + j)\n            break"
  },
  {
    "example_id": 51,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "for i in range(10):\n    if 341400*i%3 == 0:\n        print(i)"
  },
  {
    "example_id": 52,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-55.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "both = 200 - (126 + 129)\nprint(both)"
  },
  {
    "example_id": 53,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "x = 5*math.ceil(abs(-32)/5)\nprint(x)"
  },
  {
    "example_id": 54,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 2\n\ndef is_divisible_by_4(n):\n    return n % 4 == 0\n\nwhile not is_divisible_by_4(x):\n    x += 1\n\nprint(x)"
  },
  {
    "example_id": 55,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "# calculate the overlap area\noverlap = (8/2) * (11 - 8.5)\nprint(f\"{overlap:.2f}\")"
  },
  {
    "example_id": 56,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10090.0"
    ],
    "solution": "for i in range(1, 1000):\n    num_digits = len(str(i))\n    if num_digits % 2 == 1:\n        print(i)\n        break"
  },
  {
    "example_id": 57,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "6.0",
      "5.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "data = [1, 1, 2, 2, 3, 3, 3, 3, 5, 5, 6, 6, 6, 6, 6, 8, 8, 8, 9, 9]\nmedian = sorted(data)[len(data)//2]\nmode = max(set(data), key=data.count)\nmean = sum(data) / len(data)\nprint(f\"Median: {median}\\nMode: {mode}\\nArithmetic Mean: {mean}\")"
  },
  {
    "example_id": 58,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9800.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "lcm = 14 * 20 * 35\nprint(lcm)"
  },
  {
    "example_id": 59,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32843.0",
      "9011.0",
      "32843.0",
      "38611.0",
      "106867.0",
      "112331.0",
      "248987.0",
      "513739.0",
      "779699.0",
      "2741.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for i in range(10, 100):\n    if is_prime(i):\n        for j in range(10, 100):\n            if is_prime(i + j**3):\n                for k in range(10, 100):\n                    if is_prime(i + j**3 + k**3):\n                        print(i + j**3 + k**3)\n                        break"
  },
  {
    "example_id": 60,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.08"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "flour = 15 * 20 / 144\nprint(f\"{flour:.2f}\")"
  },
  {
    "example_id": 61,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "5.0",
      "5.42"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# radius of the smallest circle\nR = 6\n\n# area of the smallest circle\narea = math.pi * R**2\n\n# area of the ring between the two largest circles\narea_ring = math.pi * 10**2\n\n# radius of the ring between the two largest circles\nR_ring = math.sqrt(area_ring / math.pi)\n\n# area of the largest circle\narea_large = math.pi * 12**2\n\n# area of the second largest circle\narea_large_2 = math.pi * 13**2\n\n# area of the total area\narea_total = area + area_ring\n\n# ratio of the area of the ring to the area of the total area\nratio = area_ring / area_total\n\n# radius of the largest circle\nR_large = math.sqrt(area_large / math.pi)\n\n# radius of the second largest circle\nR_large_2 = math.sqrt(area_large_2 / math.pi)\n\n# ratio of the radius of the ring to the radius of the total area\nratio_2 = R_ring / R_large\n\n# ratio of the radius of the second largest circle to the radius of the total area\nratio_3 = R_large_2 / R_large\n\n# find the radius of the smallest circle\nR_small = R\n\n# find the radius of the second smallest circle\nR_small_2 = R_small * ratio_2\n\n# find the radius of the third smallest circle\nR_small_3 = R_small_2 * ratio_3\n\nprint(f\"The radius of the smallest circle is {R_small:.2f}\")\nprint(f\"The radius of the second smallest circle is {R_small_2:.2f}\")\nprint(f\"The radius of the third smallest circle is {R_small_3:.2f}\")"
  },
  {
    "example_id": 62,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(8 - 4 / 2 - 1)"
  },
  {
    "example_id": 63,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.5"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = (5**2 - 2) / 2\nprint(x)"
  },
  {
    "example_id": 64,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "714.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "# define variables\na, b = 0.2, 0.8\n\n# find all integers between a and b\nnums = [x for x in range(int(a*100), int(b*100))]\n\n# check if they are prime\nnums = [x for x in nums if is_prime(x)]\n\n# calculate sum\nsum = sum(nums)\n\n# print sum\nprint(sum)"
  },
  {
    "example_id": 65,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "digits = [n for n in range(0, 10) if math.gcd(6*n, n) == 1]\nprint(digits)"
  },
  {
    "example_id": 66,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "print(600/3)"
  },
  {
    "example_id": 67,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88920.0"
    ],
    "annotated_answers": [
      "247000.0"
    ],
    "solution": "purchase_price = 0.8 * 49400 + 49400\nprint(purchase_price)"
  },
  {
    "example_id": 68,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# The number of rectangles is 4\nprint(4)"
  },
  {
    "example_id": 69,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "import math\ndef stack_books(n):\n    return math.factorial(n) / (math.factorial(5) * math.factorial(n-5))\nprint(stack_books(5))"
  },
  {
    "example_id": 70,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88.0"
    ],
    "annotated_answers": [
      "636.0"
    ],
    "solution": "# Number of times clock chimes\n# at 12:05 a.m.\nn = 10\n\n# Number of times clock chimes\n# at each hour\nh = 8\n\n# Total number of times\n# clock chimes in a 24-hour period\nprint(n * h + h)"
  },
  {
    "example_id": 71,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.7"
    ],
    "annotated_answers": [
      "2.7"
    ],
    "solution": "print(round(2.745, 1))"
  },
  {
    "example_id": 72,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Find the number of values between 0 and 100 that are multiples of 4 and 6\nnum_values = 0\nfor x in range(4, 100, 4):\n    if x % 6 == 0:\n        num_values += 1\nprint(num_values)"
  },
  {
    "example_id": 73,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pentagon_diagonals = 5\nprint(pentagon_diagonals)"
  },
  {
    "example_id": 74,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_prime(i) and sum_of_digits(i) == 15:\n            count += 1\n    return count\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(200, 300))"
  },
  {
    "example_id": 75,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.25"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# \narea = (5*3**2)/4\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 76,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x = 1.5\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 77,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef greatest_prime_factor(n):\n    for i in range(int(math.sqrt(n)), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\n\ndef least_prime_factor(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return n\n\n\ndef positive_difference(n):\n    return greatest_prime_factor(n) - least_prime_factor(n)\n\n\nprint(positive_difference(2000))"
  },
  {
    "example_id": 78,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.94"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# define radius of each circle\nr1 = 4\nr2 = 8\n\n# calculate area of each circle\narea1 = math.pi * r1**2\narea2 = math.pi * r2**2\n\n# calculate total area of all circles\ntotal_area = area1 + area2\n\n# calculate length of radius of larger circle\nradius = math.sqrt(total_area / math.pi)\n\n# print result\nprint(f\"{radius:.2f}\")"
  },
  {
    "example_id": 79,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def divisible_by(n, m):\n    return n % m == 0\n\ncount = 0\nfor i in range(1, 500):\n    if divisible_by(i, 3) and divisible_by(i, 4) and divisible_by(i, 5):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 80,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Find the number of houses in the neighborhood\nnum_houses = 10 * 6\nprint(num_houses)"
  },
  {
    "example_id": 81,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Calculate the speed in inches per second\nspeed = 20 * 12\nprint(f\"{speed:.2f}\")"
  },
  {
    "example_id": 82,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "234.0",
      "270.0"
    ],
    "annotated_answers": [
      "234.0"
    ],
    "solution": "for i in range(200, 300):\n    if (i % 36) == 18:\n        print(i)"
  },
  {
    "example_id": 83,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "sum = 0\nfor i in range(-3, 8):\n    if i+5 >= 0 and i+5 <= 8:\n        sum += i+5\nprint(sum)"
  },
  {
    "example_id": 84,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.08"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# First triangle\nhypotenuse = 16\n# Second triangle\nhypotenuse2 = 16/3\n# Length of the longer leg of the smaller triangle\nlength = hypotenuse2 / math.sqrt(3)\nprint(f\"{length:.2f}\")"
  },
  {
    "example_id": 85,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "for i in range(1, 1000000):\n    if i % 2!= 0:\n        if i == 17:\n            print(i)\n            break"
  },
  {
    "example_id": 86,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "appetizers = 5\nentrees = 8\ndesserts = 4\n\n# There are 5 * 8 * 4 = 80 different meals\nprint(appetizers * entrees * desserts)"
  },
  {
    "example_id": 87,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# \ndef gcf(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcf(b % a, a)\n\nprint(gcf(518, 294))"
  },
  {
    "example_id": 88,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "# x = (angle BAD + angle CDA)\nx = 110 + 100\nprint(f\"{x:.0f}\")"
  },
  {
    "example_id": 89,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(int(math.ceil((5*math.sqrt(3) - 3*math.sqrt(5)))))"
  },
  {
    "example_id": 90,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# \nx = 30 - 7 - 11 - 4\nprint(x)"
  },
  {
    "example_id": 91,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "a, b = 5, 13\nprint(a + b)"
  },
  {
    "example_id": 92,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.5"
    ],
    "annotated_answers": [
      "84.5"
    ],
    "solution": "print(35.2 + 49.3)"
  },
  {
    "example_id": 93,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "def prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef prime_sum(n):\n    return sum(prime_factors(n))\n\nprint(prime_sum(85085))"
  },
  {
    "example_id": 94,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "product = 1\nfor i in range(1, 11):\n    if divisible_by(10, i):\n        product *= i\nprint(product)"
  },
  {
    "example_id": 95,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# Number of large boxes\nL = 4\n# Number of small boxes in each large box\nS = 3\n# Number of smaller boxes in each small box\nSS = 2\n\n# Total number of boxes\nN = L * S * SS\n\nprint(N)"
  },
  {
    "example_id": 96,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 42\ntotal_factorial = 1\nfor i in range(1, n+1):\n    total_factorial *= i\n    if str(total_factorial)[-1] == '0':\n        print(str(total_factorial)[-1])"
  },
  {
    "example_id": 97,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "666000.0"
    ],
    "annotated_answers": [
      "666000.0"
    ],
    "solution": "print(math.prod([3**2, 2**4, 37, 5**3]))"
  },
  {
    "example_id": 98,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "# \nfor i in range(1, 21):\n    if i % 3 == 0 and i % 5 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 99,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 20 * (2/5)**2 * (3/4)**2 * (5/9)\nprint(f\"{x:.2f}\")\nprint(f\"{x**5:.2f}\")"
  },
  {
    "example_id": 100,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "score = 87 + 3\nprint(score)"
  },
  {
    "example_id": 101,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef divisible_by(n, m):\n    return n % m == 0\n\ndef get_factors(n):\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if divisible_by(n, i):\n            factors.append(i)\n    return factors\n\ndef get_factors_of_40():\n    return get_factors(40)\n\ndef get_factors_of_120():\n    return get_factors(120)\n\ndef get_common_factors(list1, list2):\n    common_factors = []\n    for i in list1:\n        if i in list2:\n            common_factors.append(i)\n    return common_factors\n\ndef get_count_of_common_factors():\n    common_factors = get_common_factors(get_factors_of_40(), get_factors_of_120())\n    return len(common_factors)\n\nprint(get_count_of_common_factors())"
  },
  {
    "example_id": 102,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "denominator = 8\nnumerator = 5\n\n# Find difference between denominator and numerator\ndiff = denominator - numerator\n\n# Print difference\nprint(f\"The difference between the denominator and numerator of the fraction is {diff}\")"
  },
  {
    "example_id": 103,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 0\nprint(n**(5**6431564))"
  },
  {
    "example_id": 104,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "1.125"
    ],
    "solution": "a = 0.2 + 0.6\nprint(f\"{1/a:.2f}\")"
  },
  {
    "example_id": 105,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "62.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "for i in range(3, 1000000000):\n    if i % 3 == 2 and i % 4 == 2 and i % 5 == 2 and i % 6 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 106,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print((-1)**1001)"
  },
  {
    "example_id": 107,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def days_studied_for_3_or_more_hours():\n    return [1, 2, 4, 5]\n\nprint(days_studied_for_3_or_more_hours())"
  },
  {
    "example_id": 108,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "563.51"
    ],
    "annotated_answers": [
      "563.51"
    ],
    "solution": "# Round 563.5097 to the nearest hundredth\nprint(round(563.5097, 2))"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.2"
    ],
    "annotated_answers": [
      "7.2"
    ],
    "solution": "# Calculate CE length\nCE = math.sqrt((4)**2 + (6)**2)\nprint(f\"{CE:.1f}\")"
  },
  {
    "example_id": 110,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.18"
    ],
    "annotated_answers": [
      "13.18"
    ],
    "solution": "print(56.78 - 43.6)"
  },
  {
    "example_id": 111,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8"
    ],
    "annotated_answers": [
      "22.5"
    ],
    "solution": "x = (150 / 180)\nprint(f\"{x:.1f}\")"
  },
  {
    "example_id": 112,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = (32 + 8) / 2\nprint(x)"
  },
  {
    "example_id": 113,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "147.0"
    ],
    "solution": "total_minutes = 7 * 30 / 5\nprint(total_minutes)"
  },
  {
    "example_id": 114,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "234.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "perimeter = 39*6\nprint(perimeter)"
  },
  {
    "example_id": 115,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "times = 0\nfor i in range(1, 100):\n    if str(i).count(\"6\") > 0:\n        times += 1\nprint(times)"
  },
  {
    "example_id": 116,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "set = {2/5, 1/2, 5, 10}\nquotients = [x/y for x in set for y in set]\nprint(max(quotients))"
  },
  {
    "example_id": 117,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Find the smallest possible average of four distinct positive even integers\n# (Note: This is a trick question!)\nsmallest_average = 2\nprint(f\"{smallest_average:.2f}\")"
  },
  {
    "example_id": 118,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "103041.0"
    ],
    "annotated_answers": [
      "103041.0"
    ],
    "solution": "print((103041**0.5)**2)"
  },
  {
    "example_id": 119,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "dollars_per_dozen = 3.0 / 4.0\ndollars_for_dozen_doughnuts = dollars_per_dozen * 12.0\nprint(f\"{dollars_for_dozen_doughnuts:.2f}\")"
  },
  {
    "example_id": 120,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.67"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "h = 8 / 3\nprint(f\"{h:.2f}\")"
  },
  {
    "example_id": 121,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "544.0"
    ],
    "annotated_answers": [
      "5040.0"
    ],
    "solution": "# \ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# \ndef divisible_by(n, m):\n    return n % m == 0\n\n# \ndef days_studied_for_3_or_more_hours():\n    return 10\n\n# \ntotal = 0\nfor i in range(0, 10):\n    for j in range(0, 10):\n        for k in range(0, 10):\n            for l in range(0, 10):\n                if is_prime(i) and is_prime(j) and is_prime(k) and is_prime(l):\n                    if divisible_by(i, 3) or divisible_by(j, 3) or divisible_by(k, 3) or divisible_by(l, 3):\n                        total += 1\n\nprint(total)"
  },
  {
    "example_id": 122,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.3636363636363635"
    ],
    "annotated_answers": [
      "1.36"
    ],
    "solution": "kilograms = 3 / 2.2\nprint(kilograms)"
  },
  {
    "example_id": 123,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a % b)\n\nprint(gcf(144, 405))"
  },
  {
    "example_id": 124,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.73"
    ],
    "annotated_answers": [
      "0.73"
    ],
    "solution": "print(0.8 - 0.07)"
  },
  {
    "example_id": 125,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "sum = 17 + 10 + 9 + 14 + 16 + 8 + 10\nprint(sum)"
  },
  {
    "example_id": 126,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "# Number of stores in North Area Mall that sell shoes\nnorth_shoes = 18\n\n# Number of stores in University Mall that sell shoes\nuniversity_shoes = (north_shoes / 90) * 90\nprint(university_shoes)"
  },
  {
    "example_id": 127,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def is_prime(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef divisible_by(n, m):\n    return n % m == 0\n\ndef days_studied_for_3_or_more_hours():\n    for i in range(1, 40):\n        if divisible_by(i, 3) and is_prime(i):\n            return i\n    return -1\n\nprint(days_studied_for_3_or_more_hours())"
  },
  {
    "example_id": 128,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def days_studied_for_3_or_more_hours():\n    number_of_days = 0\n    for i in range(7):\n        for j in range(24):\n            if j % 3 == 0:\n                number_of_days += 1\n    return number_of_days\n\nprint(days_studied_for_3_or_more_hours())"
  },
  {
    "example_id": 129,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.15"
    ],
    "annotated_answers": [
      "0.15"
    ],
    "solution": "print(3/20)"
  },
  {
    "example_id": 130,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 9\nprint(x)"
  },
  {
    "example_id": 131,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "def divisible_by(n, m):\n    return n % m == 0\n\ndef is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef days_studied_for_3_or_more_hours():\n    return 0\n\ndef smallest_multiple_of_6_greater_than_115():\n    for i in range(116, 1000000):\n        if divisible_by(i, 6) and is_prime(i):\n            return i\n    return -1\n\nprint(smallest_multiple_of_6_greater_than_115())"
  },
  {
    "example_id": 132,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "36.6",
      "34.9",
      "1.05",
      "10.0",
      "36.1",
      "34.4",
      "1.05",
      "11.0",
      "35.6",
      "33.9",
      "1.05",
      "12.0",
      "35.1",
      "33.4",
      "1.05"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "for grade in range(9, 13):\n    males = float(f\"{41.1 - 0.5 * grade:.2f}\")\n    females = float(f\"{39.4 - 0.5 * grade:.2f}\")\n    males_ratio = males / females\n    print(f\"Grade {grade} males: {males}, females: {females}, ratio: {males_ratio:.2f}\")\n    if abs(135 - males_ratio) < 0.01:\n        print(f\"Closest to 135 is grade {grade}\")\n        break"
  },
  {
    "example_id": 133,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "count = 0\nfor i in range(11, 29):\n    if math.gcd(i, 28) == 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 134,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "ans = ((1*2)+(3*4)-(5*6)+(7*8))*(9*0)\nprint(ans)"
  },
  {
    "example_id": 135,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "scores = [70, 80, 90, 75, 80, 85]\n\nmean = sum(scores) / len(scores)\n\nprint(mean)"
  },
  {
    "example_id": 136,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(1200 * 5 / 100)"
  },
  {
    "example_id": 137,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "hypotenuse = math.sqrt(2)\nside_a = math.sqrt(2)\nside_b = math.sqrt(2)\nprint(f\"{side_a**2 + side_b**2:.2f}\")"
  },
  {
    "example_id": 138,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "204.0"
    ],
    "annotated_answers": [
      "1208.0"
    ],
    "solution": "perimeter = 62 + 62 + 20 + 20 + 20 + 20\nprint(perimeter)"
  },
  {
    "example_id": 139,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "prime_numbers = [2,3,5,7,11]\nproduct = 1\nfor i in prime_numbers:\n    product *= i\nprint(product % 42)"
  },
  {
    "example_id": 140,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 2\nprint(2**3*3**x)"
  },
  {
    "example_id": 141,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "solutions = 0\nfor x in range(5, 10):\n    if 3*(x-5) <= 7:\n        solutions += 1\nprint(solutions)"
  },
  {
    "example_id": 142,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "longer_length = 60\nshorter_length = 60 / 5\nprint(shorter_length)"
  },
  {
    "example_id": 143,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 7"
  },
  {
    "example_id": 144,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef divisible_by(n, m):\n    return n % m == 0\n\ndef days_studied_for_3_or_more_hours():\n    days = 0\n    for i in range(1, 15):\n        if divisible_by(i, 3) or divisible_by(i, 4) or divisible_by(i, 5):\n            days += 1\n    return days\n\nprint(days_studied_for_3_or_more_hours())"
  },
  {
    "example_id": 145,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "326.5"
    ],
    "annotated_answers": [
      "326.5"
    ],
    "solution": "print(313.9 + 12.6)"
  },
  {
    "example_id": 146,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((100 / 101)**(-3) * (100 / 101)**3)"
  },
  {
    "example_id": 147,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "3.0",
      "6.0",
      "2.0",
      "4.0",
      "4.0",
      "4.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "result = (1 + 2 * 3 * 4 * 5) / 11\nprint(result)"
  },
  {
    "example_id": 148,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "tree_height = 120 / 2\nprint(tree_height)"
  },
  {
    "example_id": 149,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "count = 0\nfor i in range(1000, 10000):\n    if is_prime(i) and divisible_by(i, 3):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 150,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "def is_perfect_square(n):\n    x = int(n**0.5)\n    return x**2 == n\n\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef least_perfect_square_with_3_different_prime_factors():\n    for i in range(1000000):\n        if is_perfect_square(i):\n            factors = prime_factors(i)\n            if len(factors) == 3:\n                return i\n    return -1\n\nprint(least_perfect_square_with_3_different_prime_factors())"
  },
  {
    "example_id": 151,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2097154.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 1\nb = 1\nc = 2\nd = -2\n\nsum = a**20 + b**20 + c**20 + d**20\nprint(sum)"
  },
  {
    "example_id": 152,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, math.floor(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef divisible_by(n, m):\n    return n % m == 0\n\ndef days_studied_for_3_or_more_hours():\n    days = 0\n    hours = 0\n    while hours < 3:\n        if divisible_by(days, 2):\n            hours += 2\n        else:\n            hours += 1\n        days += 1\n    return days\n\nprint(f\"{days_studied_for_3_or_more_hours():d}\")"
  },
  {
    "example_id": 153,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.8"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "total = 36\nb_c = total * 3 / 10\nprint(b_c)"
  },
  {
    "example_id": 154,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "x = 65\nprint(x)"
  },
  {
    "example_id": 155,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-16.944444444444443"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(8/9 * (1/2)**4 - 17)"
  },
  {
    "example_id": 156,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Area of a triangle is half the base times height.\n# Base = 6, height = 6\n# Area = (base * height) / 2\n# Area = (6 * 6) / 2\n# Area = 36 / 2\n# Area = 18\nprint(\"The area of the triangle is 18 square units.\")"
  },
  {
    "example_id": 157,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "def largest_prime_factor(n):\n    if is_prime(n):\n        return n\n    for i in range(int(n**0.5), 1, -1):\n        if divisible_by(n, i):\n            return largest_prime_factor(n // i)\n    return 1\n\nprint(largest_prime_factor(1391))"
  },
  {
    "example_id": 158,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "midpoint_PQ = (8 + 48) / 2\nmidpoint_BQ = (midpoint_PQ + 48) / 2\nmidpoint_PC = (midpoint_BQ + 8) / 2\nprint(midpoint_PC)"
  },
  {
    "example_id": 159,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.38"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Define a function that calculates the measure of the largest angle\ndef largest_angle(n):\n    if n == 2:\n        return 90\n    elif n == 3:\n        return 60\n    elif n == 4:\n        return 45\n    else:\n        return 360\n\n# Define a function that calculates the measure of the smallest angle\ndef smallest_angle(n):\n    if n == 2:\n        return 90\n    elif n == 3:\n        return 60\n    elif n == 4:\n        return 45\n    else:\n        return 360\n\n# Calculate the measure of the largest angle\nlargest_angle_measure = largest_angle(4) * 2\n\n# Calculate the measure of the smallest angle\nsmallest_angle_measure = smallest_angle(4)\n\n# Calculate the total angle measure\ntotal_angle_measure = largest_angle_measure + smallest_angle_measure\n\n# Calculate the degree measure of the largest angle\ndegree_measure_of_largest_angle = total_angle_measure / 360\n\n# Print the degree measure of the largest angle\nprint(f\"The degree measure of the largest angle is: {degree_measure_of_largest_angle:.2f}\")"
  },
  {
    "example_id": 160,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "# number of multiples\nmultiples = 0\n\n# loop from 100 to 999\nfor i in range(100, 1000):\n    # check if divisible by 13\n    if divisible_by(i, 13):\n        # increment multiples\n        multiples += 1\n\n# print answer\nprint(multiples)"
  },
  {
    "example_id": 161,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "new_price = 0.75 * 60\nprint(new_price)"
  },
  {
    "example_id": 162,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "for i in range(10, 100):\n    if not is_prime(i):\n        continue\n    if not is_prime(int(str(i)[::-1])):\n        print(i)\n        break"
  },
  {
    "example_id": 163,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0",
      "35.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# Define the variables for the number of miles each team has to run\ngirls_miles = 0\nboys_miles = 0\n\n# Initialize the loop counter\ni = 0\n\n# Set the number of days to run the loop\ndays = 7\n\n# Run the loop\nwhile i < days:\n    # If the number of days is less than or equal to 3\n    if i <= 3:\n        # Increment the girls' miles by 3\n        girls_miles += 3\n    # If the number of days is greater than 3\n    else:\n        # Increment the girls' miles by 6\n        girls_miles += 6\n\n    # Increment the boys' miles by 5\n    boys_miles += 5\n\n    # Increment the loop counter\n    i += 1\n\n# Print the total miles each team has run\nprint(f\"The girls have run {girls_miles} miles.\")\nprint(f\"The boys have run {boys_miles} miles.\")"
  },
  {
    "example_id": 164,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "sum = 0\nfor i in range(10, 20):\n    if is_prime(i) == True:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 165,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "answer = (math.sqrt(6) + math.sqrt(24))**2\nprint(f\"{answer:.2f}\")"
  },
  {
    "example_id": 166,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "print(4*12 - (4+12))"
  },
  {
    "example_id": 167,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "12.0",
      "12.0",
      "24.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "# 1. Number of games\n# 2. Number of players\n# 3. Number of games played by each player\n# 4. Number of games played by each school\n\n# Number of games\nn_games = 3 * 3 + 3 * 3 + 3 * 3\n\n# Number of players\nn_players = 4 * 3\n\n# Number of games played by each player\nn_games_player = 3 * 4\n\n# Number of games played by each school\nn_games_school = 3 * 4 * 2\n\nprint(f\"{n_games = }\")\nprint(f\"{n_players = }\")\nprint(f\"{n_games_player = }\")\nprint(f\"{n_games_school = }\")"
  },
  {
    "example_id": 168,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 22\nprint(x/2)"
  },
  {
    "example_id": 169,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "count = 0\nfor i in range(1, 13):\n    if 12 % i == 0:\n        count += 1\nprint(f\"{count}\")"
  },
  {
    "example_id": 170,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Find the largest integer x that satisfies -2 < 4 + 3x < 2\nx = 0\nwhile 4 + 3*x < 2:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 171,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef divisible_by(n, m):\n    return n % m == 0\n\n\ndef days_studied_for_3_or_more_hours():\n    days = 0\n    for i in range(1, 100):\n        if divisible_by(i, 3):\n            days += 1\n    return days\n\n\ndef smallest_positive_integer_with_factors_of_16_15_and_12():\n    smallest = 0\n    for i in range(1, 100):\n        if is_prime(i) and divisible_by(i, 16) and divisible_by(i, 15) and divisible_by(i, 12):\n            smallest = i\n            break\n    return smallest\n\n\nprint(smallest_positive_integer_with_factors_of_16_15_and_12())"
  },
  {
    "example_id": 172,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "1.0",
      "2.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "p1, p2 = 2, 3\nwhile p1 < 100 and p2 < 100:\n    if is_prime(p1) and is_prime(p2):\n        n = p1 * p2\n        if divisible_by(n, 3):\n            days_studied = days_studied_for_3_or_more_hours()\n            print(f\"{n} has {days_studied} days studied\")\n            break\n    p2 += 1\n    if p2 > 99:\n        p1 += 1\n        p2 = p1 + 1"
  },
  {
    "example_id": 173,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "distance = math.sqrt((0.5 + 0.5)**2 + (0.75)**2)\nprint(distance)"
  },
  {
    "example_id": 174,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# \nnum_triangles = 2\nprint(f\"{num_triangles:.2f}\")"
  },
  {
    "example_id": 175,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 10 ** 5 * 10 ** 77 / 10 ** 15\nb = a / (10 ** 15) ** 4\nprint(len(str(b)) - 1)"
  },
  {
    "example_id": 176,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = 1\nprint(x)"
  },
  {
    "example_id": 177,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1320.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "feet_per_minute = 15 * 5280 / 60\nprint(f\"{feet_per_minute:.2f}\")"
  },
  {
    "example_id": 178,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "83.0"
    ],
    "solution": "x = solve(0.5*3x-9 + x + 37, x)\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 179,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "900.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "# Area = base x height\narea = 30 * 30\nprint(area)"
  },
  {
    "example_id": 180,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = 150\nprint(x)"
  },
  {
    "example_id": 181,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "flagpole = 20\nwoman = 6\nshadow = 9\n\nprint(f\"{flagpole - shadow:.0f}\")"
  },
  {
    "example_id": 182,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def greatest_common_divisor(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef divisible_by(n, m):\n    return n % m == 0\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef days_studied_for_3_or_more_hours():\n    days_studied = 0\n    for i in range(1, 30):\n        if divisible_by(i, 3):\n            days_studied += 1\n    return days_studied\n\na = 18\nb = 24\ngcd = greatest_common_divisor(a, b)\n\nfor i in range(1, gcd + 1):\n    if divisible_by(a, i) and divisible_by(b, i):\n        print(i)"
  },
  {
    "example_id": 183,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# Area of rectangle\narea = 72\n\n# Area of triangle\narea_of_triangle = area / 3\n\nprint(f\"{area_of_triangle:.2f}\")"
  },
  {
    "example_id": 184,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "500.0"
    ],
    "annotated_answers": [
      "3400.0"
    ],
    "solution": "x = 500\nprint(x)"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.5"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Find the area of the visible red border\nborder_area = 5 * 7 * 0.5\nprint(f\"{border_area:.2f}\")"
  },
  {
    "example_id": 186,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(36**10 / 6**19)"
  },
  {
    "example_id": 187,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20202.0"
    ],
    "annotated_answers": [
      "89898.0"
    ],
    "solution": "def largest_five_digit_palindrome_divisible_by_6():\n    for i in range(10000, 100000):\n        if str(i) == str(i)[::-1] and i % 6 == 0:\n            return i\n    return None\n\nprint(largest_five_digit_palindrome_divisible_by_6())"
  },
  {
    "example_id": 188,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "121.8"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "square = 2\nprint(f\"{8210 / 8.21 ** 2:.2f}\")"
  },
  {
    "example_id": 189,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "# Calculate the average\navg = (20*80 + 8*90 + 2*100) / 30\nprint(avg)"
  },
  {
    "example_id": 190,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-55.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "# define function for is_prime\ndef is_prime(n):\n    return divisible_by(n, 2) or divisible_by(n, 3) or divisible_by(n, 5)\n\n# define function for divisible_by\ndef divisible_by(n, m):\n    return n % m == 0\n\n# define function for days_studied_for_3_or_more_hours\ndef days_studied_for_3_or_more_hours():\n    days = 0\n    hours = 0\n    while hours < 3:\n        hours += 1\n        days += 1\n    return days\n\n# solve the problem\nanswer = 30 - 85\nprint(answer)"
  },
  {
    "example_id": 191,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "132.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "answer = 12 * 11\nprint(answer)"
  },
  {
    "example_id": 192,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "cookies = 3/2/16\nprint(f\"{cookies:.0f}\")"
  },
  {
    "example_id": 193,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.47"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "# define the angle ACB\nangle = math.asin(36/80)\nprint(f\"{angle:.2f}\")"
  },
  {
    "example_id": 194,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.39999999999999997"
    ],
    "annotated_answers": [
      "0.4"
    ],
    "solution": "# \nprint(2.4 / 6)"
  },
  {
    "example_id": 195,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 4 + 4**2\nprint(x)"
  },
  {
    "example_id": 196,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "games_won = 12 * 0.25\nprint(games_won)"
  },
  {
    "example_id": 197,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "t = 0\nwhile 1.2*t <= 9.6:\n    t += 1\nprint(t)"
  },
  {
    "example_id": 198,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "628.0"
    ],
    "solution": "n = 0\nfor i in range(1, 200):\n    if is_prime(i) and divisible_by(i, 3):\n        n += 1\nprint(n)"
  },
  {
    "example_id": 199,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "result = (3 * 2) // 6\nprint(f\"{result:.2f}\")"
  },
  {
    "example_id": 200,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "# 8 colors\n# 1 shirt and 1 tie of each color\n# 8 shirt-and-tie outfits\nprint(8)"
  },
  {
    "example_id": 201,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "116.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "angle = math.degrees(2*math.acos(155/293))\nprint(int(angle))"
  },
  {
    "example_id": 202,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "7.0",
      "94.0",
      "5309000.0",
      "0.0",
      "7.0",
      "94.0",
      "5308900.0",
      "0.0",
      "7.0",
      "94.0",
      "5309620.0",
      "0.0",
      "7.0",
      "94.0",
      "5309460.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "peru_price, brazil_price, france_price, spain_price = 4, 6, 6, 5\nbrazil_per_decade, france_per_decade, peru_per_decade, spain_per_decade = 8, 8, 8, 8\neu_countries = ['Brazil', 'France', 'Peru', 'Spain']\neu_per_decade = [brazil_per_decade, france_per_decade, peru_per_decade, spain_per_decade]\neu_price = [brazil_price, france_price, peru_price, spain_price]\neu_countries_in_80s = []\neu_countries_in_80s.append(eu_countries[0] for eu_countries[0] in eu_countries if eu_per_decade[eu_countries.index(eu_countries[0])] == 8)\neu_countries_in_80s.append(eu_countries[1] for eu_countries[1] in eu_countries if eu_per_decade[eu_countries.index(eu_countries[1])] == 8)\neu_countries_in_80s.append(eu_countries[2] for eu_countries[2] in eu_countries if eu_per_decade[eu_countries.index(eu_countries[2])] == 8)\neu_countries_in_80s.append(eu_countries[3] for eu_countries[3] in eu_countries if eu_per_decade[eu_countries.index(eu_countries[3])] == 8)\nprint(eu_countries_in_80s)"
  },
  {
    "example_id": 203,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "# Set variables\nn = 1000\nm = 10000\n\n# Set the palindrome pattern\npattern = \"{:d}{:d}{:d}{:d}\"\n\n# Initialize the counter\ncount = 0\n\n# Iterate through numbers\nfor i in range(n, m):\n    # Check if number is a palindrome\n    if str(i) == str(i)[::-1]:\n        # Check if number is divisible by 3\n        if i % 3 == 0:\n            # Increment counter\n            count += 1\n\n# Print the number of palindromes\nprint(count)"
  },
  {
    "example_id": 204,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "cupcakes = int(math.floor(12 * 2 / 6))\nprint(cupcakes)"
  },
  {
    "example_id": 205,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "157.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "count = 0\nfor i in range(100, 500):\n    if '3' in str(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 206,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0",
      "35.0",
      "400.0",
      "11.428571428571429",
      "11.428571428571429"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "# define a and b\na = 20\nb = 15\n\n# calculate the area of the square\narea = a * a\n\n# calculate the perimeter of the square\nperimeter = 4 * a\n\n# calculate the perimeter of the right triangle\nright_triangle = a + b\n\n# print the perimeter of the square\nprint(f\"The perimeter of the square is {perimeter}\")\n\n# print the perimeter of the right triangle\nprint(f\"The perimeter of the right triangle is {right_triangle}\")\n\n# print the area of the square\nprint(f\"The area of the square is {area}\")\n\n# print the ratio of the perimeter of the square to the perimeter of the right triangle\nprint(f\"The ratio of the perimeter of the square to the perimeter of the right triangle is {area/right_triangle}\")\n\n# print the ratio of the area of the square to the area of the right triangle\nprint(f\"The ratio of the area of the square to the area of the right triangle is {area/right_triangle}\")"
  },
  {
    "example_id": 207,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "print(math.sqrt(10*15*24))"
  },
  {
    "example_id": 208,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = 10\nif 6 - x > -9:\n    print(x)"
  },
  {
    "example_id": 209,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "angle = 180 - math.degrees(math.acos(0.5))\nprint(f\"{angle:.2f}\")"
  },
  {
    "example_id": 210,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "14.0",
      "21.0",
      "28.0",
      "35.0",
      "42.0",
      "49.0",
      "56.0",
      "63.0",
      "70.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "i = 1\nwhile i < 150:\n    if i % 7 == 0:\n        print(i)\n    i += 1"
  },
  {
    "example_id": 211,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# divisors = 1, 7\nprint(2)"
  },
  {
    "example_id": 212,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nprint(average([6, 8, 9, 11, 16]))"
  },
  {
    "example_id": 213,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-56.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 5**2 - 9**2\nprint(f\"{a:.2f}\")"
  },
  {
    "example_id": 214,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "152.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "mean_height = 733\ntallest_height = 858\nshortest_height = 625\nnew_height = 885\nincrease = new_height - mean_height\nprint(increase)"
  },
  {
    "example_id": 215,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "side = 2 + 21\nprint(side)"
  },
  {
    "example_id": 216,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "# Number of ways to place 2 pieces in a row\nrows = 8\nways_row = math.factorial(rows) / (math.factorial(2) * math.factorial(rows - 2))\n\n# Number of ways to place 2 pieces in a col\ncols = 8\nways_col = math.factorial(cols) / (math.factorial(2) * math.factorial(cols - 2))\n\n# Total number of ways\nprint(ways_row + ways_col)"
  },
  {
    "example_id": 217,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "politicians = 4\nlawyers = 3\nhandshakes = politicians * (politicians - 1) + lawyers * (politicians - 1)\nprint(handshakes)"
  },
  {
    "example_id": 218,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2000.0"
    ],
    "annotated_answers": [
      "980.0"
    ],
    "solution": "pence = 500\nfarthings = pence * 4\nprint(f\"{farthings:.0f}\")"
  },
  {
    "example_id": 219,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "length_ac = math.sqrt((0 - 0)**2 + (32 - 0)**2)\nprint(length_ac)"
  },
  {
    "example_id": 220,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(6)"
  },
  {
    "example_id": 221,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 222,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(6 + (8/2))"
  },
  {
    "example_id": 223,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "# n is the number of rows\n# m is the number of columns\nn = 20\nm = 28\n\n# find the least common multiple of n and m\nlcm = math.lcm(n, m)\n\n# find the number of rows and columns\n# in the rectangular grid\nn_rows = lcm // n\nm_cols = lcm // m\n\n# find the number of students in the class\n# by multiplying the number of rows and columns\nnum_students = n_rows * m_cols\n\nprint(num_students)"
  },
  {
    "example_id": 224,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "123.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "print(76 - (-4*8 - 2) + 13)"
  },
  {
    "example_id": 225,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-200.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "x = 300\ny = 400\njim_distance = math.sqrt(x**2 + y**2)\nmartha_distance = x + y\nprint(f\"{jim_distance - martha_distance:.2f}\")"
  },
  {
    "example_id": 226,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "inches = 120/20\nprint(inches)"
  },
  {
    "example_id": 227,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(round(15.49999999))"
  },
  {
    "example_id": 228,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.63"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "area = math.pi * 2.5**2\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 229,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5321.0"
    ],
    "annotated_answers": [
      "5321.0"
    ],
    "solution": "print(math.pow(-math.sqrt(5321), 2))"
  },
  {
    "example_id": 230,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# radius of circle = radius of rope / 2\nlargest_radius = int(60/2)\nprint(largest_radius)"
  },
  {
    "example_id": 231,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "949.0"
    ],
    "annotated_answers": [
      "949.0"
    ],
    "solution": "for i in range(900, 1000):\n    if i % 73 == 0:\n        print(i)"
  },
  {
    "example_id": 232,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "boxes = 77 // 12\nprint(boxes)"
  },
  {
    "example_id": 233,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "x = [8, 12, 16, 20, 24]\nprint(f\"Mean: {sum(x) / len(x)}\")"
  },
  {
    "example_id": 234,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.4"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# Define variables\ncoat_price = 60\ndiscount = 0.20\ncommission = 0.05\n\n# Calculate solution\nsolution = (coat_price * (1 - discount)) * commission\nprint(f\"{solution:.2f}\")"
  },
  {
    "example_id": 235,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "head_height = 6 * 0.125\nprint(head_height)"
  },
  {
    "example_id": 236,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "20.0",
      "32.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "not_in_math = 35 - 8\nnot_in_history = 35 - 15\nnot_in_math_or_history = 35 - 3\nprint(not_in_math, not_in_history, not_in_math_or_history)"
  },
  {
    "example_id": 237,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "3024.0"
    ],
    "solution": "import math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef combination(n, r):\n    return factorial(n) // (factorial(r) * factorial(n - r))\n\nprint(combination(9, 4))"
  },
  {
    "example_id": 238,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(5**5//5**4 - 5**3 + 5**2*5**1)"
  },
  {
    "example_id": 239,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def blue_faces(num1, num2):\n    if num1*num2 == 6:\n        return False\n    else:\n        return True\n\n# Create a list of tuples\n# where each tuple is a pair of numbers\n# that can be multiplied to get 6\n# and is not the same as the product of the two numbers\nblue_faces_list = [(i, j) for i in range(1, 7) for j in range(1, 7) if blue_faces(i, j)]\n\n# Print the list\nprint(blue_faces_list)"
  },
  {
    "example_id": 240,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 1\nwhile x * 5!= 21 + (2 * x):\n    x += 1\nprint(x)"
  },
  {
    "example_id": 241,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "print(2 * 36)"
  },
  {
    "example_id": 242,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-34.0",
      "-17.0",
      "0.0",
      "17.0",
      "34.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def multiples_of_17(a, b):\n    multiples = []\n    for i in range(a, b):\n        if i % 17 == 0:\n            multiples.append(i)\n    return multiples\n\n\nprint(multiples_of_17(-50, 50))"
  },
  {
    "example_id": 243,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x = symbols('x')\neq = x - 2*x + 3*x - 4*x + 5*x - 6*x + 7*x - 8*x + 9*x - 10*x\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 244,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "x = symbols('x', integer=True)\nprint(f\"{solve(30 <= x <= 50, x)[0]:.2f}\")"
  },
  {
    "example_id": 245,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# Number of red cars\nred = 12\n# Number of 4-door cars\nfour = 15\n# Number of 2-door cars\ntwo = 4\n# Number of white cars\nwhite = 4\n# Total number of cars\ntotal = red + four + two + white\n# Total number of 4-door cars\nfour_total = four + two\n# Total number of red 4-door cars\nfour_red = four_total * red / total\nprint(f\"{four_red:.0f}\")"
  },
  {
    "example_id": 246,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.14285714285714285"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(7**-1)"
  },
  {
    "example_id": 247,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "print(1 + 2 + 3 - 4 + 5 + 6)"
  },
  {
    "example_id": 248,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "C = 21\nprint(C)"
  },
  {
    "example_id": 249,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.777777777777778"
    ],
    "annotated_answers": [
      "7.78"
    ],
    "solution": "cost = 10 * 7/9\nprint(cost)"
  },
  {
    "example_id": 250,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "2.0",
      "285.0",
      "2.0",
      "285.0",
      "2.0",
      "17.0",
      "2.0",
      "285.0",
      "2.0",
      "17.0",
      "2.0",
      "17.0",
      "2.0",
      "285.0",
      "2.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# Define variables\na, b = symbols('a b')\n\n# Define equations\neq1 = a + b - 17\neq2 = a * b - 1\n\n# Solve equations\nsol = solve([eq1, eq2], [a, b])\n\n# Print solution\nprint(sol)"
  },
  {
    "example_id": 251,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-16.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "print(-144/9)"
  },
  {
    "example_id": 252,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "smallest = 12 - 3\nprint(smallest)"
  },
  {
    "example_id": 253,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 4\nb = 20\n\nprint(a * b)"
  },
  {
    "example_id": 254,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0",
      "4.0",
      "6.0",
      "3.0",
      "10.0",
      "2.0",
      "15.0",
      "21.0",
      "0.0"
    ],
    "annotated_answers": [
      "1260.0"
    ],
    "solution": "# Define variable x\nx = symbols('x')\n\n# Define equation\neq = x**5 + 3*x**4 + 6*x**3 + 10*x**2 + 15*x + 21\n\n# Solve equation\nsol = solve(eq, x)\n\n# Print solution\nprint(sol)"
  },
  {
    "example_id": 255,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "# Define variables\nA = 40\nB = 25\nC = 30\nD = A - B - C\n\n# Print result\nprint(D)"
  },
  {
    "example_id": 256,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.75"
    ],
    "annotated_answers": [
      "16.75"
    ],
    "solution": "print(14.6+2.15)"
  },
  {
    "example_id": 257,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "188.38709677419362"
    ],
    "annotated_answers": [
      "351.0"
    ],
    "solution": "# Define variables\nbirthday_amaretta = 7/31\nbirthday_enzo = 9/31\n\n# Calculate difference between birthdays\ndays_between_birthdays = birthday_enzo - birthday_amaretta\n\n# Calculate total number of days in a year\ntotal_days = 365\n\n# Calculate number of days between 2008 and 2016\ndays_between_2008_2016 = total_days * 8\n\n# Calculate total number of cake-eating days\ntotal_cake_eating_days = days_between_birthdays * days_between_2008_2016\n\n# Print total number of cake-eating days\nprint(total_cake_eating_days)"
  },
  {
    "example_id": 258,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-14520.0"
    ],
    "annotated_answers": [
      "550.0"
    ],
    "solution": "# Define variables\nmiles = 12000\nmiles_hybrid = miles / 48\nmiles_suv = miles / 15\n\n# Define formula\n# gallons_saved = (miles_hybrid - miles_suv) * 26.4\ngallons_saved = (miles_hybrid - miles_suv) * 26.4\n\n# Print results\nprint(f\"{gallons_saved:.2f}\")"
  },
  {
    "example_id": 259,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21420.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 21420\nif N % 6 == 0:\n    print(N)"
  },
  {
    "example_id": 260,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "for i in range(1, 11):\n    if 5 % i == 0:\n        print(i)"
  },
  {
    "example_id": 261,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 4\ny = 3\nprint(x+y)"
  },
  {
    "example_id": 262,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.000346860908775581"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(1/31/93)"
  },
  {
    "example_id": 263,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "20.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "n = 0\nfor i in range(1, 101):\n    n += 1\n    if math.sqrt(i) <= 20:\n        print(f\"{n} terms are less than or equal to 20\")\n        break"
  },
  {
    "example_id": 264,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(315, 108))"
  },
  {
    "example_id": 265,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "print((71 + 72 + 73 + 74 + 75) / 5)"
  },
  {
    "example_id": 266,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.303"
    ],
    "annotated_answers": [
      "0.303"
    ],
    "solution": "print(3/10 + 3/1000)"
  },
  {
    "example_id": 267,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "average = (30*20 + 20*30)/50\nprint(average)"
  },
  {
    "example_id": 268,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 5 * 3\nprint(x)"
  },
  {
    "example_id": 269,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 35 - 8\nprint(x // 13)"
  },
  {
    "example_id": 270,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "p1 = 2\np2 = 3\np3 = 5\np4 = 7\n\na = p1 * p2 * p3 * p4\n\nprint(a)"
  },
  {
    "example_id": 271,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.24"
    ],
    "solution": "# Define the variables\nx = symbols('x')\ny = symbols('y')\n\n# Define the equation\neq = x*y - 35\n\n# Solve the equation\nsol = solve(eq, x)\n\n# Print the solution\nprint(sol)\n\n# Define the average\navg = (x + y) / 2\n\n# Print the average\nprint(avg)"
  },
  {
    "example_id": 272,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "# Find the number of ways to choose 3 people from 8 people.\n# The number of ways to choose 3 people from 8 people is 8! / (3! * 5!) = 8 * 7 * 6 = 336\n\n# Find the number of ways to choose a President, Vice-President, and Treasurer\n# from the 8 people such that no one serves two roles.\n# The number of ways is 336 / 3! = 336 / 6 = 61\n\n# The number of ways is 61\nprint(61)"
  },
  {
    "example_id": 273,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "x = 5 * 4\nprint(x)"
  },
  {
    "example_id": 274,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "rope_length = (15 - 3) + (14 - 5) + 14 + 15\nprint(rope_length)"
  },
  {
    "example_id": 275,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.95"
    ],
    "annotated_answers": [
      "4.95"
    ],
    "solution": "print(max(4.5, 4.45, 0.45, 0.54) + min(4.5, 4.45, 0.45, 0.54))"
  },
  {
    "example_id": 276,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "max_prime_factor = 97\nprint(max_prime_factor)"
  },
  {
    "example_id": 277,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "10.0",
      "7.0",
      "10.0",
      "7.0",
      "10.0",
      "7.0",
      "10.0",
      "7.0",
      "10.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a, b, c, d, e = symbols('a, b, c, d, e')\ns = (a + b + c + d + e) / 5\nm = (a + b + c + d + e) / 2\nprint(s + m)"
  },
  {
    "example_id": 278,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-13.599999999999994"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "# Assign the values to variables\na = 92\nb = 73\nc = 79\nd = 87\ne = 1\n\n# Calculate the mean\nmean = (a + b + c + d + e) / 5\n\n# Calculate the minimum score required\nminimum = mean - 80\n\n# Print the result\nprint(f\"The minimum score required is {minimum}\")"
  },
  {
    "example_id": 279,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.4000014000014"
    ],
    "annotated_answers": [
      "1.4"
    ],
    "solution": "print(1/0.714285)"
  },
  {
    "example_id": 280,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 10\nwhile x > 5:\n    if (2/3) < (x/5) < (6/7):\n        break\n    x -= 1\nprint(f\"{x}\")"
  },
  {
    "example_id": 281,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Define variables\na, b, c = symbols('a, b, c')\n\n# Define equation\neq = (a/2 + b/2)**2 + c**2 - 1\n\n# Solve for c\nsol = solve(eq, c)\n\n# Print result\nprint(sol[0])"
  },
  {
    "example_id": 282,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "280.0",
      "210.0",
      "490.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "dogs = 280\ncats = dogs * 3/4\ntotal = dogs + cats\nprint(f\"Total number of dogs: {dogs}\")\nprint(f\"Total number of cats: {cats}\")\nprint(f\"Total number of dogs and cats: {total}\")"
  },
  {
    "example_id": 283,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "113.1"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "r = 6\narea = math.pi * r**2\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 284,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.44"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Find the number of hurricanes in each year\nnum_hurricanes = [1, 5, 14, 17, 12, 2, 4, 2, 1]\n\n# Find the sum of the number of hurricanes\nsum_hurricanes = sum(num_hurricanes)\n\n# Find the total number of years\nnum_years = len(num_hurricanes)\n\n# Find the median\nmedian = sum_hurricanes / num_years\n\n# Round the result to the nearest hundredth\nprint(f\"{median:.2f}\")"
  },
  {
    "example_id": 285,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "tip_percent = (15 - 12) / 12 * 100\nprint(tip_percent)"
  },
  {
    "example_id": 286,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "kids = 44 // 3\nprint(kids)"
  },
  {
    "example_id": 287,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44100.0",
      "2100.0",
      "2100.0",
      "1470.0",
      "1470.0",
      "44100.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "print(30*21*70)\nprint(30*70)\nprint(70*30)\nprint(70*21)\nprint(21*70)\nprint(70*30*21)"
  },
  {
    "example_id": 288,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.1176470588235294"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "n = 360 / 170\nprint(n)"
  },
  {
    "example_id": 289,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.38025641025641027"
    ],
    "annotated_answers": [
      "0.38"
    ],
    "solution": "candy_per_week = 1483 / 52 / 75\nprint(candy_per_week)"
  },
  {
    "example_id": 290,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-32.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "original = (-2) * 6 - 20\nprint(original)"
  },
  {
    "example_id": 291,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 24\ni = 2\nwhile n <= 2400:\n    n *= i\n    i += 1\nprint(i-1)"
  },
  {
    "example_id": 292,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36000.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# define variables\nv = 1000 / 2.5\nd = v * 90\nprint(f\"The hallway is {d} meters long.\")"
  },
  {
    "example_id": 293,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# define perimeter of triangle\np = 8 + 20 + 25\nprint(f\"Perimeter of triangle is {p:.2f}\")"
  },
  {
    "example_id": 294,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "x = 11\nprint(x)"
  },
  {
    "example_id": 295,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "# Calculate total number of odd numbers\ntotal_odds = 0\nfor i in range(1, 12):\n    if i % 2!= 0:\n        total_odds += 1\nprint(total_odds)"
  },
  {
    "example_id": 296,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "-15.0",
      "161803398874989.0",
      "117557050458495.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "a, b = symbols('a b')\nx = solve(a**2 + b**2 - 2*a*b*math.cos(math.pi/5), b)\nprint(x[0])"
  },
  {
    "example_id": 297,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1201.78"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "# area of each square\na, b, c = symbols('a b c')\nperimeter = 104\ns = perimeter / 3\narea = s**2\nprint(f\"The area of each square is {area:.2f}\")"
  },
  {
    "example_id": 298,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5040.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "lcm = 1\nfor i in range(2, 8):\n    lcm = lcm * i\nprint(lcm)"
  },
  {
    "example_id": 299,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\nsol = solve(x*100 - x*150, x)\nprint(sol)"
  },
  {
    "example_id": 300,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "450.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "angle = 5 * 90\nprint(angle)"
  },
  {
    "example_id": 301,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0048"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\n\n# simplified value of a\na = 24/30\n\n# simplified value of b\nb = 20/3*25\n\n# simplified value of a/b\nc = a/b\n\n# simplified value of c\nprint(c)"
  },
  {
    "example_id": 302,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(int(3/5))\nprint(int(7/9))"
  },
  {
    "example_id": 303,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "340.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "digits = [2, 3, 5, 7]\ndigits = [2, 3, 5, 7]\n\n# 1. Find all the possible numbers using one digit\nnumbers = [digit for digit in digits]\n\n# 2. Find all the possible numbers using two digits\nnumbers += [digit1 * 10 + digit2 for digit1 in digits for digit2 in digits]\n\n# 3. Find all the possible numbers using three digits\nnumbers += [digit1 * 100 + digit2 * 10 + digit3 for digit1 in digits for digit2 in digits for digit3 in digits]\n\n# 4. Find all the possible numbers using four digits\nnumbers += [digit1 * 1000 + digit2 * 100 + digit3 * 10 + digit4 for digit1 in digits for digit2 in digits for digit3 in digits for digit4 in digits]\n\n# 5. Remove duplicates\nnumbers = set(numbers)\n\n# 6. Print the count\nprint(f\"There are {len(numbers)} distinct numbers that can be formed using one or more of the digits.\")"
  },
  {
    "example_id": 304,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "352.0",
      "9.0",
      "-82.0",
      "9.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "f, s, fs = symbols('f s fs')\neq1 = f + s + fs - 30\neq2 = f*3 + s*12 + fs*3 - 8\nsol = solve([eq1, eq2], [f, s, fs])\nprint(sol)"
  },
  {
    "example_id": 305,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-25.25"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# set the set of values\na = 5\nb = 8\nc = 10\nd = 18\ne = 19\nf = 28\ng = 30\nx = 40\n\n# set the mean of the set's members\nmean = (a + b + c + d + e + f + g) / 8\n\n# calculate the difference between the mean and x\ndiff = mean - x\n\n# print the solution\nprint(f\"{diff:.2f}\")"
  },
  {
    "example_id": 306,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = 14\nprint(x)"
  },
  {
    "example_id": 307,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = (12 + 3) / 5\nprint(x)"
  },
  {
    "example_id": 308,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "5.0",
      "23.0",
      "25.0",
      "35.0",
      "235.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def get_distinct_numbers(digits):\n    \"\"\"\n    Return a list of distinct numbers that can be formed using one or more of the digits.\n    \"\"\"\n    distinct_numbers = []\n    for i in range(1, len(digits) + 1):\n        for combination in itertools.combinations(digits, i):\n            distinct_numbers.append(int(\"\".join(map(str, combination))))\n    return distinct_numbers\n\n\ndef get_distinct_numbers_using_sympy(digits):\n    \"\"\"\n    Return a list of distinct numbers that can be formed using one or more of the digits.\n    \"\"\"\n    x = symbols(\"x\")\n    return [solve(x, (x - d) % 10 == 0) for d in digits]\n\n\ndef get_distinct_numbers_using_sympy_2(digits):\n    \"\"\"\n    Return a list of distinct numbers that can be formed using one or more of the digits.\n    \"\"\"\n    x = symbols(\"x\")\n    return [solve(x, (x - d) % 10 == 0) for d in digits]\n\n\ndef get_distinct_numbers_using_sympy_3(digits):\n    \"\"\"\n    Return a list of distinct numbers that can be formed using one or more of the digits.\n    \"\"\"\n    x = symbols(\"x\")\n    return [solve(x, (x - d) % 10 == 0) for d in digits]\n\n\ndigits = [2, 3, 5]\nprint(get_distinct_numbers(digits))\nprint(get_distinct_numbers_using_sympy(digits))\nprint(get_distinct_numbers_using_sympy_2(digits))\nprint(get_distinct_numbers_using_sympy_3(digits))"
  },
  {
    "example_id": 309,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c = 3, 4, 5\nresult = (3*a**2*b) / (5*a*c) * (10/6*c) / (a*b)\nprint(result)"
  },
  {
    "example_id": 310,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6188.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = symbols('a')\nb = symbols('b')\n\ndef combinations(n, k):\n    return math.factorial(n) // math.factorial(k) // math.factorial(n - k)\n\ndef solution(n, k):\n    return combinations(n, k)\n\nprint(solution(17, 5))"
  },
  {
    "example_id": 311,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.5"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "area = 0.5 * 5 * 5\nprint(area)"
  },
  {
    "example_id": 312,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 7\nprint(x)"
  },
  {
    "example_id": 313,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "ambulance_time = 20/40\nhelicopter_time = 1/1\nhelicopter_time += 3\nhelicopter_time += 3\n\nprint(helicopter_time - ambulance_time)"
  },
  {
    "example_id": 314,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x)"
  },
  {
    "example_id": 315,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "side = 6\naltitude = 6\narea = (altitude * side) / 2\nprint(area)"
  },
  {
    "example_id": 316,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "print(5**3 - (3**2-5)**3)"
  },
  {
    "example_id": 317,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# 10C2 = 45\nprint(45)"
  },
  {
    "example_id": 318,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "129.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "print(30 + 50 + 25 + 24)"
  },
  {
    "example_id": 319,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Find the greatest common divisor of 10 and 8\ngcd = math.gcd(10, 8)\n\n# Find the least common multiple of 10 and 8\nlcm = int(10 / gcd) * int(8 / gcd)\n\n# Find the answer\nanswer = lcm - 8\nprint(answer)"
  },
  {
    "example_id": 320,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\n\neq = (a + b + c + d) / 4 - 5\n\nans = solve(eq, a)\n\nprint(ans)"
  },
  {
    "example_id": 321,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(len(str(31/11111).split('.')[1]))"
  },
  {
    "example_id": 322,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "20.0",
      "30.0",
      "40.0",
      "50.0",
      "60.0",
      "70.0",
      "80.0",
      "90.0",
      "21.0",
      "42.0",
      "63.0",
      "84.0",
      "70.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# \na = 2\nb = 5\nc = 3\nd = 7\ne = 70\n\n# \nfor x in range(1, 100):\n    if (x % a == 0) and (x % b == 0):\n        print(f\"{x} is cool\")\n\n# \nfor y in range(1, 100):\n    if (y % c == 0) and (y % d == 0):\n        print(f\"{y} is cool\")\n\n# \nfor z in range(1, 100):\n    if (z % e == 0) and (z % (a * b) == 0):\n        print(f\"{z} is cool\")\n\n# \nfor z in range(1, 100):\n    if (z % e == 0) and (z % (c * d) == 0):\n        print(f\"{z} is cool\")"
  },
  {
    "example_id": 323,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "n = -10 // 5 - 3\nprint(n)"
  },
  {
    "example_id": 324,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "71.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "# Define the angles\na, b, c = symbols('a, b, c')\n\n# Define the ratio\nratio = [3, 5, 7]\n\n# Define the equation\neq = a * b * c\n\n# Solve for the angles\nfor p in itertools.combinations(ratio, 2):\n    eq = eq - p[0] * p[1]\n\n# Solve for the angle\nsol = solve(eq, a)\n\n# Print the solution\nprint(sol)"
  },
  {
    "example_id": 325,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0",
      "91.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# 14 is a factor of 34\n# 91 is a multiple of 7\nprint(14, 91)"
  },
  {
    "example_id": 326,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "perimeter = 2*(12+16)\nprint(perimeter)"
  },
  {
    "example_id": 327,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "print(180 - 50)"
  },
  {
    "example_id": 328,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "# Define variables\na, b = symbols('a,b')\n# Define equation\neq = a**3 + b**3\n# Define the range of a and b\nr = range(1, 1000)\n# Define the combinations\nc = combinations(r, 2)\n# Define the function\nf = lambda x: eq.subs(a, x[0]).subs(b, x[1])\n# Define the filter\nfilter = lambda x: f(x) == 0\n# Define the list comprehension\nlc = [x for x in c if filter(x)]\n# Define the length\nn = len(lc)\n# Print the length\nprint(n)"
  },
  {
    "example_id": 329,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# define angle and radius\nx = symbols('x')\nr = 2\n\n# solve for x\nsol = solve(x**2 + r**2 - r**2, x)\n\n# print solution\nprint(sol)"
  },
  {
    "example_id": 330,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Enrico's list\nenrico = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]\n# Marie's list\nmarie = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]\n\n# Calculate the intersection of the two lists\nintersection = list(set(enrico).intersection(marie))\n\n# Print the length of the intersection\nprint(len(intersection))"
  },
  {
    "example_id": 331,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1568.0"
    ],
    "annotated_answers": [
      "735.0"
    ],
    "solution": "room_area = 9 * 2 + 4 * 2 + 9 * 2 + 4 * 5\ncarpet_cost = 21.95 * room_area\npadding_cost = 2.55 * room_area\ntotal_cost = carpet_cost + padding_cost\nprint(f\"Total cost: {total_cost:.2f}\")"
  },
  {
    "example_id": 332,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "# Write a program that will sum the first 9 prime numbers\n# Hint: You can start with the first prime number (2) and use the formula (n + 1) to find the next prime number"
  },
  {
    "example_id": 333,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "total_muffins = 6 * 20 + 5 * 6\nprint(total_muffins)"
  },
  {
    "example_id": 334,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "298.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1 or n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_perfect_square(n):\n    return math.sqrt(n).is_integer()\n\n\ndef sum_primes(start, end):\n    return sum([n for n in range(start, end + 1) if is_prime(n) and is_perfect_square(n + 1)])\n\n\nprint(sum_primes(100, 200))"
  },
  {
    "example_id": 335,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_primes(n):\n    s = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            s += i\n    return s\n\ndef closest_integer(x):\n    return int(round(x))\n\ndef closest_prime(x):\n    n = closest_integer(x)\n    while not is_prime(n):\n        n += 1\n    return n\n\ndef closest_integer_to_power(x, n):\n    return closest_integer(x ** n)\n\ndef closest_prime_to_power(x, n):\n    return closest_prime(x ** n)\n\ndef problem():\n    x = 1 / 23\n    n = 1000\n    print(closest_integer_to_power(x, n))\n    print(closest_prime_to_power(x, n))\n\nproblem()"
  },
  {
    "example_id": 336,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "0.11"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Find the area of the small square\ns = 4\narea_small = s**2\n\n# Find the area of the large square\narea_large = 9*area_small\n\n# Find the ratio of the area of the small square to the area of the entire dart board\nratio = area_small/area_large\n\n# Print the result\nprint(f\"The ratio of the area of the small square to the area of the entire dart board is {ratio:.2f}\")"
  },
  {
    "example_id": 337,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "30.0"
    ],
    "annotated_answers": [
      "510.0"
    ],
    "solution": "x = 30\ny = 520\n\nfor i in range(x, y):\n    if i % 30 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 338,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "import math\n\ndef balls_in_a_bin(n):\n    return math.factorial(n) / (math.factorial(2) * math.factorial(n - 2))\n\nprint(balls_in_a_bin(20))"
  },
  {
    "example_id": 339,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "x = 100\ndouble_x = x * 2\ndouble_x_plus_200 = double_x + 200\nresult = double_x_plus_200 / 4 - 0.5 * x\nprint(result)"
  },
  {
    "example_id": 340,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "handshakes = 6*6\nprint(handshakes)"
  },
  {
    "example_id": 341,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "sandwiches = 9 * 8 / 2\nprint(sandwiches)"
  },
  {
    "example_id": 342,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "10.0",
      "-10.0",
      "20.0",
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Jenny's average on the first test\nJenny_1 = 78 + 10\n\n# Jenny's average on the second test\nJenny_2 = 78 - 10\n\n# Jenny's average on the third test\nJenny_3 = 78 + 20\n\n# Jenny's average on the fourth test\nJenny_4 = 78 + 20\n\n# Blake's average\nBlake = 78\n\n# Difference between Jenny's average and Blake's average\nprint(f\"{Jenny_1 - Blake:.2f}, {Jenny_2 - Blake:.2f}, {Jenny_3 - Blake:.2f}, {Jenny_4 - Blake:.2f}\")"
  },
  {
    "example_id": 343,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "a, b, c = symbols('a, b, c')\n\n# 4:2:1 ratio\n# 4:2 = 2:1\n\n# 77:2:1 = 38:1\n\n# 38:1 = 19:1\n\n# 19:1 = 9:1\n\n# 9:1 = 4:1\n\n# 4:1 = 2:1\n\n# 2:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:1\n\n# 1:1 = 1:"
  },
  {
    "example_id": 344,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "792.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Define the number of students who played both hockey and baseball\nn_both = 0\n\n# Define the number of students who played hockey\nn_hockey = 33\n\n# Define the number of students who played baseball\nn_baseball = 24\n\n# Define the number of students who did not play either\nn_none = 8\n\n# Define the total number of students surveyed\nn_total = n_hockey + n_baseball + n_none\n\n# Define the number of students who played both hockey and baseball\nn_both = n_hockey * n_baseball\n\n# Print the number of students who played both hockey and baseball\nprint(n_both)"
  },
  {
    "example_id": 345,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "walnuts = 9 * 3 / 6\nprint(walnuts)"
  },
  {
    "example_id": 346,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "angle = 20\nprint(angle)"
  },
  {
    "example_id": 347,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "111.0",
      "141.0",
      "171.0",
      "222.0",
      "252.0",
      "282.0",
      "303.0",
      "333.0",
      "363.0",
      "393.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "for i in range(100, 1000):\n    if str(i) == str(i)[::-1] and i % 3 == 0:\n        print(i)"
  },
  {
    "example_id": 348,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "quarters_per_foot = 8\nquarters_needed = quarters_per_foot * 12\nprint(quarters_needed)"
  },
  {
    "example_id": 349,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Variables\nx, y = symbols('x, y')\n\n\n# Equation\neq = (x + y - 17) * (x + y - 10)\n\n\n# Solve\nsolve(eq, x, y)"
  },
  {
    "example_id": 350,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# define the function\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# define the function\ndef sum_primes(n):\n    return sum(int(i) for i in range(2, n + 1) if is_prime(i))\n\n# define the function\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# define the function\ndef get_factors(n):\n    factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    factors.sort()\n    return factors\n\n# define the function\ndef get_perfect_cubes(n):\n    for i in range(1, n + 1):\n        if i ** 3 == n:\n            yield i\n\n# define the function\ndef get_perfect_cubes_less_than(n):\n    for i in get_perfect_cubes(n):\n        if i < n:\n            yield i\n\n# define the function\ndef get_perfect_cubes_less_than_2008():\n    return list(get_perfect_cubes_less_than(2008))\n\n# define the function\ndef get_perfect_cubes_less_than_2008_count():\n    return len(list(get_perfect_cubes_less_than(2008)))\n\n# define the function\ndef get_perfect_cubes_less_than_2008_sum():\n    return sum(list(get_perfect_cubes_less_than(2008)))\n\n# define the function\ndef get_perfect_cubes_less_than_2008_sum_primes():\n    return sum"
  },
  {
    "example_id": 351,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = symbols('n')\nsolve(-3*n + 3 > -11)\n\n\n\ndef sum_primes(n):\n    if n < 2:\n        return 0\n    prime_numbers = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return sum(prime_numbers)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nsum_primes(100)"
  },
  {
    "example_id": 352,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Set the decimal to 1000 digits\ndecimal = 1000\n\n# Set the number to be expressed as a decimal\nnumber = 4/15\n\n# Set the precision of the decimal\nprecision = decimal\n\n# Set the number of digits to the right of the decimal point\ndigits = precision\n\n# Convert the number to a string\nnumber_string = str(number)\n\n# Find the length of the number string\nnumber_string_length = len(number_string)\n\n# Check if the number is already a decimal\nif \".\" in number_string:\n    print(\"The number is already a decimal.\")\n\n# If the number is not a decimal, find the decimal\nelse:\n    # Find the number of digits to the right of the decimal point\n    digits = precision - number_string_length\n\n    # Convert the number to a decimal\n    number = float(number_string)\n\n    # Find the decimal\n    decimal = round(number, digits)\n\n    # Print the decimal\n    print(decimal)"
  },
  {
    "example_id": 353,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# \nn = 8\n\n\n# \ndef hug(n):\n    return n * (n - 1) / 2\n\n\n# \ndef hug_pairs(n):\n    hug_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            hug_count += 1\n    return hug_count\n\n\n# \ndef hugs_per_week(n):\n    return (hug_pairs(n) - (n - 1)) / 2\n\n\n# \ndef weeks_to_hug_everyone(n):\n    return int(hugs_per_week(n))\n\n\n# \nprint(weeks_to_hug_everyone(n))"
  },
  {
    "example_id": 354,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "14.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "A = 2\nB = 10\nx = A*2 + B\nprint(x)"
  },
  {
    "example_id": 355,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "233.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_primes(n):\n    return sum([int(i) for i in str(n)])\n\n\ndef find_8_digit_prime():\n    for i in itertools.combinations(range(10, 100), 2):\n        if is_prime(int(i[0] * 10 + i[1])) and sum_primes(int(i[0] * 10 + i[1])) == 8:\n            return int(i[0] * 10 + i[1])\n    return None\n\n\nprint(find_8_digit_prime())"
  },
  {
    "example_id": 356,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "5.0",
      "2.0",
      "7.0",
      "3.0",
      "11.0",
      "5.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "list = [2,3,5,7,11]\n\nfor i in list:\n    print(i, int(i/2))"
  },
  {
    "example_id": 357,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "a = 1313\nb = 1001\n\nprint(gcd(a, b))"
  },
  {
    "example_id": 358,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.9999999999999939"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((7/16)**111 * (16/7)**111)"
  },
  {
    "example_id": 359,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 13 - 5\nprint(k)"
  },
  {
    "example_id": 360,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "18.33"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Let's denote wallops with x\n# Let's denote ballops with y\n# Let's denote fallops with z\n\n# x = 5y\n# 3y = 11z\n# x = 110z\n# 5y = 110z\n# y = 22z\n# x = 110z\n# 6x = 110z\n# x = 110/6\n# x = 18\n\n# x = 110/6\n# x = 18\nprint(f\"{110/6:.2f}\")"
  },
  {
    "example_id": 361,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.1"
    ],
    "annotated_answers": [
      "24.1"
    ],
    "solution": "def median(numbers):\n    numbers = sorted(numbers)\n    if len(numbers) % 2 == 1:\n        return numbers[len(numbers) // 2]\n    else:\n        return (numbers[len(numbers) // 2] + numbers[len(numbers) // 2 - 1]) / 2\n\nprint(median([25, 24.3, 24.1, 23.8, 23.4]))"
  },
  {
    "example_id": 362,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.16666666666666666"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "area = 3 * 2\ntiles = area / 36\nprint(tiles)"
  },
  {
    "example_id": 363,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "80.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "# Define the perimeter of the octagon\nperimeter = 0\n\n# Loop over each side\nfor i in range(8):\n    # Add the length of the side\n    perimeter += 10\n\n# Print the perimeter\nprint(perimeter)"
  },
  {
    "example_id": 364,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Given that x is a multiple of 6 and x^2 < 200, find x\n# x must be odd\nx = symbols('x')\n# find the possible values of x\n# x must be odd\n# x must be a multiple of 6\n# find x where x^2 < 200\n# find x where x is odd and x is a multiple of 6\n# find x where x^2 < 200 and x is odd and x is a multiple of 6\n# find x where x^2 < 200 and x is odd and x is a multiple of 6 and x is not negative\n# find x where x^2 < 200 and x is odd and x is a multiple of 6 and x is not negative and x is not positive\n# find x where x^2 < 200 and x is odd and x is a multiple of 6 and x is not negative and x is not positive and x is not zero\n# find x where x^2 < 200 and x is odd and x is a multiple of 6 and x is not negative and x is not positive and x is not zero and x is not 6\n# find x where x^2 < 200 and x is odd and x is a multiple of 6 and x is not negative and x is not positive and x is not zero and x is not 6 and x is not 12\n# find x where x^2 < 200 and x is odd and x is a multiple of 6 and x is not negative and x is not positive and x is not zero and x is not 6 and x is not 12 and x is not 18\n# find x where x^2 < 200 and x is odd and x is a multiple of 6 and x is not negative and x is not positive and x is not zero and x is not 6 and x is not 12 and x is not 18 and x is not 24\n# find x where x^2 < 200 and x is odd and x is a multiple of 6 and x is not negative and x is not positive and x is not zero and x is not 6 and x is not 12 and x is not 18 and x is not"
  },
  {
    "example_id": 365,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "1.25"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "distance = math.sqrt((0.5 + 0.5)**2 + (0.75)**2)\nprint(f\"{distance:.2f}\")"
  },
  {
    "example_id": 366,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# define the area of the triangle\narea = 27\n\n\n# define the base of the triangle\nbase = 6\n\n\n# calculate the height of the triangle\nheight = math.sqrt((area / base)**2)\nprint(height)"
  },
  {
    "example_id": 367,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "162.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_primes(n):\n    return sum(i for i in range(2, n + 1) if is_prime(i))\n\n\ndef median(numbers):\n    numbers = sorted(numbers)\n    length = len(numbers)\n    if length % 2 == 0:\n        return (numbers[length // 2] + numbers[length // 2 - 1]) / 2\n    return numbers[length // 2]\n\n\ndef count_zeros(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 0:\n            count += 1\n        n //= 10\n    return count\n\n\ndef solution(n):\n    return sum(1 for i in range(99, n + 1) if count_zeros(i) == 1)\n\n\nprint(solution(999))"
  },
  {
    "example_id": 368,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "10.0",
      "15.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 15\na = 8\nb = 12\n\n# Calculate the number of chocolate chips\nchocolate_chips = (n * a) / b\n\n# Print the number of chocolate chips\nprint(f\"You will need {chocolate_chips} cups of chocolate chips to make {n} cookies.\")"
  },
  {
    "example_id": 369,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "294780.0"
    ],
    "annotated_answers": [
      "1020.0"
    ],
    "solution": "lcm = 51 * 68 * 85\nprint(lcm)"
  },
  {
    "example_id": 370,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "x = symbols('x')\nsol = solve(3*x + 2*(1 + x) - 17, x)\nprint(sol)"
  },
  {
    "example_id": 371,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "2013.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_primes(n):\n    sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            sum += i\n    return sum\n\n\ndef median(numbers):\n    numbers = sorted(numbers)\n    length = len(numbers)\n    if length % 2 == 0:\n        return (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        return numbers[length // 2]\n\n\ndef find_common_factor(a, b):\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            return i\n    return 1\n\n\ndef find_next_year_with_property(year):\n    while True:\n        if is_prime(int(str(year)[0:3])) and is_prime(int(str(year)[3:4])):\n            return year\n        year += 1\n\n\nfind_next_year_with_property(2007)"
  },
  {
    "example_id": 372,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "1.9190039753796957",
      "-134.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 4 * 5 / 8 ** 55 * 8 / 37 ** 55\nprint(x)"
  },
  {
    "example_id": 373,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# \nx = 180"
  },
  {
    "example_id": 374,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# \nsize = 16\n\n\n# \nside = 4\n\n\n# \ntotal = size * side\nprint(total)"
  },
  {
    "example_id": 375,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "def get_common_times(a, b):\n    return [i for i in range(0, 1440, a) if i % b == 0]\n\n\na = 5\nb = 2\n\ncommon_times = get_common_times(a, b)\n\nprint(len(common_times))"
  },
  {
    "example_id": 376,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "24.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "x = 2**20\ny = 2**21\nz = x + y\nprint(z/2**17)"
  },
  {
    "example_id": 377,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "33.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Number of cheese dishes\nc = 10\n\n# Number of cherry dishes\nh = 3 + 2*c\n\n# Total number of dishes\nn = c + h\n\nprint(f\"Total number of dishes = {n}\")"
  },
  {
    "example_id": 378,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "1500.0"
    ],
    "solution": "x = 500"
  },
  {
    "example_id": 379,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "height = 10 + (2 * 25)\nprint(height)"
  },
  {
    "example_id": 380,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "number_of_matches = 4"
  },
  {
    "example_id": 381,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "1000.0",
      "1001.0",
      "1002.0",
      "1003.0",
      "1004.0",
      "1005.0",
      "1006.0",
      "1007.0",
      "1008.0"
    ],
    "annotated_answers": [
      "5999.0"
    ],
    "solution": "# find four-digit numbers that are less than 8000 and greater than 2000\nfor i in range(1000, 8000):\n    if len(str(i)) == 4:\n        print(i)"
  },
  {
    "example_id": 382,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "7200.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "# the area of a square is equal to the length of a side squared\nlength = 2 * math.sqrt(3600)\nwidth = length / 2\nprint(f\"The original garden's area was {width * length} square feet.\")"
  },
  {
    "example_id": 383,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "15.64",
      "2.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "# Let's use the Pythagorean theorem to find the area of a square.\n# The formula for the area of a square is A = s^2, where s is the side length.\n# We know that the perimeter is 28, so we can set up an equation:\nperimeter = 28\n# Now we need to find the side length. We can use the Pythagorean theorem:\n# A^2 = s^2 + s^2\n# We know that the perimeter is 28, so we can set up an equation:\n# 28 = s^2 + s^2\n# Simplify the equation:\n# 28 = 2s^2\n# Divide both sides by 2:\n# 14 = s^2\n# Now we can take the square root of both sides:\n# s = \u00b1\u221a14\n# Now we can find the area of the square:\n# A = s^2\n# We know that the square root of 14 is 3.8984375, so we can plug that value into the formula:\n# A = 3.8984375^2\n# A = 15.640625\n# Now we can print the area of the square:\nprint(f\"The area of the square is {15.640625:.2f} cm^2\")"
  },
  {
    "example_id": 384,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "x = symbols(\"x\")\nsolve((x/3)+(x/4) - 14)"
  },
  {
    "example_id": 385,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "a = 6**3\nb = 3**6\n\ngcd(a, b)"
  },
  {
    "example_id": 386,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# 1^2^235423523\nprint(1**2**235423523)"
  },
  {
    "example_id": 387,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "108.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# a is the number\na = 9\n\n# b is the number\nb = 12\n\n# n is the number\nn = a * b\n\n# \nprint(f\"{n:.2f}\")"
  },
  {
    "example_id": 388,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# \nn = 30\n\n\n# \nred = n * 1/3\n\n\n# \nwhite = n - red\n\n\n# \nfour_door = n * 50/100\n\n\n# \ntwo_door = n - four_door\n\n\n# \ntwo_door_white = 8\n\n\n# \nfour_door_red = four_door * 1/3\n\n\n# \nprint(f\"{four_door_red} of the cars are 4-door and red.\")"
  },
  {
    "example_id": 389,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "def sum_primes(n):\n    # Sum all prime numbers up to n\n    s = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            s += i\n    return s\n\ndef is_prime(n):\n    # Check if n is prime\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef median(numbers):\n    # Find the median of a list of numbers\n    numbers = sorted(numbers)\n    length = len(numbers)\n    if length % 2 == 0:\n        return (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        return numbers[length // 2]\n\ndef gcd(a, b):\n    # Find the greatest common divisor of a and b\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    # Find the least common multiple of a and b\n    return a * b / gcd(a, b)\n\ndef combinations(iterable, r):\n    # combinations('ABCD', 2) --> AB AC AD BC BD CD\n    # combinations(range(4), 3) --> 012 013 023 123\n    pool = tuple(iterable)\n    n = len(pool)\n    if r > n:\n        return\n    indices = list(range(r))\n    yield tuple(pool[i] for i in indices)\n    while True:\n        for i in reversed(range(r)):\n            if indices[i]!= i + n - r:\n                break\n        else:\n            return\n        indices[i] += 1\n        for j in range(i+1, r):\n            indices[j] = indices[j-1] + 1\n        yield tuple(pool[i] for i in indices)"
  },
  {
    "example_id": 390,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1056.0",
      "1056.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "lcm = 22 * 48\ngcf = 22 * 48\nprint(lcm, gcf)"
  },
  {
    "example_id": 391,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "A1 = 25\nA2 = 49\nA3 = A1 + A2\nprint(A3)"
  },
  {
    "example_id": 392,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "42.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# Define variables\na = 136\nb = 19\nc = 13\nd = 18\ne = 11\nf = 52\ng = 46\nh = 41\n\n# Find median\nmedian = (a + b + c + d + e + f + g + h) / 8\n\n# Print median\nprint(median)"
  },
  {
    "example_id": 393,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "25.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Find the smallest integer n such that the enrollment will exceed the capacity in n years\nn = 1\nwhile True:\n    enrollment = 980 + 5 * n\n    if enrollment > 1100:\n        print(f\"The smallest integer n such that the enrollment will exceed the capacity in n years is {n}\")\n        break\n    n += 1"
  },
  {
    "example_id": 394,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "58.75"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# 300 USD = 450 GBP = 547.50 EUR\n# 1 pound = 1.64 USD\n# 1 euro = 1.32 USD\n\n# total GBP = 450\n# total EUR = 547.50\n\n# withdraw half in GBP = 450/2 = 225\n# withdraw half in EUR = 547.50/2 = 273.75\n\n# difference between GBP and EUR = 273.75 - 225 = 58.75\n\n# print(f\"{distance:.2f}\")\nprint(f\"{58.75:.2f}\")"
  },
  {
    "example_id": 395,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "average = 90\ntests = 6\nfinal = 2\nscore = average / tests\nprint(score)"
  },
  {
    "example_id": 396,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "87.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "print(609 / 7)"
  },
  {
    "example_id": 397,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "-49.0"
    ],
    "solution": "x, y = symbols('x y')\nsolve([2*x + 3*y - 4, y - 34], [x, y])"
  },
  {
    "example_id": 398,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "print(((1421 // 7 + 47) // 50) * 9)"
  },
  {
    "example_id": 399,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "11413.0",
      "31411.0",
      "11322.0",
      "31212.0",
      "21321.0",
      "11232.0",
      "16112.0",
      "23112.0",
      "11232.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def product_of_digits(n):\n    if n < 10:\n        return n\n    else:\n        return n % 10 * product_of_digits(n // 10)\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_primes(n):\n    sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            sum += i\n    return sum\n\ndef median(numbers):\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        return (numbers[length // 2] + numbers[length // 2 - 1]) / 2\n    else:\n        return numbers[length // 2]\n\ndef solve():\n    for i in range(100, 1000):\n        for j in range(100, 1000):\n            if product_of_digits(i * j) == 12:\n                print(f\"{i * j}\")\n\nsolve()"
  },
  {
    "example_id": 400,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "total = 18 + 13 + 5\nprint(total)"
  },
  {
    "example_id": 401,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 0\nwhile n < 10:\n    if (42789 * n) % 3 == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 402,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Set up symbols\nx = symbols('x')\ny = symbols('y')\n\n# Set up equations\neq1 = x + y\neq2 = 4*x + 5*y\n\n# Solve for x and y\nsol = solve((eq1, eq2), (x, y))\n\n# Print out the solution\nprint(sol)"
  },
  {
    "example_id": 403,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.677669529663685",
      "17.677669529663685"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from math import sqrt\n\nAB = 25\nAC = 25\nBD = AC / sqrt(2)\nDC = BD\nBC = 14\n\nprint(BD)\nprint(DC)"
  },
  {
    "example_id": 404,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4096.0",
      "511.0",
      "511.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# Define the number of different parts\neyebrows = 2\neyes = 1\nears = 2\nlips = 2\nshoes = 2\nhair = 3\n\n# Calculate the number of different combinations\nnum_combos = 2 ** (eyebrows + eyes + ears + lips + shoes + hair)\n\n# Calculate the number of combinations that do not have a hair part\nnum_no_hair = 2 ** (eyebrows + eyes + ears + lips + shoes) - 1\n\n# Calculate the number of different combinations that do not have hair\nnum_no_hair_combos = 2 ** (eyebrows + eyes + ears + lips + shoes) - 1\n\n# Calculate the number of different combinations that do not have hair\nnum_no_hair_combos = 2 ** (eyebrows + eyes + ears + lips + shoes) - 1\n\n# Print the number of different combinations\nprint(f\"Number of different combinations: {num_combos}\")\n\n# Print the number of combinations that do not have hair\nprint(f\"Number of combinations that do not have hair: {num_no_hair}\")\n\n# Print the number of different combinations that do not have hair\nprint(f\"Number of different combinations that do not have hair: {num_no_hair_combos}\")"
  },
  {
    "example_id": 405,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.6"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "n = 12\np = 0.2\nq = 0.3\n# Calculate 30% of the number\nm = n*q\nprint(f\"{m:.2f}\")"
  },
  {
    "example_id": 406,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.1428571428571"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 0.3\nb = 0.8\nc = 15\nx = symbols('x')\nsol = solve(a*x + b*c - x, x)\nprint(sol)"
  },
  {
    "example_id": 407,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "max_steps = 30 / 3\nprint(max_steps)"
  },
  {
    "example_id": 408,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# 8 \u00f7 2 \u00f7 2 + 6\nprint(8//2//2 + 6)"
  },
  {
    "example_id": 409,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "-2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Define the variables\na, m, b, c, n, d = symbols(\"a m b c n d\")\n\n# Define the equations\neq1 = (m - a)**2 + (n - b)**2 - 40\neq2 = (c - m)**2 + (d - n)**2 - 40\n\n# Solve the equations\nsol = solve([eq1, eq2], [m, n])\n\n# Print the solution\nprint(sol)"
  },
  {
    "example_id": 410,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.33201133143405"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "b = math.radians(39)\nc = math.radians(14)\n\nbpc = math.degrees(math.acos((math.cos(c) - math.cos(b) * math.cos(b)) / (math.sin(b) * math.sin(b))))\nprint(bpc)"
  },
  {
    "example_id": 411,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(317**3 + 8**3 - (2**(3**2) + 317**3))"
  },
  {
    "example_id": 412,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "225.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "number = 15\nprint(number**2)"
  },
  {
    "example_id": 413,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "num_items = 10\nnum_combinations = num_items * (num_items - 1) // 2\nprint(num_combinations)"
  },
  {
    "example_id": 414,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97969.0"
    ],
    "annotated_answers": [
      "97969.0"
    ],
    "solution": "x = symbols('x')\neq = sqrt(97969)\nprint(eq**2)"
  },
  {
    "example_id": 415,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "891.0"
    ],
    "annotated_answers": [
      "891.0"
    ],
    "solution": "x = 1000\ny = 11**2 - 1\nwhile True:\n    x += 11\n    if x > 11**2:\n        break\n    y = x - 1\nprint(f\"{x - y:.2f}\")"
  },
  {
    "example_id": 416,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "100.0",
      "99.0",
      "98.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "scores = [100, 100, 99, 98]\nmean = 95\nfor score in scores:\n    if score!= mean:\n        print(score)"
  },
  {
    "example_id": 417,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0",
      "32.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define the perimeters of the hexagon and the octagon\nperimeter_hexagon = 16 * math.sqrt(3)\nperimeter_octagon = 16 * math.sqrt(2)\n\n# Define the number of sides of the hexagon and the octagon\nnum_sides_hexagon = 6\nnum_sides_octagon = 8\n\n# Define the radius of the hexagon and the octagon\nradius_hexagon = 16 / math.sqrt(3)\nradius_octagon = 16 / math.sqrt(2)\n\n# Define the circumradius of the hexagon and the octagon\ncircumradius_hexagon = radius_hexagon * math.sqrt(3)\ncircumradius_octagon = radius_octagon * math.sqrt(2)\n\n# Define the side length of the hexagon and the octagon\nside_length_hexagon = circumradius_hexagon * 2\nside_length_octagon = circumradius_octagon * 2\n\n# Print the side length of the hexagon and the octagon\nprint(f\"The side length of the hexagon is {side_length_hexagon:.2f} cm\")\nprint(f\"The side length of the octagon is {side_length_octagon:.2f} cm\")"
  },
  {
    "example_id": 418,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "260.0"
    ],
    "annotated_answers": [
      "260.0"
    ],
    "solution": "# Calculate the number of different plates\n# There are 26 letters and 10 digits\n# The number of plates is 26 * 10 = 260\nprint(260)"
  },
  {
    "example_id": 419,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "89.0",
      "100.0",
      "11.0",
      "89.0",
      "979.0",
      "13.0",
      "87.0",
      "100.0",
      "13.0"
    ],
    "annotated_answers": [
      "291.0"
    ],
    "solution": "prime_numbers = []\nfor i in range(10, 100):\n    if math.gcd(i, 100) == 1:\n        prime_numbers.append(i)\n\nfor p1 in prime_numbers:\n    for p2 in prime_numbers:\n        if p1 + p2 == 100:\n            print(f\"{p1} + {p2} = {p1 + p2}\")\n            print(f\"{p1} * {p2} = {p1 * p2}\")\n            break"
  },
  {
    "example_id": 420,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Let's assume the smaller number is x\n# The sum of the two numbers is 15\n# The larger number is 15 - x\n# The smaller number is x\n\n# We know that 4x is 60 less than twice the larger number\n# 4x = 2(15-x) - 60\n# 4x = 30 - 2x\n# 4x = 30 - 2(15-x)\n# 4x = 30 - 30 + 2x\n# 4x = 2x\n# x = 10\n\n# The larger number is 15 - x\n# The larger number is 15 - 10 = 5\nprint(5)"
  },
  {
    "example_id": 421,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "bill_time = 400 / 50\nsam_time = 400 / 40\nprint(sam_time - bill_time)"
  },
  {
    "example_id": 422,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "201.06192982974676",
      "50.26548245743669",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "radius = 8\narea = math.pi * radius ** 2\n\nprint(area)\nprint(area - 48 * math.pi)\n\nradius = radius - (area - 48 * math.pi) / (math.pi * radius)\nprint(radius)\n\nradius = int(radius)\nprint(radius)"
  },
  {
    "example_id": 423,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x, y = symbols('x y')\n\ndef f(x, y):\n    return [x+2, y+3]\n\ndef g(x, y):\n    return [x+2, y-2]\n\ndef h(x, y):\n    return [x-2, y-2]\n\n# Find the length of the side AB\nAB = sqrt(sum([(x-y)**2 for x, y in combinations(solve(f(x, y) + g(x, y) + h(x, y), (x, y)), 2)]))\n\nprint(f\"{AB:.2f}\")"
  },
  {
    "example_id": 424,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "for i in range(1, 42):\n    if (42 % i) == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 425,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = -1\nprint(x)"
  },
  {
    "example_id": 426,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "area = (12*20)/2\nprint(area)"
  },
  {
    "example_id": 427,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# define variables\nn = 3\nm = 5\n\n# calculate the number of ways\nnum_ways = 0\nfor a, b, c in combinations(range(1, m+1), 3):\n    num_ways += 1\nprint(num_ways)"
  },
  {
    "example_id": 428,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.6"
    ],
    "annotated_answers": [
      "0.6"
    ],
    "solution": "print(round(4/7, 1))"
  },
  {
    "example_id": 429,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "6.0",
      "4.0",
      "2.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "total_factors = 20\nprimes = [2, 3, 5, 7, 11, 13, 17, 19]\nfactors_count = [0, 0, 0, 0, 0, 0, 0, 0]\nfor factor in range(1, total_factors + 1):\n    for prime in primes:\n        if factor % prime == 0:\n            factors_count[primes.index(prime)] += 1\n\nprint(factors_count)"
  },
  {
    "example_id": 430,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3720.0"
    ],
    "annotated_answers": [
      "3720.0"
    ],
    "solution": "print(3.72*1000)"
  },
  {
    "example_id": 431,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "6.0",
      "12.0",
      "3.0",
      "4.0",
      "12.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 12\nfor i in range(1, 10):\n    for j in range(i+1, 10):\n        if (i*j) == n:\n            print(f\"{i} and {j} are the factors of {n}\")\n            break"
  },
  {
    "example_id": 432,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "blue, green = symbols(\"blue green\")\n\n# Find the total number of marbles\ntotal = 60\n\n# Find the number of green marbles\ngreen = 3*total//4\n\n# Find the number of blue marbles\nblue = total - green\n\nprint(f\"The number of blue marbles is {blue}\")"
  },
  {
    "example_id": 433,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 2\nx_squared = x**2\nprint(x_squared)"
  },
  {
    "example_id": 434,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.5"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "n = 45\nm = 10\np = 40\n\n# Using the formula:\n# N = (n + m) / 2\n\nN = (n + m) / 2\nprint(f\"{N:.2f}\")"
  },
  {
    "example_id": 435,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0",
      "20.0",
      "10.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Define the variables\nx = symbols('x')\ny = symbols('y')\nz = symbols('z')\nw = symbols('w')\nv = symbols('v')\n\n# Define the equations\neq1 = x + y + z + w + v - 5*10.6\neq2 = x - 10\neq3 = y - 4\neq4 = z - 5\neq5 = w - 20\n\n# Solve the equations\nsol = solve((eq1, eq2, eq3, eq4, eq5), [x, y, z, w, v])\n\n# Print the solution\nprint(sol)"
  },
  {
    "example_id": 436,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 117 * 119\na, b = symbols('a, b')\neq = (n - a * b)\nsol = solve(eq, a, b)\n\n# print(sol)\n# print(list(sol))\n# print(len(list(sol)))\n\n# Find the number of distinct prime factors\nnum_distinct = 0\nfor i in sol:\n    # print(i)\n    if gcd(i[0], i[1]) == 1:\n        num_distinct += 1\n\nprint(num_distinct)"
  },
  {
    "example_id": 437,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "157.0"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "# define a function to check if a number is a perfect square\ndef is_perfect_square(n):\n    return int(sqrt(n))**2 == n\n\n# define a function to count the number of digits in a number\ndef count_digits(n):\n    return len(str(n))\n\n# define a function to calculate the number of digits in the sequence\ndef count_digits_in_sequence(n):\n    count = 0\n    for i in range(1, n+1):\n        if is_perfect_square(i):\n            count += count_digits(i)\n    return count\n\n# test the function\nprint(count_digits_in_sequence(2500))"
  },
  {
    "example_id": 438,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3105.0",
      "3105.0",
      "3105.0",
      "3105.0",
      "3105.0",
      "3105.0",
      "3105.0",
      "3105.0",
      "3105.0",
      "3105.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "n = 3105\nfor p in range(int(sqrt(n)), 1, -1):\n    if n % p == 0:\n        factors = [p, n // p]\n        print(f\"The greatest prime factor of {n} is {factors[0]}\")\n        break\n    else:\n        print(f\"The greatest prime factor of {n} is {n}\")"
  },
  {
    "example_id": 439,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "area = 12\nprint(area)"
  },
  {
    "example_id": 440,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "print(182+21-32+9)"
  },
  {
    "example_id": 441,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "5.0",
      "2.0",
      "-5.0",
      "2.0",
      "5.0",
      "2.07"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "x = symbols('x')\n\nsol = solve(x**2 + 10*x - 25, x)\n\nprint(sol)\n\nprint(f\"{sol[0]:.2f}\")"
  },
  {
    "example_id": 442,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-40.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "not_brought = 42 - 36 - 26 - 20\nprint(not_brought)"
  },
  {
    "example_id": 443,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "465120.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 20\nk = 5\n\n# number of ways to choose k marbles from n marbles\n# with replacement\nnum_choices = math.factorial(n) // math.factorial(n - k)\n\n# probability of choosing a blue marble at random\nprob_blue = k / n\n\n# number of blue marbles needed to achieve probability of 1/2\nnum_blue_needed = num_choices * prob_blue\n\n# round to nearest integer\nnum_blue_needed = int(round(num_blue_needed))\n\nprint(f\"{num_blue_needed} blue marbles needed to achieve probability of 1/2\")"
  },
  {
    "example_id": 444,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.5"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "pins = 66\npiles = 2\npins_per_pile = pins / piles\nhalf = pins_per_pile / 2\nthird = half / 3\nbrother = third\njohn = pins - brother\nprint(f\"John had {john} pins left.\")"
  },
  {
    "example_id": 445,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "264.0"
    ],
    "solution": "# define variables\nn = 100\nm = 10\n\n# define function\ndef is_positive_two_digit_integer(x):\n    return x > 9 and x < 100\n\n# define function\ndef has_three_times_digit(x):\n    x_str = str(x)\n    if len(x_str)!= 2:\n        return False\n    first_digit = int(x_str[0])\n    second_digit = int(x_str[1])\n    if first_digit * 3 == second_digit:\n        return True\n    return False\n\n# find sum\nsum = 0\nfor x in range(n, m):\n    if is_positive_two_digit_integer(x) and has_three_times_digit(x):\n        sum += x\nprint(sum)"
  },
  {
    "example_id": 446,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(0)"
  },
  {
    "example_id": 447,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "y = (8 - 2) - 21\nprint(y)"
  },
  {
    "example_id": 448,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "print(24)"
  },
  {
    "example_id": 449,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5208333333333334"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(25/4/12)"
  },
  {
    "example_id": 450,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "def convert(number):\n    return number * 36\n\nprint(convert(3/4))"
  },
  {
    "example_id": 451,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1080.0"
    ],
    "annotated_answers": [
      "1080.0"
    ],
    "solution": "time = 0.30 * 3600\nprint(time)"
  },
  {
    "example_id": 452,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "distance = 19 + 16 + (-3) + (-4)\nprint(distance)"
  },
  {
    "example_id": 453,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "time = 17/1.7\nprint(time)"
  },
  {
    "example_id": 454,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = symbols('n')\nsol = solve(n/12 - n)\n\nans = sum(n for n in sol if n.is_integer)\n\nprint(ans)"
  },
  {
    "example_id": 455,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "70.0",
      "70.0",
      "70.0",
      "70.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "# Create a list of 8 symbols\ns = symbols('s0:8')\n\n# Solve for the medals\nsolve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] == 100)\n\n# Calculate the number of ways to award the medals\nsolve(s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] == 100, gcd(s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7]) == 1)\n\n# Print the number of ways to award the medals\nprint(len(list(combinations(range(8), 4))))\n\n# Print the number of ways to award the medals using the gcd\nprint(len(list(combinations(range(8), 4))))\n\n# Print the number of ways to award the medals using the gcd and the math.sqrt function\nprint(len(list(combinations(range(8), 4))))\n\n# Print the number of ways to award the medals using the gcd and the math.sqrt function and the itertools module\nprint(len(list(combinations(range(8), 4))))"
  },
  {
    "example_id": 456,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "# Define angles\nx = symbols('x')\n\n# Define the sum of the angles in the heptagon\nsum_angles = (x + 2*x + 2*x + 2*x + 2*x + x)\n\n# Define the sum of the interior angles\ninterior_angles = (x + 4) + (x - 2) + (x - 2) + (x - 2) + (x + 2) + (x + 2) + (x + 2)\n\n# Define the difference between the two sums\ndiff = sum_angles - interior_angles\n\n# Solve for the largest interior angle\nlargest_angle = solve(diff, x)\n\n# Print the largest interior angle\nprint(f\"The largest interior angle is {largest_angle[0]} degrees\")"
  },
  {
    "example_id": 457,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "# Create variables\nx = symbols('x')\n\n# Create a list of equations\nequations = [3*x + 10, x + 12]\n\n# Create a list of perimeter\nperimeter = 76\n\n# Create a list of area\narea = 0\n\n# Use the gcd function to find the common factors\ngcds = [gcd(a, b) for a, b in combinations(equations, 2)]\n\n# Create a list of factors\nfactors = [a*b for a, b in combinations(gcds, 2)]\n\n# Create a list of divisors\ndivisors = [a/b for a, b in combinations(factors, 2)]\n\n# Solve the equations\nsol = solve(equations, x)\n\n# Create a list of areas\nareas = [a*b for a, b in combinations(sol, 2)]\n\n# Create a list of perimeters\nperimeters = [a*b for a, b in combinations(sol, 2)]\n\n# Use the gcd function to find the common factors\ngcd_per = [gcd(a, b) for a, b in combinations(perimeters, 2)]\n\n# Create a list of factors\nfactors_per = [a*b for a, b in combinations(gcd_per, 2)]\n\n# Create a list of divisors\ndivisors_per = [a/b for a, b in combinations(factors_per, 2)]\n\n# Create a list of areas\nareas_per = [a*b for a, b in combinations(sol, 2)]\n\n# Create a list of perimeters\nperimeters_per = [a*b for a, b in combinations(sol, 2)]\n\n# Print the area of the rectangle\nprint(f\"The area of the rectangle is {area:.2f} square feet.\")"
  },
  {
    "example_id": 458,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "print(9000/200)"
  },
  {
    "example_id": 459,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 42\nx = (1/a)**4 * 2 * a**4 + a**(2+1-3)\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 460,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "starting_cones, noon_cones, end_cones = 72, 72 / 3, 72 / 3 / 3\nprint(end_cones)"
  },
  {
    "example_id": 461,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2"
    ],
    "annotated_answers": [
      "2560.0"
    ],
    "solution": "a = 10\nb = 2\nt = 9\n\ndef f(x):\n    return a*b**x\n\ndef g(x):\n    return a*b**(x+1)\n\ndef h(x):\n    return (f(x) - g(x))/b**x\n\ndef solve_h(x):\n    return solve(h(x), x)\n\ndef get_answer(x):\n    return [b**i for i in solve_h(x)]\n\nprint(get_answer(t))"
  },
  {
    "example_id": 462,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "192.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "print(2**(2**3) - (2**2)**3)"
  },
  {
    "example_id": 463,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "103.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def get_rate_of_increase(degrees, time):\n    return (degrees / time)\n\ndef get_temperature_after_time(degrees, time, rate_of_increase):\n    return degrees + (rate_of_increase * time)\n\ndef get_temperature_after_time_2(degrees, time, rate_of_increase):\n    return degrees + (rate_of_increase * time) + (rate_of_increase * time)\n\ndef get_temperature_after_time_3(degrees, time, rate_of_increase):\n    return degrees + (rate_of_increase * time) + (rate_of_increase * time) + (rate_of_increase * time)\n\n# initial temperature\ndegrees = 100\n\n# time of increase\ntime = 15\n\n# rate of increase\nrate_of_increase = get_rate_of_increase(1.5, time)\n\n# print the temperature after 2 hours\nprint(get_temperature_after_time_2(degrees, time, rate_of_increase))"
  },
  {
    "example_id": 464,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 35\ng = 13\nm = int(n / g)\nf = n - m*g\nb = int(f / (g + 1))\nprint(b)"
  },
  {
    "example_id": 465,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1341.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "n = 1341\nfor i in range(1, 100):\n    if n == sum(range(i, i+3)):\n        print(f\"The largest number is {i+2}\")\n        break\nelse:\n    print(\"No consecutive numbers sum up to 1341\")"
  },
  {
    "example_id": 466,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.22",
      "1.0",
      "5.0",
      "2.0",
      "5.0",
      "3.0",
      "5.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Define variables\nn = 10\n\n# Define the number of combinations\ncombinations = int(math.factorial(n) / (math.factorial(2) * math.factorial(n-2)))\n\n# Define the number of guards\nnum_guards = 2\n\n# Define the number of nights\nnum_nights = 10\n\n# Define the number of nights each guard gets to sleep\nnum_nights_guard_gets_to_sleep = num_nights / combinations\n\n# Define the number of nights each meerkat gets to sleep\nnum_nights_meerkat_gets_to_sleep = num_nights / n\n\n# Print the result\nprint(f\"Each meerkat gets to sleep {num_nights_meerkat_gets_to_sleep:.2f} nights.\")\nprint(f\"Each guard gets to sleep {num_nights_guard_gets_to_sleep:.2f} nights.\")\n\n# Print the number of nights each guard stands guard\nfor i in range(combinations):\n    guard_nights = 0\n    for j in range(n):\n        if j % 2 == i % 2:\n            guard_nights += 1\n    print(f\"Guard {i+1} stands guard for {guard_nights} nights.\")"
  },
  {
    "example_id": 467,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-29400.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# number of pots\nn = 600\n\n# number of red balloons\nr = n//4\n\n# number of blue balloons\nb = n//6\n\n# number of yellow balloons\ny = n//10\n\n# number of red and blue balloons\nrb = r*b\n\n# number of blue and yellow balloons\nby = b*y\n\n# number of red and yellow balloons\nry = r*y\n\n# number of red, blue, and yellow balloons\nrby = rb + by + ry\n\n# total number of pots with three different balloons\nprint(n - rby)"
  },
  {
    "example_id": 468,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# find the three consecutive integers\na, b, c = symbols('a b c')\n\n# find the product of the three integers\nproduct = a*b*c\n\n# find the mean of the three integers\nmean = (a+b+c)/3\n\n# find the largest of the three consecutive integers\nlargest = (product/mean)**(1/2)\n\n# find the solution\nsolutions = solve(largest, (a, b, c))\n\n# print the largest of the three consecutive integers\nprint(f\"The largest of the three consecutive integers is: {solutions[0][0]:.2f}\")"
  },
  {
    "example_id": 469,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\n\n# Find the area of the rectangle\nrect_area = 2 * x\n\n# Find the diagonal of the rectangle\ndiag = 5 * sqrt(5)\n\n# Find the width of the rectangle\nwidth = diag / 2\n\n# Find the length of the rectangle\nlength = diag / sqrt(2)\n\n# Find the equation of the rectangle\nrect_eq = (rect_area, x, y)\n\n# Find the equation of the diagonal\ndiag_eq = (diag, x, y)\n\n# Find the equation of the width\nwidth_eq = (width, x, y)\n\n# Find the equation of the length\nlength_eq = (length, x, y)\n\n# Find the solutions of the rectangle equation\nrect_sol = solve(rect_eq, x, y)\n\n# Find the solutions of the diagonal equation\ndiag_sol = solve(diag_eq, x, y)\n\n# Find the solutions of the width equation\nwidth_sol = solve(width_eq, x, y)\n\n# Find the solutions of the length equation\nlength_sol = solve(length_eq, x, y)\n\n# Print the solutions\nprint(rect_sol)\nprint(diag_sol)\nprint(width_sol)\nprint(length_sol)"
  },
  {
    "example_id": 470,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "outfits = 5 * 6 * 8\nprint(outfits)"
  },
  {
    "example_id": 471,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "witches = 6\nsorcerers = 10\nhandshakes = witches * sorcerers + witches * (sorcerers - 1)\nprint(handshakes)"
  },
  {
    "example_id": 472,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "1001.0"
    ],
    "solution": "def is_multiple(n, m):\n    return n % m == 0\n\n\ndef is_positive(n):\n    return n > 0\n\n\ndef is_four_digit(n):\n    return len(str(n)) == 4\n\n\ndef least_positive_four_digit_multiple_of_7(n):\n    for i in range(n, n + 10000):\n        if is_multiple(i, 7) and is_positive(i) and is_four_digit(i):\n            return i\n    return None\n\n\nprint(least_positive_four_digit_multiple_of_7(7))"
  },
  {
    "example_id": 473,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\nz = symbols('z')\n\nsol = solve((x + y + z - 20)**2 - 100, x, y, z)\n\nprint(f\"{sol:.2f}\")"
  },
  {
    "example_id": 474,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49770.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "def find_sum(digits, num_digits):\n    # Create a list of all possible two-digit numbers\n    nums = [i for i in range(100, 1000)]\n\n    # Create a list of all possible two-digit numbers where one digit is 4 times the other\n    possible_nums = []\n    for num in nums:\n        for digit in digits:\n            if num % 10 == digit * 4:\n                possible_nums.append(num)\n                break\n    return sum(possible_nums)\n\n# Find the sum of all positive two-digit numbers where one digit is 4 times the other\ndigits = [2, 5, 6, 8, 9]\nnum_digits = 2\nsum_nums = find_sum(digits, num_digits)\nprint(sum_nums)"
  },
  {
    "example_id": 475,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def find_bad_workers(good_workers, time_to_paint):\n    bad_workers = (time_to_paint // good_workers) * 3\n    return bad_workers\n\ngood_workers = 3\ntime_to_paint = 3\nbad_workers = find_bad_workers(good_workers, time_to_paint)\nprint(f\"{bad_workers}\")"
  },
  {
    "example_id": 476,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "picture = 2\nquilt = 2 * picture\nprint(quilt)"
  },
  {
    "example_id": 477,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "2.0",
      "3.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "5937.0"
    ],
    "solution": "time = 3\ntotal = 15832\nrate = total/time\nprint(rate)"
  },
  {
    "example_id": 478,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "scoops = [1, 2, 3, 4]\n\ndef scoops_stack(scoops):\n    for scoop in scoops:\n        if scoop == 1:\n            continue\n        elif scoop == 4:\n            break\n        else:\n            return False\n    return True\n\nstacks = []\nfor i in range(4):\n    for scoops in combinations(scoops, i+1):\n        if scoops_stack(scoops):\n            stacks.append(scoops)\n\nprint(len(stacks))"
  },
  {
    "example_id": 479,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "125.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "125.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# x, y, z = symbols('x y z')\nx, y, z = symbols('x y z')\n\n# expr = x**3 + y**3 + z**3 + 5**3\nexpr = x**3 + y**3 + z**3 + 5**3\n\n# result = solve(expr, x, y, z)\nresult = solve(expr, x, y, z)\n\n# print(result)\nprint(result)"
  },
  {
    "example_id": 480,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(1)"
  },
  {
    "example_id": 481,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "distance = 4 / 0.5\nprint(distance)"
  },
  {
    "example_id": 482,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "51.0",
      "3.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# define variables\nm = 1000000000\nr = 40000\n\n# calculate circumference\ncirc = 2 * math.pi * r\n\n# calculate distance\ndist = m / circ\n\n# calculate trips\ntrips = dist / 1000\n\nprint(f\"{trips:.2f}\")"
  },
  {
    "example_id": 483,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "0.0",
      "2.0",
      "3.0",
      "-3.0",
      "2.0",
      "2.0",
      "-4.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "pennies = symbols('pennies')\nrectangles = [\n    (pennies, 3),\n    (pennies + 2, 3),\n    (pennies + 2, 2)\n]\n\nfor rectangle in rectangles:\n    print(f\"{rectangle[0]} x {rectangle[1]}\")\n    for solution in solve(rectangle[0] * rectangle[1] - pennies, pennies):\n        print(f\"{solution:.2f}\")"
  },
  {
    "example_id": 484,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Symbols\ncopper = symbols('copper')\nzinc = symbols('zinc')\n\n# Copper is 80% of total\ncopper_ratio = 0.8\nzinc_ratio = 0.2\n\n# Copper is 48 ounces\ncopper_value = 48\n\n# Total is 100 ounces\ntotal_value = 100\n\n# Zinc is 20% of total\nzinc_value = copper_value * zinc_ratio\n\n# Copper is 80% of total\ncopper_value = total_value * copper_ratio\n\n# Zinc is 20% of total\nzinc_value = total_value * zinc_ratio\n\n# Print Zinc\nprint(f\"Zinc: {zinc_value:.2f} ounces\")"
  },
  {
    "example_id": 485,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(92 - 45 / (3 * 5) - 5**2)"
  },
  {
    "example_id": 486,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-624.9999999999998"
    ],
    "annotated_answers": [
      "5.5"
    ],
    "solution": "# Define variables\nl = symbols('l')\n\n# Define equations\neq1 = l**2 - 8.5**2\neq2 = l**2 - 11**2\n\n# Solve equations\nsol = solve([eq1, eq2], l)\n\n# Print solution\nprint(f\"{sol[0]:.1f}\")"
  },
  {
    "example_id": 487,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.8419037337712"
    ],
    "annotated_answers": [
      "-89.0"
    ],
    "solution": "# Find angle PAB\nangle = 180 - 105 - 30\nprint(f\"{angle:.0f}\")\n\n# Find angle ACB\nangle = 105 - 60\nprint(f\"{angle:.0f}\")\n\n# Find M and N\nM, N = symbols('M N')\n\n# Find the solution to the equation\nsol = solve((angle + N)**2 + angle**2 - 90**2, M + N)\n\n# Print the value of M + N\nprint(f\"{sol[0]:.0f}\")"
  },
  {
    "example_id": 488,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print((5*3)//4)"
  },
  {
    "example_id": 489,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "coins = [0.25, 0.05, 0.01]\n\nsums = []\n\nfor i in range(len(coins)):\n    for j in range(i, len(coins)):\n        sums.append(coins[i] + coins[j])\n\nsums = set(sums)\n\nprint(len(sums))"
  },
  {
    "example_id": 490,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "868.7"
    ],
    "annotated_answers": [
      "868.8"
    ],
    "solution": "def round_to_tenth(number):\n    return round(number, 1)\n\ndef add_numbers(numbers):\n    total = 0\n    for num in numbers:\n        total += round_to_tenth(num)\n    return total\n\nnumbers = [543.55, 25.23, 299.98]\nprint(add_numbers(numbers))"
  },
  {
    "example_id": 491,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "507.0"
    ],
    "annotated_answers": [
      "507.0"
    ],
    "solution": "for i in range(500, 5000):\n    if i % 13 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 492,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "729.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "print(9**3)"
  },
  {
    "example_id": 493,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(2**5 - 5**2)"
  },
  {
    "example_id": 494,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "import math\n\ndef area(a,b,c):\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(area(3,4,5))"
  },
  {
    "example_id": 495,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 3"
  },
  {
    "example_id": 496,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "9.0",
      "25.0",
      "49.0",
      "81.0",
      "121.0",
      "169.0",
      "225.0",
      "289.0",
      "361.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# find odd perfect squares in range\ndef odd_perfect_squares(n):\n    for i in range(n):\n        i = i**2\n        if i % 2!= 0:\n            yield i\n\n# find odd perfect squares between 5 and 211\nodd_perfect_squares_between_5_and_211 = list(odd_perfect_squares(211 - 5))\nprint(odd_perfect_squares_between_5_and_211)"
  },
  {
    "example_id": 497,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(3*3 + 3*(3+3) - 3**3)"
  },
  {
    "example_id": 498,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def min_sum_of_squares(n):\n    def sum_of_squares(terms):\n        return sum(term**2 for term in terms)\n\n    terms = []\n    for i in range(1, int(n**0.5)):\n        terms.append(i**2)\n        if sum_of_squares(terms) > n:\n            break\n\n    for combination in combinations(terms, len(terms)-1):\n        if sum_of_squares(combination) == n:\n            return len(combination)\n\n    return -1\n\nprint(min_sum_of_squares(49))"
  },
  {
    "example_id": 499,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-16.7"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# area of rectangle PQRS = 24\narea_pqrs = 24\n\n# area of quadrilateral PTRS\narea_ptr = area_pqrs - (5.8*1.1)**2\n\nprint(f\"{area_ptr:.2f}\")"
  },
  {
    "example_id": 500,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "1250.0"
    ],
    "solution": "# 1992 value in dollars\nvalue = 1200\n# exchange rate\nexchange = 1.50\n# 1,000,000 lire\nmillion = 1000000\n\n# solve for exchange rate\nexchange_rate = value/million\nprint(f\"{exchange_rate:.2f}\")"
  },
  {
    "example_id": 501,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.21"
    ],
    "annotated_answers": [
      "1.21"
    ],
    "solution": "a = 1.33\nb = 0.78\nc = 1.328\nd = 0.12\nprint(max(a, b, c, d) - min(a, b, c, d))"
  },
  {
    "example_id": 502,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "111.27"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "width = 0.4\narea = 100\n# outer strip\narea_outer = area - 2 * width * width\n# inner strip\narea_inner = width * width\n# calculate the distance between the two strips\ndistance = area_outer - area_inner\n# calculate the length of the outer strip\nlength = math.sqrt(distance**2 + width**2)\n# calculate the width of the outer strip\nwidth_outer = math.sqrt(distance**2 + (length / 2)**2)\nprint(f\"{width_outer:.2f}\")"
  },
  {
    "example_id": 503,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.07432208994708994"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "x = symbols('x')\neq1 = 2*x + 7\neq2 = 81\nsol = solve([eq1-eq2, x])\nprint(f\"The value of x is {sol[x]}.\")"
  },
  {
    "example_id": 504,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "a = 7\nb = 13\nn = (a*b) // 2\nprint(n)"
  },
  {
    "example_id": 505,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "seniors = 600\njuniors = 450\ntotal_cartons = 1500\ndays = 5\n\ntotal_seniors = seniors * days\ntotal_juniors = juniors * days\nsenior_milk_per_day = total_juniors / total_cartons\ntotal_senior_milk = senior_milk_per_day * total_cartons\n\nprint(total_senior_milk)"
  },
  {
    "example_id": 506,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.010964912280701754"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "time = (1/24) - (1/19)\nprint(time)"
  },
  {
    "example_id": 507,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "a = 48\nb = int(240 / a)\nprint(b)"
  },
  {
    "example_id": 508,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "area = 60 / 2\nprint(area)"
  },
  {
    "example_id": 509,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2100.0"
    ],
    "annotated_answers": [
      "2100.0"
    ],
    "solution": "distance = math.sqrt(5*10*14*21*15*20)\nprint(distance)"
  },
  {
    "example_id": 510,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Define variables\nQ1 = symbols('q1')\nQ2 = symbols('q2')\nQ3 = symbols('q3')\n\n# Define answer combinations\nanswer_combinations = list(combinations(range(2), 3))\n\n# Define total number of answer combinations\ntotal_combinations = len(answer_combinations)\n\n# Define number of possible combinations\npossible_combinations = 0\n\n# Iterate over each answer combination\nfor combination in answer_combinations:\n    # If any of the answers are no, possible combinations are 1\n    if combination[0] == 0 or combination[1] == 0 or combination[2] == 0:\n        possible_combinations += 1\n    # If all of the answers are no, possible combinations are 0\n    elif combination[0] == 0 and combination[1] == 0 and combination[2] == 0:\n        possible_combinations += 0\n    # If all of the answers are yes, possible combinations are 1\n    elif combination[0] == 1 and combination[1] == 1 and combination[2] == 1:\n        possible_combinations += 1\n    # If any of the answers are yes, possible combinations are 2\n    elif combination[0] == 1 or combination[1] == 1 or combination[2] == 1:\n        possible_combinations += 2\n\n# Print total number of combinations\nprint(f\"Total number of combinations: {total_combinations}\")\n\n# Print number of possible combinations\nprint(f\"Number of possible combinations: {possible_combinations}\")"
  },
  {
    "example_id": 511,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "9.0",
      "10.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 15\ny = 5\nz = 6\n\n# Use the following equation:\n# a + b + c = x\n# a + b = y\n# a + c = z\n\n# The first equation is the sum of three variables\n# The second equation is the sum of two variables\n# The third equation is the sum of two variables\n\n# Find a, b, and c\na, b, c = symbols('a b c')\n\n# Solve the system of equations\nsol = solve([a + b + c - x, a + b - y, a + c - z], [a, b, c])\n\n# Print the solution\nprint(sol)\n\n# Find the GCD of a, b, and c\ng = gcd(a, b, c)\n\n# Print the GCD\nprint(g)\n\n# Find the LCM of a, b, and c\nlcm = (a * b * c) / g\n\n# Print the LCM\nprint(lcm)\n\n# Find the GCD of a and b\ng1 = gcd(a, b)\n\n# Print the GCD\nprint(g1)\n\n# Find the GCD of b and c\ng2 = gcd(b, c)\n\n# Print the GCD\nprint(g2)\n\n# Find the GCD of a and c\ng3 = gcd(a, c)\n\n# Print the GCD\nprint(g3)\n\n# Find the LCM of a and b\nlcm1 = (a * b) / g1\n\n# Print the LCM\nprint(lcm1)\n\n# Find the LCM of b and c\nlcm2 = (b * c) / g2\n\n# Print the LCM\nprint(lcm2)\n\n# Find the LCM of a and c\nlcm3 = (a * c) / g3\n\n# Print the LCM\nprint(lcm3)"
  },
  {
    "example_id": 512,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7004.0"
    ],
    "solution": "a, b = symbols('a b')\neq = (3*11*13*21) - (2005+b)\nsolve(eq, b)"
  },
  {
    "example_id": 513,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-20.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# 1. Define variables\nhour = 8\nminute = 0\n\n# 2. Calculate the degree measure of the smaller angle\nangle = (minute / 60) * 360 - (hour / 12) * 30\n\n# 3. Print the answer\nprint(f\"The degree measure of the smaller angle is {angle}\")"
  },
  {
    "example_id": 514,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "quart_to_pint = 2\ngallon_to_quart = 4\nmilk_gallons = 2.5\n\npints_in_milk_gallons = gallon_to_quart * gallon_to_quart * quart_to_pint * milk_gallons\n\nprint(f\"{pints_in_milk_gallons:.2f}\")"
  },
  {
    "example_id": 515,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "78.54",
      "100.0",
      "100.0",
      "21.46"
    ],
    "annotated_answers": [
      "54000.0"
    ],
    "solution": "import math\n\ndef area_of_circle(radius):\n    return math.pi * radius ** 2\n\ndef area_of_square(side):\n    return side ** 2\n\ndef area_of_rectangle(length, width):\n    return length * width\n\ndef area_not_watered(radius, side):\n    return area_of_square(side) - area_of_circle(radius)\n\nradius = 5\nside = 10\n\narea_not_watered_square = area_of_square(side)\narea_not_watered_circle = area_of_circle(radius)\narea_not_watered_rectangle = area_of_rectangle(side, side)\n\nprint(f\"Area of circle: {area_not_watered_circle:.3f}\")\nprint(f\"Area of square: {area_not_watered_square:.3f}\")\nprint(f\"Area of rectangle: {area_not_watered_rectangle:.3f}\")\nprint(f\"Area not watered: {area_not_watered(radius, side):.3f}\")"
  },
  {
    "example_id": 516,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "rands = 24\nwands = 4\nfands = 8\n\n# Find the least common multiple (lcm) of wands, rands and fands\nlcm = (wands * rands * fands) / gcd(wands * rands * fands, rands)\n\n# Find the number of wands that are equivalent to 5 fands\nfive_fands = lcm / fands\nfive_wands = five_fands * wands / rands\nprint(f\"{five_wands:.0f}\")"
  },
  {
    "example_id": 517,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "6.0",
      "13.0",
      "26.0",
      "39.0",
      "78.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "for i in range(2, 79):\n    if 78 % i == 0:\n        print(i)"
  },
  {
    "example_id": 518,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(((100**0.5) - (36**0.5))**2)"
  },
  {
    "example_id": 519,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "width = 9 * 10/6\nprint(width)"
  },
  {
    "example_id": 520,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "print(15 + 8**2 - 3)"
  },
  {
    "example_id": 521,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "print(9/2)"
  },
  {
    "example_id": 522,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-49.0",
      "2.0",
      "7.0",
      "77.0",
      "2.0",
      "-7.0",
      "77.0",
      "2.0",
      "49.0",
      "2.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "x = symbols('x')\ny = solve(x**2 + 49*x - 343, x)\nprint(y)"
  },
  {
    "example_id": 523,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "111.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "count = 0\nfor i in range(9, 1000, 9):\n    count += 1\nprint(count)"
  },
  {
    "example_id": 524,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "smallest = 21 - 4*4\nprint(smallest)"
  },
  {
    "example_id": 525,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "r = 24/3 + 5\nprint(r)"
  },
  {
    "example_id": 526,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# create a function to simplify the expression\ndef simplify(x):\n    return math.sqrt(28 + math.sqrt(1296))\n\n# use the simplify function to simplify the expression\nprint(f\"{simplify(0):.2f}\")"
  },
  {
    "example_id": 527,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 12+1):\n    if i % 1 == 0 and i % 2 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0:\n        sum += 1\nprint(sum)"
  },
  {
    "example_id": 528,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2520.0"
    ],
    "annotated_answers": [
      "2520.0"
    ],
    "solution": "def least_common_multiple(numbers):\n    \"Find the least common multiple of a list of numbers.\"\n    lcm = 1\n    for number in numbers:\n        lcm = lcm * number / gcd(lcm, number)\n    return lcm\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(least_common_multiple(numbers))"
  },
  {
    "example_id": 529,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "250000.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "dolphin_rate = 8\nswimmer_rate = 2\ndistance = 400\n\n# Calculate the time it takes for the swimmer to complete the race\nswimmer_time = distance / swimmer_rate\n\n# Calculate the time it takes for the dolphin to complete the race\ndolphin_time = distance / dolphin_rate\n\n# Calculate the time it takes for the dolphin to cross the finish line\ndolphin_cross_time = dolphin_time + 1\n\n# Calculate the time it takes for the swimmer to cross the finish line\nswimmer_cross_time = swimmer_time + 1\n\n# Calculate the difference in time between the swimmer and the dolphin\ndifference = swimmer_cross_time - dolphin_cross_time\n\n# Calculate the distance the swimmer is from the finish line\ndistance_from_finish = distance - difference\n\n# Calculate the distance the swimmer is from the finish line in meters\ndistance_from_finish_meters = distance_from_finish * 1000\n\nprint(f\"{distance_from_finish_meters:.2f}\")"
  },
  {
    "example_id": 530,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0025"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "glow_price = (1 + (0.25/100)) * 1.00\nprint(glow_price)"
  },
  {
    "example_id": 531,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "handshakes = 22 * 20 // 2\nprint(handshakes)"
  },
  {
    "example_id": 532,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "556.0"
    ],
    "annotated_answers": [
      "1251.0"
    ],
    "solution": "num_students = 2/3 * 834\nprint(num_students)"
  },
  {
    "example_id": 533,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "9.0",
      "1.0",
      "8.0",
      "2.0",
      "7.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "for A in range(0,10):\n    for B in range(0,10):\n        if (25*A + 25*B) % 9 == 0:\n            print(A, B)"
  },
  {
    "example_id": 534,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "6.0",
      "8.0",
      "3.0",
      "6.0",
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "divisible_by_3 = [2, 4, 6, 8]\nnumbers = [2, 3, 4, 5, 6, 8, 9]\nfor num in numbers:\n    if num % 3 == 0:\n        divisible_by_3.append(num)\nprint(divisible_by_3)"
  },
  {
    "example_id": 535,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2006.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "length = 2008 - 3 + 1\nprint(length)"
  },
  {
    "example_id": 536,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.999030908264091"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Declare variables\nx = symbols('x')\nn = 2007\n\n# Calculate the 2007th digit to the right of the decimal point\ndigit = solve(x**n - 1/7, x)[0]\n\n# Print the result\nprint(digit)"
  },
  {
    "example_id": 537,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "5.0",
      "7.0",
      "11.0",
      "13.0",
      "17.0",
      "19.0",
      "23.0",
      "29.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Sieve of Eratosthenes\n\ndef sieve(n):\n    # Create a boolean array \"prime[0..n]\" and\n    # initialize all entries it as true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n    # Print all prime numbers\n    for p in range(2, n):\n        if prime[p]:\n            print(p)\n\n# Driver program to test above function\nsieve(100)"
  },
  {
    "example_id": 538,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "answer = 0\nfor i in range(1, 100):\n    if i % 3 == 0 and i % 4 == 0:\n        answer += 1\nprint(answer)"
  },
  {
    "example_id": 539,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2011.0",
      "2010.0",
      "2009.0",
      "2008.0",
      "2007.0",
      "2006.0",
      "2005.0",
      "2004.0",
      "2003.0",
      "2002.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = symbols(\"x\")\n\nsum = 0\nfor i in range(1, 2012):\n    sum += x**i\n\nprint(sum)"
  },
  {
    "example_id": 540,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "20.0",
      "30.0",
      "40.0",
      "50.0",
      "60.0",
      "70.0",
      "80.0",
      "90.0",
      "100.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "# 0 is not an even integer, so we start from 2\nfor i in range(2, 500, 2):\n    if i * 5 < 500:\n        print(i * 5)"
  },
  {
    "example_id": 541,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0",
      "117.0",
      "126.0",
      "135.0",
      "144.0",
      "153.0",
      "162.0",
      "171.0",
      "180.0",
      "189.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "def is_divisible(n):\n    return n % 9 == 0\n\ndef is_3_digit(n):\n    return len(str(n)) == 3\n\nfor i in range(100, 1000):\n    if is_divisible(i) and is_3_digit(i):\n        print(i)"
  },
  {
    "example_id": 542,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "print(8)"
  },
  {
    "example_id": 543,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "answer = 17 / 40 * 160\nprint(answer)"
  },
  {
    "example_id": 544,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "cones_sold = 32 * 3/4\nprint(cones_sold)"
  },
  {
    "example_id": 545,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "98.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "a, b = symbols('a b')\n\n# Create a list of all possible values for a and b\nall_values = list(combinations(range(1, 100), 2))\n\n# Find the largest possible value of b\nlargest_value = max(all_values, key=lambda x: gcd(x[0], x[1]))\n\n# Print the largest possible value of b\nprint(largest_value[1])"
  },
  {
    "example_id": 546,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1032.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "n = 109\nexponents = []\nfor k in range(1, n):\n    if math.factorial(k) % 3 == 0:\n        exponents.append(k)\n\n\n#print(exponents)\nprint(f\"{exponents[-1]}\")"
  },
  {
    "example_id": 547,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "143.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "def least_common_multiple(x, y):\n    return x * y // gcd(x, y)\n\n# Find least common multiple of 9, 12, and 15\nlcm = least_common_multiple(9, 12) * least_common_multiple(12, 15)\n\n# Find the difference between the LCM and the minimum of the three numbers\ndiff = lcm - min(9, 12, 15)\n\n# Find the number of days before all three students report to the principal on the same day\ndays = diff // 15\n\nprint(days)"
  },
  {
    "example_id": 548,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 99\nb = 100\n\n# find the greatest common factor\ndef gcf(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcf(b % a, a)\n\nprint(gcf(a, b))"
  },
  {
    "example_id": 549,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "94.0",
      "6.000000000000001",
      "0.06000000000000001",
      "0.94",
      "0.94",
      "0.06000000000000001",
      "0.06000000000000001",
      "0.94",
      "0.06000000000000001",
      "0.94",
      "0.06000000000000001"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "# Define number of households\nn = 100\n\n# Define number of days per week that households eat dinner together\ndays = [7, 5, 6, 1, 4, 0]\n\n# Define percent of households that eat dinner together at least once a week\npercent = [0.4, 0.3, 0.2, 0.1, 0.1, 0.1]\n\n# Define number of households that eat dinner together at least once a week\nnum_households = sum(days[i] * percent[i] for i in range(6))\n\n# Define number of households that do not eat dinner together at all\nnum_households_no_dinner = n - num_households\n\n# Define number of households that eat dinner together at least once a week\nprint(f\"{num_households_no_dinner}\")\n\n# Define number of households that do not eat dinner together at all\nprint(f\"{num_households}\")\n\n# Define number of households that eat dinner together at least once a week\nprint(f\"{num_households/n}\")\n\n# Define number of households that do not eat dinner together at all\nprint(f\"{num_households_no_dinner/n}\")\n\n# Define number of households that eat dinner together at least once a week\nprint(f\"{num_households_no_dinner/n}\")\n\n# Define number of households that do not eat dinner together at all\nprint(f\"{num_households/n}\")\n\n# Define number of households that eat dinner together at least once a week\nprint(f\"{num_households/n}\")\n\n# Define number of households that do not eat dinner together at all\nprint(f\"{num_households_no_dinner/n}\")\n\n# Define number of households that eat dinner together at least once a week\nprint(f\"{num_households/n}\")\n\n# Define number of households that do not eat dinner together at all\nprint(f\"{num_households_no_dinner/n}\")\n\n# Define number of households that eat dinner together at least once a week\nprint(f\"{num_households/n}\")\n\n# Define number of"
  },
  {
    "example_id": 550,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.9250245035569946",
      "0.9250245035569946",
      "0.9250245035569946",
      "0.9250245035569946",
      "0.9250245035569946",
      "0.9250245035569946",
      "0.9250245035569946",
      "0.9250245035569946",
      "0.9250245035569946"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "# angles\na,b,c = symbols('a b c')\n\n# trisectors\nP,Q = symbols('P Q')\n\n# points of intersection\nx = (P+Q)/2\ny = (P-Q)/2\n\n# equations of trisectors\neq1 = (a+b-c)*x - (a+b+c)*y == 0\neq2 = (a-b+c)*x - (a-b-c)*y == 0\neq3 = (a+b+c)*x - (a-b-c)*y == 0\n\n# solve for x and y\nsol = solve([eq1,eq2,eq3],[x,y])\n\n# print solution\nprint(sol)\n\n# calculate angle BPC\nBPC = (39 + 14) * math.pi / 180\nprint(BPC)\n\n# calculate angle PQB\nPQB = (39 + 14) * math.pi / 180\nprint(PQB)\n\n# calculate angle CQP\nCQP = (39 + 14) * math.pi / 180\nprint(CQP)\n\n# calculate angle ABC\nABC = (39 + 14) * math.pi / 180\nprint(ABC)\n\n# calculate angle PBC\nPBC = (39 + 14) * math.pi / 180\nprint(PBC)\n\n# calculate angle QCA\nQCA = (39 + 14) * math.pi / 180\nprint(QCA)\n\n# calculate angle AQP\nAQP = (39 + 14) * math.pi / 180\nprint(AQP)\n\n# calculate angle BQC\nBQC = (39 + 14) * math.pi / 180\nprint(BQC)\n\n# calculate angle CQB\nCQB = (39 + 14) * math.pi / 180\nprint(CQB)\n\n# calculate angle APQ\nAPQ = (39 + 14)"
  },
  {
    "example_id": 551,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "from math import factorial\n\ndef arrange_books(n):\n    return factorial(n) / (factorial(n - 4) * factorial(4))\n\nprint(arrange_books(4))"
  },
  {
    "example_id": 552,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "if x in [1, 2, 3, 4, 5, 6, 7, 8]:\n    x_new = [1, 2, 3, 4, 5, 6, 7]\n    mean_new = sum(x_new) / 7\n    print(mean_new)"
  },
  {
    "example_id": 553,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def get_values(expression):\n    \"\"\"\n    Get all possible values from an expression by inserting parentheses\n    :param expression:\n    :return:\n    \"\"\"\n    # Initialize all possible values\n    values = set()\n\n    # Check if expression is valid\n    if '+' not in expression and '*' not in expression:\n        return {expression}\n\n    # Get all possible values for each expression in the expression\n    for i, char in enumerate(expression):\n        if char == '+':\n            # Get all possible values from the expression before the '+'\n            values.update(get_values(expression[:i]))\n\n            # Get all possible values from the expression after the '+'\n            values.update(get_values(expression[i + 1:]))\n\n    # Return all possible values\n    return values\n\n\n# Get all possible values from the expression\nvalues = get_values('2*3*4*5+1')\n\n# Print all possible values\nprint(values)"
  },
  {
    "example_id": 554,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "area = 120\ndiagonal = 10\nperimeter = 4 * area / diagonal\nprint(perimeter)"
  },
  {
    "example_id": 555,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "0.0",
      "6.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "#Answer the questions yes or no\nyes = 1\nno = 0\n\n#Answer the questions\n#Is 2/3x equivalent to 2x/3?\nprint(yes)\n#Is 1-h/2h equivalent to h-1/2h?\nprint(yes)\n#Is -u-u^2 equivalent to -u-u^2?\nprint(yes)\n#Is -3-y equivalent to -3+y?\nprint(yes)\n#Is j/2 equivalent to 1/2j?\nprint(yes)\n#Is x+y+z equivalent to y+x+z?\nprint(no)\n\n#Add up the numbers corresponding to the questions for which the answer is yes\ntotal = 0\nfor i in range(6):\n    if(yes == 1):\n        total += 1\nprint(total)"
  },
  {
    "example_id": 556,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "680.0"
    ],
    "solution": "# Define the variables\nn = 160\np = 3/8\nq = 1 - p\n\n# Solve the equation\nx = symbols('x')\nsolve_for_x = solve(x*p + (1-x)*q, x)\n\n# Print the result\nprint(f\"{solve_for_x:.2f}\")"
  },
  {
    "example_id": 557,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# create a variable for the perimeter\nperimeter = 0\n\n# create a variable for the area\narea = 9\n\n# create a list of all possible combinations of points\npoints = list(combinations(range(4), 2))\n\n# loop through each combination\nfor point in points:\n\n    # calculate the length of each side\n    a = abs(point[0] - point[1])\n    b = abs(point[0] - 3 - point[1])\n    c = abs(3 - point[0] - point[1])\n    d = abs(3 - point[0] - 3 - point[1])\n\n    # calculate the area of the triangle\n    s = (a + b + c + d) / 2\n    area_triangle = math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d))\n\n    # calculate the perimeter of the triangle\n    perimeter_triangle = a + b + c + d\n\n    # calculate the area of the square\n    square_area = area_triangle * 4\n\n    # check if the area of the triangle is equal to the area of the square\n    if area_triangle == square_area:\n\n        # if it is, calculate the perimeter of the square\n        perimeter = perimeter_triangle\n\n# print the perimeter\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 558,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def greatest_and_least(numbers):\n    greatest = max(numbers)\n    least = min(numbers)\n    return greatest - least\n\nprint(greatest_and_least([3/7, 4/3, 11/8, 6/16]))"
  },
  {
    "example_id": 559,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "x = symbols(\"x\")\nf = 7 - 4*x\ng = 15\nh = solve(f,x)\nj = 8*h[0] + 2\nprint(j)"
  },
  {
    "example_id": 560,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Number of test\nn = 3\n# Calculate average\navg = 91\n# calculate the difference between the last test score and the average\ndiff = 98 - avg\n# calculate the square of the difference\ndiff_sq = diff**2\n# calculate the sum of the squares of the test scores\nsum_sq = 0\nfor i in range(1, n+1):\n    sum_sq += (i - avg)**2\n# calculate the gcd\ngcd_diff = gcd(diff_sq, sum_sq)\n# Calculate the number of tests\nn_tests = int(sqrt(sum_sq/gcd_diff))\nprint(f\"{n_tests}\")"
  },
  {
    "example_id": 561,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "502.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "for a, b in combinations(range(1, 1000), 2):\n    if a * b == 1000:\n        if not a % 10 and not b % 10:\n            continue\n        else:\n            print(a + b)\n            break"
  },
  {
    "example_id": 562,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "54.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2\ny = 5\nx_values = range(2, 54, x)\nprint(x_values)"
  },
  {
    "example_id": 563,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Find the length of the sides of the square\nside = 4\n\n# Find the area of the square\narea = side**2\n\n# Find the area of the gray piece\ngray_area = 16 - area\n\n# Print the area of the gray piece\nprint(f\"The area of the gray piece is {gray_area} square inches\")"
  },
  {
    "example_id": 564,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# 5C2 = 10\nprint(math.factorial(5) // (math.factorial(2) * math.factorial(3)))"
  },
  {
    "example_id": 565,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "235.62"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "# Solve for the area\nradius = 5\narea = 3 * math.pi * radius**2\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 566,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "285.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "# length of the trestle\nl = 112 + 172\n\n# height of the higher cliff\nh = 112\n\n# width of the gorge\nw = 80\n\n# distance from the higher cliff to the lower\nd = 172 - 112\n\n# solve for x\nx = (3/4) * l\n\n# calculate the distance from the higher cliff to the train\nz = x + h\n\n# calculate the distance from the train to the bottom of the gorge\nz_b = z - (w/2)\n\n# print the answer\nprint(f\"{z_b:.2f}\")"
  },
  {
    "example_id": 567,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 55 / 5 - 3\nprint(x)"
  },
  {
    "example_id": 568,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "time = 2\ndimples = 300\nminutes = dimples / (time * 60)\nprint(f\"{minutes:.2f}\")"
  },
  {
    "example_id": 569,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = 8\nprint(x)"
  },
  {
    "example_id": 570,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "37.5"
    ],
    "annotated_answers": [
      "37.5"
    ],
    "solution": "sweatshirt = 67.94 - 2*15.22\nprint(sweatshirt)"
  },
  {
    "example_id": 571,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "import math\n\n# angle 1 = 50 degrees\nangle_1 = 50\n\n# angle 2 = 180 - angle 1 = 130 degrees\nangle_2 = 180 - angle_1\n\nprint(angle_2)"
  },
  {
    "example_id": 572,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "128.0"
    ],
    "annotated_answers": [
      "480.0"
    ],
    "solution": "# Calculate the area of the stairway\ndef area(a, b):\n    return a * b\n\n# Create a list of all possible combinations of riser and tread heights\nrisers = [8, 16, 24]\ntreads = [10, 20, 30]\ncombos = list(combinations(risers, 2)) + list(combinations(treads, 2))\n\n# Iterate through each combination\nfor combo in combos:\n    # Calculate the area of the stairway\n    stair_area = area(*combo)\n    # Check if the area is greater than 100\n    if stair_area > 100:\n        # Print the area\n        print(f\"The area of the stairway is {stair_area:.2f} square inches.\")\n        # Break out of the loop\n        break"
  },
  {
    "example_id": 573,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6",
      "1.66666666666667"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\n\n# Solve for Mary's age\nsolve(x/y - 3/5, x)\n\n# Solve for Alice's age\nsolve(x/y - 3/5, y)\n\n# Find Alice's age\na = solve(x/y - 3/5, x)\nb = solve(x/y - 3/5, y)\nprint(f\"Alice's age: {a[0]}\")\n\n# Find Mary's age\nprint(f\"Mary's age: {b[0]}\")"
  },
  {
    "example_id": 574,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# Variables\nn = 5\nm = 5\n\n# Equations\nf_outfits = [x + y for x, y in combinations(range(n), 2)]\nf_models = [x + y for x, y in combinations(range(m), 2)]\n\n# Functions\ndef show(outfits, models):\n    return sum(outfits) - len(outfits) + len(models) - len(set(models))\n\n# Solution\nprint(show(f_outfits, f_models))"
  },
  {
    "example_id": 575,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "digits = [2, 4, 6, 7]\n\n# Find all the possible combinations of the given digits\ncombinations = list(itertools.combinations(digits, 2))\n\n# Find all the possible integers made up of the given digits\nintegers = []\nfor combination in combinations:\n    if combination[0] * 10 + combination[1] in digits:\n        integers.append(combination[0] * 10 + combination[1])\n    elif combination[1] * 10 + combination[0] in digits:\n        integers.append(combination[1] * 10 + combination[0])\n\n# Calculate the GCD of all the possible integers\ngcd_list = []\nfor integer in integers:\n    gcd_list.append(gcd(integer, 100))\n\n# Print the result\nprint(len(integers))"
  },
  {
    "example_id": 576,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "length = 101 - 25\nprint(length)"
  },
  {
    "example_id": 577,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# Create a list of all possible two letter code words\n# using the letters A and B\ncode_words = ['AA', 'AB', 'BB', 'BA']\n\n# Create a list of all possible three letter code words\n# using the letters A, B, and C\ncode_words_3 = ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']\n\n# Calculate the difference between the two lists\ndifference = len(code_words_3) - len(code_words)\n\n# Print the solution\nprint(f\"There are {difference} different three-letter code words that can be formed using the letters A, B, and C.\")"
  },
  {
    "example_id": 578,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.75"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = symbols(\"x\")\n\n# 105 = x + (x+1) + (x+2) + (x+3) + (x+4)\neq1 = x + x + 1 + 2 + 3 + 4 - 105\n\n# find x\nsol = solve(eq1, x)\n\n# median\nmed = sum(sol) / len(sol)\n\n# mean\nmean = sum(sol) / (len(sol) + 1)\n\n# median - mean\nprint(f\"{med - mean:.2f}\")"
  },
  {
    "example_id": 579,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols(\"x\")\n\n# 3x + 2 + 3(1 + x) = 23\neq = 3*x + 2 + 3*(1 + x) - 23\n\n# Solve for x\nsol = solve(eq, x)\n\n# Print solution\nprint(f\"x = {sol[0]}\")"
  },
  {
    "example_id": 580,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "# perimeter of triangle PQS\n# 2(r + p - q)\n\nr, p, q, s = symbols('r p q s')\nperimeter = 2 * (r + p - q)\nprint(perimeter)\n\n# perimeter of triangle PQS\n# 2(r + p - q)\n\nr, p, q, s = symbols('r p q s')\nperimeter = 2 * (r + p - q)\nprint(perimeter)"
  },
  {
    "example_id": 581,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.66666666666667"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "ink_value = 56 / 3 * 4\nprint(ink_value)"
  },
  {
    "example_id": 582,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "angle_M = 180 - 10\nprint(angle_M)"
  },
  {
    "example_id": 583,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "yaps = 3 * 5\ndaps = 7 * 4\nbaps = yaps * 4\n\n# daps = 42 baps\ndaps = 42\n\nprint(f\"{daps:.2f}\")"
  },
  {
    "example_id": 584,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = (29-5)/3\nprint(x)"
  },
  {
    "example_id": 585,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3969.0"
    ],
    "annotated_answers": [
      "-3969.0"
    ],
    "solution": "number = 63 * 63\nprint(number)"
  },
  {
    "example_id": 586,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "# Define variables\nx = symbols('x')\ny = symbols('y')\nz = symbols('z')\n\n# Define equations\neq1 = x**2 + y**2 + z**2 - 100\neq2 = x**2 + y**2 - 100\neq3 = x**2 + z**2 - 100\n\n# Find solution\nsol = solve([eq1, eq2, eq3], [x, y, z])\n\n# Find the measure of angle PQR\nmeasure = sqrt(sol[0][0]**2 + sol[0][1]**2)\nprint(f\"{measure:.2f}\")"
  },
  {
    "example_id": 587,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "161.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "# Define the variables\ng = 8\nh = 184\n\n# Define the function\ndef garden(g, h):\n    return g * h\n\n# Solve the equation\ndef solution(garden, h):\n    return (garden - h) / g\n\n# Print the solution\nprint(solution(garden(g, h), h))"
  },
  {
    "example_id": 588,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "print(3**4 - 5*8)"
  },
  {
    "example_id": 589,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "students_not_scored = 700 - 90 * 700 / 100\nprint(students_not_scored)"
  },
  {
    "example_id": 590,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def sum_frac(a, b):\n    return a / b + a / (b + 1)\n\na, b = symbols('a b')\nx = solve(sum_frac(a, b) - 0.20, a)\nprint(x)"
  },
  {
    "example_id": 591,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# number of coins for each denomination\nn = 1.20\nd = 0.10\nq = 0.25\n\n# total coins for each denomination\nn_total = n // 0.05\nd_total = d // 0.10\nq_total = q // 0.25\n\n# total number of coins\ntotal = n_total + d_total + q_total\n\nprint(f\"{total:.2f}\")"
  },
  {
    "example_id": 592,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(6*8)"
  },
  {
    "example_id": 593,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "127.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# find the smallest integer that satisfies the condition\ndef smallest_integer(n):\n    for i in range(n, n+1000):\n        if i % 2!= 0 and i % 5!= 0:\n            return i\n    return -1\n\n# find the smallest integer that satisfies the condition\nsmallest = smallest_integer(125)\n\n# print the result\nprint(smallest)"
  },
  {
    "example_id": 594,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6287000.0"
    ],
    "annotated_answers": [
      "6290000.0"
    ],
    "solution": "print(round(6287215, -3))"
  },
  {
    "example_id": 595,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "# Find the number of elements in the list\nn = len([x for x in range(2, 81, 3) if x % 3 == 2])\nprint(n)"
  },
  {
    "example_id": 596,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43.2"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "dresses = 72 / 5 * 3\nprint(dresses)"
  },
  {
    "example_id": 597,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def factors(n):\n    return [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]\n\ndef get_nums(nums):\n    nums = [int(i) for i in nums]\n    return nums\n\ndef get_list(nums):\n    return [i for i in nums if i > 0]\n\ndef solve(nums):\n    for num in nums:\n        if num == 20:\n            return 21\n        factors_list = get_list(factors(num))\n        for i in range(1, len(factors_list)):\n            for j in range(i, len(factors_list)):\n                if gcd(factors_list[i], factors_list[j]) == 1:\n                    if factors_list[i] + factors_list[j] == num:\n                        return nums.index(num) + 1\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    result = solve(nums)\n    print(f\"The maximum number of total spins before the game is over is: {result}\")\n\nmain()"
  },
  {
    "example_id": 598,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "average_speed = 15 / 2.5\nprint(average_speed)"
  },
  {
    "example_id": 599,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "a = symbols('a')\nb = symbols('b')\nc = symbols('c')\nd = symbols('d')\n\nsolutions = solve([a*b, c*d], [a, b, c, d])\n\nprint(solutions)\n\ngcd_value = gcd(solutions[0][0], solutions[0][1])\n\nprint(gcd_value)"
  },
  {
    "example_id": 600,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "1093.0"
    ],
    "solution": "# create a list of data\ndata = [51, 52, 53, 54, 55, 56, 57]\n\n# use the list to create a dictionary\ndata_dict = dict(zip(data, [1] * len(data)))\n\n# find the median\nmedian = sum(data) / len(data)\n\n# find the mode\nmode = data_dict[max(data_dict.keys(), key=data_dict.get)]\n\n# sum the median and mode\nprint(f\"{median + mode:.2f}\")"
  },
  {
    "example_id": 601,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(4 / 4/9)"
  },
  {
    "example_id": 602,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "20.0",
      "101.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "# list of first 20 positive integers\nlist_of_integers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n# product of first 20 positive integers\nproduct = 1\nfor i in list_of_integers:\n    product *= i\n\n# find smallest positive integer greater than 1 that is relatively prime to product\nfor i in range(2, product):\n    if math.gcd(i, product) == 1:\n        print(f\"The smallest positive integer greater than 1 and relatively prime to the product of the first 20 positive integers is: {i}\")\n        break"
  },
  {
    "example_id": 603,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "print(round(26 + 52, -1))"
  },
  {
    "example_id": 604,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print((1-(1**11))**2)"
  },
  {
    "example_id": 605,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "import math\n\na = 60\nb = 60\nc = 120\n\nprint(c)"
  },
  {
    "example_id": 606,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Variables\nleft_right_handed_boys = 4 * (36 / 4)\nleft_right_handed_girls = 2 * (36 / 4)\nhalf_left_handed_girls = 36 / 4\ntotal_students = 36\n\n# Equations\nright_handed_boys = left_right_handed_boys + (total_students - left_right_handed_boys)\nleft_handed_girls = left_right_handed_girls + (total_students - left_right_handed_girls)\n\n# print(f\"{right_handed_boys:.0f}\")\nprint(f\"{left_handed_girls:.0f}\")"
  },
  {
    "example_id": 607,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "# Number of students taking history\nhistory = 106\n# Number of students taking science\nscience = 109\n# Number of students taking both\nboth = 85\n\n# Number of students in the senior class\nseniors = history + science - both\n\nprint(seniors)"
  },
  {
    "example_id": 608,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# define a function\ndef find_integer_set(x):\n    \"\"\"\n    Returns a set of 5 positive integers whose average, median, and mode are all x.\n    \"\"\"\n    # find the mode\n    mode = x\n    # find the median\n    median = x\n    # find the average\n    average = x\n    # define the set of integers\n    integers = [x, x, x, x, x]\n    # sort the integers\n    integers.sort()\n    # return the set\n    return integers\n\n# solve the equation\nsolution = find_integer_set(5)\n\n# find the smallest integer\nsmallest = solution[0]\n# find the largest integer\nlargest = solution[-1]\n\n# print the difference\nprint(f\"The difference between the largest and smallest integers in the set is: {largest - smallest}\")"
  },
  {
    "example_id": 609,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(7.5-5.5)"
  },
  {
    "example_id": 610,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "print(6//6-6+6*6)"
  },
  {
    "example_id": 611,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "length = max(48, 72, 40)\nprint(length)"
  },
  {
    "example_id": 612,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "# Define variables\nh = 4 * math.sqrt(2)\na = 3 * math.sqrt(2)\nb = 4 * math.sqrt(2)\nc = 5 * math.sqrt(2)\n\n# Solve for area\narea = (a * b) / 2\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 613,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def distinct_prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return sum(factors)\n\nprint(distinct_prime_factors(735))"
  },
  {
    "example_id": 614,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def simplify(a, b, c):\n    return a*b*c/(a*b*c)\n\nprint(simplify(123/321, 456/654, 789/987))"
  },
  {
    "example_id": 615,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# declare variables\na, b = symbols('a b')\n\n# calculate area of square\nS = a * a\n\n# calculate new area of rectangle\nR = (a - 0.4 * a) * (a + 0.5 * a)\n\n# calculate decrease in area\ndifference = (S - R) / S\n\n# print answer\nprint(f\"{difference * 100:.2f}%\")"
  },
  {
    "example_id": 616,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# Given:\n# The ratio of the measures of the angles of a triangle is 3:2:1.\n# The shortest side of the triangle is 12 meters long.\n\n# Write a program that displays the number of meters in the longest side of the triangle.\n# Express your answer as a decimal to the nearest hundredth.\n\n# Solve for the longest side of the triangle\n\n# 1) Define the variables\na = 12\nb = 12\nc = 12\n\n# 2) Define the formula\nangle_ratio = [3, 2, 1]\n\n# 3) Solve for the longest side of the triangle\nfor angle in angle_ratio:\n    if angle == angle_ratio[0]:\n        c = a * angle_ratio[0]\n    elif angle == angle_ratio[1]:\n        b = a * angle_ratio[1]\n    elif angle == angle_ratio[2]:\n        a = b * angle_ratio[2]\n\n# 4) Display the number of meters in the longest side of the triangle\nprint(f\"{c:.2f}\")"
  },
  {
    "example_id": 617,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "exit_47, exit_48 = 47, 48\ndistance_between_exits = 100\nminimum_distance_between_exits = 6\nlongest_possible_distance = distance_between_exits - (minimum_distance_between_exits * (exit_48 - exit_47 - 1))\nprint(longest_possible_distance)"
  },
  {
    "example_id": 618,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sides = 144 / 360\nprint(sides)"
  },
  {
    "example_id": 619,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define a function to check if a number is prime\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Create a list of all possible combinations of 2 or fewer digits\ndigits = [1, 3, 6, 7]\ncombinations = list(combinations(digits, 2))\n\n# Filter out combinations that are not prime\nprimes = [c for c in combinations if is_prime(int(''.join(map(str, c))))]\n\n# Print the number of prime numbers created\nprint(len(primes))"
  },
  {
    "example_id": 620,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(5625 ** 0.5)"
  },
  {
    "example_id": 621,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# number of sides - 2\n# sum of all but one interior angles - 1070\n# 2 + 1070 = 1072\n# 1072 / 2 = 536\n# 536 / 1 = 536\n# 536 - 1 = 535\n# 535 / 2 = 267\n# 267 / 3 = 85\n# 85 / 4 = 21\n# 21 - 1 = 20\n# 20 - 1 = 19\n# 19 - 1 = 18\n# 18 - 1 = 17\n# 17 - 1 = 16\n# 16 - 1 = 15\n# 15 - 1 = 14\n# 14 - 1 = 13\n# 13 - 1 = 12\n# 12 - 1 = 11\n# 11 - 1 = 10\n# 10 - 1 = 9\n# 9 - 1 = 8\n# 8 - 1 = 7\n# 7 - 1 = 6\n# 6 - 1 = 5\n# 5 - 1 = 4\n# 4 - 1 = 3\n# 3 - 1 = 2\n# 2 - 1 = 1\n# 1 - 1 = 0\n\nprint(19)"
  },
  {
    "example_id": 622,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9604.0"
    ],
    "solution": "count = 0\nfor i in range(1, 10000):\n    if i % 2!= 0 and len(str(i)) == 5:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 623,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "perimeter = 6 * 21\nprint(perimeter)"
  },
  {
    "example_id": 624,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# Define variables\na = 5\nb = 5\nh = 9\n\n# Calculate area\narea = (a + b) * h / 2\n\n# Print area\nprint(f\"{area:.2f} square centimeters\")"
  },
  {
    "example_id": 625,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6105.0"
    ],
    "annotated_answers": [
      "957.0"
    ],
    "solution": "sum = 0\nfor i in range(1,111):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 626,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1400.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "furlongs_per_fortnight = 2800\nmiles_per_day = furlongs_per_fortnight / 2\nprint(f\"{miles_per_day:.2f}\")"
  },
  {
    "example_id": 627,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\n\neq1 = 5*x + 10 - 10*x\neq2 = 5*x + 5\n\nsol = solve(eq1, x)\n\nprint(sol)"
  },
  {
    "example_id": 628,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1188.0"
    ],
    "annotated_answers": [
      "1188.0"
    ],
    "solution": "area = 12 * 9 * 11\nprint(area)"
  },
  {
    "example_id": 629,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "s = 9\nfor i in range(2,1000000):\n    if i % 2 == 0:\n        if i % 4 == 0:\n            a = i//2\n            b = i//4\n            c = a+b\n            if c == s:\n                print(i)\n                break\n    else:\n        if i % 4 == 0:\n            a = (i+1)//2\n            b = (i-1)//4\n            c = a+b\n            if c == s:\n                print(i)\n                break"
  },
  {
    "example_id": 630,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10.0",
      "10.0",
      "0.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "# Set up the problem\nx = symbols('x')\ny = symbols('y')\n\n# Set up the equations\neq1 = x**2 + y**2 - 100\neq2 = x + y - 10\n\n# Solve the equations\nsoln = solve((eq1, eq2), (x, y))\n\n# Print the solution\nprint(soln)"
  },
  {
    "example_id": 631,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(0**5 + (-1)**4)"
  },
  {
    "example_id": 632,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(3**(-4) * 3**(-8) * 3**14)"
  },
  {
    "example_id": 633,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2500.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "x = 5\ny = 2\nz = 16\n\nx_4 = x ** 4\n\ny_2 = y ** 2\n\nresult = (z * x_4) / y_2\n\nprint(result)"
  },
  {
    "example_id": 634,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "# Define variables\na = 17\nb = 4\nc = 5\n\n# Calculate the perimeter of triangle ABC\nperimeter_ABC = a + b + c\n\n# Calculate the perimeter of the nine-sided figure\nperimeter_nine_sided = 3 * (perimeter_ABC - a)\n\nprint(f\"{perimeter_nine_sided:.2f}\")"
  },
  {
    "example_id": 635,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "# Define the number of teams\nnum_teams = 3\n\n# Define the number of players per team\nnum_players = 4\n\n# Define the number of handshakes per team\nnum_handshakes = num_players * (num_teams - 1) + num_players\n\n# Print the total number of handshakes\nprint(f\"There are {num_handshakes} handshakes in total.\")"
  }
]