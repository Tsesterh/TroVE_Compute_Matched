[
  {
    "example_id": 0,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "262144.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "print(64**3)"
  },
  {
    "example_id": 1,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "1.25"
    ],
    "solution": "distance = math.sqrt((0.5 + 0.5)**2 + (0.75)**2)\nprint(distance)"
  },
  {
    "example_id": 2,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-114.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "# Calculate total cost\ntotal_cost = 54*1 + 20*2 + 35\n\n# Calculate profit\nprofit = 15 - total_cost\n\n# Print profit\nprint(f\"Profit: ${profit}\")"
  },
  {
    "example_id": 3,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220.0"
    ],
    "annotated_answers": [
      "1584.0"
    ],
    "solution": "#!/usr/bin/env python3\n\nimport math\n\ndef combination(n, r):\n    return math.factorial(n) // math.factorial(r) // math.factorial(n - r)\n\nprint(combination(12, 3))"
  },
  {
    "example_id": 4,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.0"
    ],
    "annotated_answers": [
      "330.0"
    ],
    "solution": "n = 11\nm = 3\nprint(f\"{n*m:.0f}\")"
  },
  {
    "example_id": 5,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.745056497175141"
    ],
    "annotated_answers": [
      "3.7"
    ],
    "solution": "x = 37 / 12\ny = 260 / 59\nprint((x + y) / 2)"
  },
  {
    "example_id": 6,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 13 + 9 - 3\nprint(x)"
  },
  {
    "example_id": 7,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.73"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "side = math.sqrt(18**2 / 2)\nprint(f\"{side:.2f}\")"
  },
  {
    "example_id": 8,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "print(math.sqrt(15*35*21))"
  },
  {
    "example_id": 9,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9702.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "print(99*98)"
  },
  {
    "example_id": 10,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "odd_divisors = 0\nfor i in range(1, 100):\n    if i % 2!= 0:\n        odd_divisors += 1\nprint(odd_divisors)"
  },
  {
    "example_id": 11,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1518.0"
    ],
    "annotated_answers": [
      "1518.0"
    ],
    "solution": "# smallest prime numbers\np1 = 2\np2 = 3\np3 = 5\np4 = 7\n\n# smallest composite numbers greater than 0\nc1 = 4\nc2 = 6\nc3 = 8\nc4 = 9\n\n# product of smallest prime numbers\np = p1*p2*p3*p4\n\n# product of smallest composite numbers greater than 0\nc = c1*c2*c3*c4\n\n# positive difference between product of smallest prime numbers and product of smallest composite numbers greater than 0\ndifference = p - c\n\nprint(difference)"
  },
  {
    "example_id": 12,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "288.0"
    ],
    "solution": "# least common multiple\ndef lcm(x, y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n\n    while(True):\n        if(greater % x == 0 and greater % y == 0):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\nprint(lcm(72, 96))"
  },
  {
    "example_id": 13,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.40812452820854",
      "134"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "x = 107 * 109**5\nprint(x**11)"
  },
  {
    "example_id": 14,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Find the result\nresult = (1/6) * 6 * 7 + 8 * 2 / 8 * (7 - 1)\n\n# Print the result\nprint(result)"
  },
  {
    "example_id": 15,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "218.81"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "print(round(14.7923412**2, 2))"
  },
  {
    "example_id": 16,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for i in range(10, 50):\n    if i % i % 10 == 0:\n        print(i)"
  },
  {
    "example_id": 17,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "100.0",
      "69.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "b = 4 * 25\nprint(b)\n\nx = 25\ny = 25 + 6\n\nb = 4 * x\nprint(b)\n\nprint(b == y)\n\nprint(b - y)"
  },
  {
    "example_id": 18,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "777.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "print(math.floor(799/37)*37)"
  },
  {
    "example_id": 19,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.99999999999999"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 2.5\ny = 0.7\nz = 2.7\nq = 2.5\n\nprint(((x**2 - y**2)**0.5)/(z-q))"
  },
  {
    "example_id": 20,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a = round(sum(list(map(lambda x: x, [13, 14, 22, 52, 63, 74]))), -1)\nb = round(sum(list(map(lambda x: round(x, -1), [13, 14, 22, 52, 63, 74]))), -1)\nprint(a-b)"
  },
  {
    "example_id": 21,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "# Subtract the number of positive multiples of 3 that are less than 20 from the number of positive multiples of 6 that are less than 20\nprint(20 // 6 - 20 // 3)"
  },
  {
    "example_id": 22,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 3\nwhile x-4 < 3:\n    print(x)\n    x += 1"
  },
  {
    "example_id": 23,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.2"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "# Area of the rectangle\nrectangle_area = 4 * 0.8\nprint(f\"{rectangle_area:.2f}\")"
  },
  {
    "example_id": 24,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "5400.0"
    ],
    "solution": "# define the number of days for each planet\nx = 360\ny = 450\nz = 540\n\n# calculate the number of days before they are in the same location again\ndays = math.gcd(x, y, z)\nprint(f\"The minimum number of days before they are in the same location again is {days}.\")"
  },
  {
    "example_id": 25,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "overall = (84 * 25 + 66 * 20) / (25 + 20)\nprint(overall)"
  },
  {
    "example_id": 26,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def calculate_score(sarah_points, james_points, matthew_points):\n    return (sarah_points * james_points) - matthew_points\n\n# calculate score\nmax_score = max(calculate_score(5, 3, -2), calculate_score(5, -2, 3), calculate_score(-2, 5, 3), calculate_score(-2, 3, 5), calculate_score(3, 5, -2), calculate_score(3, -2, 5))\n\nprint(f\"Maximum score: {max_score}\")"
  },
  {
    "example_id": 27,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nN = 11\nM = 20\n\nprint(divisor(N) * divisor(M))"
  },
  {
    "example_id": 28,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "8.0",
      "4.0",
      "12.0",
      "8.0",
      "4.0",
      "8.0",
      "12.0",
      "12.0",
      "4.0",
      "12.0",
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "divisor = [4,8,12]\nfraction = [4,8,12]\n\n# create list of unique values\nunique = []\n\nfor i in divisor:\n    for j in fraction:\n        if i!= j:\n            unique.append(f\"{i}/{j}\")\n\n# print unique values\nprint(unique)"
  },
  {
    "example_id": 29,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b, c = 0, 0, 0\n\na = c - b\nb = 11 - c\nc = 8\n\nprint(a)"
  },
  {
    "example_id": 30,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "length = 93 - 36 + 1\nprint(length)"
  },
  {
    "example_id": 31,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.66"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "rectangle = 2 * 2 * math.sqrt(2)\nprint(f\"{rectangle:.2f}\")"
  },
  {
    "example_id": 32,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "564.0"
    ],
    "annotated_answers": [
      "564.0"
    ],
    "solution": "print(round(563.5097))"
  },
  {
    "example_id": 33,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "256.0"
    ],
    "solution": "def is_prime_number(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef divisor(n):\n    if n < 10000:\n        return 0\n    count = 0\n    for i in range(1000, 10000):\n        if is_prime_number(i):\n            if n % i == 0:\n                count += 1\n    return count\n\nprint(divisor(10000))"
  },
  {
    "example_id": 34,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "y = 6\nprint(y**3)"
  },
  {
    "example_id": 35,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.08"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "CD = math.sqrt(((6)**2) + ((12/12)**2))\nprint(f\"{CD:.2f}\")"
  },
  {
    "example_id": 36,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.83"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "area = (5**2 + 3**2)**0.5\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 37,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(math.sqrt(6**2) - 3)"
  },
  {
    "example_id": 38,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "b1 = 8\nh1 = 5\nb2 = 20\n\narea1 = (b1 * h1) / 2\narea2 = (b2 * (b2 - h1)) / 2\n\nprint(f\"{b2:.2f}\")"
  },
  {
    "example_id": 39,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = 3 * 3 + 7\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 40,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "3380.0"
    ],
    "solution": "import itertools\nimport string\n\nvowels = 'AEIOU'\n\ndef get_3_letter_words(vowels):\n    for vowel in vowels:\n        for letter in vowels:\n            for letter2 in vowels:\n                yield vowel + letter + letter2\n\n\nprint(len(list(get_3_letter_words(vowels))))"
  },
  {
    "example_id": 41,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "1.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "for i in range(1, 21):\n    for j in range(1, 21):\n        if i % j == 0:\n            print(i, j)"
  },
  {
    "example_id": 42,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 50\ny = 28\nz = 21\nw = 6\n\nresult = x - y - z - w\nprint(f\"{result:.2f}\")"
  },
  {
    "example_id": 43,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Initialize variables\ndivisible_numbers = 0\n\n# Loop through numbers from 1 to 200\nfor num in range(1, 201):\n    # Check if units place is 2 and divisible by 4\n    if num % 10 == 2 and num % 4 == 0:\n        divisible_numbers += 1\n\n# Print answer\nprint(divisible_numbers)"
  },
  {
    "example_id": 44,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "N = 7\nprint(f\"{N:d}\")"
  },
  {
    "example_id": 45,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "26.0",
      "36.0",
      "46.0",
      "56.0",
      "66.0",
      "76.0",
      "86.0",
      "96.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "for i in range(10, 100):\n    if i % 10 == 6:\n        print(i)"
  },
  {
    "example_id": 46,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "total_squares = 25\nblack_squares = 1\nprint(black_squares)"
  },
  {
    "example_id": 47,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(6+5-4*3/(2+1))"
  },
  {
    "example_id": 48,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = -345**4\nx = x**2\nx = x**0\nx = x**-2\nx = x**-4\nprint(x)"
  },
  {
    "example_id": 49,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4007.0"
    ],
    "solution": "def is_odd(n):\n    return n % 2 == 1\n\ndef is_positive(n):\n    return n > 0\n\ndef is_integer(n):\n    return n == int(n)\n\ndef find_nth_odd_positive(n):\n    return next(filter(is_odd, filter(is_positive, itertools.count())))\n\nprint(find_nth_odd_positive(2004))"
  },
  {
    "example_id": 50,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "for i in range(2, 100):\n    for j in range(2, 100):\n        if i + j == 100:\n            print(i + j)\n            break"
  },
  {
    "example_id": 51,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "3.0",
      "6.0",
      "9.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "for x in range(0, 10):\n    if (341400 + x) % 3 == 0:\n        print(x)"
  },
  {
    "example_id": 52,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "history = 126\nscience = 129\nboth = history + science\nprint(both)"
  },
  {
    "example_id": 53,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-30.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "print(5*(-32//5+1))"
  },
  {
    "example_id": 54,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35292.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 35292\n\n# define divisor function\ndef divisor(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n# find divisors\ndivisors = divisor(n)\n\n# find largest divisor that is a multiple of 4\nlargest_divisor = max(divisors)\n\n# find remainder\nremainder = n % largest_divisor\n\n# find the digit that can be placed in the circle\ndigit = largest_divisor - remainder\n\n# print solution\nprint(f\"The digit that can be placed in the circle is: {digit}\")"
  },
  {
    "example_id": 55,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, int(n**0.5) + 1) if n % i == 0]\n\narea = (8 * 10) - (8 * 8.5) - (10 * 8.5) + (8.5 * 8.5)\nprint(f\"{area:.0f}\")"
  },
  {
    "example_id": 56,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10090.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n+1) if n%i == 0]\n\ndef odd_digit(n):\n    return len(str(n)) % 2 == 1\n\ndef answer(n):\n    for i in itertools.count(start=1):\n        if odd_digit(i) and i in divisor(n):\n            return i\n\nprint(answer(1000))"
  },
  {
    "example_id": 57,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "# median\nmedian = 6\n\n# mode\nmode = 8\n\n# arithmetic mean\nmean = (median + mode) / 2\n\nprint(f\"Arithmetic mean: {mean}\")"
  },
  {
    "example_id": 58,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "def lcm(a, b):\n    if a > b:\n        return lcm(b, a)\n    while b!= 0:\n        temp = a % b\n        a = b\n        b = temp\n    return a\n\ndef lcm_list(numbers):\n    result = 1\n    for i in numbers:\n        result = lcm(result, i)\n    return result\n\nprint(lcm_list([14, 20, 35]))"
  },
  {
    "example_id": 59,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "12.0",
      "12.0",
      "12.0",
      "12.0",
      "12.0",
      "13.0",
      "13.0",
      "13.0",
      "13.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for i in itertools.permutations(range(10), 2):\n    for j in itertools.permutations(range(10), 3):\n        for k in itertools.permutations(range(10), 3):\n            if i[0] + i[1] == j[0] + j[1] + j[2] and j[0] + j[1] + j[2] == k[0] + k[1] + k[2]:\n                if math.gcd(i[0], i[1]) == 1 and math.gcd(j[0], j[1], j[2]) == 1 and math.gcd(k[0], k[1], k[2]) == 1:\n                    print(i[0] * 10 + i[1])\n                    break"
  },
  {
    "example_id": 60,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.08"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "flour = 15\ncookies = 20\ntotal_flour = flour * cookies\ntotal_cookies = 144\nflour_per_cookie = total_flour / total_cookies\nprint(f\"{flour_per_cookie:.2f}\")"
  },
  {
    "example_id": 61,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.76"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# calculate the area of the largest circle\narea1 = math.pi * 12**2\n\n# calculate the area of the ring\narea2 = math.pi * (12 - 10) * (10 + 6)\n\n# calculate the area of the smallest circle\narea3 = math.pi * 6**2\n\n# calculate the radius of the smallest circle\nradius = math.sqrt((area1 - area2) / area3)\n\n# round the radius to two decimal places\nradius = round(radius, 2)\n\nprint(f\"The radius of the smallest circle is {radius} units.\")"
  },
  {
    "example_id": 62,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(8 - 4 / 2 - 1)"
  },
  {
    "example_id": 63,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 5\ny = 2*x + 1\nprint(f\"x = {x:.2f}, y = {y:.2f}\")"
  },
  {
    "example_id": 64,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "def sum_k(l, u):\n    return sum(k for k in range(l, u) if k/27 > 2/3 and k/27 < 8/9)\n\nprint(sum_k(1, 100))"
  },
  {
    "example_id": 65,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 1\nwhile n < 10:\n    if 6*n % n == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 66,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "# 600 memos / 3 days = 200 memos/day\nprint(200)"
  },
  {
    "example_id": 67,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88920.0"
    ],
    "annotated_answers": [
      "247000.0"
    ],
    "solution": "purchase_price = 0.8 * 49400 + 49400\nprint(purchase_price)"
  },
  {
    "example_id": 68,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# The number of rectangles in this figure is 6.\nprint(6)"
  },
  {
    "example_id": 69,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "import math\n\ndef stack_books(num_books, shelf_length):\n    return math.factorial(num_books) / math.factorial(shelf_length)\n\nprint(stack_books(5, 5))"
  },
  {
    "example_id": 70,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "306.0"
    ],
    "annotated_answers": [
      "636.0"
    ],
    "solution": "n = 12\nc = 0\nfor i in range(12, 24):\n    c += 8 + i\nprint(f\"{c:.0f}\")"
  },
  {
    "example_id": 71,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.7"
    ],
    "annotated_answers": [
      "2.7"
    ],
    "solution": "print(round(2.745, 1))"
  },
  {
    "example_id": 72,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "12.0",
      "24.0",
      "36.0",
      "48.0",
      "60.0",
      "72.0",
      "84.0",
      "96.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for x in range(0, 100, 1):\n    if x % 4 == 0 and x % 6 == 0:\n        print(x)"
  },
  {
    "example_id": 73,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "pentagon_diagonals = 5\nprint(pentagon_diagonals)"
  },
  {
    "example_id": 74,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    return sum_of_digits == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(200, 300))"
  },
  {
    "example_id": 75,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13992.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def is_pentagon(n):\n    s = sum(int(x) for x in str(n))\n    return s == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_pentagon(i))\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 1000000))"
  },
  {
    "example_id": 76,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    return sum(int(i) for i in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 1000))"
  },
  {
    "example_id": 77,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum(int(i) for i in str(l) if i in str(u))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, 15) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return len(list(filter(lambda x: is_sum_of_digits_equal_to_15(x), range(start, end + 1))))\n\n\nstart = 1000\nend = 2000\nprint(count_integers_with_sum_of_digits_equal_to_15(start, end))"
  },
  {
    "example_id": 78,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# \nradius = 4 * math.sqrt(4)\nprint(f\"{radius:.2f}\")"
  },
  {
    "example_id": 79,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor i in range(1, 500):\n    if i % 3 == 0 and i % 4 == 0 and i % 5 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 80,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "number_of_houses = 6 * 10\nprint(number_of_houses)"
  },
  {
    "example_id": 81,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "feet_per_minute = 20\ninches_per_foot = 12\nseconds_per_minute = 60\ninches_per_second = inches_per_foot * feet_per_minute / seconds_per_minute\nprint(inches_per_second)"
  },
  {
    "example_id": 82,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "234.0"
    ],
    "annotated_answers": [
      "234.0"
    ],
    "solution": "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(l**k for k in range(u + 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\ndef smallest_integer_greater_than_200_for_which_the_greatest_common_divisor_of_that_integer_and_36_is_18():\n    for i in range(201, 1000000000000):\n        if gcd(i, 36) == 18:\n            return i\n\nprint(smallest_integer_greater_than_200_for_which_the_greatest_common_divisor_of_that_integer_and_36_is_18())"
  },
  {
    "example_id": 83,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-30.0"
    ],
    "solution": "def divisor(n):\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            yield i\n        i += 1\n\ndef sum_k(l, u):\n    return sum(int(c) for c in str(l) if c in string.digits) + sum(int(c) for c in str(u) if c in string.digits)\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, n) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(-3, 8))"
  },
  {
    "example_id": 84,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define a function for calculating the number of digits in a number\ndef count_digits(n):\n    return len(str(n))\n\n# Define a function for calculating the sum of the digits in a number\ndef sum_digits(n):\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    return sum\n\n# Define a function for calculating the number of integers with a given number of digits\ndef count_integers_with_n_digits(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        count += 1\n    return count\n\n# Define a function for calculating the number of integers with a sum of digits equal to 15\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if sum_digits(i) == 15:\n            count += 1\n    return count\n\n# Calculate the number of integers with a sum of digits equal to 15\n# in the range of 10 to 100\ncount = count_integers_with_sum_of_digits_equal_to_15(10, 100)\nprint(count)"
  },
  {
    "example_id": 85,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum([int(digit) for digit in str(n)])\n    return sum_of_digits == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\n\ndef divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\n\nn = 17\nstart = 1\nend = sum_k(start, n)\ncount = count_integers_with_sum_of_digits_equal_to_15(start, end)\nprint(count)"
  },
  {
    "example_id": 86,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "def count_meals(n_appetizers, n_entrees, n_desserts):\n    return len(list(itertools.combinations(range(n_appetizers), 1))) * len(list(itertools.combinations(range(n_entrees), 1))) * len(list(itertools.combinations(range(n_desserts), 1)))\n\nprint(count_meals(5, 8, 4))"
  },
  {
    "example_id": 87,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "n = 518\nm = 294\n\ndef divisor(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum_k(l, u):\n    sum_k = 0\n    for i in range(l, u + 1):\n        sum_k += i\n    return sum_k\n\ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = 0\n    for i in str(n):\n        sum_of_digits += int(i)\n    return sum_of_digits == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 1000))"
  },
  {
    "example_id": 88,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.49"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "x = symbols('x')\n\nf = (x**2 - 110)/100\n\nsol = solve(f, x)\n\nprint(f\"{sol[0]:.2f}\")"
  },
  {
    "example_id": 89,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "start = 3*math.sqrt(5)\nend = 5*math.sqrt(3)\n\ndef divisor(n):\n    return {x for x in range(1, int(n**0.5) + 1) if n % x == 0}\n\ndef sum_k(l, u):\n    return sum(int(x) for x in itertools.combinations_with_replacement(string.digits, l) if sum(int(x) for x in x) <= u)\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(x) for x in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for x in range(int(start), int(end)) if is_sum_of_digits_equal_to_15(x))\n\ndef count_integers_with_divisors_equal_to_5(start, end):\n    return sum(1 for x in range(int(start), int(end)) if len(divisor(x)) == 5)\n\nprint(count_integers_with_sum_of_digits_equal_to_15(start, end))\nprint(count_integers_with_divisors_equal_to_5(start, end))"
  },
  {
    "example_id": 90,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "n = 30\nm = 7\ne = 11\nb = 4\n\n# number of students who have not been to Mexico or England\nnot_mexico_or_england = n - m - e + b\nprint(f\"Number of students who have not been to Mexico or England: {not_mexico_or_england}\")"
  },
  {
    "example_id": 91,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "# Define a function to find the divisors of a number\ndef divisor(n):\n    # Find the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors\n\n# Define a function to find the sum of the digits of a number\ndef sum_k(l, u):\n    # Find the sum of the digits of l and u\n    sum_l = 0\n    for i in str(l):\n        sum_l += int(i)\n    sum_u = 0\n    for i in str(u):\n        sum_u += int(i)\n    return sum_l + sum_u\n\n# Define a function to check if a number is a sum of digits equal to 15\ndef is_sum_of_digits_equal_to_15(n):\n    # Check if n is a sum of digits equal to 15\n    if sum_k(n, n) == 15:\n        return True\n    else:\n        return False\n\n# Define a function to find the count of integers with sum of digits equal to 15\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    # Find the count of integers with sum of digits equal to 15 in the range [start, end]\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# Find the count of integers with sum of digits equal to 15 in the range [1, 100]\ncount = count_integers_with_sum_of_digits_equal_to_15(1, 100)\nprint(count)"
  },
  {
    "example_id": 92,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.5"
    ],
    "annotated_answers": [
      "84.5"
    ],
    "solution": "print(35.2 + 49.3)"
  },
  {
    "example_id": 93,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "# Euler problem 1\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef sum_of_prime_factors(n):\n    return sum(prime_factors(n))\n\nprint(sum_of_prime_factors(85085))"
  },
  {
    "example_id": 94,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "positive_divisors = [1, 2, 5, 10]\nproduct = 1\nfor divisor in positive_divisors:\n    if 10 % divisor == 0:\n        product *= divisor\nprint(product)"
  },
  {
    "example_id": 95,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# number of large boxes\nN = 4\n\n# number of small boxes\nM = 3\n\n# number of smaller boxes\nK = 2\n\n# number of boxes\nn = N * M * K\n\nprint(n)"
  },
  {
    "example_id": 96,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.40500611775288",
      "51"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 42\nresult = 1\nwhile n > 0:\n    result *= n\n    n -= 1\nprint(result)"
  },
  {
    "example_id": 97,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "666000.0"
    ],
    "annotated_answers": [
      "666000.0"
    ],
    "solution": "print(3**2 * 2**4 * 37 * 5**3)"
  },
  {
    "example_id": 98,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "105.0"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "def least_positive_integer_divisible_by_the_four_smallest_odd_positive_integers():\n    divisors = []\n    for i in range(4):\n        divisors.append(2*i + 1)\n    divisor = 1\n    for i in range(1, 1000000000):\n        for j in divisors:\n            if i % j!= 0:\n                break\n        else:\n            divisor = i\n            break\n    return divisor\n\nprint(least_positive_integer_divisible_by_the_four_smallest_odd_positive_integers())"
  },
  {
    "example_id": 99,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.000000000000001"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((20 * (2/5)**2 * (3/4)**2 * 5/9)**5)"
  },
  {
    "example_id": 100,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0",
      "90.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "test_scores = [87, 85, 87, 90, 90]\naverage = 90\nfor test_score in test_scores:\n    if test_score == average:\n        print(test_score)\n    elif test_score == average + 3:\n        print(test_score)"
  },
  {
    "example_id": 101,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 120\nk = 40\n\ndef divisor(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(i) for i in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nstart = 10\nend = 20\n\nprint(f\"{count_integers_with_sum_of_digits_equal_to_15(start, end):d}\")"
  },
  {
    "example_id": 102,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "86.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "n = 5\nd = 8\ndenominator = 91\nnumerator = 5\ndiff = denominator - numerator\nprint(f\"{diff}\")"
  },
  {
    "example_id": 103,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(0**5**6431564)"
  },
  {
    "example_id": 104,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "1.125"
    ],
    "solution": "a = 0.2 + 0.6\nprint(1/a)"
  },
  {
    "example_id": 105,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "x = 7\nfor i in range(2, x + 1):\n    if i % 3 == 2 and i % 4 == 2 and i % 5 == 2 and i % 6 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 106,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1001.0",
      "1001.0",
      "1001.0",
      "1001.0",
      "2.0",
      "1001.0",
      "2.0",
      "1001.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "n = 1001\na = symbols('a')\nsol = solve(a**n - 1, a)\nprint(sol)"
  },
  {
    "example_id": 107,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "5.0",
      "3.0",
      "2.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "days = [1, 2, 3, 4, 5, 5, 3, 2, 1, 1]\nprint(days)"
  },
  {
    "example_id": 108,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "563.51"
    ],
    "annotated_answers": [
      "563.51"
    ],
    "solution": "print(round(563.5097, 2))"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.7"
    ],
    "annotated_answers": [
      "7.2"
    ],
    "solution": "CE = 4 * math.sqrt(2)\nprint(f\"{CE:.1f}\")"
  },
  {
    "example_id": 110,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.18"
    ],
    "annotated_answers": [
      "13.18"
    ],
    "solution": "print(56.78-43.6)"
  },
  {
    "example_id": 111,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2"
    ],
    "annotated_answers": [
      "22.5"
    ],
    "solution": "x = 0.2\nprint(x)"
  },
  {
    "example_id": 112,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = (32 + 8) / 2\nprint(x)"
  },
  {
    "example_id": 113,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "147.0"
    ],
    "solution": "# Total number of pages in fiction book\nfiction_pages = 5\n# Total number of pages in history textbook\nhistory_pages = 2\n# Total pages to read\ntotal_pages = 30\n\n# Time in minutes for reading fiction book\nfiction_time = 7\n# Time in minutes for reading history book\nhistory_time = 7\n\n# Total time to read both books\ntotal_time = fiction_time + history_time\n\n# Total number of pages to read in both books\ntotal_pages = fiction_pages + history_pages\n\n# Total time to read all the pages\ntotal_time = total_pages / total_pages\n\nprint(total_time)"
  },
  {
    "example_id": 114,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "234.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "hexagon_perimeter = 6 * 39\nprint(hexagon_perimeter)"
  },
  {
    "example_id": 115,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "4.0",
      "1.0",
      "100.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# \ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# \ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum_k(n, 1)\n    return sum_of_digits == 15\n\n# \ndef sum_k(l, u):\n    return sum(int(c) for c in str(l) if c in string.digits)\n\n# \ndef divisor(n):\n    return sum(1 for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)\n\n# \ndef main():\n    # \n    start = 1\n    end = 100\n    count = count_integers_with_sum_of_digits_equal_to_15(start, end)\n    print(f\"The digit 6 appears {count} times in the list of all integers from {start} to {end}.\")\n\n# \nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 116,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "def divisor(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum_k(l, u):\n    return sum([i for i in range(l, u+1)])\n\ndef is_sum_of_digits_equal_to_15(n):\n    if n == 0:\n        return False\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(2, 5))"
  },
  {
    "example_id": 117,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.5"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def smallest_average_of_four_distinct_positive_even_integers():\n    # Find the smallest even integer greater than 2\n    next_even_integer = 2\n    while next_even_integer % 2 == 0:\n        next_even_integer += 1\n\n    # Find the largest even integer less than 100\n    prev_even_integer = 100\n    while prev_even_integer % 2 == 0:\n        prev_even_integer -= 1\n\n    # Find the average of the four distinct positive even integers\n    average = (next_even_integer + prev_even_integer) / 4\n\n    # Return the smallest average of four distinct positive even integers\n    return average\n\nprint(smallest_average_of_four_distinct_positive_even_integers())"
  },
  {
    "example_id": 118,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "103041.0"
    ],
    "annotated_answers": [
      "103041.0"
    ],
    "solution": "print(((103041) ** 0.5) ** 2)"
  },
  {
    "example_id": 119,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "d = 3\nn = 4\nm = n * d\nprint(f\"{m:.2f}\")"
  },
  {
    "example_id": 120,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.47"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Define the side length of the square\nside = 6\n\n# Define the base of the triangle\nbase = 8\n\n# Calculate the altitude of the triangle\naltitude = math.sqrt((side**2) - (base**2)/4)\n\n# Print the altitude\nprint(f\"The altitude of the triangle is {altitude:.2f} units long.\")"
  },
  {
    "example_id": 121,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "519.0"
    ],
    "annotated_answers": [
      "5040.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(range(l, u+1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end+1):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1000, 9999))"
  },
  {
    "example_id": 122,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.36"
    ],
    "annotated_answers": [
      "1.36"
    ],
    "solution": "kg = 3/2.2\nprint(f\"{kg:.2f}\")"
  },
  {
    "example_id": 123,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcf(a, b):\n    return a if b == 0 else gcf(b, a % b)\n\nprint(gcf(144, 405))"
  },
  {
    "example_id": 124,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.73"
    ],
    "annotated_answers": [
      "0.73"
    ],
    "solution": "print(0.8 - 0.07)"
  },
  {
    "example_id": 125,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.333333333333334"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "scores = [17, 10, 9, 14, 16, 8, 10]\n\n# 1. Calculate the sum of all the scores\ntotal = sum(scores)\n\n# 2. Calculate the average of all the scores\naverage = total / len(scores)\n\n# 3. Calculate the sum of the next three scores\nnext_scores = scores[4:7]\nnext_scores_sum = sum(next_scores)\n\n# 4. Calculate the target average\ntarget_average = next_scores_sum / 3\n\n# 5. Calculate the difference between the target average and the current average\ndiff = target_average - average\n\n# 6. Calculate the number of scores that need to be changed\nchange_num = int(diff / (average - next_scores_sum))\n\n# 7. Calculate the new scores\nnew_scores = []\nfor i in range(len(next_scores)):\n    new_scores.append(next_scores[i] + change_num)\n\n# 8. Calculate the new total\nnew_total = sum(new_scores)\n\n# 9. Calculate the new average\nnew_average = new_total / len(new_scores)\n\n# 10. Check if the new average is equal to the target average\nprint(new_average)"
  },
  {
    "example_id": 126,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "north_area_shoe_stores = 18\nuniversity_mall_shoe_stores = (18 / 90) * 90\nprint(university_mall_shoe_stores)"
  },
  {
    "example_id": 127,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "21.0",
      "3.0",
      "14.0",
      "6.0",
      "7.0",
      "7.0",
      "6.0",
      "14.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Rick's factor\nfor r in range(1, 15):\n    # Steve's factor\n    for s in range(1, 28):\n        # Their product\n        if r*s == 42:\n            print(f'Rick: {r}, Steve: {s}')"
  },
  {
    "example_id": 128,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    return sum == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\ndef divisor(n):\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors\n\ndef sum_k(l, u):\n    return sum(divisor(u)[i] for i in range(len(divisor(u))) if divisor(u)[i] >= l)\n\ndef solution(n):\n    red_light_blink_every_two_seconds = 2\n    yellow_light_blink_every_three_seconds = 3\n    blue_light_blink_every_five_seconds = 5\n\n    total_lights_on_time = 0\n    for i in range(red_light_blink_every_two_seconds, blue_light_blink_every_five_seconds + 1):\n        total_lights_on_time += sum_k(\n            red_light_blink_every_two_seconds, blue_light_blink_every_five_seconds)\n\n    return total_lights_on_time // n\n\nprint(solution(7))"
  },
  {
    "example_id": 129,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.15"
    ],
    "annotated_answers": [
      "0.15"
    ],
    "solution": "print(0.15)"
  },
  {
    "example_id": 130,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = (29 - 2 - 1 - 2) / (2 + 1 + 1)\nprint(x)"
  },
  {
    "example_id": 131,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    s = sum([int(i) for i in str(n)])\n    return s == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return len([i for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i)])\n\nprint(count_integers_with_sum_of_digits_equal_to_15(115, 1000))"
  },
  {
    "example_id": 132,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "135.0",
      "9.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(list(range(l, u + 1)))\n\ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    return sum_of_digits == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# Grade with the number of its male bus riders closest to 135% of the number of its female bus riders\n# is the 9th grade\nprint(\"The grade with the number of its male bus riders closest to 135% of the number of its female bus riders is the 9th grade.\")"
  },
  {
    "example_id": 133,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# \ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = 0\n    for digit in str(n):\n        sum_of_digits += int(digit)\n    return sum_of_digits == 15\n\n# \ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\n# \ndef divisor(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n# \ndef sum_k(l, u):\n    return sum(i for i in range(l, u + 1))\n\n# \ndef main():\n    count = count_integers_with_sum_of_digits_equal_to_15(11, 29)\n    print(f\"{count}\")\n\n# \nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 134,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "expression = (2*3 + 4*5 - 6*7 + 8*9) * 0\nprint(expression)"
  },
  {
    "example_id": 135,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "mean = (70+80+90+75+80+85)/6\nprint(mean)"
  },
  {
    "example_id": 136,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(((1200 * 0.05) * 0.1))"
  },
  {
    "example_id": 137,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# define a function that returns the sum of the squares of the lengths of the two other sides\ndef sum_of_squares(h):\n    side_a = math.sqrt(h**2 - 2**2)\n    side_b = math.sqrt(h**2 - 2**2)\n    return side_a**2 + side_b**2\n\n# solve for the length of the hypotenuse\nh = 2\n\n# calculate the sum of the squares of the lengths of the two other sides\nsum_of_squares_of_sides = sum_of_squares(h)\n\n# calculate the sum of the squares of the lengths of the two other sides\nsum_of_squares_of_sides = sum_of_squares(h)\n\n# calculate the difference between the length of the hypotenuse and the sum of the squares of the lengths of the two other sides\ndifference = h**2 - sum_of_squares_of_sides\n\n# calculate the square root of the difference\nsqrt_difference = math.sqrt(difference)\n\n# print the result\nprint(f\"{sqrt_difference:.2f}\")"
  },
  {
    "example_id": 138,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "576.0"
    ],
    "annotated_answers": [
      "1208.0"
    ],
    "solution": "# Calculate perimeter of hexagon ABCDEF\nperimeter = 0\n\n# Calculate perimeter of triangle ABE\nperimeter += 2*62 + 20\n\n# Calculate perimeter of triangle BCE\nperimeter += 2*62 + 20\n\n# Calculate perimeter of triangle CDE\nperimeter += 2*62 + 20\n\n# Calculate perimeter of triangle DEF\nperimeter += 2*62 + 20\n\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 139,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# List of the 5 smallest prime numbers\nprime_numbers = [2, 3, 5, 7, 11]\n\n# Product of the 5 smallest prime numbers\nproduct = 1\nfor prime in prime_numbers:\n    product *= prime\n\n# Divide by 42\nprint(product % 42)"
  },
  {
    "example_id": 140,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.169925001442312"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = math.log(72, 3) / math.log(2, 3)\nprint(x)"
  },
  {
    "example_id": 141,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, int(n**0.5) + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum([i for i in range(l, u + 1)])\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(i) for i in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 10))"
  },
  {
    "example_id": 142,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def divisor(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n\ndef sum_k(l, u):\n    return sum([int(str(l)[i]) for i in range(len(str(l)))])\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, n) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return len([n for n in range(start, end + 1) if is_sum_of_digits_equal_to_15(n)])\n\n\ndef solution(l):\n    divisors = divisor(l)\n    divisors = [d for d in divisors if d >= 5]\n    if len(divisors) > 0:\n        return l // divisors[0]\n    else:\n        return 0\n\n\nprint(solution(60))"
  },
  {
    "example_id": 143,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 4"
  },
  {
    "example_id": 144,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "15.0",
      "20.0",
      "25.0",
      "30.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for row in range(1, 6):\n    for col in range(row):\n        print(row, end=\" \")\n    print()\n\nfor i in range(15, 31):\n    if i % 5 == 0:\n        print(i)"
  },
  {
    "example_id": 145,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "326.5"
    ],
    "annotated_answers": [
      "326.5"
    ],
    "solution": "print(313.9 + 12.6)"
  },
  {
    "example_id": 146,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print((100/101)**(-3)*(100/101)**3)"
  },
  {
    "example_id": 147,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "print((1 + 2 * 3 * 4 * 5) // 11)"
  },
  {
    "example_id": 148,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "18.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "# Problem 1\n# The shadow of a person is 8 feet long if the person is 5 feet tall.\n# If a tree shadow is 120 feet long, how many feet tall is the tree?\n\n# The height of the person is x feet\n# The height of the tree is x-120 feet\n\n# The shadow of the person is 8 feet long\n# The shadow of the tree is 120 feet long\n\n# x - 8 = 120\n# x = 138\n\nprint(f\"The height of the tree is {138 - 120} feet\")\n\n# Problem 2\n# If a tree is 120 feet tall, and the shadow of a person who is 5 feet tall casts an 8 foot shadow, how many feet tall is the person?\n\n# The height of the tree is x feet\n# The height of the person is x-120 feet\n\n# The shadow of the person is 8 feet long\n# The shadow of the tree is 120 feet long\n\n# x - 8 = 120\n# x = 138\n\nprint(f\"The height of the person is {138 - 120} feet\")"
  },
  {
    "example_id": 149,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "519.0"
    ],
    "annotated_answers": [
      "625.0"
    ],
    "solution": "count = 0\nfor i in range(1000, 10000):\n    if is_sum_of_digits_equal_to_15(i):\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 150,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0",
      "100.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "for i in range(1, 100):\n    for j in range(1, 100):\n        for k in range(1, 100):\n            if i*j*k == 100:\n                print(i*j*k)"
  },
  {
    "example_id": 151,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1000.0",
      "500573.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Define functions\ndef divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(i for i in range(l, u + 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(i) for i in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# Define variables\nstart, end = 1, 1000\n\n# Calculate the sum of all integers between start and end that are divisible by 3 or 5\nsum_of_divisible_integers = sum_k(start, end)\n\n# Calculate the sum of all integers between start and end that have a sum of digits equal to 15\nsum_of_integers_with_sum_of_digits_equal_to_15 = count_integers_with_sum_of_digits_equal_to_15(start, end)\n\n# Calculate the sum of all integers between start and end that have a sum of digits equal to 15\nsum_of_all_integers = sum_of_divisible_integers + sum_of_integers_with_sum_of_digits_equal_to_15\n\n# Print the sum\nprint(f\"The sum of all integers between {start} and {end} is {sum_of_all_integers}\")"
  },
  {
    "example_id": 152,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 5000\nstart = 1\nend = 13\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef is_sum_of_digits_equal_to_15(n):\n    s = 0\n    for d in str(n):\n        s += int(d)\n    return s == 15\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef divisor(n):\n    return sum(1 for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)\n\nprint(count_integers_with_sum_of_digits_equal_to_15(start, end))"
  },
  {
    "example_id": 153,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "3.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# \n# variables\nA = 2\nB = 3\nC = 3\nD = 4\n\n# \n# calculate\ntotal_apples = A + B + C + D\nBetty_and_Cathy = B + C\n\n# \n# print\nprint(f\"Betty and Cathy have {Betty_and_Cathy} apples.\")\nprint(f\"Amy has {A} apples.\")\nprint(f\"Betty has {B} apples.\")\nprint(f\"Cathy has {C} apples.\")\nprint(f\"Daisy has {D} apples.\")"
  },
  {
    "example_id": 154,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "x = 65\nprint(x)"
  },
  {
    "example_id": 155,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-16.375704923030025"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 8/9\nx **= 4\nx -= 17\nprint(x)"
  },
  {
    "example_id": 156,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Define a function that calculates the area of a right triangle\ndef area_of_right_triangle(side1, side2):\n    # Calculate the length of the hypotenuse\n    hypotenuse = math.sqrt((side1**2) + (side2**2))\n\n    # Return the area of the triangle\n    return (side1 * side2) / 2\n\n# Define the sides of the right triangle\nside1 = 6\nside2 = 6\n\n# Calculate the area of the triangle\narea = area_of_right_triangle(side1, side2)\n\n# Print the area of the triangle\nprint(area)"
  },
  {
    "example_id": 157,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "107.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nprint(largest_prime_factor(1391))"
  },
  {
    "example_id": 158,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "P = 8\nQ = 48\nB = (P + Q) / 2\nC = (B + Q) / 2\nD = (P + C) / 2\nprint(D)"
  },
  {
    "example_id": 159,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Let ABCD be the convex quadrilateral.\n# The sum of the angles in a quadrilateral is 360 degrees.\n# The smallest angle in the quadrilateral is 90 degrees.\n# The largest angle in the quadrilateral is twice the smallest angle.\n# Therefore, the largest angle is 2 times 90 degrees = 180 degrees.\nprint(180)"
  },
  {
    "example_id": 160,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "# \n\ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    return sum_of_digits == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(100, 999))"
  },
  {
    "example_id": 161,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "new_price = 0.75 * 60\nprint(new_price)"
  },
  {
    "example_id": 162,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "def is_emirp(n):\n    if n < 10:\n        return False\n    if str(n)[::-1] == str(int(str(n)[::-1])):\n        return False\n    return True\n\ndef is_prime(n):\n    if n == 1 or n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nfor i in range(10, 100):\n    if is_prime(i) and not is_emirp(i):\n        print(i)\n        break"
  },
  {
    "example_id": 163,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# \ndef divisor(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n# \ndef sum_k(l, u):\n    return sum(list(range(l, u + 1)))\n\n# \ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = 0\n    while n > 0:\n        sum_of_digits += n % 10\n        n //= 10\n    return sum_of_digits == 15\n\n# \ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\n# \ndef main():\n    girls_miles = sum_k(3, 6) * 7\n    boys_miles = sum_k(5, 5) * 7\n    new_javelins = count_integers_with_sum_of_digits_equal_to_15(girls_miles, boys_miles)\n    print(f\"{new_javelins} javelins\")\n\n# \nmain()"
  },
  {
    "example_id": 164,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "sum = 0\nfor i in range(11, 21):\n    if i % 2!= 0:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 165,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "53.99999999999999"
    ],
    "annotated_answers": [
      "54.0"
    ],
    "solution": "print(((math.sqrt(6) + math.sqrt(24))**2))"
  },
  {
    "example_id": 166,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "print(4*12 - (4+12))"
  },
  {
    "example_id": 167,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "132.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "total_players = 12\ntotal_games = total_players * (total_players - 1)\nprint(total_games)"
  },
  {
    "example_id": 168,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print(22 / 2)"
  },
  {
    "example_id": 169,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "4.0",
      "3.0",
      "2.0",
      "2.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "print(12//2)\nprint(12//3)\nprint(12//4)\nprint(12//5)\nprint(12//6)\nprint(12//7)\nprint(12//8)\nprint(12//9)\nprint(12//10)"
  },
  {
    "example_id": 170,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum([int(digit) for digit in str(n)])\n    return sum_of_digits == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for n in range(start, end+1) if is_sum_of_digits_equal_to_15(n))\n\nstart = 1\nend = 100\nprint(count_integers_with_sum_of_digits_equal_to_15(start, end))"
  },
  {
    "example_id": 171,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0",
      "480.0",
      "720.0",
      "960.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "for i in range(1, 1000):\n    if i % 16 == 0 and i % 15 == 0 and i % 12 == 0:\n        print(i)"
  },
  {
    "example_id": 172,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# \nn = 2 * 3 * 5\nprint(f\"{n}\")\n\n\n# \nn = 2 * 3 * 5\nprint(f\"{n}\")\n\n\n# \nn = 2 * 3 * 5\nprint(f\"{n}\")\n\n\n# \nn = 2 * 3 * 5\nprint(f\"{n}\")\n\n\n# \nn = 2 * 3 * 5\nprint(f\"{n}\")"
  },
  {
    "example_id": 173,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.25"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "distance = math.sqrt((0.5 + 0.5)**2 + (0.75)**2)\nprint(f\"{distance:.2f}\")"
  },
  {
    "example_id": 174,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(3)"
  },
  {
    "example_id": 175,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(len(str(10**5*10**77//10**15//(10**15)**4)) - 1)"
  },
  {
    "example_id": 176,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.5"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "# Solve the equation 5x - 3x + 4(1-4x) = 32\n# Step 1: 5x - 3x = 32 + 4(1-4x)\n# Step 2: 5x = 32 + 4(1-4x) + 3x\n# Step 3: 2x = 39\n# Step 4: x = 19.5\nx = 19.5\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 177,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4752000.0"
    ],
    "annotated_answers": [
      "1320.0"
    ],
    "solution": "distance = 15 * 60 * 5280\nprint(f\"{distance:.0f}\")"
  },
  {
    "example_id": 178,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "83.0"
    ],
    "solution": "def half(n):\n    return n/2\n\nx = symbols('x')\neq = half(3*x - 9) == x + 37\nsolve(eq, x)"
  },
  {
    "example_id": 179,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "450.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "# Find the length of the other diagonal\ndiagonal = 30\n\n# Find the area of the rhombus\narea = (diagonal * diagonal) / 2\n\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 180,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "519.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "# Define the function\ndef divisor(n):\n    \"\"\"\n    Return the list of all divisors of n\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n# Define the function\ndef sum_k(l, u):\n    \"\"\"\n    Return the sum of the numbers from l to u\n    \"\"\"\n    return sum(range(l, u + 1))\n\n# Define the function\ndef is_sum_of_digits_equal_to_15(n):\n    \"\"\"\n    Return True if the sum of the digits of n is equal to 15\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 15\n\n# Define the function\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    \"\"\"\n    Return the number of integers from start to end that have a sum of digits equal to 15\n    \"\"\"\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# Test the function\nstart = 1000\nend = 10000\nprint(f\"{count_integers_with_sum_of_digits_equal_to_15(start, end)}\")"
  },
  {
    "example_id": 181,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "woman_shadow = 6\nflagpole = 20\n\n# Shadow length of woman\nshadow = 9\n\n# Flagpole shadow length\nflagpole_shadow = 20 - woman_shadow\n\n# Total shadow length\ntotal_shadow = shadow + flagpole_shadow\n\n# Total length of flagpole\ntotal_flagpole = 20\n\n# Percentage of flagpole shadow\npercentage = total_shadow / total_flagpole\n\n# Shadow length of flagpole\nshadow_length = total_flagpole * percentage\n\nprint(f\"{shadow_length:.2f}\")"
  },
  {
    "example_id": 182,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "156.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def greatest_common_divisor(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef sum_k(l, u):\n    return sum(k for k in range(l, u + 1))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\n\ndef solve_problem():\n    rope_1 = 18\n    rope_2 = 24\n    divisor = greatest_common_divisor(rope_1, rope_2)\n    pieces = sum_k(divisor, rope_1)\n    print(f\"The greatest possible length of each piece is {pieces} meters\")\n\n\nsolve_problem()"
  },
  {
    "example_id": 183,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "def sum_k(l, u):\n    \"\"\"\n    Return sum of k in l..u.\n    \"\"\"\n    return sum(k for k in range(l, u + 1))\n\n\ndef divisor(n):\n    \"\"\"\n    Return divisor of n.\n    \"\"\"\n    return sum_k(1, n)\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    \"\"\"\n    Return True if sum of digits of n is equal to 15.\n    \"\"\"\n    return sum(int(i) for i in str(n)) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    \"\"\"\n    Return count of integers in start..end with sum of digits equal to 15.\n    \"\"\"\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\n\ndef solve_problem():\n    \"\"\"\n    Return solution of problem.\n    \"\"\"\n    return count_integers_with_sum_of_digits_equal_to_15(1, 1000)\n\n\nif __name__ == '__main__':\n    print(solve_problem())"
  },
  {
    "example_id": 184,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "3400.0"
    ],
    "solution": "x = 0.5\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.62"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Define variables\nwidth = 5\nheight = 7\nborder = 0.5\n\n# Calculate area of red border\narea = border * (width + border) * (height + border)\n\n# Print result\nprint(f\"The area of the red border is {area:.2f} square inches.\")"
  },
  {
    "example_id": 186,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(36**10 / 6**19)"
  },
  {
    "example_id": 187,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "89898.0"
    ],
    "annotated_answers": [
      "89898.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(list(range(l, u + 1)))\n\ndef largest_five_digit_palindrome(start, end):\n    largest = 0\n    for i in range(start, end + 1):\n        if len(str(i)) == 5 and str(i) == str(i)[::-1]:\n            largest = i\n    return largest\n\ndef largest_five_digit_palindrome_divisible_by_6(start, end):\n    largest = 0\n    for i in range(start, end + 1):\n        if len(str(i)) == 5 and str(i) == str(i)[::-1] and i % 6 == 0:\n            largest = i\n    return largest\n\nprint(largest_five_digit_palindrome_divisible_by_6(10000, 99999))"
  },
  {
    "example_id": 188,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define the function\ndef divisor(n):\n    for i in range(1, n+1):\n        if n % i == 0:\n            yield i\n\n# Define the function\ndef sum_k(l, u):\n    for i in range(l, u+1):\n        yield sum(map(int, str(i)))\n\n# Define the function\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(map(int, str(n))) == 15\n\n# Define the function\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end+1) if is_sum_of_digits_equal_to_15(i))\n\n# Print the answer\nprint(count_integers_with_sum_of_digits_equal_to_15(10, 100))"
  },
  {
    "example_id": 189,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "class_average = (20*80 + 8*90 + 2*100) / 30\nprint(class_average)"
  },
  {
    "example_id": 190,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "55.0"
    ],
    "solution": "a = symbols('a')\nb = symbols('b')\nc = symbols('c')\n\n# 1. Solve for angle ABC\nsolve_for_angle_abc = solve(a**2 + b**2 - c**2, a)\n\n# 2. Solve for angle BAC\nsolve_for_angle_bac = solve(b**2 + c**2 - a**2, b)\n\n# 3. Solve for angle CAB\nsolve_for_angle_cab = solve(c**2 + a**2 - b**2, c)\n\n# 4. Print the measure of angle ABC\nprint(f\"Angle ABC: {solve_for_angle_abc}\")\n\n# 5. Print the measure of angle BAC\nprint(f\"Angle BAC: {solve_for_angle_bac}\")\n\n# 6. Print the measure of angle CAB\nprint(f\"Angle CAB: {solve_for_angle_cab}\")"
  },
  {
    "example_id": 191,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "def count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\ndef sum_k(l, u):\n    return sum([i for i in range(l, u+1)])\n\ndef divisor(n):\n    return sum([1 for i in range(1, n+1) if n % i == 0])\n\ndef solution(start, end):\n    return count_integers_with_sum_of_digits_equal_to_15(start, end)\n\nprint(solution(1, 12))"
  },
  {
    "example_id": 192,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# solve the problem\ndef get_num_of_cookies(num_of_pounds, pound_of_cookie_dough, num_of_cookies_to_make):\n    return num_of_pounds / pound_of_cookie_dough\n\n# get the number of cookies\nnum_of_cookies = get_num_of_cookies(3/2, 1/16, 1)\nprint(f\"{num_of_cookies:.2f}\")"
  },
  {
    "example_id": 193,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0",
      "2.0",
      "129.0",
      "2.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "# Define the angle\nx = symbols(\"x\")\n\n# Calculate the angle\nangle = solve(x**2 + 15 * x + 24, x)[0]\n\n# Print the angle\nprint(angle)"
  },
  {
    "example_id": 194,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.39999999999999997"
    ],
    "annotated_answers": [
      "0.4"
    ],
    "solution": "print(2.4 / 6)"
  },
  {
    "example_id": 195,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "x = 16\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 196,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "win = 12 * 0.25\nprint(win)"
  },
  {
    "example_id": 197,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "t = 0\nfor k in itertools.count(start=1):\n    if is_sum_of_digits_equal_to_15(k):\n        t += 1\n    if k > 9.6:\n        break\nprint(t)"
  },
  {
    "example_id": 198,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "628.0"
    ],
    "solution": "count = 0\nfor i in range(1, 200):\n    if is_sum_of_digits_equal_to_15(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 199,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(6*3)"
  },
  {
    "example_id": 200,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "n = 8\nn_shirts = 1\nn_ties = 1\nn_outfits = n_shirts * n_ties\nn_outfits -= 1\nprint(n_outfits)"
  },
  {
    "example_id": 201,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "107.0"
    ],
    "solution": "degrees = 360 / 8\nprint(degrees)"
  },
  {
    "example_id": 202,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    return sum(int(digit) for digit in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef divisor(n):\n    return sum(1 for i in range(1, int(n ** 0.5) + 1) if n % i == 0)\n\ndef main():\n    start = 1980\n    end = 2000\n    decades = [1980, 1990, 2000]\n    ans = 0\n    for decade in decades:\n        ans += count_integers_with_sum_of_digits_equal_to_15(decade, decade + 9)\n    print(ans)\n\nmain()"
  },
  {
    "example_id": 203,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "count = 0\nfor i in range(1000, 10000):\n    if str(i) == str(i)[::-1] and i % 3 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 204,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0",
      "22.0",
      "24.0",
      "12.0",
      "15.0",
      "18.0",
      "21.0",
      "24.0",
      "12.0",
      "16.0",
      "20.0",
      "24.0",
      "12.0",
      "18.0",
      "24.0",
      "24.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "cupcakes = list(range(12, 25))\nchocolate = [i for i in cupcakes if i % 2 == 0]\nraisins = [i for i in cupcakes if i % 3 == 0]\nchocolate_chip = [i for i in cupcakes if i % 4 == 0]\nnuts = [i for i in cupcakes if i % 6 == 0]\n\nprint(f\"Chocolate cupcakes: {chocolate}\")\nprint(f\"Raisins cupcakes: {raisins}\")\nprint(f\"Chocolate chip cupcakes: {chocolate_chip}\")\nprint(f\"Nuts cupcakes: {nuts}\")\n\nprint(f\"Largest possible number of cupcakes that had none of these ingredients: {max(cupcakes)}\")"
  },
  {
    "example_id": 205,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "def divisor(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum_k(l, u):\n    return sum(int(i) for i in str(l) if i in str(u))\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, 15) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(100, 500))"
  },
  {
    "example_id": 206,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7900.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "# Define the perimeter of the square\ns = 20 + 20 + 20 + 20\n\n# Define the perimeter of the right triangle\nr = 20 + 15 + 20 + 15\n\n# Find the area of the square\ns_area = s**2\n\n# Find the area of the right triangle\nr_area = r**2\n\n# Find the area of the triangle\nt_area = r_area - s_area\n\n# Find the area of the square\ns_area = s**2 - t_area\n\nprint(f\"The area of the square is {s_area:.2f} square inches.\")"
  },
  {
    "example_id": 207,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# \nresult = math.sqrt(10 * 15 * 24)\nprint(result)"
  },
  {
    "example_id": 208,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "start = 10\nend = 100\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(start, end))"
  },
  {
    "example_id": 209,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "592.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "# \ndef divisor(n):\n    return [x for x in range(1, int(n ** 0.5) + 1) if n % x == 0]\n\n# \ndef sum_k(l, u):\n    return sum([x for x in range(l, u + 1)])\n\n# \ndef is_sum_of_digits_equal_to_15(n):\n    return sum([int(d) for d in str(n)]) == 15\n\n# \ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum([1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i)])\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 10000))"
  },
  {
    "example_id": 210,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "positive_multiples = 0\nfor i in range(7, 150, 7):\n    positive_multiples += 1\nprint(positive_multiples)"
  },
  {
    "example_id": 211,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(divisors(7))"
  },
  {
    "example_id": 212,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define a function to calculate the average of a list of numbers\ndef average(numbers):\n    return sum(numbers) / len(numbers)\n\n# Test the function with the given list of numbers\nprint(average([6, 8, 9, 11, 16]))"
  },
  {
    "example_id": 213,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a, b, x = symbols(\"a b x\")\n\n# (a,9,5) is an O'Hara triple\neq = (x**2 - a**2 - b**2)\nsol = solve(eq, a)\nprint(f\"{sol[0]}: {sol[1]}\")"
  },
  {
    "example_id": 214,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0",
      "9999.0",
      "15.0",
      "519.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    return sum(int(digit) for digit in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\ndef divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(i for i in range(l, u + 1))\n\ndef solve_15_sum(n):\n    return n - sum_k(1, n - 1)\n\ndef solve_15_sum_of_digits(n):\n    return sum(int(digit) for digit in str(solve_15_sum(n)))\n\ndef solve(n):\n    return solve_15_sum(n) == 15 and solve_15_sum_of_digits(n) == 15\n\ndef main():\n    start = 1000\n    end = 9999\n    count = count_integers_with_sum_of_digits_equal_to_15(start, end)\n    print(f\"The number of integers between {start} and {end} (both inclusive) with a sum of digits equal to 15 is {count}\")\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 215,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Initialize variables\nside_length = 2\nincrease = 21\n\n# Calculate new side length\nnew_side_length = side_length + increase\n\n# Print the result\nprint(f\"The new side length is {new_side_length}\")"
  },
  {
    "example_id": 216,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "# Initialize variables\nn = 2\n\n# Create a list of all possible row and column combinations\nrows = [i for i in range(8)]\ncolumns = [j for j in range(8)]\n\n# Initialize count variable\ncount = 0\n\n# Loop through each row and column combination\nfor i in rows:\n    for j in columns:\n        # If the row and column are the same, increase count\n        if i == j:\n            count += 1\n\n# Print the final count\nprint(count)"
  },
  {
    "example_id": 217,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "politicians = 4\nlawyers = 3\ntotal_handshakes = politicians * (politicians - 1) + lawyers * (politicians - 1)\nprint(total_handshakes)"
  },
  {
    "example_id": 218,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "960.0",
      "240.0",
      "20.0",
      "1220.0"
    ],
    "annotated_answers": [
      "980.0"
    ],
    "solution": "# Define the number of farthings in a pound\nfarthings = 4\n\n# Define the number of pence in a shilling\npence = 12\n\n# Define the number of shillings in a pound\nshillings = 20\n\n# Define the number of pounds in a pound\npounds = 1\n\n# Calculate the number of farthings in a pound\nfarthings_in_a_pound = farthings * pence * shillings\n\n# Calculate the number of pence in a pound\npence_in_a_pound = pence * shillings\n\n# Calculate the number of shillings in a pound\nshillings_in_a_pound = shillings * pounds\n\n# Calculate the total number of farthings\ntotal_farthings = farthings_in_a_pound + pence_in_a_pound + shillings_in_a_pound\n\n# Calculate the number of pence in a pound\npence_in_a_pound = pence * shillings\n\n# Calculate the number of shillings in a pound\nshillings_in_a_pound = shillings * pounds\n\n# Calculate the total number of farthings\ntotal_farthings = farthings_in_a_pound + pence_in_a_pound + shillings_in_a_pound\n\n# Print the number of farthings in a pound\nprint(f\"The number of farthings in a pound is {farthings_in_a_pound}.\")\n\n# Print the number of pence in a pound\nprint(f\"The number of pence in a pound is {pence_in_a_pound}.\")\n\n# Print the number of shillings in a pound\nprint(f\"The number of shillings in a pound is {shillings_in_a_pound}.\")\n\n# Print the total number of farthings\nprint(f\"The total number of farthings is {total_farthings}.\")"
  },
  {
    "example_id": 219,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "import math\nAC = math.sqrt(32**2 + 0**2)\nprint(AC)"
  },
  {
    "example_id": 220,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(6)"
  },
  {
    "example_id": 221,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 222,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define a function for divisor\ndef divisor(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n# Define a function for sum_k\ndef sum_k(l, u):\n    return sum([i for i in range(l, u + 1)])\n\n# Define a function for is_sum_of_digits_equal_to_15\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(i) for i in str(n)]\n    return sum(digits) == 15\n\n# Define a function for count_integers_with_sum_of_digits_equal_to_15\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# Calculate the value of 6 + (8 \\div 2)\nprint(6 + (8 / 2))"
  },
  {
    "example_id": 223,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "class Grid():\n    def __init__(self, size):\n        self.size = size\n\n    def get_number_of_rows(self):\n        return self.size\n\n    def get_number_of_columns(self):\n        return self.size\n\n    def get_number_of_students(self):\n        return self.size * self.size\n\ndef get_number_of_students_in_class(size):\n    for n in range(size, 29):\n        g = Grid(n)\n        if g.get_number_of_rows() * g.get_number_of_columns() == g.get_number_of_students():\n            return g.get_number_of_students()\n\nprint(get_number_of_students_in_class(20))"
  },
  {
    "example_id": 224,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "123.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "# find 76 - (-4*8 - 2) + 13\nprint(76 - (-4*8 - 2) + 13)"
  },
  {
    "example_id": 225,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "# Find the length of the diagonal\nlength_of_diagonal = math.sqrt((300)**2 + (400)**2)\n\n# Find the length of the side of the field\nlength_of_side = 300\n\n# Find the number of feet Martha walks\nmartha_feet = length_of_side * 2\n\n# Find the number of feet Jim walks\njim_feet = length_of_diagonal\n\n# Print the result\nprint(f\"{martha_feet - jim_feet:.2f}\")"
  },
  {
    "example_id": 226,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2400.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "inches_per_mile = 20\nactual_distance = 120\ninches_apart = actual_distance * inches_per_mile\nprint(inches_apart)"
  },
  {
    "example_id": 227,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "print(round(15.49999999))"
  },
  {
    "example_id": 228,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "def divisor(n):\n    return set(\n        i\n        for i in range(1, int(n ** 0.5) + 1)\n        if n % i == 0\n    )\n\n\ndef sum_k(l, u):\n    return sum(l) + sum(u)\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum([int(digit) for digit in str(n)]) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 100))"
  },
  {
    "example_id": 229,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5321.0"
    ],
    "annotated_answers": [
      "5321.0"
    ],
    "solution": "print((-math.sqrt(5321))**2)"
  },
  {
    "example_id": 230,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum(divisor(l) + divisor(u))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(i) for i in str(n)) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(\n        1\n        for i in range(start, end)\n        if is_sum_of_digits_equal_to_15(i)\n    )\n\n\n# largest possible radius\nprint(max(divisor(60)))"
  },
  {
    "example_id": 231,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "73.0",
      "146.0",
      "219.0",
      "292.0",
      "365.0",
      "438.0",
      "511.0",
      "584.0",
      "657.0",
      "730.0",
      "803.0",
      "876.0",
      "949.0"
    ],
    "annotated_answers": [
      "949.0"
    ],
    "solution": "for i in range(0,1000,73):\n    print(i)"
  },
  {
    "example_id": 232,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "boxes = 77 // 12\nprint(boxes)"
  },
  {
    "example_id": 233,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "mean = (8 + 12 + 16 + 20 + 24) / 5\nprint(mean)"
  },
  {
    "example_id": 234,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "commission = 60 * 0.05\nprint(commission)"
  },
  {
    "example_id": 235,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "11.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "height_ft_in = 6*12 + 16\nhead_height_ft_in = height_ft_in*1/8\nhead_height_ft = head_height_ft_in//12\nhead_height_in = head_height_ft_in%12\nprint(f\"{head_height_ft} feet {head_height_in} inches\")"
  },
  {
    "example_id": 236,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "answer = 35 - 8 - 15 - 3\nprint(answer)"
  },
  {
    "example_id": 237,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "3024.0"
    ],
    "solution": "# choose 4 officers from a club of 9 people\n# 9C4 = 9! / (4! * 5!) = 126\nprint(126)"
  },
  {
    "example_id": 238,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print((5**5)//5**4-(5**3)+5**2*5)"
  },
  {
    "example_id": 239,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "4.0",
      "3.0",
      "6.0",
      "3.0",
      "6.0",
      "3.0",
      "6.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "blue = 0\nwhile blue < 3:\n    blue += 1\n    for num in range(1, 6):\n        if num not in [blue, blue * 2]:\n            print(blue, blue * 2)"
  },
  {
    "example_id": 240,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = 1\nwhile (x * 5)!= (21 + (2 * x)):\n    x += 1\n\nprint(x)"
  },
  {
    "example_id": 241,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum([int(i) for i in str(n)])\n    return sum_of_digits == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 100))"
  },
  {
    "example_id": 242,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Define the function\ndef divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n# Define the function\ndef sum_k(l, u):\n    return sum(int(i) for i in str(l) if i.isdigit()) + sum(int(i) for i in str(u) if i.isdigit())\n\n# Define the function\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, n) == 15\n\n# Define the function\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\n# Test the function\nprint(count_integers_with_sum_of_digits_equal_to_15(-50, 50))"
  },
  {
    "example_id": 243,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "# Define function\ndef is_sum_of_digits_equal_to_15(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# Print result\nprint(count_integers_with_sum_of_digits_equal_to_15(0, 100))"
  },
  {
    "example_id": 244,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "start = 30\nend = 50\n\n# We know that the sum of all the digits must be equal to 15\ndef is_sum_of_digits_equal_to_15(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(start, end))"
  },
  {
    "example_id": 245,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "red_cars = 12\nwhite_cars = 4\ntwo_door_cars = 4\nfour_door_cars = 15\ntotal_cars = red_cars + white_cars + two_door_cars + four_door_cars\n\nprint(four_door_cars)"
  },
  {
    "example_id": 246,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.14285714285714285"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(7**(-1)**(-1))"
  },
  {
    "example_id": 247,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "# Enter your answer between quotation marks.\nprint(\"3\")"
  },
  {
    "example_id": 248,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "for c in range(21, 30):\n    if c % 7 == 0 and c % 3!= 0:\n        print(c)\n        break"
  },
  {
    "example_id": 249,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.5"
    ],
    "annotated_answers": [
      "7.78"
    ],
    "solution": "n = 0.75\nfudge_price = 10\nfudge_cost = fudge_price * n\nprint(f\"{fudge_cost:.2f}\")"
  },
  {
    "example_id": 250,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13992.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "def sum_k(l, u):\n    return sum(int(s) for s in str(l + u))\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, n) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\n\ndef divisor(n):\n    return sum(1 for i in range(1, n) if n % i == 0)\n\n\ndef count_prime_numbers(start, end):\n    return sum(1 for i in range(start, end) if divisor(i) == 2)\n\n\ndef find_prime_numbers(start, end):\n    return [i for i in range(start, end) if divisor(i) == 2]\n\n\nstart, end = 1, 1000000\nans = count_integers_with_sum_of_digits_equal_to_15(start, end)\nprint(ans)"
  },
  {
    "example_id": 251,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-16.0"
    ],
    "annotated_answers": [
      "-16.0"
    ],
    "solution": "# compute (-144) / 9\nprint((-144) // 9)"
  },
  {
    "example_id": 252,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "592.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define variables\nn = 12\nd = 3\n\n# Define function to check if a number is a divisor of n\ndef is_divisor(n, d):\n    return n % d == 0\n\n# Define function to check if a number is a sum of digits equal to 15\ndef is_sum_of_digits_equal_to_15(n):\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    return sum == 15\n\n# Define function to count integers between start and end with sum of digits equal to 15\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# Solve the problem\ncount = count_integers_with_sum_of_digits_equal_to_15(1, 9999)\nprint(count)"
  },
  {
    "example_id": 253,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0",
      "84.0",
      "85.0",
      "84.0",
      "84.0",
      "88.0",
      "81.0",
      "90.0",
      "88.0",
      "84.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "for a in range(1, 40):\n    for b in range(1, 40):\n        if a * b == 80:\n            continue\n        elif a * b > 80:\n            print(a * b)\n            break"
  },
  {
    "example_id": 254,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1260.0"
    ],
    "annotated_answers": [
      "1260.0"
    ],
    "solution": "distance = math.sqrt(3*6*10*15*21*28)\nprint(distance)"
  },
  {
    "example_id": 255,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-15.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "answer = 40 - 25 - 30\nprint(answer)"
  },
  {
    "example_id": 256,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.75"
    ],
    "annotated_answers": [
      "16.75"
    ],
    "solution": "print(14.6 + 2.15)"
  },
  {
    "example_id": 257,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "351.0"
    ],
    "solution": "def divisor(n):\n    \"\"\"\n    Return a list of all the divisors of n\n    \"\"\"\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    \"\"\"\n    Return the sum of the integers from l to u\n    \"\"\"\n    return sum(range(l, u + 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    \"\"\"\n    Return True if the sum of the digits of n is 15\n    \"\"\"\n    return sum(int(d) for d in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    \"\"\"\n    Return the number of integers from start to end that have a sum of digits equal to 15\n    \"\"\"\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\ndef cake_days(start_year, end_year):\n    \"\"\"\n    Return the total number of cake-eating days from start_year to end_year\n    \"\"\"\n    return sum(count_integers_with_sum_of_digits_equal_to_15(1, 12) for _ in range(start_year, end_year + 1))\n\nprint(cake_days(2008, 2016))"
  },
  {
    "example_id": 258,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "250.0"
    ],
    "annotated_answers": [
      "550.0"
    ],
    "solution": "gallons = 12000/48\nprint(gallons)"
  },
  {
    "example_id": 259,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 0\nwhile True:\n    n = 21420 * N\n    if n % 6 == 0:\n        print(n)\n        break\n    N += 1"
  },
  {
    "example_id": 260,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "for i in range(1, 20):\n    if 5 % i == 0:\n        print(i)"
  },
  {
    "example_id": 261,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 4\ny = 3\nprint(x+y)"
  },
  {
    "example_id": 262,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.000346860908775581"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(1/31/93)"
  },
  {
    "example_id": 263,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "# define function to check divisibility\ndef divisor(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n# define function to sum k-th digits\ndef sum_k(l, u):\n    return sum([int(x)**u for x in str(l)])\n\n# define function to check if sum of digits is equal to 15\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, 1) == 15\n\n# define function to count integers with sum of digits equal to 15\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# count terms less than or equal to 20\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 20))"
  },
  {
    "example_id": 264,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(315, 108))"
  },
  {
    "example_id": 265,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "def average_integers(list):\n    sum = 0\n    for x in list:\n        sum += x\n    return sum / len(list)\n\nprint(average_integers([71, 72, 73, 74, 75]))"
  },
  {
    "example_id": 266,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.073"
    ],
    "annotated_answers": [
      "0.303"
    ],
    "solution": "def divisor(n):\n    \"\"\"\n    Returns all the divisors of n\n    \"\"\"\n    return [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    \"\"\"\n    Returns the sum of all integers from l to u\n    \"\"\"\n    return sum(range(l, u + 1))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    \"\"\"\n    Returns True if the sum of the digits of n is 15\n    \"\"\"\n    return sum(int(digit) for digit in str(n)) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    \"\"\"\n    Returns the count of integers from start to end with sum of digits equal to 15\n    \"\"\"\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\n\n# 1/10 + 1/1000\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 1000) / 1000)"
  },
  {
    "example_id": 267,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print((30 * 20 + 20 * 30) / (20 + 30))"
  },
  {
    "example_id": 268,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\n\nsol = solve((x/2 + x/3) - 5, x)\nprint(sol)"
  },
  {
    "example_id": 269,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "solution = int((35 - 8) / 13)\nprint(solution)"
  },
  {
    "example_id": 270,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "5.0",
      "30.0",
      "30.0"
    ],
    "annotated_answers": [
      "286.0"
    ],
    "solution": "def smallest_product_of_one_prime_and_two_distinct_two_digit_primes():\n    smallest = 1000000\n    for p in range(2, 10):\n        for q in range(p + 1, 100):\n            for r in range(q + 1, 100):\n                if is_prime(p) and is_prime(q) and is_prime(r):\n                    product = p * q * r\n                    if product < smallest:\n                        smallest = product\n                        print(f\"{p} * {q} * {r} = {product}\")\n    return smallest\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_sum_of_digits_equal_to_15(n):\n    s = 0\n    for d in str(n):\n        s += int(d)\n    return s == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef divisor(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n / i!= i:\n                divisors.append(int(n / i))\n    return divisors\n\nprint(smallest_product_of_one_prime_and_two_distinct_two_digit_primes())"
  },
  {
    "example_id": 271,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.24"
    ],
    "solution": "# Define the number of occurrences of each outcome\nn14 = 14\nn5 = 5\nn9 = 9\nn7 = 7\nn7 = 7\nn8 = 8\n\n# Define the total number of outcomes\ntotal = n14 + n5 + n9 + n7 + n7 + n8\n\n# Calculate the average of the 50 outcomes\naverage = (n14 + n5 + n9 + n7 + n7 + n8) / 50\n\n# Print the answer\nprint(f\"{average:.2f}\")"
  },
  {
    "example_id": 272,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40320.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "n = 8\nchoices = itertools.permutations(string.ascii_uppercase[:n], n)\nprint(sum(1 for c in choices))"
  },
  {
    "example_id": 273,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "# Let x be an integer between 1 and 9\n# 5 + 4x = 277\n# 4x = 277 - 5\n# 4x = 272\n# x = 272 / 4\n# x = 65\n# Therefore, the integer was 65.\nx = 65\nprint(f\"The integer was {x}.\")"
  },
  {
    "example_id": 274,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.17"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "r = 15\n\n# Find the distance between the two poles\ndistance = 14\n\n# Find the distance from the starting point to one of the poles\np = 5\n\n# Find the height of Paul above the ground\nh = 3\n\n# Find the distance from the pole to Paul\nd = p - distance/2\n\n# Find the height of the pole above the ground\nH = 15 - h\n\n# Find the length of the rope\nL = math.sqrt(d**2 + H**2)\n\nprint(f\"{L:.2f}\")"
  },
  {
    "example_id": 275,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.95"
    ],
    "annotated_answers": [
      "4.95"
    ],
    "solution": "print(max(4.5, 4.45, 0.45, 0.54) + min(4.5, 4.45, 0.45, 0.54))"
  },
  {
    "example_id": 276,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(l) + sum(range(l, u + 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    if n < 10:\n        return n == 15\n    elif n % 10 == 0:\n        return False\n    else:\n        return is_sum_of_digits_equal_to_15(n // 10)\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(10, 100))"
  },
  {
    "example_id": 277,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "median = 12\nmean = (12 + 21 + 6 + 11 + 30) / 5\nprint(median + mean)"
  },
  {
    "example_id": 278,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-370.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "# Calculate the minimum number of points Hadley must score on the final test\nmin_points = 80 - sum(range(92, 87, -1))\nprint(min_points)"
  },
  {
    "example_id": 279,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.4000014000014"
    ],
    "annotated_answers": [
      "1.4"
    ],
    "solution": "# reciprocal of 0.714285\nprint(1/0.714285)"
  },
  {
    "example_id": 280,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 11\nprint(x)"
  },
  {
    "example_id": 281,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.5"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Number of people in Mathopolis\nN = 100\n\n# Number of children\nC = N/2\n\n# Number of adults\nA = N - C\n\n# Number of female adults\nF = A/2\n\n# Number of female adults with exactly one child\nc = F/2\n\n# Number of children\nn = C - c\n\n# Percent of people in Mathopolis who are children\np = (n/N) * 100\n\nprint(f\"{p:.2f}%\")"
  },
  {
    "example_id": 282,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "280.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "# Create a dictionary of symbols\ndogs, cats = symbols('dogs cats')\n\n# Create an equation\neq = dogs/cats - 4/3\n\n# Solve for dogs\ndogs = solve(eq, dogs)[0]\n\n# Calculate the total\ntotal = dogs + cats\n\n# Calculate the number of dogs\ndogs = 280 - cats\n\n# Print the result\nprint(f\"{dogs} dogs\")"
  },
  {
    "example_id": 283,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.59025044449664"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "radius = 12/math.pi\narea = radius**2\nprint(area)"
  },
  {
    "example_id": 284,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Solution\nimport numpy as np\n\nyears = np.arange(1944, 2001)\nhurricanes = np.array([5, 14, 17, 12, 2, 4, 2, 1])\n\nmedian = np.median(hurricanes)\nprint(median)"
  },
  {
    "example_id": 285,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69.0",
      "15.0",
      "4.0",
      "78.0",
      "15.0",
      "4.0",
      "87.0",
      "15.0",
      "4.0",
      "96.0",
      "15.0",
      "4.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "n = 15\nl = 1\nu = 100\nfor i in range(l, u):\n    if is_sum_of_digits_equal_to_15(i):\n        count = count_integers_with_sum_of_digits_equal_to_15(l, u)\n        if count == 1:\n            print(f\"{i:d} is the only integer with the sum of its digits equal to {n}\")\n        elif count > 1:\n            print(f\"{i:d} is an integer with the sum of its digits equal to {n}\")\n            print(f\"{count:d} such integers exist\")"
  },
  {
    "example_id": 286,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "num_kids = 44 // 3\nprint(num_kids)"
  },
  {
    "example_id": 287,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.07919281405437",
      "30.0"
    ],
    "annotated_answers": [
      "210.0"
    ],
    "solution": "def simplify_sqrt(n):\n    # convert to int\n    n = int(n)\n    # find factors of n\n    factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n    # find the common factor of all factors\n    common_factor = 1\n    for factor in factors:\n        common_factor *= factor\n    # return the square root of the common factor\n    return math.sqrt(common_factor)\n\n\n# simplify the sqrt\nresult = simplify_sqrt(30 * 21 * 70)\nprint(result)"
  },
  {
    "example_id": 288,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, int(n**0.5) + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum(list(range(l, u + 1)))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(i) for i in str(n)) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(10, 99))"
  },
  {
    "example_id": 289,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.38"
    ],
    "annotated_answers": [
      "0.38"
    ],
    "solution": "# Find the number of pounds per week\n\n# Define the number of weeks in a year\nweeks_per_year = 52\n\n# Define the number of years in a lifetime\nyears = 75\n\n# Define the pounds per lifetime\npounds_per_lifetime = 1483\n\n# Calculate the pounds per week\npounds_per_week = pounds_per_lifetime / (years * weeks_per_year)\n\nprint(f\"{pounds_per_week:.2f}\")"
  },
  {
    "example_id": 290,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-72.0",
      "32.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = -12\ny = 6*x\nprint(y)\nprint(20-x)"
  },
  {
    "example_id": 291,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# find the prime factors of 24\nfactors = []\nfor i in range(2, 12):\n    if 24 % i == 0:\n        factors.append(i)\n        break\n\n# find the prime factors of 2400\nfactors_of_2400 = []\nfor i in range(2, 12):\n    if 2400 % i == 0:\n        factors_of_2400.append(i)\n        break\n\n# determine how many primes are needed to make 2400\ncount = 0\nfor i in factors_of_2400:\n    for j in factors:\n        if i % j == 0:\n            count += 1\n            break\n\n# print the number of primes\nprint(count)"
  },
  {
    "example_id": 292,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# \nv = 1/4\n# \nt = 2.5\n# \nl = 1000 * t / v\nprint(f\"{l:.2f}\")"
  },
  {
    "example_id": 293,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# Perimeter of \u25b3PQR\nperimeter = 8 + 15 + 15\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 294,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-13.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\ndef solve_problem():\n    # Find the smallest positive integer value of x such that\n    # 12 / (x + 1) is an integer\n    for x in range(1, 1000):\n        if 12 // (x + 1) == int(12 // (x + 1)):\n            return x\n    return -1\n\n\nprint(solve_problem())"
  },
  {
    "example_id": 295,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "num_chairs_with_odd_numbers = sum(is_sum_of_digits_equal_to_15(i) for i in range(1, 121))\nprint(f\"{num_chairs_with_odd_numbers}\")"
  },
  {
    "example_id": 296,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13992.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum(divisor(l)) + sum(divisor(u))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    if n == 0:\n        return False\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 1000000))"
  },
  {
    "example_id": 297,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1201.78"
    ],
    "annotated_answers": [
      "169.0"
    ],
    "solution": "# Define the perimeter of the rectangle\nperimeter = 104\n\n# Define the side of the rectangle\nside = perimeter / 3\n\n# Print the area of each square\nprint(f\"The area of each square is {side**2:.2f} square inches.\")"
  },
  {
    "example_id": 298,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "def lcm(numbers):\n    lcm = numbers[0]\n    for i in range(1, len(numbers)):\n        lcm = int(lcm * numbers[i] / gcd(lcm, numbers[i]))\n    return lcm\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(lcm([1, 2, 3, 4, 5, 6, 7]))"
  },
  {
    "example_id": 299,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define a function that returns True if n is a divisor of 100 and 150\ndef is_divisor(n):\n    return n % 100 == 0 and n % 150 == 0\n\n# Define a function that returns True if the sum of the digits of n is 15\ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    return sum_of_digits == 15\n\n# Define a function that returns the number of integers between start and end\n# that have the property that the sum of their digits is equal to 15\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\n# Call the function with start = 10 and end = 100 to get the number of\n# positive two-digit integers between 10 and 100 that are divisors of both\n# 100 and 150\nprint(count_integers_with_sum_of_digits_equal_to_15(10, 100))"
  },
  {
    "example_id": 300,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "# define variables\nx = symbols('x')\ny = symbols('y')\nz = symbols('z')\n\n# define equation\neq = (x * 5) + y + z\n\n# solve equation\nsolve(eq)\n\n# print result\nprint(solve(eq))"
  },
  {
    "example_id": 301,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3333333333333333"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(1/3)"
  },
  {
    "example_id": 302,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "for x in range(100):\n    if 3 < 7*x < 9 and 5 < 7*x < 9:\n        print(x)"
  },
  {
    "example_id": 303,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "number_of_digits = 4\ndistinct_numbers = 4\nprint(distinct_numbers)"
  },
  {
    "example_id": 304,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "french_students = 8\nspanish_students = 12\nboth_students = 3\ntotal_students = 30\n\nprint(f\"{total_students - french_students - spanish_students - both_students:d} students take neither French nor Spanish.\")"
  },
  {
    "example_id": 305,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.5"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# find the value of x\nx = 5 + 4.5\nprint(x)"
  },
  {
    "example_id": 306,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = 14\nprint(x)"
  },
  {
    "example_id": 307,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.4"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 12 / 5\nprint(x + 3)"
  },
  {
    "example_id": 308,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum([int(i) for i in range(l, u+1)])\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    s = sum([int(i) for i in str(n)])\n    return s == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(10, 100))"
  },
  {
    "example_id": 309,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 2\nb = 3\nc = 4\n\nprint((3*a**2*b)/(5*a*c)*(10*c)/(6*a*b))"
  },
  {
    "example_id": 310,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "7.0",
      "17.0",
      "1.0",
      "2.0",
      "3.0",
      "5.0",
      "6.0",
      "17.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "bill_combinations = itertools.combinations(range(1, 20), 5)\n\nfor bills in bill_combinations:\n    total = sum(bills)\n    if total == 17:\n        print(f\"{bills} - {total}\")"
  },
  {
    "example_id": 311,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.25"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    return sum(int(digit) for digit in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\ndef sum_k(l, u):\n    return sum(i for i in range(l, u + 1))\n\ndef divisor(n):\n    return sum_k(1, n) - sum_k(1, int(n ** 0.5))\n\n# Area of triangle ABC\n# Given point D is on hypotenuse BC and altitude AD\n# Formula for area of triangle is 1/2 base times height\n# Base is half hypotenuse\n# Height is altitude\n\nbase = 0.5 * 5\nheight = 5\n\n# Formula for area is 1/2 base times height\narea = 0.5 * base * height\n\n# Area is 1/2 times half hypotenuse times altitude\nprint(f\"The area of triangle ABC is {area:.2f}\")"
  },
  {
    "example_id": 312,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 14\nprint(x)"
  },
  {
    "example_id": 313,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5",
      "21.0",
      "20.5"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "ambulance_speed = 40\nambulance_route_length = 20\nhelicopter_speed = 1\nair_route_length = 15\nhelicopter_takeoff_time = 3\nhelicopter_landing_time = 3\n\nambulance_time = ambulance_route_length / ambulance_speed\nhelicopter_time = (air_route_length + helicopter_takeoff_time + helicopter_landing_time) / helicopter_speed\n\nprint(f\"The ambulance takes {ambulance_time:.2f} minutes to complete its trip\")\nprint(f\"The helicopter takes {helicopter_time:.2f} minutes to complete its trip\")\n\nprint(f\"The helicopter takes {helicopter_time - ambulance_time:.2f} minutes to complete its trip (including takeoff and landing)\")"
  },
  {
    "example_id": 314,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 4\nprint(x)"
  },
  {
    "example_id": 315,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.973665961010276"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Define the altitude length\nh = 6\n\n# Define the hypotenuse length\nc = math.sqrt(2**2 + h**2)\n\n# Calculate the area\na = (c * h) / 2\n\n# Print the area\nprint(f\"The area of the triangle is: {a}\")"
  },
  {
    "example_id": 316,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "61.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "print(5**3 - (3**2 - 5)**3)"
  },
  {
    "example_id": 317,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "630000.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# Number of ways to choose setter and spiker\n# 10C5 = 252\nn_ways = math.factorial(10) // math.factorial(5) // math.factorial(5)\n\n# Number of ways to choose setter\n# 5C2 = 10\nn_setters = math.factorial(5) // math.factorial(2) // math.factorial(3)\n\n# Number of ways to choose spiker\n# 5C2 = 10\nn_spikers = math.factorial(5) // math.factorial(2) // math.factorial(3)\n\n# Number of ways to choose a player who prefers to be a spiker\n# 5C1 = 5\nn_spiker_preference = math.factorial(5) // math.factorial(1) // math.factorial(4)\n\n# Number of ways to choose a player who prefers to be a setter\n# 5C1 = 5\nn_setter_preference = math.factorial(5) // math.factorial(1) // math.factorial(4)\n\n# Number of ways to choose a player who is fine either way\n# 1C1 = 1\nn_fine_preference = math.factorial(1) // math.factorial(0) // math.factorial(1)\n\n# Total number of ways\ntotal = n_ways * n_setters * n_spikers * n_setter_preference * n_spiker_preference * n_fine_preference\nprint(f\"Total number of ways: {total}\")"
  },
  {
    "example_id": 318,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "129.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "perimeter = 30 + 50 + 25 + 24\nprint(perimeter)"
  },
  {
    "example_id": 319,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.35"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 10\nm = 8\nx = symbols('x')\nsol = solve(x**2 + n**2 - 2*x*n + m**2 - 2*x*m, x)\nprint(f\"{sol[0]:.2f}\")"
  },
  {
    "example_id": 320,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Find the smallest number\ndef solve_problem():\n    # Find the largest number\n    largest = 13\n\n    # Find the sum of the remaining numbers\n    sum_of_remaining = sum([1, 2, 3, 4, 5]) - largest\n\n    # Find the smallest number\n    smallest = largest - sum_of_remaining\n\n    # Return the smallest number\n    return smallest\n\n\n# Test the function\nprint(solve_problem())"
  },
  {
    "example_id": 321,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(len(str(31/11111).split('.')[1]))"
  },
  {
    "example_id": 322,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(divisor(u)) - sum(divisor(l - 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(i) for i in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 100))"
  },
  {
    "example_id": 323,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "n = -10 // 5 - 3\nprint(n)"
  },
  {
    "example_id": 324,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "a = 3\nb = 5\nc = 7\n\ndef largest_angle(a, b, c):\n    largest = max(a, b, c)\n    return largest\n\nprint(largest_angle(a, b, c))"
  },
  {
    "example_id": 325,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0",
      "56.0",
      "91.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def factor_or_multiple(number, divisor):\n    if number % divisor == 0:\n        return True\n    else:\n        return False\n\ndef solve(number_list):\n    result = []\n    for number in number_list:\n        if factor_or_multiple(number, 34) or factor_or_multiple(number, 7):\n            result.append(number)\n    return result\n\nprint(solve([1, 2, 3, 4, 8, 14, 17, 29, 56, 91]))"
  },
  {
    "example_id": 326,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "perimeter = 2 * (12 + 16)\nprint(perimeter)"
  },
  {
    "example_id": 327,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "# \n\ndef supplement(n):\n    return 180 - n\n\nprint(supplement(50))"
  },
  {
    "example_id": 328,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "# \ndef divisor(n):\n    return sum(1 for i in range(1, int(n ** 0.5) + 1) if n % i == 0)\n\n# \ndef sum_k(l, u):\n    return sum(i for i in range(l, u + 1))\n\n# \ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(i) for i in str(n)) == 15\n\n# \ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\n# \nprint(count_integers_with_sum_of_digits_equal_to_15(100, 999))"
  },
  {
    "example_id": 329,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "x = 1.5\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 330,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Enrico's list\nenrico = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]\n\n# Marie's list\nmarie = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]\n\n# count common elements between the two lists\nprint(sum(x in marie for x in enrico))"
  },
  {
    "example_id": 331,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "735.0"
    ],
    "solution": "# Define symbols\nx = symbols(\"x\")\ny = symbols(\"y\")\nz = symbols(\"z\")\n\n# Define the function\nf = x**2 + 5*x*y + 3*y**2 + 2*x + 3*y + z\n\n# Find the roots\nsolutions = solve(f, x, y, z)\n\n# Print the solutions\nprint(solutions)"
  },
  {
    "example_id": 332,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def sum_of_first_9_prime_numbers():\n    # Define a list of prime numbers\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    # Sum the first 9 prime numbers\n    sum_of_first_9_prime_numbers = sum(prime_numbers[:9])\n    return sum_of_first_9_prime_numbers\n\nprint(sum_of_first_9_prime_numbers())"
  },
  {
    "example_id": 333,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "m = 6\nn = 5\n\ndef least_muffins_in_batch(m, n):\n    least = 0\n    for i in range(m):\n        least += 20\n    return least + (m * n)\n\nprint(least_muffins_in_batch(m, n))"
  },
  {
    "example_id": 334,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "298.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1 or n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_perfect_square(n):\n    return int(math.sqrt(n)) == math.sqrt(n)\n\nsum = 0\nfor i in range(100, 201):\n    if is_prime(i) and is_perfect_square(i + 1):\n        sum += i\n\nprint(sum)"
  },
  {
    "example_id": 335,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(round(pow(1/23, 1000)))"
  },
  {
    "example_id": 336,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# define a function to compute the area of a square\ndef area_square(side):\n    return side**2\n\n# compute the area of the smaller square\narea_small_square = area_square(4)\n\n# compute the area of the larger square\narea_large_square = area_square(4 * 3)\n\n# compute the ratio of the area of the smaller square to the area of the larger square\nratio = area_small_square / area_large_square\n\n# compute the length of the side of the larger square\nside_large_square = 9 * area_small_square / area_large_square\n\nprint(f\"The side of the larger square is {side_large_square:.2f} inches.\")"
  },
  {
    "example_id": 337,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "510.0"
    ],
    "solution": "# \ndef is_sum_of_digits_equal_to_15(n):\n    return sum([int(digit) for digit in str(n)]) == 15\n\n# \ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# \ndef sum_k(l, u):\n    return sum(list(range(l, u + 1)))\n\n# \ndef divisor(n):\n    return sum([1 for i in range(1, int(n**0.5) + 1) if n % i == 0])\n\n# \ndef solution(n):\n    count = 0\n    for i in range(1, n + 1):\n        if divisor(i) == 2:\n            count += 1\n    return count\n\nprint(solution(520))"
  },
  {
    "example_id": 338,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "def balls(n, r):\n    if r < 0 or n < r:\n        return 0\n    if r == 0:\n        return 1\n    return balls(n - 1, r - 1) + balls(n - 1, r)\nprint(balls(20, 2))"
  },
  {
    "example_id": 339,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "result = (2 * 750 + 200) / 4 - (750 / 2)\nprint(result)"
  },
  {
    "example_id": 340,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "handshakes = 6 * 6\nprint(handshakes)"
  },
  {
    "example_id": 341,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "fillings = ['turkey', 'ham', 'roast beef', 'cheese', 'tomatoes', 'peppers','sprouts', 'oranges', 'licorice']\n\ndef sandwich(filling1, filling2):\n    return filling1 + filling2\n\ndef is_valid_sandwich(sandwich):\n    if sandwich not in fillings:\n        return False\n    return True\n\ndef order_sandwich(filling1, filling2):\n    if is_valid_sandwich(filling1) and is_valid_sandwich(filling2):\n        return sandwich(filling1, filling2)\n    return None\n\ndef get_all_sandwiches():\n    all_sandwiches = []\n    for filling1 in fillings:\n        for filling2 in fillings:\n            if filling1!= filling2:\n                all_sandwiches.append(order_sandwich(filling1, filling2))\n    return all_sandwiches\n\ndef count_valid_sandwiches():\n    count = 0\n    for sandwich in get_all_sandwiches():\n        if sandwich is not None:\n            count += 1\n    return count\n\nprint(count_valid_sandwiches())"
  },
  {
    "example_id": 342,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 4\nb = 78\nj = b + 10\nfor i in range(1, n):\n    if i == 1:\n        j += 10\n    if i == 2:\n        j -= 10\n    if i == 3:\n        j += 20\n    if i == 4:\n        j += 20\navg_j = (j + b) / 2\nprint(f\"{avg_j - b:.2f}\")"
  },
  {
    "example_id": 343,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "# Calculate Carolyn's share\ncarolyn_share = 77 // 4\nprint(f\"{carolyn_share:.2f}\")"
  },
  {
    "example_id": 344,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    return sum(int(d) for d in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 50))"
  },
  {
    "example_id": 345,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.4",
      "1.8",
      "7.2",
      "5.4",
      "1.8"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "# Number of pounds of walnuts\nwalnuts = 9 * 3/5\n\n# Number of pounds of cashews\ncashews = 9 * 1/5\n\n# Total number of pounds of nuts\ntotal = walnuts + cashews\n\n# Total number of pounds of walnuts in the mixture\ntotal_walnuts = walnuts\n\n# Total number of pounds of cashews in the mixture\ntotal_cashews = cashews\n\n# Print the number of pounds of walnuts\nprint(f\"{walnuts:.1f}\")\n\n# Print the number of pounds of cashews\nprint(f\"{cashews:.1f}\")\n\n# Print the total number of pounds of nuts\nprint(f\"{total:.1f}\")\n\n# Print the total number of pounds of walnuts in the mixture\nprint(f\"{total_walnuts:.1f}\")\n\n# Print the total number of pounds of cashews in the mixture\nprint(f\"{total_cashews:.1f}\")"
  },
  {
    "example_id": 346,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Define degrees for hour hand and minute hand\nhour_degree = 30\nminute_degree = 6\n\n# Calculate angle\nangle = hour_degree + minute_degree\n\n# Print angle\nprint(angle)"
  },
  {
    "example_id": 347,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def divisor(n):\n    return set(i for i in range(1, int(n**0.5) + 1) if n % i == 0)\n\n\ndef sum_k(l, u):\n    return sum(int(i) for i in str(l) if i in string.digits)\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, n) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\n\ndef multiples_of_3(start, end):\n    return count_integers_with_sum_of_digits_equal_to_15(start, end)\n\n\nprint(multiples_of_3(100, 1000))"
  },
  {
    "example_id": 348,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "quarters = 8\nheight = 12\n\nprint(quarters * height)"
  },
  {
    "example_id": 349,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "592.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def divisor(n):\n    return [x for x in range(1, int(n**0.5) + 1) if n % x == 0]\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    s = sum([int(d) for d in str(n)])\n    return s == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for x in range(start, end) if is_sum_of_digits_equal_to_15(x))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 10000))"
  },
  {
    "example_id": 350,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "148.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum([int(digit) for digit in str(n)])\n    if sum_of_digits == 15:\n        return True\n    else:\n        return False\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\n\ndef divisor(n):\n    return sum([i for i in range(1, int(n ** 0.5) + 1) if n % i == 0])\n\n\ndef sum_of_divisors(n):\n    return sum(range(1, int(n ** 0.5) + 1))\n\n\ndef main():\n    count = count_integers_with_sum_of_digits_equal_to_15(1, 2008)\n    print(f\"{count}\")\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 351,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 11 - 3/3\nprint(n)"
  },
  {
    "example_id": 352,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.26666666666666666"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(4/15)"
  },
  {
    "example_id": 353,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 8\n\ndef divisor(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum_k(l, u):\n    s = 0\n    for i in range(l, u + 1):\n        s += i\n    return s\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef find_minimum_weeks_for_pair_of_people_to_hug_at_least_once(n):\n    divisors = divisor(n)\n    for i in range(len(divisors)):\n        if sum_k(divisors[i], n - divisors[i]) >= n:\n            return count_integers_with_sum_of_digits_equal_to_15(divisors[i], n - divisors[i])\n    return -1\n\nprint(find_minimum_weeks_for_pair_of_people_to_hug_at_least_once(n))"
  },
  {
    "example_id": 354,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "A = 20\nprint(A)"
  },
  {
    "example_id": 355,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Solution\n\ndef divisor(n):\n    return [i for i in range(1, int(n**0.5) + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return [sum(map(int, str(i))) for i in range(l, u+1)]\n\ndef is_sum_of_digits_equal_to_15(n):\n    return any(i in divisor(n) for i in sum_k(10, 99))\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end+1) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(10, 99))"
  },
  {
    "example_id": 356,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "3.0",
      "1.0",
      "3.0",
      "4.0",
      "1.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "360.0"
    ],
    "solution": "for num in range(1, 5):\n    divisible_by = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisible_by.append(i)\n    print(num, divisible_by)"
  },
  {
    "example_id": 357,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0",
      "1300.0",
      "100.0",
      "1000.0",
      "1300.0",
      "15.0",
      "18.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef divisor(n):\n    for i in range(1, n + 1):\n        if n % i == 0:\n            yield i\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nstart = 1000\nend = 1300\nprint(f\"The greatest common divisor of {start} and {end} is {gcd(start, end)}\")\nprint(f\"The number of integers between {start} and {end} that have a sum of digits equal to 15 is {count_integers_with_sum_of_digits_equal_to_15(start, end)}\")"
  },
  {
    "example_id": 358,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.9999999999999939"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(pow(7/16, 111) * pow(16/7, 111))"
  },
  {
    "example_id": 359,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 13 - 5\nprint(k)"
  },
  {
    "example_id": 360,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Variables\nballops = 5\nfallops = 11\nwallops = 6\n\n# Define equations\nballops_to_wallops = ballops / wallops\nfallops_to_wallops = fallops / wallops\n\n# Solve for wallops\nwallops = fallops_to_wallops * 110\n\n# Print solution\nprint(f\"{wallops:.0f} wallops\")"
  },
  {
    "example_id": 361,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.1"
    ],
    "annotated_answers": [
      "24.1"
    ],
    "solution": "def median(my_list):\n    my_list.sort()\n    return my_list[len(my_list) // 2]\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(d) for d in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\ndef sum_k(l, u):\n    return sum(x for x in range(l, u + 1))\n\ndef divisor(n):\n    return [x for x in range(1, int(n ** 0.5) + 1) if n % x == 0]\n\ndef median_of_five(a1, a2, a3, a4, a5):\n    my_list = [a1, a2, a3, a4, a5]\n    my_list.sort()\n    return my_list[len(my_list) // 2]\n\nprint(median_of_five(23.4, 23.8, 24.1, 24.3, 25))"
  },
  {
    "example_id": 362,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "a = 6\nb = 6\nc = 3\nd = 2\n\n# calculate the number of tiles needed\ntiles = c*d\nprint(f\"{tiles} tiles\")\n\n# calculate the area of the rectangular section\narea = c*d\nprint(f\"{area} square inches\")\n\n# calculate the number of tiles needed to cover the area\ntiles = area//a*b\nprint(f\"{tiles} tiles\")"
  },
  {
    "example_id": 363,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "# Perimeter of octagon\nperimeter = 0\nfor i in range(8):\n    perimeter += 10\nprint(perimeter)"
  },
  {
    "example_id": 364,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum([i for i in range(l, u + 1)])\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\ndef solution():\n    start = 1\n    end = 100\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\nprint(solution())"
  },
  {
    "example_id": 365,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2700.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "k = 42\nl = 45\nn = 9\nm = 12\n\n# calculate the time it takes for Kelly to reach Prime\ntime_k = math.sqrt((n*k)**2 + (m*k)**2)\n\n# calculate the time it takes for Brenda to reach Prime\ntime_b = math.sqrt((n*l)**2 + (m*l)**2)\n\n# calculate the time difference between Kelly and Brenda\ntime_diff = time_k - time_b\n\n# calculate the minutes difference between Kelly and Brenda\nminutes_diff = time_diff * 60\n\n# print the minutes difference between Kelly and Brenda\nprint(f\"{minutes_diff:.2f}\")"
  },
  {
    "example_id": 366,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.23"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Problem: The area of the triangle PQR is 27 cm2 and the base is 6 cm. What is the height, h, of the triangle?\n# Solution:\n# Let the height of the triangle be h. Then, the area of the triangle is given by:\n# area = (1/2)bh\n# Let the base of the triangle be b. Then, the area of the triangle is given by:\n# area = (1/2)bh\n# We know that the area of the triangle is 27 cm2, so:\n# 27 = (1/2)bh\n# Simplify the equation:\n# 13.5 = bh\n# Now we need to find the height, h, of the triangle. We know that the base of the triangle is 6 cm, so:\n# h = (13.5)/6\n# h = 2.23 cm\nprint(\"The height of the triangle is:\", 2.23)"
  },
  {
    "example_id": 367,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "162.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "count = 0\nfor num in range(99, 1000):\n    if str(num).count('0') == 1:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 368,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "15.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Create a variable to store the number of chocolate chips\nchocolate_chips = 8\n\n# Create a variable to store the number of cookies\ncookies = 15\n\n# Calculate the number of chocolate chips needed to make cookies\nchocolate_chips_needed = cookies // chocolate_chips\n\n# Print the result\nprint(f\"{chocolate_chips_needed} chocolate chips needed to make {cookies} cookies.\")"
  },
  {
    "example_id": 369,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5780.0"
    ],
    "annotated_answers": [
      "1020.0"
    ],
    "solution": "def least_common_multiple(a, b, c):\n    return a*b*c/gcd(a, b, c)\n\ndef gcd(a, b, c):\n    return gcd(b, c, a%b) if b else a\n\nprint(least_common_multiple(51, 68, 85))"
  },
  {
    "example_id": 370,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "x = 5\nprint(6*x + 5)"
  },
  {
    "example_id": 371,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2013.0"
    ],
    "solution": "def divisor(n):\n    for i in range(1, n+1):\n        if n % i == 0:\n            yield i\n\ndef sum_k(l, u):\n    for i in range(l, u+1):\n        yield sum(int(j) for j in str(i))\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(j) for j in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end+1) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(2005, 2006))"
  },
  {
    "example_id": 372,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.22752394554992",
      "-48.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = 4 * (5/8)**55 * (8/37)**55\nprint(x)"
  },
  {
    "example_id": 373,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = 30\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 374,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.25"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "tiles = 1/4\nprint(tiles)"
  },
  {
    "example_id": 375,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "# Find the number of times in 24 hours that the two computers back up data at the same time\ndef find_number_of_times_backup_at_same_time(start, end):\n    number_of_times = 0\n    for i in range(start, end):\n        if i % 5 == 0 and i % 2 == 0:\n            number_of_times += 1\n    return number_of_times\n\n\nstart = 0\nend = 24 * 60\nnumber_of_times = find_number_of_times_backup_at_same_time(start, end)\nprint(f\"{number_of_times}\")"
  },
  {
    "example_id": 376,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "print((2**20 + 2**20 + 2**20 + 2**21) // 2**17)"
  },
  {
    "example_id": 377,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "cheese = 10\ncherry = 10 + 3\ndanishes = cheese + cherry\nprint(f\"{danishes}\")"
  },
  {
    "example_id": 378,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "500.0"
    ],
    "annotated_answers": [
      "1500.0"
    ],
    "solution": "x = 500\nprint(x)"
  },
  {
    "example_id": 379,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "distance = 10 + 2 * 25\nprint(distance)"
  },
  {
    "example_id": 380,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "total_matches = 4 * 4\nprint(total_matches)"
  },
  {
    "example_id": 381,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "380.0"
    ],
    "annotated_answers": [
      "5999.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    return sum(int(digit) for digit in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(2000, 8000))"
  },
  {
    "example_id": 382,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "800.0"
    ],
    "solution": "area = (2 * 2) * 2\nprint(area)"
  },
  {
    "example_id": 383,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "784.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "perimeter = 28\narea = perimeter**2\nprint(area)"
  },
  {
    "example_id": 384,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "x = 12\nprint(x)"
  },
  {
    "example_id": 385,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "print(gcd(6**3, 3**6))"
  },
  {
    "example_id": 386,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(1**(2**235423523))"
  },
  {
    "example_id": 387,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "if 12 % 9 == 0:\n    print(12 // 9)\nelse:\n    print(9 // 12)"
  },
  {
    "example_id": 388,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "14.0",
      "2.0",
      "8.0",
      "22.0",
      "2.0",
      "4.0",
      "1.0",
      "4.0",
      "21.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Red and 4-door cars\nn_red_4door = math.floor(30 * 0.5)\nn_white_4door = math.floor(30 * 0.5)\nn_red_4door = math.floor(n_red_4door * 0.5)\nn_white_4door = math.floor(n_white_4door * 0.5)\nn_4door = n_red_4door + n_white_4door\n\n# 2-door and white cars\nn_2door_white = 8\n\n# Total number of cars\ntotal = n_4door + n_2door_white\n\nprint(f\"Number of 4-door red cars: {n_4door}\")\nprint(f\"Number of 2-door white cars: {n_2door_white}\")\nprint(f\"Total number of cars: {total}\")\n\n# Red cars\nred_car_total = math.floor(total * 0.1)\nprint(f\"Total number of red cars: {red_car_total}\")\n\n# Red 4-door cars\nn_red_4door_total = math.floor(red_car_total * 0.5)\nprint(f\"Number of 4-door red cars: {n_red_4door_total}\")\n\n# White 4-door cars\nn_white_4door_total = math.floor(total - n_red_4door_total)\nprint(f\"Number of 4-door white cars: {n_white_4door_total}\")"
  },
  {
    "example_id": 389,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    if n < 10:\n        return False\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(100, 999))"
  },
  {
    "example_id": 390,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "528.0"
    ],
    "annotated_answers": [
      "1056.0"
    ],
    "solution": "def gcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcf(a, b)\n\nprint(lcm(22, 48))"
  },
  {
    "example_id": 391,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "74.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "a = 25\nb = 49\nc = a + b\nprint(c)"
  },
  {
    "example_id": 392,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2005.0",
      "136.0",
      "2005.0",
      "15.0",
      "2005.0",
      "26.0",
      "2005.0",
      "554.0",
      "2005.0",
      "12.0",
      "2005.0",
      "18.0",
      "2005.0",
      "22.0",
      "2005.0",
      "49.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "county_data = {'Aiken': [124, 141, 130, 143, 136],\n               'Bamberg': [17, 15, 15, 14, 11],\n               'Barnwell': [25, 22, 26, 28, 29],\n               'Berkeley': [583, 557, 554, 553, 524],\n               'Calhoun': [15, 12, 10, 18, 11],\n               'Cherokee': [19, 13, 18, 13, 19],\n               'Chesterfield': [46, 18, 13, 22, 29],\n               'Colleton': [64, 49, 52, 46, 41]}\n\ndef median(numbers):\n    numbers.sort()\n    if len(numbers) % 2 == 1:\n        return numbers[len(numbers) // 2]\n    else:\n        return (numbers[len(numbers) // 2] + numbers[len(numbers) // 2 - 1]) / 2\n\nfor county in county_data:\n    students = county_data[county]\n    print('Median number of students in', county, 'in 2005:', median(students))"
  },
  {
    "example_id": 393,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2400.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        s = sum(int(d) for d in str(n))\n        if s == 15:\n            count += 1\n    return count\n\ndef is_sum_of_digits_equal_to_15(n):\n    s = sum(int(d) for d in str(n))\n    return s == 15\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef divisor(n):\n    return sum(1 for i in range(1, int(n ** 0.5) + 1) if n % i == 0)\n\ndef smallest_integer_n_such_that_enrollment_exceeds_capacity(current_enrollment, enrollment_growth_rate_per_year, school_capacity):\n    for n in count(1):\n        if current_enrollment + (n * enrollment_growth_rate_per_year) >= school_capacity:\n            return n\n\ncurrent_enrollment = 980\nenrollment_growth_rate_per_year = 0.05\nschool_capacity = 1100\n\nn = smallest_integer_n_such_that_enrollment_exceeds_capacity(current_enrollment, enrollment_growth_rate_per_year, school_capacity)\nprint(n)"
  },
  {
    "example_id": 394,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.34589800443456"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "pounds = 300 / 1.64\neuros = 300 / 1.32\nprint(euros - pounds)"
  },
  {
    "example_id": 395,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-22.0",
      "-22.0",
      "-22.0",
      "-22.0",
      "-22.0",
      "-22.0",
      "-22.0",
      "-22.0",
      "-22.0",
      "-22.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "# Heidi's score on each test\n# before the final exam\nscores = [80, 90, 95, 85, 75, 80, 95, 80, 75, 70]\n\n# Heidi's score on the final exam\nfinal_score = 99\n\n# Heidi's average score\naverage = (final_score + sum(scores)) / (len(scores) + 2)\n\n# Heidi's average score for the semester\nsemester_average = 90\n\n# Heidi's average score for each test\n# before the final exam\naverage_per_test = average - final_score\n\n# Heidi's score on each test\n# before the final exam\nscores_per_test = [average_per_test] * len(scores)\n\nprint(scores_per_test)"
  },
  {
    "example_id": 396,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "87.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "weeks = 609 // 7\nprint(weeks)"
  },
  {
    "example_id": 397,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-30.0"
    ],
    "annotated_answers": [
      "-49.0"
    ],
    "solution": "x = 4 - 34\nprint(x)"
  },
  {
    "example_id": 398,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "print((1421/7 + 47)//50*9)"
  },
  {
    "example_id": 399,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0",
      "34.0",
      "43.0",
      "62.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "for i in range(10, 100):\n    a, b = i // 10, i % 10\n    if a * b == 12:\n        print(i)"
  },
  {
    "example_id": 400,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "26.0"
    ],
    "solution": "total = 18 + 13 + 5\nprint(total)"
  },
  {
    "example_id": 401,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 10):\n    if 42789000 + 37*i % 3 == 0:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 402,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "85.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# list of numbers\nn = list(range(-36, 49))\n\n# count the number of elements in the list\nprint(len(n))"
  },
  {
    "example_id": 403,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(i) for i in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(10, 100))"
  },
  {
    "example_id": 404,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "169.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# number of hairstyles\nn_hair = 3\n# number of sets of eyebrows\nn_eyebrows = 2\n# number of pairs of googly eyes\nn_googly_eyes = 1\n# number of sets of ears\nn_ears = 2\n# number of sets of lips\nn_lips = 2\n# number of pairs of shoes\nn_shoes = 2\n# number of bonus pairs of clown shoes\nn_clown_shoes = 1\n\n# number of different personalities\nn_personalities = (n_hair + n_eyebrows + n_googly_eyes + n_ears + n_lips + n_shoes + n_clown_shoes)**n_eyebrows\n\nprint(n_personalities)"
  },
  {
    "example_id": 405,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.4000000000000004"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "number = 12\npercent = 0.2\nresult = percent * number\nprint(result)"
  },
  {
    "example_id": 406,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "n = 15\nS = 30\nM = 80\nN = 15\n\n# Find the number of students in the Math Club\nmath_club = (S * N) // 100\n\n# Find the number of students in the Science Club\nscience_club = (M * N) // 100\n\n# Find the number of students in the Math Club\nmath_club = math_club + math_club\n\n# Find the total number of students\ntotal = math_club + science_club\n\nprint(f\"{total}\")"
  },
  {
    "example_id": 407,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "# \ndad_steps = 30\nmax_steps = 10\n\n# \nmax_steps_per_dad_step = max_steps / dad_steps\n\n# \nmax_steps_to_walk_same_distance = max_steps_per_dad_step * dad_steps\n\nprint(f\"{max_steps_to_walk_same_distance}\")"
  },
  {
    "example_id": 408,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(8 // 2 // 2 + 6)"
  },
  {
    "example_id": 409,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "M = symbols('M')\nBC = 4\nAC = 4\nBCN = (BC - AC)/2\nprint(f\"{BCN:.2f}\")"
  },
  {
    "example_id": 410,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.027819151027643",
      "0.9729338074700898",
      "1.027819151027643",
      "1.027819151027643",
      "0.9729338074700898",
      "1.027819151027643",
      "0.9729338074700898",
      "1.5707963267948966"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "import math\n\n# length of PQ\nPQ = math.sin(14) / math.sin(39)\n\n# length of QC\nQC = math.sin(39) / math.sin(14)\n\n# length of CP\nCP = math.sin(14) / math.sin(39)\n\n# length of QB\nQB = math.sin(14) / math.sin(39)\n\n# length of BP\nBP = math.sin(39) / math.sin(14)\n\n# length of BC\nBC = math.sin(14) / math.sin(39)\n\n# length of AP\nAP = math.sin(39) / math.sin(14)\n\nprint(\"length of PQ:\", PQ)\nprint(\"length of QC:\", QC)\nprint(\"length of CP:\", CP)\nprint(\"length of QB:\", QB)\nprint(\"length of BP:\", BP)\nprint(\"length of BC:\", BC)\nprint(\"length of AP:\", AP)\n\n# angle BPC\nBPC = math.asin(CP / BC)\n\nprint(\"angle BPC:\", BPC)"
  },
  {
    "example_id": 411,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(317**3 + 8**3 - 2**(3**2) - 317**3)"
  },
  {
    "example_id": 412,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-15.0"
    ],
    "solution": "def divisor(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n\ndef sum_k(l, u):\n    sum_of_digits = 0\n    for i in range(l, u+1):\n        for j in str(i):\n            sum_of_digits += int(j)\n    return sum_of_digits\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(1, len(str(n))) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 20))"
  },
  {
    "example_id": 413,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "from itertools import combinations\n\nmenu_size = 10\n\n# Calculate number of combinations\ncombinations_count = len(list(combinations(range(menu_size), 2)))\n\n# Print result\nprint(combinations_count)"
  },
  {
    "example_id": 414,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "97969.0"
    ],
    "annotated_answers": [
      "97969.0"
    ],
    "solution": "print((97969 ** 0.5) ** 2)"
  },
  {
    "example_id": 415,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10880.0"
    ],
    "annotated_answers": [
      "891.0"
    ],
    "solution": "x = 11*1000\ny = 11**2 - 1\nprint(x - y)"
  },
  {
    "example_id": 416,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "95.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "# Define misplaced quiz score\nquiz_score = 95\n\n# Define scores of other quizzes\nscores = [100, 100, 99, 98]\n\n# Calculate arithmetic mean\nmean = sum(scores) / len(scores)\n\n# Calculate standard deviation\nstd = math.sqrt(((sum(scores) - mean)**2) / len(scores))\n\n# Calculate z-score\nz_score = (quiz_score - mean) / std\n\n# Calculate misplaced quiz score\nmisplaced_quiz_score = z_score * std + mean\n\n# Print misplaced quiz score\nprint(misplaced_quiz_score)"
  },
  {
    "example_id": 417,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Let x be the side length of the hexagon\nx = 16\n\n# Let y be the side length of the octagon\ny = 2 * x\n\n# Print the length of each side of the octagon\nprint(f\"The length of each side of the octagon is {y}\")"
  },
  {
    "example_id": 418,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "260.0"
    ],
    "annotated_answers": [
      "260.0"
    ],
    "solution": "total_plates = 26 * 10\nprint(total_plates)"
  },
  {
    "example_id": 419,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "3.0",
      "97.0",
      "3.0",
      "97.0",
      "291.0"
    ],
    "annotated_answers": [
      "291.0"
    ],
    "solution": "# Create a list of prime numbers up to 99\nprimes = [p for p in range(2, 100) if math.gcd(p, 100) == 1]\n\n# Find the two prime numbers that sum to 100\nfor p in itertools.combinations(primes, 2):\n    if sum(p) == 100:\n        print(f\"The two prime numbers that sum to 100 are {p}\")\n        break\n\n# Calculate the product of the two prime numbers\nprint(f\"The product of the two prime numbers is {p[0]} * {p[1]} = {p[0] * p[1]}\")"
  },
  {
    "example_id": 420,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# Define function divisor\ndef divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n# Define function sum_k\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\n# Define function is_sum_of_digits_equal_to_15\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(i) for i in str(n)) == 15\n\n# Define function count_integers_with_sum_of_digits_equal_to_15\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\n# Define function get_larger_number\ndef get_larger_number(smaller_number):\n    return sum_k(smaller_number, 2 * smaller_number - 60)\n\n# Define function main\ndef main():\n    smaller_number = 0\n    larger_number = 0\n    for i in range(1, 10):\n        if divisor(i)[0] == 3 and divisor(i)[1] == 5:\n            smaller_number = i\n            larger_number = get_larger_number(smaller_number)\n            if larger_number == 15:\n                break\n    print(larger_number)\n\n# Call main\nmain()"
  },
  {
    "example_id": 421,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def solve_problem(start, end, speed_bill, speed_sam):\n    hours_bill = (end - start) / speed_bill\n    hours_sam = (end - start) / speed_sam\n    return hours_sam - hours_bill\n\nstart = 0\nend = 400\nspeed_bill = 50\nspeed_sam = 40\nprint(solve_problem(start, end, speed_bill, speed_sam))"
  },
  {
    "example_id": 422,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0",
      "50.27"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "r = 8\narea = math.pi * r**2\n\n# decrease radius by 4 to decrease area by 48*pi\nnew_r = r - 4\nnew_area = math.pi * new_r**2\n\nprint(f\"{new_r:.2f}\")\nprint(f\"{new_area:.2f}\")"
  },
  {
    "example_id": 423,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.24"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Point A is at (2, 3)\nx1, y1 = 2, 3\n\n# Point B is at (5, 6)\nx2, y2 = 5, 6\n\n# Distance between A and B\ndistance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\nprint(f\"Distance between A and B: {distance:.2f}\")"
  },
  {
    "example_id": 424,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "126.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    return sum(int(i) for i in str(n)) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end+1) if is_sum_of_digits_equal_to_15(i))\n\n\ndef sum_k(l, u):\n    return sum(i for i in range(l, u+1))\n\n\ndef divisor(n):\n    return sum(1 for i in range(1, n+1) if n % i == 0)\n\n\ndef solution(n):\n    count_18 = count_integers_with_sum_of_digits_equal_to_15(1, n)\n    count_42 = count_integers_with_sum_of_digits_equal_to_15(1, n)\n    count_18 = count_18 if count_18 < n else n\n    count_42 = count_42 if count_42 < n else n\n    return min(count_18, count_42)\n\n\nprint(solution(100))"
  },
  {
    "example_id": 425,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = 0.5\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 426,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Area of triangle = (base * height) / 2\n# Area of triangle = (12 * 20) / 2\n# Area of triangle = 240 / 2\n# Area of triangle = 120\nprint(120)"
  },
  {
    "example_id": 427,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# Number of ways to assign people to offices\n# = Number of ways to select 3 people from 5 people\n# = 5! / (3! * 2!)\n# = 5 * 4 * 3\n# = 60\nprint(60)"
  },
  {
    "example_id": 428,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.6"
    ],
    "annotated_answers": [
      "0.6"
    ],
    "solution": "print(round(4/7, 1))"
  },
  {
    "example_id": 429,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# calculate the prime factors of 20!\nprime_factors = []\nfor i in range(2, 21):\n    if 20 % i == 0:\n        prime_factors.append(i)\n\n# count the number of distinct primes\ndistinct_primes = len(set(prime_factors))\n\nprint(f\"{distinct_primes}\")"
  },
  {
    "example_id": 430,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3720.0"
    ],
    "annotated_answers": [
      "3720.0"
    ],
    "solution": "# 3720\nprint(3.72 * 1000)"
  },
  {
    "example_id": 431,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Define n and its divisors\nn = 1000\ndivisors = [d for d in range(1, int(math.sqrt(n)) + 1) if n % d == 0]\n\n# Find the number of distinct prime factors\ncount_distinct_prime_factors = 0\nfor i in range(len(divisors)):\n    if len(set(divisors[:i+1])) == len(divisors[:i+1]):\n        count_distinct_prime_factors += 1\n\nprint(f\"{count_distinct_prime_factors}\")"
  },
  {
    "example_id": 432,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Initialize variables\nblue_marbles = 0\ngreen_marbles = 0\ntotal_marbles = 0\n\n# Set variables\nblue_marbles = 3 * green_marbles\ntotal_marbles = blue_marbles + green_marbles\n\n# Print solution\nprint(f\"{total_marbles} blue marbles\")\nprint(f\"{green_marbles} green marbles\")"
  },
  {
    "example_id": 433,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def divisor(n):\n    return [x for x in range(1, int(n**0.5) + 1) if n % x == 0]\n\n\ndef sum_k(l, u):\n    return sum([i for i in range(l, u + 1)])\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(i) for i in str(n)]\n    return sum(digits) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum([1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i)])\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 100))"
  },
  {
    "example_id": 434,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "def count_frogs(n):\n    if n < 10:\n        return 1\n    elif n % 10 == 0:\n        return 10\n    else:\n        return 10 + count_frogs(n // 10)\n\ndef solution(n_frogs_day_1, n_frogs_day_2):\n    return count_frogs(n_frogs_day_2) - count_frogs(n_frogs_day_1 - 10)\n\nprint(solution(45, 40))"
  },
  {
    "example_id": 435,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    return sum(map(int, str(n))) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end+1) if is_sum_of_digits_equal_to_15(i))\n\ndef sum_k(l, u):\n    return sum(range(l, u+1))\n\ndef divisor(n):\n    divisor_list = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisor_list.append(i)\n            if n // i!= i:\n                divisor_list.append(n // i)\n    return divisor_list\n\ndef solution(l, u):\n    divisor_list = divisor(sum_k(l, u))\n    for d in divisor_list:\n        if count_integers_with_sum_of_digits_equal_to_15(l, u) == d:\n            return d\n    return -1\n\ndef main():\n    print(solution(10, 20))\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 436,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def sum_k(l, u):\n    return sum(int(d) for d in str(l) + str(u))\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, n) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(117, 119))"
  },
  {
    "example_id": 437,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "188.0"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "n = 2500\ncount = 0\nfor i in range(1, n+1):\n    if is_sum_of_digits_equal_to_15(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 438,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "n = 3105\ni = 2\nwhile i * i <= n:\n    while n % i == 0:\n        n //= i\n    i += 1\nprint(n)"
  },
  {
    "example_id": 439,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define a function to compute the divisor of a number\ndef divisor(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return sorted(divisors)\n\n# Define a function to sum up digits of a number\ndef sum_k(l, u):\n    for k in range(l, u + 1):\n        yield sum(int(digit) for digit in str(k))\n\n# Define a function to check if a number is the sum of its digits\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(digit) for digit in str(n)) == 15\n\n# Define a function to count the number of integers with sum of digits equal to 15\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        for j in range(start, end + 1):\n            if is_sum_of_digits_equal_to_15(i * j):\n                count += 1\n    return count\n\n# Print the answer\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 12))"
  },
  {
    "example_id": 440,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "191.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "x = symbols(\"x\")\ny = symbols(\"y\")\nz = symbols(\"z\")\n\n# 182 + 3 * 7 - 64 / 2 + 27 / 3\n# 182 + 21 - 32 + 9\n# 182 + 21 - 12 + 9\n# 182 + 9\n# 191\nprint(191)"
  },
  {
    "example_id": 441,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "160.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "# Find x\nx = 180 - (40 * (180 / 360))\nprint(f\"{x:.2f}\")"
  },
  {
    "example_id": 442,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = 0\n    for digit in str(n):\n        sum_of_digits += int(digit)\n    return sum_of_digits == 15\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef divisor(n):\n    return sum(int(n % i == 0) for i in range(1, int(n ** 0.5) + 1))\n\nstart = 100\nend = 200\n\ncount = count_integers_with_sum_of_digits_equal_to_15(start, end)\nprint(f\"{count}\")"
  },
  {
    "example_id": 443,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.35"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "blue = 5\ntotal = 20\n\n# Calculate the number of blue marbles needed to get 1/2 probability\nblue_needed = math.ceil(total * blue / (total - blue))\n\n# Calculate the probability of selecting a blue marble\nblue_probability = blue_needed / total\n\nprint(f\"{blue_probability:.2f}\")"
  },
  {
    "example_id": 444,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-33.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "# define variables\nn = 66\nhalf = n/2\nthird = n/3\none_half = half/3\n\n# calculate number of pins in each pile\npile1 = n - one_half\npile2 = n - third\n\n# calculate number of pins in the original pile\noriginal_pile = n - pile1 - pile2\n\n# print results\nprint(f\"John originally had {original_pile} pins\")"
  },
  {
    "example_id": 445,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "264.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(l**k for k in range(u+1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(10, 99))"
  },
  {
    "example_id": 446,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = 0\n    for d in str(n):\n        sum_of_digits += int(d)\n    return sum_of_digits == 15\n\ndef sum_k(l, u):\n    return sum(range(l, u+1))\n\ndef divisor(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\ndef count_divisors(n):\n    return len(divisor(n))\n\nstart = 1\nend = 100\n\ncount = count_integers_with_sum_of_digits_equal_to_15(start, end)\nprint(f\"{count:d}\")"
  },
  {
    "example_id": 447,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-13.0"
    ],
    "annotated_answers": [
      "-18.0"
    ],
    "solution": "y = 8 - 21\nprint(y)"
  },
  {
    "example_id": 448,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "96.0"
    ],
    "solution": "perimeter = 24\nprint(perimeter)"
  },
  {
    "example_id": 449,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5208333333333334"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(25/4/12)"
  },
  {
    "example_id": 450,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "117.0"
    ],
    "solution": "print(3 * 36)"
  },
  {
    "example_id": 451,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1080.0"
    ],
    "annotated_answers": [
      "1080.0"
    ],
    "solution": "# Calculate seconds\nseconds = 0.30 * 3600\nprint(seconds)"
  },
  {
    "example_id": 452,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "distance = 19 + 16 - 3 + 4\nprint(distance)"
  },
  {
    "example_id": 453,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "time = 17/1.7\nprint(time)"
  },
  {
    "example_id": 454,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def sum_of_integers(n):\n    return sum(range(1, n + 1))\n\n\ndef sum_k(l, u):\n    return sum(sum_of_integers(i) for i in range(l, u + 1))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(digit) for digit in str(n)) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\n\ndef solution():\n    return count_integers_with_sum_of_digits_equal_to_15(1, 100)\n\n\nprint(solution())"
  },
  {
    "example_id": 455,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "import math\nimport itertools\nimport string\nfrom sympy import symbols\nfrom sympy import solve\nfrom itertools import count\n\ndef divisor(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(list(range(l, u+1)))\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(list(map(int, str(n)))) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(list(map(is_sum_of_digits_equal_to_15, list(range(start, end+1)))))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(100, 1000))"
  },
  {
    "example_id": 456,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "7.0"
    ],
    "annotated_answers": [
      "132.0"
    ],
    "solution": "x = symbols('x')\n\nsol = solve(x + 2 * (x - 2) + x - 4 + x - 2 + x + 2 + x + 4, x)\n\nprint(f\"The largest interior angle is {sol[0]} degrees\")"
  },
  {
    "example_id": 457,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "508.4444444444444"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "perimeter = 76\nlength = (perimeter - 2*12) / 3\narea = length * (length + 12)\nprint(area)"
  },
  {
    "example_id": 458,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "# one half of 1/100 of 9000\nprint(9000/200)"
  },
  {
    "example_id": 459,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.9999999999999996"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(((1/42)**4)*2*(42**4)+(42**(2+1-3)))"
  },
  {
    "example_id": 460,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "# Define function that calculates number of ice cream cones at the end of the day\ndef number_of_cones_at_end_of_day(start):\n    noon_cones = start * 2/3\n    end_of_day_cones = noon_cones * 2/3\n    return end_of_day_cones\n\n# Print number of ice cream cones at the end of the day\nprint(f\"{number_of_cones_at_end_of_day(72):.0f}\")"
  },
  {
    "example_id": 461,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5120.0"
    ],
    "annotated_answers": [
      "2560.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    return sum == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef divisor(n):\n    return sum([1 for i in range(1, int(math.sqrt(n) + 1)) if n % i == 0])\n\ndef solve_bacteria_problem():\n    initial_population = 10\n    hours = 9\n    population = initial_population\n    for i in range(hours):\n        population *= 2\n    print(f\"{population:.2f}\")\n\nsolve_bacteria_problem()"
  },
  {
    "example_id": 462,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "192.0"
    ],
    "annotated_answers": [
      "192.0"
    ],
    "solution": "print(2**(2**3) - (2**2)**3)"
  },
  {
    "example_id": 463,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.5",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def f(x):\n    return x + 1.5\n\ndef g(x):\n    return f(x) - 15\n\ndef h(x):\n    return g(x) + 120\n\ndef is_solution_in_interval(x, y, z):\n    if (x <= z <= y):\n        return True\n    else:\n        return False\n\ndef find_solution(x, y):\n    for z in range(x, y):\n        if is_solution_in_interval(x, y, z):\n            return z\n    return None\n\ndef solution():\n    x = 0\n    y = 15\n    z = find_solution(x, y)\n    if z is not None:\n        return f(z)\n    else:\n        return None\n\nsol = solution()\nprint(f\"The temperature will rise {sol:.2f} degrees in the next 2 hours.\")"
  },
  {
    "example_id": 464,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "girls = 0\nwhile girls % 13!= 0:\n    girls += 1\nboys = girls - 1\nprint(boys)"
  },
  {
    "example_id": 465,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1059.0"
    ],
    "annotated_answers": [
      "448.0"
    ],
    "solution": "for n in count(1000):\n    if is_sum_of_digits_equal_to_15(n):\n        print(n)\n        break"
  },
  {
    "example_id": 466,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "100.0",
      "10.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "def count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum(int(d) for d in str(n))\n    return sum_of_digits == 15\n\ndef sum_k(l, u):\n    return sum(k for k in range(l, u + 1))\n\ndef divisor(n):\n    return sum(1 for i in range(1, n + 1) if n % i == 0)\n\ndef solve_meerkat(n):\n    m = int(n / 2)\n    a = int(sum_k(1, m - 1) / 2)\n    b = int(sum_k(m + 1, n) / 2)\n    return a * b\n\nif __name__ == \"__main__\":\n    n = 10\n    print(f\"Total number of nights: {n}\")\n    print(f\"Total number of pairs of meerkats: {solve_meerkat(n)}\")\n    print(f\"Total number of pairs of meerkats per night: {solve_meerkat(n) / n}\")\n    print(f\"Total number of meerkats that stand guard per night: {solve_meerkat(n) / n / 2}\")\n    print(f\"Total number of nights that each meerkat gets to sleep: {solve_meerkat(n) / n / 2}\")"
  },
  {
    "example_id": 467,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def divisor(n):\n    return [x for x in range(1, n + 1) if n % x == 0]\n\ndef sum_k(l, u):\n    return sum(divisor(u)[:l])\n\ndef is_sum_of_digits_equal_to_15(n):\n    n = str(n)\n    if len(n) == 1:\n        return n[0] == \"1\"\n    else:\n        return sum([int(x) for x in n]) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 600))"
  },
  {
    "example_id": 468,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 120\nm = n / sum([1,2,3])\nprint(f\"{m:.2f}\")"
  },
  {
    "example_id": 469,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.24",
      "10.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "width = math.sqrt(5)\nprint(f\"{width:.2f}\")\narea = 2*width*width\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 470,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "outfits = 5 * 6 * 8\nprint(outfits)"
  },
  {
    "example_id": 471,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "sorcerers = 10\nwitches = 6\nshakes = sorcerers * (sorcerers - 1) + witches * (witches - 1)\nprint(shakes)"
  },
  {
    "example_id": 472,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "519.0"
    ],
    "annotated_answers": [
      "1001.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum(int(digit) for digit in str(l) if int(digit) >= u)\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, 1) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1000, 10000))"
  },
  {
    "example_id": 473,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "419.0"
    ],
    "annotated_answers": [
      "420.0"
    ],
    "solution": "n = 10.0000198 * 5.9999985401 * 6.9999852\nprint(int(n))"
  },
  {
    "example_id": 474,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4901.0"
    ],
    "annotated_answers": [
      "165.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum([int(k) for k in range(l, u + 1)])\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum([int(k) for k in str(n)]) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum([1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i)])\n\n\ndef solution():\n    return sum_k(10, 99) - count_integers_with_sum_of_digits_equal_to_15(10, 99)\n\n\nprint(solution())"
  },
  {
    "example_id": 475,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "good_workers = 3\nbad_workers = 1\ntotal_workers = good_workers + bad_workers\nhours_per_worker = 3\ntotal_hours = hours_per_worker * total_workers\nneeded_hours = 3\ntotal_needed_hours = needed_hours * good_workers\nremaining_hours = total_hours - total_needed_hours\nremaining_good_workers = math.ceil(remaining_hours / hours_per_worker)\nprint(remaining_good_workers)"
  },
  {
    "example_id": 476,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "picture_area = 2\npicture_length = picture_area / 2\npicture_width = picture_area / 3\nquilt_length = 2 * picture_length\nquilt_width = 3 * picture_width\nquilt_area = quilt_length * quilt_width\nprint(quilt_area)"
  },
  {
    "example_id": 477,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5937.0"
    ],
    "annotated_answers": [
      "5937.0"
    ],
    "solution": "# Number of apples George Adrian picks in 3 hours\napples_in_3_hours = 15832 * 3 / 8\nprint(f\"{apples_in_3_hours:.0f}\")"
  },
  {
    "example_id": 478,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Define a function to determine the number of orders\ndef count_orders(n):\n    # Calculate the number of orders\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if (i + j + k) == n:\n                    count += 1\n    return count\n\n# Print the number of orders\nprint(count_orders(4))"
  },
  {
    "example_id": 479,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print((-5)**3 + (-2)**3 + 2**3 + 5**3)"
  },
  {
    "example_id": 480,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def divisor(n):\n    return set(\n        i\n        for i in range(1, int(n ** 0.5) + 1)\n        if n % i == 0\n    )\n\n\ndef sum_k(l, u):\n    return sum(int(c) for c in str(l) if c in str(u))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    for d in divisor(n):\n        if sum_k(n // d, n) == 15:\n            return True\n    return False\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(\n        is_sum_of_digits_equal_to_15(n)\n        for n in range(start, end + 1)\n    )\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 100))"
  },
  {
    "example_id": 481,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "distance = 4 / 0.5\nprint(distance)"
  },
  {
    "example_id": 482,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25000.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "number_of_trips = 1000000000 / 40000\nprint(number_of_trips)"
  },
  {
    "example_id": 483,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2000.0",
      "0.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "x = 40\ny = 50\nif (x * y) == 2000:\n    print(x * y)\n    print(x * y - 2000)"
  },
  {
    "example_id": 484,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "copper = 0.8\nzinc = 0.2\n\nx = 48\n\ny = (x / copper) * zinc\n\nprint(f\"{y:.2f}\")"
  },
  {
    "example_id": 485,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "print(92 - 45 / (3 * 5) - 5**2)"
  },
  {
    "example_id": 486,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "5.5"
    ],
    "solution": "# define the function\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 15\n\n# define the function\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# define the function\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\n# define the function\ndef divisor(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors\n\n# define the function\ndef longest_side(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n + 1) // 2\n\n# define the function\ndef second_fold(n):\n    return longest_side(n) - 2\n\n# define the function\ndef first_fold(n):\n    return n // 2\n\n# define the function\ndef fold(n):\n    return second_fold(first_fold(n))\n\n# define the function\ndef solve(n):\n    return sum_k(fold(n), fold(n))\n\n# define the function\ndef main():\n    print(solve(85))\n\n# call the main function\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 487,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-89.0"
    ],
    "solution": "x = 15\nM, N = 1, 0\n\nprint(M+N)"
  },
  {
    "example_id": 488,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def sum_k(l, u):\n    return sum(int(c) for c in str(l) + str(u))\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, n) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for n in range(start, end) if is_sum_of_digits_equal_to_15(n))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 10000))"
  },
  {
    "example_id": 489,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# 1 quarter + 1 nickel\n# 1 quarter + 1 penny\n# 1 nickel + 1 penny\nprint(3)"
  },
  {
    "example_id": 490,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "868.7"
    ],
    "annotated_answers": [
      "868.8"
    ],
    "solution": "def round_to_nearest_tenth(number):\n    return round(number, 1)\n\n\ndef sum_of_numbers(numbers):\n    sum_ = 0\n    for number in numbers:\n        sum_ += round_to_nearest_tenth(number)\n    return sum_\n\n\nprint(sum_of_numbers([543.55, 25.23, 299.98]))"
  },
  {
    "example_id": 491,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "507.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(int(i) for i in str(l) if i.isdigit()) + sum(int(i) for i in str(u) if i.isdigit())\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, n) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return len([i for i in range(start, end) if is_sum_of_digits_equal_to_15(i)])\n\nprint(count_integers_with_sum_of_digits_equal_to_15(500, 1000))"
  },
  {
    "example_id": 492,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "print(9**(3/2))"
  },
  {
    "example_id": 493,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(2**5 - 5**2)"
  },
  {
    "example_id": 494,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "#\ndef divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n#\ndef sum_k(l, u):\n    return sum([i for i in range(l, u + 1)])\n\n#\ndef is_sum_of_digits_equal_to_15(n):\n    return sum([int(i) for i in str(n)]) == 15\n\n#\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n#\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 10))"
  },
  {
    "example_id": 495,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 2\nprint(f\"{x}\")"
  },
  {
    "example_id": 496,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "16.0",
      "25.0",
      "36.0",
      "49.0",
      "64.0",
      "81.0",
      "100.0",
      "121.0",
      "144.0",
      "169.0",
      "196.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def odd_perfect_squares(n):\n    for i in range(5, 211):\n        if i**0.5 % 1 == 0:\n            yield i\n\nprint(list(odd_perfect_squares(211)))"
  },
  {
    "example_id": 497,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(3*3 + 3*(3+3) - 3**3)"
  },
  {
    "example_id": 498,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0",
      "49.0",
      "36.0",
      "630.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    return sum_of_digits == 15\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef divisor(n):\n    return sum(1 for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)\n\ndef solve_problem():\n    min_term_count = 6\n    min_sum = sum_k(25, 35)\n    max_term_count = 0\n    max_sum = 0\n    for i in range(2, 10):\n        for j in range(1, 5):\n            term_count = i * j\n            if term_count >= min_term_count:\n                sum_of_terms = sum_k(i, term_count)\n                if sum_of_terms > max_sum:\n                    max_sum = sum_of_terms\n                    max_term_count = term_count\n    print(f\"The fewest number of perfect square terms smaller than 49 that can be added together for a sum of 49 is {max_term_count}\")\n    print(f\"The sum of the fewest number of perfect square terms is {max_sum}\")\n\nsolve_problem()"
  },
  {
    "example_id": 499,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "PQ = 6\nQR = 4\nRS = 6\nST = 2\n\nPTRS = PQ + QR + RS + ST\n\nprint(PTRS)"
  },
  {
    "example_id": 500,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "800000000.0"
    ],
    "annotated_answers": [
      "1250.0"
    ],
    "solution": "# get the exchange rate\nexchange_rate = 1200 / 1.50\n\n# get the number of dollars equivalent to 1,000,000 lire\ndollars = 1000000 * exchange_rate\n\nprint(f\"{dollars:.2f}\")"
  },
  {
    "example_id": 501,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.21"
    ],
    "annotated_answers": [
      "1.21"
    ],
    "solution": "x = [0.78, 0.12, 1.33, 1.328]\nprint(max(x) - min(x))"
  },
  {
    "example_id": 502,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.84"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "width = 0.4\narea_light_gray_strip = 100\narea_dark_gray_strip = area_light_gray_strip - (width * width)\nprint(f\"{area_dark_gray_strip:.2f}\")"
  },
  {
    "example_id": 503,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "x = 7 * 2 + 7\nprint(x)"
  },
  {
    "example_id": 504,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "even_positive_integers = (7 * 13) // 2\nprint(even_positive_integers)"
  },
  {
    "example_id": 505,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "675000.0",
      "900000.0",
      "3375000.0",
      "4500000.0"
    ],
    "annotated_answers": [
      "400.0"
    ],
    "solution": "# Define the number of junior and senior students\nnum_juniors = 450\nnum_seniors = 600\n\n# Define the number of cartons of milk per day\njunior_milk_per_day = 1500\nsenior_milk_per_day = junior_milk_per_day\n\n# Calculate the total number of cartons of milk per week\njunior_milk_per_week = junior_milk_per_day * 5\nsenior_milk_per_week = senior_milk_per_day * 5\n\n# Calculate the total number of cartons of milk per school day\njunior_milk_per_day = junior_milk_per_week / 5\nsenior_milk_per_day = senior_milk_per_week / 5\n\n# Calculate the total number of cartons of milk per school day\ntotal_junior_milk_per_day = junior_milk_per_day * num_juniors\ntotal_senior_milk_per_day = senior_milk_per_day * num_seniors\n\n# Calculate the total number of cartons of milk per school day\ntotal_junior_milk_per_week = total_junior_milk_per_day * 5\ntotal_senior_milk_per_week = total_senior_milk_per_day * 5\n\n# Print the total number of cartons of milk per school day\nprint(f\"Total number of cartons of milk per school day for juniors: {total_junior_milk_per_day}\")\nprint(f\"Total number of cartons of milk per school day for seniors: {total_senior_milk_per_day}\")\n\n# Print the total number of cartons of milk per school week\nprint(f\"Total number of cartons of milk per school week for juniors: {total_junior_milk_per_week}\")\nprint(f\"Total number of cartons of milk per school week for seniors: {total_senior_milk_per_week}\")"
  },
  {
    "example_id": 506,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.5"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Find the time in minutes it will take for the lion to catch the elephant\ntime = 19 * 60 / 24\nprint(f\"{time:.2f}\")"
  },
  {
    "example_id": 507,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "#gcd = greatest common divisor\n#lcm = least common multiple\n#48 is one of the integers\n#240 is the lcm\n#24 is the gcd\n#we need to find the other integer\n\n#240/24 = 9\n#9 is the other integer\n\nprint(9)"
  },
  {
    "example_id": 508,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "200.0"
    ],
    "solution": "# Area of the domino\narea = 2*60\nprint(f\"{area:.2f}\")"
  },
  {
    "example_id": 509,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2100.0"
    ],
    "annotated_answers": [
      "2100.0"
    ],
    "solution": "expression = 5*10*14*21*15*20\nprint(expression**0.5)"
  },
  {
    "example_id": 510,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import itertools\n\nprint(len(list(itertools.product(['Yes', 'No'], ['Red', 'Green', 'Blue', 'Other'], ['Yes', 'No']))))"
  },
  {
    "example_id": 511,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0",
      "281.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end+1):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\ndef sum_k(l, u):\n    return sum(range(l, u+1))\n\ndef divisor(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum_digits(n):\n    return sum([int(digit) for digit in str(n)])\n\ndef main():\n    flagpole_height = 15\n    woman_shadow_length = 6\n    woman_distance = 5\n\n    # Find the number of feet of the flagpole's shadow\n    shadow_length = woman_shadow_length + (woman_distance * sum_k(1, 5))\n\n    # Find the number of feet of the flagpole\n    flagpole_length = shadow_length + (woman_distance * sum_k(6, 10))\n\n    # Find the number of feet of the flagpole's shadow\n    shadow_length = woman_shadow_length + (woman_distance * sum_k(1, 5))\n\n    print(f\"{shadow_length} feet\")\n\n    # Find the number of feet of the flagpole\n    flagpole_length = shadow_length + (woman_distance * sum_k(6, 10))\n\n    print(f\"{flagpole_length} feet\")\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 512,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7004.0"
    ],
    "annotated_answers": [
      "7004.0"
    ],
    "solution": "b = 2005 - 3*11*13*21\nprint(b)"
  },
  {
    "example_id": 513,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Define constants\nHOURS = 12\nMINUTES = 60\nDEGREES = 360\n\n# Define angle measure\nangle = (8 / HOURS) * DEGREES\n\n# Print angle\nprint(f\"{angle:.2f}\")"
  },
  {
    "example_id": 514,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "pints = 2*2\nprint(f\"{pints:.2f}\")"
  },
  {
    "example_id": 515,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "249375.0"
    ],
    "annotated_answers": [
      "54000.0"
    ],
    "solution": "# area of land that is not watered\narea_of_land_that_is_not_watered = 500**2 - 25**2\nprint(f\"{area_of_land_that_is_not_watered:.3f}\")"
  },
  {
    "example_id": 516,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum([int(i) for i in range(l, u + 1)])\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum([int(i) for i in str(n)]) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\ndef solve(n):\n    if n == 4:\n        return 6\n    elif n == 24:\n        return 8\n    else:\n        return n // 4\n\n\ndef count_wands(n):\n    count = 0\n    for i in range(1, n + 1):\n        if solve(i) == 5:\n            count += 1\n    return count\n\n\nprint(count_wands(5))"
  },
  {
    "example_id": 517,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# \ndef largest_prime_factor(n):\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\n# \ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# \ndef sum_k(l, u):\n    return sum(range(l, u+1))\n\n# \ndef divisor(n):\n    return sum([1 for i in range(1, int(n**0.5) + 1) if n % i == 0])\n\n# \ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# \ndef is_sum_of_digits_equal_to_15(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum == 15\n\n# \nprint(largest_prime_factor(78))"
  },
  {
    "example_id": 518,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "print(((100**0.5) - (36**0.5))**2)"
  },
  {
    "example_id": 519,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "width = 9 / 6 * 10\nprint(width)"
  },
  {
    "example_id": 520,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "# compute 15 + 8^2 - 3\nprint(15 + 8**2 - 3)"
  },
  {
    "example_id": 521,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.5"
    ],
    "annotated_answers": [
      "4.5"
    ],
    "solution": "print(9/2)"
  },
  {
    "example_id": 522,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "print((-49)//7)"
  },
  {
    "example_id": 523,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "111.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "count = 0\nfor i in range(1, 1000):\n    if i % 9 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 524,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "def count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if sum(int(d) for d in str(i)) == 15:\n            count += 1\n    return count\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(d) for d in str(n)) == 15\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef divisor(n):\n    return sum(1 for i in range(1, int(n ** 0.5) + 1) if n % i == 0)\n\ndef get_smallest_integer(mean):\n    if mean < 10:\n        return 0\n    start = int(mean - 5)\n    end = int(mean + 5)\n    count = count_integers_with_sum_of_digits_equal_to_15(start, end)\n    if count == 1:\n        return start\n    else:\n        return -1\n\nmean = 21\nsmallest = get_smallest_integer(mean)\nprint(smallest)"
  },
  {
    "example_id": 525,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "r = 24 / 3 + 5\nprint(r)"
  },
  {
    "example_id": 526,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from math import sqrt\nprint(sqrt(28 + sqrt(1296)))"
  },
  {
    "example_id": 527,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def divisor(n):\n    return [x for x in range(1, n+1) if n % x == 0]\n\ndef sum_k(l, u):\n    return sum(list(map(int, list(itertools.chain.from_iterable(itertools.combinations(range(l, u+1), k) for k in range(2, u+1))))))\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(x) for x in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end+1) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 12))"
  },
  {
    "example_id": 528,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2520.0"
    ],
    "annotated_answers": [
      "2520.0"
    ],
    "solution": "def lcm(nums):\n    for i in range(1, nums[-1] + 1):\n        if all(i % num == 0 for num in nums):\n            return i\n\ndef least_common_multiple(start, end):\n    lcm = 1\n    for i in range(start, end + 1):\n        lcm = lcm * i // gcd(lcm, i)\n    return lcm\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(least_common_multiple(1, 10))"
  },
  {
    "example_id": 529,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2400.0"
    ],
    "annotated_answers": [
      "300.0"
    ],
    "solution": "# Initialize variables\ndolphin_rate = 8\nswimmer_rate = 2\ndistance = (dolphin_rate - swimmer_rate) * 400\nprint(f\"{distance:.2f}\")"
  },
  {
    "example_id": 530,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.02"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def glow_price(glow_vol, fresh_vol):\n    glow_cost = glow_vol * (1 - 0.25) * 1.00\n    fresh_cost = fresh_vol * 1.00\n    bright_cost = glow_vol * (1 + 0.60) * 1.00\n    return (bright_cost - glow_cost) / (glow_cost - fresh_cost)\n\ndef glow_vol(glow_price, fresh_price):\n    glow_vol = 1 / (1 + glow_price / fresh_price)\n    return glow_vol\n\nglow_vol = glow_vol(glow_price(1000, 800), 800)\nprint(f\"{glow_vol:.2f}\")"
  },
  {
    "example_id": 531,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "440.0"
    ],
    "annotated_answers": [
      "220.0"
    ],
    "solution": "max_handshakes = 22 * 20\nprint(max_handshakes)"
  },
  {
    "example_id": 532,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "556.0"
    ],
    "annotated_answers": [
      "1251.0"
    ],
    "solution": "number_of_students = 834 * 2 / 3\nprint(number_of_students)"
  },
  {
    "example_id": 533,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "519.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def divisor(n):\n    return sum(map(lambda x: n % x == 0, range(1, int(n**0.5) + 1)))\n\ndef sum_k(l, u):\n    return sum(map(lambda x: x, range(l, u + 1)))\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(map(lambda x: 1 if is_sum_of_digits_equal_to_15(x) else 0, range(start, end + 1)))\n\ndef solve():\n    n = symbols('n', integer=True)\n    start = 1000\n    end = 9999\n    return count_integers_with_sum_of_digits_equal_to_15(start, end)\n\nprint(solve())"
  },
  {
    "example_id": 534,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor i in [2, 3, 4, 5, 6, 8, 9]:\n    if i % 3 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 535,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "3.0",
      "0.0"
    ],
    "annotated_answers": [
      "402.0"
    ],
    "solution": "def count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    sum_of_digits = sum_k(n, 1)\n    return sum_of_digits == 15\n\n\ndef sum_k(n, k):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n\n\ndef divisor(n):\n    divisor_list = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_list.append(i)\n    return divisor_list\n\n\ndef main():\n    count = count_integers_with_sum_of_digits_equal_to_15(8, 3)\n    print(f\"The number of integers between 8 and 3 is: {count}\")\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 536,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.14285714285714285"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(1/7 % 10)"
  },
  {
    "example_id": 537,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0",
      "5.0",
      "7.0",
      "13.0",
      "19.0",
      "31.0",
      "43.0",
      "61.0",
      "73.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\nfor i in prime_numbers:\n    for j in prime_numbers:\n        if i+j in prime_numbers and i!= j:\n            print(i+j)\n            break"
  },
  {
    "example_id": 538,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "24.0",
      "36.0",
      "48.0",
      "60.0",
      "72.0",
      "84.0",
      "96.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for i in range(1, 99):\n    if i % 4 == 0 and i % 3 == 0:\n        print(i)"
  },
  {
    "example_id": 539,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = -1\nsum = 0\nfor i in range(2012):\n    sum += x**i\nprint(sum)"
  },
  {
    "example_id": 540,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69.0",
      "15.0",
      "78.0",
      "15.0",
      "87.0",
      "15.0",
      "96.0",
      "15.0",
      "159.0",
      "15.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "# Define a function to find the divisors of a given number\ndef divisor(n):\n    return [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]\n\n\n# Define a function to find the sum of digits of a given number\ndef sum_k(l, u):\n    for i in range(l, u + 1):\n        s = 0\n        for j in str(i):\n            s += int(j)\n        if s == 15:\n            print(f\"{i}: {s}\")\n\n\n# Define a function to check if a number is equal to 5 times an even integer\ndef is_sum_of_digits_equal_to_15(n):\n    s = 0\n    for j in str(n):\n        s += int(j)\n    if s == 15:\n        print(f\"{n}: {s}\")\n\n\n# Define a function to count the integers with sum of digits equal to 15\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        s = 0\n        for j in str(i):\n            s += int(j)\n        if s == 15:\n            count += 1\n    print(f\"{count}\")\n\n\n# Test the function with different inputs\ndivisor(12)\nsum_k(1, 500)\nis_sum_of_digits_equal_to_15(25)\ncount_integers_with_sum_of_digits_equal_to_15(1, 500)"
  },
  {
    "example_id": 541,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "for i in range(100, 999):\n    if i % 9 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 542,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# number of interior diagonals in a regular nine-sided polygon\nnine = 9\n\n# number of vertices\nvertices = nine\n\n# number of edges\nedges = vertices\n\n# number of diagonals\ndiagonals = vertices - edges\n\n# number of interior diagonals\ninterior_diagonals = diagonals\n\nprint(interior_diagonals)"
  },
  {
    "example_id": 543,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "68.0"
    ],
    "solution": "print(17/40 * 160)"
  },
  {
    "example_id": 544,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.34"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "gallon = 0.32\nleft = 0.75\nsold = 1 - left / gallon\nprint(f\"{sold:.2f}\")"
  },
  {
    "example_id": 545,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "# Find largest possible value of b\n# given a = 1200, b is odd integer\n# b = 1200 - a = 1200 - 1200 = 0\n# b = 0 is not valid\n# b = 1, 3, 5, 7, 9 are valid odd integers\n# find largest value of b\nlargest_b = 0\nfor b in range(1, 10, 2):\n    if b * 1200 % 2 == 1:\n        largest_b = b\n        break\nprint(largest_b)"
  },
  {
    "example_id": 546,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0",
      "108.0",
      "3.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "n = 109\nwhile n > 1:\n    if n % 3 == 0:\n        print(f\"{n}!: {n} is divisible by 3\")\n        break\n    n -= 1\nelse:\n    print(f\"{n}!: {n} is not divisible by 3\")"
  },
  {
    "example_id": 547,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1620.0"
    ],
    "annotated_answers": [
      "180.0"
    ],
    "solution": "print(9 * 12 * 15)"
  },
  {
    "example_id": 548,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def gcf(a,b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcf(99,100))"
  },
  {
    "example_id": 549,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.8"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "# The number of households that eat dinner together at least once a week is 40 + 30 + 20 + 10 = 100.\n# The total number of households is 100 + 50 + 40 + 30 + 20 + 10 + 5 + 1 = 265.\n# The percent of households that eat dinner together at least once a week is (100 / 265) \\* 100 = 37.8%\nprint(f\"{37.8:.2f}\")"
  },
  {
    "example_id": 550,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46.18"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "B = math.radians(39)\nC = math.radians(14)\n\nP = math.tan(B) * math.tan(C)\nQ = math.tan(C) * math.cos(B)\n\na = math.degrees(math.atan(P / Q))\n\nprint(f\"{a:.2f}\")"
  },
  {
    "example_id": 551,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13992.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    return sum(int(digit) for digit in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 10**6))"
  },
  {
    "example_id": 552,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "n = 8\na = 7\nb = 6\n\n\ndef divisor(n):\n    divisor = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor.append(i)\n    return divisor\n\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\ndef find_missing_integer(start, end):\n    divisors = divisor(n)\n    for i in range(start, end + 1):\n        if sum(divisors)!= sum(divisors[:i]):\n            return i\n\n\nmissing_integer = find_missing_integer(1, 8)\nprint(missing_integer)\n\n# Check if the missing integer is the correct one\nif count_integers_with_sum_of_digits_equal_to_15(1, missing_integer - 1) == a and \\\n        count_integers_with_sum_of_digits_equal_to_15(missing_integer, 8) == b:\n    print(\"The missing integer is {}\".format(missing_integer))\nelse:\n    print(\"There is no missing integer\")"
  },
  {
    "example_id": 553,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "expression = 2*3*4*5 + 1\n\nvalues = []\n\nfor i in range(1, 6):\n    for j in range(i, 6):\n        for k in range(j, 6):\n            for l in range(k, 6):\n                if i*j*k*l + 1 == expression:\n                    values.append(i*j*k*l)\n\nprint(len(values))"
  },
  {
    "example_id": 554,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "# Define variables\nperimeter = symbols('perimeter')\ndiagonal = symbols('diagonal')\n\n# Define equations\narea = 120\nperimeter_equation = diagonal * 4 - perimeter\nperimeter_solution = solve(perimeter_equation, perimeter)\ndiagonal_solution = solve(perimeter_equation, diagonal)\n\n# Print results\nprint(f\"The perimeter is {perimeter_solution[0]}.\")\nprint(f\"The diagonal is {diagonal_solution[0]}.\")"
  },
  {
    "example_id": 555,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# Initialize the count of 'yes' to 0\ncount_yes = 0\n\n# Check if the equation is equivalent to the given answer\nif symbols('x') == symbols('x'):\n    count_yes += 1\n\n# Check if the equation is equivalent to the given answer\nif symbols('h') == symbols('h'):\n    count_yes += 1\n\n# Check if the equation is equivalent to the given answer\nif symbols('u') == symbols('u'):\n    count_yes += 1\n\n# Check if the equation is equivalent to the given answer\nif symbols('y') == symbols('y'):\n    count_yes += 1\n\n# Check if the equation is equivalent to the given answer\nif symbols('j') == symbols('j'):\n    count_yes += 1\n\n# Check if the equation is equivalent to the given answer\nif symbols('z') == symbols('z'):\n    count_yes += 1\n\n# Print the count of 'yes'\nprint(count_yes)"
  },
  {
    "example_id": 556,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "680.0"
    ],
    "solution": "def divisor(n):\n    return [x for x in range(1, int(math.sqrt(n)) + 1) if n % x == 0]\n\ndef sum_k(l, u):\n    return sum([int(x) for x in range(l, u + 1)])\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(x) for x in str(n)]\n    return sum(digits) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(3, 160))"
  },
  {
    "example_id": 557,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def sum_k(l, u):\n    return sum(int(k) for k in str(l) + str(u))\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, n) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(n):\n            count += 1\n    return count\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 1000000))"
  },
  {
    "example_id": 558,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "list = [3/7, 4/3, 11/8, 6/16]\nlist.sort()\nprint(list[-1] - list[0])"
  },
  {
    "example_id": 559,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "x = symbols('x')\nsolution = solve(7 - 4*x, x)[0]\nprint(8*x + 2)"
  },
  {
    "example_id": 560,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Create a function to find the divisor of a number\ndef divisor(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors\n\n# Create a function to sum k numbers\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\n# Create a function to check if a number is sum of digits equal to 15\ndef is_sum_of_digits_equal_to_15(n):\n    if n < 10:\n        return False\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\n# Create a function to count the number of integers with sum of digits equal to 15\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# Calculate the number of tests\ndef find_number_of_tests(last_test_score):\n    n = count_integers_with_sum_of_digits_equal_to_15(10, last_test_score)\n    m = count_integers_with_sum_of_digits_equal_to_15(last_test_score + 1, 100)\n    return n + m\n\n# Test the function\nprint(find_number_of_tests(98))"
  },
  {
    "example_id": 561,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "133.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef sum_k(l, u):\n    return sum(list(range(l, u + 1)))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(i) for i in str(n)]\n    return sum(digits) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 1000))"
  },
  {
    "example_id": 562,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2\nwhile x <= 12:\n    y = 5\n    while y <= 10:\n        print(x)\n        y += 1\n    x += 1"
  },
  {
    "example_id": 563,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Define the function\ndef square(x):\n    return x**2\n\n# Find the area of the gray piece\narea = square(4) - square(2)\n\n# Print the result\nprint(f\"The area of the gray piece is {area:.2f} square inches.\")"
  },
  {
    "example_id": 564,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 2\n\ndef count_committees(num_people):\n    count = 0\n    for perm in itertools.combinations(range(num_people), n):\n        count += 1\n    return count\n\nprint(count_committees(5))"
  },
  {
    "example_id": 565,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "3.0",
      "-2.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "from sympy import *\n\nx, y = symbols('x, y')\n\nA = (1, 1)\nB = (0, 0)\nC = (1, -1)\nD = (2, 0)\n\narea = integrate(sqrt(1 - x**2)*sqrt(1 - (y - A[1])**2), (x, 0, 1)) + integrate(sqrt(1 - (x - B[0])**2)*sqrt(1 - y**2), (y, 0, 1)) + integrate(sqrt(1 - (x - C[0])**2)*sqrt(1 - (y - C[1])**2), (x, 0, 1)) + integrate(sqrt(1 - (x - D[0])**2)*sqrt(1 - (y - D[1])**2), (x, 0, 1))\n\nprint(area)"
  },
  {
    "example_id": 566,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "# Define variables\nl = 80\nh1 = 112\nh2 = 172\nt = 0.75\n\n# Calculate distance between cliffs\nd = h1 - h2\n\n# Calculate length of trestle\nL = math.sqrt((l**2) + (d**2))\n\n# Calculate height of train\nh = h1 - (t * L)\n\n# Print solution\nprint(f\"{h:.2f}\")"
  },
  {
    "example_id": 567,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 55/5 - 3\nprint(x)"
  },
  {
    "example_id": 568,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# 1.\ntime = 2 * 300\nprint(f\"{time/60:.2f}\")"
  },
  {
    "example_id": 569,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-19.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = symbols('x')\nresult = solve((7+2+x+10)/4)\nprint(result)"
  },
  {
    "example_id": 570,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "37.5"
    ],
    "annotated_answers": [
      "37.5"
    ],
    "solution": "sweatshirt_cost = (67.94 - 15.22*2)\nprint(sweatshirt_cost)"
  },
  {
    "example_id": 571,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "1.0",
      "3.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "140.0"
    ],
    "solution": "def solve_problem():\n    # Problem variables\n    m1, m2, l1, l2 = symbols(\"m1 m2 l1 l2\")\n    # Problem constraints\n    # m1 + m2 = l1\n    # l1 + l2 = 1\n    # m2 perpendicular to l2\n    # m2 + l2 = 1\n    # l1 parallel to l2\n    # m1 + l1 = 1\n    constraints = [\n        m1 + m2 - l1,\n        l1 + l2 - 1,\n        m2 - l2,\n        m1 + l1 - 1,\n        l1 + l2 - 1,\n    ]\n    # Solve system of equations\n    solution = solve(constraints, m1, m2, l1, l2)\n    # Print solution\n    print(solution)\n\n\nsolve_problem()"
  },
  {
    "example_id": 572,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "240.0"
    ],
    "annotated_answers": [
      "480.0"
    ],
    "solution": "area = 3 * 8 * 10\nprint(area)"
  },
  {
    "example_id": 573,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# define a function for the ratio of Mary's age to Alice's age\ndef marys_age_to_alices_age(alice_age):\n    return alice_age * 3 / 5\n\n# find Mary's age\nmary_age = marys_age_to_alices_age(30)\n\n# print Mary's age\nprint(mary_age)"
  },
  {
    "example_id": 574,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# Find the number of outfits that Elodie can put on\ndef number_of_shows(start, end):\n    # Find the number of outfits that Elodie can put on\n    number_of_outfits = end - start + 1\n    # Find the number of models that Elodie can use\n    number_of_models = 5\n    # Find the number of shows that Elodie can put on\n    number_of_shows = number_of_outfits * number_of_models\n    return number_of_shows\n\n\n# Print the number of shows that Elodie can put on\nprint(number_of_shows(1, 5))"
  },
  {
    "example_id": 575,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0",
      "90.0",
      "90.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "digits = [2, 4, 6, 7]\nn = 100\n\n# Calculate the number of possible two-digit integers\n# using each digit exactly once\ncount = 0\nfor i in range(10):\n    for j in range(10):\n        if i!= j:\n            count += 1\n\n# Calculate the number of possible two-digit integers\n# using each digit at most once\ncount_unique = 0\nfor i in range(10):\n    for j in range(10):\n        if i!= j:\n            count_unique += 1\n\n# Calculate the number of possible two-digit integers\n# using each digit at most twice\ncount_most_twice = 0\nfor i in range(10):\n    for j in range(10):\n        if i!= j:\n            count_most_twice += 1\n\nprint(count)\nprint(count_unique)\nprint(count_most_twice)"
  },
  {
    "example_id": 576,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "76.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "print(len(list(range(25, 101))))"
  },
  {
    "example_id": 577,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# find all 3-letter combinations\nletters = string.ascii_letters\nall_combinations = itertools.product(letters, repeat=3)\n\n# filter out combinations that are not code words\ncode_words = []\nfor combination in all_combinations:\n    if combination in [\"AA\", \"AB\", \"BB\", \"BA\"]:\n        code_words.append(\"\".join(combination))\n\nprint(len(code_words))"
  },
  {
    "example_id": 578,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2236.5"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Find the sum of the numbers\ns = sum(range(105))\n\n# Find the mean of the numbers\nm = s / 10\n\n# Find the median of the numbers\nmedian = (sum(range(105)) + 105) / 2\n\n# Subtract the mean from the median\nprint(median - m)"
  },
  {
    "example_id": 579,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 2\nprint(x)"
  },
  {
    "example_id": 580,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "perimeter = 12 + math.sqrt(169)\nprint(f\"{perimeter:.2f}\")"
  },
  {
    "example_id": 581,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "130.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def sum_k(l, u):\n    return sum(range(l, u + 1))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\n\ndef divisor(n):\n    return sum(1 for i in range(1, n + 1) if n % i == 0)\n\n\ndef solve_problem():\n    trinkets = 56\n    drinkets = trinkets * 7 // 3\n    blinkets = drinkets * 4 // 7\n    return trinkets + blinkets\n\n\nprint(solve_problem())"
  },
  {
    "example_id": 582,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "angle_m = 180 - 10\nprint(angle_m)"
  },
  {
    "example_id": 583,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.57",
      "0.43",
      "10.5",
      "14.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "daps = 4\nyaps = 7\nbaps = 3\n\ndaps_to_baps = daps / yaps\nbaps_to_daps = baps / yaps\n\nprint(f\"{daps_to_baps:.2f}\")\nprint(f\"{baps_to_daps:.2f}\")\n\nbaps_to_daps = 42 / baps\ndaps_to_baps = 42 / daps\n\nprint(f\"{daps_to_baps:.2f}\")\nprint(f\"{baps_to_daps:.2f}\")"
  },
  {
    "example_id": 584,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 29-5\nprint(x)"
  },
  {
    "example_id": 585,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-3969.0"
    ],
    "solution": "def divisor(n):\n    return [x for x in range(1, n + 1) if n % x == 0]\n\n\ndef sum_k(l, u):\n    return sum(x for x in range(l, u + 1))\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(i) for i in str(n)) == 15\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for x in range(start, end + 1) if is_sum_of_digits_equal_to_15(x))\n\n\ndef solution(n):\n    divisors = divisor(n)\n    count = count_integers_with_sum_of_digits_equal_to_15(1, n)\n    return count * divisors[0] * divisors[1]\n\n\nprint(solution(63))"
  },
  {
    "example_id": 586,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.13",
      "20.13"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "# Solution 1\n# Find the measure of angle PQR in degrees.\n\n# Use the sine rule to find the length of PT.\nPT = math.sin(math.radians(128)) * 10\n\n# Use the cosine rule to find the length of QR.\nQR = math.sqrt(PT**2 + 20**2)\n\n# Use the tangent rule to find the measure of angle PQR.\nangle = math.degrees(math.atan(PT / QR))\n\nprint(f\"{angle:.2f}\")\n\n# Solution 2\n# Find the measure of angle PQR in degrees.\n\n# Use the sine rule to find the length of PT.\nPT = math.sin(math.radians(128)) * 10\n\n# Use the cosine rule to find the length of QR.\nQR = math.sqrt(PT**2 + 20**2)\n\n# Use the tangent rule to find the measure of angle PQR.\nangle = math.degrees(math.atan(PT / QR))\n\nprint(f\"{angle:.2f}\")"
  },
  {
    "example_id": 587,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.8"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "side_of_house = 12\ncommon_side = 8\n\narea = common_side * side_of_house\n\nside_of_garden = math.sqrt(area)\n\nprint(f\"The length of the common side is {side_of_garden:.2f}\")"
  },
  {
    "example_id": 588,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "# Compute: 3^4-5*8\nprint(3**4 - 5*8)"
  },
  {
    "example_id": 589,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# 90% of 700 students = 630 students\n# 700 - 630 = 70 students\nprint(70)"
  },
  {
    "example_id": 590,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.36507936507936506"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "sum = (2/9) + (1/7)\nprint(sum)"
  },
  {
    "example_id": 591,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 1.20\ntotal_coins = int(n * 4)\nprint(total_coins)"
  },
  {
    "example_id": 592,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "print(6*8)"
  },
  {
    "example_id": 593,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "236.86"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "x = 2 * 125.28 - 13.7\nprint(x)"
  },
  {
    "example_id": 594,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6290000.0"
    ],
    "annotated_answers": [
      "6290000.0"
    ],
    "solution": "print(round(6287215, -4))"
  },
  {
    "example_id": 595,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "n = 100\ncount = 0\nfor i in range(2, 101):\n    if i % 2!= 0 and i % 5!= 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 596,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0",
      "58.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# \ntotal_garments = 72\n# \ndresses = total_garments // 5\n# \nshirts = total_garments - dresses\n# \nprint(f\"{dresses} dresses, {shirts} shirts\")"
  },
  {
    "example_id": 597,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Define the function\ndef divisor(n):\n    return [i for i in range(1, int(n**0.5) + 1) if n % i == 0]\n\n# Define the function\ndef sum_k(l, u):\n    return sum(int(x) for x in str(l) + str(u))\n\n# Define the function\ndef is_sum_of_digits_equal_to_15(n):\n    return sum_k(n, 0) == 15\n\n# Define the function\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\n# Test the function\nprint(count_integers_with_sum_of_digits_equal_to_15(1, 20))"
  },
  {
    "example_id": 598,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "speed = 15 / 2.5\nprint(speed)"
  },
  {
    "example_id": 599,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def gcf(x,y):\n    while y!= 0:\n        x,y = y,x%y\n    return x\nprint(gcf(180,450))"
  },
  {
    "example_id": 600,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1093.0"
    ],
    "solution": "def divisor(n):\n    return set(i for i in range(1, int(n**0.5) + 1) if n % i == 0)\n\ndef sum_k(l, u):\n    return sum(l + k for k in range(u - l + 1))\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(d) for d in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end + 1) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(51, 57))"
  },
  {
    "example_id": 601,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(4 / 4/9)"
  },
  {
    "example_id": 602,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "from sympy import symbols\nfrom sympy import solve\n\n# Find the smallest positive integer greater than 1 and relatively prime to the product of the first 20 positive integers\n\n# define the variables\nn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = symbols('n a b c d e f g h i j k l m n o p q r s t u')\n\n# define the equation\neq = (a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u)**2 - n**2\n\n# solve the equation\nsol = solve(eq, n)\n\n# print the solution\nprint(sol[0])"
  },
  {
    "example_id": 603,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "print(round((26 + 52), -1))"
  },
  {
    "example_id": 604,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print((1 - (-1) ** 11) ** 2)"
  },
  {
    "example_id": 605,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "135.0"
    ],
    "solution": "# Define the length of the side of the pentagon\nside_length = 1\n\n# Define the angle between two adjacent sides\nangle = 30\n\n# Define the number of sides of the pentagon\nsides = 5\n\n# Calculate the measure of the interior angle\ninterior_angle = angle * (sides - 2)\n\n# Calculate the measure of the large angle\nlarge_angle = 180 - interior_angle\n\n# Print the result\nprint(f\"The large angle is {large_angle} degrees\")"
  },
  {
    "example_id": 606,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Number of right handed boys\nn_right_handed_boys = 4 * int((1/2) * 36)\n\n# Number of right handed boys who are girls\nn_right_handed_girls = 2 * int((1/4) * 36)\n\n# Number of left handed boys\nn_left_handed_boys = 36 - n_right_handed_boys\n\n# Number of left handed girls\nn_left_handed_girls = 36 - n_right_handed_girls\n\n# Number of left handed boys who are girls\nn_left_handed_girls_boys = n_left_handed_girls / 2\n\n# Number of right handed boys who are girls\nn_right_handed_girls_boys = n_right_handed_girls / 2\n\nprint(n_right_handed_boys - n_right_handed_girls_boys)"
  },
  {
    "example_id": 607,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "215.0"
    ],
    "annotated_answers": [
      "130.0"
    ],
    "solution": "seniors = 106 + 109\nprint(seniors)"
  },
  {
    "example_id": 608,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "8.0",
      "8.0",
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import statistics\n\ndata = [8, 8, 8, 8, 8]\nprint(statistics.mean(data))\nprint(statistics.median(data))\nprint(statistics.mode(data))\nprint(max(data) - min(data))"
  },
  {
    "example_id": 609,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# \nx = 7.5\ny = 5.5\n\nprint(x - y)"
  },
  {
    "example_id": 610,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "print(6//6-6+6*6)"
  },
  {
    "example_id": 611,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "greatest_possible_length = max(48, 72, 40)\nprint(greatest_possible_length)"
  },
  {
    "example_id": 612,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.656854249492381"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "area = 4 * math.sqrt(2)\nprint(area)"
  },
  {
    "example_id": 613,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Solution\ndef sum_of_distinct_prime_factors(n):\n    factors = []\n    for p in range(2, int(n ** 0.5) + 1):\n        if n % p == 0:\n            factors.append(p)\n            while n % p == 0:\n                n //= p\n    for f in factors:\n        if n % f == 0:\n            n //= f\n    return sum(factors)\n\n\nprint(sum_of_distinct_prime_factors(735))"
  },
  {
    "example_id": 614,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "ans = (123/321) * (456/654) * (789/987) / (123/321) / (456/654) / (789/987)\nprint(ans)"
  },
  {
    "example_id": 615,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-282.74"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Calculate the difference in area\ndiff_area = math.pi * ((100 - 40) / 100) * ((100 + 50) / 100)\n\n# Calculate the decrease in area\ndecrease_in_area = 1 - diff_area\n\n# Calculate the decrease in area as a percentage\ndecrease_in_area_percentage = (decrease_in_area - 1) * 100\n\n# Print the answer\nprint(f\"{decrease_in_area_percentage:.2f}%\")"
  },
  {
    "example_id": 616,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# find the longest side of the triangle\n# given that the shortest side is 12 meters long\n# and the ratio of the angles is 3:2:1\n# the longest side is 3 times longer than the shortest side\n# the longest side is 36 meters long\nprint(36)"
  },
  {
    "example_id": 617,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "448.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "def is_sum_of_digits_equal_to_15(n):\n    return sum(int(x) for x in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\ndef sum_k(l, u):\n    return sum(i for i in range(l, u+1))\n\ndef divisor(n):\n    return sum(1 for i in range(1, n+1) if n % i == 0)\n\n\ndef longest_distance(start, end):\n    return max(sum_k(start, end) - divisor(sum_k(start, end)) + 1, 0)\n\nprint(longest_distance(41, 50))"
  },
  {
    "example_id": 618,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sides = int(2 * math.pi * 144 / (180 * 2))\nprint(sides)"
  },
  {
    "example_id": 619,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        if is_prime(n):\n            count += 1\n    return count\n\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits) == 15\n\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\n\ndef divisor(n):\n    return [i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0]\n\n\ndef count_primes(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for n in range(start, end + 1):\n        if is_prime(n):\n            count += 1\n    return count\n\n\nprint(count_integers_with_sum_of_digits_equal_to_15(10, 100))"
  },
  {
    "example_id": 620,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(5625 ** 0.5)"
  },
  {
    "example_id": 621,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 5\ntotal_interior_angle = 360\nfor i in range(n):\n    total_interior_angle -= 1070\nprint(n)"
  },
  {
    "example_id": 622,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "9604.0"
    ],
    "solution": "digits = [1, 2, 3, 4, 5, 6, 7]\ncount = 0\nfor d1 in digits:\n    for d2 in digits:\n        for d3 in digits:\n            for d4 in digits:\n                for d5 in digits:\n                    if d1 % 2!= 0 and d2 % 2!= 0 and d3 % 2!= 0 and d4 % 2!= 0 and d5 % 2!= 0:\n                        count += 1\n                        print(d1, d2, d3, d4, d5)\nprint(count)"
  },
  {
    "example_id": 623,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "perimeter = 21 * 6\nprint(perimeter)"
  },
  {
    "example_id": 624,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "def divisor(n):\n    return [i for i in range(1, int(n**0.5) + 1) if n % i == 0]\n\ndef sum_k(l, u):\n    return sum(list(range(l, u + 1)))\n\ndef is_sum_of_digits_equal_to_15(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum(1 for i in range(start, end) if is_sum_of_digits_equal_to_15(i))\n\nprint(count_integers_with_sum_of_digits_equal_to_15(100, 1000))"
  },
  {
    "example_id": 625,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6105.0"
    ],
    "annotated_answers": [
      "957.0"
    ],
    "solution": "def count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\ndef is_sum_of_digits_equal_to_15(n):\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == 15\n\ndef sum_k(l, u):\n    return sum(range(l, u + 1))\n\ndef divisor(n):\n    return sum([1 for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0])\n\ndef problem(start, end):\n    return sum_k(start, end) - divisor(end) + count_integers_with_sum_of_digits_equal_to_15(start, end)\n\nprint(problem(1, 110))"
  },
  {
    "example_id": 626,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1400.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "average_miles = 2800 / 2\nprint(average_miles)"
  },
  {
    "example_id": 627,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# This is a brute force solution that works for small numbers\n# but is too slow for larger numbers.\nn = 0\nwhile True:\n    if n * 10 + 5 == 5 * n + 10:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 628,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1188.0"
    ],
    "annotated_answers": [
      "1188.0"
    ],
    "solution": "area = 9 * 12 * 11\nprint(area)"
  },
  {
    "example_id": 629,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "543.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def divisor(n):\n    return [x for x in range(1, int(n**0.5) + 1) if n % x == 0]\n\ndef sum_k(l, u):\n    return sum(map(lambda x: x**2, range(l, u + 1)))\n\ndef is_sum_of_digits_equal_to_15(n):\n    return sum(int(d) for d in str(n)) == 15\n\ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if is_sum_of_digits_equal_to_15(i):\n            count += 1\n    return count\n\nperimeter = 3 * sum_k(9, 10)\nprint(perimeter)"
  },
  {
    "example_id": 630,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33.69"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "y = math.degrees(math.atan(0.5/0.75))\nprint(f\"{y:.2f}\")"
  },
  {
    "example_id": 631,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# \ndef divisor(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\n# \ndef sum_k(l, u):\n    return sum([int(i)**k for i in range(l, u+1) for k in range(1, 6)])\n\n# \ndef is_sum_of_digits_equal_to_15(n):\n    return sum([int(i) for i in str(n)]) == 15\n\n# \ndef count_integers_with_sum_of_digits_equal_to_15(start, end):\n    return sum([1 for i in range(start, end+1) if is_sum_of_digits_equal_to_15(i)])\n\n# \nprint(count_integers_with_sum_of_digits_equal_to_15(1, 100))"
  },
  {
    "example_id": 632,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "print(3**(-4) * 3**(-8) * 3**(14))"
  },
  {
    "example_id": 633,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "print(16/25 * 5**4)"
  },
  {
    "example_id": 634,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "# define variables\na, b, c = symbols('a, b, c')\n\n# define equations\neq1 = a + b + c\neq2 = a * b * c\n\n# solve equations\nsol = solve((eq1, eq2), (a, b, c))\n\n# print solutions\nprint(sol)"
  },
  {
    "example_id": 635,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "162.0"
    ],
    "solution": "teams = 3\nplayers_per_team = 4\nhandshakes_per_team = players_per_team * (players_per_team - 1)\nhandshakes_total = teams * handshakes_per_team\nprint(handshakes_total)"
  }
]