[
  {
    "example_id": 0,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "result = 2**3 * 4**5 * 6**7 * 8**9 % 13\nprint(result)"
  },
  {
    "example_id": 1,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2009.0"
    ],
    "annotated_answers": [
      "1440.0"
    ],
    "solution": "N = 2009\nN % 7\nN % 11\nN % 13\nprint(N)"
  },
  {
    "example_id": 2,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "N = 2003\nsqrt_N = math.sqrt(N)\nprimes = [2]\nfor num in range(3, int(sqrt_N)+1, 2):\n    is_prime = True\n    for prime in primes:\n        if num % prime == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\nnum_primes = len(primes)\nprint(num_primes)"
  },
  {
    "example_id": 3,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = int(10**0.5)\nprint(x)"
  },
  {
    "example_id": 4,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "remainder = 44 % 20\nprint(remainder)"
  },
  {
    "example_id": 5,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.1234458376886085",
      "103"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 3^65^10\nprint(math.factorial(n))"
  },
  {
    "example_id": 6,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 12\nremainder = (n + 4) + (n + 6) + (n + 8)\nremainder %= 9\nprint(remainder)"
  },
  {
    "example_id": 7,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0",
      "5.333333333333333"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Angela's family size\nn = 4\n\n# Number of cups of coffee\nm = 8\n\n# Number of cups of milk\nk = 8\n\n# Angela's portion of coffee\np = 2\n\n# Angela's portion of milk\nq = 1\n\n# Total amount of coffee\nx = m*n\n\n# Total amount of milk\ny = k*n\n\n# Angela's portion of coffee\nz = p*x\n\n# Angela's portion of milk\nw = q*y\n\n# Total amount of coffee consumed by Angela\nu = z/2\n\n# Total amount of milk consumed by Angela\nv = w/6\n\n# Total amount of coffee consumed by Angela\nprint(u)\n\n# Total amount of milk consumed by Angela\nprint(v)"
  },
  {
    "example_id": 8,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "result = 1\nfor i in range(1, 13, 2):\n    result *= i\nprint(result % 10)"
  },
  {
    "example_id": 9,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def base_6(num):\n    return [int(i) for i in str(num)]\n\nnum = base_6(682)\nproduct = num[0] * num[-1]\nprint(product)"
  },
  {
    "example_id": 10,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "100002.0"
    ],
    "solution": "base_2 = base_6(101_2 + 1011_2)\nprint(base_2)"
  },
  {
    "example_id": 11,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3330985984521240.0"
    ],
    "annotated_answers": [
      "740.0"
    ],
    "solution": "# Solution\ndef base_6(num):\n    return num // 6\n\n# Find the least common multiple of the first 25 positive integers\nlcm = 1\nfor i in range(2, 26):\n    lcm *= i\n\n# Find 100 times A + 10 times B + C\nlcm_str = str(lcm)\na, b, c = lcm_str[2:6], lcm_str[6:10], lcm_str[10:]\nprint(int(a) * 100 + int(b) * 10 + int(c))"
  },
  {
    "example_id": 12,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1400.0"
    ],
    "annotated_answers": [
      "1058.0"
    ],
    "solution": "n = 35*40\nprint(n)"
  },
  {
    "example_id": 13,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "106.0"
    ],
    "solution": "num = 1\nwhile num < 1000:\n    if (num % 7) == 1:\n        print(num)\n        break\n    num += 1"
  },
  {
    "example_id": 14,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9261000.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 210\nb = a * 210**2\nprint(b)"
  },
  {
    "example_id": 15,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "n = np.lcm(40, 10)\nprint(n)"
  },
  {
    "example_id": 16,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Write a function to calculate the sum of all positive integers \n# that have twice as many digits when written in base 2 as they have when written in base 3.\ndef sum_of_twice_as_many_digits_in_base_2_and_base_3(n):\n    sum = 0\n    for i in range(1, n+1):\n        if len(bin(i)[2:]) == len(bin(i)[2:] * 2):\n            sum += i\n    return sum\n\n# Test the function\nprint(sum_of_twice_as_many_digits_in_base_2_and_base_3(10))"
  },
  {
    "example_id": 17,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "product = 2\nfor i in range(3, 98, 2):\n    product *= i\n\nprint(product % 10)"
  },
  {
    "example_id": 18,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "b = 103 // 4 * 12\nprint(b)"
  },
  {
    "example_id": 19,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5972.347222222223"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# Base 3\ndef base_3(num):\n    num_str = str(num)\n    num_str_3 = ''\n    for i in range(len(num_str)):\n        num_str_3 += str(int(num_str[i]) % 3)\n    return int(num_str_3, 3)\n\n# Base 6\ndef base_6(num):\n    num_str = str(num)\n    num_str_6 = ''\n    for i in range(len(num_str)):\n        num_str_6 += str(int(num_str[i]) % 6)\n    return int(num_str_6, 6)\n\n# Calculate average\ndef avg(nums):\n    return sum(nums) / len(nums)\n\n# Find positive integers with four digits in base 3\nnums = []\nfor i in range(1000, 10000):\n    if base_3(i) < 1000:\n        nums.append(i)\n\n# Find positive integers with two digits in base 6\nnums_6 = []\nfor i in range(1000, 10000):\n    if base_6(i) < 100:\n        nums_6.append(i)\n\n# Calculate average of positive integers with four digits in base 3\navg_3 = avg(nums)\n\n# Calculate average of positive integers with two digits in base 6\navg_6 = avg(nums_6)\n\n# Calculate average of all positive integers that have four digits when written in base 3, but two digits when written in base 6\navg_all = (avg_3 + avg_6) / 2\n\nprint(avg_all)"
  },
  {
    "example_id": 20,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "203.0"
    ],
    "annotated_answers": [
      "236.0"
    ],
    "solution": "# Number of soldiers\nn = 200\n\n# Number of groups of 4\nn_4 = int(n / 4)\n\n# Number of groups of 3\nn_3 = int(n / 3)\n\n# Number of groups of 11\nn_11 = int(n / 11)\n\n# Number of soldiers left without group\nn_left = n_4 - n_3 + n_11 - 5\n\n# Number of soldiers in the regiment\nn_regiment = n - n_left\n\nprint(n_regiment)"
  },
  {
    "example_id": 21,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# \nN = 100\nm = 20\na_list = []\nfor a in range(N):\n    if a == 0:\n        continue\n    if a == 1:\n        a_list.append(a)\n        continue\n    b = (a - 1)**-1\n    if b % 2 == 0:\n        if (b*a) % m == 4*a % m:\n            a_list.append(a)\nprint(len(a_list))"
  },
  {
    "example_id": 22,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41956.0"
    ],
    "annotated_answers": [
      "11014.0"
    ],
    "solution": "product = 123_4 * 3_4\nprint(product)"
  },
  {
    "example_id": 23,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.05625"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(9/160)"
  },
  {
    "example_id": 24,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print((29**13 - 5**13) % 7)"
  },
  {
    "example_id": 25,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef max_gcd(n):\n    return max(gcd(13*n+8, 5*n+3), gcd(13*n+3, 5*n+8))\n\nprint(max_gcd(1000))"
  },
  {
    "example_id": 26,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "313.0"
    ],
    "solution": "# number of dozen egg containers\nn_dozen_egg = math.floor(200/12)\nn_dozen_egg_left_over = 200%12\n\n# number of baker dozen egg containers\nn_baker_dozen_egg = math.floor(n_dozen_egg_left_over/13)\nn_baker_dozen_egg_left_over = n_dozen_egg_left_over%13\n\n# total number of eggs\nn_egg = n_dozen_egg*12 + n_baker_dozen_egg*13 + n_baker_dozen_egg_left_over\nprint(n_egg)"
  },
  {
    "example_id": 27,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "5.0",
      "1.0",
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "21126.0"
    ],
    "solution": "num = 315_6 * 4_6\nprint(base_6(num))"
  },
  {
    "example_id": 28,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "12.0",
      "64.0",
      "24.0",
      "64.0",
      "36.0",
      "64.0",
      "48.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = np.arange(2, 10, 2)\nbase_6 = [6*i for i in n]\nprint(base_6)"
  },
  {
    "example_id": 29,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "smallest = 1\nwhile True:\n    sum_of_three_consecutive_integers = smallest + 2 + 3\n    if sum_of_three_consecutive_integers**(1/3) == int(sum_of_three_consecutive_integers**(1/3)):\n        print(smallest)\n        break\n    smallest += 1"
  },
  {
    "example_id": 30,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "def get_divisors(num):\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_product(divisors):\n    product = 1\n    for divisor in divisors:\n        product *= divisor\n    return product\n\ndef get_negative_product(num):\n    negative_product = 0\n    for divisor in get_divisors(num):\n        if get_product(get_divisors(divisor)) < 0:\n            negative_product += 1\n    return negative_product\n\ndef main():\n    num_negative_products = 0\n    for num in range(-200, -1):\n        num_negative_products += get_negative_product(num)\n    print(num_negative_products)\n\nmain()"
  },
  {
    "example_id": 31,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "bad_count = 0\nfor i in range(100, 200):\n    if i % 4 == 0:\n        continue\n    if i % 100 == 0:\n        continue\n    if i % 10 == 0:\n        continue\n    if i % 4 == 3:\n        bad_count += 1\nprint(bad_count)"
  },
  {
    "example_id": 32,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "88.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "num = 100\ncount = 0\nfor i in range(1, num):\n    if math.gcd(i, num) < 10:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 33,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10.0",
      "20.0",
      "0.0",
      "20.0",
      "30.0",
      "0.0",
      "30.0",
      "40.0",
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "N = 1000\nfor i in range(N):\n    for j in range(i+1, N):\n        for k in range(j+1, N):\n            if (i*i) % 100 == (j*j) % 100 == (k*k) % 100:\n                print(i, j, k)\n                break"
  },
  {
    "example_id": 34,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "184.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "N = 531340\nbase_6 = lambda num: np.base_repr(num, 6)\nbase_8 = lambda num: np.base_repr(num, 8)\nremainder = lambda num, divisor: num % divisor\n\nprint(remainder(int(base_6(N)), 210))"
  },
  {
    "example_id": 35,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "1147.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\ngreatest_product = 0\nfor i in range(len(primes)):\n    for j in range(i+1, len(primes)):\n        product = primes[i] * primes[j]\n        if product < 40:\n            greatest_product = max(greatest_product, product)\nprint(greatest_product)"
  },
  {
    "example_id": 36,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220926334.0"
    ],
    "annotated_answers": [
      "76028.0"
    ],
    "solution": "# Base 6\nnum_6 = 324\nnum_6_2 = 111010101110\n\n# Convert to base 6\nnum_6_str = str(num_6)\nnum_6_2_str = str(num_6_2)\n\nnum_6_6 = int(num_6_str, base=6)\nnum_6_2_6 = int(num_6_2_str, base=6)\n\n# Addition\nnum_6_6_2_6 = num_6_6 + num_6_2_6\n\n# Convert back to base 6\nnum_6_6_2_6_str = str(num_6_6_2_6)\nnum_6_6_2_6_str_6 = num_6_6_2_6_str[::-1]\n\nprint(num_6_6_2_6_str_6)"
  },
  {
    "example_id": 37,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num = 16**17 * 17**18 * 18**19\nprint(num % 10)"
  },
  {
    "example_id": 38,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "525.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "A = 1575\nB = 2100\ngcd = np.gcd(A, B)\nprint(gcd)"
  },
  {
    "example_id": 39,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def greatest_common_factor(numbers):\n    for i in range(1, min(numbers) + 1):\n        if all(number % i == 0 for number in numbers):\n            return i\n\nnumbers = [100 * i + 10 * j + k for i in range(1, 10) for j in range(1, 10) for k in range(1, 10)]\nprint(greatest_common_factor(numbers))"
  },
  {
    "example_id": 40,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def base_6(num):\n    for i in range(1, 7):\n        if num == int(pow(i, 2)):\n            return i\n    return None\n\nb = [i for i in range(10, 100)]\nb = [base_6(i) for i in b]\nb = list(set(b))\nprint(b)"
  },
  {
    "example_id": 41,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "num = 1 * 3 * 5 * 7 * 9 * 11 * 13\nprint(num % 10)"
  },
  {
    "example_id": 42,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "n = 3**17 + 3**10\n\n# get the digits\ndigits = list(str(n))\n\n# get the digits in base 6\ndigits_6 = [base_6(int(digit)) for digit in digits]\n\n# get the first two digits\nfirst_two = digits_6[:2]\n\n# get the last digit\nlast_digit = digits_6[-1]\n\n# get the sum\nsum = first_two[0] + first_two[1] + last_digit\n\n# convert to base 10\nsum_10 = sum * 6**2\n\nprint(sum_10)"
  },
  {
    "example_id": 43,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6710.0"
    ],
    "annotated_answers": [
      "6710.0"
    ],
    "solution": "# \nr = 2\nnum = 1342\nfor i in range(0, 1000000):\n    if (i * num) % 13 == r:\n        print(i * num)\n        break"
  },
  {
    "example_id": 44,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4641.0",
      "1.0",
      "1547.0",
      "3.0",
      "221.0",
      "7.0",
      "17.0",
      "13.0",
      "1.0",
      "17.0"
    ],
    "annotated_answers": [
      "142.0"
    ],
    "solution": "product = 4641\nnum_list = []\nfor i in range(1,100):\n    num_list.append(i)\nfor num in num_list:\n    if product % num == 0:\n        product = product / num\n        print(product)\n        print(num)"
  },
  {
    "example_id": 45,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import log10\n\ndef digit_after_decimal(n):\n    return int(log10(1/n)) + 1\n\nprint(digit_after_decimal(17))"
  },
  {
    "example_id": 46,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4000.0"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "coins = [25, 10, 5, 1]\nvalues = [27.47, 35.23, 37.37, 26.52]\nvalues = np.array(values)\nnum_coins = [10, 10, 10, 10]\nnum_coins = np.array(num_coins)\n\n# Calculate the total amount of money\ntotal = np.sum(values)\n\n# Calculate the number of coins left after converting\n# all coins into bills\nnum_coins_left = np.sum(num_coins)\n\n# Calculate the number of bills\nnum_bills = np.sum(values//100)\n\n# Calculate the number of coins left after converting\n# all coins into bills\nnum_coins_left = np.sum(num_coins - num_bills)\n\n# Calculate the number of coins left after converting\n# all coins into bills\nnum_coins_left = np.sum(num_coins - num_bills)\n\n# Calculate the number of coins left after converting\n# all coins into bills\nnum_coins_left = np.sum(num_coins - num_bills)\n\nprint(num_coins_left*100)"
  },
  {
    "example_id": 47,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "b = 10\nnum = 2013\n\ndef base_6(num):\n    digits = []\n    while num > 0:\n        digits.append(num % b)\n        num //= b\n    return digits\n\ndef base_end(num, base):\n    digits = base_6(num)\n    return digits[-1]\n\nprint(base_end(num, b))"
  },
  {
    "example_id": 48,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "314.0"
    ],
    "annotated_answers": [
      "314.0"
    ],
    "solution": "a = 0\nfor i in range(1, 10000):\n    if i % 3 == 2 and i % 5 == 4 and i % 7 == 6 and i % 9 == 8:\n        a = i\n        break\nprint(a)"
  },
  {
    "example_id": 49,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# Find the smallest positive integer solutions of the congruence\n# 14u \u2261 46 (mod 100)\n\n# Find the solutions of the congruence\nu_solutions = []\nfor u in range(1, 100):\n    if (14*u) % 100 == 46:\n        u_solutions.append(u)\n\n# Find the two smallest positive integer solutions\ntwo_smallest = sorted(u_solutions)[:2]\n\n# Find the average of the two smallest positive integer solutions\naverage = (two_smallest[0] + two_smallest[1]) / 2\nprint(average)"
  },
  {
    "example_id": 50,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "remainder = 7 % 4\nprint(remainder)"
  },
  {
    "example_id": 51,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "coins = 53\nbags = 7\n# number of coins in each bag\nnum_coins = coins // bags\n# total number of coins\ntotal_coins = num_coins * bags\n# find the smallest number of coins\nsmallest_num_coins = math.ceil(total_coins / 8)\nprint(smallest_num_coins)"
  },
  {
    "example_id": 52,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "nine_base = 81 - 72\nprint(nine_base)"
  },
  {
    "example_id": 53,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "import numpy as np\n\ndef get_remainder(a, b, c):\n    numbers = [2*a*b, b*c, c*a, a*b+b*c+c*a]\n    product = np.prod(numbers)\n    remainder = product % 13\n    return remainder\n\nremainder = 0\nfor a in range(1, 13):\n    for b in range(1, 13):\n        for c in range(1, 13):\n            remainder += get_remainder(a, b, c)\n\nprint(remainder % 13)"
  },
  {
    "example_id": 54,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "7.0",
      "13.0",
      "21.0",
      "37.0",
      "39.0",
      "91.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "num = 10101\nprimes = []\nfor i in range(2, int(math.sqrt(num))+1):\n    if num % i == 0:\n        primes.append(i)\nprint(primes)"
  },
  {
    "example_id": 55,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "m = 112 // 8\nn = 112 // 8\nprint(m + n)"
  },
  {
    "example_id": 56,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndivisors_48 = divisors(48)\ndivisors_156 = divisors(156)\ncommon_divisors = [d for d in divisors_48 if d in divisors_156]\nprint(len(common_divisors))"
  },
  {
    "example_id": 57,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "n = 18\nk = 15\nlcm = n * k\ngcd = math.gcd(n, k)\nprint(lcm // gcd)"
  },
  {
    "example_id": 58,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# \nn = 1000\nd = 20\n\n# \ndivisors = divisors(n)\n\n# \ncount = 0\nfor i in divisors:\n    if i % d == 0:\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 59,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 13**19 * 19**13\nunits = n % 10\nprint(units)"
  },
  {
    "example_id": 60,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1162.0"
    ],
    "annotated_answers": [
      "222.0"
    ],
    "solution": "n = 1147\nnum = 31*n\nremainder = num % 2293\nprint(remainder)"
  },
  {
    "example_id": 61,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.42857142857142855"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(3/7)"
  },
  {
    "example_id": 62,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "132.0"
    ],
    "annotated_answers": [
      "3300.0"
    ],
    "solution": "# Solve for r\nr = 13200 // 100\nprint(r)"
  },
  {
    "example_id": 63,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "num = 3*5*7\ndivisors = divisors(num)\ncubes = [x**3 for x in divisors]\ncubes = list(set(cubes))\nprint(len(cubes))"
  },
  {
    "example_id": 64,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "a = 5\nb = 53\nbase_a = 9\nbase_b = 6\nbase_3 = 3\n\na_base_9 = str(a)[-1]\nb_base_6 = str(b)[-2:]\na_base_3 = str(a-b)[-2:]\n\nprint(a_base_3)"
  },
  {
    "example_id": 65,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# find the number of fractions in the form n/99 with 0<n<99 in lowest terms\nnum_fractions = 0\nfor n in range(1, 99):\n    if n % 3!= 0 and n % 9!= 0:\n        num_fractions += 1\nprint(num_fractions)"
  },
  {
    "example_id": 66,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "360360.0",
      "360360.0",
      "360360.0",
      "360360.0",
      "360360.0",
      "360360.0"
    ],
    "annotated_answers": [
      "2743.0"
    ],
    "solution": "# largest 3-digit base 14 integer\nn = 1000\nwhile True:\n    if all(n % d == 0 for d in range(1, 14)):\n        break\n    n += 1\nprint(n)\n\n# largest 3-digit base 14 integer\nn = 1000\nwhile True:\n    if all(n % d == 0 for d in range(1, 14)):\n        break\n    n += 1\nprint(n)\n\n# largest 3-digit base 14 integer\nn = 1000\nwhile True:\n    if all(n % d == 0 for d in range(1, 14)):\n        break\n    n += 1\nprint(n)\n\n# largest 3-digit base 14 integer\nn = 1000\nwhile True:\n    if all(n % d == 0 for d in range(1, 14)):\n        break\n    n += 1\nprint(n)\n\n# largest 3-digit base 14 integer\nn = 1000\nwhile True:\n    if all(n % d == 0 for d in range(1, 14)):\n        break\n    n += 1\nprint(n)\n\n# largest 3-digit base 14 integer\nn = 1000\nwhile True:\n    if all(n % d == 0 for d in range(1, 14)):\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 67,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "841.0"
    ],
    "annotated_answers": [
      "841.0"
    ],
    "solution": "# \nk = 999\nfor i in range(k, 0, -1):\n    if (i % 3 == 1) and (i % 4 == 1) and (i % 5 == 1) and (i % 6 == 1) and (i % 7 == 1):\n        print(i)\n        break"
  },
  {
    "example_id": 68,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10199.0"
    ],
    "annotated_answers": [
      "11189.0"
    ],
    "solution": "for num in range(10000, 100000):\n    digits = [int(i) for i in str(num)]\n    if sum(digits) == 20:\n        print(num)\n        break"
  },
  {
    "example_id": 69,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "total = sum(range(1, 101))\nprint(total % 6)"
  },
  {
    "example_id": 70,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "N = 2010\nS = 0\nfor i in range(1, 2010):\n    S += i\nS %= 2009\nprint(S)"
  },
  {
    "example_id": 71,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "115.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "b = 5 * 23\nprint(b)"
  },
  {
    "example_id": 72,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 131\nnum = 55\nbase_6_num = base_6(num)\na_base_6_num = base_6(a)\nprint(a_base_6_num)"
  },
  {
    "example_id": 73,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Create a list of all pairs of positive integers (a,b) with gcd(a,b) = 1 and \n# (a/b + 14b/9a) is an integer\n\n# Define the function for (a/b + 14b/9a)\ndef f(a,b):\n    return a/b + 14*b/9*a\n\n# Define the function for gcd(a,b)\ndef gcd(a,b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b%a, a)\n\n# Define the function for all divisors of n\ndef divisors(n):\n    return [i for i in range(1, int(n**0.5) + 1) if n % i == 0]\n\n# Define the function for the base 6 representation of a number\ndef base_6(num):\n    return [int(i) for i in str(num)]\n\n# Define the function for the sum of the digits of a number\ndef sum_digits(num):\n    return sum(base_6(num))\n\n# Create a list of all pairs of positive integers (a,b) with gcd(a,b) = 1 and \n# (a/b + 14b/9a) is an integer\npairs = [(a,b) for a in range(1, 100) for b in range(1, 100) if gcd(a,b) == 1 and int(f(a,b)) == f(a,b)]\n\n# Count the number of pairs of positive integers (a,b) with gcd(a,b) = 1 and \n# (a/b + 14b/9a) is an integer\ncount = 0\nfor pair in pairs:\n    count += 1\nprint(count)"
  },
  {
    "example_id": 74,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "77.0"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "# Create a list of all possible distinct sums\nsums = [15, 18, 20, 24]\n\n# Calculate the sum of all possible distinct sums\nsum_distinct_sums = np.sum(sums)\nprint(sum_distinct_sums)"
  },
  {
    "example_id": 75,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def base_6(num):\n    return math.log(num, 6)\n\ndef divisors(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\ndef gcd_consecutive_fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    gcds = [gcd(fib[i], fib[i+1]) for i in range(n-1)]\n    return max(gcds)\n\nprint(gcd_consecutive_fibonacci(2003))"
  },
  {
    "example_id": 76,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "# Create a list of all 6-digit numbers\n# where each digit appears only once\nall_nums = np.array([\n    [1, 2, 3, 4, 5, 6],\n    [2, 1, 3, 4, 5, 6],\n    [3, 1, 2, 4, 5, 6],\n    [4, 1, 2, 3, 5, 6],\n    [5, 1, 2, 3, 4, 6],\n    [6, 1, 2, 3, 4, 5]\n])\n\n# Calculate the number of pairs of consecutive\n# digits that are relatively prime\nnum_rel_prime = 0\nfor num in all_nums:\n    for i in range(len(num)-1):\n        # Check if the digits are relatively prime\n        if gcd(num[i], num[i+1]) == 1:\n            num_rel_prime += 1\n\nprint(num_rel_prime)"
  },
  {
    "example_id": 77,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 2*10 + 2\nb = 2*10 + 1\n\nprint(a-b)"
  },
  {
    "example_id": 78,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 137\nb = 500\ndenominator = b\nnumerator = a\ndecimal_place = 0\ndecimal_value = 0\nlast_nonzero_digit = 0\nwhile numerator >= 1:\n    decimal_value += (numerator % denominator) * (10 ** decimal_place)\n    numerator //= denominator\n    decimal_place += 1\n    if numerator < 10:\n        last_nonzero_digit = numerator\nprint(last_nonzero_digit)"
  },
  {
    "example_id": 79,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "for n in range(1, 1000000000):\n    if n % 3 == 1 and n % 4 == 1 and n % 5 == 4:\n        print(n)\n        break"
  },
  {
    "example_id": 80,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1234.0"
    ],
    "annotated_answers": [
      "687.0"
    ],
    "solution": "# \nXY = 123\nD = 4\nXYD = XY*10 + D\nprint(XYD)"
  },
  {
    "example_id": 81,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "321.0"
    ],
    "annotated_answers": [
      "231.0"
    ],
    "solution": "# Modular multiplicative inverse of 33\n# given that 33^{-1} = 77 (mod 508)\n# find 11^{-1} =? (mod 508)\n# 11 * 11^{-1} = 11 * 77 = 829\n# 829 = 508 * 1 + 321\n# 11^{-1} = 321 (mod 508)\n# print(11**(-1) % 508)\nprint(321)"
  },
  {
    "example_id": 82,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "gcd_list = []\nfor i in range(1, 1000000):\n    num = i * (i + 1) * (i + 2) * (i + 3)\n    gcd = math.gcd(num, 6)\n    gcd_list.append(gcd)\ngcd_list.sort()\nprint(gcd_list[-1])"
  },
  {
    "example_id": 83,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "divisors_2n = 28\ndivisors_3n = 30\ndivisors_6n = divisors_2n + (divisors_3n - divisors_2n)\nprint(divisors_6n)"
  },
  {
    "example_id": 84,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "frac = 4321/5**7*2**8\nfrac_str = str(frac)\nfrac_list = [int(i) for i in frac_str.split('.')[-1]]\nfrac_sum = sum(frac_list)\nprint(frac_sum)"
  },
  {
    "example_id": 85,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "m = 6\nn = 0\nlargest_divisor = 9\nprint(largest_divisor)"
  },
  {
    "example_id": 86,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1909.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define f(x) and g(x)\nf = lambda x: 12*x+7\ng = lambda x: 5*x+2\n\n# Define h(x) as the gcd of f(x) and g(x)\nh = lambda x: gcd(f(x), g(x))\n\n# Calculate the sum of all possible values of h(x)\nsum_h = 0\nfor x in range(1, 1000):\n    sum_h += h(x)\n\nprint(sum_h)"
  },
  {
    "example_id": 87,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "3.0",
      "1.0",
      "7.0",
      "11.0",
      "77.0",
      "3.0",
      "5.0",
      "0.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef base_6(num):\n    base = 6\n    result = []\n    while num > 0:\n        result.append(num % base)\n        num //= base\n    return result\n\na, b = 1, 1\nwhile True:\n    a += 1\n    b = 80 - a\n    if gcd(a, b) == 1:\n        break\n\nprint(gcd(a, b))\nprint(divisors(a))\nprint(divisors(b))\nprint(base_6(a))\nprint(base_6(b))"
  },
  {
    "example_id": 88,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 1\nfor i in range(1, 11):\n    if i % 5 == 0:\n        continue\n    N *= i\nprint(N % 10)"
  },
  {
    "example_id": 89,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Calculate the product of 2 to the power of 1 to 100\nprod = 1\nfor i in range(1, 101):\n    prod *= 2**i\n\n# Calculate the tens and ones digit\ntens_digit = prod % 10\nones_digit = prod // 10 % 10\n\nprint(tens_digit, ones_digit)"
  },
  {
    "example_id": 90,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 3**len([m for m in range(1,9) if gcd(m,8) == 1]) % 8\nprint(remainder)"
  },
  {
    "example_id": 91,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "N = 219\nlargest_prime = int(math.sqrt(N))\nlargest_prime_factors = []\nfor num in range(1, largest_prime+1):\n    if N % num == 0:\n        largest_prime_factors.append(num)\nlargest_prime_factor = max(largest_prime_factors)\nif largest_prime_factor < 220:\n    print(largest_prime_factor)\nelse:\n    print(0)"
  },
  {
    "example_id": 92,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.34057902536163"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "x = 735\na = 2\nsqrt_ax = math.sqrt(a*x)\nprint(sqrt_ax)"
  },
  {
    "example_id": 93,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Find the remainder when 91145 + 91146 + 91147 + 91148 is divided by 4\nremainder = (91145 + 91146 + 91147 + 91148) % 4\nprint(remainder)"
  },
  {
    "example_id": 94,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2057.0"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "base_6 = lambda num: num % 6\ndivisors = lambda n: [i for i in range(1, n + 1) if n % i == 0]\n\na = 24\nn = 11**2\n\n# Compute 24^{-1}\ninv_24 = pow(a, n - 2, n)\n\n# Find the residue\nresidue = inv_24 * n\n\n# Print the answer\nprint(residue)"
  },
  {
    "example_id": 95,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef find_gcd(a, b, c):\n    return gcd(gcd(a, b), c)\n\nresult = find_gcd(3339, 2961, 1491)\nprint(result)"
  },
  {
    "example_id": 96,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\na = sum(range(1, 10+1)) + 2\nb = sum(range(1, 11+1)) + 8\nprint(gcd(a, b))"
  },
  {
    "example_id": 97,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "# Find next number that is both a perfect cube and a perfect square\ni = 0\nwhile True:\n    i += 1\n    n = i**3\n    if n**0.5 == int(n**0.5):\n        print(n)\n        break"
  },
  {
    "example_id": 98,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 19\na = 19**n + 99**n\nprint(a % 10)"
  },
  {
    "example_id": 99,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2014847.0",
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = [0, 1, 1]\nb = [1, 2, 1]\n\nfor n in range(2, 50):\n    a.append(a[n-1] + b[n-2])\n    b.append(a[n-2] + b[n-1])\n\nprint(a[50] + b[50])\n\nprint(a[50] % 5)"
  },
  {
    "example_id": 100,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "A = 3\nB = 10\n\ndef base_6(num):\n    return str(num)[::-1]\n\ndef divisors(n):\n    i = 1\n    div = []\n    while i <= n:\n        if n % i == 0:\n            div.append(i)\n        i += 1\n    return div\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nA_7 = base_6(A)\nB_7 = base_6(B)\n\n# find the product of the digits\nproduct = 1\nfor i in range(len(A_7)):\n    product *= int(A_7[i])\n    product *= int(B_7[i])\n\nprint(product)"
  },
  {
    "example_id": 101,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "3.0",
      "7.0",
      "103.0"
    ],
    "annotated_answers": [
      "103.0"
    ],
    "solution": "# Define number of pages\nnum_pages = 7\n\n# Define number of leaves\nnum_leaves = 100\n\n# Calculate difference between number of pages and number of leaves\ndiff = num_pages - num_leaves\n\n# Check if number of leaves is a multiple of 7\nif num_leaves % 7 == 0:\n    print('The number of leaves is a multiple of 7.')\nelse:\n    print('The number of leaves is not a multiple of 7.')\n\n# Check if number of pages is 3 more than a multiple of 7\nif diff == 3:\n    print('The number of pages is 3 more than a multiple of 7.')\nelse:\n    print('The number of pages is not 3 more than a multiple of 7.')\n\n# Calculate smallest possible number of leaves\nsmallest_num_leaves = num_leaves + 3\n\n# Print smallest possible number of leaves\nprint(smallest_num_leaves)"
  },
  {
    "example_id": 102,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "12.0",
      "24.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 12\nb = 12\nx = 144\ny = 9\n\ndef get_lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef get_gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef get_sum(a, b):\n    return a + b\n\nlcm = get_lcm(a, b)\ngcd = get_gcd(a, b)\nsum = get_sum(a, b)\n\nprint(lcm, gcd, sum)"
  },
  {
    "example_id": 103,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def base_6(num):\n    return int(num % 6)\n\n\ndef divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nn = 10\n\ndivisors = divisors(n)\n\nmax_value = -1\n\nfor i in divisors:\n    if base_6(i) == n % i:\n        if i > max_value:\n            max_value = i\n\nprint(max_value)"
  },
  {
    "example_id": 104,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "sum_of_squares = 0\nfor i in range(1, 10):\n    sum_of_squares += i**2\nprint(sum_of_squares % 10)"
  },
  {
    "example_id": 105,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# The number of combinations of 2 numbers from 1 to 16 that have a product that is a perfect square.\nN = 16\nperfect_square = []\nfor i in range(1, N+1):\n    for j in range(1, N+1):\n        if i*j == int(i*j)**0.5:\n            perfect_square.append((i, j))\n            print(i, j)\n            print(\"-\"*10)\nprint(len(perfect_square))\n\n\n# The maximum number of draws.\nN = 16\nM = int(N*(N-1)/2)\nprint(M)"
  },
  {
    "example_id": 106,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\na = 2863\nb = 1344\n\nprint(gcd(a, b))"
  },
  {
    "example_id": 107,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "91.0"
    ],
    "solution": "# Finding the sum of all positive factors\nfactors = []\nfor i in range(1, 36 + 1):\n    if i % 36 == 0:\n        factors.append(i)\nprint(sum(factors))"
  },
  {
    "example_id": 108,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import numpy as np\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef last_digits(n):\n    return str(factorial(n))[-18:]\n\ndef first_digit(n):\n    return str(factorial(n))[0]\n\nprint(first_digit(20))"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(2003 % 11)"
  },
  {
    "example_id": 110,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "321.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "b = 321\nprint(b)"
  },
  {
    "example_id": 111,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 3\nk = 0\nfor i in range(1, 2**n):\n    if pow(2, n, 13) == 3:\n        k += 1\nprint(k)"
  },
  {
    "example_id": 112,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4351698.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "# Define the function divisors to calculate the proper divisors of a given number\ndef divisors(n):\n    return set(n.divisors() + [n]) - set([1])\n\n# Define the function gcd to calculate the greatest common divisor of two numbers\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Define the function base_6 to calculate the base 6 of a given number\ndef base_6(num):\n    num = str(num)\n    base_6_string = ''\n    for i in range(0, len(num)):\n        base_6_string += str(int(num[i]) * 6)\n    return base_6_string\n\n# Calculate the sum of the proper divisors of 198\nsum_divisors = sum([int(base_6(i)) for i in range(1, 198)])\nprint(sum_divisors)"
  },
  {
    "example_id": 113,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2420.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(44*55)"
  },
  {
    "example_id": 114,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# Find the smallest reversible prime greater than 17\n\n# Define the function to reverse a number\ndef reverse_digits(num):\n    return int(str(num)[::-1])\n\n# Define the function to check if a number is prime\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Define the function to check if a number is reversible prime\ndef is_reversible_prime(num):\n    if not is_prime(num):\n        return False\n    rev_num = reverse_digits(num)\n    return is_prime(rev_num)\n\n# Define the function to find the smallest reversible prime greater than 17\ndef find_smallest_reversible_prime(n):\n    for i in range(n, n * 2):\n        if is_reversible_prime(i):\n            return i\n    return -1\n\n# Test the function\nprint(find_smallest_reversible_prime(18))"
  },
  {
    "example_id": 115,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 2003\nfactors = divisors(n)\nnum_divisors = len(factors)\na = (num_divisors*num_divisors + num_divisors)//2\nb = (num_divisors*num_divisors - num_divisors)//2\nc = num_divisors\ngcd_abc = gcd(a, b, c)\nabc = a*b*c//gcd_abc\nprint(a+b+c)"
  },
  {
    "example_id": 116,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "remainder = 5 * 5 % 7\nprint(remainder)"
  },
  {
    "example_id": 117,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def get_cubes(n):\n    return [x**3 for x in range(1, n+1)]\n\ncubes = get_cubes(21)\nsum_of_cubes = sum(cubes)\nunit_digit = sum_of_cubes % 10\nprint(unit_digit)"
  },
  {
    "example_id": 118,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 357000\nk = 0\nwhile k < 100000:\n    if n % 18 == 0:\n        print(k)\n        break\n    n += 1\n    k += 1"
  },
  {
    "example_id": 119,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "from math import factorial\nfrom math import gcd\n\nN = 7000\nr = 1\nwhile gcd(r, N)!= 1:\n    r += 1\nprint(r)"
  },
  {
    "example_id": 120,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8529.0"
    ],
    "annotated_answers": [
      "695.0"
    ],
    "solution": "def convert_to_base_10(number, base):\n    result = 0\n    for i, digit in enumerate(str(number)):\n        result += int(digit) * (base**(len(str(number))-i-1))\n    return result\n\nprint(convert_to_base_10(8529, 10))"
  },
  {
    "example_id": 121,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "remainder = pow(5, 999999, 7)\nprint(remainder)"
  },
  {
    "example_id": 122,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "0.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "754.0"
    ],
    "solution": "num = 3254\nbase = 6\nnum_list = []\nwhile num > 0:\n    num_list.append(num % base)\n    num = num // base\nnum_list.reverse()\nprint(num_list)"
  },
  {
    "example_id": 123,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.41025641025641024"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# \nn = 3**-1 + 13**-1\nprint(n)"
  },
  {
    "example_id": 124,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1152.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "# least positive multiple of 72 that has exactly 16 positive factors\n# = least positive multiple of 72 that is divisible by 2^4\n# = 72 * 2^4\n\nprint(72 * 2**4)"
  },
  {
    "example_id": 125,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 199, 2):\n    sum = (sum + i) % 7\nprint(sum)"
  },
  {
    "example_id": 126,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "168.0"
    ],
    "annotated_answers": [
      "102.0"
    ],
    "solution": "# Let m = 24n + 51\n# Then 2m = 48n + 102\n# And 3n = 3(24n + 51) = 72n + 168\n# So the greatest common divisor of 2m and 3n is 168\nprint(168)"
  },
  {
    "example_id": 127,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "131.0"
    ],
    "annotated_answers": [
      "71.0"
    ],
    "solution": "pages = 12*10 + 11\nprint(pages)"
  },
  {
    "example_id": 128,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.6875"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# Define the variables\nred_jelly_beans = 8\ngreen_jelly_beans = 13\nwhite_jelly_beans = 0\n\n# Define the total number of jelly beans\ntotal_jelly_beans = red_jelly_beans + green_jelly_beans + white_jelly_beans\n\n# Define the target number of pounds\ntarget_pounds = 10\n\n# Define the number of ounces in a pound\nounces_per_pound = 16\n\n# Calculate the number of pounds of jelly beans\npounds_jelly_beans = total_jelly_beans / ounces_per_pound\n\n# Calculate the number of ounces of jelly beans\nounces_jelly_beans = total_jelly_beans\n\n# Calculate the number of pounds of white jelly beans\npounds_white_jelly_beans = target_pounds - pounds_jelly_beans\n\n# Calculate the number of ounces of white jelly beans\nounces_white_jelly_beans = target_pounds * ounces_per_pound - ounces_jelly_beans\n\n# Calculate the number of white jelly beans\nwhite_jelly_beans = ounces_white_jelly_beans / ounces_per_pound\n\n# Print the number of white jelly beans\nprint(white_jelly_beans)"
  },
  {
    "example_id": 129,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "num_congruent_to_5 = 0\nfor i in range(-200, 201):\n    if i % 13 == 5:\n        num_congruent_to_5 += 1\nprint(num_congruent_to_5)"
  },
  {
    "example_id": 130,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "x = 42\nx %= 47\nx += 30\nprint(x)"
  },
  {
    "example_id": 131,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "terminate = 0\nfor n in range(1, 1001):\n    num = n / 1375\n    if num % 1 == 0:\n        terminate += 1\nprint(terminate)"
  },
  {
    "example_id": 132,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "0.0"
    ],
    "annotated_answers": [
      "6647.0"
    ],
    "solution": "# write your code here\nn = 340\nprint(base_6(n))"
  },
  {
    "example_id": 133,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "116.0"
    ],
    "annotated_answers": [
      "611.0"
    ],
    "solution": "num = 100\nwhile True:\n    prod = 1\n    for digit in str(num):\n        prod *= int(digit)\n    if prod == 6:\n        print(num)\n        break\n    num += 1"
  },
  {
    "example_id": 134,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "num = 92 * 10**2 * 8 * 10**6\nnum_zeroes = len(str(num))\nprint(num_zeroes)"
  },
  {
    "example_id": 135,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = pow(1999, 2000, 5)\nprint(remainder)"
  },
  {
    "example_id": 136,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_sum_of_digits(n):\n    return sum([int(digit) for digit in str(n)])\n\ndef get_probability_of_prime_number(n):\n    if get_sum_of_digits(n)!= 9:\n        return 0\n    if is_prime(n):\n        return 1\n    return get_probability_of_prime_number(n // 10)\n\ndef main():\n    probability_of_prime_number = 0\n    for i in range(1, 10**8):\n        probability_of_prime_number += get_probability_of_prime_number(i)\n    probability_of_prime_number /= 10**8\n    print(probability_of_prime_number)\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 137,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12007.0"
    ],
    "solution": "print(441 % 7)"
  },
  {
    "example_id": 138,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Generate the possible values of x\nx_values = np.arange(0, 12)\n\n# Set the values for x1 and x2\nx1 = x_values[0]\nx2 = x_values[1]\n\n# Calculate the residues\nresidues = np.mod(x_values - x1, 12) - np.mod(x_values - x2, 12)\n\n# Count the number of residues that are equal to 0\nresidues_count = np.count_nonzero(residues == 0)\n\n# Print the result\nprint(residues_count)"
  },
  {
    "example_id": 139,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "count = 0\nfor units in range(1, 10):\n    for tens in range(units * 10, 100, 10):\n        for hundreds in range(tens // 10, 10):\n            if units % hundreds == 0 and tens % hundreds == 0:\n                count += 1\nprint(count)"
  },
  {
    "example_id": 140,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Find the units digit n\nunits_digit = 3740 % 10\nprint(units_digit)"
  },
  {
    "example_id": 141,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "7.0",
      "6.0",
      "0.0"
    ],
    "annotated_answers": [
      "41305.0"
    ],
    "solution": "num = 12345 + 23415\nprint(base_6(num))"
  },
  {
    "example_id": 142,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "max_n = 0\nfor i in range(1, 10):\n    if 8%i == 0:\n        max_n = i\n        break\nprint(max_n)"
  },
  {
    "example_id": 143,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "503.0"
    ],
    "annotated_answers": [
      "503.0"
    ],
    "solution": "n = 18632\nx = 23\np = 37\nnum_congruent = 0\nfor i in range(n):\n    if i % p == x:\n        num_congruent += 1\nprint(num_congruent)"
  },
  {
    "example_id": 144,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def n_plus_2n_plus_4n_plus_6(n):\n    return (n + 2) * (n + 4) * (n + 6) % 7\n\nprint(n_plus_2n_plus_4n_plus_6(2))"
  },
  {
    "example_id": 145,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10.0",
      "6.0",
      "8.0",
      "8.0",
      "6.0",
      "10.0",
      "0.0"
    ],
    "annotated_answers": [
      "1681.0"
    ],
    "solution": "n = 100\nfor i in range(n):\n    for j in range(n):\n        if i**2 + j**2 == 100:\n            print(i, j)\n            break"
  },
  {
    "example_id": 146,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "def get_cubes(n):\n    return [i**3 for i in range(1, n+1)]\n\ndef base_6(num):\n    return num % 6 == 0\n\ndef divisors(n):\n    return set(i for i in range(1, int(n**0.5) + 1) if n % i == 0)\n\ndef solve_problem(num):\n    cubes = get_cubes(num)\n    for cube in cubes:\n        if base_6(cube):\n            divisors_ = divisors(cube)\n            for div in divisors_:\n                if cube % div == 0:\n                    return div\n    return -1\n\nn = 1000\nlargest_prime = -1\nfor i in range(n):\n    prime = solve_problem(i)\n    if prime > largest_prime:\n        largest_prime = prime\nprint(largest_prime)"
  },
  {
    "example_id": 147,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "490.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define variables\nsally = 239\nweihwa = 174\nzoe = 83\n\n# Calculate total marbles\ntotal_marbles = sally + weihwa + zoe\n\n# Calculate number of groups\nnum_groups = int(total_marbles / 10)\n\n# Calculate number of marbles to remove\nnum_marbles_to_remove = num_groups * 10\n\nprint(num_marbles_to_remove)"
  },
  {
    "example_id": 148,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "1.0",
      "1.0",
      "5.0",
      "5.0",
      "1.0",
      "1.0",
      "5.0",
      "5.0",
      "25.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "for x in range(1,10):\n    for y in range(1,10):\n        if (x*2)%9 == (y+5)%9 and (x%9) == (y)%9:\n            print(x,y)\n            print((x*2)%9, (y+5)%9, (x%9), (y)%9)\n            print((x*2)%9, (y+5)%9, (x%9), (y)%9)\n            print(x*y)\n            print()"
  },
  {
    "example_id": 149,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 9\nn_factorial = 1\nfor i in range(1, n+1):\n    n_factorial *= i\nremainder = n_factorial % 10\nprint(remainder)"
  },
  {
    "example_id": 150,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "411.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "a = 24\nb = 34\n\n# Find the least common multiple of a and b\nlcm = (a * b) // gcd(a, b)\n\n# Find the smallest value of lcm that has a units digit of 6\nfor i in range(len(str(lcm))):\n    if str(lcm)[-1]!= '6':\n        lcm += 1\n    else:\n        break\n\nprint(lcm)"
  },
  {
    "example_id": 151,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2857142857142858",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "remainder = (7j+3) * 3 / 7\nprint(remainder)"
  },
  {
    "example_id": 152,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "110102.0"
    ],
    "solution": "# base_6(num)\nnum = 1 + 11 + 111 + 1111\nbase_2 = np.array([0,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1])\nprint(base_2)\n\n\n# divisors(n)\nn = 20\ndivisors = []\nfor i in range(1, n+1):\n    if n % i == 0:\n        divisors.append(i)\nprint(divisors)\n\n\n# gcd(a, b)\na = 8\nb = 12\nprint(gcd(a, b))\n\n\n# get_cubes(n)\nn = 3\ncubes = []\nfor i in range(1, n+1):\n    cubes.append(i**3)\nprint(cubes)"
  },
  {
    "example_id": 153,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(7**53 % 10)"
  },
  {
    "example_id": 154,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0",
      "8.0",
      "6.0",
      "4.0",
      "6.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def base_6(num):\n    return int(str(num)[-1])\n\ndef get_cubes(n):\n    cubes = []\n    for i in range(n):\n        cubes.append(i**3)\n    return cubes\n\ndef divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    num = 972 - 268\n    num1 = 973 - 267\n    num2 = 974 - 266\n    num3 = 968 - 272\n    num4 = 967 - 273\n    num5 = 966 - 274\n    num6 = 999 - 222\n    num_list = [num, num1, num2, num3, num4, num5, num6]\n    cubes = get_cubes(1000)\n    cubes.remove(num6**3)\n    cubes = sorted(cubes, reverse=True)\n    for cube in cubes:\n        if cube > num_list[-1]**3:\n            break\n        num_list.append(cube)\n    num_list = sorted(num_list, reverse=True)\n    units = []\n    for i in num_list:\n        units.append(base_6(i))\n    return units\n\nif __name__ == \"__main__\":\n    print(main())"
  },
  {
    "example_id": 155,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "216.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "num_rows_A = 105\nnum_rows_B = 6\nnum_band_members_per_row = 2\nnum_rows_B = num_rows_A + num_rows_B\nnum_band_members_in_B = num_rows_B * (num_band_members_per_row - 1) + num_rows_A\nprint(num_band_members_in_B)"
  },
  {
    "example_id": 156,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "684.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# define the base 4 and 9 digits\nbase4_digits = [0, 1, 2, 3]\nbase9_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n# define the sum variable\nsum = 0\n\n# loop through all possible combinations\nfor a in base4_digits:\n    for b in base4_digits:\n        for c in base9_digits:\n            num = a*100 + b*10 + c\n            # check if the number is valid in base 4 and 9\n            if (num % 4 == 0) and (num % 9 == 0):\n                sum += num\n\n# print the sum\nprint(sum)"
  },
  {
    "example_id": 157,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8114364.0"
    ],
    "annotated_answers": [
      "5636.0"
    ],
    "solution": "# Find least and greatest positive four-digit multiples of 4 using 1, 2, 3, and 4 exactly once.\n# The least multiple is 4012 and the greatest is 6342.\n# Find their sum.\n\n# Create a list of all possible four-digit numbers using 1, 2, 3, and 4 exactly once.\nnums = []\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            for l in range(10):\n                if i!= j and j!= k and k!= l and i!= l:\n                    nums.append(int(str(i) + str(j) + str(k) + str(l)))\n\n# Find the least and greatest multiples of 4 using 1, 2, 3, and 4 exactly once.\nleast_multiples = []\ngreatest_multiples = []\nfor num in nums:\n    if num % 4 == 0:\n        least_multiples.append(num)\nfor num in nums:\n    if num % 4 == 0 and num > max(least_multiples):\n        greatest_multiples.append(num)\n\n# Find their sum.\nleast_multiple_sum = sum(least_multiples)\ngreatest_multiple_sum = sum(greatest_multiples)\n\nprint(least_multiple_sum + greatest_multiple_sum)"
  },
  {
    "example_id": 158,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "for i in range(1,47):\n    if (35*i)%47 == 1:\n        print(i)"
  },
  {
    "example_id": 159,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "for n in range(2, 25):\n    if 2**24 == n**n:\n        print(n)"
  },
  {
    "example_id": 160,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.875"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# Solution\nans = (3**-1 + 5**-1)**-1 % 31\nprint(ans)"
  },
  {
    "example_id": 161,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9384.0"
    ],
    "annotated_answers": [
      "1155.0"
    ],
    "solution": "# find the smallest possible value of abcd\nabcd = 1234\n\n# find the smallest possible value of ab\nab = 12\n\n# find the smallest possible value of bc\nbc = 23\n\n# find the smallest possible value of cd\ncd = 34\n\n# find the smallest possible value of abcd\nabcd = ab*bc*cd\n\n# print the smallest possible value of abcd\nprint(abcd)"
  },
  {
    "example_id": 162,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "num = 240\ncubes = get_cubes(num)\nk = min(cubes)\nprint(k)"
  },
  {
    "example_id": 163,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10680.0"
    ],
    "annotated_answers": [
      "-2213.0"
    ],
    "solution": "n1 = 121_3\nn2 = 2122_3\nn3 = 1200_3\nn4 = 2111_3\nresult = (n1 + n2) - (n3 + n4)\nprint(result)"
  },
  {
    "example_id": 164,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "n = 84\n\ndef get_cubes(n):\n    \"\"\"Return the list of cubes of integers less than n.\"\"\"\n    cubes = []\n    for i in range(1, int(n ** (1/3)) + 1):\n        cubes.append(i ** 3)\n    return cubes\n\n\ndef divisors(n):\n    \"\"\"Return the list of divisors of n, excluding n.\"\"\"\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef base_6(num):\n    \"\"\"Return the base 6 representation of num.\"\"\"\n    return [int(i) for i in str(num)]\n\n\ndef least_sum(nums):\n    \"\"\"Return the least possible sum of the given numbers.\"\"\"\n    nums = sorted(nums)\n    sums = [sum(nums[:i + 1]) for i in range(len(nums))]\n    return min(sums)\n\n\nprint(least_sum(get_cubes(n)))"
  },
  {
    "example_id": 165,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3525"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(141/400 % 10)"
  },
  {
    "example_id": 166,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4028.0"
    ],
    "annotated_answers": [
      "2016.0"
    ],
    "solution": "def divisors(n):\n    i,r = 1,1\n    while i <= n:\n        if n%i==0:\n            r += 1\n        i += 1\n    return r\n\ndef nice(n):\n    for m in range(1, int(n**0.5)+1):\n        if divisors(m) == 4:\n            if n % m == 0:\n                return True\n    return False\n\ndef nice_numbers(n):\n    return [x for x in range(n, n+10) if nice(x)]\n\nprint(sum(nice_numbers(2010)))"
  },
  {
    "example_id": 167,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def get_cubes(n):\n    return [i**3 for i in range(1, n+1)]\n\ndef divisors(n):\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [1, 2, n//2] + divisors(n//2)\n    else:\n        return [1, n] + divisors(3*n + 1)\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef base_6(num):\n    return num % 6\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef bouncy_prime(n):\n    if not is_prime(n):\n        return False\n    f = factorial(n)\n    if not is_prime(f):\n        return False\n    return True\n\ndef find_bouncy_prime():\n    for i in range(1, 1000000):\n        if bouncy_prime(i):\n            return i\n    return -1\n\nprint(find_bouncy_prime())"
  },
  {
    "example_id": 168,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "for i in range(1,13):\n    if i not in (1,2,3,4,5,6):\n        print(i)"
  },
  {
    "example_id": 169,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# m is positive integer\nm = 1\n\n# 9 is its own inverse modulo m\n# 3 is not its own inverse modulo m\n# \n# 3 is not its own inverse modulo m\n\n# m must be a positive integer\n\n# \nfor m in range(1, 10000):\n    if 9 % m == 0 and 3 % m!= 0:\n        print(m)\n        break"
  },
  {
    "example_id": 170,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-11.0"
    ],
    "annotated_answers": [
      "-36.0"
    ],
    "solution": "base_4 = 333\nbase_5 = 344\nbase_10 = base_4 - base_5\nprint(base_10)"
  },
  {
    "example_id": 171,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "max_pencils = 33\nbags = 3\npencils = max_pencils % bags\nprint(pencils)"
  },
  {
    "example_id": 172,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define variables\nx = 5\n\n# Calculate the amount of money\n# that each brother received after\n# the last division\nmoney = x*10\n\n# Calculate the amount of money\n# that the younger brother received\n# at the last division\nyounger_brother = money - 10\n\n# Print the result\nprint(younger_brother)"
  },
  {
    "example_id": 173,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 0\nfor num in range(3, 6):\n    if np.gcd(3, num) == 1:\n        k += 1\nprint(k)"
  },
  {
    "example_id": 174,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "809.0"
    ],
    "annotated_answers": [
      "5067.0"
    ],
    "solution": "a = 3210\nb = 2401\n\nprint(a-b)"
  },
  {
    "example_id": 175,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# calculate the integral value\nt = np.arange(1, 200, 1)\nf = (19/t) + (5/t)\ng = np.floor(f)\ncount = len(g[g == f])\nprint(count)"
  },
  {
    "example_id": 176,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "N = 23**5 * 3**3 * 5**2 * 7**2 * 11**2 * 13**2 * 17**2 * 19**2 * 23**2\nprime_factors = [2, 3, 5, 7, 11, 13, 17, 19, 23]\nexponents = []\nfor prime in prime_factors:\n    exponent = 0\n    while N % prime == 0:\n        exponent += 1\n        N //= prime\n    exponents.append(exponent)\nprint(prime_factors[exponents.index(max(exponents))])"
  },
  {
    "example_id": 177,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "57.0"
    ],
    "annotated_answers": [
      "57.0"
    ],
    "solution": "for n in range(398):\n    if (7*n) % 398 == 1:\n        print(n)\n        break"
  },
  {
    "example_id": 178,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "def get_cubes(n):\n    return [x**3 for x in range(1, int(n**(1/3))+1)]\n\ndef divisors(n):\n    return [x for x in range(1, int(n**(1/2))+1) if n % x == 0]\n\ndef base_6(num):\n    return int(num)\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solve_equation(a, b, c):\n    return (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n# Camera A\nstart_time = 6\ninterval = 11\nnum_pics_a = 4\ntime_a = start_time + num_pics_a * interval\n\n# Camera B\nstart_time_b = 7\ninterval_b = 7\nnum_pics_b = 4\ntime_b = start_time_b + num_pics_b * interval_b\n\n# When do they take their last picture together?\nlast_pic = max(time_a, time_b)\n\n# How many minutes before noon?\nminutes = last_pic % 12\nprint(minutes)"
  },
  {
    "example_id": 179,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "1016.0"
    ],
    "solution": "def mod55(x):\n    return x % 55\n\ndef congruence(r):\n    return r**2 + 4*r + 4 == r**2 + 2*r + 1\n\ndef solution():\n    for r in range(1000, 9999):\n        if congruence(r) and mod55(r) == 0:\n            return r\n    return -1\n\nprint(solution())"
  },
  {
    "example_id": 180,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "n = 9\nnum_divisors = 0\nfor i in range(1, n+1):\n    if n % i == 0:\n        num_divisors += 1\nprint(num_divisors)"
  },
  {
    "example_id": 181,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def get_cubes(n):\n    return [i**3 for i in range(1, n+1)]\n\ndef get_sum_cubes(n):\n    return sum(get_cubes(n))\n\ndef get_units_digit(num):\n    return str(num)[-1]\n\nnum = 0\nfor i in range(1, 50):\n    num += get_sum_cubes(i)\n\nprint(get_units_digit(num))"
  },
  {
    "example_id": 182,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "86.0"
    ],
    "annotated_answers": [
      "1076.0"
    ],
    "solution": "a = 62\nb = 75\nn = 1001\nremainder = (a-b) % 99\nprint(remainder)"
  },
  {
    "example_id": 183,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.6333333333333333"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = 7\na = 2\nb = 3\nL = (a+b)**-1\nR = a**-1 + b**-1\nprint(L-R)"
  },
  {
    "example_id": 184,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "remainder = 729 % 15\nprint(remainder)"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "n = 288\nm = n - 2\nif n % 2 == 0:\n    print(n)\nelse:\n    print(m)"
  },
  {
    "example_id": 186,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36914.086956521736"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "# 6432 and 132 have a common factor of 11\ngcd_6432_132 = gcd(6432, 132)\ncommon_factor = gcd_6432_132 + 11\n\n# Calculate the result\nresult = 6432 * 132 / common_factor\nprint(result)"
  },
  {
    "example_id": 187,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "226.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 100):\n    if i % 2 == 0:\n        continue\n    if i % 144 == 0:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 188,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.7",
      "2.0",
      "0.8",
      "3.0",
      "0.8999999999999999",
      "4.0",
      "1.0",
      "5.0",
      "1.1"
    ],
    "annotated_answers": [
      "0.8"
    ],
    "solution": "def recurrence(n):\n    return n / 10 + 0.6\n\nn = 1\nwhile n < 100:\n    print(n, recurrence(n))\n    n += 1"
  },
  {
    "example_id": 189,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "1.0",
      "9.0",
      "2.0",
      "1.0",
      "36.0",
      "3.0",
      "1.0",
      "900.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def get_cubes(n):\n    return [x**3 for x in range(1, n+1)]\n\ndef divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return sorted(divisors)\n\ndef base_6(num):\n    return int(str(num)[::-1], 6)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef S_n(n):\n    return sum(get_cubes(n))\n\ndef S_n_plus_1(n):\n    return sum(get_cubes(n+1))\n\ndef main():\n    for n in range(1, 10000):\n        lcm_value = lcm(S_n(n), S_n_plus_1(n))\n        if lcm_value > 1000000:\n            break\n        print(\"For n =\", n, \"the greatest common divisor of S_n and S_n+1 is\", lcm_value)\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 190,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.143"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Create a list of all possible three-digit numbers\nnums = []\nfor a in range(10):\n    for b in range(10):\n        for c in range(10):\n            nums.append(a*100 + b*10 + c)\n\n# Find the number of divisible by 7\nnum_divisible = 0\nfor num in nums:\n    if num % 7 == 0:\n        num_divisible += 1\n\n# The number $d$ must be a digit in the thousands place\n# so we can find the number of $d$'s by dividing the\n# number of divisible numbers by 1000\nprint(num_divisible / 1000)"
  },
  {
    "example_id": 191,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000001.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "def get_cubes(n):\n    return [x**3 for x in range(1, n+1)]\n\nM = min(get_cubes(100))\nN = max(get_cubes(100))\nprint(M + N)"
  },
  {
    "example_id": 192,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2702702702702703.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "num = 1/37\nnum_digits = 291\nnum_str = str(num)\nnum_list = num_str.split('.')\nnum_list = num_list[1]\nnum_list = num_list[:num_digits]\nnum_list = ''.join(num_list)\nnum_list = int(num_list)\nprint(num_list)"
  },
  {
    "example_id": 193,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "num = 54\nprint(num % 6)"
  },
  {
    "example_id": 194,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "3.0",
      "27.0",
      "4.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# Base 3\nnum = 27\nbase_3 = np.array([num%3, num//3%3, num//9%3])\nbase_3 = base_3.reshape((1, 3))\n\n# Base 4\nbase_4 = np.array([num%4, num//4%4, num//16%4])\nbase_4 = base_4.reshape((1, 3))\n\n# Compare Base 3 and Base 4\nif (base_3 == base_4[::-1]).all():\n    print(\"The number is {} in base 3 and {} in base 4\".format(num, num))\nelse:\n    print(\"The number is not {} in base 3 and {} in base 4\".format(num, num))"
  },
  {
    "example_id": 195,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1005.0"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "a = 1\nfor i in range(2, 2010):\n    if i % 2!= 0:\n        a += 1\nprint(a)"
  },
  {
    "example_id": 196,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-88684.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Define the number\nnum = 59138\n\n# Get the divisors\ndivisors = divisors(num)\n\n# Get the sum of the divisors\nsum_divisors = sum(divisors)\n\n# Get the sum of the digits\nsum_digits = sum(map(int, str(num)))\n\n# Find the difference\ndiff = sum_digits - sum_divisors\n\n# Print the answer\nprint(diff)"
  },
  {
    "example_id": 197,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10100.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "# area of the original rectangle\narea = 2000\n\n# length of the first side\nside_1 = area/2\n\n# length of the second side\nside_2 = area/2\n\n# increase the length of one side by 30%\nside_1 = side_1*(1+0.3)\n\n# decrease the length of the other side by 20%\nside_2 = side_2*(1-0.2)\n\n# new area\nnew_area = side_1*side_2\n\n# new sides\nnew_side_1 = side_1\nnew_side_2 = side_2\n\n# smallest possible area\nmin_area = new_area\n\n# smallest possible sides\nmin_side_1 = new_side_1\nmin_side_2 = new_side_2\n\n# loop over all possible pairs of opposite sides\nfor side_1, side_2 in itertools.combinations(range(100, 200), 2):\n    # new area\n    new_area = side_1*side_2\n    # new sides\n    new_side_1 = side_1\n    new_side_2 = side_2\n    # check if the new area is smaller than the current minimum\n    if new_area < min_area:\n        # update the minimum\n        min_area = new_area\n        min_side_1 = new_side_1\n        min_side_2 = new_side_2\n\n# print the smallest possible area\nprint(min_area)"
  },
  {
    "example_id": 198,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2220.0"
    ],
    "solution": "def least_positive_integer_multiple_of_30(digits):\n    \"\"\"\n    Args:\n        digits (list): List of digits to use in the solution.\n\n    Returns:\n        int: Least positive integer multiple of 30 that can be written with only the digits 0 and 2.\n    \"\"\"\n    multiples = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n    for multiple in multiples:\n        if multiple_of_30(multiple, digits):\n            return multiple\n    return None\n\ndef multiple_of_30(multiple, digits):\n    \"\"\"\n    Args:\n        multiple (int): Integer to check if it is a multiple of 30.\n        digits (list): List of digits to use in the solution.\n\n    Returns:\n        bool: True if the integer is a multiple of 30, False otherwise.\n    \"\"\"\n    if multiple % 30 == 0:\n        return True\n    else:\n        return False\n\ndigits = [0, 2]\nresult = least_positive_integer_multiple_of_30(digits)\nprint(result)"
  },
  {
    "example_id": 199,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3563.0"
    ],
    "annotated_answers": [
      "119.0"
    ],
    "solution": "# Find the sum of the two multiples of 7 that have digit sum of 10.\n# Find the multiples of 7 that have digit sum of 10.\nmultiples_of_7 = [num for num in range(100, 1000) if num % 7 == 0]\ndigit_sum_10_multiples = [num for num in multiples_of_7 if sum(int(digit) for digit in str(num)) == 10]\nprint(sum(digit_sum_10_multiples))"
  },
  {
    "example_id": 200,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "decimal = 54317/80000\nprint(len(str(decimal).split('.')[1]))"
  },
  {
    "example_id": 201,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "n = 95\nd = [int(digit) for digit in str(n)]\nsum_of_digits = sum(d)\nprint(2*sum_of_digits)"
  },
  {
    "example_id": 202,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 11213141 % 18\nprint(n)"
  },
  {
    "example_id": 203,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "units_digit = 17**13 - 17\nprint(units_digit % 10)"
  },
  {
    "example_id": 204,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.555798984247303",
      "-38.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import log10\n\n# find the number of digits in the decimal representation\nnum_digits = int(log10(19)) + 1\n\n# find the 39th digit\ndigit = (num_digits - 1) - 38\n\n# find the 39th digit in the decimal representation\nprint(int(19) % (10**digit))"
  },
  {
    "example_id": 205,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "num = 123456\nfor n in range(101):\n    if num % 101 == n:\n        print(n)"
  },
  {
    "example_id": 206,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "units_digit = 1\nfor i in range(2, 100):\n    if i % 10 == 0:\n        units_digit = i % 10\nprint(units_digit)"
  },
  {
    "example_id": 207,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# \nresidue = (17 * 18) % 4\nprint(residue)"
  },
  {
    "example_id": 208,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1435.0"
    ],
    "annotated_answers": [
      "319.0"
    ],
    "solution": "num = 634_7\nbase_10 = 0\nfor digit in str(num):\n    base_10 += int(digit) * 6 ** (len(str(num)) - (str(num).index(digit) + 1))\nprint(base_10)"
  },
  {
    "example_id": 209,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "n = 0\nfor num in range(1, 61):\n    if num ** 2 in range(1, 1201):\n        n += 1\nprint(n)"
  },
  {
    "example_id": 210,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "num = 196\ndivisors = divisors(num)\nprint(len(divisors))"
  },
  {
    "example_id": 211,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 16\nb = 21\nn = 0\nwhile n <= 36:\n    if (a - b) % 37 == n:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 212,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3136.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "A = sum(divisors(500))\ndistinct_primes = set([])\nfor prime in divisors(A):\n    distinct_primes.add(prime)\nprint(sum(distinct_primes))"
  },
  {
    "example_id": 213,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "124.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "num = 30**4\nnum_divisors = 0\nfor i in range(1, num):\n    if num % i == 0:\n        num_divisors += 1\nprint(num_divisors)"
  },
  {
    "example_id": 214,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 19\nfactors = []\nfor i in range(1, n+1):\n    for j in range(1, n+1):\n        if i*j == n:\n            factors.append(i*j)\nprint(len(factors))"
  },
  {
    "example_id": 215,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# define the number of solutions\nnum_solutions = 0\n\n# determine the number of solutions\nfor x in range(1, 101):\n    # determine if x is a solution\n    if pow(64, 1/66) == x:\n        num_solutions += 1\n\n# print the number of solutions\nprint(num_solutions)"
  },
  {
    "example_id": 216,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 16\nA = sum([i for i in range(n) if pow(i, n, n) == 1])\nB = sum([i for i in range(n) if pow(i, n, n) == 1])\nprint(A - B)"
  },
  {
    "example_id": 217,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-99.0"
    ],
    "annotated_answers": [
      "2145.0"
    ],
    "solution": "# Declare variables\na = 2345\nb = 41324\n\n# Convert numbers to base 6\na_base_6 = np.array([int(x) for x in str(a)])\nb_base_6 = np.array([int(x) for x in str(b)])\n\n# Compute number of digits in base 6\nn_a = len(a_base_6)\nn_b = len(b_base_6)\n\n# Initialize variables for base 6\na_base_6 = np.zeros(n_a, dtype=int)\nb_base_6 = np.zeros(n_b, dtype=int)\n\n# Convert numbers to base 6\nfor i in range(n_a):\n    a_base_6[i] = a % 6\n    a //= 6\n\nfor i in range(n_b):\n    b_base_6[i] = b % 6\n    b //= 6\n\n# Compute base 6 difference\ndifference = np.zeros(max(n_a, n_b), dtype=int)\n\nfor i in range(n_a):\n    difference[i] = a_base_6[i] - b_base_6[i]\n\n# Convert difference to base 10\ndiff = 0\nfor i in range(n_b):\n    diff += difference[i] * 6 ** i\n\n# Print result\nprint(diff)"
  },
  {
    "example_id": 218,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "# convert base 3 to base 10\nbase_10 = 0\nfor digit in range(3):\n    base_10 += (3 ** digit) * (1222 % 3 ** digit)\nprint(base_10)"
  },
  {
    "example_id": 219,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "divisors = [1, 2, 3, 4, 5, 6]\nnum = 1452\ncount = 0\nfor divisor in divisors:\n    if num % divisor == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 220,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "num = 4**5 * 5**13\nprint(len(str(num)))"
  },
  {
    "example_id": 221,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "print(str(2005**2 + 2005**0 + 2005**0 + 2005**5)[-2:])"
  },
  {
    "example_id": 222,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "465.0"
    ],
    "annotated_answers": [
      "248.0"
    ],
    "solution": "# Find the least common multiple of 120 and x\nlcm = 3720\n# Find the greatest common divisor of 120 and x\ngcd = 8\n# Find the other number\nx = lcm // gcd\nprint(x)"
  },
  {
    "example_id": 223,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "num = 100\nbase = 62\n\ndef base_6(num):\n    return np.array([np.array([x, x+1, x+2, x+3, x+4]) for x in range(0, num, 5)])\n\ndef divisors(n):\n    return [i for i in range(1, int(n**0.5) + 1) if n % i == 0]\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(base_6(num))"
  },
  {
    "example_id": 224,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "n = 2\na = 15\nb = 47\nx = (a * b) // gcd(a, b)\nprint(x % b)"
  },
  {
    "example_id": 225,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1418.0"
    ],
    "annotated_answers": [
      "6152.0"
    ],
    "solution": "n = 1418\nbase_10 = 1418\nfor i in range(1, 10):\n    for j in range(1, 10):\n        for k in range(1, 10):\n            for l in range(1, 10):\n                num = int(i*1000 + j*100 + k*10 + l)\n                base_6 = num % 6\n                if base_6 == n:\n                    base_10 += num\nprint(base_10)"
  },
  {
    "example_id": 226,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 2\nb = 4\nans = (a**2 + b**2) % 3\nprint(ans)"
  },
  {
    "example_id": 227,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110376033.0"
    ],
    "annotated_answers": [
      "21022.0"
    ],
    "solution": "# least common multiple\na = 10508\nLCM = a + 1\nLCM *= a - 5\n\n# calculate the value of a^2 - 4a + 1\na_squared = a ** 2\nfour_a = 4 * a\none = 1\na_squared_minus_four_a_plus_one = a_squared - four_a + one\n\n# print the result\nprint(a_squared_minus_four_a_plus_one)"
  },
  {
    "example_id": 228,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "num = 12345679\nprime_sum = 0\nfor i in range(2, 9):\n    for j in range(i, 9):\n        if np.array([i, j]).prod() == num:\n            prime_sum += i\n            prime_sum += j\nprint(prime_sum)"
  },
  {
    "example_id": 229,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "b = 10\nwhile b > 1:\n    if (b - 1) * (b - 1) == 3:\n        break\n    b -= 1\nprint(b)"
  },
  {
    "example_id": 230,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "14.8"
    ],
    "solution": "ages = [13, 14, 15, 16, 17, 18, 19]\nages_product = 705600\nages_mean = sum(ages) / len(ages)\nages_mean_decimal = sum(ages) / len(ages)\nprint(ages_mean_decimal)"
  },
  {
    "example_id": 231,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Define the sum of four consecutive positive odd numbers\nnums = np.arange(1, 101, 2)\nsum_nums = np.sum(nums)\n\n# Find the greatest common divisor of the sum of the numbers\ngcd_nums = gcd(sum_nums, 6)\n\n# Find the greatest common divisor of the sum of the numbers\n# and the number 6\ngcd_nums_6 = gcd(sum_nums, 6)\n\n# Print the result\nprint(gcd_nums_6)"
  },
  {
    "example_id": 232,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1060.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Number of primes less than 100\nN = 100\n\n# List of primes\nprimes = []\n\n# Iterate over all numbers less than N\nfor num in range(2, N):\n    # Check if num is prime\n    is_prime = True\n    # Iterate over all primes\n    for prime in primes:\n        # Check if num is divisible by prime\n        if num % prime == 0:\n            # If num is divisible by prime, it is not prime\n            is_prime = False\n            break\n    # If num is prime, add it to list of primes\n    if is_prime:\n        primes.append(num)\n\n# Sum of all primes\nsum_primes = 0\nfor prime in primes:\n    sum_primes += prime\n\n# Print sum of all primes\nprint(sum_primes)"
  },
  {
    "example_id": 233,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "def convert_to_base_10(number, base):\n    return int(str(number), base)\n\nprint(convert_to_base_10(62, 7) + convert_to_base_10(34, 5))"
  },
  {
    "example_id": 234,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def gcd(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    else:\n        return gcd(a, b - a)\n\ndef solution(n):\n    return gcd(n + 7, 2*n + 1)\n\nprint(solution(10))"
  },
  {
    "example_id": 235,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 1\nwhile (617 * n) % 18!= 943 * n % 18:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 236,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "def gcd(a,b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(6**210**2,15**4))"
  },
  {
    "example_id": 237,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "7.0",
      "0.0",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "100100.0"
    ],
    "solution": "# b = 6\nb = 6\n\n# base_6(num)\ndef base_6(num):\n    return np.array(list(map(int, str(num))))\n\n# divisors(n)\ndef divisors(n):\n    return set(i for i in range(1, n+1) if n % i == 0)\n\n# gcd(a, b)\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# result\nresult = base_6(11011*b-1 + 1001)\nprint(result)"
  },
  {
    "example_id": 238,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "num = 7**7\nprint(num%10)"
  },
  {
    "example_id": 239,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# \n# Mars year length\nMars_year = 697\n\n# \n# Mars calendar length\nMars_calendar = 12 * 7\n\n# \n# Mars year 0 begins on the first day of the week\nMars_year0 = 0\n\n# \n# Mars next year which will begin on the first day of the week\nMars_next = Mars_year0 + Mars_calendar\n\nprint(Mars_next)"
  },
  {
    "example_id": 240,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for t in range(1, 23):\n    if t % 23 == 1:\n        print(t)\n        break"
  },
  {
    "example_id": 241,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4435.0"
    ],
    "solution": "print(123 % 5)"
  },
  {
    "example_id": 242,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "634.5",
      "844.5",
      "0.7513321492007105"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "# Write your solution here\n\n# Base 6\ndef base_6(num):\n    num_str = str(num)\n    base_6_str = ''\n    for i in range(len(num_str)):\n        base_6_str += str(int(num_str[i]) % 6)\n    return int(base_6_str)\n\n# Base 8\ndef base_8(num):\n    num_str = str(num)\n    base_8_str = ''\n    for i in range(len(num_str)):\n        base_8_str += str(int(num_str[i]) % 8)\n    return int(base_8_str)\n\n# Average of numbers in base 6\nbase_6_numbers = []\nfor i in range(100, 1000):\n    if base_6(i) < 10:\n        base_6_numbers.append(i)\nbase_6_avg = sum(base_6_numbers) / len(base_6_numbers)\nprint(base_6_avg)\n\n# Average of numbers in base 8\nbase_8_numbers = []\nfor i in range(100, 1000):\n    if base_8(i) < 10:\n        base_8_numbers.append(i)\nbase_8_avg = sum(base_8_numbers) / len(base_8_numbers)\nprint(base_8_avg)\n\n# Ratio of base 6 to base 8 average\nprint(base_6_avg / base_8_avg)"
  },
  {
    "example_id": 243,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# \nprint(71 % 3)"
  },
  {
    "example_id": 244,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "for i in range(6):\n    if (12345 % 6) == i:\n        print(i)"
  },
  {
    "example_id": 245,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "0.0",
      "0.0",
      "2.0",
      "0.0",
      "7.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# base 10 number 87 in base 2\nnum = 87\nbinary = np.array(list(map(int, np.binary_repr(num))))\nprint(binary)\n\n# base 10 number 87 in base 3\nnum = 87\nternary = np.array(list(map(int, np.base_repr(num, 3))))\nprint(ternary)\n\n# number of digits in base 2\nnum_digits_2 = len(binary)\nprint(num_digits_2)\n\n# number of digits in base 3\nnum_digits_3 = len(ternary)\nprint(num_digits_3)\n\n# difference between the number of digits\nnum_diff = num_digits_2 - num_digits_3\nprint(num_diff)"
  },
  {
    "example_id": 246,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101010.0"
    ],
    "annotated_answers": [
      "3255.0"
    ],
    "solution": "num = 101010\nbase_10 = np.base_repr(num, 10)\nprint(base_10)"
  },
  {
    "example_id": 247,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "n = 16\nd = 12\nm = 15\n\nnum = d*m\nden = (d-1)*(m-1)\n\nprint(num//den)"
  },
  {
    "example_id": 248,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for a in range(1, 24):\n    if a % 24 == 1:\n        print(a)"
  },
  {
    "example_id": 249,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(10)"
  },
  {
    "example_id": 250,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Define a function to check if a number is a multiple of 7\ndef is_multiple_of_7(n):\n    return n % 7 == 0\n\n# Define a function to compute the number of digits in a number\ndef num_digits(n):\n    return int(math.log10(n)) + 1\n\n# Define a function to compute the sum of the digits of a number\ndef sum_digits(n):\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits)\n\n# Define a function to compute the product of the digits of a number\ndef product_digits(n):\n    digits = [int(digit) for digit in str(n)]\n    return math.prod(digits)\n\n# Define a function to compute the number of ordered pairs (A,B) where A and B are positive integers and AAA_7 + BBB_7 = 666_7\ndef num_ordered_pairs(n):\n    # Initialize variables\n    num_pairs = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if is_multiple_of_7(a) and is_multiple_of_7(b):\n                if sum_digits(a**3) + sum_digits(b**3) == 666:\n                    num_pairs += 1\n    return num_pairs\n\n# Test the function\nprint(num_ordered_pairs(10))"
  },
  {
    "example_id": 251,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 4\ny = 7\nnum = (x + 1) ** 2 * (y + 5) ** 3\nmod = num % 19\nprint(mod)"
  },
  {
    "example_id": 252,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "if calendar.isleap(2008):\n    print(29)\nelse:\n    print(28)"
  },
  {
    "example_id": 253,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Find the number of divisible by 20 between 15 and 85\ndef divisible_by_20(num):\n    return num % 20 == 0\n\ndef find_divisible_numbers(start, end):\n    return [num for num in range(start, end) if divisible_by_20(num)]\n\nnum_divisible = len(find_divisible_numbers(15, 85))\nprint(num_divisible)"
  },
  {
    "example_id": 254,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "largest = 2**8 - 1\nprint(largest)"
  },
  {
    "example_id": 255,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2027042.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# LCM of 1! + 2!\nnum1 = 1+2\n# LCM of 2! + 3!\nnum2 = 2+3\n# LCM of 3! + 4!\nnum3 = 3+4\n# LCM of 4! + 5!\nnum4 = 4+5\n# LCM of 5! + 6!\nnum5 = 5+6\n# LCM of 6! + 7!\nnum6 = 6+7\n# LCM of 7! + 8!\nnum7 = 7+8\n# LCM of 8! + 9!\nnum8 = 8+9\n\n# LCM of 1! + 2!\nnum1 = int(num1)\n# LCM of 2! + 3!\nnum2 = int(num2)\n# LCM of 3! + 4!\nnum3 = int(num3)\n# LCM of 4! + 5!\nnum4 = int(num4)\n# LCM of 5! + 6!\nnum5 = int(num5)\n# LCM of 6! + 7!\nnum6 = int(num6)\n# LCM of 7! + 8!\nnum7 = int(num7)\n# LCM of 8! + 9!\nnum8 = int(num8)\n\nlcm1 = num1\nlcm2 = num2\nlcm3 = num3\nlcm4 = num4\nlcm5 = num5\nlcm6 = num6\nlcm7 = num7\nlcm8 = num8\n\nlcm = lcm1*lcm2*lcm3*lcm4*lcm5*lcm6*lcm7*lcm8\n\n# a\na = int(lcm/num8)\n# b\nb = num8\n\nprint(a+b)"
  },
  {
    "example_id": 256,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "n = 0\nwhile gcd(80325, n)!= 1:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 257,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "1030.0"
    ],
    "solution": "# a = 1331\na = 1331\n# b = 1331\nb = 1331\na_base_6 = base_6(a)\nb_base_6 = base_6(b)\na_base_6_digits = list(a_base_6)\nb_base_6_digits = list(b_base_6)\nif a_base_6_digits[0]!= b_base_6_digits[0]:\n    print(\"a and b are not the same in the first digit\")\n    exit()\nelse:\n    print(\"a and b are the same in the first digit\")\na_base_6_digits = a_base_6_digits[1:]\nb_base_6_digits = b_base_6_digits[1:]\nif len(a_base_6_digits)!= len(b_base_6_digits):\n    print(\"a and b are not the same length\")\n    exit()\nelse:\n    print(\"a and b are the same length\")\na_base_6_digits = list(map(int, a_base_6_digits))\nb_base_6_digits = list(map(int, b_base_6_digits))\nfor i in range(len(a_base_6_digits)):\n    if a_base_6_digits[i]!= b_base_6_digits[i]:\n        print(\"a and b are not the same in the \", i+1, \"digit\")\n        exit()\n    else:\n        print(\"a and b are the same in the \", i+1, \"digit\")\nprint(\"a and b are the same\")"
  },
  {
    "example_id": 258,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Alice's numbers\nnums = [2, 3, 5, 7, 9]\n# Alice's choices\nchoices = [i for i in itertools.combinations(nums, 2)]\n# Alice's choices in pairs\npairs = [i for i in itertools.product(*choices)]\n# Alice's choices in pairs that are divisible by 3\ndivisible_by_3 = [i for i in pairs if (i[0] % 3 == 0) or (i[1] % 3 == 0)]\nprint(len(divisible_by_3))"
  },
  {
    "example_id": 259,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "num_divisible_345 = 0\nfor i in range(1, 101):\n    if i % 3 == 0 and i % 4 == 0 and i % 5 == 0:\n        num_divisible_345 += 1\nprint(num_divisible_345)"
  },
  {
    "example_id": 260,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "i = 3\nj = 5\nremainder = (i*j) % 6\nprint(remainder)"
  },
  {
    "example_id": 261,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "tens_digit = str(5**2005)[-2]\nprint(tens_digit)"
  },
  {
    "example_id": 262,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12682.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "A = int(str(912673)[:1])\nB = int(str(912673)[1:])\nprint(A + B)"
  },
  {
    "example_id": 263,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4096.0"
    ],
    "solution": "def is_cube(n):\n    return n ** 3 == abs(n)\n\ndef is_fourth_power(n):\n    return n ** 4 == abs(n)\n\ndef is_perfect_cube_and_perfect_fourth_power(n):\n    return is_cube(n) and is_fourth_power(n)\n\ndef get_perfect_cube_and_perfect_fourth_power(n):\n    return [x for x in range(1, n+1) if is_perfect_cube_and_perfect_fourth_power(x)]\n\nn = 100\nprint(get_perfect_cube_and_perfect_fourth_power(n))"
  },
  {
    "example_id": 264,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "s = sum(range(1, 11))\nprint(s % 9)"
  },
  {
    "example_id": 265,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "10.0",
      "10.0",
      "15.0",
      "15.0",
      "15.0",
      "20.0",
      "20.0",
      "25.0"
    ],
    "annotated_answers": [
      "235.0"
    ],
    "solution": "for i in range(100):\n    for j in range(i+1, 100):\n        for k in range(j+1, 100):\n            if (i+j+k) % 5 == 0:\n                print(i+j+k)\n                break"
  },
  {
    "example_id": 266,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Determine the remainder of 194 (mod 11).\nprint(194 % 11)"
  },
  {
    "example_id": 267,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 13):\n    if i**2 in (2, 4, 6, 8, 10, 12):\n        sum += 1\nprint(sum)"
  },
  {
    "example_id": 268,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# number of ordered pairs\nx = np.arange(1, 100)\ny = np.arange(1, 100)\nxy = np.array(list(itertools.product(x, y)))\ncount = np.count_nonzero(xy == 144)\nprint(count)"
  },
  {
    "example_id": 269,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0",
      "6.0",
      "1.0",
      "9.0",
      "1.0",
      "12.0",
      "1.0",
      "15.0",
      "1.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "# Find the two numbers\nfor i in range(1, 100):\n    if i % 3 == 0:\n        for j in range(1, 100):\n            if (i * j) % 3 == 0:\n                print(i, j)\n                break"
  },
  {
    "example_id": 270,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def base_6(num):\n    num_digits = len(str(num))\n    if num_digits == 1:\n        return [num]\n    elif num_digits == 2:\n        return [num, num]\n    else:\n        return [num, num] + base_6(num % 100)\n\ndef divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef is_divisible_by_11(num):\n    num_digits = len(str(num))\n    if num_digits == 1:\n        return num % 11 == 0\n    elif num_digits == 2:\n        tens = num // 10\n        return tens % 11 == 0 or num % 11 == 0\n    else:\n        tens = num // 100\n        hundreds = num // 100\n        return (tens % 11 == 0 and hundreds % 11 == 0) or (tens % 11 == 0 and num % 11 == 0) or (hundreds % 11 == 0 and num % 11 == 0)\n\ndef count_divisible_by_11(num_digits):\n    count = 0\n    for num in base_6(num_digits):\n        if is_divisible_by_11(num):\n            count += 1\n    return count\n\ncount = 0\nfor num_digits in range(1, 4):\n    count += count_divisible_by_11(num_digits)\nprint(count)"
  },
  {
    "example_id": 271,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "6.0",
      "1.0",
      "12.0",
      "1.0",
      "18.0",
      "1.0",
      "24.0",
      "1.0",
      "30.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "for i in range(1,100):\n    for j in range(1,100):\n        if (i*j) % 2 == 0 and i*j % 3 == 0:\n            print(i,j)"
  },
  {
    "example_id": 272,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Solution\nN = 13*7 + 17*3\nprint(N % 36)"
  },
  {
    "example_id": 273,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# calculate the square root of 196\nroot = math.sqrt(196)\n# round down to the nearest integer\nroot_int = int(root)\n# find all factors of the square root\nfactors = divisors(root_int)\n# find all positive factors\npositive_factors = [x for x in factors if x > 0]\n# sum the positive factors\nsum_factors = sum(positive_factors)\n# print the sum of the positive factors\nprint(sum_factors)"
  },
  {
    "example_id": 274,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 24\nb = 15\nc = (a**50) - (b**50)\nd = 13\nprint(c % d)"
  },
  {
    "example_id": 275,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "k = 0\nwhile True:\n    for n in range(1, 100):\n        nums = [6*n + k, 6*n + 1, 6*n + 2, 6*n + 3]\n        divisors = [num for num in nums if np.gcd(num, k)!= 1]\n        if divisors:\n            break\n    else:\n        k += 1\n        continue\n    break\nprint(k)"
  },
  {
    "example_id": 276,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "num = 1529\nmod = 6\nprint(num % mod)"
  },
  {
    "example_id": 277,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "6.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "6.0",
      "12.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "from math import factorial\nfrom math import gcd\n\ndef base_6(num):\n    factors = []\n    for i in range(2, 12):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\ndef divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\nnum = 12\nfactors = base_6(num)\nprint(factors)\ndivisors = divisors(num)\nprint(divisors)"
  },
  {
    "example_id": 278,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "7.0",
      "13.0",
      "91.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "n = 1\nwhile n < 1000:\n    if (171 - 80) % n == 0 and (468 - 13) % n == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 279,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "base_4 = '1230'\nbase_10 = int(base_4, 4)\nprint(base_10)"
  },
  {
    "example_id": 280,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "990.0"
    ],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "num = 1000\nfor i in range(num-1, 0, -1):\n    if i % 11 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 281,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "556.0"
    ],
    "solution": "a, b = 10, 3\nnum = 0.123\na = int(num * b)\nb = b\nprint(a, b)\nprint(a+b)"
  },
  {
    "example_id": 282,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def has_sum_of_digits(n):\n    sum_of_digits = 0\n    while n > 0:\n        sum_of_digits += n % 10\n        n //= 10\n    return sum_of_digits == 4\n\nnumber_of_pages_with_sum_of_digits = 0\nfor i in range(1000):\n    if has_sum_of_digits(i):\n        number_of_pages_with_sum_of_digits += 1\nprint(number_of_pages_with_sum_of_digits)"
  },
  {
    "example_id": 283,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 1\nn = 9 + 7 + 8 + 0 + 9 + 4 + 1 + 1 + 0 + 0 + x\nn = n % 10\nif n == 0:\n    print(x)\nelse:\n    print(\"No valid UPC code found.\")"
  },
  {
    "example_id": 284,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(2**2010 % 10)"
  },
  {
    "example_id": 285,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "n = 1\nwhile n < 75:\n    if n % 2 == 1 and n % 3 == 1 and n % 4 == 1 and n % 6 == 1 and n % 7 == 0:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 286,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 1\nwhile (n//2)!= n//3:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 287,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = pow(2, 16, 17)\nprint((pow(2, n, 17) ** 2 - 2) % 17)"
  },
  {
    "example_id": 288,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(str(355)[-1])"
  },
  {
    "example_id": 289,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Base 4 number 120301232_4\nnum = 120301232\n# Divide by 8\nremainder = num % 8\nprint(remainder)"
  },
  {
    "example_id": 290,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "668.0"
    ],
    "annotated_answers": [
      "668.0"
    ],
    "solution": "x = 1\nwhile x <= 999:\n    if (100*x) % 997 == 1:\n        print(x)\n        break\n    x += 1"
  },
  {
    "example_id": 291,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5304.0"
    ],
    "annotated_answers": [
      "528.0"
    ],
    "solution": "print(6_8 * 7_8)"
  },
  {
    "example_id": 292,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "product = 14 * 15 * 16 * 17\nif product > 1000:\n    print(14 + 15 + 16 + 17)"
  },
  {
    "example_id": 293,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "divisors = []\nfor i in range(1, 253):\n    if 252 % i == 0:\n        divisors.append(i)\nprint(len([divisor for divisor in divisors if divisor % 2 == 0]))"
  },
  {
    "example_id": 294,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1869.0",
      "1958.0",
      "2047.0",
      "1869.0",
      "1958.0",
      "2047.0",
      "1869.0",
      "1958.0",
      "2047.0",
      "1869.0"
    ],
    "annotated_answers": [
      "801.0"
    ],
    "solution": "for x in range(600, 900):\n    for y in range(600, 900):\n        for z in range(600, 900):\n            if (x+y+z) % 89 == 0:\n                print(x+y+z)"
  },
  {
    "example_id": 295,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 40\nleast_common_multiple = x * (x + 3)\ngreatest_common_divisor = x + 3\n\nprint(least_common_multiple / greatest_common_divisor)"
  },
  {
    "example_id": 296,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def check(n):\n    s = str(n)\n    if len(s) == 4 and len(s) == 2:\n        return True\n    return False\n\ncount = 0\nfor i in range(1000):\n    if check(i):\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 297,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.047619047619047616"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "def integer_values_of_x(n):\n    for i in range(1, n):\n        if n % i == 0:\n            yield i\n\ndef solve_problem(n):\n    integer_values = integer_values_of_x(n)\n    sum = 0\n    for i in integer_values:\n        sum += 1 / (2 * i - 23)\n    return sum\n\nprint(solve_problem(67))"
  },
  {
    "example_id": 298,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "max_perfect_square = 0\nfor i in range(1, 225):\n    if i**0.5 == int(i**0.5) and i % 9 == 0:\n        max_perfect_square = i\n        break\nprint(max_perfect_square)"
  },
  {
    "example_id": 299,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "units_digit = 3**2009 % 10\nprint(units_digit)"
  },
  {
    "example_id": 300,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef remainder(n, d):\n    return n % d\n\ndef problem(n, d):\n    return remainder(factorial(n), d)\n\nprint(problem(7, 23))"
  },
  {
    "example_id": 301,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "249833083500.0"
    ],
    "annotated_answers": [
      "1241.0"
    ],
    "solution": "squares = [x**2 for x in range(1, 1000)]\ncubes = [x**3 for x in range(1, 1000)]\nnumbers = squares + cubes\nsum = np.sum(numbers)\nprint(sum)"
  },
  {
    "example_id": 302,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "a = 2**306 * 3**340\nfor n in range(1, 10000):\n    if a**(1/n) == int(a**(1/n)):\n        print(n)\n        break"
  },
  {
    "example_id": 303,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor i in range(1, 4000):\n    if i % 100 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 304,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 3\nb = 4\n\nremainder = (a+10)*(b+10) % 20\nprint(remainder)"
  },
  {
    "example_id": 305,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 2\nwhile is_prime(7 + (30 * N)):\n    N += 1\nprint(N)"
  },
  {
    "example_id": 306,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "16592.0"
    ],
    "solution": "n = 0\nsum = 0\nwhile n < 10000:\n    if len(np.unique(np.array(list(map(lambda x: x+2005, range(n+1)))))) == 21:\n        sum += n\n    n += 1\nprint(sum)"
  },
  {
    "example_id": 307,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "sum = 0\nfor i in range(0, 50, 3):\n    sum += i % 10\nprint(sum)"
  },
  {
    "example_id": 308,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "E = 5"
  },
  {
    "example_id": 309,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "382.0",
      "10.0",
      "187.0"
    ],
    "annotated_answers": [
      "109.0"
    ],
    "solution": "w = 476\ng = 104\nh = 281\n\nw_needed = 94\nr_needed = 16\n\nw_left_over = w - w_needed\ng_left_over = g - w_needed\nh_left_over = h - w_needed\n\nprint(f\"{w_left_over} green beads left over\")\nprint(f\"{g_left_over} green beads left over\")\nprint(f\"{h_left_over} green beads left over\")"
  },
  {
    "example_id": 310,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Sets of prime numbers less than 30 and odd numbers greater than zero\nprimes_30 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}\nodds = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29}\n\n# Intersection of the two sets\nintersection = primes_30.intersection(odds)\nprint(len(intersection))"
  },
  {
    "example_id": 311,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "number = 527\nsum = 0\nfor digit in str(number):\n    sum += int(digit)\nprint(sum)"
  },
  {
    "example_id": 312,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "122.0"
    ],
    "annotated_answers": [
      "122.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 100):\n    if i % 4 == 3 and i % 3 == 1 and i % 5 == 1:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 313,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "X = 2 * 3 * 5\nprint(X)"
  },
  {
    "example_id": 314,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 27\nn_divisors = len(set(range(1, n + 1)) - set(range(1, int(n**0.5) + 1)))\nprint(n_divisors)"
  },
  {
    "example_id": 315,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 7\nremainder = n % 13\nprint(remainder)"
  },
  {
    "example_id": 316,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef increasing_sequences_of_three_distinct_prime_numbers(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            for j in range(i + 1, n):\n                if is_prime(j):\n                    for k in range(j + 1, n):\n                        if is_prime(k) and (i + j + k) == 20:\n                            count += 1\n    return count\n\nprint(increasing_sequences_of_three_distinct_prime_numbers(20))"
  },
  {
    "example_id": 317,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "prime_numbers = [2, 3, 5, 7]\nnine_numbers = [2*3*7, 2*3*1, 2*7*1, 3*1*7, 3*7*1, 2*1*7, 1*3*7, 1*7*3]\nprime_numbers_count = 0\nfor num in nine_numbers:\n    if num in prime_numbers:\n        prime_numbers_count += 1\nprint(prime_numbers_count)"
  },
  {
    "example_id": 318,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "76903.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# In base 10\nn = int(str(11001010100101011), 2)\nm = int(str(110100011000100), 2)\nprint(n-m)"
  },
  {
    "example_id": 319,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def gcf(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcf(b%a, a)\n\nprint(gcf(180, 168))"
  },
  {
    "example_id": 320,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "sum = 0\nfor i in range(2, 100000001):\n    if i % 2 == 0 or i % 5 == 0 or i % 10 == 0:\n        continue\n    if i % 25 == 0:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 321,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "248.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Jan\nj = 127\nwhile j > 124:\n    j -= 3\n# Jen\nj += 124\nwhile j < 139:\n    j += 4\nprint(j)"
  },
  {
    "example_id": 322,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "365.0"
    ],
    "solution": "n = 365 // 28\nprint(n)"
  },
  {
    "example_id": 323,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "product = 2**3 * 3**1 * 4**3 * 5**8\nprint(len(str(product)))"
  },
  {
    "example_id": 324,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "981.0"
    ],
    "solution": "base = 3\nnumber = 0\nfor i in range(100):\n    number += 1\n    number = number % base\nprint(number)"
  },
  {
    "example_id": 325,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 5\nwhile n!= 1:\n    if 1560 % n == 0:\n        break\n    else:\n        n += 1\nprint(n)"
  },
  {
    "example_id": 326,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "sum = 32+23\nprint(sum)"
  },
  {
    "example_id": 327,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Calculate the amount of change\npossible_change = 10 - 1\nprint(possible_change)"
  },
  {
    "example_id": 328,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14641.0",
      "1405.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "b = 121\nc = 71\nb_base_c = b**2\nc_base_b = c**2\nb_base_c_result = str(b_base_c)\nc_base_b_result = str(c_base_b)\n\nb_base_c_result = b_base_c_result[::-1]\nc_base_b_result = c_base_b_result[::-1]\n\nprint(b_base_c_result)\nprint(c_base_b_result)"
  },
  {
    "example_id": 329,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "137.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "b = 5 * 25\nb = 137\nprint(b)"
  },
  {
    "example_id": 330,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nsum = 0\nfor i in range(1, 51):\n    sum += factorial(i)\n\nprint(sum % 10)"
  },
  {
    "example_id": 331,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "395.0"
    ],
    "annotated_answers": [
      "215.0"
    ],
    "solution": "stamps = 30\npages = 400 // stamps\nlast_page = 5\ntotal_stamps = stamps * pages + last_page\nprint(total_stamps)"
  },
  {
    "example_id": 332,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "number = 28*7 + 6\nprint(number)"
  },
  {
    "example_id": 333,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def base_conversion(base_10_num, base):\n    digits = []\n    while base_10_num > 0:\n        digits.append(base_10_num % base)\n        base_10_num //= base\n    return digits\n\ndef same_digits(digits):\n    digits_set = set(digits)\n    if len(digits_set) == 1:\n        return True\n    return False\n\ndef solve():\n    for base in range(2, 10):\n        for num in [36, 64, 81]:\n            digits = base_conversion(num, base)\n            if same_digits(digits):\n                return digits[0]\n\nprint(solve())"
  },
  {
    "example_id": 334,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "numbers = [1, 3, 5, 7, 9, 11]\nsum = 0\nfor number in numbers:\n    sum += np.prod(range(1, number+1))\nunits_digit = sum % 10\nprint(units_digit)"
  },
  {
    "example_id": 335,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1435.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "m = 35\nn = 41\nlcm = m*n // gcd(m, n)\nprint(lcm)"
  },
  {
    "example_id": 336,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "406.0",
      "406.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "product = 2005\nfor i in range(2, product):\n    if product % i == 0:\n        print(i+product//i)"
  },
  {
    "example_id": 337,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = 2004 % 12\nprint(remainder)"
  },
  {
    "example_id": 338,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1358.0"
    ],
    "annotated_answers": [
      "25168.0"
    ],
    "solution": "binary = '10101001110'\noctal = int(binary, 2)\nprint(octal)"
  },
  {
    "example_id": 339,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "remainder = (289 + 9*51 + 3**6 + 4*187) % 17\nprint(remainder)"
  },
  {
    "example_id": 340,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.99999999",
      "17"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "A = 10**9\nB = 10**9 - 1\nprint(A*B)"
  },
  {
    "example_id": 341,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "121.0"
    ],
    "solution": "nums = []\nfor i in range(1, 100):\n    if i % 3 == 0:\n        nums.append(i)\nprint(nums[4])"
  },
  {
    "example_id": 342,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2010.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "n = 2010\nwhile n % 10!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 343,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "0.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef p(n):\n    return n**2 - n + 41\n\nfor i in range(2, 1000000):\n    if is_prime(p(i)) and is_prime(p(i+1)):\n        common_factor = p(i) // p(i+1)\n        print(i, i+1, common_factor)\n        break"
  },
  {
    "example_id": 344,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "k = 2\nn = 1\nwhile True:\n    if (2**1980 * 3**384 * 5**1694 * 7**343) ** (n+k) % (n+k) == 0:\n        break\n    n += 1\nprint(n+k)"
  },
  {
    "example_id": 345,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\ndef power_mod(base, exponent, modulus):\n    result = 1\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        exponent = exponent // 2\n        base = (base * base) % modulus\n    return result\n\nprint(power_mod(7, 17, 5))"
  },
  {
    "example_id": 346,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1560.0"
    ],
    "annotated_answers": [
      "284.0"
    ],
    "solution": "def sum_proper_divisors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nsum_of_divisors = sum_proper_divisors(284)\nsum_of_proper_divisors = sum_proper_divisors(sum_of_divisors)\nprint(sum_of_proper_divisors)"
  },
  {
    "example_id": 347,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "t = 12\nprint(t)"
  },
  {
    "example_id": 348,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "ones_digit = str(35**12)[-1]\nprint(ones_digit)"
  },
  {
    "example_id": 349,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "count = 0\nfor n in range(60):\n    if n % 6 == 2:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 350,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.12312312312312312"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "decimal = 123/999\nprint(decimal)"
  },
  {
    "example_id": 351,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "233.0"
    ],
    "solution": "from math import factorial\n\nn = 0\nwhile factorial(942) % (15**n)!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 352,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "815.0"
    ],
    "annotated_answers": [
      "3224.0"
    ],
    "solution": "def odd_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n % (i + 1) == 0:\n                divisors.append(i + 1)\n    return divisors\n\ndef sum_of_odd_divisors(n):\n    return sum(odd_divisors(n))\n\nprint(sum_of_odd_divisors(6300))"
  },
  {
    "example_id": 353,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 7):\n    sum += i\n\ndivisors = []\nfor i in range(1, sum + 1):\n    if sum % i == 0:\n        divisors.append(i)\n\ngreatest_whole_number = max(divisors)\nprint(greatest_whole_number)"
  },
  {
    "example_id": 354,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "minutes_to_wait = 8*60 + 35 - (5*60 + 13)\nprint(minutes_to_wait)"
  },
  {
    "example_id": 355,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "print(int(str(14_8**2)[-1]))"
  },
  {
    "example_id": 356,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import gcd\n\n\ndef inverse_mod(a, p):\n    b = pow(a, p-2, p)\n    return b if gcd(b, p) == 1 else None\n\n\ndef sum_of_inverses(p):\n    sum = 0\n    for i in range(1, p-1):\n        sum += inverse_mod(i, p)\n    return sum % p\n\n\ndef sum_of_inverses_fast(p):\n    sum = 0\n    for i in range(1, p-1):\n        sum += inverse_mod(i, p)\n    return sum % p\n\n\nprint(sum_of_inverses_fast(7))"
  },
  {
    "example_id": 357,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "451.0"
    ],
    "annotated_answers": [
      "451.0"
    ],
    "solution": "x = 10**51 - 9\nprint(sum(map(int, str(x))))"
  },
  {
    "example_id": 358,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "numbers = [1, 12, 123, 1234, 12345, 123456, 1234567, 12345678]\nsum = np.sum(numbers)\nremainder = sum % 5\nprint(remainder)"
  },
  {
    "example_id": 359,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "fib = [1, 1]\nfor i in range(2, 100):\n    fib.append(fib[i-1] + fib[i-2])\nfib = np.array(fib)\nprint(fib)\nprint(fib % 4)"
  },
  {
    "example_id": 360,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "336.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 5\nP = (x + 1) * (x + 2) * (x + 3)\nprint(P)"
  },
  {
    "example_id": 361,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "num_repeating_decimals = 0\nfor n in range(1, 30):\n    if n % 30 == 0:\n        num_repeating_decimals += 1\nprint(num_repeating_decimals)"
  },
  {
    "example_id": 362,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "# 3 consecutive prime numbers have a sum that is a multiple of 7\n# 1, 7, 13 are three consecutive prime numbers\n# 1 + 7 + 13 = 21 = 7(3)\nprint(21)"
  },
  {
    "example_id": 363,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "321.0"
    ],
    "annotated_answers": [
      "321.0"
    ],
    "solution": "n = 39500 // 123\nprint(n)"
  },
  {
    "example_id": 364,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.962809493114328"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "x = 720\na = 3\nsqrt = x**(1/3)\nprint(sqrt)"
  },
  {
    "example_id": 365,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "for i in range(1, 1000000):\n    if i % 3 == 2 and i % 7 == 3:\n        print(i)\n        break"
  },
  {
    "example_id": 366,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.35625"
    ],
    "annotated_answers": [
      "0.35625"
    ],
    "solution": "decimal = 57 / 160\nprint(decimal)"
  },
  {
    "example_id": 367,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10901.0"
    ],
    "annotated_answers": [
      "10901.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\nfor i in range(10000, 100000):\n    if is_palindrome(i) and i % 11 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 368,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "b = 10**(len(str(423)) - 1)\nprint(b)"
  },
  {
    "example_id": 369,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "77.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "days_with_3_in_tens_digit = 0\nfor day in range(1, 366):\n    if str(day)[0] == '3':\n        days_with_3_in_tens_digit += 1\nprint(days_with_3_in_tens_digit)"
  },
  {
    "example_id": 370,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.936390936390936"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "numbers = [4/37, 3/11, 23/9]\nsum = 0\nfor number in numbers:\n    sum += number\nprint(sum)"
  },
  {
    "example_id": 371,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "239.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "product = 720\ndivisor = 3\nresult = product / divisor\nlargest = result - 1\nprint(largest)"
  },
  {
    "example_id": 372,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29700.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "seconds = 33/3*60*45\nprint(seconds)"
  },
  {
    "example_id": 373,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = 3\nprint((2*remainder+1) % 7)"
  },
  {
    "example_id": 374,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "numbers = [12, 24, 36, 48]\n\nfor number in numbers:\n    for digit in str(number):\n        if int(digit) == 1:\n            print(\"1 does not appear in any of the four two-digit numbers\")\n            break\n    else:\n        continue\n    break"
  },
  {
    "example_id": 375,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = (13**13 + 5) % 6\nprint(remainder)"
  },
  {
    "example_id": 376,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "262144.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "n = 4**9\nprint(n)"
  },
  {
    "example_id": 377,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "409.0"
    ],
    "solution": "print(58_9 - 18_9)"
  },
  {
    "example_id": 378,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def is_terminating_decimal(x):\n    num = 1\n    while True:\n        last_digit = str(num**2 + num)[-1]\n        if last_digit == '0':\n            return False\n        if last_digit == '1':\n            return True\n        num += 1\n\n\ndef find_second_smallest(n):\n    for i in range(2, n):\n        if is_terminating_decimal(i):\n            return i\n    return -1\n\n\nprint(find_second_smallest(1000000))"
  },
  {
    "example_id": 379,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.058823529411764705"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "residue = (17**-1) % 83\nprint(residue)"
  },
  {
    "example_id": 380,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "base = 47\ndigits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nb = 0\nwhile b < len(digits):\n    if base < 10:\n        break\n    else:\n        base = base % 10\n        base = base // 10\n    b += 1\nprint(b)"
  },
  {
    "example_id": 381,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3504.0"
    ],
    "annotated_answers": [
      "3504.0"
    ],
    "solution": "def sum_digits(n):\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits)\n\ndef next_number(n):\n    while sum_digits(n)!= 12:\n        n += 1\n    return n\n\nprint(next_number(3456))"
  },
  {
    "example_id": 382,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "1.0",
      "64.0",
      "2.0",
      "64.0",
      "2.23606797749979",
      "64.0",
      "1.7320508075688772",
      "64.0",
      "1.4142135623730951"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define function to get all divisors of a number\ndef get_divisors(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\n# Get divisors of 300\ndivisors = get_divisors(300)\n\n# Product of divisors of 300\nproduct = np.prod(divisors)\n\n# Distinct prime divisors of product\ndistinct_prime_divisors = set(np.unique(np.sqrt(divisors)))\n\n# Sum of distinct prime divisors\nsum_distinct_prime_divisors = np.sum(distinct_prime_divisors)\n\nprint(sum_distinct_prime_divisors)"
  },
  {
    "example_id": 383,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2310.0"
    ],
    "annotated_answers": [
      "2079.0"
    ],
    "solution": "k = 2010\nwhile True:\n    if (17*k/66).is_integer() and (13*k/105).is_integer():\n        if k > 2010:\n            break\n    k += 1\nprint(k)"
  },
  {
    "example_id": 384,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "print(sum(map(int, str(5**100)[-3:])))"
  },
  {
    "example_id": 385,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor i in range(7438, 7446):\n    sum += i\nremainder = sum % 8\nprint(remainder)"
  },
  {
    "example_id": 386,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "8.0",
      "16.0",
      "32.0",
      "64.0",
      "128.0",
      "256.0",
      "512.0",
      "1024.0"
    ],
    "annotated_answers": [
      "715.0"
    ],
    "solution": "t = 1\nwhile len(str(t)) < 14:\n    t = t * 2\n    print(t)"
  },
  {
    "example_id": 387,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 2**8 % 5\nprint(remainder)"
  },
  {
    "example_id": 388,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "n = 8 + 6\nN = np.arange(n, 50, n)\nprint(N.sum())"
  },
  {
    "example_id": 389,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "divisible_numbers = 0\nfor i in range(100, 1000):\n    if i % 13 == 0:\n        divisible_numbers += 1\nprint(divisible_numbers)"
  },
  {
    "example_id": 390,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1512.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "hundreds = 5 * 6 * 7 * 8 * 9 * 10\nprint(hundreds // 100)"
  },
  {
    "example_id": 391,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "252.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 6\nm = 6\nfinal_sum = 0\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        final_sum += i + j\nprint(final_sum)"
  },
  {
    "example_id": 392,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.0",
      "98.0",
      "97.0",
      "96.0",
      "95.0",
      "94.0",
      "93.0",
      "92.0",
      "91.0",
      "89.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "for i in range(99, 10, -1):\n    if i % i%10 == 0 and i%10!= 0:\n        print(i)"
  },
  {
    "example_id": 393,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "N = 2*3*5*7\nremainder = N % 6\nprint(remainder)"
  },
  {
    "example_id": 394,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.72",
      "-5.0"
    ],
    "annotated_answers": [
      "6.72",
      "-05"
    ],
    "solution": "# convert to a terminating decimal\nprint(21 / (2**2 * 5**7))"
  },
  {
    "example_id": 395,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "889.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "inverse = pow(997, 1000-2, 1000)\nprint(inverse)"
  },
  {
    "example_id": 396,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "999.0"
    ],
    "annotated_answers": [
      "43436.0"
    ],
    "solution": "print(999)"
  },
  {
    "example_id": 397,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 2\nn %= 11\nprint(n)"
  },
  {
    "example_id": 398,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "473.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a = 4 * (66 // 4 * 5) // 5\nb = 4 * (66 // 4 * 32) // 5\nprint(a + b)"
  },
  {
    "example_id": 399,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "n = 1\nwhile (n**(-1) % 130) == (n**(-1) % 231) == None:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 400,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7992.0"
    ],
    "annotated_answers": [
      "935.0"
    ],
    "solution": "X = 999*8\nprint(X)"
  },
  {
    "example_id": 401,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "6.0",
      "1.0",
      "2.0",
      "3.0",
      "2.0",
      "1.0",
      "6.0",
      "1.0",
      "2.0",
      "3.0",
      "2.0",
      "1.0",
      "6.0",
      "1.0",
      "2.0",
      "3.0",
      "2.0",
      "1.0",
      "6.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef gcd_values(n):\n    return [gcd(n + 5, n + 11) for n in range(n)]\n\nn = 20\nprint(gcd_values(n))"
  },
  {
    "example_id": 402,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3087.0"
    ],
    "annotated_answers": [
      "30325.0"
    ],
    "solution": "print(4321-1234)"
  },
  {
    "example_id": 403,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# number of positive factors of 48\nprint(len(divisors(48)))"
  },
  {
    "example_id": 404,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# \ntens_digit = 0\nfor i in range(1, 10):\n    tens_digit += pow(11, i)\nprint(tens_digit % 10)"
  },
  {
    "example_id": 405,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "quarters = 25\nnum_5 = 3\nnum_7 = 5\ntotal = num_5 + num_7\nif total <= 10:\n    quarters = num_5 * 5 + num_7 * 7\nelse:\n    quarters = 10\nprint(quarters)"
  },
  {
    "example_id": 406,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import math\n\ndef is_perfect_square(x):\n    return math.sqrt(x) % 1 == 0\n\ndef is_perfect_fourth_power(x):\n    return math.sqrt(x) % 1 == 0 and math.sqrt(x)**2 % 1 == 0\n\nn = 4\nwhile True:\n    n += 1\n    x = (1+2+3+n)**2\n    if is_perfect_square(x) and is_perfect_fourth_power(x):\n        print(n)\n        break"
  },
  {
    "example_id": 407,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4136.0",
      "6.0",
      "6.0",
      "2156.0",
      "6.0",
      "6.0",
      "1980.0",
      "6.0",
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def find_units_digit(number, base):\n    \"\"\"\n    Returns the units digit of the given number in the given base.\n    \"\"\"\n    return str(number)[-1]\n\nnumber1 = 413_6\nnumber2 = 215_6\n\nunits_digit1 = find_units_digit(number1, 6)\nunits_digit2 = find_units_digit(number2, 6)\n\nresult = number1 - number2\nunits_digit_result = find_units_digit(result, 6)\n\nprint(f\"Units digit of {number1} in base 6 is {units_digit1}\")\nprint(f\"Units digit of {number2} in base 6 is {units_digit2}\")\nprint(f\"Units digit of {result} in base 6 is {units_digit_result}\")"
  },
  {
    "example_id": 408,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 121 * 122 * 123\nprint(n % 4)"
  },
  {
    "example_id": 409,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "remainder = sum([1,-2,3,-4,5,-6,7,-8,9,-10,11]) % 8\nprint(remainder)"
  },
  {
    "example_id": 410,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40507599.0"
    ],
    "annotated_answers": [
      "11121123.0"
    ],
    "solution": "a = 2012_3\nb = 201_3\nproduct = a * b\nprint(product)"
  },
  {
    "example_id": 411,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "number_of_divisors = 0\nfor i in range(1, 1000):\n    divisors = set(range(1, i+1))\n    if len(divisors) == 3:\n        number_of_divisors += 1\nprint(number_of_divisors)"
  },
  {
    "example_id": 412,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = 0\nfor i in range(2000, 2007):\n    remainder = (remainder + i) % 7\nprint(remainder)"
  },
  {
    "example_id": 413,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "# Solve for x\n# LCM(x, 7!) = 9\n# x * 7! = 9\n# x = 9 // 7!\nx = 9 // factorial(7)\n\n# Solve for y\n# GCD(y, 315) = 9\n# y * 315 = 9\n# y = 9 // 315\ny = 9 // gcd(315, x)\n\n# Check the results\nprint(x, y)"
  },
  {
    "example_id": 414,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# a = 1\na = 1\nfor b in range(10):\n    if (b**2) == 71:\n        a = b+1\n        break\nprint(a)"
  },
  {
    "example_id": 415,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "2.0",
      "-2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "A = '8321'\nB = '2103'\n\nA = [int(i) for i in A]\nB = [int(i) for i in B]\n\nremainder = np.subtract(A,B)\nprint(remainder)"
  },
  {
    "example_id": 416,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "122.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "# Find the sum of the smallest five positive integers that each have exactly four positive factors.\n\n# Initialize the sum\nsum = 0\n\n# Loop through the numbers from 1 to 100\nfor num in range(1, 101):\n    # Get the number of divisors\n    num_divisors = len(divisors(num))\n\n    # Check if the number of divisors is 4\n    if num_divisors == 4:\n        # Add the number to the sum\n        sum += num\n\n        # If the sum is greater than or equal to 100, break the loop\n        if sum >= 100:\n            break\n\n# Print the sum\nprint(sum)"
  },
  {
    "example_id": 417,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "195.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "b = 13*15\nprint(b)"
  },
  {
    "example_id": 418,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-955.0",
      "2953.0",
      "-55.0",
      "10626.0",
      "-0.0",
      "-2.0",
      "-0.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "a = 27\nb = 40\ng = gcd(a, b)\na, b = a // g, b // g\nc = b // a\nd = b % a\ne = c ** 2 - 4 * d\nf = (c + d) // 2\ng = (c - d) // 2\nh = (c + d) % 2\ni = (c - d) % 2\nj = f * g - e * h\nk = f * h + e * g\nl = f * i + e * g\nm = f * g + e * i\nn = j ** 2 - 4 * k\no = j ** 2 - 4 * l\np = j ** 2 - 4 * m\nq = (j + np.sqrt(n)) // 2\nr = (j - np.sqrt(n)) // 2\ns = (j + np.sqrt(o)) // 2\nt = (j - np.sqrt(o)) // 2\nu = (j + np.sqrt(p)) // 2\nv = (j - np.sqrt(p)) // 2\nw = q * r - o * s\nx = q * s + o * r\ny = q * t - p * u\nz = q * u + p * t\na = w // g\nb = x // g\nc = y // g\nd = z // g\ne = w % g\nf = x % g\ng = y % g\nh = z % g\nprint(a, b, c, d, e, f, g, h)"
  },
  {
    "example_id": 419,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 1 + 12 + 123 + 1234 + 12345 + 123456 + 1234567 + 12345678\nn %= 9\nprint(n)"
  },
  {
    "example_id": 420,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0",
      "1.0",
      "2.0",
      "3.0",
      "5.0",
      "6.0",
      "10.0",
      "15.0",
      "30.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 3\nb = 5\nn = a*(2*a+b) - 2*a**2 + a*b\nprint(n)\nprint(divisors(n))"
  },
  {
    "example_id": 421,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "num_3digit_ints_congruent_to_7_mod_19 = 0\nfor i in range(100, 1000):\n    if i % 19 == 7:\n        num_3digit_ints_congruent_to_7_mod_19 += 1\nprint(num_3digit_ints_congruent_to_7_mod_19)"
  },
  {
    "example_id": 422,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "750.0",
      "1198.0"
    ],
    "annotated_answers": [
      "-449.0"
    ],
    "solution": "num = 15\nmod = 1199\n\n# Find all possible values of x\nx_values = list(range(0, mod))\n\n# Check each value of x to see if it satisfies the equation\nfor x in x_values:\n    if (24*x) % mod == num:\n        print(x)\n        break\n\n# Print the largest value of x\nprint(max(x_values))"
  },
  {
    "example_id": 423,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Number of pages that both sets of page numbers share the same ones digit\nnum_pages = 0\nfor i in range(1, 51):\n    if str(i)[-1] == str(50-i)[-1]:\n        num_pages += 1\nprint(num_pages)"
  },
  {
    "example_id": 424,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 13):\n    sum += i\nprint(sum % 4)"
  },
  {
    "example_id": 425,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "34.0",
      "0.7352941176470589"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "# True if the number is a multiple of 4, false otherwise\ndef is_true(num):\n    return num % 4 == 0\n\n# True if the number is a multiple of 3, false otherwise\ndef is_false(num):\n    return num % 3 == 0\n\n# Define a function that takes a list of true/false values\n# and returns the number of true values\ndef count_true(my_list):\n    return sum(my_list)\n\n# Test the function with the list of true/false values\n# for the 100 items on the test\nnum_true = count_true([is_true(i) for i in range(100)])\nnum_false = count_true([is_false(i) for i in range(100)])\n\n# Print the number of true and false values\nprint(num_true)\nprint(num_false)\n\n# Print the ratio of true to false values\nprint(num_true / num_false)"
  },
  {
    "example_id": 426,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0",
      "0.0",
      "14.0",
      "8.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "m = 4\nn = 10\nm_minus_n = m - n\nm_plus_n = m + n\nmod_14 = 14\n\nremainder_m_plus_n = m_plus_n % mod_14\nremainder_m_minus_n = m_minus_n % mod_14\n\nprint(\"The remainder when $m+n$ is divided by $14$ is:\", remainder_m_plus_n)\nprint(\"The remainder when $m-n$ is divided by $14$ is:\", remainder_m_minus_n)"
  },
  {
    "example_id": 427,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 0\nwhile True:\n    n += 1\n    if (n+1)/(13-n) in set([2, 3, 5, 7, 11, 13]):\n        print(n)\n        break"
  },
  {
    "example_id": 428,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "2.0",
      "2.0",
      "0.0",
      "1.0",
      "2.0",
      "0.0"
    ],
    "annotated_answers": [
      "12023.0"
    ],
    "solution": "# convert to base 3\nbase = 3\nnum = 2121\nremainder = num % base\nresult = []\nwhile num > 0:\n    result.append(num % base)\n    num //= base\nresult.append(remainder)\nprint(result[::-1])"
  },
  {
    "example_id": 429,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "perfect_square_factors = 0\nfor i in range(1, int(46656 ** 0.5) + 1):\n    if 46656 % i == 0:\n        perfect_square_factors += 1\nprint(perfect_square_factors)"
  },
  {
    "example_id": 430,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4051.0"
    ],
    "annotated_answers": [
      "3859.0"
    ],
    "solution": "print(817_9 - 145_9 - 266_9)"
  },
  {
    "example_id": 431,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "119.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef base_3_palindromes():\n    count = 0\n    for i in range(1, 2007):\n        if is_palindrome(i):\n            count += 1\n    return count\n\nprint(base_3_palindromes())"
  },
  {
    "example_id": 432,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "143.0"
    ],
    "annotated_answers": [
      "143.0"
    ],
    "solution": "def gcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a % b)\n\nprint(gcf(1001, 2431))"
  },
  {
    "example_id": 433,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def f(a):\n    a_2 = a**2\n    return gcd(3*a_2 + 19*a + 30, a_2 + 6*a + 9)\n\nprint(max(f(a) - a for a in range(1, 1000)))"
  },
  {
    "example_id": 434,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "M = 12\nN = 15\nremainder = (M + N) % 6\nprint(remainder)"
  },
  {
    "example_id": 435,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14731.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "def base_6(num):\n    return np.array(list(map(int, str(num).zfill(6))))\n\ndef divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef coins(alice, bailey, cindy, daniel):\n    pennies = [0.01, 0.05, 0.10, 0.25, 0.50]\n    coins = 0\n    for i in range(len(pennies)):\n        coins += int(alice/pennies[i])\n        coins += int(bailey/pennies[i])\n        coins += int(cindy/pennies[i])\n        coins += int(daniel/pennies[i])\n    return coins\n\nalice = 25.67\nbailey = 17.21\ncindy = 39.17\ndaniel = 26.32\n\ncoins = coins(alice, bailey, cindy, daniel)\n\nprint(coins)"
  },
  {
    "example_id": 436,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nproduct = 1\nfor i in primes:\n    product *= i\nremainder = product % 16\nprint(remainder)"
  },
  {
    "example_id": 437,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "n = 100\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef power(base, exponent):\n    if exponent == 0:\n        return 1\n    else:\n        return base * power(base, exponent-1)\n\ndef solution(n):\n    return len(str(power(10, n) - power(9, n)))\n\nprint(solution(n))"
  },
  {
    "example_id": 438,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2000.0"
    ],
    "solution": "count = 0\nfor n in range(1, 2011):\n    fraction = n**2 / 2010\n    if str(fraction)[2:] == str(fraction)[:-2]:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 439,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1111.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "b = 10**4 // 9\nprint(b)"
  },
  {
    "example_id": 440,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "2.0",
      "0.0"
    ],
    "annotated_answers": [
      "427.0"
    ],
    "solution": "a = 126_7\nb = 54_7\nc = a - b\nprint(base_6(c))"
  },
  {
    "example_id": 441,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "m = 1\nwhile True:\n    lcm_8m = math.lcm(8*m, 10**10)\n    lcm_m_10e10 = math.lcm(m, 10**10)\n    if lcm_8m == 4*lcm_m_10e10:\n        break\n    m += 1\nprint(m)"
  },
  {
    "example_id": 442,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "count = 0\nfor i in range(1, 101):\n    if i % 5 == 1:\n        count += 1\npercent = count / 100\nprint(percent)"
  },
  {
    "example_id": 443,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# define function to calculate the least common multiple of two numbers\ndef lcm(a, b):\n    return a*b/gcd(a, b)\n\n# define function to calculate the greatest common divisor of two numbers\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a%b\n    return a\n\n# define function to calculate the least integer that is 3 more than a multiple of 4 and 4 more than a multiple of 5\ndef least_integer(num):\n    num += 3\n    for i in range(4, num, 4):\n        if num % i == 0:\n            num += 4\n    return num\n\n# call the function\nprint(least_integer(12))"
  },
  {
    "example_id": 444,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "# Prime factors of 47\nprime_factors = [3, 3, 3, 3]\n\n# The sum of the prime factors is 47\nsum_prime_factors = sum(prime_factors)\n\n# The sum of the prime factors is 47\nproduct = sum_prime_factors * sum_prime_factors\n\n# The product is a 3-digit number\nprint(product)"
  },
  {
    "example_id": 445,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "units_digit = (29*79 + 31*81) % 10\nprint(units_digit)"
  },
  {
    "example_id": 446,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "2.0",
      "4.0",
      "1.0",
      "3.0",
      "2.0",
      "4.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "338.0"
    ],
    "solution": "num1 = 235\nnum2 = 1324\nans = num1 * base_6(num2)\nprint(ans)"
  },
  {
    "example_id": 447,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def get_units_digit(number, base):\n    units_digit = number % base\n    return units_digit\n\ndef get_product_units_digit(number1, number2, base):\n    product = number1 * number2\n    return get_units_digit(product, base)\n\ndef main():\n    number1 = 2\n    number2 = 2\n    base = 4\n    units_digit = get_product_units_digit(number1, number2, base)\n    print(units_digit)\n\nmain()"
  },
  {
    "example_id": 448,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Calculate the result\nresult = (129**34 + 96**38) % 11\n\n# Print the result\nprint(result)"
  },
  {
    "example_id": 449,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "m = 6**2\nprint(m)"
  },
  {
    "example_id": 450,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 5):\n    sum += 2*i\nprint(sum)"
  },
  {
    "example_id": 451,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "sum = sum(map(int, str(269)))\nprint(sum)"
  },
  {
    "example_id": 452,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import math\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nx = 11\nwhile True:\n    sum_of_three = 0\n    for i in range(3):\n        sum_of_three += x\n    if is_prime(sum_of_three + 1):\n        print(x)\n        break\n    x += 1"
  },
  {
    "example_id": 453,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.103210678210678"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "sum_of_inverses = 0\nfor i in range(1, 13):\n    sum_of_inverses += 1/i\nprint(sum_of_inverses)"
  },
  {
    "example_id": 454,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 4\nsuperfactorial = 4**n\nunits_digit = superfactorial % 10\nprint(units_digit)"
  },
  {
    "example_id": 455,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "num = 1\nfor i in range(1, 9):\n    num += 1/i\nans = int(num % 16)\nprint(ans)"
  },
  {
    "example_id": 456,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-376144.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "# Initialize variables\nremoved_card = 1\nsum_of_remaining_cards = 0\n\n# Calculate the sum of the remaining cards\nfor card in range(2, 100):\n    sum_of_remaining_cards += card\n\n# Calculate the product of the sum and the number of cards\nproduct = sum_of_remaining_cards * 77\n\n# Calculate the result of the product\nresult = int(product / 77)\n\n# Calculate the difference between the result and the product\ndifference = result - product\n\n# Calculate the number of times the number is divisible by 77\ndivisible = int(difference / 77)\n\n# Calculate the number of times the number is divisible by 77\ndivisible = int(difference / 77)\n\n# Calculate the number of cards that were removed\nremoved_cards = divisible - 1\n\n# Calculate the number on the removed card\nremoved_card = (removed_cards * 77) + 1\n\nprint(removed_card)"
  },
  {
    "example_id": 457,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "base_10 = 321_7 - 321_5\nprint(base_10)"
  },
  {
    "example_id": 458,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1312.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "# Convert to base 6\nnum = 332\nnum_base_6 = np.base_repr(num, 6)\nprint(num_base_6)\n\n\n# Convert to base 3\nnum = 212\nnum_base_3 = np.base_repr(num, 3)\nprint(num_base_3)\n\n\n# Subtract the two numbers in base 6\nnum_base_6 = np.base_repr(num, 6)\nnum_base_6 = num_base_6[1:]\nnum_base_6 = int(num_base_6, 6)\nprint(num_base_6)\n\n\n# Convert to base 10\nnum = 212\nnum_base_10 = np.base_repr(num, 10)\nprint(num_base_10)\n\n\n# Subtract the two numbers in base 3\nnum_base_3 = np.base_repr(num, 3)\nnum_base_3 = num_base_3[1:]\nnum_base_3 = int(num_base_3, 3)\nprint(num_base_3)\n\n\n# Convert to base 10\nnum = 332\nnum_base_10 = np.base_repr(num, 10)\nprint(num_base_10)"
  },
  {
    "example_id": 459,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# The units digit of 18^6 is 8\nprint(18**6 % 10)"
  },
  {
    "example_id": 460,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "n = 100\nfor i in range(n):\n    if (i * 314159) % 101 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 461,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = pow(225, 66, 17) - pow(327, 66, 17)\nprint(remainder)"
  },
  {
    "example_id": 462,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "5.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 5\nb = 10\nc = 15\n\n# Find the remainders of the numbers\nremainders = []\nfor n in range(1, a+1):\n    if n == 1:\n        continue\n    t_n = sum(t_n for t_n in range(n, n-a, -1))\n    remainders.append(t_n % 7)\n\nprint(remainders)"
  },
  {
    "example_id": 463,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "136.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Number of Penteria at time 0\nP0 = 137\n# Number of Penteria at time 506\nP506 = P0 * (1 + 5/60) ** 506\n# Population at time 506\npopulation = P506 - 137\n# Number of Penteria at time 0\nP0 = population // (1 + 5/60) ** 506\nprint(P0)"
  },
  {
    "example_id": 464,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 142857\nprint(n % 18)"
  },
  {
    "example_id": 465,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 5\nfor i in range(n, 1, -1):\n    if i % 2!= 0 and i % 5 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 466,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "print(9**(-1) % 100)"
  },
  {
    "example_id": 467,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "b = 9\nP = (b - 2) * 2\nQ = P // 2\nprint(P)"
  },
  {
    "example_id": 468,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0",
      "28.0",
      "30.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def base_6(num):\n    return num\n\ndef divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\n# 840\nnum = 840\nnum_divisors = 0\nfor i in range(1, num + 1):\n    if num % i == 0:\n        num_divisors += 1\nprint(num_divisors)\n\n# 960\nnum = 960\nnum_divisors = 0\nfor i in range(1, num + 1):\n    if num % i == 0:\n        num_divisors += 1\nprint(num_divisors)\n\n# 1200\nnum = 1200\nnum_divisors = 0\nfor i in range(1, num + 1):\n    if num % i == 0:\n        num_divisors += 1\nprint(num_divisors)"
  },
  {
    "example_id": 469,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = 21\nb = 12\nc = 10\n\n\nremainder_a = a % 19\nremainder_b = b % 19\nremainder_c = c % 19\n\n\nnum = 2 * a + b - c\n\n\nremainder_num = num % 19\n\nprint(remainder_num)"
  },
  {
    "example_id": 470,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1950.0"
    ],
    "annotated_answers": [
      "1950.0"
    ],
    "solution": "value = 2**2001 * 5**1950 // 4**27\nprint(len(str(value)))"
  },
  {
    "example_id": 471,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "# Least number of tiles\ntiles = 6\n\n# Rectangles\nrectangles = []\nfor i in range(1, tiles+1):\n    for j in range(1, tiles+1):\n        if i*j == tiles:\n            rectangles.append((i, j))\n\nprint(len(rectangles))"
  },
  {
    "example_id": 472,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "for i in range(11, 1000000000000):\n    if i**2 > i and i**3 > i:\n        print(i)\n        break"
  },
  {
    "example_id": 473,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.8"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "N = 100\nsum_of_digits = 0\nproduct_of_digits = 1\nfor i in range(1, N+1):\n    for j in range(1, N+1):\n        if i % 10 + j % 10 + i % 10 * j % 10 == i + j:\n            sum_of_digits += i % 10 + j % 10\n            product_of_digits *= i % 10 * j % 10\n\narithmetic_mean = sum_of_digits / N\nprint(arithmetic_mean)\n\n\nN = 100\nsum_of_digits = 0\nproduct_of_digits = 1\nfor i in range(1, N+1):\n    for j in range(1, N+1):\n        if i % 10 + j % 10 + i % 10 * j % 10 == i + j:\n            sum_of_digits += i % 10 + j % 10\n            product_of_digits *= i % 10 * j % 10\n\narithmetic_mean = sum_of_digits / N\nprint(arithmetic_mean)"
  },
  {
    "example_id": 474,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Find the 453rd digit\nn = 453\nwhile n > 0:\n    # Divide the number by 10 and round down\n    # This will give us the digit before the decimal point\n    # We can then get the remainder by dividing by 10 again\n    digit = int(6/13 * 10)\n    n -= 1\n    print(digit)"
  },
  {
    "example_id": 475,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(6 + 6 + 5 + 1)\nprint(1 + 1 + 5)"
  },
  {
    "example_id": 476,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "# Find the least number of trees Jax bought\nnum_trees = 0\nfor i in range(1, 11):\n    if i % 3 == 0:\n        num_trees += 1\nprint(num_trees)"
  },
  {
    "example_id": 477,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "for n in range(2, 1000):\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    if np.prod(divisors) == n**6:\n        print(n)\n        break"
  },
  {
    "example_id": 478,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "remainder = 207 % 11\nprint(11 - remainder)"
  },
  {
    "example_id": 479,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 1\nwhile n < 10:\n    num_apples = 6 * n\n    if num_apples % 1 == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 480,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# The number of steps taken by Tim is a multiple of 11.\n# The number of steps taken by Tim is also a multiple of 139.\n# Therefore, the number of steps taken by Tim is a multiple of both 11 and 139.\n# This means that Tim ends on step 11.\nprint(11)"
  },
  {
    "example_id": 481,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.535301200456459",
      "30"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "num = 0\nfor i in range(1, 101):\n    num += 2**i\nprint(num)"
  },
  {
    "example_id": 482,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "num = 33818**2 + 33819**2 + 33820**2 + 33821**2 + 33822**2\nprint(num % 17)"
  },
  {
    "example_id": 483,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 10\nbase_11 = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nfact_10 = factorial(n)\nbase_11_fact_10 = base_11[fact_10%base_11]\nprint(base_11_fact_10)"
  },
  {
    "example_id": 484,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "A = 1\nB = 2\nC = 3\nAA = 12\nAAA = 123\nAB = 13\nABC = 123\nAC = 13\nBC = 23\nBCC = 233\nCAB = 312\nCAC = 313\nCB = 32\nCC = 33\n\nsum = A + B + C\nprint(sum)"
  },
  {
    "example_id": 485,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "num = 26\nwhile True:\n    if num % 25 == 2:\n        print(num)\n        break\n    num += 1"
  },
  {
    "example_id": 486,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def base_6(num):\n    return np.array([int(i) for i in str(num)])\n\ndef base_8(num):\n    return np.array([int(i) for i in str(num)])\n\ndef common_digits(a, b):\n    return np.sum(a == b)\n\ndef divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\nnum = 629\nprint(common_digits(base_6(num), base_8(num)))"
  },
  {
    "example_id": 487,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "2045.0"
    ],
    "solution": "print(413_5 // 2_5)"
  },
  {
    "example_id": 488,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = 8\na = 5\nm = 17\nx = (a * n) % m\nprint(x)"
  },
  {
    "example_id": 489,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "sum = 0\nfor digit in str(8888):\n    sum += int(digit)\nprint(sum)"
  },
  {
    "example_id": 490,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1216.55"
    ],
    "annotated_answers": [
      "499.0"
    ],
    "solution": "# Hours of labor\nhours = 3.5\n\n# Cost of labor\nlabor_cost = 242.5\n\n# Cost of equipment\nequipment_cost = 367.8\n\n# Total cost\ntotal_cost = labor_cost * hours + equipment_cost\n\n# Print the total cost\nprint(total_cost)"
  },
  {
    "example_id": 491,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 5**30 % 7\nprint(remainder)"
  },
  {
    "example_id": 492,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 3 * 2 % 5\nprint(remainder)"
  },
  {
    "example_id": 493,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "152.0",
      "152.0",
      "152.0",
      "152.0",
      "152.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 2**5*3**6\nperfect_squares = []\nfor i in range(1, 6):\n    perfect_squares.append(int(np.sqrt(n)))\nprint(perfect_squares)"
  },
  {
    "example_id": 494,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "621.0"
    ],
    "solution": "for num in range(100, 999):\n    digits = [int(digit) for digit in str(num)]\n    if np.prod(digits) == 12:\n        print(num)\n        break"
  },
  {
    "example_id": 495,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "m = 13\nn = 14\nnum_planets = 0\nfor i in range(1, 101):\n    num_planets = i\n    if num_planets % m == 0:\n        break\n    if num_planets % n == 0:\n        break\nprint(num_planets)"
  },
  {
    "example_id": 496,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 2\nb = 3\nn = 5\n\nab = a*b\nab_inv = np.mod(np.mod(np.mod(ab,n),n),n)\n\na_inv = np.mod(np.mod(np.mod(a,n),n),n)\nb_inv = np.mod(np.mod(np.mod(b,n),n),n)\n\na_inv_plus_b_inv = np.mod(np.mod(np.mod(a_inv+b_inv,n),n),n)\n\nab_inv_plus_a_inv_plus_b_inv = np.mod(np.mod(np.mod(ab_inv+a_inv_plus_b_inv,n),n),n)\n\nprint(ab_inv_plus_a_inv_plus_b_inv)"
  }
]