[
  {
    "example_id": 0,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(2**3*4**5*6**7*8**9%13)"
  },
  {
    "example_id": 1,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1986.0"
    ],
    "annotated_answers": [
      "1440.0"
    ],
    "solution": "num = 1997\nwhile num % 7!= 5:\n    num -= 1\nwhile num % 11!= 10:\n    num -= 1\nwhile num % 13!= 10:\n    num -= 1\nprint(num)"
  },
  {
    "example_id": 2,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "N = 2003\nsqrt_N = math.sqrt(N)\nprimes = [2]\nfor num in range(3, int(sqrt_N)+1, 2):\n    is_prime = True\n    for prime in primes:\n        if num % prime == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\nnum_primes = len(primes)\nprint(num_primes)"
  },
  {
    "example_id": 3,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 10\nx = symbols('x')\nexpr = x**3\nsol = solve(expr, x)\nprint(sol)"
  },
  {
    "example_id": 4,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "remainder = 44 % 13\nprint(remainder)"
  },
  {
    "example_id": 5,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 3\nfor i in range(1,65):\n    if (n ** (i+1)) % 3 == 0:\n        print(i+1)\n        break"
  },
  {
    "example_id": 6,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = symbols('n')\neq = (n + 4) + (n + 6) + (n + 8)\neq = eq % 9\neq = eq.subs(n, 3)\nprint(eq)"
  },
  {
    "example_id": 7,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.05125"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Angela's family\nN = 8\n\n# Coffee and milk\nx = symbols('x')\n\n# Angela's milk and coffee\na = 0.25*x\nb = 0.16*x\n\n# Total amount of milk and coffee\nc = a + b\n\n# Number of people in family\nd = c/N\n\n# Number of people in family\nprint(d)"
  },
  {
    "example_id": 8,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def units_digit(n):\n    return n % 10\n\ndef product_of_odd_integers(n):\n    product = 1\n    for i in range(1, n+1, 2):\n        product *= i\n    return product\n\nn = 12\nproduct = product_of_odd_integers(n)\nprint(units_digit(product))"
  },
  {
    "example_id": 9,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def base_6_rep(n):\n    return str(n)[::-1]\n\ndef first_and_last_digit(n):\n    return int(base_6_rep(n)[0]) * int(base_6_rep(n)[-1])\n\nprint(first_and_last_digit(682))"
  },
  {
    "example_id": 10,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10001011000.0"
    ],
    "annotated_answers": [
      "100002.0"
    ],
    "solution": "sum = bin(101 + 1011)\nprint(sum)"
  },
  {
    "example_id": 11,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.102242008666197",
      "25.0"
    ],
    "annotated_answers": [
      "740.0"
    ],
    "solution": "lcm = 1\nfor i in range(1, 26):\n    lcm = lcm * i\n\nlcm = lcm * 26\nlcm = lcm / 13\n\nprint(lcm)"
  },
  {
    "example_id": 12,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1114.0"
    ],
    "annotated_answers": [
      "1058.0"
    ],
    "solution": "n = np.random.randint(0,1398)\nn = n*160\nn = n % 1399\nprint(n)"
  },
  {
    "example_id": 13,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "7.0",
      "54.0",
      "7.0",
      "3.0"
    ],
    "annotated_answers": [
      "106.0"
    ],
    "solution": "x = symbols('x')\nsol = solve(x**3 + x**2 - 2*x - 1, x)\nprint(sol[0])"
  },
  {
    "example_id": 14,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Find the lcm of a and b\nlcm = 210**3\n# Find the gcd of a and b\ngcd = 210\n# The possible values of a are between 1 and lcm/gcd\npossible_values = list(range(1, lcm//gcd))\nprint(possible_values)"
  },
  {
    "example_id": 15,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "10.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "n = symbols('n')\n\n# Find the gcd\ngcd = symbols('gcd')\neq1 = gcd**2 - 40*n\nsol1 = solve(eq1, gcd)\n\n# Find the lcm\nlcm = symbols('lcm')\neq2 = n*lcm - 280\nsol2 = solve(eq2, lcm)\n\n# Find the value of n\nn = sol1[0]\nprint(n)"
  },
  {
    "example_id": 16,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def get_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\ndef is_twice_long_in_base_2(n):\n    return len(bin(n)[2:]) == len(bin(n)[2:]) * 2\n\ndef is_twice_long_in_base_3(n):\n    return len(oct(n)[2:]) == len(oct(n)[2:]) * 2\n\ndef get_sum_of_positive_integers(n):\n    return sum(i for i in range(1, n+1) if is_twice_long_in_base_2(i) and is_twice_long_in_base_3(i))\n\nprint(get_sum_of_positive_integers(100))"
  },
  {
    "example_id": 17,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "product = 2\nfor i in range(3, 98, 2):\n    product *= i\nprint(product % 10)"
  },
  {
    "example_id": 18,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "103.0",
      "48.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Define variables\nb = symbols('b')\n# Define equation\neq = (4*12)**b - 103\n# Find the solution\nsol = solve(eq, b)\nprint(sol)"
  },
  {
    "example_id": 19,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0035170634920634923"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def base_3_digits(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 3)\n        n //= 3\n    return digits\n\ndef base_6_digits(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 6)\n        n //= 6\n    return digits\n\ndef base_10_sum(digits):\n    sum = 0\n    for digit in digits:\n        sum += digit\n    return sum\n\ndef has_four_base_3_digits(n):\n    digits = base_3_digits(n)\n    return len(digits) == 4\n\ndef has_two_base_6_digits(n):\n    digits = base_6_digits(n)\n    return len(digits) == 2\n\ndef base_10_average(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if has_four_base_3_digits(i) and has_two_base_6_digits(i):\n            sum += base_10_sum(base_3_digits(i)) / base_10_sum(base_6_digits(i))\n    return sum / len(range(1, n + 1))\n\nprint(base_10_average(1000))"
  },
  {
    "example_id": 20,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "236.0"
    ],
    "solution": "n = 200\ngroups_4 = int(n / 4)\ngroups_3 = int(n / 3)\ngroups_11 = int(n / 11)\nremaining_4 = n - (groups_4 * 4)\nremaining_3 = n - (groups_3 * 3)\nremaining_11 = n - (groups_11 * 11)\nprint(remaining_4)\nprint(remaining_3)\nprint(remaining_11)"
  },
  {
    "example_id": 21,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0",
      "5.0",
      "20.0",
      "25.0",
      "40.0",
      "45.0",
      "60.0",
      "65.0",
      "80.0",
      "85.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "for a in range(0, 100):\n    if a * (a-1) % 20 == 4 * a % 20:\n        print(a)"
  },
  {
    "example_id": 22,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "11014.0"
    ],
    "solution": "a, b = symbols('a b')\nexpr = a*b\nsol = solve(expr, [a, b])\nprint(sol)"
  },
  {
    "example_id": 23,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.05625"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(9/160%10)"
  },
  {
    "example_id": 24,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print((29**13 - 5**13) % 7)"
  },
  {
    "example_id": 25,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nfor n in range(100):\n    a = 13 * n + 8\n    b = 5 * n + 3\n    gcd_a_b = gcd(a, b)\n    print(f\"Maximum possible value of gcd_a_b is {gcd_a_b}\")"
  },
  {
    "example_id": 26,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "313.0"
    ],
    "solution": "# number of eggs\nn_eggs = 200\n# number of baker dozens\nn_baker_dozens = int(n_eggs / 13)\n# number of eggs left over\nn_left_over = n_eggs % 13\nprint(n_baker_dozens * 13 + n_left_over)"
  },
  {
    "example_id": 27,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "145176.0"
    ],
    "annotated_answers": [
      "21126.0"
    ],
    "solution": "a = 315_6\nb = 4_6\nc = a * b\nprint(c)"
  },
  {
    "example_id": 28,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "6.0",
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 2\nwhile n < 10:\n    if n % 2 == 0:\n        print(n)\n    n += 2"
  },
  {
    "example_id": 29,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "a, b, c = symbols(\"a b c\")\nexpr = a**3 + b**3 + c**3 - 3*a*b*c\nsol = solve(expr, [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 30,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "def divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ncount = 0\nfor a in range(-200, -1):\n    product = 1\n    for i in divisors(a):\n        product *= i\n    if product < 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 31,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor i in range(100, 200):\n    if i % 4 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 32,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "4.0",
      "5.0",
      "10.0",
      "50.0",
      "20.0",
      "25.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "m = symbols('m')\nn = 100\ngcd_m_n = gcd(m, n)\ngcd_m_n_range = [gcd(m, n) for m in range(1, 100)]\ngcd_m_n_range = list(set(gcd_m_n_range))\nprint(gcd_m_n_range)"
  },
  {
    "example_id": 33,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# define variables\nn = 3\nm = 9\na = 100\nb = 1000\nc = 10000\n\n# create list of perfect squares\nperfect_squares = [a, b, c]\n\n# define function to check if perfect squares can be made\ndef check_perfect_squares(perfect_squares):\n    # define variables\n    num_perfect_squares = 0\n\n    # loop through perfect squares\n    for perfect_square in perfect_squares:\n        # check if perfect square can be made\n        if perfect_square % n == 0 and perfect_square % m == 0:\n            # increment number of perfect squares\n            num_perfect_squares += 1\n\n    return num_perfect_squares\n\n# call function to check perfect squares\nnum_perfect_squares = check_perfect_squares(perfect_squares)\n\n# print solution\nprint(num_perfect_squares)"
  },
  {
    "example_id": 34,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "N = 531340\nN_base6 = 531340\nN_base8 = 124154\n\nN_base10 = 210\n\nremainder = N % N_base10\n\nprint(remainder)"
  },
  {
    "example_id": 35,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1482.0"
    ],
    "annotated_answers": [
      "1147.0"
    ],
    "solution": "max_product = 0\nfor p in range(2, 39):\n    for q in range(p + 1, 40):\n        product = p * q\n        if product > max_product:\n            max_product = product\nprint(max_product)"
  },
  {
    "example_id": 36,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1010001000.0",
      "1.100111011000101",
      "36"
    ],
    "annotated_answers": [
      "76028.0"
    ],
    "solution": "sum = bin(324) + bin(111010101110)\nprint(sum)"
  },
  {
    "example_id": 37,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "product = 16**17 * 17**18 * 18**19\nunits_digit = product % 10\nprint(units_digit)"
  },
  {
    "example_id": 38,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "525.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "a = 1575\nb = 1050\ngcd_ab = gcd(a, b)\nprint(gcd_ab)"
  },
  {
    "example_id": 39,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def is_increasing(n):\n    digits = str(n)\n    return digits == sorted(digits)\n\ndef is_valid(n):\n    digits = str(n)\n    return len(digits) == 3 and is_increasing(n)\n\ndef get_factors(n):\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\ndef get_gcf(n1, n2):\n    factors1 = get_factors(n1)\n    factors2 = get_factors(n2)\n    common_factors = [f for f in factors1 if f in factors2]\n    if common_factors:\n        return max(common_factors)\n    return 1\n\ndef get_gcf_all(numbers):\n    gcf = 1\n    for i in range(len(numbers)-1):\n        gcf = get_gcf(numbers[i], numbers[i+1])\n    return gcf\n\ndef get_three_digit_numbers():\n    numbers = []\n    for i in range(100, 1000):\n        if is_valid(i):\n            numbers.append(i)\n    return numbers\n\nthree_digit_numbers = get_three_digit_numbers()\ngcf = get_gcf_all(three_digit_numbers)\nprint(gcf)"
  },
  {
    "example_id": 40,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# possible values of B\nvalues = [i for i in range(10, 100) if i**0.5 % 1 == 0]\nprint(len(values))"
  },
  {
    "example_id": 41,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 1*3*5*7*9*11*13\nprint(a%10)"
  },
  {
    "example_id": 42,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "9.0",
      "1.0",
      "9.0",
      "9.0",
      "1.0",
      "30.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "n = 3**17 + 3**10\nn_plus_1 = n + 1\n\n# Calculate 11 divides into n + 1\ndivides_by_11 = n_plus_1 % 11 == 0\nprint(divides_by_11)\n\n# Calculate n in base 10\nn_in_base_10 = str(n)\n\n# Extract digits from n\ndigits = list(n_in_base_10)\n\n# Create a list to hold the digits\ndigits_list = []\n\n# Check each digit to see if it is odd\nfor digit in digits:\n    if digit in ['1', '3', '5', '7', '9']:\n        digits_list.append(digit)\n\n# Print the digits list\nprint(digits_list)\n\n# Create a variable to hold the number\nnumber = 0\n\n# Iterate through the digits list\nfor digit in digits_list:\n    number += int(digit)\n\n# Print the number\nprint(number)"
  },
  {
    "example_id": 43,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1329.0"
    ],
    "annotated_answers": [
      "6710.0"
    ],
    "solution": "r = 13\n\n# Create a function to find the smallest integer\n# that is a multiple of 1342 and has a smaller \n# remainder when divided by 13 than r\ndef find_smallest_integer(r):\n    # Find the gcd of 1342 and r\n    gcd_val = gcd(1342, r)\n    # Find the quotient of 1342 divided by gcd_val\n    quotient = 1342 // gcd_val\n    # Find the remainder of r divided by gcd_val\n    remainder = r // gcd_val\n    # Find the smallest integer greater than or equal to quotient - remainder\n    smallest_integer = int(np.ceil(quotient - remainder))\n    return smallest_integer\n\n# Call the function to find the smallest integer\nsmallest_integer = find_smallest_integer(r)\nprint(smallest_integer)"
  },
  {
    "example_id": 44,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "5.0",
      "11.0",
      "374.0",
      "10.0",
      "34.0",
      "11.0",
      "374.0",
      "17.0",
      "5.0",
      "11.0",
      "374.0",
      "10.0",
      "34.0",
      "11.0",
      "374.0"
    ],
    "annotated_answers": [
      "142.0"
    ],
    "solution": "a = 4641\nb = int(np.sqrt(a))\nx, y = symbols('x y')\nsolutions = solve([(x * y) - a, x * 10 + y - b], [x, y])\nprint(solutions)"
  },
  {
    "example_id": 45,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import floor\n\nn = 17\nd = 1\n\nwhile d < 4037:\n    d *= 10\n    n *= 10\n\nd = d % n\n\nprint(d)"
  },
  {
    "example_id": 46,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.58999999999997"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "Linda = 27.47\nSherry = 35.23\nJune = 37.37\nConnie = 26.52\n\ntotal = Linda + Sherry + June + Connie\n\n# convert to cents\ntotal = total * 100\n\n# convert to dollars\ntotal = total / 100\n\nprint(total)"
  },
  {
    "example_id": 47,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "9.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# The number 2013 in base b is written as (2676)b\n# The last digit of (2676)b is 6\n# 2013 ends in 3 if and only if the last digit of (2676)b is 3\n\n# The number 2013 ends in 3 for the following values of b:\nprint(2, 3, 9)"
  },
  {
    "example_id": 48,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "314.0"
    ],
    "solution": "# Step 1: Find a remainder for 2, 4, 6, and 8\n# modulo 3, 5, 7, and 9\nremainder_2 = 2 % 3\nremainder_4 = 4 % 5\nremainder_6 = 6 % 7\nremainder_8 = 8 % 9\n\n# Step 2: Find the least non-negative integer a\n# that satisfies the congruences\na = (remainder_2 * 5**2 * 7**3 * 9**4) % 1\n\n# Step 3: Check the congruences\nprint(a)\nprint(a % 3)\nprint(a % 5)\nprint(a % 7)\nprint(a % 9)"
  },
  {
    "example_id": 49,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0",
      "1.0",
      "39.0",
      "2.0",
      "39.0",
      "3.0",
      "39.0",
      "4.0",
      "39.0",
      "5.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "def modulo(a, n):\n    return a % n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(m, n):\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if modulo(14 * i - 46, 100) == 0:\n                print(i, j)\n\ndef average(numbers):\n    return sum(numbers) / len(numbers)\n\nsolve(100, 100)"
  },
  {
    "example_id": 50,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "if 7 % 4 == 0:\n    print(0)\nelse:\n    print(7 % 4)"
  },
  {
    "example_id": 51,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "a = 53\nb = 7\nx = symbols('x')\nsol = solve(x * a - x * b, x)\nprint(sol[0])"
  },
  {
    "example_id": 52,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "print(81_9 - 72_9)"
  },
  {
    "example_id": 53,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0",
      "13.0",
      "13.0",
      "13.0",
      "13.0",
      "13.0",
      "13.0",
      "13.0",
      "13.0",
      "13.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "for a in range(1, 12):\n    for b in range(1, 12):\n        for c in range(1, 12):\n            if (2*a*b + b*c + c*a) % 13 == 0 and \\\n               (a*b + 2*b*c + c*a) % 13 == 6*a*b*c and \\\n               (a*b + b*c + 2*c*a) % 13 == 8*a*b*c:\n                print(\"a+b+c is divisible by 13\")\n                break\n            else:\n                print(\"a+b+c is not divisible by 13\")\n                break"
  },
  {
    "example_id": 54,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef smallest_and_largest_prime_factors(n):\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            factors.append(i)\n    smallest = min(factors)\n    largest = max(factors)\n    return smallest + largest\n\n\nprint(smallest_and_largest_prime_factors(10101))"
  },
  {
    "example_id": 55,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "# Least common multiple = 112\n# Greatest common divisor = 8\n# m+n = 112 / 8 = 14\nprint(14)"
  },
  {
    "example_id": 56,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# 48\nN = 48\nsqrt_N = math.sqrt(N)\nprimes = [2, 3, 5, 7]\ndivisors = []\nfor num in range(3, int(sqrt_N)+1, 2):\n    if num not in primes:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            divisors.append(num)\nnum_divisors = len(divisors)\nprint(num_divisors)\n\n\n# 156\nN = 156\nsqrt_N = math.sqrt(N)\nprimes = [2, 3, 5, 7, 11]\ndivisors = []\nfor num in range(3, int(sqrt_N)+1, 2):\n    if num not in primes:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            divisors.append(num)\nnum_divisors = len(divisors)\nprint(num_divisors)"
  },
  {
    "example_id": 57,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "n = 12\nk = 15\nlcm = n*k\ngcd = 15\nlcm_divided_by_gcd = lcm/gcd\nprint(lcm_divided_by_gcd)"
  },
  {
    "example_id": 58,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 1000\nd = 20\nremainder = n % d\nnum_factors = 0\nif remainder == 0:\n    num_factors = n / d\nelse:\n    num_factors = n / d - 1\nprint(num_factors)"
  },
  {
    "example_id": 59,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "number = 13**19 * 19**13\nunits_digit = number % 10\nprint(units_digit)"
  },
  {
    "example_id": 60,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1147.0"
    ],
    "annotated_answers": [
      "222.0"
    ],
    "solution": "n = 1147\nprint(n)"
  },
  {
    "example_id": 61,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.42857142857142855"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "print(3/7)"
  },
  {
    "example_id": 62,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "3300.0"
    ],
    "solution": "r = 100\na = r*100\nb = 13200\nlcm = int(a/gcd(a,b))\nprint(lcm)"
  },
  {
    "example_id": 63,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "7.0",
      "81.0",
      "3.0",
      "5.0",
      "7.0",
      "225.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define variables\nn = 1\nm = 1\nk = 1\n\n# Define function\ndef get_prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# Solve equation\nfor k in range(3, 100, 2):\n    factors = get_prime_factors(k)\n    for i in range(len(factors)):\n        for j in range(i + 1, len(factors)):\n            if factors[i] * factors[j] == k:\n                n = factors[i] * factors[j]\n                m = k / n\n                print(\"Number of positive cubes dividing $3!\\cdot 5!\\cdot 7!$ is\", n * m * k)\n                break"
  },
  {
    "example_id": 64,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "53.0",
      "48.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "a = 5\nb = 53\n\nprint(str(a)[-1])\nprint(str(b)[-2:])\n\na_base_3 = str(a-b)[-2:]\nprint(a_base_3)"
  },
  {
    "example_id": 65,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "num_of_fractions = 0\nfor n in range(1, 100):\n    if (n % 99) == 0:\n        num_of_fractions += 1\nprint(num_of_fractions)"
  },
  {
    "example_id": 66,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0",
      "14.0",
      "42.0",
      "28.0",
      "70.0",
      "42.0",
      "14.0",
      "56.0",
      "126.0",
      "70.0"
    ],
    "annotated_answers": [
      "2743.0"
    ],
    "solution": "N = 1000\nfor i in range(1, N+1):\n    for j in range(1, N+1):\n        if i*j >= N:\n            break\n        if (i*j) % 14 == 0:\n            print(i*j)\n            break"
  },
  {
    "example_id": 67,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "841.0"
    ],
    "solution": "k = 0\nwhile k < 1000:\n    k += 1\n    if k % 3 == 1 and k % 4 == 1 and k % 5 == 1 and k % 6 == 1 and k % 7 == 1:\n        print(k)\n        break"
  },
  {
    "example_id": 68,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "11189.0"
    ],
    "solution": "n = symbols('n', positive=True)\nnum = symbols('num', positive=True)\nden = symbols('den', positive=True)\neq1 = (num + den) - n\neq2 = num*den - n\neq3 = num*den - n\nsol = solve([eq1, eq2, eq3], [num, den])\nprint(sol)"
  },
  {
    "example_id": 69,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# \nremainder = 0\nfor i in range(1, 101):\n    remainder = (remainder + i) % 6\nprint(remainder)"
  },
  {
    "example_id": 70,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "S = sum(range(2010, 4019))\nprint(S % 2009)"
  },
  {
    "example_id": 71,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "23.0",
      "151.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "b = symbols(\"b\")\na = 5\nn = 23\nm = 151\neq = a*n**b - m**b\nsol = solve(eq, b)\nprint(sol)"
  },
  {
    "example_id": 72,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "131.0",
      "2.0",
      "131.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a, b = symbols('a, b')\nx = a**2 + b**2\neq = x - 131\nsol = solve(eq, a)\nprint(sol)"
  },
  {
    "example_id": 73,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# We need to find a and b such that a/b is an integer and gcd(a,b) = 1\n# We can use the Euclidean algorithm to find gcd and the Bezout identity to find inverse\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef inverse(a, m):\n    b, u, v, t = 0, 1, 0, 1\n    while a!= 0:\n        q, r = m // a, m % a\n        m, a = a, q\n        m, a = b, u\n        b, u = u, m\n        m, a = v, t\n        v, t = t, m\n    if a == 1:\n        return b\n    raise ValueError\n\nfor a in range(1, 100):\n    for b in range(1, 100):\n        if gcd(a, b) == 1:\n            quotient = (a * 9 + b * 14) / (a * 14 + b * 9)\n            if int(quotient) == quotient:\n                print(f\"({a}, {b})\")"
  },
  {
    "example_id": 74,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "3.0",
      "5.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "# define variables\nx = symbols('x')\ny = symbols('y')\nz = symbols('z')\n\n# define equations\neq1 = x + y + z\neq2 = x + y + 2*z\neq3 = 2*x + 2*y + 3*z\n\n# solve for equations\nsoln1 = solve(eq1, x)\nsoln2 = solve(eq2, y)\nsoln3 = solve(eq3, z)\n\n# print sum\nprint(sum(soln1) + sum(soln2) + sum(soln3))"
  },
  {
    "example_id": 75,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Fibonacci numbers\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# greatest common divisor\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n# greatest common divisor of two consecutive Fibonacci numbers\ndef gcd_fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return gcd(fibonacci(n), fibonacci(n-1))\n\n# greatest possible value of the greatest common divisor of two consecutive Fibonacci numbers\ndef greatest_gcd(n):\n    max_gcd = 0\n    for i in range(n-1):\n        max_gcd = max(max_gcd, gcd_fibonacci(i))\n    return max_gcd\n\n# test\nprint(greatest_gcd(30))"
  },
  {
    "example_id": 76,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef gcd_fibonacci(n):\n    fib = fibonacci(n)\n    for i in range(2, int(math.sqrt(fib)) + 1):\n        if fib % i == 0:\n            return False\n    return True\n\ndef solve_fib(n):\n    for i in range(n):\n        if is_prime(fibonacci(i)):\n            return i\n    return -1\n\nN = 6\nsqrt_N = math.sqrt(N)\nfib_list = []\nfor num in range(3, int(sqrt_N)+1, 2):\n    if gcd_fibonacci(num):\n        fib_list.append(num)\nnum_fib = len(fib_list)\nprint(num_fib)"
  },
  {
    "example_id": 77,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 12\nb = 5\n\nif a+b == 2*a+b:\n    last_digit = 0\nelif 2*a+b == 10:\n    last_digit = 0\nelse:\n    last_digit = 1\n\nprint(last_digit)"
  },
  {
    "example_id": 78,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 137\nb = 500\nans = a // b\nprint(ans)"
  },
  {
    "example_id": 79,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "for n in range(1000000):\n    if n % 3 == 1 and n % 4 == 1 and n % 5 == 4:\n        print(n)\n        break"
  },
  {
    "example_id": 80,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "625.0"
    ],
    "annotated_answers": [
      "687.0"
    ],
    "solution": "D = 5\nXY = 62\nXYD = XY * 10 + D\nprint(XYD)"
  },
  {
    "example_id": 81,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "231.0"
    ],
    "solution": "def mod_inverse(a, n):\n    b = a % n\n    x = 0\n    y = 1\n    while b!= 0:\n        temp = b\n        q = a // b\n        b = temp % b\n        temp = x\n        x = y - q * x\n        y = temp\n    if x < 0:\n        x = x + n\n    return x\n\nprint(mod_inverse(11, 508))"
  },
  {
    "example_id": 82,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n\n\ndef gcd_of_products(n):\n    for i in range(1, n):\n        for j in range(1, n):\n            if n % i == 0 and n % j == 0:\n                return gcd(i, j)\n\n\nprint(gcd_of_products(12))"
  },
  {
    "example_id": 83,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "n = 6\n\n# 2n has 28 positive divisors\n# 3n has 30 positive divisors\n# so 6n has 30 + 28 = 58 positive divisors\n\nprint(58)"
  },
  {
    "example_id": 84,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "numerator = 4321\ndenominator = 5**7 * 2**8\n\ndef sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n\nsum = sum_digits(numerator) + sum_digits(denominator)\nprint(sum)"
  },
  {
    "example_id": 85,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "m = 6\nn = 0\nproduct = m*n\nprint(product)"
  },
  {
    "example_id": 86,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "189.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef f(x):\n    return 12 * x + 7\n\ndef g(x):\n    return 5 * x + 2\n\nsum = 0\nfor i in range(1, 100):\n    sum += gcd(f(i), g(i))\n\nprint(sum)"
  },
  {
    "example_id": 87,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 30\nb = 50\nprint(gcd(a,b))"
  },
  {
    "example_id": 88,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Find the product of all integers from 1 through 10 that are not divisible by 5.\n# The units digit of this number is the last digit of the number.\nnum = 1\nfor i in range(2, 11):\n    if i % 5!= 0:\n        num *= i\n\nprint(num % 10)"
  },
  {
    "example_id": 89,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "product = 1\nfor i in range(1, 101):\n    product *= 2**i\nprint(product % 100)"
  },
  {
    "example_id": 90,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "count = 0\nfor i in range(1,9):\n    if gcd(i,8) == 1:\n        count += 1\nprint(3**count % 8)"
  },
  {
    "example_id": 91,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "101.0",
      "129.0",
      "100.0",
      "101.0",
      "239.0",
      "100.0",
      "101.0",
      "349.0",
      "100.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "for i in range(100, 1000):\n    for j in range(i+1, 1000):\n        for k in range(j+1, 1000):\n            if (i+j+k) % 10 == 0:\n                if (i+j+k) // 100 == (i+j+k) // 10 % 10:\n                    print(i, j, k)"
  },
  {
    "example_id": 92,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "38.34057902536163"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "x = 735\na = 2\nsqrt_ax = math.sqrt(a*x)\nprint(sqrt_ax)"
  },
  {
    "example_id": 93,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 91145\nb = 91146\nc = 91147\nd = 91148\n\nremainder = (a + b + c + d) % 4\nprint(remainder)"
  },
  {
    "example_id": 94,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.041666666666666664"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "b = 24**-1 % 11**2\nprint(b)"
  },
  {
    "example_id": 95,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "# Define three variables\na = 3339\nb = 2961\nc = 1491\n\n# Calculate the greatest common divisor\ngcd_val = gcd(a, b, c)\nprint(gcd_val)"
  },
  {
    "example_id": 96,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import factorial\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\na = factorial(10) + 2\nb = factorial(11) + 8\n\nprint(gcd(a, b))"
  },
  {
    "example_id": 97,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "# Create a list of perfect squares between 1 and 1000\nperfect_squares = []\nfor i in range(1, 1000):\n    root = int(math.sqrt(i))\n    if root**2 == i:\n        perfect_squares.append(i)\n\n# Create a list of perfect cubes between 1 and 1000\nperfect_cubes = []\nfor i in range(1, 1000):\n    root = int(math.cbrt(i))\n    if root**3 == i:\n        perfect_cubes.append(i)\n\n# Create a list of all numbers between 1 and 1000 that are both perfect squares and perfect cubes\nboth_perfect = []\nfor i in perfect_squares:\n    if i in perfect_cubes:\n        both_perfect.append(i)\n\n# Find the next number in the list that is both a perfect cube and a perfect square\nnext_perfect = 0\nfor i in range(1, 1000):\n    if i not in both_perfect:\n        next_perfect = i\n        break\nprint(next_perfect)"
  },
  {
    "example_id": 98,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "units_digit = (19**19 + 99**99) % 10\nprint(units_digit)"
  },
  {
    "example_id": 99,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22768774564.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = [0, 1]\nb = [1, 2]\n\nfor n in range(2, 51):\n    a.append(a[n-1] + b[n-2])\n    b.append(a[n-2] + b[n-1])\n\nprint(a[50] + b[50] % 5)"
  },
  {
    "example_id": 100,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "A = 1\nB = 2\n\nA_7 = A % 10\nB_7 = B % 10\n\nproduct = A * B\nprint(product)"
  },
  {
    "example_id": 101,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0"
    ],
    "annotated_answers": [
      "103.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef gcd_fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a\n    return a\n\nn = 3\nwhile True:\n    if n % 7 == 3 and n > 100:\n        break\n    n += 1\n\nprint(n)"
  },
  {
    "example_id": 102,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "2.0",
      "9.0",
      "-12.0",
      "2.0",
      "9.0",
      "2.0",
      "2.0",
      "4.0",
      "9.0",
      "3.0",
      "13.0",
      "18.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a, b = symbols('a, b')\neq = (a*b)**9 - 144\nsol = solve(eq, a)\nsol = solve(eq, b)\nsol = [sol[0], sol[1]]\na, b = sol[0], sol[1]\nprint(a+b)"
  },
  {
    "example_id": 103,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "22.0",
      "33.0",
      "44.0",
      "55.0",
      "66.0",
      "77.0",
      "88.0",
      "99.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 10\nwhile n < 100:\n    if (n % 10) == (n // 10):\n        print(n)\n    n += 1"
  },
  {
    "example_id": 104,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b, c, d, e, f, g, h, i = symbols('a, b, c, d, e, f, g, h, i')\n\nsquares = [a**2, b**2, c**2, d**2, e**2, f**2, g**2, h**2, i**2]\nsum_squares = sum(squares)\nunits_digit = sum_squares % 10\nprint(units_digit)"
  },
  {
    "example_id": 105,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "perfect_squares = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256]\n\nmax_draws = 0\nfor i in range(1, 16):\n    for j in range(i+1, 16):\n        if (i*j) in perfect_squares:\n            max_draws = i + j\n            break\n    if max_draws!= 0:\n        break\n\nprint(max_draws)"
  },
  {
    "example_id": 106,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "import math\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\na = 2863\nb = 1344\nprint(gcd(a, b))"
  },
  {
    "example_id": 107,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "91.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 36 + 1):\n    if i % 36 == 0:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 108,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# \nn = 20\n\n# Calculate the last 18 digits\nlast_18_digits = 432902008176640000\n\n# Calculate the first digit\nfirst_digit = last_18_digits // 10 ** 18\nprint(first_digit)"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 2003\nb = 11\nprint(a % b)"
  },
  {
    "example_id": 110,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.426545515442209",
      "142"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "b = 321\na = 57\nn = b**a\nprint(n)"
  },
  {
    "example_id": 111,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 10\nk = 0\nfor i in range(1, 2**n):\n    if i % 2**n == 3:\n        k += 1\nprint(k % 13)"
  },
  {
    "example_id": 112,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "468.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "def proper_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i * i!= n:\n                divisors.append(n // i)\n    return sum(divisors)\n\nprint(proper_divisors(198))"
  },
  {
    "example_id": 113,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2420.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(44*55)"
  },
  {
    "example_id": 114,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef reverse_digits(n):\n    return int(str(n)[::-1])\n\ndef is_reversible_prime(n):\n    return is_prime(n) and is_prime(reverse_digits(n))\n\nfor i in range(18, 1000000000):\n    if is_reversible_prime(i):\n        print(i)\n        break"
  },
  {
    "example_id": 115,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6220857616.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 120\na = 1\nb = 1\nc = 1\nnum_divisors = 0\nfor i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n        num_divisors += 1\n        a *= i\n        b *= (n // i)\n        c *= gcd(i, n//i)\nprint(a+b+c)"
  },
  {
    "example_id": 116,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 20\nb = 7\nc = a * 5\nd = c // b\nprint(d % 7)"
  },
  {
    "example_id": 117,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 22):\n    sum += i**3\nprint(sum % 10)"
  },
  {
    "example_id": 118,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "k = 1\nwhile True:\n    if (k * 357) % 18 == 0:\n        break\n    k += 1\nprint(k)"
  },
  {
    "example_id": 119,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7000.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "# Define the function\ndef lcm(a, b):\n    # Calculate the HCF\n    hcf = gcd(a, b)\n    # Calculate the LCM\n    lcm = (a * b) // hcf\n    # Return the LCM\n    return lcm\n\n# Find the LCM of 700 and 1000\nlcm_700_1000 = lcm(700, 1000)\n# Print the LCM\nprint(lcm_700_1000)\n\n\n# Define the function\ndef lcm(a, b):\n    # Calculate the HCF\n    hcf = gcd(a, b)\n    # Calculate the LCM\n    lcm = (a * b) // hcf\n    # Return the LCM\n    return lcm\n\n# Find the LCM of 700 and 1000\nlcm_700_1000 = lcm(700, 1000)\n# Print the LCM\nprint(lcm_700_1000)\n\n\n# Define the function\ndef lcm(a, b):\n    # Calculate the HCF\n    hcf = gcd(a, b)\n    # Calculate the LCM\n    lcm = (a * b) // hcf\n    # Return the LCM\n    return lcm\n\n# Find the LCM of 700 and 1000\nlcm_700_1000 = lcm(700, 1000)\n# Print the LCM\nprint(lcm_700_1000)\n\n\n# Define the function\ndef lcm(a, b):\n    # Calculate the HCF\n    hcf = gcd(a, b)\n    # Calculate the LCM\n    lcm = (a * b) // hcf\n    # Return the LCM\n    return lcm\n\n# Find the LCM of 700 and 1000\nlcm_700_1000 = l"
  },
  {
    "example_id": 120,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8529.0"
    ],
    "annotated_answers": [
      "695.0"
    ],
    "solution": "def to_base_10(number, base):\n    return int(number, base)\n\nprint(to_base_10('852_9', 10))"
  },
  {
    "example_id": 121,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 5\nb = 7\n\ndef power(x, y):\n    return x ** y\n\ndef mod(x, y):\n    return x % y\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef gcd_fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return gcd(fibonacci(n - 1), fibonacci(n - 2))\n\ndef gcd_fibonacci_mod(n, m):\n    return gcd(fibonacci(n) % m, fibonacci(n - 1) % m)\n\ndef solve(eq):\n    return symbols(eq)\n\ndef mod_power(x, y, m):\n    return mod(power(x, y), m)\n\ndef gcd_mod(a, b, m):\n    return gcd(a % m, b % m)\n\ndef is_prime_mod(n, m):\n    if n == 1:\n        return False\n    for i in range(2, int(m ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(mod(power(5, 999999), 7))"
  },
  {
    "example_id": 122,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32546.0"
    ],
    "annotated_answers": [
      "754.0"
    ],
    "solution": "base10 = 3254_6\nprint(base10)"
  },
  {
    "example_id": 123,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.41025641025641024"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a = 3**(-1) % 19\nb = 13**(-1) % 19\nprint((a + b) % 19)"
  },
  {
    "example_id": 124,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "192.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "# Solve the equation\n# 72x = 16n\n# x = 16n / 72\n# x = 16 / 72 * n\n# x = n / 12\nn = 12 * 16\nprint(n)"
  },
  {
    "example_id": 125,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 199, 2):\n    sum += i\nremainder = sum % 7\nprint(remainder)"
  },
  {
    "example_id": 126,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "102.0"
    ],
    "solution": "m, n = symbols('m n')\nsolve(m - 24*n - 51, m)"
  },
  {
    "example_id": 127,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "600.0"
    ],
    "annotated_answers": [
      "71.0"
    ],
    "solution": "# number of pages in the book\nnum_pages = 12 * 10\n\n# number of pages in the epilogue\nepilogue = 11\n\n# total number of pages in the book\nnum_pages += epilogue\n\n# number of pages with trivia facts\nnum_trivia = 11\n\n# total number of pages with trivia facts\nnum_pages_with_trivia = num_pages - num_trivia\n\n# total number of trivia facts\ntotal_trivia = num_pages_with_trivia * 5\n\nprint(total_trivia)"
  },
  {
    "example_id": 128,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6875",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "red_jelly_beans = 8\ngreen_jelly_beans = 13\nwhite_jelly_beans = 0\n\n# Calculate the total number of jelly beans\ntotal_jelly_beans = red_jelly_beans + green_jelly_beans\n\n# Calculate the number of pounds\nlbs = total_jelly_beans / 16\n\n# Calculate the number of ounces\noz = total_jelly_beans % 16\n\n# Calculate the minimum number of ounces of white jelly beans\nmin_oz = 16 - oz\n\n# Calculate the minimum number of pounds of white jelly beans\nmin_lbs = min_oz / 16\n\n# Calculate the total number of pounds\ntotal_lbs = lbs + min_lbs\n\n# Calculate the number of pounds in an integer\ninteger_lbs = int(total_lbs)\n\n# Print the minimum number of pounds of white jelly beans\nprint(min_lbs)\n\n# Print the total number of pounds\nprint(total_lbs)\n\n# Print the number of pounds in an integer\nprint(integer_lbs)"
  },
  {
    "example_id": 129,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def is_congruent(n, m):\n    return n % m == 5\n\ncount = 0\nfor i in range(-200, 201):\n    if is_congruent(i, 13):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 130,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "5.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "# Initialize variables\nx = symbols('x')\na = 30\nb = 42\nm = 47\n\n# Solve for x\nsol = solve(a*x - b, x, modulus = m)\n\n# Print result\nprint(sol)"
  },
  {
    "example_id": 131,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "7.0",
      "13.0",
      "17.0",
      "19.0",
      "23.0",
      "29.0",
      "31.0",
      "37.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef gcd_fibonacci(n):\n    if n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n + 1):\n            c = a\n            a = b\n            b = c + a\n        return b\n\ndef fibonacci(n):\n    if n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nn = 1\nwhile n <= 1000:\n    if is_prime(n):\n        if gcd(n, 1375) == 1:\n            print(n)\n    n += 1"
  },
  {
    "example_id": 132,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "6647.0"
    ],
    "solution": "print(340 % 7)"
  },
  {
    "example_id": 133,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "996.0"
    ],
    "annotated_answers": [
      "611.0"
    ],
    "solution": "N = 1000\nfor num in range(N, 1, -1):\n    if (num % 10 == 6) and (num % 100!= 66) and (num % 1000!= 666):\n        print(num)\n        break"
  },
  {
    "example_id": 134,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 9.2 * 10**2\nb = 8 * 10**6\nproduct = a * b\nproduct = 9200000\nnum_zeros = 6\nprint(num_zeros)"
  },
  {
    "example_id": 135,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# calculate the remainder when 1999**2000 is divided by 5\nmod = (1999**2000) % 5\nprint(mod)"
  },
  {
    "example_id": 136,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_probability(n):\n    count = 0\n    for i in range(1, n):\n        if is_prime(i) and sum(int(x) for x in str(i)) == 9:\n            count += 1\n    return count / n\n\nprint(get_prime_probability(10000000))"
  },
  {
    "example_id": 137,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12007.0"
    ],
    "solution": "print(441 % 7)"
  },
  {
    "example_id": 138,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Define x\nx = symbols('x')\n# Define system of equations\nsystem = [\n    x - 1 - x,\n    x - 2 - x\n]\n# Solve system of equations\nsolution = solve(system)\n# Print number of solutions\nprint(len(solution))"
  },
  {
    "example_id": 139,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Define the number of digits\nnumber_of_digits = 3\n\n# Define the tens digit multiple\ntens_multiple = 3\n\n# Define the units digit multiple\nunits_multiple = 2\n\n# Define the units digit\nunits_digit = 1\n\n# Initialize the total count\ncount = 0\n\n# Loop over the units digit\nfor i in range(units_digit, 10):\n\n    # Calculate the tens digit\n    tens_digit = i * tens_multiple\n\n    # Calculate the hundreds digit\n    hundreds_digit = i * units_multiple\n\n    # Check if the tens digit is a multiple of the hundreds digit\n    if tens_digit % hundreds_digit == 0:\n\n        # Increment the count\n        count += 1\n\n# Print the total count\nprint(count)"
  },
  {
    "example_id": 140,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# units digit of 374n is 7\nprint(7)"
  },
  {
    "example_id": 141,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35760.0"
    ],
    "annotated_answers": [
      "41305.0"
    ],
    "solution": "a = 1234_5\nb = 2341_5\nans = a + b\nprint(ans)"
  },
  {
    "example_id": 142,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef is_divisible(n, factor):\n    return factorial(n) % factor == 0\n\ndef greatest_divisor(n):\n    for i in range(n, 1, -1):\n        if is_divisible(n, i):\n            return i\n    return 0\n\nprint(greatest_divisor(8))"
  },
  {
    "example_id": 143,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "503.0"
    ],
    "annotated_answers": [
      "503.0"
    ],
    "solution": "import numpy as np\n\ndef is_congruent(n, m, k):\n    return n % k == m % k\n\ndef count_congruent_numbers(max_number, modulo, remainder):\n    count = 0\n    for n in range(1, max_number + 1):\n        if is_congruent(n, remainder, modulo):\n            count += 1\n    return count\n\ncount = count_congruent_numbers(18632, 37, 23)\nprint(count)"
  },
  {
    "example_id": 144,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 2\nremainder = (n + 2)*(n + 4)*(n + 6) % 7\nprint(remainder)"
  },
  {
    "example_id": 145,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1024.0",
      "1296.0",
      "1225.0",
      "1600.0",
      "2025.0",
      "1296.0",
      "1764.0",
      "2304.0",
      "2916.0",
      "1225.0"
    ],
    "annotated_answers": [
      "1681.0"
    ],
    "solution": "perfect_squares = [1, 4, 9, 16, 25, 36, 49, 64, 81]\nsquares = [i for i in perfect_squares if len(str(i)) == 2]\nsquares = [i*j for i, j in itertools.product(squares, squares)]\nfour_digit_square = [i for i in squares if len(str(i)) == 4]\nprint(four_digit_square)"
  },
  {
    "example_id": 146,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\ndef gcd_fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return gcd(a, b)\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\nn = 1\nwhile gcd_fibonacci(n)!= 1:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 147,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "sally = 239\nwei = 174\nzoe = 83\ntotal = sally + wei + zoe\nremoved = total % 10\nprint(removed)"
  },
  {
    "example_id": 148,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "16.0",
      "3.0",
      "12.0",
      "25.0",
      "42.0",
      "63.0",
      "16.0",
      "36.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "for x in range(1, 10):\n    for y in range(1, 10):\n        if (2*x) % 9 == (y + 5) % 9:\n            print(x*y)"
  },
  {
    "example_id": 149,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 9\nn_factorial = 362880\nremainder = n_factorial % 10\nprint(remainder)"
  },
  {
    "example_id": 150,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "a = 214\nb = 421\ngcd_ab = gcd(a, b)\nprint(gcd_ab)"
  },
  {
    "example_id": 151,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2857142857142858",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "remainder = (7j+3)*3/7\nprint(remainder)"
  },
  {
    "example_id": 152,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10011010010.0"
    ],
    "annotated_answers": [
      "110102.0"
    ],
    "solution": "# Add 1_2 + 11_2 + 111_2 + 1111_2\nans = 1 + 11 + 111 + 1111\nprint(bin(ans))"
  },
  {
    "example_id": 153,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# 7^53 = 1125899906842624\n# units digit = 4\nprint(7**53 % 10)"
  },
  {
    "example_id": 154,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Calculate units digit\nunits = (972 - 268) * (973 - 267) * (974 - 266) + (968 - 272) * (967 - 273) * (966 - 274) - (999 - 222) ** 3\nunits = units % 10\nprint(units)"
  },
  {
    "example_id": 155,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12099.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "rows_A = 105\nrows_B = rows_A + 6\nband_members_per_row = rows_B - 2\ntotal_band_members = band_members_per_row * rows_B\nprint(total_band_members)"
  },
  {
    "example_id": 156,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "base_4 = [0, 1, 2, 3]\nbase_9 = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\nsum_A = 0\nsum_B = 0\nsum_C = 0\n\nfor A in base_4:\n    for B in base_4:\n        for C in base_4:\n            ABC_4 = A*100 + B*10 + C\n            ABC_9 = ABC_4 + 200\n            if ABC_9 in base_9:\n                sum_A += A\n                sum_B += B\n                sum_C += C\n\nprint(sum_A)\nprint(sum_B)\nprint(sum_C)"
  },
  {
    "example_id": 157,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "247760792.0",
      "247760792.0"
    ],
    "annotated_answers": [
      "5636.0"
    ],
    "solution": "def four_digit_multiples(numbers):\n    multiples = []\n    for num in numbers:\n        for i in range(1000, 9999):\n            if i % num == 0:\n                multiples.append(i)\n    return multiples\n\ndef sum_multiples(numbers):\n    multiples = four_digit_multiples(numbers)\n    sum = 0\n    for num in multiples:\n        sum += num\n    return sum\n\nnumbers = [1, 2, 3, 4]\nleast_multiples = four_digit_multiples(numbers)\ngreatest_multiples = four_digit_multiples(numbers[::-1])\nprint(sum_multiples(least_multiples))\nprint(sum_multiples(greatest_multiples))"
  },
  {
    "example_id": 158,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "def mod_inverse(a, m):\n    \"\"\"\n    Returns the modular inverse of a modulo m\n    \"\"\"\n    for i in range(1, m):\n        if (a * i) % m == 1:\n            return i\n    return None\n\nprint(mod_inverse(35, 47))"
  },
  {
    "example_id": 159,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "for n in range(2, 25):\n    if pow(2, 24) == pow(n, n):\n        print(n)"
  },
  {
    "example_id": 160,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# Compute (3^{-1}+5^{-1})^{-1} mod 31\n# = (30 + 49) mod 31 = 31 mod 31 = 1\n\nprint(1)"
  },
  {
    "example_id": 161,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9999.0"
    ],
    "annotated_answers": [
      "1155.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\n\n# find the smallest value of abcd\nab = a * b\nbc = b * c\ncd = c * d\nabcd = a * b * c * d\n\n# find the divisors of abcd\ndivisors = []\nfor i in range(1, 10):\n    if abcd % i == 0:\n        divisors.append(i)\n\n# find the smallest value of abcd that satisfies the condition\nsmallest = 9999\nfor i in divisors:\n    if ab % i == 0 and bc % i == 0 and cd % i == 0:\n        smallest = min(smallest, abcd)\n\nprint(smallest)"
  },
  {
    "example_id": 162,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "k = 240\nresult = 0\nfor i in range(1, 100000):\n    if i**3 == k*i:\n        result = i\n        break\nprint(result)"
  },
  {
    "example_id": 163,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10680.0"
    ],
    "annotated_answers": [
      "-2213.0"
    ],
    "solution": "a = 121_3\nb = 2122_3\nc = 1200_3\nd = 2111_3\n\nprint(a+b-c-d)"
  },
  {
    "example_id": 164,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "84.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq = a*b*c*d - 84\nsol = solve(eq, [a, b, c, d])\nprint(sol)"
  },
  {
    "example_id": 165,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3525"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "decimal = 141 / 400\nprint(decimal % 1)"
  },
  {
    "example_id": 166,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2011.0"
    ],
    "annotated_answers": [
      "2016.0"
    ],
    "solution": "n = 2010\nm = 2010\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef gcd_fibonacci(n):\n    for i in range(n):\n        if gcd(fibonacci(i), n) == 1:\n            return i\n    return n\n\ndef nice_numbers(n):\n    m = 2010\n    for i in range(n):\n        if is_prime(m) and gcd(m, fibonacci(i)) == 1:\n            return m\n        m += 1\n    return 0\n\nprint(nice_numbers(n))"
  },
  {
    "example_id": 167,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef f(n):\n    return sum(divisors(n))\n\ndef is_prime(n):\n    return all(n % i for i in range(2, int(n ** 0.5) + 1))\n\ndef bouncy_prime(n):\n    return is_prime(n) and is_prime(f(f(n)))\n\ndef smallest_bouncy_prime():\n    for i in range(2, 100000000):\n        if bouncy_prime(i):\n            return i\n    return -1\n\nprint(smallest_bouncy_prime())"
  },
  {
    "example_id": 168,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "8.0",
      "9.0",
      "10.0",
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "for i in range(1, 13):\n    if i not in [1, 7, 11]:\n        print(i)"
  },
  {
    "example_id": 169,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "m = 2003\nsqrt_m = math.sqrt(m)\nprimes = [2]\nfor num in range(3, int(sqrt_m)+1, 2):\n    is_prime = True\n    for prime in primes:\n        if num % prime == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\nnum_primes = len(primes)\nprint(num_primes)"
  },
  {
    "example_id": 170,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-11.0"
    ],
    "annotated_answers": [
      "-36.0"
    ],
    "solution": "# base 4\na = 333\nb = 344\nprint(a-b)"
  },
  {
    "example_id": 171,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Number of pencils in each bag\nbags = 3\n\n# Total number of pencils\npencils = 100\n\n# Remainder\nremainder = pencils % bags\n\nprint(remainder)"
  },
  {
    "example_id": 172,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 10\na = 10\nb = 10\n\nwhile b < x:\n    a, b = b, a + b\n\nprint(a)"
  },
  {
    "example_id": 173,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "for k in range(1,6):\n    if k % 3 == 0:\n        print(k)"
  },
  {
    "example_id": 174,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "809.0"
    ],
    "annotated_answers": [
      "5067.0"
    ],
    "solution": "num1 = 3210\nnum2 = 2401\n\nprint(num1 - num2)"
  },
  {
    "example_id": 175,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "t = symbols('t')\nexpr = (19*t + 5*t)/t\nsol = solve(expr, t)\nprint(len(sol))"
  },
  {
    "example_id": 176,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "factors = [2, 3, 5, 7, 11, 13, 17, 19, 23]\nexponents = [23, 19, 17, 13, 11, 7, 5, 3, 2]\n\nmax_exponent = max(exponents)\nmax_prime = factors[exponents.index(max_exponent)]\n\nprint(max_prime)"
  },
  {
    "example_id": 177,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "57.0"
    ],
    "solution": "n = 23\nprint(n)"
  },
  {
    "example_id": 178,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "77.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "t1 = 6\nt2 = 7\nd1 = 11\nd2 = 7\ntime_interval = 0\nfor i in range(1, 1000):\n    time_interval += d1\n    if time_interval % d2 == 0:\n        print(time_interval)\n        break"
  },
  {
    "example_id": 179,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0"
    ],
    "annotated_answers": [
      "1016.0"
    ],
    "solution": "n = 55\nr = symbols('r')\nsol = solve(r**2 + 4*r + 4 - r**2 - 2*r - 1, r)\nprint(sol)"
  },
  {
    "example_id": 180,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "n = 9\ncount = 0\nfor i in range(1, n+1):\n    if n % i == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 181,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 50):\n    sum += i**2\nprint(sum % 10)"
  },
  {
    "example_id": 182,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1076.0"
    ],
    "annotated_answers": [
      "1076.0"
    ],
    "solution": "a = 62\nb = 75\nn = 1000\nfor i in range(1000, 1100):\n    if (a - b) % 99 == i % 99:\n        print(i)"
  },
  {
    "example_id": 183,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# a, b, m = symbols('a, b, m')\na, b, m = symbols('a, b, m')\n# L = (a+b)**-1\nL = (a+b)**-1\n# R = a**-1 + b**-1\nR = a**-1 + b**-1\n# print(L-R)\nprint(L-R)"
  },
  {
    "example_id": 184,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "remainder = 729 % 15\nprint(remainder)"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = 14\nb = 16\n\nif a*b == 288:\n    if a > b:\n        print(\"The greater of the two integers is\", a)\n    else:\n        print(\"The greater of the two integers is\", b)\nelse:\n    print(\"The product of two consecutive positive even integers is not 288\")"
  },
  {
    "example_id": 186,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "import numpy as np\n\ndef gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef gcf_increase(a, b, k):\n    return gcf(a, b) + k\n\nprint(gcf_increase(6432, 132, 11))"
  },
  {
    "example_id": 187,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "226.0"
    ],
    "annotated_answers": [
      "226.0"
    ],
    "solution": "def distinct_factors(n):\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return list(set(factors))\n\ndef sum_distinct_factors(n):\n    factors = distinct_factors(n)\n    sum = 0\n    for factor in factors:\n        sum += factor\n    return sum\n\ndef sum_distinct_positive_two_digit_factors(n):\n    factors = [x for x in distinct_factors(n) if x > 9 and x < 100]\n    sum = 0\n    for factor in factors:\n        sum += factor\n    return sum\n\nsum = sum_distinct_positive_two_digit_factors(144)\nprint(sum)"
  },
  {
    "example_id": 188,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.75",
      "0.5",
      "0.75",
      "0.5",
      "0.75"
    ],
    "annotated_answers": [
      "0.8"
    ],
    "solution": "def decimal(n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 0.5\n    else:\n        return 0.75\n\nprint(decimal(1))\nprint(decimal(2))\nprint(decimal(3))\nprint(decimal(4))\nprint(decimal(5))"
  },
  {
    "example_id": 189,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def S(n):\n    return sum(2**k for k in range(n))\n\ndef GCD(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef gcd_consecutive(n):\n    return GCD(S(n), S(n+1))\n\nprint(max(gcd_consecutive(n) for n in range(1, 1000)))"
  },
  {
    "example_id": 190,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "d = 2\nprint(d)"
  },
  {
    "example_id": 191,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "169.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "M = 13 * 10 + 13\nN = 13 * 1 + 13\nprint(M + N)"
  },
  {
    "example_id": 192,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27027.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 1/37\nb = a - int(a)\nb = b * 10 ** 6\nb = int(b)\nprint(b)"
  },
  {
    "example_id": 193,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 54\nb = 6\nprint(a % b)"
  },
  {
    "example_id": 194,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0",
      "101.0",
      "10.0",
      "17.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# Base 3\nbase_3 = '101'\nbase_3_list = list(base_3)\nbase_3_list.reverse()\nbase_3_rev = ''.join(base_3_list)\nprint(base_3_rev)\n\n# Base 4\nbase_4 = '101'\nbase_4_list = list(base_4)\nbase_4_list.reverse()\nbase_4_rev = ''.join(base_4_list)\nprint(base_4_rev)\n\n# Base 10\nbase_10 = int(base_3_rev, 3)\nprint(base_10)\n\n# Base 10\nbase_10 = int(base_4_rev, 4)\nprint(base_10)"
  },
  {
    "example_id": 195,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.366211290656207"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "def is_terminating_decimal(n):\n    s = str(1/n)\n    return s.count('.') == 1\n\ndef get_prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_prime_factors_product(n):\n    factors = get_prime_factors(n)\n    return np.prod(factors)\n\ndef get_probability(n):\n    return 1 / get_prime_factors_product(n)\n\ndef get_probability_sum(n):\n    return sum(get_probability(i) for i in range(1, n))\n\na = get_probability_sum(2010)\nb = get_probability_sum(2011)\nprint(a+b)"
  },
  {
    "example_id": 196,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor digit in str(59138):\n    sum += int(digit)\nprint(sum)"
  },
  {
    "example_id": 197,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.04"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "# declare variables\na, b = symbols('a b', integer=True)\n\n# find new side lengths\na_new = a * 1.3\nb_new = b * 0.8\n\n# find area\narea_new = a_new * b_new\n\n# print the smallest possible area\nprint(area_new)"
  },
  {
    "example_id": 198,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "2220.0"
    ],
    "solution": "# Define the variables\nN = 30\nnum_2s = 0\nnum_0s = 0\n\n# Initialize the variables\nnum_2s = 0\nnum_0s = 0\n\n# Find the number of 2s and 0s in N\nwhile N > 0:\n    if N % 2 == 0:\n        num_2s += 1\n        N = N // 2\n    else:\n        num_0s += 1\n        N = N // 5\n\n# Determine the least positive integer multiple of 30\n# that can be written with only the digits 0 and 2\nleast_integer = 30 * num_2s\nprint(least_integer)"
  },
  {
    "example_id": 199,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "10.0"
    ],
    "annotated_answers": [
      "119.0"
    ],
    "solution": "multiples = [x for x in range(100) if x % 7 == 0]\nsum_of_digits = [sum(map(int, str(x))) for x in multiples]\nsum_of_multiples = [x for x in sum_of_digits if x == 10]\nprint(sum_of_multiples)"
  },
  {
    "example_id": 200,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(len(str(54317/80000).split('.')[1]))"
  },
  {
    "example_id": 201,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "for i in range(10, 100):\n    digits = [int(x) for x in str(i)]\n    if i == sum(digits) * 2:\n        print(i)"
  },
  {
    "example_id": 202,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Find modular multiplicative inverse of -11213141\na = -11213141\nb = 18\na_inv = pow(a, -1, b)\nprint(a_inv)"
  },
  {
    "example_id": 203,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def units_digit(n):\n    return n % 10\n\nn = 17**13 - 17\nprint(units_digit(n))"
  },
  {
    "example_id": 204,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "repetend = 19**(18-1)\nremainder = (1/19) % 1\nremainder *= 19**18\nremainder %= 10\nprint(remainder)"
  },
  {
    "example_id": 205,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "for i in range(100):\n    if (123456%101) == i:\n        print(i)"
  },
  {
    "example_id": 206,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Find the product of the first 100 prime numbers\n\n# Initialize the product to 1\nproduct = 1\n\n# Initialize the counter for the number of prime numbers\ncount = 0\n\n# Loop through all the prime numbers\nfor num in range(2, 200, 2):\n    is_prime = True\n    for prime in range(2, int(num ** 0.5) + 1, 2):\n        if num % prime == 0:\n            is_prime = False\n            break\n    if is_prime:\n        count += 1\n        product *= num\n\n# Print the units digit of the product\nprint(product % 10)"
  },
  {
    "example_id": 207,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 17 * 18\nprint(n % 4)"
  },
  {
    "example_id": 208,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2240.0"
    ],
    "annotated_answers": [
      "319.0"
    ],
    "solution": "def convert_base_7_to_base_10(n):\n    result = 0\n    for i, digit in enumerate(reversed(str(n))):\n        result += int(digit) * 7**i\n    return result\n\nprint(convert_base_7_to_base_10(634_7))"
  },
  {
    "example_id": 209,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "sum = 0\nfor n in range(1, 21):\n    if n**2 in [24, 48, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 312, 336, 360]:\n        sum += n\nprint(sum)"
  },
  {
    "example_id": 210,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def number_of_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n\nprint(number_of_divisors(196))"
  },
  {
    "example_id": 211,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 16\nb = 21\nn = 0\nwhile n < 37:\n    if (a - b) % 37 == n:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 212,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50000.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "A = 500\ndistinct_prime_divisors = []\nfor i in range(1, int(A)+1):\n    if i % 2 == 0 or i % 5 == 0:\n        continue\n    divisors = []\n    for j in range(1, int(i)+1):\n        if i % j == 0:\n            divisors.append(j)\n    for prime in divisors:\n        if prime not in distinct_prime_divisors:\n            distinct_prime_divisors.append(prime)\nsum_distinct_prime_divisors = sum(distinct_prime_divisors)\nprint(sum_distinct_prime_divisors)"
  },
  {
    "example_id": 213,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "123.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "def divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return len(divisors)\n\ndivisors = divisors(30**4)\nprint(divisors - 2)"
  },
  {
    "example_id": 214,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "3.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for i in range(1, 20):\n    factors = [1]\n    for j in range(2, int(i ** 0.5) + 1):\n        if i % j == 0:\n            factors.append(j)\n            factors.append(i // j)\n    print(i, len(factors))"
  },
  {
    "example_id": 215,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# 64x \u2261 2 (mod 66)\n# 64x - 2 = 66y\n# x = 66y + 2\n\n# 0 < x <= 100\n# 0 < 66y + 2 <= 100\n# 0 < 66y <= 98\n# 0 < y <= 98/66\n# y = 15\n\n# 0 < x <= 100\n# 0 < 66y + 2 <= 100\n# 0 < 66y <= 98\n# 0 < y <= 98/66\n# y = 15\n# x = 66y + 2\n# x = 15 + 2\n# x = 17\n\n# 1 solution\nprint(1)"
  },
  {
    "example_id": 216,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 2^4\nA = 0\nB = 0\nfor i in range(0, n):\n    if gcd(i, n) == 1:\n        A += i\n    else:\n        B += i\nprint(A - B)"
  },
  {
    "example_id": 217,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "259669.0"
    ],
    "annotated_answers": [
      "2145.0"
    ],
    "solution": "pirate_debt = 2345 * 5 + 41324 * 6\nprint(pirate_debt)"
  },
  {
    "example_id": 218,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1222.0",
      "10.0",
      "1222.0",
      "3.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "age = 1222\nbases = {10, 3}\nfor base in bases:\n    print(age, base)"
  },
  {
    "example_id": 219,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "num_divisors = 0\nfor i in range(1, 7):\n    if 1452 % i == 0:\n        num_divisors += 1\nprint(num_divisors)"
  },
  {
    "example_id": 220,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = (4**5) * (5**13)\nprint(len(str(n)))"
  },
  {
    "example_id": 221,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "expression = 2005**2 + 2005**0 + 2005**0 + 2005**5\nprint(expression % 100)"
  },
  {
    "example_id": 222,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "465.0"
    ],
    "annotated_answers": [
      "248.0"
    ],
    "solution": "N = 120\nL = 3720\nG = 8\n\n# Find the other number\nother_number = (L*N)//(N*G)\nprint(other_number)"
  },
  {
    "example_id": 223,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "62.0",
      "1.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "def base_converter(num, old_base, new_base):\n    \"\"\"\n    Convert a number from one base to another.\n    \"\"\"\n    if num == 0:\n        return '0'\n    digits = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    res = ''\n    while num > 0:\n        res = digits[num % new_base] + res\n        num //= new_base\n    return res\n\ndef convert_base(num, old_base, new_base):\n    \"\"\"\n    Convert a number from one base to another.\n    \"\"\"\n    if old_base == 10:\n        return str(num)\n    if new_base == 10:\n        return str(num)\n    if old_base < new_base:\n        return str(num)\n    if old_base == new_base:\n        return str(num)\n    if old_base > new_base:\n        return str(num)\n    if new_base > old_base:\n        return str(num)\n\ndef solution(num, old_base, new_base):\n    \"\"\"\n    Convert a number from one base to another.\n    \"\"\"\n    return base_converter(num, old_base, new_base)\n\ndef main():\n    \"\"\"\n    Run sample convert_base functions.\n    \"\"\"\n    print('Convert 100 to base 62:')\n    print(solution(100, 64, 62))\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 224,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "n = 2*47 + 15\nprint(n % 47)"
  },
  {
    "example_id": 225,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "6152.0"
    ],
    "solution": "def units_digit(n):\n    return n % 10\n\n\ndef number_of_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\nn = 1418\nd = 8\nsum_of_all_values = 0\nfor i in range(0, 10):\n    n_base_10 = i * 10 ** (d - 1) + 14\n    sum_of_all_values += number_of_divisors(n_base_10)\nprint(sum_of_all_values)"
  },
  {
    "example_id": 226,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Define variables\na = 4\nb = 5\n\n# Calculate the least possible remainder\nremainder = (a**2 + b**2) % 3\n\nprint(remainder)"
  },
  {
    "example_id": 227,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36792009.0"
    ],
    "annotated_answers": [
      "21022.0"
    ],
    "solution": "a = 10508\n\na_plus_1 = a + 1\na_minus_5 = a - 5\n\n# LCM(a+1, a-5) = a^2 - 4a + 1\n\na_squared_minus_4a_plus_1 = (a_plus_1 * a_minus_5) // gcd(a_plus_1, a_minus_5)\nprint(a_squared_minus_4a_plus_1)"
  },
  {
    "example_id": 228,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "809.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "# Define the prime numbers\np1 = 12\np2 = 13\np3 = 14\np4 = 15\np5 = 16\np6 = 17\np7 = 19\np8 = 9\n\n# Define the two-digit prime numbers\ntwodigit1 = p1 * p2\ntwodigit2 = p3 * p4\ntwodigit3 = p5 * p6\ntwodigit4 = p7 * p8\n\n# Sum of the two-digit prime numbers\nsum = twodigit1 + twodigit2 + twodigit3 + twodigit4\n\nprint(sum)"
  },
  {
    "example_id": 229,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "b = 3\nP = 2\nP_b = P * b\nprint(P_b)"
  },
  {
    "example_id": 230,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "14.8"
    ],
    "solution": "ages = [13, 14, 15, 16, 17, 18, 19]\nages_product = 705600\nages_mean = sum(ages) / len(ages)\nprint(ages_mean)"
  },
  {
    "example_id": 231,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Find the greatest common divisor of 4 consecutive odd numbers\n# using the gcd function\n\n# Define the variables\nn1 = 1\nn2 = 3\nn3 = 5\nn4 = 7\n\n# Calculate the sum of the 4 consecutive numbers\nsum = n1 + n2 + n3 + n4\n\n# Find the greatest common divisor of the sum\ngcd_sum = gcd(sum)\n\n# Print the result\nprint(gcd_sum)"
  },
  {
    "example_id": 232,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def find_primes(n):\n    for i in range(2, n):\n        if i % 2!= 0 and i % 3!= 0 and i % 5!= 0 and i % 7!= 0 and i % 11!= 0 and i % 13!= 0 and i % 17!= 0 and i % 19!= 0 and i % 23!= 0 and i % 29!= 0:\n            yield i\n\ndef is_solvable(p):\n    x = 1\n    while x**2 % p!= 1:\n        x += 1\n    return x\n\nsum = 0\nfor p in find_primes(10000000):\n    if is_solvable(p) == None:\n        sum += p\n\nprint(sum)"
  },
  {
    "example_id": 233,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "972.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "a = 62_7\nb = 34_5\nprint(a + b)"
  },
  {
    "example_id": 234,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef greatest_common_divisor(n, k):\n    return max(gcd(n + 7, 2 * n + 1), gcd(n + 7, 2 * n + 1))\n\nprint(greatest_common_divisor(10, 20))"
  },
  {
    "example_id": 235,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 943\na = 617*n\nb = 943*n\ng = gcd(a, b)\nx = (b//g)//n\nprint(x)"
  },
  {
    "example_id": 236,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "a = 6**210**2\nb = 15**4\nprint(gcd(a, b))"
  },
  {
    "example_id": 237,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12012.0"
    ],
    "annotated_answers": [
      "100100.0"
    ],
    "solution": "b = 2\nnum = 11011\nresult = (num * (b - 1)) + 1001\nprint(result)"
  },
  {
    "example_id": 238,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "units_digit = 7**7 % 10\nprint(units_digit)"
  },
  {
    "example_id": 239,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7668.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define variables\nM = 697\nW = 12\nN = 0\n\n# Create calendar\ncalendar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n# Iterate through calendar\nfor day in calendar:\n    if day == 1:\n        N += 1\n    else:\n        N += M\n\n# Print result\nprint(N)"
  },
  {
    "example_id": 240,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for t in range(1, 23):\n    if (t+2) % t == 0:\n        print(t)\n        break"
  },
  {
    "example_id": 241,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4435.0"
    ],
    "solution": "print(123 % 5)"
  },
  {
    "example_id": 242,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "7.0",
      "38.0",
      "194.0",
      "1.0",
      "10.0",
      "83.0",
      "138.5"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "# base 5\ndigits = [1, 2, 3, 4]\nbase5 = 0\nfor digit in digits:\n    base5 = base5 * 5 + digit\n    print(base5)\n\n# base 8\ndigits = [1, 2, 3]\nbase8 = 0\nfor digit in digits:\n    base8 = base8 * 8 + digit\n    print(base8)\n\n# average\naverage = (base5 + base8) / 2\nprint(average)"
  },
  {
    "example_id": 243,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# \nprint(71 % 3)"
  },
  {
    "example_id": 244,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 12345\nfor i in range(6):\n    if n % (i+1) == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 245,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "-12.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def units_digit(n):\n    return n % 10\n\ndef number_of_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef divisors(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nbase_3 = 87\nbase_2 = 1000\n\ndigits_base_3 = len(str(base_3))\ndigits_base_2 = len(str(base_2))\n\nbase_3_units_digit = units_digit(base_3)\nbase_2_units_digit = units_digit(base_2)\n\nbase_3_divisors = divisors(base_3)\nbase_2_divisors = divisors(base_2)\n\nbase_3_divisor_count = number_of_divisors(base_3)\nbase_2_divisor_count = number_of_divisors(base_2)\n\nbase_3_gcd = gcd(base_3, base_2)\nbase_2_gcd = gcd(base_2, base_3)\n\nprint(\"base_3 has {} more digits when expressed in base 2 than when expressed in base 3\".format(digits_base_2 - digits_base_3))\nprint(\"base_3 has {} more divisors than when expressed in base 2\".format(base_3_divisor_count - base_2_divisor_count))\nprint(\"base_3 has a gcd of {} with base_2\".format(base_3_gcd))\nprint(\"base_2 has a gcd of {} with base_3\".format(base_2_gcd))"
  },
  {
    "example_id": 246,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.100010101001001",
      "16"
    ],
    "annotated_answers": [
      "3255.0"
    ],
    "solution": "# base 10 equivalent of 101010_{5}\nbin_to_dec = int(bin(101010)[2:], 10)\nprint(bin_to_dec)"
  },
  {
    "example_id": 247,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "180.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Jan's number\nn = 12 * 15\nprint(n)\n\n\n# Jan's number\nn = 12 * 15\nprint(n)"
  },
  {
    "example_id": 248,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a_list = list(range(1, 24))\na_list = [a for a in a_list if a%24==0]\nprint(len(a_list))"
  },
  {
    "example_id": 249,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 0.0009765625\nprint(len(str(n)))"
  },
  {
    "example_id": 250,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "666.0",
      "3.0",
      "1.0",
      "3.0",
      "666.0",
      "3.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Define A and B\nA, B = symbols('A B')\n\n# Define the equation\neq = A**3 + B**3 - 666\n\n# Solve for A and B\nsol = solve(eq)\n\n# Print the solutions\nprint(sol)"
  },
  {
    "example_id": 251,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 4\ny = 7\nremainder = (x + 1)**2 * (y + 5)**3 % 19\nprint(remainder)"
  },
  {
    "example_id": 252,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "28.0",
      "28.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "import datetime\n\nfeb2008 = datetime.datetime(2008, 2, 1)\nfeb2008.weekday()\n# 4\n\nlast_friday = feb2008 - datetime.timedelta(days=feb2008.weekday())\nprint(last_friday.month)\n# 2\nprint(last_friday.day)\n# 29\n\nif last_friday.year % 4 == 0:\n    print(last_friday.day)\n    # 28"
  },
  {
    "example_id": 253,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor i in range(15, 86):\n    if i % 20 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 254,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "133709181.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "# Define the range of possible numbers\nmax_n = 10**8\n\n# Find the largest base 2 number in the range\nlargest_number = 0\nfor n in range(max_n):\n    if n % 2 == 0:\n        continue\n    number = n\n    while number > 0:\n        if number % 2!= 0:\n            break\n        number //= 2\n    if number > largest_number:\n        largest_number = number\n\n# Convert the number to base 10\nbase_10_number = 0\nwhile largest_number > 0:\n    base_10_number = base_10_number * 2 + largest_number % 2\n    largest_number //= 2\n\nprint(base_10_number)"
  },
  {
    "example_id": 255,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4145.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# Solve for a and b\na = 1221\nb = 2924\nprint(a + b)"
  },
  {
    "example_id": 256,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "n = 80325\nwhile n > 1:\n    n //= 5\nprint(n)"
  },
  {
    "example_id": 257,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.51314800901578",
      "7.51314800901578"
    ],
    "annotated_answers": [
      "1030.0"
    ],
    "solution": "# \na, b = symbols('a b')\neq = a/b - 0.1331\nsol = solve(eq, b)\nb_val = sol[0]\na_val = a + b_val\nprint(a_val, b_val)"
  },
  {
    "example_id": 258,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "27.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = [2, 3, 5, 7, 9]\ndivisible_by_3 = []\nfor i in N:\n    for j in N:\n        if i!= j:\n            if i % 3 == 0 and j % 3 == 0:\n                divisible_by_3.append(i*j)\nprint(divisible_by_3)"
  },
  {
    "example_id": 259,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1683.0",
      "3.0",
      "1200.0",
      "4.0",
      "950.0",
      "5.0",
      "60.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "number_of_divisible_by_3 = sum([i for i in range(1, 100) if i % 3 == 0])\nnumber_of_divisible_by_4 = sum([i for i in range(1, 100) if i % 4 == 0])\nnumber_of_divisible_by_5 = sum([i for i in range(1, 100) if i % 5 == 0])\nnumber_of_divisible_by_3_and_4_and_5 = sum([i for i in range(1, 100) if i % 3 == 0 and i % 4 == 0 and i % 5 == 0])\nprint(f\"{number_of_divisible_by_3} numbers are divisible by 3\")\nprint(f\"{number_of_divisible_by_4} numbers are divisible by 4\")\nprint(f\"{number_of_divisible_by_5} numbers are divisible by 5\")\nprint(f\"{number_of_divisible_by_3_and_4_and_5} numbers are divisible by 3, 4, and 5\")"
  },
  {
    "example_id": 260,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "i = 1\nwhile True:\n    if pow(3, i, 7) == 5:\n        break\n    i += 1\n\nj = 1\nwhile True:\n    if pow(5, j, 7) == 3:\n        break\n    j += 1\n\nprint((i*j) % 6)"
  },
  {
    "example_id": 261,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 5 ** 2005\ntens_digit = n % 100\nprint(tens_digit)"
  },
  {
    "example_id": 262,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "912673.0",
      "3.0",
      "1.0",
      "3.0",
      "912673.0",
      "3.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Solve the equation\nAB = 912673\nA = symbols('A')\nB = symbols('B')\nexpr = (A**3 + B**3) - 912673\nsol = solve(expr, [A, B])\nprint(sol)"
  },
  {
    "example_id": 263,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4096.0"
    ],
    "solution": "for i in range(1, 1000):\n    if i**3 == i**4:\n        print(i)\n        break"
  },
  {
    "example_id": 264,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 11):\n    sum += i\nremainder = sum % 9\nprint(remainder)"
  },
  {
    "example_id": 265,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "6.0",
      "98.0",
      "105.0",
      "1.0",
      "7.0",
      "97.0",
      "105.0",
      "1.0",
      "8.0"
    ],
    "annotated_answers": [
      "235.0"
    ],
    "solution": "for i in range(1, 100):\n    if i % 5 == 0:\n        continue\n    for j in range(i + 1, 100):\n        if j % 5 == 0:\n            continue\n        for k in range(j + 1, 100):\n            if k % 5 == 0:\n                continue\n            if i + j + k == 105:\n                print(i, j, k, i + j + k)\n                break"
  },
  {
    "example_id": 266,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Determine the remainder of 194 (mod 11).\nprint(194 % 11)"
  },
  {
    "example_id": 267,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# count the number of perfect squares\ncount = 0\nfor i in range(1, 10):\n    if i**2 in [2, 4, 6, 8, 10, 12]:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 268,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0",
      "144.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = 144\ny = 144\nprint(x, y)"
  },
  {
    "example_id": 269,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "91.0",
      "1.0",
      "10.0",
      "91.0",
      "910.0",
      "10.0",
      "91.0",
      "101.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "# Find the two numbers\na = 10\nb = 91\n\n# Find their GCD\ngcd_ab = gcd(a, b)\n\n# Find their LCM\nlcm_ab = int(a * b / gcd_ab)\n\n# Find the sum of the two numbers\nsum_ab = a + b\n\n# Print the results\nprint(f\"The GCD of {a} and {b} is {gcd_ab}.\")\nprint(f\"The LCM of {a} and {b} is {lcm_ab}.\")\nprint(f\"The sum of {a} and {b} is {sum_ab}.\")"
  },
  {
    "example_id": 270,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Let x be the units digit and y be the hundreds digit\nx, y = symbols('x y')\n\n# Equation to solve\neq = (100*x + 10*y + 4) % 11 == 0\n\n# Solve for x and y\nsol = solve(eq, [x, y])\n\n# Print the number of solutions\nprint(len(sol))"
  },
  {
    "example_id": 271,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def lcm(a, b):\n    return a*b // gcd(a, b)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\ndef solve():\n    for m in range(1, 50):\n        for n in range(1, 50):\n            if gcd(m, n) == 2 and lcm(m, n) == 108:\n                yield (m, n)\n\nprint(sum(1 for _ in solve()))"
  },
  {
    "example_id": 272,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "N = 13*7 + 17*3\nprint(N%36)"
  },
  {
    "example_id": 273,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "n = 196\nn_sqrt = int(np.sqrt(n))\nfactors = []\nfor i in range(1, n_sqrt+1):\n    if n % i == 0:\n        factors.append(i)\nfor f in factors:\n    if f in factors:\n        continue\n    if n // f in factors:\n        continue\n    factors.append(f)\n    factors.append(n // f)\nfactors.sort()\nsum_of_factors = 0\nfor f in factors:\n    sum_of_factors += f\nprint(sum_of_factors)"
  },
  {
    "example_id": 274,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = (24**50 - 15**50) % 13\nprint(remainder)"
  },
  {
    "example_id": 275,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "k = 0\nwhile True:\n    for n in range(1, 10**6):\n        if gcd(6*n+k, 6*n+3)!= 1 or gcd(6*n+k, 6*n+2)!= 1 or gcd(6*n+k, 6*n+1)!= 1:\n            k += 1\n            break\n    else:\n        break\nprint(k)"
  },
  {
    "example_id": 276,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = 1529\nmod = 6\nprint(n%mod)"
  },
  {
    "example_id": 277,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1728.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "x = 12\nfactors = []\nfor i in range(2, x+1):\n    if x % i == 0:\n        factors.append(i)\nproduct = 1\nfor f in factors:\n    product *= f\nprint(product)"
  },
  {
    "example_id": 278,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45591.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "# Find the sum of all possible values of n\n# such that both of the following are true:\n# 171 \u2261 80 (mod n) and 468 \u2261 13 (mod n).\n\n# Find all solutions to the equation\n# 171 \u2261 80 (mod n)\n# 468 \u2261 13 (mod n)\n\n# 171 - 80 = 91\n# 468 - 13 = 455\n\n# Solve the system of congruences:\n# 91 \u2261 0 (mod n)\n# 455 \u2261 0 (mod n)\n\n# Solve for n:\n# n \u2261 0 (mod 91)\n# n \u2261 0 (mod 455)\n\n# n \u2261 0 (mod 91) and n \u2261 0 (mod 455)\n# implies n \u2261 0 (mod lcm(91, 455))\n\n# lcm(91, 455) = 45591\n# n \u2261 0 (mod 45591)\n\n# n = 45591\n# 171 \u2261 80 (mod n)\n# 468 \u2261 13 (mod n)\n\n# Therefore, the sum of all possible values of n\n# such that both of the following are true:\n# 171 \u2261 80 (mod n) and 468 \u2261 13 (mod n) is:\n\n# 45591\n\nprint(45591)"
  },
  {
    "example_id": 279,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "103032.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "num = 1230\nbase = 4\n\ndef convert(num, base):\n    digits = '0123456789ABCDEF'\n    result = []\n    while num > 0:\n        result.append(digits[num % base])\n        num //= base\n    return ''.join(reversed(result))\n\nprint(convert(num, base))"
  },
  {
    "example_id": 280,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "990.0"
    ],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "def largest_integer_less_than_1000_divisible_by_11():\n    largest = 999\n    while largest % 11!= 0:\n        largest -= 1\n    return largest\n\nprint(largest_integer_less_than_1000_divisible_by_11())"
  },
  {
    "example_id": 281,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "112.0"
    ],
    "annotated_answers": [
      "556.0"
    ],
    "solution": "a = 12\nb = 100\nprint(a+b)"
  },
  {
    "example_id": 282,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Number of pages in the textbook\nn = 1000\n\n# Number of pages with digit sum of 4\ncount = 0\n\n# Iterate through each page number\nfor i in range(1, n+1):\n    # Get the digits of the page number\n    digits = [int(digit) for digit in str(i)]\n\n    # Check if the sum of the digits is 4\n    if sum(digits) == 4:\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 283,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# UPC code\ncode = '9-78094-11006-'\n\n\n# Extract the number at the 12th position\nx = int(code[-1])\n\n\n# Sum the digits in the odd positions\nodd_sum = sum([int(digit) for digit in code if int(digit) % 2 == 1])\n\n\n# Triple the sum and sum the digits in the even positions\neven_sum = sum([int(digit) for digit in code if int(digit) % 2 == 0])\n\n\n# Calculate the n\nn = odd_sum * 3 + even_sum\n\n\n# Check if n is divisible by 10\nif n % 10 == 0:\n    print(x)\nelse:\n    print('Invalid UPC code')"
  },
  {
    "example_id": 284,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2 ** 2010\nprint(x % 10)"
  },
  {
    "example_id": 285,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "for i in range(1, 75):\n    if i % 2 == 1 and i % 3 == 1 and i % 4 == 1 and i % 6 == 1 and i % 7 == 0:\n        print(i)"
  },
  {
    "example_id": 286,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 1\nwhile True:\n    count = 0\n    for i in range(1, n+1):\n        if math.gcd(i, n) == 1:\n            count += 1\n            if count == n/2:\n                break\n    else:\n        n += 1\n        continue\n    break\nprint(n)"
  },
  {
    "example_id": 287,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = pow(2, 16, 17)\nprint((pow(2, n, 17))**2 - 2 % 17)"
  },
  {
    "example_id": 288,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 355\nprint(n % 10)"
  },
  {
    "example_id": 289,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 120301232\nd = 8\nprint(n % d)\n\n\nprint(n // d)"
  },
  {
    "example_id": 290,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "668.0"
    ],
    "solution": "n = 997\nx = 1\nx = x % n\nprint(x)"
  },
  {
    "example_id": 291,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5304.0"
    ],
    "annotated_answers": [
      "528.0"
    ],
    "solution": "print(6_8 * 7_8)"
  },
  {
    "example_id": 292,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "10.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "for i in range(1, 1000):\n    product = (i * (i + 1) * (i + 2) * (i + 3))\n    if product % 10 == 4:\n        print(i, (i + 1), (i + 2), (i + 3))\n        print(sum(range(i, i + 4)))\n        break"
  },
  {
    "example_id": 293,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "divisors = [i for i in range(1, 253) if 252 % i == 0]\nprint(len([i for i in divisors if i % 2 == 0]))"
  },
  {
    "example_id": 294,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2406.0"
    ],
    "annotated_answers": [
      "801.0"
    ],
    "solution": "for i in range(600, 900, 3):\n    if i % 89 == 0:\n        sum = i + (i+1) + (i+2)\n        print(sum)"
  },
  {
    "example_id": 295,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = (40 * (40+3)) // (40 + 3)\nprint(x)"
  },
  {
    "example_id": 296,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9000.0",
      "9000.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "base3_digits = 0\nbase6_digits = 0\nfor i in range(1000, 10000):\n    base3_digits += str(i)[::-1].isdigit()\n    base6_digits += str(i)[::-1].isdigit()\nprint(base3_digits)\nprint(base6_digits)"
  },
  {
    "example_id": 297,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "def f(x):\n    return 67/(2*x-23)\n\ndef solve_x(f, x):\n    return f(x) == int(f(x))\n\ndef get_solutions(f):\n    return [x for x in range(100) if solve_x(f, x)]\n\nsolutions = get_solutions(f)\nprint(sum(solutions))"
  },
  {
    "example_id": 298,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "225.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "max_square = 225\nfor i in range(max_square, 0, -1):\n    if i % 9 == 0 and i**0.5 == int(i**0.5):\n        print(i)\n        break"
  },
  {
    "example_id": 299,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 2010):\n    sum += 3**i\nprint(sum % 10)"
  },
  {
    "example_id": 300,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef get_remainder(n, divisor):\n    return factorial(n) % divisor\n\nremainder = get_remainder(7, 23)\nprint(remainder)"
  },
  {
    "example_id": 301,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.950075014165765",
      "28"
    ],
    "annotated_answers": [
      "1241.0"
    ],
    "solution": "squares = [i**2 for i in range(1, 1000)]\ncubes = [i**3 for i in range(1, 1000)]\n\nsum = 0\nfor i in squares:\n    sum += i**3\nfor i in cubes:\n    sum += i**3\n\nprint(sum)"
  },
  {
    "example_id": 302,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "534.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "import math\n\na = 2**306 * 3**340\nn = math.ceil(math.log(a) / math.log(3))\nprint(n)"
  },
  {
    "example_id": 303,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "count = 0\nfor i in range(1, 4000):\n    if i % 100 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 304,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "# We know that $ab \\equiv 17\\pmod{20}$\n# If we multiply by 2, we get $2ab \\equiv 34 \\pmod{20}$\n# If we subtract 17, we get $2ab - 17 \\equiv 17 \\pmod{20}$\n# If we add 10, we get $2ab - 17 + 10 \\equiv 34 + 10 \\equiv 44 \\pmod{20}$\n# Therefore, the remainder is 44\nprint(44)"
  },
  {
    "example_id": 305,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve(n):\n    while is_prime(7 + (30 * n)):\n        n += 1\n    return n\n\nprint(solve(1))"
  },
  {
    "example_id": 306,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16592.0"
    ],
    "annotated_answers": [
      "16592.0"
    ],
    "solution": "import math\n\ndef factors(n):\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            yield i\n            if n // i!= i:\n                yield n // i\n\nsum = 0\nfor n in range(1, 10000):\n    if len(list(factors(n+2005))) == 21:\n        sum += n\nprint(sum)"
  },
  {
    "example_id": 307,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "sum_of_units_digits = 0\nfor i in range(0, 50, 3):\n    sum_of_units_digits += i % 10\nprint(sum_of_units_digits)"
  },
  {
    "example_id": 308,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "E = 5"
  },
  {
    "example_id": 309,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "109.0"
    ],
    "annotated_answers": [
      "109.0"
    ],
    "solution": "walter = 476 + 32\nagnes = 104 + 16\nholly = 281 + 80\nlizard = 94 + 16\n\ntotal_beads = walter + agnes + holly\n\ngreen_beads_left = total_beads % lizard\n\nprint(green_beads_left)"
  },
  {
    "example_id": 310,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nodd_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\nintersection = set(prime_numbers).intersection(odd_numbers)\nprint(len(intersection))"
  },
  {
    "example_id": 311,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 527\nbase = 4\nsum = 0\n\nwhile n > 0:\n    sum += n % base\n    n //= base\n\nprint(sum)"
  },
  {
    "example_id": 312,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.0",
      "91.0"
    ],
    "annotated_answers": [
      "122.0"
    ],
    "solution": "for i in range(1,100):\n    if (i % 4 == 3) and (i % 3 == 1) and (i % 5 == 1):\n        print(i)"
  },
  {
    "example_id": 313,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000000006.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "x = 2 * 3 + 1000000000\nprint(x)"
  },
  {
    "example_id": 314,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 2\nprint(n**2)"
  },
  {
    "example_id": 315,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 7\nprint(n)"
  },
  {
    "example_id": 316,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_increasing_sequences_of_three_distinct_primes(n):\n    count = 0\n    for p1 in range(2, n):\n        if is_prime(p1):\n            for p2 in range(p1 + 1, n):\n                if is_prime(p2):\n                    for p3 in range(p2 + 1, n):\n                        if is_prime(p3):\n                            if p1 + p2 + p3 == 20:\n                                count += 1\n    return count\n\nprint(count_increasing_sequences_of_three_distinct_primes(20))"
  },
  {
    "example_id": 317,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0",
      "17.0",
      "31.0",
      "37.0",
      "71.0",
      "73.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "numbers = [13, 17, 31, 33, 37, 71, 73, 77, 93]\nprime_numbers = []\nfor number in numbers:\n    if is_prime(number):\n        prime_numbers.append(number)\nprint(prime_numbers)"
  },
  {
    "example_id": 318,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = '11001010100101011'\nb = '110100011000100'\n\nn = int(a, 10) + int(b, 10)\nm = int(bin(n)[2:], 2)\n\nprint(n-m)"
  },
  {
    "example_id": 319,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def gcf(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcf(180, 168))"
  },
  {
    "example_id": 320,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "sum = np.sum(list(range(2, 10000001)))\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nfor prime in primes:\n    if sum % prime == 0:\n        print(prime)\n        break"
  },
  {
    "example_id": 321,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "71.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "Jan = np.arange(127, 13, -3)\nJen = np.arange(7, 139, 4)\nall_steps = np.concatenate([Jan, Jen])\nprint(len(all_steps))"
  },
  {
    "example_id": 322,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "365.0"
    ],
    "solution": "n = 365 // 28\nprint(n)"
  },
  {
    "example_id": 323,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "product = 2**3 * 3**1 * 4**3 * 5**8\nprint(len(str(product)))"
  },
  {
    "example_id": 324,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5559060566555523.0"
    ],
    "annotated_answers": [
      "981.0"
    ],
    "solution": "# convert to base 3\nnum = 100\nbase = 3\n\n# find the digit\ndigit = num % base\n\n# convert to base 10\nnum = num // base\n\n# add to result\nresult = digit * base**num\nprint(result)"
  },
  {
    "example_id": 325,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1560.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 1560\nwhile n % 1560!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 326,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "sum = 32 + 23\nprint(sum)"
  },
  {
    "example_id": 327,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import itertools\n\ndef get_possible_amounts(purchase_amount, change_amount):\n    if purchase_amount == change_amount:\n        return 0\n    if purchase_amount < change_amount:\n        return 0\n    if purchase_amount > change_amount:\n        return 0\n\n    amounts = []\n    for i in range(1, change_amount + 1):\n        for permutation in itertools.permutations(range(1, purchase_amount + 1)):\n            permutation_sum = sum(permutation)\n            if permutation_sum == i:\n                amounts.append(i)\n\n    return len(amounts)\n\n\npurchase_amount = 10\nchange_amount = 10\n\nprint(get_possible_amounts(purchase_amount, change_amount))"
  },
  {
    "example_id": 328,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "138.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "base = 10\nb = 121\nc = 71\n\nb_in_c = str(b)\nc_in_b = str(c)\n\nb_in_c = b_in_c[::-1]\nc_in_b = c_in_b[::-1]\n\nb_in_c = int(b_in_c, base=base)\nc_in_b = int(c_in_b, base=base)\n\nprint(b_in_c + c_in_b)"
  },
  {
    "example_id": 329,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "b = 5*25\nprint(b)"
  },
  {
    "example_id": 330,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nsum = 0\nfor i in range(1, 51):\n    sum += factorial(i)\n\nprint(sum % 10)"
  },
  {
    "example_id": 331,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "185.0"
    ],
    "annotated_answers": [
      "215.0"
    ],
    "solution": "stamps = 200\npages = 30\nlast_page_stamps = 5\n\ntotal_stamps = stamps - last_page_stamps\ntotal_pages = total_stamps // pages\n\nprint(total_pages * pages + last_page_stamps)"
  },
  {
    "example_id": 332,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "x = 28*7 + 6\nprint(x)"
  },
  {
    "example_id": 333,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "4.0",
      "6.0",
      "8.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "digits = [3, 6, 4, 8, 1]\ndigits.sort()\nprint(digits)"
  },
  {
    "example_id": 334,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "numbers = [1, 3, 5, 7, 9, 11]\nsum = np.sum(np.prod(numbers))\nunits_digit = sum % 10\nprint(units_digit)"
  },
  {
    "example_id": 335,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "m = 20\nn = 34\ngcd = 6\nlcm = 126\nsum = m+n\nprint(sum)"
  },
  {
    "example_id": 336,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "406.0",
      "406.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "product = 2005\nfor i in range(2, 1000):\n    if product % i == 0:\n        sum = i + product / i\n        print(sum)"
  },
  {
    "example_id": 337,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = 2004 % 12\nprint(remainder)"
  },
  {
    "example_id": 338,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1358.0"
    ],
    "annotated_answers": [
      "25168.0"
    ],
    "solution": "binary_number = \"10101001110\"\nbase_eight_number = int(binary_number, 2)\nprint(base_eight_number)"
  },
  {
    "example_id": 339,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "sum = 289 + 9 * 51 + 3**6 + 4 * 187\nremainder = sum % 17\nprint(remainder)"
  },
  {
    "example_id": 340,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10077696.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "A = 2**9\nB = 3**9\nC = A*B\nprint(C)"
  },
  {
    "example_id": 341,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "121.0"
    ],
    "solution": "def get_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1 and is_prime(n):\n        factors.append(n)\n    return factors\n\ndef get_positive_divisors(n):\n    divisors = []\n    factors = get_prime_factors(n)\n    for factor in factors:\n        divisors.append(factor)\n    return divisors\n\ndef get_number_of_positive_divisors(n):\n    return len(get_positive_divisors(n))\n\ndef get_numbers_with_exactly_three_positive_divisors():\n    numbers = []\n    for i in range(1, 100):\n        if get_number_of_positive_divisors(i) == 3:\n            numbers.append(i)\n    return numbers\n\nnumbers = get_numbers_with_exactly_three_positive_divisors()\nprint(numbers[4])"
  },
  {
    "example_id": 342,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2010.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "n = 2010\nwhile n % 10!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 343,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "def euler_prime(n):\n    return n**2 - n + 41\n\ndef euler_prime_next(n):\n    return euler_prime(n+1)\n\ndef euler_prime_common_factor(n):\n    return euler_prime(n) * euler_prime_next(n)\n\ndef find_euler_prime_common_factor(n):\n    if euler_prime_common_factor(n) > 1:\n        return n\n    else:\n        return find_euler_prime_common_factor(n+1)\n\nprint(find_euler_prime_common_factor(2))"
  },
  {
    "example_id": 344,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "m = 2**1980 * 3**384 * 5**1694 * 7**343\nk = 2\nwhile m % k!= 0:\n    k += 1\nn = m // k\nprint(n + k)"
  },
  {
    "example_id": 345,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\ndef power(base, exponent):\n    result = 1\n    for i in range(exponent):\n        result *= base\n    return result\n\ndef remainder(base, exponent, modulus):\n    return power(base, exponent) % modulus\n\nprint(remainder(7, 17, 5))"
  },
  {
    "example_id": 346,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1560.0"
    ],
    "annotated_answers": [
      "284.0"
    ],
    "solution": "def get_proper_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i*i!= n:\n                divisors.append(n // i)\n    return divisors\n\ndef get_proper_divisors_sum(n):\n    return sum(get_proper_divisors(n))\n\ndef get_proper_divisors_sum_of_proper_divisors_sum(n):\n    return sum(get_proper_divisors(get_proper_divisors_sum(n)))\n\nprint(get_proper_divisors_sum_of_proper_divisors_sum(284))"
  },
  {
    "example_id": 347,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "t = 12\nwhile np.lcm(12, t)**3!= (12*t)**2:\n    t += 1\nprint(t)"
  },
  {
    "example_id": 348,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(str(35**12)[-1])"
  },
  {
    "example_id": 349,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "n_satisfy = 0\nfor n in range(1, 60):\n    if n % 2 == 0:\n        continue\n    if n % 3 == 0:\n        continue\n    if n % 5 == 0:\n        continue\n    if n % 6 == 2:\n        n_satisfy += 1\nprint(n_satisfy)"
  },
  {
    "example_id": 350,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 123999\na = 123\nb = 999\ndecimal_expansion = [int(a/b)]\na %= b\nwhile n > 0:\n    a *= 10\n    b *= 10\n    decimal_expansion.append(int(a/b))\n    a %= b\n    n -= 1\nprint(decimal_expansion[-123999])"
  },
  {
    "example_id": 351,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "233.0"
    ],
    "solution": "n = 0\nwhile 942 % 15**n!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 352,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3224.0"
    ],
    "annotated_answers": [
      "3224.0"
    ],
    "solution": "def get_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_odd_divisors(divisors):\n    odd_divisors = []\n    for divisor in divisors:\n        if divisor % 2!= 0:\n            odd_divisors.append(divisor)\n    return odd_divisors\n\ndef sum_odd_divisors(odd_divisors):\n    sum = 0\n    for divisor in odd_divisors:\n        sum += divisor\n    return sum\n\ndivisors = get_divisors(6300)\nodd_divisors = get_odd_divisors(divisors)\nsum = sum_odd_divisors(odd_divisors)\nprint(sum)"
  },
  {
    "example_id": 353,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def consecutive_odd_numbers(n):\n    return [2*i+1 for i in range(n)]\n\ndef sum_of_consecutive_odd_numbers(n):\n    return sum(consecutive_odd_numbers(n))\n\ndef greatest_common_factor(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef find_greatest_factor_of_sum_of_consecutive_odd_numbers(n):\n    for i in range(1, n+1):\n        factor = greatest_common_factor(sum_of_consecutive_odd_numbers(i), n)\n        if factor == n:\n            return i\n    return -1\n\nprint(find_greatest_factor_of_sum_of_consecutive_odd_numbers(6))"
  },
  {
    "example_id": 354,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "waiting_time = 8 * 60 + 35 - (5 * 60 + 13)\nprint(waiting_time)"
  },
  {
    "example_id": 355,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "units_digit = (14_8)**2 % 10\nprint(units_digit)"
  },
  {
    "example_id": 356,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "p = 7\nnumbers = list(range(2, p))\ninverses = []\nfor i in numbers:\n    inverses.append(pow(i, -1, p))\nsum = 0\nfor i in range(len(inverses)):\n    sum += inverses[i]\nsum = sum % p\nprint(sum)"
  },
  {
    "example_id": 357,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "451.0"
    ],
    "annotated_answers": [
      "451.0"
    ],
    "solution": "def sum_of_digits(n):\n    return sum(int(d) for d in str(n))\n\nn = 10**51 - 9\nprint(sum_of_digits(n))"
  },
  {
    "example_id": 358,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 8):\n    sum += 10**i\nremainder = sum % 5\nprint(remainder)"
  },
  {
    "example_id": 359,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "fib = [1, 1]\nfor i in range(99):\n    fib.append(fib[-1] + fib[-2])\n\nremainder = fib[-1] % 4\nprint(remainder)"
  },
  {
    "example_id": 360,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "P = 0\n\nif 3 | P:\n    print(\"(c) $3$ can be a divisor of $P$\")\nif 3 == P:\n    print(\"(d) $3$ must be a divisor of $P$\")\n\nif 4 | P:\n    print(\"(e) $4$ can be a divisor of $P$\")\nif 4 == P:\n    print(\"(f) $4$ must be a divisor of $P$\")\n\nif 2 | P:\n    print(\"(a) $2$ can be a divisor of $P$\")\nif 2 == P:\n    print(\"(b) $2$ must be a divisor of $P$\")"
  },
  {
    "example_id": 361,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "repeating_decimals = 0\nfor n in range(1,30):\n    if (n % 30) == 0:\n        repeating_decimals += 1\nprint(repeating_decimals)"
  },
  {
    "example_id": 362,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "10.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "def sum_of_3_consecutive_prime_numbers(n):\n    # Primes up to n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Consecutive primes\n    consecutive_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Sum of the least possible consecutive primes\n    least_possible_sum = consecutive_primes[0] + consecutive_primes[1] + consecutive_primes[2]\n\n    # Sum of the least possible consecutive primes that are multiples of 7\n    least_possible_sum_multiples_of_7 = least_possible_sum\n\n    # If the sum of the consecutive primes is a multiple of 7, then the least possible sum is a multiple of 7\n    if least_possible_sum % 7 == 0:\n        print(\"The least possible sum is a multiple of 7\")\n\n    # If the sum of the consecutive primes is not a multiple of 7, then the least possible sum is not a multiple of 7\n    else:\n        print(\"The least possible sum is not a multiple of 7\")\n\n    return least_possible_sum_multiples_of_7\n\nprint(sum_of_3_consecutive_prime_numbers(100))"
  },
  {
    "example_id": 363,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "321.0"
    ],
    "annotated_answers": [
      "321.0"
    ],
    "solution": "n = 39500 // 123\nprint(n)"
  },
  {
    "example_id": 364,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "x = 720\na = int(x**(1/3))\nprint(a)"
  },
  {
    "example_id": 365,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "38.0",
      "59.0",
      "80.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "for i in range(1, 100):\n    if (i % 3 == 2) and (i % 7 == 3):\n        print(i)"
  },
  {
    "example_id": 366,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.35625"
    ],
    "annotated_answers": [
      "0.35625"
    ],
    "solution": "print(57/160)"
  },
  {
    "example_id": 367,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10901.0"
    ],
    "annotated_answers": [
      "10901.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\nfor i in range(10000, 100000):\n    if is_palindrome(i) and i % 11 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 368,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def find_smallest_integer_value_of_b(number):\n    digits = len(str(number))\n    return 10**(digits-1)\n\nb = find_smallest_integer_value_of_b(423)\nprint(b)"
  },
  {
    "example_id": 369,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.09863013698630137"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "days_in_year = 365\ndays_with_3_in_tens = 36\nprint(days_with_3_in_tens/days_in_year)"
  },
  {
    "example_id": 370,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.936390936390936"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "numbers = [4/37, 3/11, 23/9]\nsum = np.sum(numbers)\nprint(sum)"
  },
  {
    "example_id": 371,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "numbers = [3, 4, 5, 6, 7, 8, 9, 10]\nproduct = np.prod(numbers)\nlargest = numbers[np.argmax(product)]\nprint(largest)"
  },
  {
    "example_id": 372,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5346000.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "g1 = 33*60\ng2 = 45*60\nseconds = g1*g2\nprint(seconds)"
  },
  {
    "example_id": 373,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 10\nremainder = (2*n+1) % 7\nprint(remainder)"
  },
  {
    "example_id": 374,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "num1 = 20\nnum2 = 11\nnum3 = 22\nnum4 = 19\n\nif num1 % 10 not in [0, num2 % 10, num3 % 10, num4 % 10]:\n    print(num1 % 10)\nelif num2 % 10 not in [0, num1 % 10, num3 % 10, num4 % 10]:\n    print(num2 % 10)\nelif num3 % 10 not in [0, num1 % 10, num2 % 10, num4 % 10]:\n    print(num3 % 10)\nelse:\n    print(num4 % 10)"
  },
  {
    "example_id": 375,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = (13**13 + 5) % 6\nprint(remainder)"
  },
  {
    "example_id": 376,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "262144.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "n = 4**9\nprint(n)"
  },
  {
    "example_id": 377,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "409.0"
    ],
    "solution": "answer = 58 - 18\nprint(answer)"
  },
  {
    "example_id": 378,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def get_next_x(x):\n    return x + 1\n\ndef get_is_terminating(x):\n    return (x**2 + x) % 1 == 0\n\nx = 2\nwhile True:\n    if get_is_terminating(x):\n        print(x)\n        break\n    else:\n        x = get_next_x(x)"
  },
  {
    "example_id": 379,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.058823529411764705"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "remainder = (17**-1) % 83\nprint(remainder)"
  },
  {
    "example_id": 380,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Base 2\nb = 2\nwhile True:\n    if 47 % b == 0:\n        break\n    b += 1\nprint(b)"
  },
  {
    "example_id": 381,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3504.0"
    ],
    "annotated_answers": [
      "3504.0"
    ],
    "solution": "def sum_digits(n):\n    return sum(map(int, str(n)))\n\ndef smallest_number_after(n):\n    smallest = n + 1\n    while sum_digits(smallest)!= 12:\n        smallest += 1\n    return smallest\n\nprint(smallest_number_after(3456))"
  },
  {
    "example_id": 382,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "124.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "factors = [i for i in range(1, 301) if 300 % i == 0]\nproduct = np.prod(factors)\nprime_factors = []\nfor factor in factors:\n    if np.gcd(product, factor) == 1:\n        prime_factors.append(factor)\nsum = np.sum(prime_factors)\nprint(sum)"
  },
  {
    "example_id": 383,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2310.0"
    ],
    "annotated_answers": [
      "2079.0"
    ],
    "solution": "# 17k/66 = 0.257k + 0.01\n# 13k/105 = 0.12k + 0.01\n\ndef is_terminating(n):\n    return str(n).endswith('0')\n\ndef is_valid(n):\n    return is_terminating(17*n/66) and is_terminating(13*n/105)\n\ndef find_smallest_valid_greater_than(n):\n    while True:\n        n += 1\n        if is_valid(n):\n            return n\n\nprint(find_smallest_valid_greater_than(2010))"
  },
  {
    "example_id": 384,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "625.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 5**100\nsum = n % 1000\nprint(sum)"
  },
  {
    "example_id": 385,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "total = 0\nfor i in range(7438, 7446):\n    total += i\ntotal %= 8\nprint(total)"
  },
  {
    "example_id": 386,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1589311291.0"
    ],
    "annotated_answers": [
      "715.0"
    ],
    "solution": "T = 14**np.arange(1, 10)\nT = T.sum()\nquotient = T // 14\nprint(quotient)"
  },
  {
    "example_id": 387,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 2**8 % 5\nprint(remainder)"
  },
  {
    "example_id": 388,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "96.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "def sum_of_all_possible_values_of_n(last_group_size):\n    if last_group_size == 8:\n        n = 50\n        while n % 8!= 0:\n            n -= 1\n        return n\n    else:\n        n = 50\n        while n % 6!= 0:\n            n -= 1\n        return n\n\nprint(sum_of_all_possible_values_of_n(5) + sum_of_all_possible_values_of_n(3))"
  },
  {
    "example_id": 389,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "num_of_three_digit_numbers = 0\nfor i in range(100, 1000):\n    if i % 13 == 0:\n        num_of_three_digit_numbers += 1\nprint(num_of_three_digit_numbers)"
  },
  {
    "example_id": 390,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1512.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "product = 5 * 6 * 7 * 8 * 9 * 10\nhundreds_digit = product // 100\nprint(hundreds_digit)"
  },
  {
    "example_id": 391,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "12.0",
      "15.0",
      "16.0",
      "15.0",
      "12.0",
      "7.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 3\nm = 2**n\nfor i in range(1, m+1):\n    for j in range(1, m+1):\n        if i+j == m:\n            print(i*j)"
  },
  {
    "example_id": 392,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "for i in range(100, 1000):\n    if i % i%10 == 0 and i % i%100 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 393,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "numbers = [1, 5, 3, 7]\nproduct = np.prod(numbers)\nremainder = product % 6\nprint(remainder)"
  },
  {
    "example_id": 394,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.72",
      "-5.0"
    ],
    "annotated_answers": [
      "6.72",
      "-05"
    ],
    "solution": "print(21 / (2**2 * 5**7))"
  },
  {
    "example_id": 395,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "889.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "def inverse(x, n):\n    return pow(x, n-2, n)\n\nresult = inverse(997, 1000)\nprint(result)"
  },
  {
    "example_id": 396,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "999.0"
    ],
    "annotated_answers": [
      "43436.0"
    ],
    "solution": "base_6 = \"999\"\nprint(base_6)"
  },
  {
    "example_id": 397,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 3*11 + 2 - 3*2\nprint(n % 11)"
  },
  {
    "example_id": 398,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a = 4*2\nb = 5*2\nproduct = a*b\nremainder = product % 66\nprint(remainder)"
  },
  {
    "example_id": 399,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def modular_inverse(a, m):\n    for i in range(1, m):\n        if (a * i) % m == 1:\n            return i\n\ndef mod_inverse_130(n):\n    return modular_inverse(n, 130)\n\ndef mod_inverse_231(n):\n    return modular_inverse(n, 231)\n\nn = 2\nwhile True:\n    n += 1\n    if mod_inverse_130(n)!= None and mod_inverse_231(n)!= None:\n        print(n)\n        break"
  },
  {
    "example_id": 400,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "1000.0",
      "1000.0",
      "1000.0"
    ],
    "annotated_answers": [
      "935.0"
    ],
    "solution": "# Find the largest possible value of X\nX = 1000\n\n# 1.) X is a multiple of 17\nif X % 17 == 0:\n    print(\"X is a multiple of 17\")\n\n# 2.) X is less than 1000\nif X < 1000:\n    print(\"X is less than 1000\")\n\n# 3.) X is one less than a multiple of 8\nif X % 8 == 0:\n    print(\"X is one less than a multiple of 8\")\n\n# Find the largest possible value of X\nX = 999\n\n# 1.) X is a multiple of 17\nif X % 17 == 0:\n    print(\"X is a multiple of 17\")\n\n# 2.) X is less than 1000\nif X < 1000:\n    print(\"X is less than 1000\")\n\n# 3.) X is one less than a multiple of 8\nif X % 8 == 0:\n    print(\"X is one less than a multiple of 8\")\n\n# Find the largest possible value of X\nX = 998\n\n# 1.) X is a multiple of 17\nif X % 17 == 0:\n    print(\"X is a multiple of 17\")\n\n# 2.) X is less than 1000\nif X < 1000:\n    print(\"X is less than 1000\")\n\n# 3.) X is one less than a multiple of 8\nif X % 8 == 0:\n    print(\"X is one less than a multiple of 8\")\n\n# Find the largest possible value of X\nX = 997\n\n# 1.) X is a multiple of 17\nif X % 17 == 0:\n    print(\"X is a multiple of 17\")\n\n# 2.) X is less than 1000\nif X < 1000:\n    print(\"X is less than 1000\")\n\n# 3.) X is one less than"
  },
  {
    "example_id": 401,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def gcd(n, m):\n    if m == 0:\n        return n\n    else:\n        return gcd(m, n % m)\n\ndef gcd_range(n):\n    values = []\n    for i in range(n + 5, n + 11):\n        values.append(gcd(i, n))\n    return values\n\nprint(gcd_range(10))"
  },
  {
    "example_id": 402,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3087.0"
    ],
    "annotated_answers": [
      "30325.0"
    ],
    "solution": "answer = 4321 - 1234\nprint(answer)"
  },
  {
    "example_id": 403,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# \nn = 48\nprint(number_of_divisors(n))"
  },
  {
    "example_id": 404,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 10):\n    sum += 11**i\nprint(sum%10)"
  },
  {
    "example_id": 405,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "quarters = 20\n\n# 5\npiles_of_5 = int(quarters/5)\n\n# 3\nremainder_5 = quarters % 5\n\n# 7\npiles_of_7 = int(quarters/7)\n\n# 5\nremainder_7 = quarters % 7\n\n# 3 + 5\ntotal_remainder = remainder_5 + remainder_7\n\n# 20 - 3 - 5\ntotal_quarters = quarters - total_remainder\n\nprint(total_quarters)"
  },
  {
    "example_id": 406,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def is_perfect_fourth_power(x):\n    return np.isclose(x**(1/4), np.round(x**(1/4)))\n\ndef find_smallest_n(n):\n    return n\n\nn = 3\nwhile not is_perfect_fourth_power(sum(range(1, n+1))**2):\n    n += 1\n\nprint(n)"
  },
  {
    "example_id": 407,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def subtract(num1, num2):\n    return num1 - num2\n\ndef find_unit(num, base):\n    return num % base\n\nnum1 = 413\nnum2 = 215\n\nprint(find_unit(subtract(num1, num2), 6))"
  },
  {
    "example_id": 408,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# \nresidue = 121 * 122 * 123 % 4\nprint(residue)"
  },
  {
    "example_id": 409,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "remainder = sum([1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11]) % 8\nprint(remainder)"
  },
  {
    "example_id": 410,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40507599.0"
    ],
    "annotated_answers": [
      "11121123.0"
    ],
    "solution": "a = 2012_3\nb = 201_3\nproduct = a * b\nprint(product)"
  },
  {
    "example_id": 411,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "169.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def units_digit(n):\n    return n % 10\n\n\ndef number_of_divisors(n):\n    num_divisors = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            num_divisors += 2\n    if num_divisors == 2:\n        num_divisors += 1\n    return num_divisors\n\n\ndef divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors\n\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\nN = 1000\ncount = 0\nfor i in range(1, N+1):\n    if number_of_divisors(i) == 3:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 412,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = sum(range(2000, 2007)) % 7\nprint(remainder)"
  },
  {
    "example_id": 413,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "def lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\nx = 315\ny = lcm(7, 9) // gcd(7, 9)\nprint(y)"
  },
  {
    "example_id": 414,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = int(str(71)[1])\nprint(a)"
  },
  {
    "example_id": 415,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.0",
      "10000.0",
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "A, B = symbols('A B')\nN = (A - B) // 10**4 + 3\nprint(N)"
  },
  {
    "example_id": 416,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 10):\n    factors = set(range(1, i + 1))\n    if len(factors) == 4:\n        sum += i\n        if len(factors) == 5:\n            break\nprint(sum)"
  },
  {
    "example_id": 417,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "195.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "b = 13*15\nprint(b)"
  },
  {
    "example_id": 418,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "a = 1\nb = 2\nwhile True:\n    if (a*27) % 40 == 17:\n        break\n    a += 1\n    b += 1\nprint(a)"
  },
  {
    "example_id": 419,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 12345678\nn = n % 9\nprint(n)"
  },
  {
    "example_id": 420,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 23\nb = 31\nn = a*(2*a+b) - 2*a**2 + a*b\nprint(number_of_divisors(n))"
  },
  {
    "example_id": 421,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "a, b = symbols('a b')\n\nans = solve((a**3 + 7) % 19 == 0, a)\nans = [int(n) for n in ans]\n\nprint(len(ans))"
  },
  {
    "example_id": 422,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1199.0",
      "24.0"
    ],
    "annotated_answers": [
      "-449.0"
    ],
    "solution": "a = 15\nb = 1199\nx = symbols('x')\nsol = solve(24*x - a, x)\nsol = solve(24*x - b, x)\nprint(sol)"
  },
  {
    "example_id": 423,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "12.0",
      "15.0",
      "20.0",
      "30.0",
      "35.0",
      "40.0",
      "45.0",
      "50.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "for i in range(1, 51):\n    if i % 10 == 50 % i % 10:\n        print(i)"
  },
  {
    "example_id": 424,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 13):\n    sum += i\n\nprint(sum % 4)"
  },
  {
    "example_id": 425,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "59.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "# number of true questions\nnum_true = 0\n# number of false questions\nnum_false = 0\n# number of questions that are multiples of 4\nnum_multiples_of_4 = 0\n# number of questions that are multiples of 3\nnum_multiples_of_3 = 0\n# number of questions\nnum_questions = 100\nfor i in range(num_questions):\n    # if a question is a multiple of 4, answer is true\n    if i % 4 == 0:\n        num_multiples_of_4 += 1\n    # if a question is a multiple of 3, answer is false\n    if i % 3 == 0:\n        num_multiples_of_3 += 1\n# number of true questions\nnum_true = num_multiples_of_4\n# number of false questions\nnum_false = num_multiples_of_3\n# number of questions answered correctly\nnum_correct_answers = num_true + num_false\nprint(num_correct_answers)"
  },
  {
    "example_id": 426,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "m = 14\nn = 10\nremainder = (m+n) % 14\nprint(remainder)"
  },
  {
    "example_id": 427,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = symbols('n')\nf = (n+1)/(13-n)\nsol = solve(f, n)\nprint(sol)"
  },
  {
    "example_id": 428,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1909.0"
    ],
    "annotated_answers": [
      "12023.0"
    ],
    "solution": "a = 2121\nb = 212\nprint(a - b)"
  },
  {
    "example_id": 429,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def perfect_square_factors(n):\n    factors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n    return len(factors)\n\nprint(perfect_square_factors(46656))"
  },
  {
    "example_id": 430,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4051.0"
    ],
    "annotated_answers": [
      "3859.0"
    ],
    "solution": "a = 817_9\nb = 145_9\nc = 266_9\nans = a - b - c\nprint(ans)"
  },
  {
    "example_id": 431,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "119.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "# Base 3 palindromes\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef base_3_palindromes(n):\n    palindromes = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            palindromes += 1\n    return palindromes\n\nprint(base_3_palindromes(2007))"
  },
  {
    "example_id": 432,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "143.0"
    ],
    "annotated_answers": [
      "143.0"
    ],
    "solution": "a = 1001\nb = 2431\nprint(gcd(a, b))"
  },
  {
    "example_id": 433,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\ndef f(a):\n    return gcd(3*a**2+19*a+30, a**2+6*a+9)\n\ndef find_max(a):\n    return f(a) - a\n\na = 1000\nprint(find_max(a))"
  },
  {
    "example_id": 434,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "M = 3\nN = 5\nremainder = (M + N) % 6\nprint(remainder)"
  },
  {
    "example_id": 435,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1083700.0"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "a = 25.67\nb = 17.21\nc = 39.17\nd = 26.32\n\nAlice = a\nBailey = b\nCindy = c\nDaniel = d\n\nAlice_in_dollars = 25.67 * 100\nBailey_in_dollars = 17.21 * 100\nCindy_in_dollars = 39.17 * 100\nDaniel_in_dollars = 26.32 * 100\n\ntotal_in_dollars = Alice_in_dollars + Bailey_in_dollars + Cindy_in_dollars + Daniel_in_dollars\n\ntotal_in_cents = total_in_dollars * 100\n\nprint(total_in_cents)"
  },
  {
    "example_id": 436,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.332621544394415",
      "157",
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 100\nP = math.prod(range(2, n+1))\nprint(P)\nprint(P % 16)"
  },
  {
    "example_id": 437,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "n = 10**100 - 9**100\nprint(len(str(n)))"
  },
  {
    "example_id": 438,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2000.0"
    ],
    "solution": "n = symbols('n')\ndenominator = 2010\nnum_fractions = 0\nfor i in range(1, 2011):\n    n = i\n    num_frac = 0\n    while num_frac < denominator:\n        num_frac += 1\n        if (n ** 2) % denominator == 0:\n            num_fractions += 1\n            break\nprint(num_fractions)"
  },
  {
    "example_id": 439,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 10**4\nfor b in range(10, 100):\n    if n == n//b * b:\n        print(b)\n        break"
  },
  {
    "example_id": 440,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "427.0"
    ],
    "solution": "remainder = 126 - 54\nprint(remainder)"
  },
  {
    "example_id": 441,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4000000000.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "m = 3*10**9\nlcm = 4*gcd(m, 10**10)\nprint(lcm)"
  },
  {
    "example_id": 442,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "count = 0\nfor i in range(1, 101):\n    if i % 5 == 1:\n        count += 1\npercent = count / 100\nprint(percent)"
  },
  {
    "example_id": 443,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "n = 4*5 + 3\nprint(n)"
  },
  {
    "example_id": 444,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "172.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "def prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_three_digit_number(prime_factors):\n    for i in range(100, 1000):\n        factors = prime_factors(i)\n        if sum(factors) == 47:\n            return i\n\nprint(get_three_digit_number(prime_factors))"
  },
  {
    "example_id": 445,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "units = (29*79 + 31*81) % 10\nprint(units)"
  },
  {
    "example_id": 446,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "-4.0",
      "2.0",
      "8.0",
      "9.0",
      "2.0",
      "-4.0",
      "2.0",
      "8.0",
      "9.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "338.0"
    ],
    "solution": "# import math library\nimport math\n\n# import symbols and solving functions\nfrom sympy import symbols, solve\n\n# import numpy as np\nimport numpy as np\n\n# from sympy import gcd\nfrom sympy import gcd\n\n# from math import gcd\nfrom math import gcd\n\n# define variables\nx, y = symbols('x y')\n\n# define equation\neq = (x**2 + y**2) - (3*x + 2*y)\n\n# solve equation\nsol = solve(eq, x)\n\n# print answer\nprint(sol)"
  },
  {
    "example_id": 447,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def units_digit(n):\n    return n % 4\n\n\ndef number_of_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\ndef divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef units_digit_of_product(a, b):\n    return units_digit(a * b)\n\n\na = 4\nb = 6\n\nprint(units_digit_of_product(a, b))"
  },
  {
    "example_id": 448,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "remainder = (129**34 + 96**38) % 11\nprint(remainder)"
  },
  {
    "example_id": 449,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "m = 6**2\nprint(m)"
  },
  {
    "example_id": 450,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 100, 2):\n    sum += i\n    if sum**0.5 == int(sum**0.5):\n        break\nprint(sum)"
  },
  {
    "example_id": 451,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def base_5(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 5)\n        n //= 5\n    return digits\n\ndef sum_digits(digits):\n    return sum(digits)\n\nprint(sum_digits(base_5(269)))"
  },
  {
    "example_id": 452,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def sum_of_three_numbers(numbers, prime):\n    for n1 in numbers:\n        for n2 in numbers:\n            for n3 in numbers:\n                if n1 + n2 + n3 + 1 == prime:\n                    return True\n    return False\n\n\ndef smallest_value_of_x(max_value):\n    for x in range(11, max_value + 1):\n        numbers = [2, 4, 10, x]\n        if sum_of_three_numbers(numbers, 11):\n            return x\n    return -1\n\n\nprint(smallest_value_of_x(100))"
  },
  {
    "example_id": 453,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "sum = 0\nfor i in range(1,13):\n    sum += pow(i, -1, 13)\nprint(sum % 13)"
  },
  {
    "example_id": 454,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 4\nunits_digit = n % 10\nprint(units_digit)"
  },
  {
    "example_id": 455,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# define modulus\nmod = 16\n\n# define modulo inverse\nmod_inverse = [0, 1, 13, 7, 11, 3, 9, 15, 5, 10, 2, 8, 14, 6, 12, 4]\n\n# define sum of modulo inverses\nsum_mod_inverses = sum(mod_inverse)\n\n# define residue\nresidue = sum_mod_inverses % mod\n\n# print residue\nprint(residue)"
  },
  {
    "example_id": 456,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "# Remove the 10th card\na = 90\n# The remaining cards\nb = 89\n# The sum of the remaining cards\nc = 89 * 90 / 2\n# The sum of the remaining cards is a multiple of 77\n# c % 77 = 0\n# 89 * 90 / 2 = 77 * x\n# x = 9\n# The card that was removed was 9\nprint(9)"
  },
  {
    "example_id": 457,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "decimal_value_7 = 321\ndecimal_value_5 = 321\n\nprint(decimal_value_7 - decimal_value_5)"
  },
  {
    "example_id": 458,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1201.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "print(int(332_4 - 212_3))"
  },
  {
    "example_id": 459,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "units_digit = 18**6 % 10\nprint(units_digit)"
  },
  {
    "example_id": 460,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "n = 45\nprint(n)"
  },
  {
    "example_id": 461,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def power(base, exponent):\n    result = 1\n    while exponent > 0:\n        result *= base\n        exponent -= 1\n    return result\n\ndef powermod(base, exponent, modulus):\n    result = power(base, exponent)\n    result %= modulus\n    return result\n\ndef solve(x):\n    return powermod(x, 66, 17)\n\nprint(solve(225)-powermod(327, 66, 17))"
  },
  {
    "example_id": 462,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 5\nb = 10\nc = 15\n\nt_a = 0\nt_b = 1\nt_c = 0\n\nremainder = (t_a + t_b + t_c) % 7\nprint(remainder)"
  },
  {
    "example_id": 463,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-463351836711.4882"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Initial population\nP = 137\n# Time\nT = 506\n# Time in hours\nTh = T/60\n# Time in minutes\nTm = T%60\n# Population at the beginning\nP0 = P*math.pow(5, Th)\n# Population at the end\nP1 = P0*(5**(Tm/5))\n# Number of initial Penteria\nN0 = P0 - P1\nprint(N0)"
  },
  {
    "example_id": 464,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "773.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# The remainder of 142857 divided by 18 is 13.\n# Since 13 is the remainder of 142857 divided by 18, we have\n# 142857 = 18\\*773 + 13.\n# Therefore, n = 773.\nprint(773)"
  },
  {
    "example_id": 465,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 5\nfactors = np.arange(1, n+1)\ngreatest_odd_factor = np.prod(factors)\nprint(greatest_odd_factor)"
  },
  {
    "example_id": 466,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.1111111111111111"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "print((9**-1) % 100)"
  },
  {
    "example_id": 467,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "33233421699200.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "b = 2020\nP = b - 2\nQ = P / 2\nP_b = P * b\nP_b_Q = P_b / Q\nP_b_Q_P = P_b_Q * P\nP_b_Q_P_b = P_b_Q_P * b\nP_b_Q_P_b_P = P_b_Q_P_b * P\nprint(P_b_Q_P_b_P)"
  },
  {
    "example_id": 468,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def number_of_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return len(divisors)\n\n\ndef units_digit(n):\n    return n % 10\n\n\ndef divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors\n\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef common_divisors(num_list):\n    num = num_list[0]\n    divisors = []\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            divisors.append(i)\n            if num // i!= i:\n                divisors.append(num // i)\n    return divisors\n\n\nnum_list = [840, 960, 1200]\n\ndivisors = [common_divisors(num_list)]\n\nprint(len(divisors))"
  },
  {
    "example_id": 469,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "10.0",
      "9.0",
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = 2442\nb = 1416\nc = 1206\n\na_div_19 = a % 19\nb_div_19 = b % 19\nc_div_19 = c % 19\n\nprint(a_div_19)\nprint(b_div_19)\nprint(c_div_19)\n\nx = 2*a + b - c\nx_div_19 = x % 19\nprint(x_div_19)"
  },
  {
    "example_id": 470,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1950.0"
    ],
    "annotated_answers": [
      "1950.0"
    ],
    "solution": "expression = 2**2001 * 5**1950 // 4**27\nprint(len(str(expression)))"
  },
  {
    "example_id": 471,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "tiles = 12\nsides = [2, 3, 4, 6]\nrectangles = []\n\nfor side in sides:\n    for i in range(tiles // side):\n        rectangles.append(side * i)\n\nprint(len(rectangles))"
  },
  {
    "example_id": 472,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "n = 11\nwhile True:\n    n += 1\n    if n**2 % n == 0 and n**3 % n == 0:\n        break\nprint(n)"
  },
  {
    "example_id": 473,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "def arithmetic_mean(numbers):\n    return sum(numbers) / len(numbers)\n\ndef number_of_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef divisors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef units_digit(n):\n    return n % 10\n\ndef is_sum_product(n):\n    digits = [int(digit) for digit in str(n)]\n    sum_digits = sum(digits)\n    product_digits = digits[0] * digits[1]\n    return sum_digits == product_digits\n\ndef get_positive_two_digit_integers_with_property():\n    integers = []\n    for i in range(10, 100):\n        if is_sum_product(i):\n            integers.append(i)\n    return integers\n\nintegers = get_positive_two_digit_integers_with_property()\nmeans = []\nfor integer in integers:\n    divisors = divisors(integer)\n    count = number_of_divisors(integer)\n    mean = arithmetic_mean(divisors)\n    means.append(mean)\n\nprint(arithmetic_mean(means))"
  },
  {
    "example_id": 474,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.46153846153846156"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(6/13)"
  },
  {
    "example_id": 475,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "6.0",
      "6.0",
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 6\nb = 6\nc = 5\nd = 1\ne = 1\nf = 5\ng = 1\nh = 6\ni = 6\n\nN = a + b\nM = c + d\nP = e + f\nQ = g + h\nR = i\n\nprint(N)\nprint(M)\nprint(P)\nprint(Q)\nprint(R)"
  },
  {
    "example_id": 476,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "8.0",
      "8.0",
      "8.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "# a. Least number of trees to plant 8 equal rows\n# b. Least number of trees to plant 9 equal rows\n# c. Least number of trees to plant 10 equal rows\n# d. Least number of trees to plant 11 equal rows\n\n# a\nN = 8\n# b\nM = 9\n# c\nK = 10\n# d\nL = 11\n\n# number of trees to plant 8 equal rows\nn = N\n\n# number of trees to plant 9 equal rows\nm = M\n\n# number of trees to plant 10 equal rows\nk = K\n\n# number of trees to plant 11 equal rows\nl = L\n\n# least number of trees to plant 8 equal rows\nleast_n = min(n, m, k, l)\n\n# least number of trees to plant 9 equal rows\nleast_m = min(n, m, k, l)\n\n# least number of trees to plant 10 equal rows\nleast_k = min(n, m, k, l)\n\n# least number of trees to plant 11 equal rows\nleast_l = min(n, m, k, l)\n\n# number of trees to plant 8 equal rows\nnum_n = least_n\n\n# number of trees to plant 9 equal rows\nnum_m = least_m\n\n# number of trees to plant 10 equal rows\nnum_k = least_k\n\n# number of trees to plant 11 equal rows\nnum_l = least_l\n\nprint(num_n)\nprint(num_m)\nprint(num_k)\nprint(num_l)"
  },
  {
    "example_id": 477,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "def divisors(n):\n    for i in range(1, int(n**(1/6)) + 1):\n        if n % i == 0:\n            yield i\n\ndef smallest_positive_integer(n):\n    return next(x for x in range(1, n) if all(x % y == 0 for y in divisors(x)))\n\nprint(smallest_positive_integer(10000))"
  },
  {
    "example_id": 478,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = 20_7\nn = int(n)\nif n % 11 == 0:\n    print(0)\nelse:\n    print(1)"
  },
  {
    "example_id": 479,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Initialize variables\nn = 0\na = 0\nb = 0\n\n# Calculate number of possible values for n\nfor n in range(1, 10):\n    a = 6*n\n    b = n\n    if gcd(a, b) == 1:\n        print(n)"
  },
  {
    "example_id": 480,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "134.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def cakewalk(n, t):\n    # a = (n + 1) // 2\n    # b = t - (n + 1) // 2\n    # a = (n + 1) / 2\n    # b = t - (n + 1) / 2\n    # a = n // 2 + 1\n    # b = t - n // 2 - 1\n    a = n // 2\n    b = t - n // 2\n    return a, b\n\nn = 11\nt = 139\na, b = cakewalk(n, t)\nprint(a)\nprint(b)"
  },
  {
    "example_id": 481,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 2**100 + 1\nremainder = n % 7\nprint(remainder)"
  },
  {
    "example_id": 482,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = (33818**2 + 33819**2 + 33820**2 + 33821**2 + 33822**2) % 17\nprint(remainder)"
  },
  {
    "example_id": 483,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 10\nbase = 11\nans = 1\nfor i in range(1, n):\n    ans = ans * base\nans = ans % 11\nprint(ans)"
  },
  {
    "example_id": 484,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "1.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "7.0",
      "2.0",
      "33.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "A, B, C = symbols('A B C')\neq1 = A + B - C\neq2 = A * A - B * B - 2 * C\neq3 = C * B - A * A - A\nsol = solve([eq1, eq2, eq3], [A, B, C])\nprint(sol)"
  },
  {
    "example_id": 485,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "52.0",
      "77.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "for i in range(26, 100):\n    if i % 25 == 2:\n        print(i)"
  },
  {
    "example_id": 486,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 629\nn_base_7 = n % 7\nn_base_8 = n % 8\nn_base_7_list = list(str(n_base_7))\nn_base_8_list = list(str(n_base_8))\nnum_same_digits = 0\nfor digit in n_base_7_list:\n    if digit in n_base_8_list:\n        num_same_digits += 1\nprint(num_same_digits)"
  },
  {
    "example_id": 487,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "206.0"
    ],
    "annotated_answers": [
      "2045.0"
    ],
    "solution": "n = 413\nd = 2\n\ndef units_digit(n):\n    return n % 10\n\ndef number_of_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef div(a, b):\n    return a // b\n\nprint(div(n, d))"
  },
  {
    "example_id": 488,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = 5\na = 5\nb = 17\nm = 8\n# Calculate residue modulo 17\nresidue = (a*m) % b\nprint(residue)"
  },
  {
    "example_id": 489,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "octal = \"8888\"\nsum = 0\nfor i in octal:\n    sum += int(i)\nprint(sum)"
  },
  {
    "example_id": 490,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1216.55"
    ],
    "annotated_answers": [
      "499.0"
    ],
    "solution": "# Define variables\nw = 3.5\nx = 242.5\ny = 367.8\nz = 10\n\n# Calculate total cost\ntotal_cost = x * w + y\n\n# Print total cost\nprint(total_cost)"
  },
  {
    "example_id": 491,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 5\nb = 7\nprint(a**30 % b)"
  },
  {
    "example_id": 492,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = (2 * 3) % 5\nprint(remainder)"
  },
  {
    "example_id": 493,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 2**5*3**6\nperfect_squares = []\nfor i in range(1, int(math.sqrt(n))+1):\n    if i**2 == n % i:\n        perfect_squares.append(i)\nprint(len(perfect_squares))"
  },
  {
    "example_id": 494,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "999.0"
    ],
    "annotated_answers": [
      "621.0"
    ],
    "solution": "# Find the largest number with the product of the digits equal to 12\n\n# Set the number of digits\nnum_digits = 3\n\n# Initialize the largest number\nlargest_number = 999\n\n# Initialize the product of the digits\nproduct = 1\n\n# Loop through the digits\nfor digit in range(1, num_digits + 1):\n    # Set the current number\n    number = largest_number\n\n    # Check if the current number is not divisible by the digit\n    if number % digit!= 0:\n        # Set the current number to 0\n        number = 0\n\n    # Check if the current number is not equal to 0\n    if number!= 0:\n        # Multiply the current number and the digit\n        product = product * digit\n\n    # Check if the product is not equal to 12\n    if product!= 12:\n        # Set the current number to 0\n        number = 0\n\n    # Check if the current number is not equal to 0\n    if number!= 0:\n        # Set the largest number\n        largest_number = number\n\n# Print the largest number\nprint(largest_number)"
  },
  {
    "example_id": 495,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "n = 100\nm = 13\nwhile n >= m:\n    n = n - m\n    m = m + 1\nprint(n)"
  },
  {
    "example_id": 496,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Given\nn = 3\na = 2\nb = 3\n\n# Calculate\n# (ab)**-1 = (2*3)**-1 = 3*2 = 6\n# (a+b)**-1 = (2+3)**-1 = 3*2 = 6\n# (a+b)*(a**-1 + b**-1) = (2+3)*(2**-1 + 3**-1) = 6*(1/2 + 1/3) = 6*2/3 = 4\n\n# Remainder\nremainder = 4 % n\nprint(remainder)"
  }
]