[
  {
    "example_id": 0,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "remainder = 2**3 * 4**5 * 6**7 * 8**9 % 13\nprint(remainder)"
  },
  {
    "example_id": 1,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "439.0"
    ],
    "annotated_answers": [
      "1440.0"
    ],
    "solution": "N = 2010\nfor i in range(N):\n    if i % 7 == 5 and i % 11 == 10 and i % 13 == 10:\n        print(i)\n        break"
  },
  {
    "example_id": 2,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "n = 2003\nroot = int(n ** 0.5)\nnum_primes = 0\nfor i in range(2, root + 1):\n    if n % i == 0:\n        num_primes += 1\n        break\nprint(num_primes)"
  },
  {
    "example_id": 3,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 10\nx = 1\nwhile x**3 <= n:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 4,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "867.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "num_batches = 44\nnum_donuts = 13\nbatch_size = 20\n\nnum_donuts_left = num_batches*batch_size - num_donuts\nprint(num_donuts_left)"
  },
  {
    "example_id": 5,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = 3\ny = 65\nz = 10\nn = x**3 * y**z\nfactors = []\nfor i in range(1, int(n**(1/3))+1):\n    if n % i**3 == 0:\n        factors.append(i)\nprint(len(factors))"
  },
  {
    "example_id": 6,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 12\nremainder = (n + 4) % 9 + (n + 6) % 9 + (n + 8) % 9\nprint(remainder)"
  },
  {
    "example_id": 7,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "total_milk = 8 * 4\ntotal_coffee = 8 * 6\nquarter_milk = total_milk / 4\nsixth_coffee = total_coffee / 6\nprint(quarter_milk)\nprint(sixth_coffee)"
  },
  {
    "example_id": 8,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "product = 1\nfor num in range(1, 12, 2):\n    product *= num\nprint(product % 10)"
  },
  {
    "example_id": 9,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def base_6_repr(n):\n    return str(n)[-1] + str(n)[:1]\n\n\ndef product_of_first_and_last_digits(n):\n    return int(base_6_repr(n)[0]) * int(base_6_repr(n)[-1])\n\n\nprint(product_of_first_and_last_digits(682))"
  },
  {
    "example_id": 10,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10001011000.0"
    ],
    "annotated_answers": [
      "100002.0"
    ],
    "solution": "n1 = 101\nn2 = 1011\nprint(bin(n1 + n2))"
  },
  {
    "example_id": 11,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73744.0"
    ],
    "annotated_answers": [
      "740.0"
    ],
    "solution": "A = 26\nB = 7114\nC = 4\n\nprint(100*A + 10*B + C)"
  },
  {
    "example_id": 12,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16160.0",
      "771.0"
    ],
    "annotated_answers": [
      "1058.0"
    ],
    "solution": "n = 101\nprint(n * 160)\nprint(n * 160 % 1399)"
  },
  {
    "example_id": 13,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "106.0"
    ],
    "annotated_answers": [
      "106.0"
    ],
    "solution": "def smallest_three_digit_positive_integer_congruent_to_1(modulus):\n    for i in range(100, 1000):\n        if i % modulus == 1:\n            return i\n    return -1\n\nprint(smallest_three_digit_positive_integer_congruent_to_1(7))"
  },
  {
    "example_id": 14,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44100.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 210\nb = 210**3\nprint(b//a)"
  },
  {
    "example_id": 15,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "n = 280 // 40\nprint(n)"
  },
  {
    "example_id": 16,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 1000):\n    if len(bin(i)[2:]) == len(bin(i*2)[2:]):\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 17,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "product = 1\nfor i in range(2, 99):\n    if i % 2 == 0 and i % 10!= 0:\n        product *= i\nprint(product % 10)"
  },
  {
    "example_id": 18,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "b = 103 // 4 * 12\nprint(b)"
  },
  {
    "example_id": 19,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "824.85",
      "824.85"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "base_3 = 0\nbase_6 = 0\nfor i in range(1000, 9999):\n    if i % 3 == 0 and i % 6 == 0:\n        base_3 += i\n        base_6 += i\nprint(base_3/10000, base_6/10000)"
  },
  {
    "example_id": 20,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0",
      "50.0",
      "9.0"
    ],
    "annotated_answers": [
      "236.0"
    ],
    "solution": "soldiers = 200\ngroups_of_4 = soldiers // 4\ngroups_of_3 = (soldiers - groups_of_4) // 3\ngroups_of_11 = (soldiers - groups_of_4 - groups_of_3) // 11\nprint(groups_of_4, groups_of_3, groups_of_11)"
  },
  {
    "example_id": 21,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "20.0",
      "25.0",
      "40.0",
      "45.0",
      "60.0",
      "65.0",
      "80.0",
      "85.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "for a in range(1, 100):\n    if a * (a - 1) % 20 == 4 * a % 20:\n        print(a)"
  },
  {
    "example_id": 22,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41956.0"
    ],
    "annotated_answers": [
      "11014.0"
    ],
    "solution": "a = 123_4\nb = 3_4\nprint(a*b)"
  },
  {
    "example_id": 23,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.05625"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(9/160 % 10)"
  },
  {
    "example_id": 24,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def power(base, exponent):\n    result = 1\n    for i in range(exponent):\n        result = result * base\n    return result\n\ndef modular_exponentiation(base, exponent, modulus):\n    result = 1\n    for i in range(exponent):\n        result = (result * base) % modulus\n    return result\n\ndef compute_29_13_minus_5_13_modulo_7():\n    return modular_exponentiation(29, 13, 7) - modular_exponentiation(5, 13, 7)\n\nprint(compute_29_13_minus_5_13_modulo_7())"
  },
  {
    "example_id": 25,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef max_gcd(n):\n    return max(gcd(13*n + 8, 5*n + 3), gcd(13*n + 3, 5*n + 8))\n\nprint(max_gcd(100))"
  },
  {
    "example_id": 26,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "313.0"
    ],
    "solution": "# min number of eggs\neggs = 200\n# containers\ndozen_eggs = 12\nremainder = eggs % dozen_eggs\ncustom_eggs = 13\ncustom_remainder = remainder % custom_eggs\nmin_eggs = remainder + (custom_eggs - custom_remainder)\nprint(min_eggs)"
  },
  {
    "example_id": 27,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1243.0",
      "4.0"
    ],
    "annotated_answers": [
      "21126.0"
    ],
    "solution": "def convert_to_base(num, base):\n    # Create a dictionary to convert numbers to letters\n    dict = {0:'0', 1:'1', 2:'2', 3:'3', 4:'4', 5:'5', 6:'6', 7:'7', 8:'8', 9:'9', 10:'A', 11:'B', 12:'C', 13:'D', 14:'E', 15:'F'}\n    # Create an empty list to store the converted number\n    converted_num = []\n    # While the number is greater than 0\n    while num > 0:\n        # Take the remainder of dividing by base\n        remainder = num % base\n        # Add the remainder to the list\n        converted_num.append(dict[remainder])\n        # Divide the number by base\n        num = num // base\n    # Return the converted number\n    return ''.join(reversed(converted_num))\n# Convert 315_6 to base 6\nprint(convert_to_base(315, 6))\n# Convert 4_6 to base 6\nprint(convert_to_base(4, 6))"
  },
  {
    "example_id": 28,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 0\nwhile n < 10:\n    if (6 * n) % 2 == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 29,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "# smallest positive perfect cube\ncube = np.power(3, 1/3)\n\n# smallest perfect cube\nperfect_cube = np.floor(cube)\n\n# sum of three consecutive integers\nsum_of_three = perfect_cube + 2\n\nprint(sum_of_three)"
  },
  {
    "example_id": 30,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "def divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors\n\nnegative_product = 0\nfor i in range(-200, -1):\n    product = 1\n    for j in divisors(i):\n        product *= j\n        if product < 0:\n            negative_product += 1\nprint(negative_product)"
  },
  {
    "example_id": 31,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "bad_count = 0\nfor x in range(100, 200):\n    if x % 4 == 0:\n        bad_count += 1\nprint(bad_count)"
  },
  {
    "example_id": 32,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "99.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "m = np.arange(1,100)\ngcd = [math.gcd(i,100) for i in m]\nprint(len(gcd))"
  },
  {
    "example_id": 33,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define the range of perfect squares\nperfect_squares = np.arange(100, 1000)\n# Define the range of numbers\nnumbers = np.arange(1000, 10000)\n# Define the list of perfect squares\nperfect_square_list = []\n# Loop through the numbers\nfor num in numbers:\n    # Check if the number is a perfect square\n    if math.isqrt(num) ** 2 == num:\n        # Add the number to the list\n        perfect_square_list.append(num)\n# Print the number of perfect squares in the list\nprint(len(perfect_square_list))"
  },
  {
    "example_id": 34,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "N = 531340\nN = N % 210\nprint(N)"
  },
  {
    "example_id": 35,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1482.0"
    ],
    "annotated_answers": [
      "1147.0"
    ],
    "solution": "# Use math library\nmax_product = 0\nfor i in range(2, 39):\n    for j in range(i+1, 40):\n        product = i * j\n        if product > max_product:\n            max_product = product\nprint(max_product)"
  },
  {
    "example_id": 36,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "504.0",
      "1.100111011000101",
      "36"
    ],
    "annotated_answers": [
      "76028.0"
    ],
    "solution": "# base 8\nx = 324\ny = 111010101110\nprint(np.base_repr(x, 8))\nprint(np.base_repr(y, 2))"
  },
  {
    "example_id": 37,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 16**17*17**18*18**19\nprint(n % 10)"
  },
  {
    "example_id": 38,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "A = 3\nB = 7\nlcm = 1575\ngcd = int(np.gcd(A, B))\nprint(gcd)"
  },
  {
    "example_id": 39,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def gcf(x, y):\n    while y!= 0:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcf_list(l):\n    if len(l) == 0:\n        return 1\n    else:\n        return gcf(l[0], gcf_list(l[1:]))\n\ndef gcf_set(s):\n    l = list(s)\n    return gcf_list(l)\n\nN = 100\nS = set(range(100, 1000, 1))\nprint(gcf_set(S))"
  },
  {
    "example_id": 40,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "b = np.arange(10, 100)\nb_squared = b**2\nb_squared_unique = np.unique(b_squared)\nb_squared_unique = b_squared_unique[np.where(b_squared_unique < 100)]\nprint(len(b_squared_unique))"
  },
  {
    "example_id": 41,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# ones digit of product of odd numbers\nones_digit = np.prod(np.arange(1, 14, 2)) % 10\nprint(ones_digit)"
  },
  {
    "example_id": 42,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "n = 3**17 + 3**10\nm = n + 1\nm = str(m)\nl = len(m)\nd = 11\nn = str(n)\n\nA = int(n[0])\nB = int(n[1])\nC = int(n[2])\n\nif A % 2 == 1 and C % 2 == 1 and B % 3!= 0:\n    if m[l-1] == '1':\n        print(100*A + 10*B + C)\n    else:\n        print(-1)\nelse:\n    print(-1)"
  },
  {
    "example_id": 43,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "601216.0"
    ],
    "annotated_answers": [
      "6710.0"
    ],
    "solution": "r = 1342 % 13\nmin_num = 1342 * math.ceil(1342 / r)\nprint(min_num)"
  },
  {
    "example_id": 44,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4641.0",
      "13.0",
      "357.0",
      "357.0",
      "17.0",
      "21.0",
      "21.0",
      "21.0",
      "1.0"
    ],
    "annotated_answers": [
      "142.0"
    ],
    "solution": "n = 4641\nwhile n > 9:\n    for i in range(10, 100):\n        if n % i == 0:\n            print(n, '=', i, '*', n // i)\n            break\n    n = n // i"
  },
  {
    "example_id": 45,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 4037\nx = 17\nx_inv = 1/x\nn_digits = n*math.log10(x_inv)\nprint(int(np.round(x_inv*10**n_digits)))"
  },
  {
    "example_id": 46,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.0"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "coins = [2747, 3523, 3737, 2652]\nbills = [1000, 500, 100, 50, 10, 5, 1]\ntotal = 0\nfor coin in coins:\n    for bill in bills:\n        if coin // bill > 0:\n            total += coin // bill * bill\n            coin %= bill\n            break\nprint(total)"
  },
  {
    "example_id": 47,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "4.0",
      "3.0",
      "5.0",
      "3.0",
      "6.0",
      "3.0",
      "7.0",
      "3.0",
      "8.0",
      "3.0",
      "9.0",
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "for b in range(2, 10):\n    print(b)\n    if str(2013)[-1] == str(2013)[-1]:\n        print(\"Ends in 3\")\n    else:\n        print(\"Does not end in 3\")"
  },
  {
    "example_id": 48,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "314.0"
    ],
    "solution": "a = 0\nfor i in range(3):\n    a = (a * 10 + 2) % 3\nfor i in range(5):\n    a = (a * 10 + 4) % 5\nfor i in range(7):\n    a = (a * 10 + 6) % 7\nfor i in range(9):\n    a = (a * 10 + 8) % 9\nprint(a)"
  },
  {
    "example_id": 49,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "u_vals = np.arange(1, 101)\nu_vals = u_vals[np.mod(14*u_vals, 100) == 46]\nprint(np.mean(u_vals))"
  },
  {
    "example_id": 50,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n_girls = 8\nn_rows = 4\nleft_over = n_girls % n_rows\nprint(left_over)"
  },
  {
    "example_id": 51,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "# Define the number of bags you have\nbags = 7\n\n# Define the number of coins in each bag\ncoins = 53\n\n# Define the total number of coins you have\ntotal_coins = bags * coins\n\n# Define the minimum number of coins you could have had\nmin_coins = int(np.ceil(total_coins/bags))\n\n# Print the minimum number of coins you could have had\nprint(min_coins)"
  },
  {
    "example_id": 52,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "print(81_9 - 72_9)"
  },
  {
    "example_id": 53,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "12.0",
      "12.0",
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b, c = 2, 4, 7\nproduct = 2 * a * b + b * c + c * a\nproduct2 = a * b * c + b * c * a + c * b * a\nproduct3 = a * b * c + b * c * a + c * b * a\nproduct4 = a + b + c\nremainder = product % 13\nremainder2 = product2 % 13\nremainder3 = product3 % 13\nremainder4 = product4 % 13\nprint(remainder, remainder2, remainder3, remainder4)"
  },
  {
    "example_id": 54,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3367.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "N = 10101\nfactors = np.array([], dtype=int)\nfor i in range(2, int(math.sqrt(N)) + 1):\n    if N % i == 0:\n        factors = np.append(factors, i)\n        N = N // i\n        factors = np.append(factors, N)\n        break\nprint(factors)"
  },
  {
    "example_id": 55,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "560.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "m = 16\nn = 24\ngcd = 8\nlcm = 112\n\n# Least possible value of m+n\nprint(lcm / gcd * (m + n))"
  },
  {
    "example_id": 56,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "common_divisors = set(divisors(48)) & set(divisors(156))\nprint(len(common_divisors))"
  },
  {
    "example_id": 57,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "n = 12\nk = 3\nlcm = n*k\ngcd = math.gcd(n,k)\nprint(lcm/gcd)"
  },
  {
    "example_id": 58,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "count = 0\nfor i in range(1, 1000):\n    if i % 20 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 59,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Calculate the units digit\nunits_digit = 13**19 * 19**13 % 10\nprint(units_digit)"
  },
  {
    "example_id": 60,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1147.0"
    ],
    "annotated_answers": [
      "222.0"
    ],
    "solution": "n = 1147\nprint(n)"
  },
  {
    "example_id": 61,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "4.0",
      "2.0",
      "8.0",
      "5.0",
      "7.0",
      "1.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b = 3, 7\nnum_digits = 9\ndecimal_rep = np.array([int(a / b * 10 ** i) % 10 for i in range(num_digits)])\nprint(decimal_rep)"
  },
  {
    "example_id": 62,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "3300.0"
    ],
    "solution": "r = 1000\nlcm = math.lcm(r, 100)\ngcd = math.gcd(r, 100)\nprint(lcm)"
  },
  {
    "example_id": 63,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "cubes = []\nfor i in range(1, 8):\n    if i**3 % 3 == 0 and i**3 % 5 == 0 and i**3 % 7 == 0:\n        cubes.append(i)\nprint(len(cubes))"
  },
  {
    "example_id": 64,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "0.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "a = 563\nb = 635\n\n# when a is written in base 9, its last digit is 5\nprint(a%9)\n\n# when b is written in base 6, its last two digits are 53\nprint(b%6)\n\n# when a-b is written in base 3, its last two digits are 24\nprint((a-b)%3)"
  },
  {
    "example_id": 65,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "num_of_fractions = 0\nfor n in range(1, 100):\n    if n % 99 == 0:\n        num_of_fractions += 1\nprint(num_of_fractions)"
  },
  {
    "example_id": 66,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "992012994.0",
      "991019988.0",
      "990026982.0",
      "989033976.0",
      "988040970.0",
      "992012994.0",
      "986054958.0",
      "985061952.0",
      "984068946.0",
      "983075940.0"
    ],
    "annotated_answers": [
      "2743.0"
    ],
    "solution": "max_value = 999\n\nfor i in range(max_value, 100, -1):\n    for j in range(max_value, 100, -1):\n        for k in range(max_value, 100, -1):\n            if (i * j * k) % 14 == 0:\n                print(i * j * k)\n                break"
  },
  {
    "example_id": 67,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "841.0"
    ],
    "solution": "k = 0\nwhile True:\n    if (k % 3 == 1 and k % 4 == 1 and k % 5 == 1 and k % 6 == 1 and k % 7 == 1):\n        print(k)\n        break\n    k += 1"
  },
  {
    "example_id": 68,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10199.0"
    ],
    "annotated_answers": [
      "11189.0"
    ],
    "solution": "for i in range(10000, 99999):\n    num = list(str(i))\n    sum = 0\n    for j in num:\n        sum += int(j)\n    if sum == 20:\n        print(i)\n        break"
  },
  {
    "example_id": 69,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor num in range(1, 101):\n    sum += num\nprint(sum % 6)"
  },
  {
    "example_id": 70,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "S = 0\nfor i in range(2010, 4019):\n    S += i\nprint(S % 2009)"
  },
  {
    "example_id": 71,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 5*23\nb = 2\nwhile n % b!= 1:\n    b += 1\nprint(b)"
  },
  {
    "example_id": 72,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6282726554257878"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 131\nb = 10\nn = a\nresult = np.power(n, 1/b)\nprint(result)"
  },
  {
    "example_id": 73,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "2.0",
      "3.0",
      "7.0",
      "3.0",
      "14.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def is_int(x):\n    return int(x) == x\n\na_max = 10000\nfor a in range(1, a_max + 1):\n    for b in range(1, a_max + 1):\n        if gcd(a, b) == 1 and is_int(a / b + 14 * b / (9 * a)):\n            print(f\"({a}, {b})\")"
  },
  {
    "example_id": 74,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0",
      "22.0",
      "24.0"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "# Define the possible values of the three balls\npossible_values = [2, 4, 8]\n\n# Define the possible sums\npossible_sums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n\n# Define the possible distinct sums\ndistinct_sums = []\nfor i in range(len(possible_sums)):\n    for j in range(i+1, len(possible_sums)):\n        distinct_sums.append(possible_sums[i] + possible_sums[j])\n\n# Print the distinct sums\nprint(distinct_sums)"
  },
  {
    "example_id": 75,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Fibonacci sequence\ndef fib(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a\n\n# greatest common divisor\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\n# greatest common divisor of consecutive fibonacci numbers\ndef consecutive_fib_gcd(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        f1 = fib(n)\n        f2 = fib(n-1)\n        return gcd(f1, f2)\n\n# find maximum gcd\ndef max_gcd(n):\n    return max(consecutive_fib_gcd(i) for i in range(n))\n\n# print the maximum gcd\nprint(max_gcd(100))"
  },
  {
    "example_id": 76,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "104081.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "def divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i*i!= n:\n                divisors.append(n // i)\n    return divisors\n\ndef relative_prime(a, b):\n    return gcd(a, b) == 1\n\ndef get_consecutive_digits(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return digits\n\ndef get_consecutive_digits_rel_prime(n):\n    digits = get_consecutive_digits(n)\n    return all(relative_prime(digits[i], digits[i+1]) for i in range(len(digits)-1))\n\ndef count_consecutive_digits_rel_prime(n):\n    count = 0\n    for i in range(1, n+1):\n        if get_consecutive_digits_rel_prime(i):\n            count += 1\n    return count\n\ndef count_consecutive_digits_rel_prime_6digit():\n    count = 0\n    for i in range(100000, 1000000):\n        if get_consecutive_digits_rel_prime(i):\n            count += 1\n    return count\n\nprint(count_consecutive_digits_rel_prime_6digit())"
  },
  {
    "example_id": 77,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "25.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 9\nb = 7\n\n# a+b\nsum = a + b\nprint(sum)\n\n# 2a+b\ndouble_sum = 2 * a + b\nprint(double_sum)\n\n# a-b\ndiff = a - b\nprint(diff)\n\nlast_digit = diff % 10\nprint(last_digit)"
  },
  {
    "example_id": 78,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.274"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "print(137/500)"
  },
  {
    "example_id": 79,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "for n in range(1, 1000000):\n    if n % 3 == 1 and n % 4 == 1 and n % 5 == 4:\n        print(n)\n        break"
  },
  {
    "example_id": 80,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1239.0"
    ],
    "annotated_answers": [
      "687.0"
    ],
    "solution": "D = 9\nXY = 123\nXYD = XY * 10 + D\nprint(XYD)"
  },
  {
    "example_id": 81,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "4.0",
      "127.0",
      "254.0",
      "508.0"
    ],
    "annotated_answers": [
      "231.0"
    ],
    "solution": "N = 508\na = 33\nb = 11\nc = 77\nd = 1\n\ndivisors = np.array([d for d in range(1, N+1) if N % d == 0])\n\nprint(divisors)"
  },
  {
    "example_id": 82,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "n = 12\nwhile True:\n    x = n*n - 4*n\n    y = n*n + 4*n\n    z = n*n - 2*n\n    w = n*n + 2*n\n    if (x % 4 == 0) & (y % 4 == 0) & (z % 4 == 0) & (w % 4 == 0):\n        break\n    n += 1\ng = gcd(x, y, z, w)\nprint(g)"
  },
  {
    "example_id": 83,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "def count_divisors(n):\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n\ndef count_divisors_of_2n(n):\n    divisors = 0\n    for i in range(1, 2*n+1):\n        if i % 2 == 0:\n            divisors += 1\n    return divisors\n\ndef count_divisors_of_3n(n):\n    divisors = 0\n    for i in range(1, 3*n+1):\n        if i % 3 == 0:\n            divisors += 1\n    return divisors\n\nn = 1\nwhile count_divisors(n) == 28 and count_divisors_of_2n(n) == 28 and count_divisors_of_3n(n) == 30:\n    n += 1\n\nprint(count_divisors(n))"
  },
  {
    "example_id": 84,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "frac = np.array([4321, 5**7*2**8])\nfrac_dec = np.around(frac/np.lcm.reduce(frac), decimals=0)\nfrac_dec_digits = np.around(frac_dec, decimals=0).astype(int)\nfrac_dec_digits = np.around(frac_dec, decimals=0).astype(int)\nfrac_dec_digits = np.around(frac_dec, decimals=0).astype(int)\nsum_digits = frac_dec_digits.sum()\nprint(sum_digits)"
  },
  {
    "example_id": 85,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "21000.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "m = 21\nn = 1000\nmn = m*n\nprint(gcd(m, n), mn)"
  },
  {
    "example_id": 86,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "189.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def f(x):\n    return 12*x+7\n\ndef g(x):\n    return 5*x+2\n\ndef h(x):\n    return gcd(f(x), g(x))\n\nsum = 0\nfor i in range(1, 100):\n    sum += h(i)\nprint(sum)"
  },
  {
    "example_id": 87,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "79.0",
      "2.0",
      "2.0",
      "78.0",
      "1.0",
      "3.0",
      "77.0",
      "4.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a, b = 0, 0\nsum = 80\nfor i in range(1, 100):\n    for j in range(1, 100):\n        if i+j == sum:\n            a, b = i, j\n            gcd_val = gcd(a, b)\n            if gcd_val == 1:\n                print(\"Largest possible value of gcd(a,b) is 1\")\n                print(\"a = \", a, \" and b = \", b)\n                break\n            elif gcd_val > 1:\n                print(\"Largest possible value of gcd(a,b) is \", gcd_val)\n                print(\"a = \", a, \" and b = \", b)\n                break\n            else:\n                print(\"a = \", a, \" and b = \", b)\n                print(\"Largest possible value of gcd(a,b) is \", gcd_val)\n                break"
  },
  {
    "example_id": 88,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 1\nfor i in range(1, 11):\n    if i % 5 == 0:\n        continue\n    N *= i\nprint(N % 10)"
  },
  {
    "example_id": 89,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "product = 1\nfor i in range(1, 100):\n    product *= 2**i\n\nprint(product % 100)"
  },
  {
    "example_id": 90,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 0\nfor m in range(1, 9):\n    if gcd(m, 8) == 1:\n        n += 1\nprint(3**n % 8)"
  },
  {
    "example_id": 91,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "21.0",
      "199.0",
      "0.0",
      "22.0",
      "198.0",
      "0.0",
      "23.0",
      "197.0",
      "0.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "# \nn = 200\nfor i in range(0, n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if i + j + k == 220:\n                print(i, j, k)"
  },
  {
    "example_id": 92,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.22176684690383"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "x = 735\na = 4\nax = x * a\nsqrt_ax = math.sqrt(ax)\nprint(sqrt_ax)"
  },
  {
    "example_id": 93,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# 91145 + 91146 + 91147 + 91148\nsum = 91145 + 91146 + 91147 + 91148\nprint(sum % 4)"
  },
  {
    "example_id": 94,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "remainder = pow(24, 11**2-2, 11**2)\nprint(remainder)"
  },
  {
    "example_id": 95,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\na = 3339\nb = 2961\nc = 1491\nprint(gcd(gcd(a, b), c))"
  },
  {
    "example_id": 96,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\na = np.prod(range(1, 10 + 1)) + 2\nb = np.prod(range(1, 11 + 1)) + 8\nprint(gcd(a, b))"
  },
  {
    "example_id": 97,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "n = 65\ncubes = []\nsquares = []\nfor i in range(1, int(n**(1/3))+1):\n    if n % i**3 == 0:\n        cubes.append(i)\nfor i in range(1, int(n**(1/2))+1):\n    if n % i**2 == 0:\n        squares.append(i)\nfor cube in cubes:\n    for square in squares:\n        if cube**3 == square**2:\n            print(cube**3)\n            print(square**2)\n            print(cube**3 + square**2)\n            break"
  },
  {
    "example_id": 98,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 19**19 + 99**99\nprint(n % 10)"
  },
  {
    "example_id": 99,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45537549124.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = [0, 1]\nb = [1, 2]\nfor i in range(2, 51):\n    a.append(a[i-1] + b[i-2])\n    b.append(a[i-2] + b[i-1])\nprint(a[50] + b[50])"
  },
  {
    "example_id": 100,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "A = 5\nB = 2\n\nA_7 = A % 10\nB_7 = B % 10\n\nA = A // 10\nB = B // 10\n\nprint(A_7*B_7)"
  },
  {
    "example_id": 101,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "103.0"
    ],
    "solution": "n = 3\nwhile n % 7!= 0:\n    n += 1\n\nnum_leaves = (n // 7) * 2\nprint(num_leaves)"
  },
  {
    "example_id": 102,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "288.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 144\nb = 144\n\nlcm = a * b / gcd(a, b)\nlcm = 144\n\ngcd = 144\n\nsum = a + b\nsum = 288\n\nprint(sum)"
  },
  {
    "example_id": 103,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 10\nwhile n % 10 == 0:\n    n += 1\nprint(n-1)"
  },
  {
    "example_id": 104,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "0.0",
      "6.0",
      "2.0",
      "2.0",
      "6.0",
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = np.array([1, 4, 9, 16, 25, 36, 49, 64, 81])\nb = np.array([1, 8, 25, 64, 121, 216, 343, 512, 729])\n\nunits = np.mod(a + b, 10)\nprint(units)"
  },
  {
    "example_id": 105,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "max_draws = 0\nfor i in range(1, 16):\n    for j in range(i+1, 16):\n        product = i * j\n        if math.sqrt(product) % 1 == 0:\n            max_draws = max(max_draws, j - i + 1)\n            break\nprint(max_draws)"
  },
  {
    "example_id": 106,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 2863\nb = 1344\nprint(gcd(a, b))"
  },
  {
    "example_id": 107,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "91.0"
    ],
    "annotated_answers": [
      "91.0"
    ],
    "solution": "n = 36\nsum_positive_factors = 0\nfor i in range(1, int(n**0.5)+1):\n    if n % i == 0:\n        sum_positive_factors += i\n        if i*i!= n:\n            sum_positive_factors += n // i\nprint(sum_positive_factors)"
  },
  {
    "example_id": 108,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "product = 20\nfor i in range(1, 20):\n    product *= i\nprint(product % 10)"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 2003 % 11\nprint(remainder)"
  },
  {
    "example_id": 110,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0",
      "107.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "b = 321\na = 57\ngcd_val = gcd(a, b)\na_in_b = a // gcd_val\nb_in_a = b // gcd_val\nprint(a_in_b, b_in_a)"
  },
  {
    "example_id": 111,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 3\nk = 0\nfor i in range(1, 2**n):\n    if pow(2, n, 13) == 3:\n        k += 1\nprint(k)"
  },
  {
    "example_id": 112,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "468.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "def sum_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i**2!= n:\n                divisors.append(n // i)\n    return sum(divisors)\n\nprint(sum_divisors(198))"
  },
  {
    "example_id": 113,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2420.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(44*55)"
  },
  {
    "example_id": 114,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef reverse_prime(n):\n    return int(str(n)[::-1])\n\ndef get_next_prime(n):\n    while True:\n        n += 1\n        if is_prime(n):\n            return n\n\ndef get_next_reversible_prime(n):\n    while True:\n        n = get_next_prime(n)\n        if is_prime(reverse_prime(n)):\n            return n\n\nprint(get_next_reversible_prime(17))"
  },
  {
    "example_id": 115,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nproduct = 1\nfor i in numbers:\n    product *= i\n\ndivisors = 0\nfor i in numbers:\n    if product % i == 0:\n        divisors += 1\n\nprint(divisors)\n\na = 3\nb = 2\nc = 1\n\nprint(a + b + c)"
  },
  {
    "example_id": 116,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Divide by 7 and get the remainder\nremainder = 5\nprint(remainder)\n\n\n# Multiply by 5 and then divide by 7\nproduct = 5 * 2003\ndivisible_by_7 = product % 7\nprint(divisible_by_7)"
  },
  {
    "example_id": 117,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "sum_of_perfect_cubes = 0\nfor i in range(1, 22):\n    sum_of_perfect_cubes += i ** 3\nprint(sum_of_perfect_cubes % 10)"
  },
  {
    "example_id": 118,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "k = 0\nwhile True:\n    k += 1\n    num = k * 357000 + k * 5\n    if num % 18 == 0:\n        print(k)\n        break"
  },
  {
    "example_id": 119,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "N = 7000\nr = (N-1) // 700 + 1\nprint(r)"
  },
  {
    "example_id": 120,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8529.0"
    ],
    "annotated_answers": [
      "695.0"
    ],
    "solution": "base = 10\nnumber = 852_9\nprint(number)"
  },
  {
    "example_id": 121,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "remainder = 5**999999 % 7\nprint(remainder)"
  },
  {
    "example_id": 122,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "4.0",
      "6.0"
    ],
    "annotated_answers": [
      "754.0"
    ],
    "solution": "n = 3254_6\nbase = 10\ndigits = []\nwhile n > 0:\n    digits.append(n % base)\n    n //= base\ndigits.reverse()\nprint(digits)"
  },
  {
    "example_id": 123,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def inverse(a, m):\n    return pow(a, m-2, m)\n\nprint(inverse(3, 19) + inverse(13, 19) % 19)"
  },
  {
    "example_id": 124,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1152.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "remainder = 72 * 16\nprint(remainder)"
  },
  {
    "example_id": 125,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 199\nsum = np.sum(np.arange(1, n+1, 2))\nprint(sum % 7)"
  },
  {
    "example_id": 126,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "102.0"
    ],
    "solution": "# Find the greatest common divisor of 2m and 3n\n# m = 24n + 51\n# m = 24(3n + 13) + 51\n# m = 72n + 131\n# m = 3(24n + 13) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 131\n# m = 3(2n + 4) + 1"
  },
  {
    "example_id": 127,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "71.0"
    ],
    "solution": "# Find the number of pages\nnum_pages = int(np.ceil(11/5))\nprint(num_pages)"
  },
  {
    "example_id": 128,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# Define variables\nred = 8\ngreen = 13\nwhite = 0\n\n# Calculate total amount of jelly beans\ntotal = red + green + white\n\n# Calculate the minimum number of ounces of white jelly beans needed\nwhite = int(np.ceil(total/16))\n\n# Print result\nprint(white)"
  },
  {
    "example_id": 129,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "num_of_congruent_integers = 0\nfor i in range(-200, 201):\n    if i % 13 == 5:\n        num_of_congruent_integers += 1\nprint(num_of_congruent_integers)"
  },
  {
    "example_id": 130,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "x = 47\nremainder = 30*x - 42\nprint(x)"
  },
  {
    "example_id": 131,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def terminates(n):\n    decimal = n/1375\n    string = str(decimal)\n    if string.find('.') == -1:\n        return True\n    else:\n        return False\n\ncount = 0\nfor i in range(1, 1001):\n    if terminates(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 132,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "6647.0"
    ],
    "solution": "n = 340\nbase = 7\n\n# convert to base 7\nresult = []\nwhile n > 0:\n    result.append(n % base)\n    n //= base\n\nprint(result)"
  },
  {
    "example_id": 133,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "116.0"
    ],
    "annotated_answers": [
      "611.0"
    ],
    "solution": "def greatest_three_digit_integer(n):\n    for i in range(100, 999):\n        digits = [int(digit) for digit in str(i)]\n        if np.prod(digits) == n:\n            return i\n    return None\n\nprint(greatest_three_digit_integer(6))"
  },
  {
    "example_id": 134,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.8668778143375"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# \nn1 = 920000\nn2 = 8000000\nn = n1 * n2\n\n# \nnum_zeros = math.log10(n)\nprint(num_zeros)"
  },
  {
    "example_id": 135,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = pow(1999, 2000, 5)\nprint(remainder)"
  },
  {
    "example_id": 136,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_sum(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n\ndef get_probability_prime(n):\n    if get_sum(n)!= 9:\n        return 0\n    if is_prime(n):\n        return 1\n    return 0\n\ndef get_probability(n):\n    count = 0\n    for i in range(n):\n        if get_probability_prime(i):\n            count += 1\n    return count / n\n\ndef main():\n    print(get_probability(10**8))\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 137,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12007.0"
    ],
    "solution": "print(441 % 7)"
  },
  {
    "example_id": 138,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def solve_system(x, y):\n    return x-1 == 1-x % 12 and x-2 == 2-x % 12\n\ndef count_solutions(x, y):\n    return sum(1 for x in range(12) for y in range(12) if solve_system(x, y))\n\nprint(count_solutions(0, 0))"
  },
  {
    "example_id": 139,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "217.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Find the number of solutions to the system\n# of equations:\n#\n# 10x + 10y = 100\n# 10x - 10y = 10\n#\n# which means that x and y are divisible\n# by 10.\n#\n# The number of solutions is equal to the\n# number of divisors of 100, which is 4.\n\ndef count_solutions(x, y):\n    \"\"\"\n    Return the number of solutions to the\n    system of equations:\n\n    10x + 10y = 100\n    10x - 10y = 10\n\n    which means that x and y are divisible\n    by 10.\n    \"\"\"\n    return sum_divisors(100)\n\ndef sum_divisors(n):\n    \"\"\"\n    Return the sum of the divisors of n.\n    \"\"\"\n    return sum([d for d in divisors(n) if d > 0])\n\ndef divisors(n):\n    \"\"\"\n    Return the divisors of n.\n    \"\"\"\n    return [d for d in range(1, n+1) if n % d == 0]\n\nprint(count_solutions(10, 10))"
  },
  {
    "example_id": 140,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "512.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 3740\ndivisors = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\n\n# \nfor divisor in divisors:\n    if n % divisor == 0:\n        print(divisor)\n        break\n\n# \nfor divisor in divisors:\n    if n % divisor == 0:\n        print(divisor)\n        break\n\n# \nprint(divisors[9])"
  },
  {
    "example_id": 141,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "41305.0"
    ],
    "solution": "# Define two variables\nx = 1234_5\ny = 2341_5\n# Find sum\nsum = x + y\n# Express in base 5\nsum_base_5 = sum % 5\nprint(sum_base_5)"
  },
  {
    "example_id": 142,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "N = int(8/2)\nprint(N)"
  },
  {
    "example_id": 143,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "503.0"
    ],
    "annotated_answers": [
      "503.0"
    ],
    "solution": "num_of_whole_numbers = 0\nfor i in range(18632):\n    if i % 37 == 23:\n        num_of_whole_numbers += 1\nprint(num_of_whole_numbers)"
  },
  {
    "example_id": 144,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 2\nremainder = (n + 2)*(n + 4)*(n + 6) % 7\nprint(remainder)"
  },
  {
    "example_id": 145,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40000.0"
    ],
    "annotated_answers": [
      "1681.0"
    ],
    "solution": "# a and b are the two two-digit perfect square numbers\na, b = 100, 100\n\n# x and y are the two numbers that are next to each other\nx, y = 100, 100\n\n# The four-digit square number is a^2 + b^2\nfour_digit_square = (a**2) + (b**2)\n\n# The four-digit perfect square number is a^2 + b^2 + x^2 + y^2\nfour_digit_perfect_square = four_digit_square + (x**2) + (y**2)\n\nprint(four_digit_perfect_square)"
  },
  {
    "example_id": 146,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "# Find the three consecutive primes\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n# Sum the three consecutive primes\nsum_of_primes = sum(primes[1:4])\n\n# Square the sum\nsum_of_primes_squared = sum_of_primes ** 2\n\n# Find the largest prime\nlargest_prime = primes[3]\n\n# Print the solution\nprint(largest_prime)"
  },
  {
    "example_id": 147,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Sally's marbles\nsally_marbles = 239\n# Wei-Hwa's marbles\nweihwa_marbles = 174\n# Zoe's marbles\nzoe_marbles = 83\n# Total marbles\ntotal_marbles = sally_marbles + weihwa_marbles + zoe_marbles\n# Number of marbles to remove\nnum_marbles_to_remove = int(np.ceil(total_marbles / 10))\nprint(num_marbles_to_remove)"
  },
  {
    "example_id": 148,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "# x and y are the two digits that go in the blanks\nx, y = 7, 3\n\n# The statement is always true if x and y are the digits that satisfy the equation\n# 2x \u2261 y + 5 (mod 9)\n# x \u2261 y + 5 (mod 9)\n# x - y - 5 \u2261 0 (mod 9)\n# x - y - 5 = 9k for some integer k\n\n# Solving for x\nx = y + 5\n\n# Solving for y\ny = x - 5\n\n# Multiplying x and y\nproduct = x * y\n\nprint(product)"
  },
  {
    "example_id": 149,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 9\nn_factorial = math.factorial(n)\nremainder = n_factorial % 10\nprint(remainder)"
  },
  {
    "example_id": 150,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "a, b = 10**2, 10**4\n\n# find the smallest possible value of the least common multiple of a and b\nsmallest_lcm = 0\n\n# find the greatest common divisor of a and b\ngcd_a_b = gcd(a, b)\n\n# find the sum of the divisors of a and b\nsum_divisors_a = sum_divisors(a)\nsum_divisors_b = sum_divisors(b)\n\n# find the sum of the divisors of the greatest common divisor of a and b\nsum_divisors_gcd = sum_divisors(gcd_a_b)\n\n# find the sum of the divisors of the least common multiple of a and b\nsum_divisors_lcm = sum_divisors(a*b)\n\n# find the smallest possible value of the least common multiple of a and b\nsmallest_lcm = (sum_divisors_a*sum_divisors_b)//(sum_divisors_gcd*sum_divisors_lcm)\nprint(smallest_lcm)"
  },
  {
    "example_id": 151,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2857142857142858",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "j = 3\nresult = (7j+3)*3/7\nprint(result)"
  },
  {
    "example_id": 152,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10011010010.0"
    ],
    "annotated_answers": [
      "110102.0"
    ],
    "solution": "answer = 1 + 11 + 111 + 1111\nprint(bin(answer))"
  },
  {
    "example_id": 153,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "units = 7**53\nprint(units % 10)"
  },
  {
    "example_id": 154,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "704.0",
      "706.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# \nx = 972 - 268\ny = 973 - 267\nprint(x, y)\n\n\n# \nz = 974 - 266\nw = 968 - 272\nprint(z, w)\n\n\n# \nt = 967 - 273\ns = 966 - 274\nprint(t, s)\n\n\n# \nu = 999 - 222\nprint(u)\n\n\n# \nv = (972 - 268) * (973 - 267) * (974 - 266) + (968 - 272) * (967 - 273) * (966 - 274) - (999 - 222) ** 3\nprint(v)\n\n\n# \nu_divisors = [x for x in range(1, 10) if u % x == 0]\nprint(u_divisors)\n\n\n# \nv_divisors = [x for x in range(1, 10) if v % x == 0]\nprint(v_divisors)\n\n\n# \nu_sum_divisors = sum_divisors(u)\nv_sum_divisors = sum_divisors(v)\nprint(u_sum_divisors)\n\n\n# \nu_gcd = gcd(u, u_sum_divisors)\nv_gcd = gcd(v, v_sum_divisors)\nprint(u_gcd)\n\n\n# \nu_units_digit = u % u_gcd\nv_units_digit = v % v_gcd\nprint(u_units_digit)"
  },
  {
    "example_id": 155,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0",
      "13.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "rows_a = 105 // 8\nrows_b = (105 + 6) // 8\nprint(rows_a)\nprint(rows_b)"
  },
  {
    "example_id": 156,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3078.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Base 4:\nA = np.arange(0, 4)\n# Base 9:\nB = np.arange(0, 9)\nC = np.arange(0, 9)\n\n# Calculate the sum of all possible values of A, B, and C.\ntotal_sum = 0\nfor a in A:\n    for b in B:\n        for c in C:\n            total_sum += a + b + c\n\nprint(total_sum)"
  },
  {
    "example_id": 157,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12370500.0",
      "12370500.0"
    ],
    "annotated_answers": [
      "5636.0"
    ],
    "solution": "# Define 4-digit numbers using 1, 2, 3 and 4\nn = 1234\nn_prime = 4123\n\n# Calculate least and greatest positive multiples of 4 using 1, 2, 3 and 4\nmultiples = np.array([i for i in range(1000, 9999) if i % 4 == 0])\nmultiples_prime = np.array([i for i in range(1000, 9999) if i % 4 == 0])\n\n# Calculate sum of least and greatest positive multiples of 4\nsum_multiples = sum(multiples)\nsum_multiples_prime = sum(multiples_prime)\n\nprint(sum_multiples)\nprint(sum_multiples_prime)"
  },
  {
    "example_id": 158,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.02857142857142857"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "print(35**-1 % 47)"
  },
  {
    "example_id": 159,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0",
      "24.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "for n in range(2, 100):\n    if (2**24)**(1/n) == int(2**24**(1/n)):\n        print(f\"{n} is a perfect {n}th power\")"
  },
  {
    "example_id": 160,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# (3^(-1) + 5^(-1))^(-1) = 3^(-1) * 5^(-1) = 3 * 5 = 15\n# 15 % 31 = 15\nprint(15 % 31)"
  },
  {
    "example_id": 161,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.0"
    ],
    "annotated_answers": [
      "1155.0"
    ],
    "solution": "# Find the smallest possible value of abcd\n\n# Given\nab = 100\nbc = 20\ncd = 50\n\n# Find the smallest possible value of abcd\nabcd = min(ab*bc*cd, ab*cd*20, bc*cd*10)\n\n# Print the smallest possible value of abcd\nprint(abcd)"
  },
  {
    "example_id": 162,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "k = int(np.power(240, 1/3))\nprint(k)"
  },
  {
    "example_id": 163,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10680.0"
    ],
    "annotated_answers": [
      "-2213.0"
    ],
    "solution": "num1 = 121_3\nnum2 = 2122_3\nnum3 = 1200_3\nnum4 = 2111_3\n\nprint(num1 + num2 - num3 - num4)"
  },
  {
    "example_id": 164,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "0.0",
      "1.0",
      "1.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "n = 84\nnum_divisors = np.zeros(n+1)\nfor i in range(1, n+1):\n    for j in range(1, n+1):\n        if i*j == n:\n            num_divisors[i] += 1\nprint(num_divisors)"
  },
  {
    "example_id": 165,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3525"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(141/400 % 10)"
  },
  {
    "example_id": 166,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2016.0"
    ],
    "solution": "# Define a function to check if a number is nice\ndef is_nice(n):\n    # Find the sum of the divisors of n\n    divisor_sum = sum_divisors(n)\n    # Check if the sum is equal to n\n    if divisor_sum == n:\n        # Return true if the sum is equal to n\n        return True\n    # Otherwise return false\n    return False\n\n# Create a list of numbers in the range 2010-2019\nnumbers = np.arange(2010, 2020)\n\n# Initialize a counter for the number of nice numbers\nnice_count = 0\n\n# Iterate through the numbers in the range\nfor n in numbers:\n    # Check if the number is nice\n    if is_nice(n):\n        # If it is nice, increment the counter\n        nice_count += 1\n\n# Print the sum of the nice numbers\nprint(nice_count)"
  },
  {
    "example_id": 167,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def divisors(n):\n    return [i for i in range(1, int(n**0.5) + 1) if n % i == 0]\n\ndef sum_divisors(n):\n    return sum(divisors(n))\n\ndef is_bouncy_prime(n):\n    f = sum_divisors(n)\n    if f == n:\n        return False\n    else:\n        g = sum_divisors(f)\n        return g!= f\n\ndef find_bouncy_prime():\n    n = 1\n    while True:\n        if is_bouncy_prime(n):\n            return n\n        n += 1\n\nprint(find_bouncy_prime())"
  },
  {
    "example_id": 168,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define the modulus\nmod = 13\n\n# Define the list of integers\nintegers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n# Define the list of integers to be erased\nerase = [1, 2, 3, 4, 5, 6]\n\n# Define the list of integers that should not be erased\nnot_erase = []\n\n# Loop through the integers\nfor i in range(len(integers)):\n    # If the integer is not in the list to be erased\n    if integers[i] not in erase:\n        # Add the integer to the list of integers to not erase\n        not_erase.append(integers[i])\n\n# Print the only integer that should not be erased\nprint(not_erase[0])"
  },
  {
    "example_id": 169,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "4.0",
      "64.0",
      "8.0",
      "64.0",
      "22.0",
      "64.0",
      "67.0",
      "64.0",
      "264.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "m = 100\na = 9\nb = 3\n\n# Find all possible values for m\nm_values = np.arange(1, 1000)\n\n# Check if m is a possible value\npossible_m = []\nfor i in m_values:\n    if (a**(i-1)) % i == 1 and (b**(i-1)) % i!= 1:\n        possible_m.append(i)\n\nprint(possible_m)"
  },
  {
    "example_id": 170,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5004.0"
    ],
    "annotated_answers": [
      "-36.0"
    ],
    "solution": "n = 333_4\nm = 344_5\nn_divisors = sum(list(map(lambda x: x[0], filter(lambda x: x[1]!= 0, zip(divisors(n), map(lambda x: x % m, divisors(n)))))))\nprint(n_divisors)"
  },
  {
    "example_id": 171,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "num_pencils = 30\nnum_bags = 3\nnum_pencils_per_bag = num_pencils // num_bags\nnum_pencils_left_over = num_pencils % num_bags\nprint(num_pencils_left_over)"
  },
  {
    "example_id": 172,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 10\ny = 10\n\nwhile y < x:\n    x = x - 10\n    y = y + 10\n\nprint(x)"
  },
  {
    "example_id": 173,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = 0\nwhile k < 6:\n    if np.gcd(3*k, 6) == 1:\n        k += 1\n    else:\n        break\nprint(k)"
  },
  {
    "example_id": 174,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "809.0"
    ],
    "annotated_answers": [
      "5067.0"
    ],
    "solution": "a = 3210\nb = 2401\nc = a - b\nprint(c)"
  },
  {
    "example_id": 175,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "t = 19 // 5\nprint(t)"
  },
  {
    "example_id": 176,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def get_exponents(n, max_exponent):\n    exponents = []\n    i = 2\n    while i <= max_exponent:\n        if n % i == 0:\n            exponents.append(i)\n        i += 1\n    return exponents\n\ndef get_largest_exponent(n, max_exponent):\n    exponents = get_exponents(n, max_exponent)\n    if len(exponents) == 0:\n        return None\n    else:\n        return max(exponents)\n\nn = 2**23*3**19*5**17*7**13*11**11*13**7*17**5*19**3*23**2\nmax_exponent = 100\nlargest_exponent = get_largest_exponent(n, max_exponent)\nprint(largest_exponent)"
  },
  {
    "example_id": 177,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "57.0"
    ],
    "annotated_answers": [
      "57.0"
    ],
    "solution": "for i in range(398):\n    if (i * 7) % 398 == 1:\n        print(i)\n        break"
  },
  {
    "example_id": 178,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "# Camera A\na = 6\nb = 11\n\n# Camera B\nc = 7\nd = 7\n\n# Camera A and Camera B\ne = a + b\nf = c + d\n\n# Camera A and Camera B take pictures at the same time at four different times before noon\ng = e + f\n\n# When Camera A and Camera B take their last picture together, how many minutes before noon is it?\nh = gcd(g, 24)\nprint(h)"
  },
  {
    "example_id": 179,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10036.0"
    ],
    "annotated_answers": [
      "1016.0"
    ],
    "solution": "# Brute Force\nfor i in range(10000, 99999):\n    if (i**2 + 4*i + 4) % 55 == (i**2 + 2*i + 1) % 55:\n        print(i)\n        break"
  },
  {
    "example_id": 180,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "num_of_divisors = 0\nfor i in range(1, 9):\n    num_of_divisors += 1\nprint(num_of_divisors)"
  },
  {
    "example_id": 181,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 50):\n    sum += i**2\nprint(sum % 10)"
  },
  {
    "example_id": 182,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-13.0",
      "-13.0"
    ],
    "annotated_answers": [
      "1076.0"
    ],
    "solution": "# a = 62 (mod 99)\na = 62\n\n# b = 75 (mod 99)\nb = 75\n\n# n = 1000\nn = 1000\n\n# (a-b) = 13 (mod 99)\nprint(a - b)\n\n# (a-b) = 13 (mod 99)\nprint(a - b)\n\n# n = 1000\nn = 1000\n\n# n = 1001\nn = 1001\n\n# n = 1002\nn = 1002\n\n#...\n\n# n = 1098\nn = 1098\n\n# n = 1099\nn = 1099"
  },
  {
    "example_id": 183,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.166666666666667"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "m = 7\na = 2\nb = 3\nL = (a + b) % m\nR = (a ** -1 + b ** -1) % m\nprint(L - R)"
  },
  {
    "example_id": 184,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def mod(a, b):\n    return a % b\n\na = 729\nb = 15\nprint(mod(a, b))"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Initialize the greater of the two integers\ngreater = 0\n\n# Find the divisors of 288\ndivisors = [2, 2, 2, 3, 3]\n\n# Find the sum of the divisors\nsum_divisors = sum(divisors)\n\n# If the sum of the divisors is equal to 288\nif sum_divisors == 288:\n    # Find the greatest common divisor of 2 and 3\n    gcd = gcd(2, 3)\n\n    # Find the greater of the two integers\n    greater = 288 / gcd\n\n# Print the greater of the two integers\nprint(greater)"
  },
  {
    "example_id": 186,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "n = 6432\nm = 132\ng = gcd(n, m)\nresult = g + 11\nprint(result)"
  },
  {
    "example_id": 187,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "259.0"
    ],
    "annotated_answers": [
      "226.0"
    ],
    "solution": "def sum_of_distinct_factors(n):\n    factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    return sum(factors)\n\nprint(sum_of_distinct_factors(144))"
  },
  {
    "example_id": 188,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4",
      "2.5"
    ],
    "annotated_answers": [
      "0.8"
    ],
    "solution": "num = 4\nden = 10\n\nnum_dec = num / den\nden_dec = den / num\n\nprint(num_dec)\nprint(den_dec)"
  },
  {
    "example_id": 189,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Find the largest possible value of the greatest common divisor of two consecutive terms, S_n and S_{n+1}, for any n.\n\n# Define the function for the sum of the first n powers of 2\ndef S_n(n):\n    return sum(2**i for i in range(n))\n\n# Find the greatest common divisor of two consecutive terms\ndef gcd_consecutive_terms(n):\n    gcd_list = []\n    for i in range(n):\n        gcd_list.append(gcd(S_n(i), S_n(i+1)))\n    return max(gcd_list)\n\n# Test the function\nn = 10\nprint(gcd_consecutive_terms(n))"
  },
  {
    "example_id": 190,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "if 2*100 + 2*10 + 2*1 % 7 == 0:\n    print(2)\nelse:\n    print(\"Not divisible by 7\")"
  },
  {
    "example_id": 191,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1430.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "M = 130\nN = 1300\nsum_M_N = M + N\nprint(sum_M_N)"
  },
  {
    "example_id": 192,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from math import log10, floor\n\ndef find_nth_digit(n, d):\n    return int(floor(d * 10**n) % 10)\n\nn = 290\nd = 1/37\nprint(find_nth_digit(n, d))"
  },
  {
    "example_id": 193,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# 54 mod 6 = 2\nprint(54 % 6)"
  },
  {
    "example_id": 194,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "0.0",
      "1.0",
      "2.0",
      "210.0",
      "3.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "n = 210\n\n# base 3 representation\nnum_3 = np.array([int(x) for x in str(n)])\nnum_3 = num_3[::-1]\nprint(num_3)\n\n# base 4 representation\nnum_4 = np.array([int(x) for x in str(n)])\nnum_4 = num_4[::-1]\nprint(num_4)\n\n# compare the two arrays\nif np.array_equal(num_3, num_4):\n    print('The number is {} in base 3'.format(n))\nelse:\n    print('The number is not {} in base 3'.format(n))"
  },
  {
    "example_id": 195,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "# Solving the equation:\n# x/y = 1/2 + 1/3 + 1/5 + 1/7 + 1/11 + 1/13 + 1/17 + 1/19 + 1/23 + 1/29\n# Using the gcd function:\na = 1\nb = 1\nfor i in range(2, 2010):\n    if i % 2 == 1 and i % 3 == 2 and i % 5 == 1 and i % 7 == 3 and i % 11 == 4 and i % 13 == 5 and i % 17 == 6 and i % 19 == 7 and i % 23 == 8 and i % 29 == 9:\n        a = gcd(a, i)\n        b = gcd(b, 1/i)\nprint(a + b)"
  },
  {
    "example_id": 196,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor digit in str(59138):\n    sum += int(digit)\nprint(sum)"
  },
  {
    "example_id": 197,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "400.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "def get_new_sides(sides):\n    new_sides = []\n    for side in sides:\n        new_side = side * 0.7\n        new_side = math.floor(new_side)\n        new_sides.append(new_side)\n    return new_sides\n\n\ndef get_new_area(sides):\n    new_sides = get_new_sides(sides)\n    area = new_sides[0] * new_sides[1]\n    return area\n\n\nsides = [24, 36]\narea = get_new_area(sides)\nprint(area)"
  },
  {
    "example_id": 198,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2220.0"
    ],
    "solution": "# Find the least positive integer multiple of 30 that can be written with only the digits 0 and 2.\n\n# Create a list of all possible multiples of 30 using 0 and 2\nmultiples = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n\n# Find the first multiple that can be expressed using only 0s and 2s\nfor i in multiples:\n    if str(i) == ''.join(sorted(str(i))):\n        print(i)\n        break"
  },
  {
    "example_id": 199,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "70.0"
    ],
    "annotated_answers": [
      "119.0"
    ],
    "solution": "for i in range(100):\n    if (i % 7) == 0 and (i % 10) == 0:\n        print(i)"
  },
  {
    "example_id": 200,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 54317/80000\nprint(len(str(n).split('.')[1]))"
  },
  {
    "example_id": 201,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "for i in range(10, 100):\n    digits = [int(j) for j in str(i)]\n    if i == sum(digits) * 2:\n        print(i)"
  },
  {
    "example_id": 202,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11213141.0",
      "5.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 11213141\nprint(n)\nprint(n % 18)"
  },
  {
    "example_id": 203,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def units_digit(n):\n    return int(n) % 10\n\n\ndef solve(n):\n    result = 17**13 - 17\n    return units_digit(result)\n\n\nprint(solve(17))"
  },
  {
    "example_id": 204,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def digits(num):\n    return [int(i) for i in str(num)]\n\ndef digit(num, index):\n    return digits(num)[index]\n\ndef decimal_rep(num, digits):\n    return [int(num * 10**i) % 10 for i in range(digits)]\n\ndef nth_digit(num, n):\n    return decimal_rep(num, n)[n-1]\n\nprint(nth_digit(1/19, 39))"
  },
  {
    "example_id": 205,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "for n in range(101):\n    if 123456 % 101 == n:\n        print(n)\n        break"
  },
  {
    "example_id": 206,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import math\n\ndef get_prime_factors(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_units_digit(product):\n    return str(product)[-1]\n\nproduct = 1\nfor i in range(2, 101):\n    product *= i\n\nunits_digit = get_units_digit(product)\nprint(units_digit)"
  },
  {
    "example_id": 207,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 17 * 18\nprint(n % 4)"
  },
  {
    "example_id": 208,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6347.0"
    ],
    "annotated_answers": [
      "319.0"
    ],
    "solution": "n = 634_7\nbase = 10\n\n# Convert n to base 10\ndef to_base_10(n, base):\n    return int(str(n), base)\n\nprint(to_base_10(n, base))"
  },
  {
    "example_id": 209,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "385.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "N = 1200\ndivisors = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nsum_divisors = np.sum(divisors)\nprint(sum_divisors)"
  },
  {
    "example_id": 210,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n\nprint(divisors(196))"
  },
  {
    "example_id": 211,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 16\nb = 21\nn = 0\nfor i in range(37):\n    if (a - b) % 37 == n:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 212,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "def sum_positive_divisors(n):\n    return sum([i for i in range(1, int(n**0.5)+1) if n % i == 0])\n\ndef sum_distinct_prime_divisors(n):\n    factors = sum_positive_divisors(n)\n    return sum([i for i in range(1, int(factors**0.5)+1) if factors % i == 0])\n\nprint(sum_distinct_prime_divisors(500))"
  },
  {
    "example_id": 213,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "# Solution\nn = 30**4\nd = 1\nfor i in range(1, n):\n    if n % i == 0:\n        d += 1\nprint(d)"
  },
  {
    "example_id": 214,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "12.0",
      "13.0",
      "14.0",
      "15.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for i in range(1, 20):\n    factors = set(range(1, i + 1))\n    if len(factors) > 4:\n        print(i)"
  },
  {
    "example_id": 215,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import numpy as np\n\nx = np.arange(0, 101, 1)\nx = x * 64\ny = x % 66\n\nprint(y[y == 2])"
  },
  {
    "example_id": 216,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 16\nA = 0\nB = 0\nfor i in range(n):\n    if np.gcd(i, n) == 1:\n        A += i\n    else:\n        B += i\nprint(A - B)"
  },
  {
    "example_id": 217,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "43669.0"
    ],
    "annotated_answers": [
      "2145.0"
    ],
    "solution": "a = 2345\nb = 41324\nc = a + b\nprint(c)"
  },
  {
    "example_id": 218,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4070.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "# define base3\nbase3 = 3\n# define base10\nbase10 = 10\n# define age\nage = 1222\n# define legs\nlegs = 2\n# define cane\ncane = 1\n# define total\ntotal = legs + cane\n# define numerator\nnumerator = (age - 1) * total\n# define denominator\ndenominator = base3 ** (total - 1)\n# define fraction\nfraction = numerator / denominator\n# define age_base10\nage_base10 = fraction * base10\n# print age_base10\nprint(age_base10)"
  },
  {
    "example_id": 219,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Initialize variables\nn = 1452\nnum_divisors = 0\n\n# Loop through numbers 1 through 6\nfor i in range(1, 7):\n    if n % i == 0:\n        num_divisors += 1\n\n# Print answer\nprint(num_divisors)"
  },
  {
    "example_id": 220,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "product = 4**5 * 5**13\nprint(len(str(product)))"
  },
  {
    "example_id": 221,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "# define function\ndef sum_of_squares(n):\n    return n**2 + n**0 + n**0 + n**5\n\n# call function\nfinal_two_digits = sum_of_squares(2005) % 100\nprint(final_two_digits)"
  },
  {
    "example_id": 222,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0",
      "3720.0",
      "120.0"
    ],
    "annotated_answers": [
      "248.0"
    ],
    "solution": "a = 120\nb = 3720\nif a % b == 0:\n    print(\"The least common multiple of\", a, \"and\", b, \"is\", b)\nelif b % a == 0:\n    print(\"The least common multiple of\", a, \"and\", b, \"is\", a)\nelse:\n    print(\"The least common multiple of\", a, \"and\", b, \"is\", np.lcm(a, b))"
  },
  {
    "example_id": 223,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "def convert_to_base(num, base):\n    \"\"\"\n    Convert a number to a given base.\n    \"\"\"\n    # Handle negative numbers\n    if num < 0:\n        sign = -1\n    else:\n        sign = 1\n    num *= sign\n    answer = []\n    while num!= 0:\n        answer.append(int(num % base))\n        num //= base\n    if sign < 0:\n        answer.append(-1)\n    return answer[::-1]\n\ndef convert_to_base_62(num):\n    \"\"\"\n    Convert a number to base 62.\n    \"\"\"\n    # Create a list of digits\n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n              'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m',\n              'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n              'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n              'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    # Convert to base 62\n    answer = []\n    while num!= 0:\n        answer.append(digits[num % 62])\n        num //= 62\n    return ''.join(answer[::-1])\n\n# Test the function\nnum = 100\nprint(convert_to_base_62(num))"
  },
  {
    "example_id": 224,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "a = 2\nb = 15\nc = 47\nd = b - a * c\ne = d // c\nprint(e)"
  },
  {
    "example_id": 225,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "6152.0"
    ],
    "solution": "base = 10\ndigits = [int(d) for d in str(141_8)]\nnumber = sum(digits)\nprint(number)"
  },
  {
    "example_id": 226,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 2\nb = 5\nremainder = (a**2 + b**2) % 3\nprint(remainder)"
  },
  {
    "example_id": 227,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10508.0"
    ],
    "annotated_answers": [
      "21022.0"
    ],
    "solution": "# a = 100\na = 100\n\n# lcm(a+1, a-5) = 10508\nlcm = 10508\n\n# lcm(a+1, a-5) = a^2 - 4a + 1\na_2_minus_4a_plus_1 = lcm\nprint(a_2_minus_4a_plus_1)"
  },
  {
    "example_id": 228,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0",
      "23.0",
      "29.0",
      "31.0",
      "37.0",
      "41.0",
      "43.0",
      "47.0",
      "53.0",
      "59.0",
      "61.0",
      "67.0",
      "71.0",
      "73.0",
      "79.0",
      "83.0",
      "89.0",
      "97.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "def prime_digits(num):\n    digits = []\n    for digit in str(num):\n        if digit not in digits:\n            digits.append(digit)\n    return digits\n\ndef prime_pairs(digits):\n    pairs = []\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            pair = (digits[i], digits[j])\n            if pair not in pairs:\n                pairs.append(pair)\n    return pairs\n\ndef prime_numbers(pairs):\n    numbers = []\n    for pair in pairs:\n        num = int(pair[0] + pair[1])\n        if num > 10 and is_prime(num):\n            numbers.append(num)\n    return numbers\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_primes(numbers):\n    return sum(numbers)\n\n# Test\nnums = [12, 14, 16, 19, 22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\nfor num in nums:\n    if is_prime(num):\n        print(num, end=\" \")"
  },
  {
    "example_id": 229,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Define variables\nb = 10\nP = 9\n\n# Calculate the value of b\nb = P + 1\n\n# Print the value of b\nprint(b)"
  },
  {
    "example_id": 230,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36279360.0"
    ],
    "annotated_answers": [
      "14.8"
    ],
    "solution": "ages = [13, 14, 15, 16, 17, 18, 19]\nages_product = 1\nfor age in ages:\n    ages_product *= age\nmean = ages_product / len(ages)\nprint(mean)"
  },
  {
    "example_id": 231,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def sum_of_consecutive_positive_odd_numbers(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum\n\ndef is_factor(n, sum):\n    return sum % n == 0\n\ndef greatest_common_factor(a, b):\n    if b == 0:\n        return a\n    else:\n        return greatest_common_factor(b, a % b)\n\ndef solution(n):\n    consecutive_positive_odd_numbers = [n for n in range(1, n+1, 2)]\n    sums = [sum_of_consecutive_positive_odd_numbers(n) for n in consecutive_positive_odd_numbers]\n    gcf = max(greatest_common_factor(sums[i], sums[i+1]) for i in range(len(sums)-1))\n    return gcf\n\nprint(solution(10))"
  },
  {
    "example_id": 232,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1261.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "sum = 0\nfor p in range(2, 100):\n    if pow(8, p - 1, p) == 1:\n        sum += p\nprint(sum)"
  },
  {
    "example_id": 233,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.0",
      "62.0",
      "62.0",
      "62.0",
      "62.0",
      "62.0",
      "62.0",
      "62.0",
      "62.0",
      "62.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "# Convert 62_7 to base 10\nbase_10 = 62\nfor i in range(61, 0, -1):\n    base_10 += 7**i * (62 // 7**i)\n    print(base_10)\n    # Convert 34_5 to base 10\nbase_10 = 34\nfor i in range(33, 0, -1):\n    base_10 += 5**i * (34 // 5**i)\n    print(base_10)\n    # Add base 10 values\nbase_10 += base_10\nprint(base_10)"
  },
  {
    "example_id": 234,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef gcd_of_two_numbers(n, m):\n    return gcd(n + 7, 2 * n + 1)\n\nprint(gcd_of_two_numbers(10, 20))"
  },
  {
    "example_id": 235,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "581831.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 943\nb = 617\ngcd_a_b = gcd(a, b)\na_over_gcd = a // gcd_a_b\nb_over_gcd = b // gcd_a_b\nn = (a_over_gcd * b_over_gcd) // gcd(a_over_gcd, b_over_gcd)\nprint(n)"
  },
  {
    "example_id": 236,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50625.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "n = 6**210**2 * 15**4\nprint(gcd(n, 15**4))"
  },
  {
    "example_id": 237,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1002.0",
      "1002.0",
      "1001.0",
      "1002.0",
      "1002.0"
    ],
    "annotated_answers": [
      "100100.0"
    ],
    "solution": "b = 2\nnum = np.array([1, 1, 0, 1, 1])\nnum = num * (b - 1) + 1001\nprint(num)"
  },
  {
    "example_id": 238,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 7**7\nprint(n % 10)"
  },
  {
    "example_id": 239,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Mars year length in days\nT = 697\n# Mars week length in days\nW = 12\n# Number of weeks in a year\nN = 52\n\n# Mars year length in weeks\nW_year = T//W\n\n# Mars year length in days\nT_year = W_year*W\n\n# Number of days in a year\nD_year = N*W_year\n\n# Next Mars year will begin on the first day of the week\nprint(D_year//T)"
  },
  {
    "example_id": 240,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for t in range(1, 23):\n    if (t+2) % t == 0:\n        print(t)\n        break"
  },
  {
    "example_id": 241,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "4435.0"
    ],
    "solution": "number = 123\nbase = 5\nanswer = []\nwhile number > 0:\n    answer.append(number % base)\n    number //= base\nanswer.reverse()\nprint(answer)"
  },
  {
    "example_id": 242,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "# Define variables\na = 100\nb = 10\n\n# Define function\ndef base_5_digit_sum(n):\n    # Convert to base 5\n    base_5_digits = [int(digit) for digit in str(n)]\n    # Convert to base 8\n    base_8_digits = [int(digit) for digit in str(n)]\n    # Calculate sum\n    sum_base_5_digits = sum(base_5_digits)\n    sum_base_8_digits = sum(base_8_digits)\n    return sum_base_5_digits, sum_base_8_digits\n\n# Calculate sum\nsum_base_5_digits, sum_base_8_digits = base_5_digit_sum(a)\n\n# Print result\nprint(sum_base_5_digits)\nprint(sum_base_8_digits)"
  },
  {
    "example_id": 243,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 71\nmod = 3\nprint(n % mod)"
  },
  {
    "example_id": 244,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 12345 % 6\nprint(n)"
  },
  {
    "example_id": 245,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# base 2 digits\ndigits = len(bin(87)[2:])\n\n# base 3 digits\ndigits_3 = len(oct(87)[2:])\n\nprint(digits - digits_3)"
  },
  {
    "example_id": 246,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "0.0",
      "3.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "3255.0"
    ],
    "solution": "def convert_to_base_ten(num, base):\n    num_list = []\n    while num > 0:\n        num_list.append(num % base)\n        num //= base\n    return num_list\n\nnum_list = convert_to_base_ten(101010, 5)\nprint(num_list)"
  },
  {
    "example_id": 247,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "31.0",
      "16.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "n = 16\nd1 = 12\nd2 = 15\nnum_divisors = n\ndenom_divisors = sum_divisors(n)\nif denom_divisors!= num_divisors:\n    print(\"The number has\", num_divisors, \"divisors, but the sum of its divisors is\", denom_divisors)\n    print(\"Therefore, it cannot be\", n)\n    exit(0)\nif gcd(d1, d2)!= 1:\n    print(\"The gcd of 12 and 15 is\", gcd(d1, d2))\n    print(\"Therefore, the number cannot be\", n)\n    exit(0)\nprint(\"The number is\", n)"
  },
  {
    "example_id": 248,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nwhile a <= 23:\n    if a**-1 == a % 24:\n        print(a)\n    a += 1"
  },
  {
    "example_id": 249,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "decimal = 1/2**10\nnum_digits = np.log10(np.abs(decimal))\nprint(int(num_digits))"
  },
  {
    "example_id": 250,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "A = np.arange(1, 10000)\nB = np.arange(1, 10000)\nA_7 = A**7\nB_7 = B**7\n\nconditions = A_7 + B_7 == 666\n\ncount = np.count_nonzero(conditions)\nprint(count)"
  },
  {
    "example_id": 251,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 4\ny = 7\nx2 = (x + 1)**2\ny3 = (y + 5)**3\nproduct = x2 * y3\nremainder = product % 19\nprint(remainder)"
  },
  {
    "example_id": 252,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# February 1, 2008 is a Friday\n# Last Friday of February 2008 is February x, 2008\n# February 2008 is a leap year\n# Therefore, February x, 2008 is February 29, 2008\nprint(29)"
  },
  {
    "example_id": 253,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "count = 0\nfor i in range(15, 86, 20):\n    count += 1\nprint(count)"
  },
  {
    "example_id": 254,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "n = 2**8\nans = n\nfor i in range(8):\n    ans = ans // 2\nprint(ans)"
  },
  {
    "example_id": 255,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "89.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a, b = 0, 0\nfor i in range(1, 10):\n    for j in range(i+1, 10):\n        n1 = i + j\n        n2 = i * j\n        if gcd(n1, n2) == 1:\n            a = n1\n            b = n2\n            break\nif a == 0:\n    print(\"No solution\")\nelse:\n    print(a+b)"
  },
  {
    "example_id": 256,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "def nth_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * nth_factorial(n-1)\n\nn = 1\nwhile 80325 % n!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 257,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11331.0"
    ],
    "annotated_answers": [
      "1030.0"
    ],
    "solution": "a = 1331\nb = 10**len(str(a))\nprint(a+b)"
  },
  {
    "example_id": 258,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 2\nb = 3\nc = 5\nd = 7\ne = 9\n\nans = 0\nfor i in range(0, 10):\n    for j in range(i+1, 10):\n        x = i*10+j\n        if x % 3 == 0:\n            ans += 1\nprint(ans)"
  },
  {
    "example_id": 259,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def divisible(num, divisors):\n    for d in divisors:\n        if num % d!= 0:\n            return False\n    return True\n\ncount = 0\nfor num in range(1, 101):\n    if divisible(num, [3, 4, 5]):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 260,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "i = 1\nj = 1\nremainder = i*j % 6\nprint(remainder)"
  },
  {
    "example_id": 261,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def tens_digit(n):\n    return (n//10) % 10\n\nprint(tens_digit(5**2005))"
  },
  {
    "example_id": 262,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9199.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "AB = 912673\nA = int(AB / 100)\nB = int(AB % 100)\nprint(A + B)"
  },
  {
    "example_id": 263,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4096.0"
    ],
    "solution": "for i in range(1, 100):\n    if i ** 3 == i ** 4:\n        print(i)\n        break"
  },
  {
    "example_id": 264,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 10 % 9\nprint(remainder)"
  },
  {
    "example_id": 265,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0",
      "45.0",
      "45.0"
    ],
    "annotated_answers": [
      "235.0"
    ],
    "solution": "for i in range(3):\n    for j in range(2, 100):\n        if j % 5 == 0 and j % 3 == 0:\n            if j + j + j > 100:\n                break\n            print(j + j + j)\n            break"
  },
  {
    "example_id": 266,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# \nremainder = 194 % 11\nprint(remainder)"
  },
  {
    "example_id": 267,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "perfect_squares = 0\nfor i in range(1, 13):\n    if i**2 in [2, 4, 6, 8, 10, 12]:\n        perfect_squares += 1\nprint(perfect_squares)"
  },
  {
    "example_id": 268,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0",
      "144.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = 144\ny = 144\nprint(x, y)"
  },
  {
    "example_id": 269,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "12.0",
      "12.0",
      "12.0",
      "60.0",
      "12.0",
      "84.0",
      "24.0",
      "36.0",
      "60.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "for i in range(1, 100):\n    for j in range(1, 100):\n        if i*j % 3 == 0:\n            if i*j % 12 == 0:\n                print(i*j)\n                break"
  },
  {
    "example_id": 270,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "4.0",
      "4.0",
      "5.0",
      "5.0",
      "6.0",
      "6.0",
      "7.0",
      "7.0",
      "8.0",
      "8.0",
      "9.0",
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Tens digit\nfor tens_digit in range(0, 10):\n    # Hundreds digit\n    for hundreds_digit in range(0, 10):\n        # Check divisibility by 11\n        if (tens_digit * 10 + hundreds_digit) % 11 == 0:\n            print(\"Tens digit:\", tens_digit, \"Hundreds digit:\", hundreds_digit)"
  },
  {
    "example_id": 271,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "m = 108\nn = 108\nnum_pairs = 0\nfor i in range(1, m+1):\n    for j in range(1, n+1):\n        if gcd(i, j) == 2 and sum_divisors(i) == m and sum_divisors(j) == n:\n            num_pairs += 1\nprint(num_pairs)"
  },
  {
    "example_id": 272,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "N = 13*7 + 17*3\nprint(N % 36)"
  },
  {
    "example_id": 273,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "n = int(np.sqrt(196))\nfactors = []\nfor i in range(1, n + 1):\n    if n % i == 0:\n        factors.append(i)\nprint(sum(factors))"
  },
  {
    "example_id": 274,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def power(base, exponent):\n    return base ** exponent\n\ndef calculate_remainder(num1, num2):\n    return num1 % num2\n\ndef problem_50(num1, num2):\n    result = power(num1, 50) - power(num2, 50)\n    return calculate_remainder(result, 13)\n\nprint(problem_50(24, 15))"
  },
  {
    "example_id": 275,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "k = 0\nwhile True:\n    for n in range(1, 100):\n        if gcd(6*n+k, 6*n+3)!= 1 or gcd(6*n+k, 6*n+2)!= 1 or gcd(6*n+k, 6*n+1)!= 1:\n            k += 1\n            break\n    else:\n        break\nprint(k)"
  },
  {
    "example_id": 276,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# calculate remainder\nremainder = 1529 % 6\nprint(remainder)"
  },
  {
    "example_id": 277,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "def fbox(x):\n    factors = []\n    for i in range(2, x):\n        if x % i == 0:\n            factors.append(i)\n    return factors[0]\n\nprint(fbox(12))"
  },
  {
    "example_id": 278,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "# Find the sum of all possible values of n such that both of the following are true: 171 \u2261 80 (mod n) and 468 \u2261 13 (mod n)\n\n# 171 \u2261 80 (mod n)\nn = 171\nk = 80\ngcd_k = gcd(k, n)\nk_divisors = [i for i in range(1, k + 1) if k % i == 0]\nk_divisors_sum = sum(k_divisors)\ngcd_k_n = gcd(k_divisors_sum, n)\n\n# 468 \u2261 13 (mod n)\nn = 468\nk = 13\ngcd_k = gcd(k, n)\nk_divisors = [i for i in range(1, k + 1) if k % i == 0]\nk_divisors_sum = sum(k_divisors)\ngcd_k_n = gcd(k_divisors_sum, n)\n\n# Find the sum of all possible values of n\nn = 171\nk = 80\ngcd_k = gcd(k, n)\nk_divisors = [i for i in range(1, k + 1) if k % i == 0]\nk_divisors_sum = sum(k_divisors)\ngcd_k_n = gcd(k_divisors_sum, n)\n\nn = 468\nk = 13\ngcd_k = gcd(k, n)\nk_divisors = [i for i in range(1, k + 1) if k % i == 0]\nk_divisors_sum = sum(k_divisors)\ngcd_k_n = gcd(k_divisors_sum, n)\n\nsum_n = gcd_k_n\nprint(sum_n)"
  },
  {
    "example_id": 279,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "57.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "n = 1230\nbase = 4\nnum_digits = len(str(n))\ndigits = [int(i) for i in str(n)]\nnum = 0\nfor i in range(num_digits):\n    num += digits[i] * base**i\nprint(num)"
  },
  {
    "example_id": 280,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "990.0"
    ],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "for i in range(1000, 0, -1):\n    if i % 11 == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 281,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "556.0"
    ],
    "solution": "a = 10\nb = 100\ngcd_a_b = gcd(a, b)\n\nprint(gcd_a_b)"
  },
  {
    "example_id": 282,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# The number of page numbers with digits that add up to 4 is 200.\ntotal_pages = 1000\ndigits_add_up_to_4 = 0\nfor i in range(1, total_pages):\n    digits = list(map(int, str(i)))\n    if sum(digits) == 4:\n        digits_add_up_to_4 += 1\nprint(digits_add_up_to_4)"
  },
  {
    "example_id": 283,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def sum_even(upc):\n    return sum([int(x) for x in upc if x.isdigit() and x.isdigit()])\n\ndef sum_odd(upc):\n    return sum([int(x) for x in upc if x.isdigit() and not x.isdigit()])\n\ndef triple(x):\n    return x * 3\n\ndef check_valid(upc):\n    n = sum_even(upc) + triple(sum_odd(upc))\n    return n % 10 == 0\n\ndef get_valid_x(upc):\n    for x in range(10):\n        if check_valid(upc.replace('$x$', str(x))):\n            return x\n    return None\n\nupc = '9-78094-11006-$x$'\nx = get_valid_x(upc)\nprint(x)"
  },
  {
    "example_id": 284,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "pow = 2**2010\nprint(pow % 10)"
  },
  {
    "example_id": 285,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "for i in range(1, 75):\n    if i % 2 == 1 and i % 3 == 1 and i % 4 == 1 and i % 6 == 1 and i % 7 == 0:\n        print(i)"
  },
  {
    "example_id": 286,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 1\nwhile True:\n    count = 0\n    for k in range(1, n+1):\n        if re.match(r'^0\\.(0|1|2|3|4|5|6|7|8|9){n-1}$', str(1/k)):\n            count += 1\n    if count == n//2:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 287,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = pow(2, 16, 17)\nprint((pow(2, n*2, 17)-2) % 17)"
  },
  {
    "example_id": 288,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 355\nprint(n % 10)"
  },
  {
    "example_id": 289,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Base 4 number\nn = 120301232\n\n# Divide by 8\nremainder = n % 8\n\n# Express remainder in base 10\nremainder_base_10 = remainder\nprint(remainder_base_10)"
  },
  {
    "example_id": 290,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "991026974.0"
    ],
    "annotated_answers": [
      "668.0"
    ],
    "solution": "x = 997*997*997 + 1\nprint(x)"
  },
  {
    "example_id": 291,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "528.0"
    ],
    "solution": "def convert_to_base_8(n):\n    if n < 8:\n        return n\n    else:\n        return convert_to_base_8(n // 8) * 10 + n % 8\n\nprint(convert_to_base_8(6) * convert_to_base_8(7))"
  },
  {
    "example_id": 292,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "product = 4*5*6*7\nif product > 1000:\n    print(sum(range(4)))\nelse:\n    print(4)"
  },
  {
    "example_id": 293,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "divisors = [x for x in range(1, 253) if 252 % x == 0]\neven_divisors = [x for x in divisors if x % 2 == 0]\nprint(len(even_divisors))"
  },
  {
    "example_id": 294,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "600.0",
      "601.0",
      "602.0",
      "603.0",
      "604.0",
      "605.0",
      "606.0",
      "607.0",
      "608.0",
      "609.0"
    ],
    "annotated_answers": [
      "801.0"
    ],
    "solution": "# \na = 600\nb = 900\n\n# \npattern = r\"(89|88|87|86|85|84|83|82|81|80|79|78|77|76|75|74|73|72|71|70|69|68|67|66|65|64|63|62|61|60|59|58|57|56|55|54|53|52|51|50|49|48|47|46|45|44|43|42|41|40|39|38|37|36|35|34|33|32|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10|9|8|7|6|5|4|3|2|1)\"\n\n# \nresult = []\nfor i in range(a, b+1):\n    if re.search(pattern, str(i)):\n        result.append(i)\n\n# \nprint(result)"
  },
  {
    "example_id": 295,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = 40\ny = 40\ngcd_xy = gcd(x, y)\nlcm_xy = x*y/gcd_xy\nprint(lcm_xy)"
  },
  {
    "example_id": 296,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def base_3_digits(n):\n    return [int(d) for d in str(n)]\n\ndef base_6_digits(n):\n    return [int(d) for d in str(n)]\n\ndef base_3_length(n):\n    return len(base_3_digits(n))\n\ndef base_6_length(n):\n    return len(base_6_digits(n))\n\ndef is_base_3_4_digits_and_6_2_digits(n):\n    return base_3_length(n) == 4 and base_6_length(n) == 2\n\nprint(sum(is_base_3_4_digits_and_6_2_digits(n) for n in range(10000)))"
  },
  {
    "example_id": 297,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "68.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "def f(x):\n    return 67/(2*x - 23)\n\nsum = 0\nfor x in range(1, 1000):\n    if f(x).is_integer():\n        sum += x\n\nprint(sum)"
  },
  {
    "example_id": 298,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "225.0",
      "9.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "n = 225\nwhile n % 9 == 0:\n    n = n // 9\n    if n == 1:\n        print(n)\n        break\n    elif n % 9 == 0:\n        n = n // 9\n    else:\n        print('No perfect square less than 225 that is a multiple of 9')\n        break"
  },
  {
    "example_id": 299,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 2010):\n    sum += 3**i\nprint(sum % 10)"
  },
  {
    "example_id": 300,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nremainder = factorial(7) % 23\nprint(remainder)"
  },
  {
    "example_id": 301,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24502500000.0"
    ],
    "annotated_answers": [
      "1241.0"
    ],
    "solution": "cubes = []\nfor i in range(1, 1000):\n    if i**3 % 100 == 0 or i**3 % 10 == 0:\n        cubes.append(i**3)\nprint(sum(cubes))"
  },
  {
    "example_id": 302,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "844.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "a = 2**306 * 3**340\nn = int(math.log(a, 2))\nprint(n)"
  },
  {
    "example_id": 303,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# The number 4000 is a multiple of 2, 5, and 100.\n# The number 4000 is a multiple of 5 and 100.\n# The number 4000 is a multiple of 100.\ncount = 0\nfor i in range(1, 4000, 100):\n    count += 1\nprint(count)"
  },
  {
    "example_id": 304,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 2\nb = 12\nprint(gcd(a, b))\n\n\n\nab = a*b\nprint(ab)\n\n\nprint(ab % 20)\n\n\n\nprint(ab % 20)\n\n\n\na_plus_10 = a+10\nprint(a_plus_10)\n\n\n\nb_plus_10 = b+10\nprint(b_plus_10)\n\n\n\nab_plus_10 = a_plus_10*b_plus_10\nprint(ab_plus_10)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab_plus_10 % 20)\n\n\n\nprint(ab"
  },
  {
    "example_id": 305,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 1\nwhile 7 + (30 * N) in [2, 3, 5, 7]:\n    N += 1\nprint(N)"
  },
  {
    "example_id": 306,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "287016790000.0"
    ],
    "annotated_answers": [
      "16592.0"
    ],
    "solution": "n = np.arange(10000)\nn = n + 2005\ndivisors = []\nfor num in n:\n    divisors.append(np.array(list(range(1, num + 1))))\nsum_divisors = []\nfor divisor in divisors:\n    sum_divisors.append(np.sum(divisor))\nsum_divisors = np.array(sum_divisors)\nprint(np.sum(sum_divisors))"
  },
  {
    "example_id": 307,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "units_sum = 0\nfor i in range(0, 50, 3):\n    units_sum += i % 10\nprint(units_sum)"
  },
  {
    "example_id": 308,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "E = 5"
  },
  {
    "example_id": 309,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-81993.0",
      "-81993.0"
    ],
    "annotated_answers": [
      "109.0"
    ],
    "solution": "green_total = 476 + 104 + 281\nred_total = 32 + 16 + 80\ntotal = green_total + red_total\n\n# create variables for each group\nwalter_green = 476\nwalter_red = 32\nagnes_green = 104\nagnes_red = 16\nholly_green = 281\nholly_red = 80\n\n# calculate number of lizards\nlizards = (green_total * 94) + (red_total * 16)\n\n# calculate number of green beads left over\ngreen_left_over = total - lizards\n\n# calculate number of red beads left over\nred_left_over = total - lizards\n\n# print results\nprint(\"Number of green beads left over:\", green_left_over)\nprint(\"Number of red beads left over:\", red_left_over)"
  },
  {
    "example_id": 310,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nodd_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\n\nprint(len(set(prime_numbers).intersection(set(odd_numbers))))"
  },
  {
    "example_id": 311,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def convert_to_base_4(num):\n    \"\"\"\n    Convert a number to base 4.\n\n    Args:\n        num (int): A positive integer.\n\n    Returns:\n        list: A list of digits in base 4.\n    \"\"\"\n    base_4_digits = []\n    while num > 0:\n        base_4_digits.append(num % 4)\n        num //= 4\n    return base_4_digits\n\ndef sum_digits(digits):\n    \"\"\"\n    Sum the digits in a list.\n\n    Args:\n        digits (list): A list of digits.\n\n    Returns:\n        int: The sum of the digits.\n    \"\"\"\n    return sum(digits)\n\ndef sum_base_4_digits(num):\n    \"\"\"\n    Sum the digits when a number is converted to base 4.\n\n    Args:\n        num (int): A positive integer.\n\n    Returns:\n        int: The sum of the digits.\n    \"\"\"\n    base_4_digits = convert_to_base_4(num)\n    return sum_digits(base_4_digits)\n\nprint(sum_base_4_digits(527))"
  },
  {
    "example_id": 312,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "122.0"
    ],
    "annotated_answers": [
      "122.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 100):\n    if i % 4 == 3 and i % 3 == 1 and i % 5 == 1:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 313,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# create a dictionary for the units digit of a number that is 4 more than a multiple of 5\nunit_dict = {0: 0, 1: 5, 2: 5, 3: 5, 4: 5, 5: 5, 6: 5, 7: 5, 8: 5, 9: 5}\n\n# create a dictionary for the units digit of a number that is 2 more than a multiple of 3\nunit_dict_2 = {0: 2, 1: 5, 2: 2, 3: 5, 4: 2, 5: 5, 6: 2, 7: 5, 8: 2, 9: 5}\n\n# find the smallest possible value of X that satisfies the given condition\nfor i in range(1000):\n    if unit_dict[i % 10] == (i // 10 + 4) % 10:\n        if unit_dict_2[(i // 3 + 2) % 10] == (i // 10 + 4) % 10:\n            print(i)\n            break"
  },
  {
    "example_id": 314,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def factors(n):\n    factors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if n // i!= i:\n                factors.append(n // i)\n    return factors\n\ndef divisors(n):\n    divisors = [1]\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors\n\nn = 2\nfactors = factors(n)\ndivisors = divisors(n**2)\nprint(len(factors))\nprint(len(divisors))"
  },
  {
    "example_id": 315,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 6\nd = 13\nx = 6*n - 7\nprint(x)\nsolve_system(x, d)"
  },
  {
    "example_id": 316,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Define a function to compute the number of increasing sequences of three distinct prime numbers\n# with a sum of 20\ndef count_increasing_sequences_of_three_distinct_prime_numbers_with_sum_of_20(x):\n    count = 0\n    for i in range(1, x):\n        for j in range(i + 1, x):\n            for k in range(j + 1, x):\n                if is_prime(i) and is_prime(j) and is_prime(k) and (i + j + k) == 20:\n                    count += 1\n    return count\n\n# Define a function to check if a number is prime\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Use the function to solve the problem\nprint(count_increasing_sequences_of_three_distinct_prime_numbers_with_sum_of_20(20))"
  },
  {
    "example_id": 317,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(N):\n    count = 0\n    for i in range(2, N):\n        if is_prime(i):\n            count += 1\n    return count\n\nN = 9\ncount = count_primes(N)\nprint(count)"
  },
  {
    "example_id": 318,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "str1 = '11001010100101011'\nstr2 = '110100011000100'\n\n# convert to int\nn = int(str1, 10) + int(str2, 10)\nm = int(bin(n)[2:], 2)\n\nprint(n - m)"
  },
  {
    "example_id": 319,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 180\nb = 168\nprint(gcd(a, b))"
  },
  {
    "example_id": 320,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 100000001):\n    sum += i\n    for j in range(2, int(sum**0.5) + 1):\n        if sum % j == 0:\n            break\n    else:\n        print(sum)\n        break"
  },
  {
    "example_id": 321,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Jan's steps\njans_steps = []\nfor i in range(127, 124, -1):\n    jans_steps.append(i)\nfor i in range(124, 13, -3):\n    jans_steps.append(i)\n# Jan's steps\njans_steps = []\nfor i in range(127, 124, -1):\n    jans_steps.append(i)\nfor i in range(124, 13, -3):\n    jans_steps.append(i)\n# Jen's steps\njens_steps = []\nfor i in range(3, 7, 1):\n    jens_steps.append(i)\nfor i in range(7, 11, 1):\n    jens_steps.append(i)\nfor i in range(11, 139, 4):\n    jens_steps.append(i)\n# Steps common to both Jan and Jen\ncommon_steps = [x for x in jans_steps if x in jens_steps]\nprint(len(common_steps))"
  },
  {
    "example_id": 322,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "365.0"
    ],
    "solution": "n = 365 // 28\nprint(n)"
  },
  {
    "example_id": 323,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = 2 ** 3 * 3 ** 1 * 4 ** 3 * 5 ** 8\nprint(len(str(x)))"
  },
  {
    "example_id": 324,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "981.0"
    ],
    "solution": "num = 0\nfor i in range(1, 3):\n    num += np.sum(np.base_repr(i, base=3) == '01')\nprint(num)"
  },
  {
    "example_id": 325,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1560.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 1560\nwhile n % 1560!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 326,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 32\nb = 23\nn = a + b\nprint(n)"
  },
  {
    "example_id": 327,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Import math library\nimport math\n\n# Import numpy library\nimport numpy as np\n\n# Import re library\nimport re\n\n# Function to calculate divisors\ndef divisors(n):\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return sorted(divisors)\n\n# Function to calculate sum of divisors\ndef sum_divisors(n):\n    return sum(divisors(n))\n\n# Function to calculate gcd\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# Function to solve system of linear equations\ndef solve_system(x, y):\n    return np.linalg.solve(x, y)\n\n# Function to count number of solutions\ndef count_solutions(x, y):\n    return np.linalg.solve(x, y).shape[1]\n\n# Function to calculate nth factorial\ndef nth_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * nth_factorial(n - 1)\n\n# Variables\nn = 10\n\n# Possible amounts of change\npossible_changes = []\n\n# Check if n is prime\nif math.sqrt(n) % 1 == 0:\n    # If n is prime\n    for i in range(1, n + 1):\n        if sum_divisors(i) == n:\n            possible_changes.append(i)\n\n# Check if n is not prime\nelse:\n    # If n is not prime\n    for i in range(1, n + 1):\n        if sum_divisors(i) == n:\n            possible_changes.append(i)\n\n# Print number of possible amounts of change\nprint(len(possible_changes))"
  },
  {
    "example_id": 328,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "192.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "b = 121\nc = 71\n\n# find b+c\nb_plus_c = b + c\n\n# print b+c\nprint(b_plus_c)"
  },
  {
    "example_id": 329,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "b = 10\nwhile True:\n    if 5 * 25 % b == 137 % b:\n        break\n    b += 1\nprint(b)"
  },
  {
    "example_id": 330,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 50\nf = 1\nfor i in range(1, n+1):\n    f += i\nf = f % 10\nprint(f)"
  },
  {
    "example_id": 331,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "215.0"
    ],
    "solution": "# Initialize variables\nnum_stamps = 200\nstamps_per_page = 30\nnum_pages = num_stamps // stamps_per_page\nnum_stamps_last_page = num_stamps - (num_pages - 1) * stamps_per_page\n\n# Calculate the minimum number of stamps\nmin_num_stamps = num_stamps_last_page + stamps_per_page\n\n# Print the solution\nprint(min_num_stamps)"
  },
  {
    "example_id": 332,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "n = 28\nr = 6\n\n# \na = n // r\n\n# \nb = n % r\n\n# \nprint(a, b)"
  },
  {
    "example_id": 333,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6.0",
      "4.0",
      "8.0",
      "1.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "digits = [3, 6, 4, 8, 1]\nvalues = [3, 6, 4, 8, 1]\n\nfor i in range(len(digits)):\n    for j in range(len(digits)):\n        if digits[i] == digits[j] and i!= j:\n            values[i] = 0\n            values[j] = 0\n\nprint(values)"
  },
  {
    "example_id": 334,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 11\nresult = 0\nfor i in range(1, n+1):\n    result += nth_factorial(i)\nprint(result % 10)"
  },
  {
    "example_id": 335,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "m = 10\nn = 20\ngcd_m_n = gcd(m, n)\nlcm_m_n = m*n/gcd_m_n\nprint(lcm_m_n)"
  },
  {
    "example_id": 336,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "406.0",
      "406.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "product = 2005\nfor i in range(2, product // 2 + 1):\n    if product % i == 0:\n        print(i + product//i)"
  },
  {
    "example_id": 337,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 2004\nm = 12\nprint(n % m)"
  },
  {
    "example_id": 338,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1358.0"
    ],
    "annotated_answers": [
      "25168.0"
    ],
    "solution": "binary_number = '10101001110'\nbase_eight = int(binary_number, 2)\nprint(base_eight)"
  },
  {
    "example_id": 339,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# \nremainder = (289 + 9 * 51 + 3 ** 6 + 4 * 187) % 17\nprint(remainder)"
  },
  {
    "example_id": 340,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1",
      "17"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "A = 10**9\nB = 10**8\nprint(A*B)"
  },
  {
    "example_id": 341,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "121.0"
    ],
    "solution": "# List of prime numbers\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n# List of numbers with exactly three divisors\nnumbers = []\nfor prime in primes:\n    for num in range(prime, prime*10):\n        if len(set(range(1, prime+1))) == 3:\n            numbers.append(num)\n\n# Print the fifth number\nprint(numbers[4])"
  },
  {
    "example_id": 342,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2010.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "for n in range(1, 10000):\n    if n % 2010 == 0:\n        print(n)\n        break"
  },
  {
    "example_id": 343,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "n = 1\nwhile True:\n    p = n**2 - n + 41\n    q = (n + 1)**2 - (n + 1) + 41\n    if gcd(p, q) > 1:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 344,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7486.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "m = 2**1980 * 3**384 * 5**1694 * 7**343\nk = int(math.log(m, 2)) + 1\nn = int(math.log(m, 2)**(1/k))\nprint(n + k)"
  },
  {
    "example_id": 345,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 7\nb = 5\nprint(a**17 % b)"
  },
  {
    "example_id": 346,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1560.0"
    ],
    "annotated_answers": [
      "284.0"
    ],
    "solution": "def sum_of_proper_divisors(N):\n    divisors = []\n    for i in range(1, N + 1):\n        if N % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\ndef sum_of_proper_divisors_of_sum(N):\n    return sum_of_proper_divisors(sum_of_proper_divisors(N))\n\nprint(sum_of_proper_divisors_of_sum(284))"
  },
  {
    "example_id": 347,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "t = 12\nprint(t)"
  },
  {
    "example_id": 348,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 35**12\nprint(x%10)"
  },
  {
    "example_id": 349,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "8.0",
      "11.0",
      "14.0",
      "17.0",
      "20.0",
      "23.0",
      "26.0",
      "29.0",
      "32.0",
      "35.0",
      "38.0",
      "41.0",
      "44.0",
      "47.0",
      "50.0",
      "53.0",
      "56.0",
      "59.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "n = 0\nwhile n < 60:\n    if 4*n % 6 == 2:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 350,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.12312312312312312"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "decimal = 123/999\nprint(decimal)"
  },
  {
    "example_id": 351,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "233.0"
    ],
    "solution": "n = 0\nwhile gcd(15, nth_factorial(n))!= 1:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 352,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3224.0"
    ],
    "annotated_answers": [
      "3224.0"
    ],
    "solution": "def is_odd_divisor(n):\n    return n % 2!= 0 and 6300 % n == 0\n\ndef sum_of_odd_divisors(n):\n    return sum(filter(is_odd_divisor, range(1, n)))\n\nprint(sum_of_odd_divisors(6300))"
  },
  {
    "example_id": 353,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 45\n\n# Find the factors of n\nfactors = []\nfor i in range(1, n+1):\n    if n % i == 0:\n        factors.append(i)\n\n# Find the sum of the factors\nfactor_sum = sum(factors)\n\n# Find the greatest whole number that MUST be a factor of the sum of any six consecutive positive odd numbers\ngreatest_factor = 1\nfor i in range(1, factor_sum+1):\n    if factor_sum % i == 0:\n        greatest_factor = i\n        break\n\nprint(greatest_factor)"
  },
  {
    "example_id": 354,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "minutes_to_wait = 8*60 + 35 - (5*60 + 13)\nprint(minutes_to_wait)"
  },
  {
    "example_id": 355,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# The units digit of (14_8)^2 is 16\nprint(14_8**2 % 10)"
  },
  {
    "example_id": 356,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2002.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "p = 2003\nN = 1\nfor num in range(2, p):\n    N = (N * num) % p\nprint(N)"
  },
  {
    "example_id": 357,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "451.0"
    ],
    "annotated_answers": [
      "451.0"
    ],
    "solution": "number = 10**51 - 9\nprint(sum(map(int, str(number))))"
  },
  {
    "example_id": 358,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "num = 1+12+123+1234+12345+123456+1234567+12345678\nprint(num % 5)"
  },
  {
    "example_id": 359,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def fibonacci(n):\n    a, b = 1, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return a\n\n\nfib = fibonacci(100)\nprint(fib % 4)"
  },
  {
    "example_id": 360,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import gcd, lcm\n\nlizzy_gives_megan = 2\nmegan_gives_oscar = 2\noscar_gives_patrick = 2\n\nlizzy_candy = lcm(lizzy_gives_megan, 1)\nmegan_candy = lcm(lizzy_gives_megan, megan_gives_oscar)\noscar_candy = lcm(megan_candy, oscar_gives_patrick)\n\npatrick_candy = gcd(lizzy_candy, oscar_candy)\n\nprint(patrick_candy)\n\n# (a) True\n# (b) False\n# (c) True\n# (d) False\n# (e) False\n# (f) True"
  },
  {
    "example_id": 361,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def is_repeating_decimal(n):\n    d = 30\n    q, r = divmod(n, d)\n    if r == 0:\n        return False\n    else:\n        return True\n\nn_repeating_decimals = 0\nfor n in range(1, 30):\n    if is_repeating_decimal(n):\n        n_repeating_decimals += 1\n\nprint(n_repeating_decimals)"
  },
  {
    "example_id": 362,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_numbers(n):\n    prime_numbers = []\n    for i in range(n):\n        num = i + 1\n        while not is_prime(num):\n            num += 1\n        prime_numbers.append(num)\n    return prime_numbers\n\ndef get_least_possible_sum(n):\n    prime_numbers = get_prime_numbers(n)\n    sum_of_prime_numbers = sum(prime_numbers)\n    return sum_of_prime_numbers\n\nprint(get_least_possible_sum(3))"
  },
  {
    "example_id": 363,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "321.0"
    ],
    "annotated_answers": [
      "321.0"
    ],
    "solution": "n = 39500 // 123\nprint(n)"
  },
  {
    "example_id": 364,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.962809493114328"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "a = 720\nb = a**(1/3)\nprint(b)"
  },
  {
    "example_id": 365,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "# Find the second smallest positive integer that gives a remainder of 2 when divided by 3 and gives a remainder of 3 when divided by 7.\nn = 3\nwhile True:\n    if n % 3 == 2 and n % 7 == 3:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 366,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "57.0",
      "0.0",
      "160.0",
      "0.0"
    ],
    "annotated_answers": [
      "0.35625"
    ],
    "solution": "num = 57\nden = 160\ngcd = np.gcd(num, den)\nprint(num//gcd, num%gcd, den//gcd, den%gcd)"
  },
  {
    "example_id": 367,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10901.0"
    ],
    "annotated_answers": [
      "10901.0"
    ],
    "solution": "def is_palindrome(number):\n    number_str = str(number)\n    if number_str == number_str[::-1]:\n        return True\n    else:\n        return False\n\ndef find_smallest_palindrome(number):\n    for i in range(10000, 100000):\n        if is_palindrome(i):\n            if i % 11 == 0:\n                return i\n\nprint(find_smallest_palindrome(5))"
  },
  {
    "example_id": 368,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "106.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "b = 4\nwhile True:\n    if len(str(423 % b)) == 3:\n        break\n    else:\n        b += 1\nprint(b)"
  },
  {
    "example_id": 369,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "77.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "days_with_3 = 0\nfor day in range(1, 366):\n    if str(day)[0] == '3':\n        days_with_3 += 1\nprint(days_with_3)"
  },
  {
    "example_id": 370,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.936390936390936"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "a = 4/37\nb = 3/11\nc = 23/9\n\nsum = a + b + c\nprint(sum)"
  },
  {
    "example_id": 371,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "product = 720\nlargest = int(product**(1/3))\nprint(largest)"
  },
  {
    "example_id": 372,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Solve the system of equations\n# gear 1: 33/3 = 11 times per minute\n# gear 2: 45 times per minute\n# mark on gear 1 initially pointing due north\n# mark on gear 2 initially pointing due north\n\nx = 11\ny = 45\n\n# Solve for t, the time in minutes\nt = solve_system(x, y)\n\n# Convert minutes to seconds\nt_seconds = t * 60\n\n# Print the time\nprint(t_seconds)"
  },
  {
    "example_id": 373,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 3\nremainder = (2*n + 1) % 7\nprint(remainder)"
  },
  {
    "example_id": 374,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "numbers = [12, 21, 11, 23]\nsum = np.sum(numbers)\nif (sum % 2) == 0:\n    print(\"No solution\")\nelse:\n    for i in range(1, 10):\n        if sum % i == 0:\n            print(i)"
  },
  {
    "example_id": 375,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = 13**13 + 5\ny = 6\n\nprint(x % y)"
  },
  {
    "example_id": 376,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "262144.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "n = 4**9\nprint(n)"
  },
  {
    "example_id": 377,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "409.0"
    ],
    "solution": "base9 = 58 - 18\nprint(base9)"
  },
  {
    "example_id": 378,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 2\nwhile True:\n    if (x**2 + x) % 10 == 0:\n        print(x)\n        break\n    else:\n        x += 1"
  },
  {
    "example_id": 379,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "83.0",
      "1411.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "# Compute 17^(-1) mod 83\nx = 17\ny = 83\ngcd_xy = gcd(x, y)\nprint(x,'mod', y, '=', x*y//gcd_xy)"
  },
  {
    "example_id": 380,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "b = 2\nbase = 47\nnum_digits = 2\ndigits = []\nwhile len(digits) < num_digits:\n    base = base % b\n    if base == 0:\n        break\n    else:\n        digits.append(base)\nprint(b)"
  },
  {
    "example_id": 381,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3504.0"
    ],
    "annotated_answers": [
      "3504.0"
    ],
    "solution": "def add_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total\n\ndef next_number(num):\n    num += 1\n    while add_digits(num)!= 12:\n        num += 1\n    return num\n\nprint(next_number(3456))"
  },
  {
    "example_id": 382,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.341068275337658",
      "18"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 300\ndivisors = [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 18, 20, 24, 30, 36, 40, 45, 50, 60, 72, 80, 90, 100, 120, 125, 128, 150, 180, 200, 240, 252, 300]\nA = np.prod(divisors)\nprint(A)\n\n\ndistinct_prime_divisors = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nsum_distinct_prime_divisors = 0\nfor prime in distinct_prime_divisors:\n    if prime in divisors:\n        sum_distinct_prime_divisors += prime\nprint(sum_distinct_prime_divisors)"
  },
  {
    "example_id": 383,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2310.0"
    ],
    "annotated_answers": [
      "2079.0"
    ],
    "solution": "def is_terminating_decimal(x):\n    if x == int(x):\n        return True\n    else:\n        return False\n\ndef is_in_S(k):\n    if is_terminating_decimal(17*k/66) and is_terminating_decimal(13*k/105):\n        return True\n    else:\n        return False\n\ndef find_smallest_integer_in_S_greater_than_2010():\n    smallest = 2011\n    while not is_in_S(smallest):\n        smallest += 1\n    return smallest\n\nprint(find_smallest_integer_in_S_greater_than_2010())"
  },
  {
    "example_id": 384,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "625.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 5**100\nsum = n % 1000\nprint(sum)"
  },
  {
    "example_id": 385,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor i in range(7438, 7446):\n    sum += i\nprint(sum % 8)"
  },
  {
    "example_id": 386,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "715.0"
    ],
    "solution": "T = 1400000000000000000000000000000000000000000000000000000000000000\nT = int(T)\nT = str(T)\nT = re.findall(r'\\d', T)\nT = np.array(T)\nT = np.array(T, dtype=int)\nT = np.prod(T)\nT = T % 14\nprint(T)"
  },
  {
    "example_id": 387,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 2**8\nb = 5\nprint(a % b)"
  },
  {
    "example_id": 388,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "5.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "3.0",
      "0.0",
      "5.0",
      "0.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "N = 10\nx = np.arange(N)\ny = np.zeros(N)\nfor i in range(N):\n    if i % 8 == 0:\n        y[i] = 5\n    elif i % 6 == 0:\n        y[i] = 3\nprint(x)\nprint(y)"
  },
  {
    "example_id": 389,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "69.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "def divisible_by_13(n):\n    return n % 13 == 0\n\ndef count_divisible_numbers(n):\n    count = 0\n    for i in range(100, n+1):\n        if divisible_by_13(i):\n            count += 1\n    return count\n\nn = 1000\nprint(count_divisible_numbers(n))"
  },
  {
    "example_id": 390,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1512.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "product = 5 * 6 * 7 * 8 * 9 * 10\nprint(product // 100)"
  },
  {
    "example_id": 391,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "61.0",
      "1.0",
      "1.0",
      "2.0",
      "60.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 6 # number of faces\nm = 2**n # number of vertices\n\n# all possible numbering of faces\nfor i in range(1, m+1):\n    for j in range(1, m+1):\n        for k in range(1, m+1):\n            for l in range(1, m+1):\n                if i + j + k + l == m:\n                    print(i, j, k, l)"
  },
  {
    "example_id": 392,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "for i in range(10, 100):\n    if i % 10 == 0 and i % 1 == 0:\n        if i % 10 == i % 1:\n            print(i)\n            break"
  },
  {
    "example_id": 393,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "N = 12*15*18*24\nprint(N % 6)"
  },
  {
    "example_id": 394,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.72",
      "-5.0"
    ],
    "annotated_answers": [
      "6.72",
      "-05"
    ],
    "solution": "decimal = 21 / (2**2 * 5**7)\nprint(decimal)"
  },
  {
    "example_id": 395,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "n = 997\nm = 1000\ngcd_n_m = gcd(n, m)\nprint(gcd_n_m)"
  },
  {
    "example_id": 396,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "43436.0"
    ],
    "solution": "# Define the function to convert a base 10 number to base 6\ndef base_6(n):\n    base_6_digits = []\n    while n > 0:\n        base_6_digits.append(n % 6)\n        n //= 6\n    return base_6_digits\n\n# Test the function on 999\nprint(base_6(999))"
  },
  {
    "example_id": 397,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 2\nprint((3*n)%11)"
  },
  {
    "example_id": 398,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a = 4*6\nb = 3*2\nab = a+b\nprint(ab)"
  },
  {
    "example_id": 399,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "n = 10\nwhile True:\n    if gcd(n, 130) == 1 and gcd(n, 231) == 1:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 400,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "993.0"
    ],
    "annotated_answers": [
      "935.0"
    ],
    "solution": "# \nX = 1000\nwhile X % 8!= 1:\n    X -= 1\nprint(X)"
  },
  {
    "example_id": 401,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "1.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def gcd(n, m):\n    if m == 0:\n        return n\n    else:\n        return gcd(m, n % m)\n\ndef gcd_range(start, end):\n    gcds = []\n    for i in range(start, end + 1):\n        gcds.append(gcd(i + 5, i + 11))\n    return gcds\n\nprint(gcd_range(1, 5))"
  },
  {
    "example_id": 402,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "392.0"
    ],
    "annotated_answers": [
      "30325.0"
    ],
    "solution": "n1 = int('1234', 5)\nn2 = int('4321', 5)\nprint(n2 - n1)"
  },
  {
    "example_id": 403,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def factors(n):\n    factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if n // i!= i:\n                factors.append(n // i)\n    return factors\n\nprint(len(factors(48)))"
  },
  {
    "example_id": 404,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "tens_digit = 0\nfor i in range(1, 10):\n    tens_digit += (11**i) % 10\nprint(tens_digit)"
  },
  {
    "example_id": 405,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "quarters = 25\npiles = 5\nremainder = quarters % piles\nif remainder < 10:\n    print(remainder)\nelse:\n    piles = 7\n    remainder = quarters % piles\n    print(remainder)"
  },
  {
    "example_id": 406,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def is_perfect_square(x):\n    y = x**0.5\n    return y == int(y)\n\ndef is_perfect_cube(x):\n    y = x**(1/3)\n    return y == int(y)\n\ndef is_perfect_power(x):\n    y = x**0.5\n    return y == int(y)\n\ndef is_perfect_fourth_power(x):\n    y = x**(1/4)\n    return y == int(y)\n\nn = 4\nwhile not is_perfect_fourth_power(n**2):\n    n += 2\nprint(n)"
  },
  {
    "example_id": 407,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "base = 6\nx = 413_6 - 215_6\nprint(x % base)"
  },
  {
    "example_id": 408,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 121\nb = 122\nc = 123\nprint(a * b * c % 4)"
  },
  {
    "example_id": 409,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "summation = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11]\nremainder = sum(summation) % 8\nprint(remainder)"
  },
  {
    "example_id": 410,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40507599.0"
    ],
    "annotated_answers": [
      "11121123.0"
    ],
    "solution": "a = 2012_3\nb = 201_3\nab = a*b\nprint(ab)"
  },
  {
    "example_id": 411,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "count = 0\nfor i in range(1, 1000):\n    divisors = set(range(1, i + 1))\n    if len(divisors) == 3:\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 412,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "sum = 0\nfor i in range(2000, 2007):\n    sum += i\nremainder = sum % 7\nprint(remainder)"
  },
  {
    "example_id": 413,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "if 315 % 9 == 0:\n    print(315 // 9)\nelse:\n    print(\"No Solution\")"
  },
  {
    "example_id": 414,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "b_a = 71\na = b_a - 1\nprint(a)"
  },
  {
    "example_id": 415,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "6.0",
      "4.0",
      "2.0",
      "0.0",
      "-2.0",
      "-4.0",
      "-6.0",
      "-8.0",
      "-7.0",
      "-5.0",
      "-3.0",
      "-1.0",
      "1.0",
      "3.0",
      "5.0",
      "7.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "A = '12345678987654321'\nB = '987654321123456789'\n\nA_list = [int(digit) for digit in A]\nB_list = [int(digit) for digit in B]\n\n# Subtracting the numbers\ndiff = [B_list[i] - A_list[i] for i in range(len(A_list))]\n\nprint(diff)"
  },
  {
    "example_id": 416,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "37.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "# find the sum of the smallest 5 numbers that have exactly 4 positive factors\n\n# define function to check if a number has 4 positive factors\ndef has_4_factors(n):\n    factors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    if len(factors) == 4:\n        return True\n    else:\n        return False\n\n# find the 5 smallest numbers that have 4 positive factors\nnums = []\nfor i in range(1, 100):\n    if has_4_factors(i):\n        nums.append(i)\n    if len(nums) == 5:\n        break\n\n# sum the smallest 5 numbers\nsum_nums = 0\nfor num in nums:\n    sum_nums += num\n\nprint(sum_nums)"
  },
  {
    "example_id": 417,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "195.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "b = 13 * 15\nprint(b)"
  },
  {
    "example_id": 418,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "a = 1\nb = 2\nwhile a < 10000:\n    if (27*a) % 40 == 17:\n        print(a)\n        break\n    a += 1\n    b += 1"
  },
  {
    "example_id": 419,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 1+12+123+1234+12345+123456+1234567+12345678\nn %= 9\nprint(n)"
  },
  {
    "example_id": 420,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0",
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return len(divisors)\n\ndef a(a, b):\n    return (a * (2 * a + b) - 2 * a ** 2 + a * b)\n\nprint(divisors(a(3, 5)))\nprint(divisors(a(5, 7)))"
  },
  {
    "example_id": 421,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "num_positive_three_digit_integers = 1000\nnum_congruent_to_7 = 0\nfor i in range(1, num_positive_three_digit_integers):\n    if (i % 19) == 7:\n        num_congruent_to_7 += 1\nprint(num_congruent_to_7)"
  },
  {
    "example_id": 422,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "-449.0"
    ],
    "solution": "# Find the largest negative integer x such that 24x = 15 (mod 1199)\nx = 1199 - 24*((1199 - 15) // 24)\nprint(x)"
  },
  {
    "example_id": 423,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "10.0",
      "15.0",
      "20.0",
      "25.0",
      "30.0",
      "35.0",
      "40.0",
      "45.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "both = []\nfor i in range(1, 50):\n    if str(i)[-1] == str(50-i)[-1]:\n        both.append(i)\nprint(both)"
  },
  {
    "example_id": 424,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Find the sum of 1 through 12\ntotal = 0\nfor i in range(1, 13):\n    total += i\n\n# Determine the modulo 4 remainder of the sum\nremainder = total % 4\nprint(remainder)"
  },
  {
    "example_id": 425,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "true_items = 100 // 4\nfalse_items = 100 // 3\ncorrect_items = true_items + false_items\nprint(correct_items)"
  },
  {
    "example_id": 426,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "m = 10\nn = 4\nremainder = (m+n) % 14\nprint(remainder)"
  },
  {
    "example_id": 427,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5555555555555556"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 4\nnum = (n + 1) / (13 - n)\nprint(num)"
  },
  {
    "example_id": 428,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19090.0"
    ],
    "annotated_answers": [
      "12023.0"
    ],
    "solution": "num1 = 2121_3\nnum2 = 212_3\nprint(num1 - num2)"
  },
  {
    "example_id": 429,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def is_perfect_square(n):\n    return int(n**0.5)**2 == n\n\ndef count_perfect_square_factors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nn = 46656\nprint(count_perfect_square_factors(n))"
  },
  {
    "example_id": 430,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "406.0"
    ],
    "annotated_answers": [
      "3859.0"
    ],
    "solution": "# Compute 817_9 - 145_9 - 266_9\n\n# Convert numbers to base 9\nn_817 = 817\nn_145 = 145\nn_266 = 266\n\n# Subtract\nresult = n_817 - n_145 - n_266\n\n# Convert result to base 9\nresult_base_9 = str(result)\n\n# Print result\nprint(result_base_9)"
  },
  {
    "example_id": 431,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "119.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\n\ndef base_3_palindromes(n):\n    palindromes = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            palindromes += 1\n    return palindromes\n\n\nn = 2007\nprint(base_3_palindromes(n))"
  },
  {
    "example_id": 432,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "143.0"
    ],
    "annotated_answers": [
      "143.0"
    ],
    "solution": "def gcf(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcf(b, a%b)\n\nprint(gcf(1001, 2431))"
  },
  {
    "example_id": 433,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\ndef f(a):\n    x = 3*a**2 + 19*a + 30\n    y = a**2 + 6*a + 9\n    return gcd(x, y) - a\n\nmax_value = 0\nfor i in range(1, 1000000):\n    value = f(i)\n    if value > max_value:\n        max_value = value\nprint(max_value)"
  },
  {
    "example_id": 434,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "remainder_of_3 = 3\nremainder_of_5 = 5\nremainder_of_sum = (remainder_of_3 + remainder_of_5) % 6\nprint(remainder_of_sum)"
  },
  {
    "example_id": 435,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.37"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "a = 25.67\nb = 17.21\nc = 39.17\nd = 26.32\ntotal = a + b + c + d\nprint(total)"
  },
  {
    "example_id": 436,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "P = 25164150\nP = P % 16\nprint(P)"
  },
  {
    "example_id": 437,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "x = 10**100 - 9**100\nprint(len(str(x)))"
  },
  {
    "example_id": 438,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2000.0"
    ],
    "solution": "count = 0\nfor n in range(1, 2010):\n    fraction = n**2 / 2010\n    if hasattr(fraction, 'denominator'):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 439,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "b = 3\nwhile True:\n    num_digits = len(str(b**4))\n    if num_digits == 4:\n        break\n    b += 1\nprint(b)"
  },
  {
    "example_id": 440,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0"
    ],
    "annotated_answers": [
      "427.0"
    ],
    "solution": "# base 7\nprint(126 - 54)"
  },
  {
    "example_id": 441,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80000000000.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "# given\nm = 8*10**10\n# find m\nprint(m)"
  },
  {
    "example_id": 442,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.2"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "# \ndef count_remainders(n, k):\n    return sum(1 for i in range(1, n+1) if i % k == 1)\n\n# \ndef percent_remainders(n, k):\n    return count_remainders(n, k) / n\n\n# \nprint(percent_remainders(100, 5))"
  },
  {
    "example_id": 443,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# \nx = 1 + 3 + 4\nprint(x)"
  },
  {
    "example_id": 444,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1890.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "# Define the number\nnum = 100\n\n# Define the sum of the prime factors\nsum_prime_factors = 47\n\n# Find the prime factors\nprime_factors = [2, 3, 3, 7]\n\n# Calculate the sum of the prime factors\nsum_prime_factors = sum(prime_factors)\n\n# Calculate the product of the prime factors\nproduct_prime_factors = 1\nfor i in range(len(prime_factors)):\n    product_prime_factors = product_prime_factors * prime_factors[i]\n\n# Find the number that satisfies the equation\nnum = sum_prime_factors * product_prime_factors\n\n# Print the number\nprint(num)"
  },
  {
    "example_id": 445,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 29 * 79 + 31 * 81\nprint(x % 10)"
  },
  {
    "example_id": 446,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15602.0"
    ],
    "annotated_answers": [
      "338.0"
    ],
    "solution": "print(235_7+1324_5)"
  },
  {
    "example_id": 447,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "product = 2 * 2\nprint(product)"
  },
  {
    "example_id": 448,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def power(base, exponent):\n    result = 1\n    for i in range(exponent):\n        result *= base\n    return result\n\ndef calculate(num1, num2):\n    result = power(num1, num2)\n    return result\n\ndef solve(num1, num2, mod):\n    result = calculate(num1, num2)\n    return result % mod\n\nresult = solve(129, 34, 11) + solve(96, 38, 11)\nprint(result)"
  },
  {
    "example_id": 449,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "m = 6^2\nprint(m)"
  },
  {
    "example_id": 450,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 5):\n    sum += 2*i\nprint(sum)"
  },
  {
    "example_id": 451,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 269\nbase = 5\n\nsum = 0\nfor digit in str(n):\n    sum += int(digit)\n\nprint(sum)"
  },
  {
    "example_id": 452,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "10.0",
      "80.0",
      "10.0",
      "11.0",
      "79.0",
      "10.0",
      "12.0",
      "78.0",
      "10.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "for i in range(10, 100):\n    for j in range(i, 100):\n        for k in range(j, 100):\n            if sum([i, j, k]) + 1 == 101:\n                print(i, j, k)\n                break"
  },
  {
    "example_id": 453,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 13):\n    sum += pow(i, -1, 13)\nprint((sum % 13))"
  },
  {
    "example_id": 454,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# The superfactorial of 4 is 4!! = 4!4! = 4*3*2*1 = 24\n# The units digit of 24 is 4\nprint(24%10)"
  },
  {
    "example_id": 455,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "residue = (1 + 3 + 5 + 7 + 9 + 11 + 13 + 15) % 16\nprint(residue)"
  },
  {
    "example_id": 456,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2003.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "# Given a number $N$, the number on the card that was removed can be found using the following equation:\n# \n# 77x + (sum of the other 99 numbers) = N\n# \n# We can solve for $x$ by finding the gcd of $N$ and $77$ and then dividing both sides by the gcd.\n# \n# We can also find the sum of the other 99 numbers by finding the sum of all numbers less than or equal to 99 and then subtracting the number that was removed.\n# \n# The sum of the other 99 numbers can be found using the following equation:\n# \n# (sum of all numbers less than or equal to 99) - (number removed)\n# \n# We can solve for the sum of the other 99 numbers by finding the sum of all numbers less than or equal to 99 and then subtracting the number that was removed.\n\nN = 2003\n\n# Find the gcd of N and 77\ngcd_N_77 = gcd(N, 77)\n\n# Divide both sides by the gcd to solve for x\nx = N // gcd_N_77\n\n# Find the sum of all numbers less than or equal to 99\nsum_all = (99 * (99 + 1)) // 2\n\n# Subtract the number that was removed to find the sum of the other 99 numbers\nsum_others = sum_all - N\n\n# Print the number that was removed\nprint(x)"
  },
  {
    "example_id": 457,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "print(321_7 - 321_5)"
  },
  {
    "example_id": 458,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "a = 332\nb = 212\na_base_4 = str(a)\nb_base_3 = str(b)\na_base_10 = int(a_base_4, 4)\nb_base_10 = int(b_base_3, 3)\nprint(a_base_10 - b_base_10)"
  },
  {
    "example_id": 459,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Find the units digit of 18^6.\n\n# The units digit of 18^6 is 6.\nprint(18**6 % 10)"
  },
  {
    "example_id": 460,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "12.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "a = 3\nb = 4\n\n# find the greatest common divisor of a and b\ngcd_ab = gcd(a, b)\nprint(gcd_ab)\n\n# find the least common multiple of a and b\nlcm_ab = (a*b)//gcd_ab\nprint(lcm_ab)\n\n# find the factors of a and b\nfactors_a = []\nfactors_b = []\nfor i in range(1, int(a**0.5)+1):\n    if a % i == 0:\n        factors_a.append(i)\n        factors_a.append(a//i)\nfactors_b = []\nfor i in range(1, int(b**0.5)+1):\n    if b % i == 0:\n        factors_b.append(i)\n        factors_b.append(b//i)\n\n# find the common factors of a and b\ncommon_factors = []\nfor factor_a in factors_a:\n    for factor_b in factors_b:\n        if factor_a == factor_b:\n            common_factors.append(factor_a)\ncommon_factors.sort()\nprint(common_factors)\n\n# find the prime factors of a and b\nprime_factors_a = []\nprime_factors_b = []\nfor factor_a in factors_a:\n    if factor_a not in common_factors:\n        prime_factors_a.append(factor_a)\nfor factor_b in factors_b:\n    if factor_b not in common_factors:\n        prime_factors_b.append(factor_b)\nprime_factors_a.sort()\nprime_factors_b.sort()\nprint(prime_factors_a)\nprint(prime_factors_b)\n\n# find the prime factors of lcm(a, b)\nlcm_ab_prime_factors = []\nfor factor_a in prime_factors_a:\n    for factor_b in prime_factors_b:\n        if factor_a == factor_b:\n            lcm_ab_prime_fact"
  },
  {
    "example_id": 461,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def power(base, exponent):\n    result = 1\n    for i in range(exponent):\n        result *= base\n    return result\n\ndef calculate(base, exponent):\n    return power(base, exponent) % 17\n\nprint(calculate(225, 66) - calculate(327, 66))"
  },
  {
    "example_id": 462,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "2.0",
      "0.0",
      "3.0",
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = 5\nb = 10\nc = 15\n\nt = np.zeros(30)\nt[0] = 0\nt[1] = 1\nfor i in range(2, 30):\n    t[i] = t[i-2] + t[i-1]\n\nprint(t)\nprint(t[a] + t[b] + t[c])\nprint(t[a] + t[b] + t[c])"
  },
  {
    "example_id": 463,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "142.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "N = 137\nt = 506\ndt = 1\nt_end = t + dt\nN_end = N - 1\nwhile t < t_end:\n    N = N + 5\n    t += dt\n    if N > N_end:\n        break\n\nprint(N)"
  },
  {
    "example_id": 464,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "142857.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Set n to 142857\nn = 142857\n\n# Print the solution\nprint(n)"
  },
  {
    "example_id": 465,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# 5! = 5 * 4 * 3 * 2 * 1 = 120\nfor i in range(1, 121):\n    if i % 2!= 0 and i % 3!= 0 and i % 4!= 0 and i % 5!= 0:\n        print(i)\n        break"
  },
  {
    "example_id": 466,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "# Find 9 modulo 100\nprint(9 % 100)"
  },
  {
    "example_id": 467,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "b = 9\nP = b - 2\nQ = P / 2\nprint(P)"
  },
  {
    "example_id": 468,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "15.0",
      "15.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "divisors = [1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60]\n\nfor number in [840, 960, 1200]:\n    print(sum([1 for divisor in divisors if number % divisor == 0]))"
  },
  {
    "example_id": 469,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = 19\nb = 19\nc = 19\nd = 19\n\n# find the remainder of 2a + b - c when divided by 19\nremainder = (2*a + b - c) % 19\nprint(remainder)"
  },
  {
    "example_id": 470,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1950.0"
    ],
    "annotated_answers": [
      "1950.0"
    ],
    "solution": "n = 2**2001 * 5**1950 // 4**27\nprint(len(str(n)))"
  },
  {
    "example_id": 471,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "15.0",
      "3.0",
      "5.0",
      "5.0",
      "3.0",
      "15.0",
      "1.0",
      "15.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "import itertools\n\ntiles = 15\n\nfor i in range(1, tiles + 1):\n    for j in range(1, tiles + 1):\n        if i * j == tiles:\n            print(i, j)\n            break\n\nprint(i * j)"
  },
  {
    "example_id": 472,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "for i in range(11, 1000):\n    if i**0.5 == int(i**0.5) and i**1/3 == int(i**1/3):\n        print(i)\n        break"
  },
  {
    "example_id": 473,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "def sum_digits(n):\n    return int(str(n)[0]) + int(str(n)[1])\n\ndef product_digits(n):\n    return int(str(n)[0]) * int(str(n)[1])\n\ndef sum_product_digits(n):\n    return sum_digits(n) + product_digits(n)\n\npositive_two_digit_integers = [i for i in range(100, 1000) if i % 10 == 0 and i % 100!= 0]\narithmetic_mean = sum(sum_product_digits(i) for i in positive_two_digit_integers) / len(positive_two_digit_integers)\nprint(arithmetic_mean)"
  },
  {
    "example_id": 474,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from math import gcd\n\ndef find_nth_digit(a, n):\n    while n >= 0:\n        a, n = a // 10, n - 1\n    return a % 10\n\ndef find_nth_digit_of_fraction(numerator, denominator, n):\n    return find_nth_digit(numerator * denominator ** (n - 1), n)\n\nprint(find_nth_digit_of_fraction(6, 13, 453))"
  },
  {
    "example_id": 475,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(np.sqrt(144))"
  },
  {
    "example_id": 476,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "# Jax bought exactly enough trees to plant eight equal rows. Then one tree died and couldn't be planted, but he still had enough trees left to plant exactly nine equal rows. After that, a tree was stolen, but he still had enough trees left to plant exactly ten equal rows. If he bought the least number of trees satisfying these three conditions, how many trees did he buy?\n\n# Find the least common multiple of 8 and 9\nlcm = 8*9\n\n# Find the least common multiple of lcm and 10\nlcm = lcm*10\n\n# Jax bought lcm trees\nprint(lcm)"
  },
  {
    "example_id": 477,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "n = 1\nwhile True:\n    if sum_divisors(n) == n**6:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 478,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "remainder = 20_7 % 11\nif remainder == 0:\n    print(10)\nelse:\n    print(11 - remainder)"
  },
  {
    "example_id": 479,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 1\nwhile n < 10:\n    print(n)\n    n += 1"
  },
  {
    "example_id": 480,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "steps = 11\ntotal_steps = 139\nend_step = (total_steps % steps) + 1\nprint(end_step)"
  },
  {
    "example_id": 481,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "sum = 0\nfor i in range(101):\n    sum += 2**i\nremainder = sum % 7\nprint(remainder)"
  },
  {
    "example_id": 482,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "N = 33818**2 + 33819**2 + 33820**2 + 33821**2 + 33822**2\nprint(N % 17)"
  },
  {
    "example_id": 483,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "base = 11\nn = 10\nend_zeroes = 0\nwhile n > 0:\n    end_zeroes += n % base\n    n //= base\nprint(end_zeroes)"
  },
  {
    "example_id": 484,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\n\nsum = a + b + c\n\nprint(sum)"
  },
  {
    "example_id": 485,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "for i in range(26, 100):\n    if i % 25 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 486,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 629\nbase_7 = str(n)\nbase_8 = str(n)\ncount = 0\nfor i in range(len(base_7)):\n    if base_7[i] == base_8[i]:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 487,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "2045.0"
    ],
    "solution": "# 413_5 / 2_5 = 206_5\nprint(413_5 // 2_5)"
  },
  {
    "example_id": 488,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = 8\nm = 17\n\nresidue = (5 * n) % m\nprint(residue)"
  },
  {
    "example_id": 489,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 8888\nsum = 0\nwhile n > 0:\n    sum += n % 10\n    n //= 10\nprint(sum)"
  },
  {
    "example_id": 490,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2136.05"
    ],
    "annotated_answers": [
      "499.0"
    ],
    "solution": "labor_cost = 242.5 * 3.5\nequipment_cost = 367.8 * 3.5\ntotal_cost = labor_cost + equipment_cost\nprint(total_cost)"
  },
  {
    "example_id": 491,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Define the function to calculate the remainder\ndef remainder(a, b):\n    return a % b\n\n# Test the function\nprint(remainder(5**30, 7))"
  },
  {
    "example_id": 492,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 10\nrem = n % 5\nprint(rem)\nprint(2*n % 5)"
  },
  {
    "example_id": 493,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 2**5 * 3**6\nperfect_squares = []\nfor i in range(1, int(n**0.5)+1):\n    if i**2 == n % i:\n        perfect_squares.append(i)\nprint(len(perfect_squares))"
  },
  {
    "example_id": 494,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "621.0"
    ],
    "solution": "# Find the largest three-digit number\n# in which the product of the digits is 12\nmax_three_digit_num = 999\nfor i in range(100, max_three_digit_num+1):\n    num = i\n    # check if product of digits is 12\n    if num % 10 == 0:\n        continue\n    prod = 1\n    while num > 0:\n        prod *= num % 10\n        num //= 10\n    if prod == 12:\n        print(i)\n        break"
  },
  {
    "example_id": 495,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "91.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "n = 100\nm = 13\nif n % m == 0:\n    print(n)\n    exit()\nelif n % m == 1:\n    print(n - 1)\n    exit()\nelse:\n    n_minus_m = n - m\n    while n_minus_m % m!= 0:\n        n_minus_m += 1\n    print(n_minus_m)"
  },
  {
    "example_id": 496,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 13\na, b = 3, 4\ninverse_of_ab = pow(a*b, -1, n)\ninverse_of_a = pow(a, -1, n)\ninverse_of_b = pow(b, -1, n)\n\ninverse_of_a_plus_b = pow(a+b, -1, n)\n\nremainder = (inverse_of_a + inverse_of_b) % n\n\nprint(remainder)"
  }
]