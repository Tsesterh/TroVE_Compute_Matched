[
  {
    "example_id": 0,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 2**3 * 4**5 * 6**7 * 8**9\nprint(a % 13)"
  },
  {
    "example_id": 1,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1440.0"
    ],
    "annotated_answers": [
      "1440.0"
    ],
    "solution": "num = 2010\nwhile num % 7!= 5 or num % 11!= 10 or num % 13!= 10:\n    num -= 1\nprint(num)"
  },
  {
    "example_id": 2,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "N = 2003\nsqrt_N = math.sqrt(N)\nprimes = [2]\nfor num in range(3, int(sqrt_N)+1, 2):\n    is_prime = True\n    for prime in primes:\n        if num % prime == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(num)\nnum_primes = len(primes)\nprint(num_primes)"
  },
  {
    "example_id": 3,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n = 10\nn_factor = 1\nfor i in range(1, int(math.sqrt(n)+1)):\n    if n % i == 0:\n        n_factor += 2\nprint(n_factor)"
  },
  {
    "example_id": 4,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# number of full boxes\nboxes = 44\n# number of donuts in each box\ndonuts = 13\n# number of donuts in a batch\nbatch = 20\n\n# number of donuts left over\nleft_over = boxes * donuts % batch\nprint(left_over)"
  },
  {
    "example_id": 5,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "num = 3^65^10\ncubes = []\nfor i in range(1, int(math.sqrt(num))+1):\n    if num % i**3 == 0:\n        cubes.append(i)\nprint(len(cubes))"
  },
  {
    "example_id": 6,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def get_remainder(n):\n    sum = (n + 4) + (n + 6) + (n + 8)\n    return sum % 9\n\nremainder = get_remainder(3)\nprint(remainder)"
  },
  {
    "example_id": 7,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = 8\ny = 2\nz = 1/6\n\na = x/y\nb = z*x\nc = a/b\n\nfamily_size = int(c)\nprint(family_size)"
  },
  {
    "example_id": 8,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "product = 1\nfor i in range(1, 13, 2):\n    product *= i\nprint(product % 10)"
  },
  {
    "example_id": 9,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 682\nn_base_6 = n_to_base_n(n, 6)\nproduct = int(n_base_6[0]) * int(n_base_6[-1])\nprint(product)"
  },
  {
    "example_id": 10,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10001011000.0"
    ],
    "annotated_answers": [
      "100002.0"
    ],
    "solution": "n1 = 101\nn2 = 1011\n\n# \nresult = n1 + n2\n\n# \nresult_bin = n_to_base_n(result, 2)\n\n# \nprint(result_bin)"
  },
  {
    "example_id": 11,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26771144400.0",
      "26771144400.0"
    ],
    "annotated_answers": [
      "740.0"
    ],
    "solution": "def lcm(numbers):\n    result = numbers[0]\n    for i in range(1, len(numbers)):\n        result = int(result * numbers[i] / gcd(result, numbers[i]))\n    return result\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nnumbers = []\nfor i in range(1, 26):\n    numbers.append(i)\n\nlcm_result = lcm(numbers)\nprint(lcm_result)\n\nnumbers = [int(i) for i in str(lcm_result)]\nresult = 0\nfor i in range(len(numbers)):\n    result += numbers[i] * (10**(len(numbers)-i-1))\nprint(result)"
  },
  {
    "example_id": 12,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1400.0"
    ],
    "annotated_answers": [
      "1058.0"
    ],
    "solution": "n = 35\nmodulus = 1399\nm = 40\n\ndef get_remainder(n):\n    return n % modulus\n\ndef n_to_base_n(n, base):\n    return n % base\n\ndef solve_problem(n, m):\n    remainder = get_remainder(n)\n    if remainder == 1:\n        return n\n    else:\n        return solve_problem(n * m, m)\n\nresult = solve_problem(n, m)\nprint(result)"
  },
  {
    "example_id": 13,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "106.0",
      "113.0",
      "120.0",
      "127.0",
      "134.0",
      "141.0",
      "148.0",
      "155.0",
      "162.0",
      "169.0"
    ],
    "annotated_answers": [
      "106.0"
    ],
    "solution": "for i in range(100, 1000):\n    if i % 7 == 1:\n        print(i)"
  },
  {
    "example_id": 14,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9261000.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# number of possible values for a\n# = number of possible values for b\n# = number of possible values for lcm(a,b)\n# = number of possible values for 210^3\n# = 210^3\nprint(210**3)"
  },
  {
    "example_id": 15,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "40.0",
      "10.0",
      "10.0",
      "40.0",
      "40.0",
      "4.0"
    ],
    "annotated_answers": [
      "70.0"
    ],
    "solution": "# Use Euclidean Algorithm to find the gcd\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# Use Extended Euclidean Algorithm to find the lcm\ndef lcm(a, b):\n    if a == 0:\n        return 0\n    else:\n        return a * b // gcd(a, b)\n\n# Find gcd and lcm\ngcd_10_40 = gcd(10, 40)\nlcm_10_40 = lcm(10, 40)\n\n# Check if gcd and lcm are correct\nprint(\"GCD(10, 40) =\", gcd_10_40)\nprint(\"LCM(10, 40) =\", lcm_10_40)\n\n# Find n\nn = lcm_10_40 // gcd_10_40\n\n# Check if n is correct\nprint(\"n =\", n)"
  },
  {
    "example_id": 16,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define a function to return the remainder when dividing n by base\ndef get_remainder(n):\n    if n == 0:\n        return 0\n    else:\n        return n % base\n\n# Define a function to convert an integer n to base base\ndef n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    else:\n        digits = []\n        while n > 0:\n            digits.append(n % base)\n            n //= base\n        return digits[::-1]\n\n# Set the base\nbase = 2\n\n# Set the maximum number of digits\nnum_digits = 10\n\n# Initialize the sum\nsum = 0\n\n# Loop over all numbers with the same number of digits in base 2 and 3\nfor n in range(1, num_digits):\n    # Convert n to base base\n    digits_2 = n_to_base_n(n, base)\n    digits_3 = n_to_base_n(n, 3)\n    # Check if the number of digits is the same\n    if len(digits_2) == len(digits_3):\n        # Get the remainder when dividing n by base\n        remainder = get_remainder(n)\n        # Check if the remainder is 0\n        if remainder == 0:\n            # Add n to the sum\n            sum += n\n\n# Print the sum in base 10\nprint(sum)"
  },
  {
    "example_id": 17,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    digits = []\n    while n > 0:\n        digits.append(n % base)\n        n //= base\n    return digits[::-1]\n\ndef get_rightmost_digit(product):\n    digits = n_to_base_n(product, 10)\n    return digits[-1]\n\ndef get_rightmost_digit_of_product(n):\n    product = 1\n    for i in range(2, n+1):\n        if get_remainder(i)!= 0:\n            product *= i\n    return get_rightmost_digit(product)\n\nprint(get_rightmost_digit_of_product(98))"
  },
  {
    "example_id": 18,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.1972328419966698"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "b = np.log(103) / np.log(4 * 12)\nprint(b)"
  },
  {
    "example_id": 19,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.8333333333333333",
      "1.8333333333333333"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# Base 3\nnumbers = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\naverage = sum(numbers) / len(numbers)\nprint(average)\n\n# Base 6\nnumbers = [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\naverage = sum(numbers) / len(numbers)\nprint(average)"
  },
  {
    "example_id": 20,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "196.0"
    ],
    "annotated_answers": [
      "236.0"
    ],
    "solution": "# Number of soldiers\nn = 200\n\n# Number of groups of 4\nnum_groups_4 = math.floor(n / 4)\n\n# Number of groups of 3\nnum_groups_3 = math.floor(n / 3)\n\n# Number of groups of 11\nnum_groups_11 = math.floor(n / 11)\n\n# Number of soldiers left without a group\nsoldiers_left_4 = n - (num_groups_4 * 4)\nsoldiers_left_3 = n - (num_groups_3 * 3)\nsoldiers_left_11 = n - (num_groups_11 * 11)\n\n# Calculate the least common multiple of 4, 3, and 11\nlcm_4_3_11 = lcm(4, 3) * lcm(lcm(4, 11), 3)\n\n# Calculate the most likely number of soldiers\nmost_likely_num_soldiers = n - (soldiers_left_4 + soldiers_left_3 + soldiers_left_11)\n\nprint(most_likely_num_soldiers)"
  },
  {
    "example_id": 21,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "322.0",
      "3620.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = np.arange(100)\nb = a*(a-1)**-1\nc = 4*a**-1\nd = np.where(b == c)\nprint(d)"
  },
  {
    "example_id": 22,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41956.0"
    ],
    "annotated_answers": [
      "11014.0"
    ],
    "solution": "print(123_4 * 3_4)"
  },
  {
    "example_id": 23,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.05625"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(9/160 % 10)"
  },
  {
    "example_id": 24,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Compute 29**13 - 5**13 modulo 7\nresult = (29**13 - 5**13) % 7\nprint(result)"
  },
  {
    "example_id": 25,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(n):\n    return gcd(13*n+8, 5*n+3)\n\nprint(max(map(solve, range(1, 1000000))))"
  },
  {
    "example_id": 26,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "200.0"
    ],
    "annotated_answers": [
      "313.0"
    ],
    "solution": "n_eggs = 200\n\n# Fill as many dozen-egg containers as possible\nn_containers = n_eggs // 12\n\n# The last container had 1 egg left over\nn_eggs_remaining = n_eggs % 12\n\n# Fill as many customized baker-dozen-egg containers as possible\nn_baker_dozen_containers = n_eggs_remaining // 13\n\n# The last container had 1 egg left over\nn_eggs_remaining = n_eggs_remaining % 13\n\n# Minimum number of eggs\nmin_n_eggs = n_containers * 12 + n_baker_dozen_containers * 13 + n_eggs_remaining\n\nprint(min_n_eggs)"
  },
  {
    "example_id": 27,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3040040.0"
    ],
    "annotated_answers": [
      "21126.0"
    ],
    "solution": "n = 315_6 * 4_6\nprint(n_to_base_n(n, 6))"
  },
  {
    "example_id": 28,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "6.0",
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "for n in range(2, 10, 2):\n    print(n)"
  },
  {
    "example_id": 29,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 3\n\ndef n_to_base_n(n, base):\n    return int(n % base)\n\nn = 1\nwhile get_remainder(n)!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 30,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "negative_product = 0\nfor a in range(-200, -1):\n    divisors = [d for d in range(1, a + 1) if a % d == 0]\n    product = np.prod(divisors)\n    if product < 0:\n        negative_product += 1\nprint(negative_product)"
  },
  {
    "example_id": 31,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "count = 0\nfor i in range(100, 200):\n    if i % 4 == 3:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 32,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "88.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "# Calculate number of integers between 0 and 100\nnum_ints = 101\n\n# Initialize count of integers with gcd(m,100) a single-digit number\ncount = 0\n\n# Iterate over integers between 0 and 100\nfor m in range(num_ints):\n    # If gcd(m,100) is a single-digit number, increment count\n    if gcd(m,100) < 10:\n        count += 1\n\n# Print count\nprint(count)"
  },
  {
    "example_id": 33,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def is_perfect_square(n):\n    return int(n**0.5)**2 == n\n\ndef is_permutation(n1, n2):\n    return sorted(str(n1)) == sorted(str(n2))\n\ndef find_permutations(n):\n    for i in range(1, int(n**0.5)+1):\n        if is_perfect_square(i):\n            for j in range(1, int(n**0.5)+1):\n                if is_perfect_square(j) and is_permutation(i, j):\n                    yield i, j\n\ndef find_largest_permutation(n):\n    permutations = list(find_permutations(n))\n    permutations.sort(key=lambda x: x[0])\n    permutations.sort(key=lambda x: x[1])\n    permutations.sort(key=lambda x: x[0], reverse=True)\n    return len(permutations)\n\nprint(find_largest_permutation(1000))"
  },
  {
    "example_id": 34,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "531340.0",
      "531340.0",
      "531340.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "N = 531340\nN_in_base_6 = str(N)\nN_in_base_8 = str(N)\nN_in_base_10 = n_to_base_n(N, 10)\nprint(N_in_base_6)\nprint(N_in_base_8)\nprint(N_in_base_10)"
  },
  {
    "example_id": 35,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1482.0"
    ],
    "annotated_answers": [
      "1147.0"
    ],
    "solution": "# Solution\nmax_product = 0\nfor p in range(2, 40):\n    for q in range(2, 40):\n        if p!= q:\n            product = p * q\n            if product > max_product:\n                max_product = product\nprint(max_product)"
  },
  {
    "example_id": 36,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "504.0",
      "1.100111011000101",
      "36",
      "1473055734272.0"
    ],
    "annotated_answers": [
      "76028.0"
    ],
    "solution": "a = 324\nb = 111010101110\nprint(n_to_base_n(a, 8))\nprint(n_to_base_n(b, 2))\nprint(n_to_base_n(a + b, 8))"
  },
  {
    "example_id": 37,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Calculate 16^17 * 17^18 * 18^19\nn = 16 ** 17 * 17 ** 18 * 18 ** 19\n# Find the units digit of n\nunits_digit = n % 10\nprint(units_digit)"
  },
  {
    "example_id": 38,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "525.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "A = 1575\nB = 1050\na = 3\nb = 7\n\n# Get least common multiple\nlcm_AB = lcm(A, B)\n\n# Get ratio\nratio = lcm_AB / A\n\n# Get greatest common divisor\ngcd_AB = gcd(A, B)\n\nprint(gcd_AB)"
  },
  {
    "example_id": 39,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def gcf(n):\n    for i in range(1, n+1):\n        if n % i == 0:\n            return i\n\ngcf_of_3_digit_numbers = gcf(100)\nprint(gcf_of_3_digit_numbers)"
  },
  {
    "example_id": 40,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return int(n/base)\n\ndef is_square(n):\n    root = math.sqrt(n)\n    return int(root) == root\n\ndef get_tens_digit(n):\n    return n // 10\n\ndef get_distinct_values_of_b(base):\n    distinct_values = set()\n    for i in range(10):\n        for j in range(10):\n            n = i*base + j\n            if is_square(n):\n                distinct_values.add(get_tens_digit(n))\n    return distinct_values\n\nbase = 6\ndistinct_values = get_distinct_values_of_b(base)\nprint(distinct_values)"
  },
  {
    "example_id": 41,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return int(n % base)\n\ndef ones_digit(n):\n    return get_remainder(n_to_base_n(n, base=10))\n\nprint(ones_digit(1 * 3 * 5 * 7 * 9 * 11 * 13))"
  },
  {
    "example_id": 42,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15089.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "n = 3**17 + 3**10\n\nn_str = str(n+1)\n\nn_str_len = len(n_str)\n\nn_str_first_3 = n_str[:n_str_len//3]\nn_str_last_3 = n_str[n_str_len//3:]\n\nn_str_first_3_len = len(n_str_first_3)\n\nif n_str_first_3_len % 2 == 0:\n    n_str_first_3_len -= 1\n\nn_str_first_3 = n_str_first_3[:n_str_first_3_len]\n\nn_str_last_3 = n_str_last_3[:n_str_len//3]\n\nif n_str_last_3[0] == '3':\n    n_str_last_3 = n_str_last_3[1:]\n\nif len(n_str_first_3) == 1:\n    n_str_first_3 = '0' + n_str_first_3\n\nif len(n_str_last_3) == 1:\n    n_str_last_3 = '0' + n_str_last_3\n\nA = int(n_str_first_3)\nB = int(n_str_last_3)\nC = int(n_str_last_3)\n\nprint(100*A + 10*B + C)"
  },
  {
    "example_id": 43,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17446.0"
    ],
    "annotated_answers": [
      "6710.0"
    ],
    "solution": "smallest = 1342 * 13\nremainder = smallest % 13\nprint(smallest)"
  },
  {
    "example_id": 44,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "6.0",
      "9.0",
      "9.0",
      "9.0",
      "6.0",
      "1.0",
      "1.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "142.0"
    ],
    "solution": "a, b = 4641, 2521\ngcd_ab = gcd(a, b)\nab = a*b\n\nab_divided_by_gcd = ab // gcd_ab\n\nab_divided_by_gcd_to_base_10 = n_to_base_n(ab_divided_by_gcd, 10)\n\nab_divided_by_gcd_to_base_10_list = list(map(int, str(ab_divided_by_gcd_to_base_10)))\n\nprint(ab_divided_by_gcd_to_base_10_list)\n\na_divided_by_gcd = ab_divided_by_gcd_to_base_10_list[0]\nb_divided_by_gcd = ab_divided_by_gcd_to_base_10_list[1]\n\nprint(a_divided_by_gcd)\nprint(b_divided_by_gcd)\n\nsum = a_divided_by_gcd + b_divided_by_gcd\nprint(sum)"
  },
  {
    "example_id": 45,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 1\nb = 17\n\nn = 4036\n\n# find the remainder\nremainder = get_remainder(n, a, b)\n\n# convert remainder to base 17\nremainder_base_17 = n_to_base_n(remainder, 17)\n\nprint(remainder_base_17)"
  },
  {
    "example_id": 46,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12659.0",
      "59.0"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "# calculate the total amount of money earned\ntotal = 2747 + 3523 + 3737 + 2652\nprint(total)\n\n# calculate the amount of money left after converting coins into bills\nremainder = total % 100\nprint(remainder)"
  },
  {
    "example_id": 47,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "2.0",
      "2.0",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "def ends_in_3(b, n):\n    return str(n)[-1] == str(n)[-1]\n\nb = 10\nprint(ends_in_3(b, 2013)) # True\n\nb = 9\nprint(ends_in_3(b, 2676)) # True"
  },
  {
    "example_id": 48,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "314.0"
    ],
    "annotated_answers": [
      "314.0"
    ],
    "solution": "# Determine the smallest non-negative integer a that satisfies the congruences:\n# a \u2261 2 (mod 3), a \u2261 4 (mod 5), a \u2261 6 (mod 7), a \u2261 8 (mod 9).\na = np.uint64(0)\nwhile True:\n    if (a % 3) == 2 and (a % 5) == 4 and (a % 7) == 6 and (a % 9) == 8:\n        break\n    a += 1\nprint(a)"
  },
  {
    "example_id": 49,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# Find the two smallest positive integer solutions\nu1 = 14\nu2 = 14\nu3 = 14\nu4 = 14\n\n# Calculate the average\navg = (u1 + u2 + u3 + u4) / 4\nprint(avg)"
  },
  {
    "example_id": 50,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 8\n\ndef n_to_base_n(n, base):\n    return np.array([int(i) for i in str(n)])\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\n\nprint(get_remainder(4))\nprint(n_to_base_n(4, 2))\nprint(gcd(2, 4))\nprint(lcm(2, 4))"
  },
  {
    "example_id": 51,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0",
      "26.0",
      "13.0",
      "6.0",
      "3.0",
      "1.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "coins = [53]\nfor i in range(7):\n    coins.append(coins[i] // 2)\nprint(coins)"
  },
  {
    "example_id": 52,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "print(81_9 - 72_9)"
  },
  {
    "example_id": 53,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "11.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b, c = np.random.randint(0, 13, 3)\nprint(a, b, c)\n\nremainder = 0\nremainder += (2*a*b + b*c + c*a) % 13\nremainder += (a*2*b + b*c + c*a) % 13\nremainder += (a*b + 2*b*c + c*a) % 13\nprint(remainder)"
  },
  {
    "example_id": 54,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "94.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "n = 10101\nfactors = []\nfor i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n        factors.append(i)\nfor i in range(len(factors)):\n    factors[i] = factors[i]\nfactors.sort()\nprint(factors[0] + factors[-1])"
  },
  {
    "example_id": 55,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "52.0",
      "4.0",
      "168.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "m = 24\nn = 28\n\ngcd_m_n = gcd(m, n)\nlcm_m_n = lcm(m, n)\n\nprint(m + n)\nprint(gcd_m_n)\nprint(lcm_m_n)"
  },
  {
    "example_id": 56,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def get_remainder(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    else:\n        digits = []\n        while n > 0:\n            digits.append(n % base)\n            n //= base\n        return digits\n\ndef common_divisors(n1, n2):\n    divisors = []\n    for i in range(1, n1+1):\n        if n1 % i == 0 and n2 % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef common_divisors_count(n1, n2):\n    return len(common_divisors(n1, n2))\n\nn1 = 48\nn2 = 156\n\nprint(common_divisors_count(n1, n2))"
  },
  {
    "example_id": 57,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "n = 12\nk = 3\nlcm = lcm(n, k)\ngcd = gcd(n, k)\nprint(lcm/gcd)"
  },
  {
    "example_id": 58,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "50.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# number to check\nN = 1000\n# divisor\nd = 20\n# number of factors\nnum_factors = 0\n# loop through all factors\nfor i in range(1, N+1):\n    # check if factor is divisible by d without remainder\n    if i % d == 0:\n        num_factors += 1\nprint(num_factors)"
  },
  {
    "example_id": 59,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "number = 13**19 * 19**13\nprint(str(number)[-1])"
  },
  {
    "example_id": 60,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "222.0"
    ],
    "annotated_answers": [
      "222.0"
    ],
    "solution": "for i in range(0, 2293):\n    if (31*i) % 2293 == 3:\n        print(i)"
  },
  {
    "example_id": 61,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "7.0",
      "21.0",
      "1.0",
      "21.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 3\nb = 7\nprint(n_to_base_n(a, 10))\nprint(n_to_base_n(b, 10))\nprint(n_to_base_n(a*b, 10))\nprint(n_to_base_n(gcd(a, b), 10))\nprint(n_to_base_n(lcm(a, b), 10))"
  },
  {
    "example_id": 62,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "132.0"
    ],
    "annotated_answers": [
      "3300.0"
    ],
    "solution": "r = 13200 // 100\nprint(r)"
  },
  {
    "example_id": 63,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "cubes = [1, 8, 27, 64, 125, 216, 343, 512, 729]\ncount = 0\nfor cube in cubes:\n    if cube % 3 == 0 and cube % 5 == 0 and cube % 7 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 64,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "5.0",
      "3.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "a = 105\nb = 53\n\ndef get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return np.array(list(map(int, str(n))))\n\ndef get_last_two_digits(n, base):\n    remainder = get_remainder(n)\n    digits = n_to_base_n(n, base)\n    return digits[-2:]\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\na_last_digit = get_last_two_digits(a, 9)[0]\nb_last_two_digits = get_last_two_digits(b, 6)\na_minus_b_last_two_digits = get_last_two_digits(a - b, 3)\n\nprint(a_last_digit)\nprint(b_last_two_digits)\nprint(a_minus_b_last_two_digits)"
  },
  {
    "example_id": 65,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# number of fractions in lowest terms\nnum_fractions = 0\n# loop through all possible numerators\nfor n in range(1, 100):\n    # check if numerator is divisible by 3\n    if n % 3 == 0:\n        # if numerator is divisible by 3, check if denominator is 99\n        if n % 99 == 0:\n            # if numerator is divisible by 3 and denominator is 99, increment counter\n            num_fractions += 1\nprint(num_fractions)"
  },
  {
    "example_id": 66,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1475789056.0",
      "20661046784.0",
      "289254654976.0",
      "4049565169664.0",
      "56693912375296.0",
      "793714773254144.0",
      "1.1112006825558016",
      "16",
      "1.5556809555781222",
      "17",
      "2.1779533378093711",
      "18",
      "3.0491346729331196",
      "19"
    ],
    "annotated_answers": [
      "2743.0"
    ],
    "solution": "# Define the base and the exponent\nbase = 14\nexponent = 3\n\n# Define the range of values\nlow = 100\nhigh = 1000\n\n# Define the remainder\nremainder = 0\n\n# Initialize the largest number\nlargest = 0\n\n# Iterate over the range of values\nfor num in range(low, high):\n    # Calculate the remainder\n    remainder = num % base\n    if remainder == 0:\n        # If the remainder is 0, then this is a possible answer\n        # Calculate the power\n        power = num // base\n        # Calculate the value\n        value = base ** power\n        # Check if the value is the largest\n        if value > largest:\n            # If the value is the largest, then update the largest\n            largest = value\n            # Print the answer\n            print(largest)"
  },
  {
    "example_id": 67,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "3.0",
      "4.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "841.0"
    ],
    "solution": "n = 999\nremainders = [n % i for i in range(3, 8)]\nprint(remainders)"
  },
  {
    "example_id": 68,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10199.0"
    ],
    "annotated_answers": [
      "11189.0"
    ],
    "solution": "def is_sum_of_20(digits):\n    return sum(digits) == 20\n\ndef is_five_digit_number(digits):\n    return len(digits) == 5\n\ndef find_solution():\n    for i in range(10000, 99999):\n        digits = [int(d) for d in str(i)]\n        if is_sum_of_20(digits) and is_five_digit_number(digits):\n            return i\n    return None\n\nprint(find_solution())"
  },
  {
    "example_id": 69,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# \nsum_mod_6 = (sum(range(1, 101)) % 6)\nprint(sum_mod_6)"
  },
  {
    "example_id": 70,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "S = 0\nfor i in range(2010, 4018+1):\n    S += i\nprint(S % 2009)"
  },
  {
    "example_id": 71,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17365.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "b = 10\na = 5\nc = 23\nd = 151\n\nn_to_base_n(a, b)\nn_to_base_n(c, b)\nn_to_base_n(d, b)\n\nresult = gcd(a, b) * lcm(c, d)\nprint(result)"
  },
  {
    "example_id": 72,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a = 131\nb = 10\na_to_base_a = 55\nprint(n_to_base_n(a_to_base_a, b))"
  },
  {
    "example_id": 73,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "2.0",
      "3.0",
      "4.0",
      "3.0",
      "8.0",
      "3.0",
      "9.0",
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "for a in range(1, 1000):\n    for b in range(1, 1000):\n        if gcd(a, b) == 1:\n            if (a/b + 14*b/9*a) % 1 == 0:\n                print(f\"({a}, {b})\")"
  },
  {
    "example_id": 74,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.0",
      "7.0"
    ],
    "annotated_answers": [
      "128.0"
    ],
    "solution": "# The possible distinct sums\ndistinct_sums = [2, 4, 8, 6, 10, 14, 18]\n\n# The sum of all of the possible distinct sums\nsum_of_distinct_sums = sum(distinct_sums)\n\n# The number of possible distinct sums\nnumber_of_distinct_sums = len(distinct_sums)\n\n# The sum of all of the possible distinct sums\nprint(sum_of_distinct_sums)\n\n# The number of possible distinct sums\nprint(number_of_distinct_sums)"
  },
  {
    "example_id": 75,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef solution(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(gcd(fibonacci(n), fibonacci(n-1)), solution(n-1))\n\nprint(solution(35))"
  },
  {
    "example_id": 76,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "72.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return n % base\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef get_relatively_prime_integers(n):\n    relatively_prime_integers = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if gcd(i, j) == 1:\n                relatively_prime_integers.append(i*10**(n-2) + j)\n    return len(relatively_prime_integers)\n\nn = 6\nprint(get_relatively_prime_integers(n))"
  },
  {
    "example_id": 77,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# a+b \u2261 2 (mod 10)\n# 2a + b \u2261 1 (mod 10)\n# a \u2261 2b + 1 (mod 10)\n# a - b = 2b + 1 - b\n# a - b = 1\nprint(1)"
  },
  {
    "example_id": 78,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.274"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "frac = 137 / 500\nprint(frac)"
  },
  {
    "example_id": 79,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "49.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 3, n % 4, n % 5\n\ndef n_to_base_n(n, base):\n    return int(n)\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a\n\nn = 1\nwhile True:\n    r1, r2, r3 = get_remainder(n)\n    if r1 == 1 and r2 == 1 and r3 == 4:\n        break\n    n += 1\n\nprint(n)"
  },
  {
    "example_id": 80,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2349.0"
    ],
    "annotated_answers": [
      "687.0"
    ],
    "solution": "D = 9\nXY = 234\nXYD = XY * 10 + D\nprint(XYD)"
  },
  {
    "example_id": 81,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "73.0"
    ],
    "annotated_answers": [
      "231.0"
    ],
    "solution": "n = 11\nm = 508\na = 33\nb = 77\na_inv = pow(a, m-2, m)\nb_inv = pow(b, m-2, m)\ngcd_ab = gcd(a, b)\ngcd_n_m = gcd(n, m)\ngcd_a_b = gcd(a_inv, b_inv)\nn_inv = pow(a_inv, gcd_a_b, m)\nprint(n_inv)"
  },
  {
    "example_id": 82,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "numbers = [i for i in range(1, 10000) if i % 4 == 0]\ngcd = np.gcd.reduce(numbers)\nprint(gcd)"
  },
  {
    "example_id": 83,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "58.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "# The number of divisors of 2n is 28\n# The number of divisors of 3n is 30\n# The number of divisors of 6n is 28 + 30 = 58\nprint(58)"
  },
  {
    "example_id": 84,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4321.0",
      "20000000.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "n = 4321\nd = 5**7 * 2**8\nfraction = Fraction(n, d)\nprint(fraction.numerator)\nprint(fraction.denominator)"
  },
  {
    "example_id": 85,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "m = 21\nn = 10\ngcd_m_n = gcd(m, n)\nprint(gcd_m_n)"
  },
  {
    "example_id": 86,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1909.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# gcd(a, b) = gcd(b, a % b)\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# h(x) = gcd(f(x), g(x))\ndef h(x):\n    return gcd(12*x + 7, 5*x + 2)\n\n# sum of all possible values of h(x)\nsum = 0\nfor x in range(1, 1000):\n    sum += h(x)\nprint(sum)"
  },
  {
    "example_id": 87,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "40.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 40\nb = 40\nlargest_gcd = gcd(a,b)\nprint(largest_gcd)"
  },
  {
    "example_id": 88,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = 1\nfor i in range(1, 11):\n    if i % 5!= 0:\n        N *= i\n\nprint(N % 10)"
  },
  {
    "example_id": 89,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "250.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 100\n\ndef n_to_base_n(n, base):\n    return n // base\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# write your code here\nN = 100\nbase = 2\n\nones = n_to_base_n(N, base)\ntens = n_to_base_n(N // 10, base)\n\nprint(get_remainder(tens) * get_remainder(ones))"
  },
  {
    "example_id": 90,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef count_prime_factors(n, factors):\n    while n > 1:\n        for p in factors:\n            if n % p == 0:\n                n //= p\n                factors.append(p)\n                break\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\ndef count_divisors(n):\n    factors = []\n    count_prime_factors(n, factors)\n    return len(factors)\n\ndef solve(n):\n    count = 0\n    for m in range(1, n+1):\n        if gcd(m, 8) == 1:\n            count += 1\n    return count_divisors(3**count) % 8\n\nprint(solve(8))"
  },
  {
    "example_id": 91,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "219.0"
    ],
    "annotated_answers": [
      "58.0"
    ],
    "solution": "# Find the greatest possible value for the largest of the three integers\n# in the set, if the sum is less than 220\nlargest_num = 219\n\n# Set the smallest number in the set to 100\nsmallest_num = 100\n\n# Set the middle number in the set to 110\nmiddle_num = 110\n\n# Set the sum to the sum of the three numbers\nsum = smallest_num + middle_num + largest_num\n\n# If the sum is less than 220,\nif sum < 220:\n    # The greatest possible value for the largest of the three integers\n    # in the set is 219\n    largest_num = 219\n\nprint(largest_num)"
  },
  {
    "example_id": 92,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "54.22176684690383"
    ],
    "annotated_answers": [
      "105.0"
    ],
    "solution": "x = 735\na = 4\nax = x*a\nsqrt_ax = math.sqrt(ax)\nprint(sqrt_ax)"
  },
  {
    "example_id": 93,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "remainder = 91145 + 91146 + 91147 + 91148\nprint(remainder % 4)"
  },
  {
    "example_id": 94,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0003443526170798898"
    ],
    "annotated_answers": [
      "116.0"
    ],
    "solution": "n = 24\nm = 11**2\nb = (n * m)**-1 % m\nprint(b)"
  },
  {
    "example_id": 95,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "21.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\na = 3339\nb = 2961\nc = 1491\n\nprint(gcd(gcd(a, b), c))"
  },
  {
    "example_id": 96,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# 10! + 2 = 362331\n# 11! + 8 = 370143\n\n# gcd(362331, 370143) = 3\nprint(gcd(362331, 370143))"
  },
  {
    "example_id": 97,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "85.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "next_number = 85\nif next_number**3 == next_number and next_number**2 == next_number:\n    print(next_number)\nelse:\n    print('No number larger than', next_number, 'has both perfect cube and perfect square properties')"
  },
  {
    "example_id": 98,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 19\nm = 99\nans = (n**n) + (m**m)\nprint(ans%10)"
  },
  {
    "example_id": 99,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "70.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = [0, 1]\nb = [1, 2]\nfor i in range(2, 51):\n    a.append(a[i-1] + b[i-2])\n    b.append(a[i-2] + b[i-1])\nprint(a[50] + b[50])"
  },
  {
    "example_id": 100,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "A = 123\nB = 456\n\nA_7 = A % 10\nA_6 = (A // 10) % 10\nA_5 = (A // 100) % 10\nA_4 = (A // 1000) % 10\nA_3 = (A // 10000) % 10\nA_2 = (A // 100000) % 10\nA_1 = (A // 1000000) % 10\n\nB_7 = B % 10\nB_6 = (B // 10) % 10\nB_5 = (B // 100) % 10\nB_4 = (B // 1000) % 10\nB_3 = (B // 10000) % 10\nB_2 = (B // 100000) % 10\nB_1 = (B // 1000000) % 10\n\nC_7 = A_7 + B_7\nC_6 = A_6 + B_6 + (C_7 // 10)\nC_5 = A_5 + B_5 + (C_6 // 10)\nC_4 = A_4 + B_4 + (C_5 // 10)\nC_3 = A_3 + B_3 + (C_4 // 10)\nC_2 = A_2 + B_2 + (C_3 // 10)\nC_1 = A_1 + B_1 + (C_2 // 10)\n\nC = C_1 + (C_2 % 10) + (C_3 % 10) + (C_4 % 10) + (C_5 % 10) + (C_6 % 10) + (C_7 % 10)\n\nprint(C)"
  },
  {
    "example_id": 101,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "103.0"
    ],
    "solution": "n = 3\nwhile n % 7!= 0:\n    n += 3\nprint(n)"
  },
  {
    "example_id": 102,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2304.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# Define variables\na = 144\nb = 144\n\n# Find least common multiple\nlcm = a*b\n\n# Find greatest common divisor\ngcd = 9\n\n# Solve for sum\nsum = lcm/gcd\n\n# Print solution\nprint(sum)"
  },
  {
    "example_id": 103,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "3.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Test case 1:\nprint(get_remainder(12))\n# Output: 12%10 = 2\n# Test case 2:\nprint(get_remainder(123))\n# Output: 123%10 = 3\n# Test case 3:\nprint(get_remainder(1234))\n# Output: 1234%10 = 4\n# Test case 4:\nprint(get_remainder(12345))\n# Output: 12345%10 = 5\n# Test case 5:\nprint(get_remainder(123456))\n# Output: 123456%10 = 6\n\n\n# Test case 1:\nprint(n_to_base_n(12, 10))\n# Output: 12\n# Test case 2:\nprint(n_to_base_n(123, 10))\n# Output: 123\n# Test case 3:\nprint(n_to_base_n(1234, 10))\n# Output: 1234\n# Test case 4:\nprint(n_to_base_n(12345, 10))\n# Output: 12345\n# Test case 5:\nprint(n_to_base_n(123456, 10))\n# Output: 123456\n\n\n# Test case 1:\nprint(gcd(12, 10))\n# Output: 2\n# Test case 2:\nprint(gcd(123, 10))\n# Output: 3\n# Test case 3:\nprint(gcd(1234, 10))\n# Output: 4\n# Test case 4:\nprint(gcd(12345, 10))\n# Output: 5\n# Test case 5:\nprint(gcd(123456, 10))\n# Output: 6"
  },
  {
    "example_id": 104,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 10):\n    sum += i**2\nprint(sum % 10)"
  },
  {
    "example_id": 105,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# Define function to get remainder\ndef get_remainder(n):\n    return n % 10\n\n# Define function to convert n to base n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return 0\n    else:\n        return n % base + 10 * n_to_base_n(n // base, base)\n\n# Define function to get gcd of two numbers\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# Define function to get lcm of two numbers\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n# Define function to get the nth Fibonacci number\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Define variables for problem\nn = 16\n\n# Define variables for solution\nmax_slips = 0\n\n# Define loop to test all possible combinations of slips\nfor i in range(1, n+1):\n    for j in range(i+1, n+1):\n        product = i * j\n        if math.sqrt(product) % 1 == 0:\n            max_slips = max(max_slips, n_to_base_n(i, 10) + n_to_base_n(j, 10))\n\n# Print solution\nprint(max_slips)"
  },
  {
    "example_id": 106,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 2863\nb = 1344\nprint(gcd(a, b))"
  },
  {
    "example_id": 107,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "91.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 36 + 1):\n    if i % 36 == 0:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 108,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 20\nremainder = 432902008176640000\nfirst_digit = remainder // 10**(len(str(remainder))-1)\nprint(first_digit)"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 11\nn = 2003\nprint(get_remainder(n))"
  },
  {
    "example_id": 110,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "321.0",
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# given\nb = 10\na = 321\n\n# find\nbase = 321\n\n# convert\nbase_10 = n_to_base_n(a, base)\n\n# print\nprint(\"The base 10 value of {} is {}.\".format(base, base_10))"
  },
  {
    "example_id": 111,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 10\nk = 0\nfor i in range(1, 2**n):\n    if pow(2, n, 13) == 3:\n        k += 1\nremainder = k % 13\nprint(remainder)"
  },
  {
    "example_id": 112,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "468.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "def sum_of_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n//i!= i:\n                divisors.append(n//i)\n    return sum(divisors)\n\nn = 198\nprint(sum_of_divisors(n))"
  },
  {
    "example_id": 113,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2420.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(44*55)"
  },
  {
    "example_id": 114,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def is_prime(n):\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef reverse(n):\n    return int(str(n)[::-1])\n\ndef find_next_reversible_prime(n):\n    while True:\n        n += 1\n        if is_prime(n) and is_prime(reverse(n)):\n            return n\n\nprint(find_next_reversible_prime(17))"
  },
  {
    "example_id": 115,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 20\na = 2\nb = 1\nc = 1\n\n# compute the number of positive divisors\nnum_pos_divs = 0\nfor i in range(1, n+1):\n    if n % i == 0:\n        num_pos_divs += 1\n\n# compute the value of the expression\nexpr = (a*num_pos_divs + b) / c\n\nprint(expr)"
  },
  {
    "example_id": 116,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "remainder = 5 * 5 % 7\nprint(remainder)"
  },
  {
    "example_id": 117,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 22):\n    sum += i**3\nprint(sum % 10)"
  },
  {
    "example_id": 118,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# \nk = 0\nwhile k < 10000:\n    if (k**3 + 57*k) % 18 == 0:\n        print(k)\n        break\n    k += 1"
  },
  {
    "example_id": 119,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "8000.0"
    ],
    "solution": "N = 7000\nr = 0\nwhile True:\n    r += 1\n    if lcm(r, 700) == N:\n        break\nprint(r)"
  },
  {
    "example_id": 120,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8529.0"
    ],
    "annotated_answers": [
      "695.0"
    ],
    "solution": "number = 8529\nprint(number)"
  },
  {
    "example_id": 121,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "remainder = pow(5, 999999, 7)\nprint(remainder)"
  },
  {
    "example_id": 122,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3254.0"
    ],
    "annotated_answers": [
      "754.0"
    ],
    "solution": "n = 3254\nn_to_base_10 = n\nprint(n_to_base_10)"
  },
  {
    "example_id": 123,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Write your solution here\na = 3\nb = 13\nmod = 19\n\na_inv = pow(a, mod - 2, mod)\nb_inv = pow(b, mod - 2, mod)\n\nresult = (a_inv * b_inv) % mod\n\nprint(result)"
  },
  {
    "example_id": 124,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "n = 72\nbase = 16\nremainder = 1\nfactor = 1\nwhile remainder!= 0:\n    factor += 1\n    remainder = n % base\n    n = n // base\n\nprint(factor)"
  },
  {
    "example_id": 125,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 199, 2):\n    sum += i\nremainder = sum % 7\nprint(remainder)"
  },
  {
    "example_id": 126,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "102.0"
    ],
    "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nn = 1\nwhile 24*n + 51 <= 10**10:\n    n += 1\n\nprint(gcd(2*24*n + 24*51, 3*n + 51))"
  },
  {
    "example_id": 127,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "131.0"
    ],
    "annotated_answers": [
      "71.0"
    ],
    "solution": "n_pages = 12 * 10 + 11\nprint(n_pages)"
  },
  {
    "example_id": 128,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31.0",
      "16.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "red_jelly_beans = 8\ngreen_jelly_beans = 13\nwhite_jelly_beans = 10\ntotal_jelly_beans = red_jelly_beans + green_jelly_beans + white_jelly_beans\npounds_per_pound = Fraction(total_jelly_beans, 16)\nprint(pounds_per_pound)"
  },
  {
    "example_id": 129,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "31.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "congruent = 0\nfor i in range(-200, 201):\n    if i % 13 == 5:\n        congruent += 1\nprint(congruent)"
  },
  {
    "example_id": 130,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "# Solution\nn = 30\nx = 42\nm = 47\n\n# find the inverse of 30 modulo m\nx_inv = 30**(m-2) % m\n\n# solve for x\nx = (x * x_inv) % m\n\nprint(x)"
  },
  {
    "example_id": 131,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 1375\n\ndef n_to_base_n(n, base):\n    return int(n % base)\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ncount = 0\nfor n in range(1, 1001):\n    remainder = get_remainder(n)\n    if remainder == 0:\n        count += 1\n\nprint(count)"
  },
  {
    "example_id": 132,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "6647.0"
    ],
    "solution": "print(340 % 7)"
  },
  {
    "example_id": 133,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "116.0"
    ],
    "annotated_answers": [
      "611.0"
    ],
    "solution": "for i in range(100, 1000):\n    digits = list(str(i))\n    product = 1\n    for digit in digits:\n        product *= int(digit)\n    if product == 6:\n        print(i)\n        break"
  },
  {
    "example_id": 134,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 9.2 * 10**2\nb = 8 * 10**6\nproduct = a * b\nproduct_in_standard_form = n_to_base_n(product, 10)\nzeroes = product_in_standard_form.count('0')\nprint(zeroes)"
  },
  {
    "example_id": 135,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 5\n\ndef n_to_base_n(n, base):\n    return str(n)[-base:]\n\ndef gcd(a, b):\n    return abs(a * b)\n\ndef lcm(a, b):\n    return abs(a * b)\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n\n# Your code here\n\n# Print the remainder when 1999**2000 is divided by 5\nprint(get_remainder(1999**2000))"
  },
  {
    "example_id": 136,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_probability(n):\n    count = 0\n    for i in range(10000000):\n        number = str(random.randint(1, n))\n        if sum(int(j) for j in number) == 9:\n            if is_prime(int(number)):\n                count += 1\n    return count / 10000000\n\nprint(get_probability(10000000))"
  },
  {
    "example_id": 137,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12007.0"
    ],
    "solution": "print(441 % 7)"
  },
  {
    "example_id": 138,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0",
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# \na = 1\nb = 2\nn = 12\nx_1 = (a - b) % n\nx_2 = (b - a) % n\nprint(x_1)\nprint(x_2)"
  },
  {
    "example_id": 139,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "count = 0\nfor units in range(1, 10):\n    for tens in range(10, 100):\n        if tens % units == 0 and tens % 10 == 0 and units % 10 == 0:\n            count += 1\nprint(count)"
  },
  {
    "example_id": 140,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 3740 % 18\nprint(n)"
  },
  {
    "example_id": 141,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "0.0",
      "6.0",
      "7.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "41305.0"
    ],
    "solution": "n = 1234_5 + 2341_5\nprint(n_to_base_n(n, 5))"
  },
  {
    "example_id": 142,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "568.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "N = math.ceil(math.sqrt(8*math.factorial(8)))\nprint(N)"
  },
  {
    "example_id": 143,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "503.0"
    ],
    "annotated_answers": [
      "503.0"
    ],
    "solution": "whole_numbers = 0\nfor i in range(1, 18632):\n    if i % 37 == 23:\n        whole_numbers += 1\nprint(whole_numbers)"
  },
  {
    "example_id": 144,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 2\nremainder = (n + 2) * (n + 4) * (n + 6) % 7\nprint(remainder)"
  },
  {
    "example_id": 145,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.0",
      "10000.0",
      "40000.0",
      "40000.0"
    ],
    "annotated_answers": [
      "1681.0"
    ],
    "solution": "numbers = [100, 100, 200, 200]\nnumbers = np.array(numbers)\nsquare_numbers = np.square(numbers)\nsquare_numbers = square_numbers.astype(int)\nprint(square_numbers)"
  },
  {
    "example_id": 146,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.001308183165698",
      "16",
      "72353.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "def consecutive_prime_sum(n):\n    primes = [2]\n    for num in range(3, n+1, 2):\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return sum(primes)\n\ndef consecutive_prime_sum_squared(n):\n    return consecutive_prime_sum(n)**2\n\ndef largest_prime(n):\n    primes = [2]\n    for num in range(3, n+1, 2):\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes[-1]\n\nn = 72361\nsolution = consecutive_prime_sum_squared(n)\nprint(solution)\nprint(largest_prime(n))"
  },
  {
    "example_id": 147,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "486.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "sally = 239\nweihwa = 174\nzoe = 83\ntotal = sally + weihwa + zoe\n\n# subtract the total from 10 to get the number of marbles needed to start the game\nprint(total - 10)"
  },
  {
    "example_id": 148,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "5.0",
      "5.0",
      "2.0",
      "7.0",
      "14.0",
      "4.0",
      "8.0",
      "32.0",
      "5.0",
      "1.0",
      "5.0",
      "7.0",
      "2.0",
      "14.0",
      "8.0",
      "4.0",
      "32.0"
    ],
    "annotated_answers": [
      "35.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 9\n\ndef n_to_base_n(n, base):\n    return n % base\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n# Find the two numbers that can be multiplied together to make 2003\n# and leave a remainder of 5 when divided by 9\na = 0\nwhile a < 10:\n    b = 0\n    while b < 10:\n        if (a * b) % 9 == 5:\n            print(a, b)\n            print(a * b)\n            break\n        b += 1\n    a += 1"
  },
  {
    "example_id": 149,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nremainder = factorial(9) % 10\nprint(remainder)"
  },
  {
    "example_id": 150,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "408.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "a = 24\nb = 34\ngcd_ab = gcd(a, b)\nlcm_ab = lcm(a, b)\nprint(lcm_ab)"
  },
  {
    "example_id": 151,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "j = 1\nexpr = (7*j+3)\nresult = expr*3\nresult = result // 7\nprint(result)"
  },
  {
    "example_id": 152,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "110102.0"
    ],
    "solution": "n = 1111\nans = 0\nfor i in range(len(str(n))):\n    ans += int(str(n)[i]) * 2**(len(str(n))-i-1)\nprint(ans)"
  },
  {
    "example_id": 153,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 7\nb = 7**53\nprint(b%10)"
  },
  {
    "example_id": 154,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Calculate the units digit of the given expression\nexpr = (972 - 268) * (973 - 267) * (974 - 266) + (968 - 272) * (967 - 273) * (966 - 274) - (999 - 222) ** 3\nunits_digit = expr % 10\nprint(units_digit)"
  },
  {
    "example_id": 155,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "N = 105\nrows_A = int(math.sqrt(N))\nrows_B = rows_A + 2\nband_members_B = rows_B * (rows_B - 1) / 2\nprint(band_members_B)"
  },
  {
    "example_id": 156,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "214.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Define variables\nbase_4 = 4\nbase_9 = 9\n\n# Define all possible values of A, B, and C\nA = np.array([0, 1, 2, 3])\nB = np.array([0, 1, 2, 3])\nC = np.array([0, 1, 2, 3])\n\n# Initialize sum\nsum = 0\n\n# Iterate over all possible values of A, B, and C\nfor a in A:\n    for b in B:\n        for c in C:\n            # Calculate ABC_4 and ABC_9\n            abc_4 = a*base_4**2 + b*base_4**1 + c*base_4**0\n            abc_9 = a*base_9**2 + b*base_9**1 + c*base_9**0\n\n            # Add if equal\n            if abc_4 + 200 == abc_9:\n                sum += abc_4\n\n# Print sum\nprint(sum)"
  },
  {
    "example_id": 157,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8996.0"
    ],
    "annotated_answers": [
      "5636.0"
    ],
    "solution": "n = 4\n\n# Find the least and greatest positive multiples of 4\nleast_multiple = 4000\ngreatest_multiple = 4996\n\n# Find the sum\nsum = least_multiple + greatest_multiple\n\nprint(sum)"
  },
  {
    "example_id": 158,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "# Find the modular inverse of 35 modulo 47\ndef modular_inverse(a, m):\n    \"\"\"\n    Finds the modular inverse of a modulo m.\n    Returns None if a and m are not relatively prime.\n    \"\"\"\n    for x in range(1, m):\n        if (a * x) % m == 1:\n            return x\n    return None\n\n\n# Test the function\nprint(modular_inverse(35, 47))"
  },
  {
    "example_id": 159,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "n = 24\na = 2\nb = 2**n\nc = b**(1/n)\nprint(c)"
  },
  {
    "example_id": 160,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "# Compute (3^{-1}+5^{-1})^{-1} mod 31\n# We can compute this as (3^{-1})^{-1} + (5^{-1})^{-1} mod 31\n# 3^{-1} = 30\n# 5^{-1} = 5 * 4 = 20\n# (3^{-1})^{-1} = 20\n# (5^{-1})^{-1} = 30\n# (3^{-1}+5^{-1})^{-1} = 20 + 30 = 50\n# 50 mod 31 = 19\n# So the answer is 19\n\n# Compute (3^{-1}+5^{-1})^{-1} mod 31\nn = 30\nbase = 31\nans = n_to_base_n(n, base)\nprint(ans)"
  },
  {
    "example_id": 161,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1155.0"
    ],
    "solution": "# Set the base case\na = 1\nb = 1\nc = 1\nd = 1\n\n# Set the divisor\ndivisor = 1000\n\n# Loop until the divisor is less than the dividend\nwhile divisor < a*b*c*d:\n    # Calculate the quotient and remainder\n    quotient = a*b // c\n    remainder = a*b % c\n\n    # Calculate the new dividend and divisor\n    a = quotient\n    b = remainder\n    c = c // b\n    d = d // b\n\n# Print the smallest possible value of $\\overline{abcd}$\nprint(a*b*c*d)"
  },
  {
    "example_id": 162,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "900.0"
    ],
    "solution": "k = int(np.cbrt(240))\nprint(k)"
  },
  {
    "example_id": 163,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-2213.0"
    ],
    "solution": "numbers = [121, 2122, 1200, 2111]\nanswer = np.sum(numbers)\nanswer = answer % 3\nprint(answer)"
  },
  {
    "example_id": 164,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\nprint(sum)"
  },
  {
    "example_id": 165,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.3525"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "number = 141/400\nprint(number)"
  },
  {
    "example_id": 166,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "2016.0"
    ],
    "solution": "def is_nice(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if len(list(range(1, i + 1))) == 4:\n                return False\n            if len(list(range(1, n // i + 1))) == 4:\n                return False\n    return True\n\ndef solve_nice(n):\n    if n == 1:\n        return 0\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if len(list(range(1, i + 1))) == 4:\n                return 0\n            if len(list(range(1, n // i + 1))) == 4:\n                return 0\n    return 1\n\ndef nice_numbers(n_list):\n    sum_nice = 0\n    for n in n_list:\n        sum_nice += solve_nice(n)\n    return sum_nice\n\nn_list = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]\nprint(nice_numbers(n_list))"
  },
  {
    "example_id": 167,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2003.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 2003\nif math.gcd(n, n+1) == 1:\n    print(n)"
  },
  {
    "example_id": 168,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0",
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "for i in range(1,13):\n    if i not in range(1,7):\n        print(i)"
  },
  {
    "example_id": 169,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "5.0",
      "8.0",
      "10.0",
      "16.0",
      "20.0",
      "40.0",
      "80.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Find all possible values for m\nfor m in range(1, 100):\n    if (9**2) % m == 1:\n        print(m)"
  },
  {
    "example_id": 170,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-111.0"
    ],
    "annotated_answers": [
      "-36.0"
    ],
    "solution": "print(333_4 - 344_5)"
  },
  {
    "example_id": 171,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Initialize variables\nN = 3\nM = 10\n\n# Calculate greatest number of pencils that could be left over\nremainder = N*M - (N*M)%N\n\n# Print the result\nprint(remainder)"
  },
  {
    "example_id": 172,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = 10\ny = x - 10\nprint(y)"
  },
  {
    "example_id": 173,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "1.0",
      "64.0",
      "2.0",
      "64.0",
      "3.0",
      "64.0",
      "2.0",
      "64.0",
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "k = np.arange(1, 6, 1)\nnum_solutions = []\nfor i in k:\n    num_solutions.append(gcd(i, 6))\nprint(num_solutions)"
  },
  {
    "example_id": 174,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "809.0"
    ],
    "annotated_answers": [
      "5067.0"
    ],
    "solution": "print(3210 - 2401)"
  },
  {
    "example_id": 175,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "t = 0\nwhile True:\n    if (19*t + 5*t) % (t+1) == 0:\n        t += 1\n    else:\n        break\nprint(t)"
  },
  {
    "example_id": 176,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.647256211429027",
      "70",
      "4.418601514038178",
      "141"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = 2**23 * 3**19 * 5**17 * 7**13 * 11**11 * 13**7 * 17**5 * 19**3 * 23**2\nb = 2**23 * 3**19 * 5**17 * 7**13 * 11**11 * 13**7 * 17**5 * 19**3 * 23**2\nc = gcd(a, b)\nd = lcm(a, b)\nprint(c)\nprint(d)"
  },
  {
    "example_id": 177,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "57.0"
    ],
    "annotated_answers": [
      "57.0"
    ],
    "solution": "for i in range(398):\n    if (7*i) % 398 == 1:\n        print(i)"
  },
  {
    "example_id": 178,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-88.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "# Camera A takes a picture every 11 minutes\nA_minutes = 11\n\n# Camera B takes a picture every 7 minutes\nB_minutes = 7\n\n# Camera A takes a picture at 6 AM\nA_start_time = 6\n\n# Camera B takes a picture at 7 AM\nB_start_time = 7\n\n# Camera A and Camera B take a picture at the same time\n# at four different times before noon\nA_times = [A_start_time, A_start_time + 11, A_start_time + 22, A_start_time + 33]\nB_times = [B_start_time, B_start_time + 7, B_start_time + 14, B_start_time + 21]\n\n# Find the time difference between the last time that\n# Camera A and Camera B take a picture together\ntime_diff = max(A_times) - min(B_times)\n\n# Find the number of minutes before noon\nminutes_before_noon = time_diff - 120\n\nprint(minutes_before_noon)"
  },
  {
    "example_id": 179,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "26.0",
      "64.0",
      "81.0",
      "64.0",
      "136.0",
      "64.0",
      "191.0",
      "64.0",
      "246.0"
    ],
    "annotated_answers": [
      "1016.0"
    ],
    "solution": "n = 10**4\nr = np.arange(0, n, 1)\nr_sq = r**2\nr_sq_plus_4r_plus_4 = r_sq + 4*r + 4\nr_sq_plus_2r_plus_1 = r_sq + 2*r + 1\nr_sq_plus_4r_plus_4_mod_55 = r_sq_plus_4r_plus_4 % 55\nr_sq_plus_2r_plus_1_mod_55 = r_sq_plus_2r_plus_1 % 55\nsolution = [r[i] for i in range(len(r)) if r_sq_plus_4r_plus_4_mod_55[i] == r_sq_plus_2r_plus_1_mod_55[i]]\nprint(solution)"
  },
  {
    "example_id": 180,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "160.0"
    ],
    "solution": "def get_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n\nprint(get_divisors(9))"
  },
  {
    "example_id": 181,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "343400.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 100\nsum = 0\nfor i in range(1, n+1):\n    sum += i * (i+1)\nprint(sum)"
  },
  {
    "example_id": 182,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "-2.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "1076.0"
    ],
    "solution": "a = 62\nb = 75\nn = 1000\nn_remainder = n % 99\na_remainder = (a - b) % 99\nif n_remainder == a_remainder:\n    print(n)"
  },
  {
    "example_id": 183,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.6333333333333333"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 2\nb = 3\nm = 7\nL = (a+b)**-1 % m\nR = a**-1 + b**-1\nprint(L-R)"
  },
  {
    "example_id": 184,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "remainder = 729 % 15\nprint(remainder)"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "56.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = 2\nb = 3\nproduct = 288\n\n# Find the greater of the two integers\nif product % 2 == 0:\n    # Find the gcd of the two numbers\n    gcd_a_b = gcd(a, b)\n    # Find the lcm of the two numbers\n    lcm_a_b = lcm(a, b)\n    # Divide the product by the gcd\n    quotient = product // gcd_a_b\n    # Divide the quotient by the lcm\n    result = quotient // lcm_a_b\n    print(result)\nelse:\n    # Find the gcd of the two numbers\n    gcd_a_b = gcd(a, b)\n    # Find the lcm of the two numbers\n    lcm_a_b = lcm(a, b)\n    # Divide the product by the gcd\n    quotient = product // gcd_a_b\n    # Divide the quotient by the lcm\n    result = quotient // lcm_a_b\n    print(result)"
  },
  {
    "example_id": 186,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "23.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "import math\n\ndef gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef gcf_plus(a, b, n):\n    return gcf(a, b) + n\n\nprint(gcf_plus(6432, 132, 11))"
  },
  {
    "example_id": 187,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "226.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 100):\n    if i % 2 == 0:\n        continue\n    if i % 144 == 0:\n        sum += i\nprint(sum)"
  },
  {
    "example_id": 188,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0090909090909093"
    ],
    "annotated_answers": [
      "0.8"
    ],
    "solution": "n = 4\nnum = 0.5\ndecimal = 0.6\nfor i in range(n-2):\n    num += decimal\n    decimal = 1/num\nprint(num)"
  },
  {
    "example_id": 189,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0715086071862673",
      "301"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 1000\nS_n = 2**n\nS_n_1 = 2**(n+1)\ngcd_val = gcd(S_n, S_n_1)\nprint(gcd_val)"
  },
  {
    "example_id": 190,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def is_divisible_by_7(num):\n    return num % 7 == 0\n\nfor d in range(10):\n    if is_divisible_by_7(2*10**2 + d*100 + 2):\n        print(d)\n        break"
  },
  {
    "example_id": 191,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "262.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "M = 130\nN = 132\nM_plus_N = M + N\nprint(M_plus_N)"
  },
  {
    "example_id": 192,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0810810810810807"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# set precision\nnp.set_printoptions(precision=291)\n\n# set number\nnum = 1/37\n\n# find remainder\nremainder = get_remainder(num)\n\n# print remainder\nprint(remainder)"
  },
  {
    "example_id": 193,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 54\nprint(n % 6)"
  },
  {
    "example_id": 194,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "123.0",
      "123.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# Base 3\nx = 123\nprint(x)\n\n# Base 4\nx = 123\nprint(x)"
  },
  {
    "example_id": 195,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "# \na = 1\nb = 1\nfor i in range(1, 2010):\n    if i % 2!= 0 and i % 3!= 0:\n        a += 1\n        b += 1\n        if a % b == 0:\n            a = a // b\n            b = b // gcd(a, b)\n            break\nprint(a+b)"
  },
  {
    "example_id": 196,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 59138\nd = 12\nn_prime = n % d\nprint(n_prime)\nn_prime_digits = [int(digit) for digit in str(n_prime)]\nprint(n_prime_digits)\nsum_digits = sum(n_prime_digits)\nprint(sum_digits)"
  },
  {
    "example_id": 197,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "# Initial Rectangle\nl = 10\nw = 5\n\n# New Rectangle\nl_new = l + 0.3*l\nw_new = w - 0.2*w\n\n# Smallest Area\nsmallest_area = l_new*w_new\nprint(smallest_area)"
  },
  {
    "example_id": 198,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2220.0"
    ],
    "solution": "multiple = 30 * 2 * 2 * 0\nprint(multiple)"
  },
  {
    "example_id": 199,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "119.0"
    ],
    "annotated_answers": [
      "119.0"
    ],
    "solution": "# Solution\ndef get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return int(n % base)\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nn = 7\n\ndef multiples_of_7(n):\n    multiples = []\n    for i in range(1, n+1):\n        if i % 7 == 0:\n            multiples.append(i)\n    return multiples\n\ndef digit_sum(n):\n    return sum(map(int, str(n)))\n\ndef two_digit_multiples_of_7():\n    multiples = multiples_of_7(100)\n    filtered_multiples = [m for m in multiples if digit_sum(m) == 10]\n    return filtered_multiples\n\ndef sum_two_digit_multiples_of_7():\n    filtered_multiples = two_digit_multiples_of_7()\n    return sum(filtered_multiples)\n\nprint(sum_two_digit_multiples_of_7())"
  },
  {
    "example_id": 200,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "frac = 54317/80000\nprint(len(str(frac).split('.')[1]))"
  },
  {
    "example_id": 201,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Initialize variables\nn = 100\nbase = 10\n\n# Convert n to base base\nn_in_base_base = n_to_base_n(n, base)\n\n# Get the remainder of n_in_base_base divided by 2\nremainder = get_remainder(n_in_base_base)\n\n# Print the result\nprint(n)"
  },
  {
    "example_id": 202,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 11\nprint(n)"
  },
  {
    "example_id": 203,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "units = (17**13 - 17) % 10\nprint(units)"
  },
  {
    "example_id": 204,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# \n\n# Find the 39th digit in the decimal representation of 1/19\ndef find_digit(num):\n    num_str = str(num)\n    num_len = len(num_str)\n    digit_idx = num_len - 1\n    while digit_idx > 38:\n        num_str = num_str[:digit_idx]\n        num = int(num_str)\n        digit_idx -= 1\n    return num_str[digit_idx]\n\n# Find the 39th digit in the decimal representation of 1/19\ndigit = find_digit(1/19)\nprint(digit)"
  },
  {
    "example_id": 205,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "n = 123456\nmod = 101\n\ndef get_remainder(n, mod):\n    return n % mod\n\ndef n_to_base_n(n, base):\n    return n % base\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(get_remainder(n, mod))"
  },
  {
    "example_id": 206,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "units = 1\nfor i in range(2, 100):\n    if i % 10 == 0:\n        units = units * i\nprint(units % 10)"
  },
  {
    "example_id": 207,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(17*18 % 4)"
  },
  {
    "example_id": 208,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6347.0"
    ],
    "annotated_answers": [
      "319.0"
    ],
    "solution": "n = 634_7\nbase = 10\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    digits = []\n    while n > 0:\n        digits.append(n % base)\n        n //= base\n    return digits[::-1]\n\ndef get_remainder(n):\n    return n % 10\n\ndef convert_to_base_10(num):\n    if num == 0:\n        return 0\n    remainder = get_remainder(num)\n    new_num = num // 10\n    return remainder + 10 * convert_to_base_10(new_num)\n\nprint(convert_to_base_10(n))"
  },
  {
    "example_id": 209,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "630.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "n = 0\nsum = 0\nwhile n**2 < 1200:\n    n += 1\n    sum += n\nprint(sum)\n\n\n\nn = 1\nsum = 1\nwhile n**2 < 1200:\n    n += 1\n    sum += n\nprint(sum)\n\n\n\n\nn = 2\nsum = 2\nwhile n**2 < 1200:\n    n += 1\n    sum += n\nprint(sum)\n\n\n\n\nn = 3\nsum = 3\nwhile n**2 < 1200:\n    n += 1\n    sum += n\nprint(sum)\n\n\n\n\nn = 4\nsum = 4\nwhile n**2 < 1200:\n    n += 1\n    sum += n\nprint(sum)\n\n\n\n\nn = 5\nsum = 5\nwhile n**2 < 1200:\n    n += 1\n    sum += n\nprint(sum)\n\n\n\n\nn = 6\nsum = 6\nwhile n**2 < 1200:\n    n += 1\n    sum += n\nprint(sum)\n\n\n\n\nn = 7\nsum = 7\nwhile n**2 < 1200:\n    n += 1\n    sum += n\nprint(sum)\n\n\n\n\nn = 8\nsum = 8\nwhile n**2 < 1200:\n    n += 1\n    sum += n\nprint(sum)\n\n\n\n\nn = 9\nsum = 9\nwhile n**2 < 1200:\n    n += 1\n    sum += n\nprint(sum)\n\n\n\n\nn = 10\nsum = 10\nwhile n**2 < 1200:\n    n += 1\n    sum += n\nprint(sum)\n\n\n\n\nn = 11\nsum = 11\nwhile"
  },
  {
    "example_id": 210,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(count_divisors(196))"
  },
  {
    "example_id": 211,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "a = 16\nb = 21\nn = 0\nwhile n <= 36:\n    if (a-b) % 37 == n:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 212,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "1.0",
      "2.0",
      "4.0",
      "5.0",
      "10.0",
      "25.0",
      "50.0",
      "100.0",
      "250.0",
      "500.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# A = sum of positive divisors of 500\nA = 500\npositive_divisors = [1, 2, 4, 5, 10, 25, 50, 100, 250, 500]\nfor divisor in positive_divisors:\n    A = A + divisor\n\n# distinct prime divisors of A\ndistinct_prime_divisors = [2, 5]\nfor divisor in positive_divisors:\n    if gcd(divisor, A) == 1:\n        distinct_prime_divisors.append(divisor)\nprint(distinct_prime_divisors)"
  },
  {
    "example_id": 213,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "124.0"
    ],
    "annotated_answers": [
      "123.0"
    ],
    "solution": "n = 30**4\ndistinct_positive_divisors = [1, n]\nfor i in range(2, int(math.sqrt(n))):\n    if n % i == 0:\n        distinct_positive_divisors.append(i)\n        distinct_positive_divisors.append(int(n / i))\ndistinct_positive_divisors = set(distinct_positive_divisors)\nprint(len(distinct_positive_divisors))"
  },
  {
    "example_id": 214,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Define the function to find the greatest number of distinct positive integer factors for a given positive integer less than 20.\ndef get_max_factors(n):\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return len(factors)\n\n# Print the output of the function.\nprint(get_max_factors(19))"
  },
  {
    "example_id": 215,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Find the modulus of 64 and 66\nmodulus = 66\n\n# Find the multiplicative inverse of 2 modulo 66\ninverse = 2\nfor i in range(1, modulus):\n    if (inverse * i) % modulus == 1:\n        break\n\n# Find the number of solutions to the congruence\nnum_solutions = 0\nfor x in range(1, 101):\n    if (x * inverse) % modulus == 2:\n        num_solutions += 1\nprint(num_solutions)"
  },
  {
    "example_id": 216,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "A = 0\nB = 0\nfor i in range(16):\n    if np.gcd(i, 2**4) == 1:\n        A += i\n    else:\n        B += i\nprint(A-B)"
  },
  {
    "example_id": 217,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "220690.0"
    ],
    "annotated_answers": [
      "2145.0"
    ],
    "solution": "pirate_debt = (2345*6 + 41324*5)\nprint(pirate_debt)"
  },
  {
    "example_id": 218,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "# Define base\nbase = 3\n# Define the three lower limbs\nlower_limbs = [2, 2]\n# Define the cane\ncane = 1\n# Define the father's age\nfather_age = 1222\n# Convert father's age to base three\nfather_age_base_three = n_to_base_n(father_age, base)\n# Convert father's age to base ten\nfather_age_base_ten = sum([lower_limbs[i] * pow(base, i) for i in range(len(lower_limbs))])\nfather_age_base_ten += cane * pow(base, len(lower_limbs))\nprint(father_age_base_ten)"
  },
  {
    "example_id": 219,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 6\n\ndef n_to_base_n(n, base):\n    return n % base\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\nn = 1452\ndivisors = get_divisors(n)\nprint(len(divisors))"
  },
  {
    "example_id": 220,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "product = 4**5 * 5**13\nprint(len(str(product)))"
  },
  {
    "example_id": 221,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "expression = 2005**2 + 2005**0 + 2005**0 + 2005**5\nfinal_two_digits = expression % 100\nprint(final_two_digits)"
  },
  {
    "example_id": 222,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0"
    ],
    "annotated_answers": [
      "248.0"
    ],
    "solution": "a = 120\nb = 3720\ngcd_ab = gcd(a, b)\nlcm_ab = lcm(a, b)\ndenom = lcm_ab // gcd_ab\na_prime = a // denom\nb_prime = b // denom\nprint(a_prime, b_prime)"
  },
  {
    "example_id": 223,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2305.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "def n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    digits = []\n    while n > 0:\n        digits.append(int(n % base))\n        n //= base\n    return digits[::-1]\n\ndef get_remainder(n):\n    if n == 0:\n        return 0\n    return n % 10\n\ndef convert_to_base_62(n):\n    digits = n_to_base_n(n, 64)\n    return sum([digit * 64 ** i for i, digit in enumerate(digits)])\n\ndef convert_to_base_62_2(n):\n    base_62_digits = []\n    while n > 0:\n        base_62_digits.append(int(n % 62))\n        n //= 62\n    return base_62_digits[::-1]\n\nn = 100\nbase_62 = convert_to_base_62(n)\nprint(base_62)"
  },
  {
    "example_id": 224,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "# Solve the congruence 2n \u2261 15 (mod 47), as a residue modulo 47.\n# (Give an answer between 0 and 46.)\n\n# Solve for n\nn = 15\nn_residue = n % 47\nprint(n_residue)"
  },
  {
    "example_id": 225,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "6152.0"
    ],
    "solution": "n = 1418\nbase_10 = n_to_base_n(n, 10)\nsum_n = 0\nfor num in range(len(base_10)):\n    num_in_base_10 = int(base_10[num])\n    sum_n += num_in_base_10 ** (len(base_10) - num - 1)\nprint(sum_n)"
  },
  {
    "example_id": 226,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 2\nb = 5\nremainder = (a**2 + b**2) % 3\nprint(remainder)"
  },
  {
    "example_id": 227,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110376033.0"
    ],
    "annotated_answers": [
      "21022.0"
    ],
    "solution": "a = 10508\na_plus_1 = a + 1\na_minus_5 = a - 5\nlcm_a_plus_1_a_minus_5 = 10508\n\na_squared_minus_4_a_plus_1 = (a**2 - 4*a + 1)\nprint(a_squared_minus_4_a_plus_1)"
  },
  {
    "example_id": 228,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "190.0"
    ],
    "solution": "# Define a function to get the remainder of a division\ndef get_remainder(n):\n    return n % 9\n\n# Define a function to convert a number to a base n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    digits = []\n    while n > 0:\n        digits.append(n % base)\n        n //= base\n    return digits\n\n# Define a function to find the greatest common divisor\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# Define a function to find the least common multiple\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n# Define a function to find the nth Fibonacci number\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n# Define the variables\nN = 12345679\n\n# Define the prime numbers\nprime_numbers = [2, 3, 5, 7]\n\n# Define the list of numbers\nnumbers = []\n\n# Find the numbers\nfor prime in prime_numbers:\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for l in range(10):\n                    if i!= j and j!= k and k!= l and l!= i:\n                        numbers.append(i*10000 + j*1000 + k*100 + l)\n\n# Find the sum of the prime numbers\nsum_of_primes = 0\nfor number in numbers:\n    if number % N == 0 and number!= N:\n        sum_of_primes += number\n\n# Print the sum of the prime numbers\nprint(sum_of_primes)"
  },
  {
    "example_id": 229,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "b = 10\nP = 9\n\nP_b = P*b\n\nif P_b % P == 0:\n    print(b)\nelse:\n    print(\"No solution\")"
  },
  {
    "example_id": 230,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "14.8"
    ],
    "solution": "ages = [13, 14, 15, 16, 17, 18, 19]\nmean = np.mean(ages)\nprint(mean)"
  },
  {
    "example_id": 231,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for i in range(1, 20):\n    sum = i + i + 1 + 1\n    if sum % i == 0:\n        print(i)\n        break"
  },
  {
    "example_id": 232,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "251250.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 8\n\ndef n_to_base_n(n, base):\n    return int(n % base)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef get_primes_8x_congruent_to_1(n):\n    primes = []\n    for i in range(2, n):\n        if get_remainder(i) == 1:\n            primes.append(i)\n    return primes\n\ndef get_sum_of_primes(primes):\n    sum_of_primes = 0\n    for prime in primes:\n        sum_of_primes += prime\n    return sum_of_primes\n\ndef main():\n    n = 2003\n    primes = get_primes_8x_congruent_to_1(n)\n    sum_of_primes = get_sum_of_primes(primes)\n    print(sum_of_primes)\n\nmain()"
  },
  {
    "example_id": 233,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "972.0"
    ],
    "annotated_answers": [
      "63.0"
    ],
    "solution": "n = 62_7 + 34_5\nprint(n)"
  },
  {
    "example_id": 234,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Find the greatest common divisor of two numbers\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n# Find the greatest common divisor of n + 7 and 2n + 1\ndef gcd_of_sum(n):\n    return gcd(n + 7, 2 * n + 1)\n\n# Test the greatest common divisor of n + 7 and 2n + 1\ndef test_gcd(n):\n    gcd_of_sum(n) == n\n\n# Print the greatest common divisor of n + 7 and 2n + 1\nprint(gcd_of_sum(10))"
  },
  {
    "example_id": 235,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 617\nb = 943\nn = 2\nwhile a*n % 18!= b*n % 18:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 236,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "a = 6**210**2\nb = 15**4\ngcd_a_b = gcd(a, b)\nprint(gcd_a_b)"
  },
  {
    "example_id": 237,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12012.0"
    ],
    "annotated_answers": [
      "100100.0"
    ],
    "solution": "b = 2\nnum = 11011\nresult = 1001\n\n# \nresult = (num * (b - 1)) + result\nprint(result)"
  },
  {
    "example_id": 238,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "print(int(str(7**7)[-1]))"
  },
  {
    "example_id": 239,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1394.0",
      "-1.0",
      "-1.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import datetime\n\nmars_year = 697\ndays_in_mars_year = mars_year * 12\n\n# Find the number of days till the next year begins\nremainder = days_in_mars_year % mars_year\n\n# Find the next year which will begin on the first day of the week\nnext_year = mars_year + (mars_year - remainder)\n\n# Convert the year to datetime object\nmars_year_datetime = datetime.datetime(next_year, 1, 1)\nprint(mars_year_datetime)"
  },
  {
    "example_id": 240,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "for t in range(1, 23):\n    if (t+2) % t == 0:\n        print(t)\n        break"
  },
  {
    "example_id": 241,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4435.0"
    ],
    "solution": "print(123 % 5)"
  },
  {
    "example_id": 242,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "137.0",
      "137.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "# Calculate the average\naverage = (100 * 4 + 10 + 1) / 3\nprint(average)\n\n# Write in base 10\nprint(int(average))"
  },
  {
    "example_id": 243,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(71 % 3)"
  },
  {
    "example_id": 244,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "133053.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 12345\nn_base_6 = n_to_base_n(n, 6)\nprint(n_base_6)"
  },
  {
    "example_id": 245,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "print(len(bin(87)[2:]) - len(oct(87)[2:]))"
  },
  {
    "example_id": 246,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "0.0",
      "2.0",
      "0.0"
    ],
    "annotated_answers": [
      "3255.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    digits = []\n    while n > 0:\n        digits.append(n % base)\n        n //= base\n    return digits[::-1]\n\nn = 101010\nbase = 5\n\nprint(n_to_base_n(n, base))"
  },
  {
    "example_id": 247,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "120.0"
    ],
    "solution": "# Jan's number is 120\nnum_divisors = 16\nnum_divisors_by_12 = 2\nnum_divisors_by_15 = 2\n\n# 12 and 15 are not prime numbers\n# therefore, they have at least two divisors\n# 12 has 2, 3, and 4 as divisors\n# 15 has 3 and 5 as divisors\n\n# number of divisors of 12 is 3\n# number of divisors of 15 is 2\n\n# therefore, total number of divisors is\n# 2 + 2 + 3 + 2 = 16\n\n# number of divisors by 12 is 2\n# number of divisors by 15 is 2\n\n# therefore, total number of divisors by 12 and 15 is\n# 2 + 2 = 4\n\n# number of divisors by 12 and 15 is 4\n# number of divisors is 16\n\n# 120 is a number with 16 divisors\n# and 4 of them are by 12 and 15\n\n# therefore, Jan's number is 120\n\nprint(120)"
  },
  {
    "example_id": 248,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for a in range(1, 24):\n    if a**-1 == a % 24:\n        print(a)"
  },
  {
    "example_id": 249,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "print(len(str(1/2**10)))"
  },
  {
    "example_id": 250,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "5.0",
      "1.0",
      "15.0",
      "1.0",
      "25.0",
      "1.0",
      "35.0",
      "1.0",
      "45.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "for A in range(1, 100):\n    for B in range(1, 100):\n        if A*A*A % 10 + B*B*B % 10 == 6:\n            print(A, B)"
  },
  {
    "example_id": 251,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 4\ny = 7\nproduct = (x + 1)**2 * (y + 5)**3\nremainder = product % 19\nprint(remainder)"
  },
  {
    "example_id": 252,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "29.0"
    ],
    "solution": "if (2008 % 4) == 0:\n    print(29)\nelse:\n    print(28)"
  },
  {
    "example_id": 253,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# define variables\nn1 = 15\nn2 = 85\nn3 = 20\n\n# find how many integers between 15 and 85 are divisible by 20\ncount = 0\nfor i in range(n1, n2+1):\n    if i % n3 == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 254,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "255.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "print(2**8 - 1)"
  },
  {
    "example_id": 255,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return int(n % base)\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    if n <= 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Part 1\nfactors = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlcm_list = []\nfor factor in factors:\n    lcm_list.append(lcm(factor, fibonacci(factor)))\n\n# Part 2\na = lcm_list[0]\nb = lcm_list[1]\n\n# Part 3\na_plus_b = a + b\nprint(a_plus_b)"
  },
  {
    "example_id": 256,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "47.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "n = 80325\nnum_divisors = 0\ni = 2\nwhile i <= n:\n    if n % i == 0:\n        num_divisors += 1\n    i += 1\nprint(num_divisors)"
  },
  {
    "example_id": 257,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.7023131384893573",
      "278"
    ],
    "annotated_answers": [
      "1030.0"
    ],
    "solution": "def get_remainder(n):\n    if n == 0:\n        return 1\n    else:\n        return n % 10\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    else:\n        digits = []\n        while n > 0:\n            digits.append(n % base)\n            n //= base\n        return digits\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\na = 0\nb = 1\n\nfor _ in range(1330):\n    a, b = b, a + b\n\na, b = b, a + b\n\nprint(a + b)"
  },
  {
    "example_id": 258,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "N = [2, 3, 5, 7, 9]\ndivisible_by_3 = 0\nfor i in range(len(N)):\n    for j in range(i+1, len(N)):\n        if N[i] % 3 == 0 and N[j] % 3 == 0:\n            divisible_by_3 += 1\nprint(divisible_by_3)"
  },
  {
    "example_id": 259,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Solution\ndef get_remainder(n):\n    if n % 3 == 0 and n % 4 == 0 and n % 5 == 0:\n        return True\n    else:\n        return False\n\n\ndef n_to_base_n(n, base):\n    return int(n)\n\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\nn = 100\nnum_divisible_by_3_4_5 = 0\nfor i in range(1, n+1):\n    if get_remainder(i):\n        num_divisible_by_3_4_5 += 1\nprint(num_divisible_by_3_4_5)"
  },
  {
    "example_id": 260,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "i = 3\nj = 2\nij = i * j\nprint(get_remainder(ij, 6))"
  },
  {
    "example_id": 261,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 5**2005\nprint(n%10)"
  },
  {
    "example_id": 262,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return int(n % base)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nA = 9\nB = 1\nN = A * B\nN_cubed = N ** 3\nN_cubed_remainder = get_remainder(N_cubed)\nprint(N_cubed_remainder)"
  },
  {
    "example_id": 263,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4096.0"
    ],
    "solution": "n = 1\nwhile True:\n    if n**3 == n**4:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 264,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "remainder = 10 % 9\nprint(remainder)"
  },
  {
    "example_id": 265,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "7.0",
      "1.0",
      "2.0",
      "12.0",
      "1.0",
      "2.0",
      "17.0",
      "1.0"
    ],
    "annotated_answers": [
      "235.0"
    ],
    "solution": "for i in range(1, 100):\n    for j in range(i+1, 100):\n        for k in range(j+1, 100):\n            if (i+j+k) % 5 == 0:\n                print(i, j, k)"
  },
  {
    "example_id": 266,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "print(194 % 11)"
  },
  {
    "example_id": 267,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "numbers = [2, 4, 6, 8, 10, 12]\ncount = 0\nfor number in numbers:\n    if number**0.5 in numbers:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 268,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0",
      "144.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = 144\ny = 144\nprint(x, y)"
  },
  {
    "example_id": 269,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "7.0",
      "10.0",
      "13.0",
      "16.0",
      "19.0",
      "22.0",
      "25.0",
      "28.0",
      "31.0"
    ],
    "annotated_answers": [
      "129.0"
    ],
    "solution": "for i in range(1, 100):\n    if i % 3 == 0:\n        for j in range(1, 100):\n            if i * j % 3 == 0:\n                print(i + j)\n                break"
  },
  {
    "example_id": 270,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return n // base\n\ndef get_divisors(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n\ndef get_divisor_pairs(n):\n    divisors = get_divisors(n)\n    return [(divisors[i], divisors[j]) for i in range(len(divisors)) for j in range(i+1, len(divisors))]\n\ndef get_divisor_pair_products(n):\n    divisor_pairs = get_divisor_pairs(n)\n    return [product for pair in divisor_pairs for product in [pair[0]*pair[1]]]\n\ndef get_divisor_pair_products_sum(n):\n    return sum(get_divisor_pair_products(n))\n\ndef is_divisible_by_11(n):\n    return get_divisor_pair_products_sum(n) % 11 == 0\n\ndef get_tens_hundreds_digits(n):\n    return [n // 10, n // 100]\n\ndef get_tens_hundreds_digits_divisible_by_11(n):\n    tens_hundreds_digits = get_tens_hundreds_digits(n)\n    return [tens_hundreds_digits[i] for i in range(len(tens_hundreds_digits)) if is_divisible_by_11(tens_hundreds_digits[i])]\n\ndef count_tens_hundreds_digits_divisible_by_11(n):\n    return len(get_tens_hundreds_digits_divisible_by_11(n))\n\nn = 1400\nprint(count_tens_hundreds_digits_divisible_by_11(n))"
  },
  {
    "example_id": 271,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "54.0",
      "5.0",
      "21.0",
      "6.0",
      "18.0",
      "7.0",
      "15.0",
      "10.0",
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "for m in range(1, 108 // 2 + 1):\n    n = 108 // m\n    if (m % 2 == 0 and n % 2 == 0) or (m % 2 == 1 and n % 2 == 1):\n        print((m, n))"
  },
  {
    "example_id": 272,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "N = 13*7 + 17*3\nremainder = N % 36\nprint(remainder)"
  },
  {
    "example_id": 273,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# solution\nn = int(math.sqrt(196))\nfactors = []\nfor i in range(1, int(n)+1):\n    if n % i == 0:\n        factors.append(i)\nsum_factors = sum(factors)\nprint(sum_factors)"
  },
  {
    "example_id": 274,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def pow_24(num):\n    return 24**num\ndef pow_15(num):\n    return 15**num\n\ndef pow_24_50():\n    return pow_24(50)\ndef pow_15_50():\n    return pow_15(50)\n\ndef sub():\n    return pow_24_50() - pow_15_50()\n\ndef mod(num):\n    return sub() % num\n\nprint(mod(13))"
  },
  {
    "example_id": 275,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "k = 0\nwhile True:\n    for n in range(1, 1000000):\n        if gcd(6*n+k, 6*n+3)!= 1:\n            break\n        if gcd(6*n+k, 6*n+2)!= 1:\n            break\n        if gcd(6*n+k, 6*n+1)!= 1:\n            break\n    else:\n        print(k)\n        break\n    k += 1"
  },
  {
    "example_id": 276,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(1529 % 6)"
  },
  {
    "example_id": 277,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "144.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "def factors(x):\n    factors = []\n    for i in range(1, x):\n        if x % i == 0:\n            factors.append(i)\n    return np.prod(factors)\n\nprint(factors(12))"
  },
  {
    "example_id": 278,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "7.0",
      "13.0",
      "91.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "n = 1\nwhile n < 10000:\n    if (171 - 80) % n == 0 and (468 - 13) % n == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 279,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "103032.0"
    ],
    "annotated_answers": [
      "108.0"
    ],
    "solution": "base = 4\nn = 1230\nresult = n_to_base_n(n, base)\nprint(result)"
  },
  {
    "example_id": 280,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "11.0",
      "22.0",
      "33.0",
      "44.0",
      "55.0",
      "66.0",
      "77.0",
      "88.0",
      "99.0"
    ],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "for i in range(1000):\n    if i % 11 == 0:\n        print(i)"
  },
  {
    "example_id": 281,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "553942754166571.0",
      "4503599627370496.0",
      "553942754166571.0",
      "4503599627370496.0",
      "1.0",
      "553942754166571.0",
      "4503599627370496.0",
      "2.4947363812491554",
      "30",
      "553942754166571.0",
      "4503599627370496.0",
      "5057542381537067.0"
    ],
    "annotated_answers": [
      "556.0"
    ],
    "solution": "# Define the decimal to be converted\ndecimal = 0.123\n\n# Convert the decimal to a fraction\na, b = decimal.as_integer_ratio()\n\n# Print the fraction\nprint(f'{a}/{b}')\n\n# Find the greatest common divisor of a and b\ngcd_ab = gcd(a, b)\n\n# Print the greatest common divisor\nprint(f'gcd({a}, {b}) = {gcd_ab}')\n\n# Find the least common multiple of a and b\nlcm_ab = lcm(a, b)\n\n# Print the least common multiple\nprint(f'lcm({a}, {b}) = {lcm_ab}')\n\n# Find the sum of a and b\nsum_ab = a + b\n\n# Print the sum\nprint(f'{a} + {b} = {sum_ab}')"
  },
  {
    "example_id": 282,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return n // base\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_page_numbers(page_range):\n    page_numbers = []\n    for i in range(1, page_range+1):\n        if get_remainder(i) == 4:\n            page_numbers.append(i)\n    return page_numbers\n\ndef get_page_number_digits(page_number):\n    digits = []\n    while page_number > 0:\n        digits.append(get_remainder(page_number))\n        page_number = n_to_base_n(page_number, 10)\n    return digits\n\ndef add_digits(digits):\n    return sum(digits)\n\ndef has_exactly_4_digits(page_number, page_numbers):\n    digits = get_page_number_digits(page_number)\n    return add_digits(digits) == 4\n\ndef get_number_of_pages_with_exactly_4_digits(page_range):\n    page_numbers = get_page_numbers(page_range)\n    return len([page_number for page_number in page_numbers if has_exactly_4_digits(page_number, page_numbers)])\n\ndef main():\n    page_range = 1000\n    print(get_number_of_pages_with_exactly_4_digits(page_range))\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 283,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12446.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# \n\n\ndef get_remainder(n):\n    return n % 10\n\n\ndef n_to_base_n(n, base):\n    return n // base\n\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n# \n\n\ndef get_x_value(n):\n    n_to_base_10 = n_to_base_n(n, 10)\n    odd_digits = n_to_base_10[0:10:2]\n    even_digits = n_to_base_10[1:10:2]\n    odd_sum = sum(odd_digits)\n    odd_sum = odd_sum * 3\n    even_sum = sum(even_digits)\n    n = odd_sum + even_sum\n    remainder = get_remainder(n)\n    return remainder\n\n\ndef is_valid_upc(n):\n    if get_remainder(n) == 0:\n        return True\n    else:\n        return False\n\n\nx = 11006\nn = int(fibonacci(12))\nn = n * 10 + x\nprint(n)\nprint(is_valid_upc(n))"
  },
  {
    "example_id": 284,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 2**2010\nprint(n % 10)"
  },
  {
    "example_id": 285,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "15.0",
      "22.0",
      "29.0",
      "29.0",
      "43.0",
      "43.0",
      "43.0",
      "57.0",
      "57.0",
      "64.0",
      "71.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 7\n\ndef n_to_base_n(n, base):\n    return n % base\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 0\nwhile n < 75:\n    n += 1\n    if get_remainder(n) == 1:\n        if n_to_base_n(n, 2) == 1:\n            print(n)\n        if n_to_base_n(n, 3) == 1:\n            print(n)\n        if n_to_base_n(n, 4) == 1:\n            print(n)\n        if n_to_base_n(n, 6) == 1:\n            print(n)"
  },
  {
    "example_id": 286,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return '0'\n    remainder = get_remainder(n)\n    quotient = n // base\n    return str(remainder) + n_to_base_n(quotient, base)\n\nn = 1\nwhile True:\n    num_terminating = 0\n    for k in range(1, n+1):\n        fraction = Fraction(1, k)\n        decimal = str(fraction)\n        if len(decimal) == 1:\n            num_terminating += 1\n    if num_terminating == n//2:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 287,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = (17-1) // 2\nprint(((2**n)**2 - 2) % 17)"
  },
  {
    "example_id": 288,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(355 % 6)"
  },
  {
    "example_id": 289,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5",
      "0.5",
      "36.0",
      "1.0",
      "36.0",
      "36.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "remainder = int(str(120301232_4), 4) % 8\nprint(remainder)"
  },
  {
    "example_id": 290,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "668.0"
    ],
    "solution": "n = 1\nwhile n % 997!= 1:\n    n = n * 10 + 1\nprint(n)"
  },
  {
    "example_id": 291,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5304.0"
    ],
    "annotated_answers": [
      "528.0"
    ],
    "solution": "print(6_8 * 7_8)"
  },
  {
    "example_id": 292,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "n = 4\nprod = 1\nfor i in range(1, n+1):\n    prod *= i\n\nones_digit = prod % 10\n\nif ones_digit == 4:\n    if prod > 1000:\n        smallest_integers = np.array([1, 2, 3, 4])\n        sum_of_integers = np.sum(smallest_integers)\n        print(sum_of_integers)\n    else:\n        print(\"Product is less than 1000\")\nelse:\n    print(\"Ones digit is not 4\")"
  },
  {
    "example_id": 293,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def is_even(n):\n    return n % 2 == 0\n\ndef count_even_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if is_even(i) and n % i == 0:\n            count += 1\n    return count\n\nprint(count_even_divisors(252))"
  },
  {
    "example_id": 294,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "623.0",
      "712.0",
      "801.0",
      "890.0"
    ],
    "annotated_answers": [
      "801.0"
    ],
    "solution": "# \nn = 3\nfor i in range(600, 900):\n    if i % 89 == 0:\n        print(i)"
  },
  {
    "example_id": 295,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# \nn1 = 40\nn2 = 10\n# \ngcd_n1_n2 = gcd(n1, n2)\n# \nlcm_n1_n2 = lcm(n1, n2)\n# \nx = (lcm_n1_n2 - n2) // gcd_n1_n2\nprint(x)"
  },
  {
    "example_id": 296,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def base_3_digits(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 3)\n        n //= 3\n    return digits\n\ndef base_6_digits(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 6)\n        n //= 6\n    return digits\n\ndef base_3_to_base_6(n):\n    digits = base_3_digits(n)\n    base_6_digits = []\n    for i in range(len(digits)):\n        base_6_digits.append(digits[i] * 3**i)\n    return base_6_digits\n\ndef is_4_digit_base_3(n):\n    digits = base_3_digits(n)\n    if len(digits)!= 4:\n        return False\n    return all(d in [0, 1, 2] for d in digits)\n\ndef is_2_digit_base_6(n):\n    digits = base_6_digits(n)\n    if len(digits)!= 2:\n        return False\n    return all(d in [0, 1, 2, 3, 4, 5] for d in digits)\n\ndef is_valid(n):\n    return is_4_digit_base_3(n) and is_2_digit_base_6(n)\n\ncount = 0\nfor i in range(1000, 10000):\n    if is_valid(i):\n        count += 1\nprint(count)"
  },
  {
    "example_id": 297,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "def sum_of_integers(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\ndef get_remainder(n):\n    return n % 1\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return \"0\"\n    digits = []\n    while n > 0:\n        digits.append(str(n % base))\n        n //= base\n    return ''.join(reversed(digits))\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef sum_of_integers(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n\nn = 67\nd = 2*n - 23\nif get_remainder(d) == 0:\n    x = int(d/2)\n    result = int(n/x)\n    print(result)"
  },
  {
    "example_id": 298,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "n = 225\nfor i in range(1, int(n**0.5)+1):\n    if (n - i**2) % 9 == 0:\n        print(i**2)\n        break"
  },
  {
    "example_id": 299,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 2009\nsum_of_powers = 0\nfor i in range(1, n+1):\n    sum_of_powers += 3**i\nunits_digit = sum_of_powers % 10\nprint(units_digit)"
  },
  {
    "example_id": 300,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef remainder(n):\n    return factorial(n) % 23\n\nprint(remainder(7))"
  },
  {
    "example_id": 301,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1241.0"
    ],
    "solution": "# Write your solution here\ndef is_cube(n):\n    return int(n)**3 == n\n\ndef get_cubes_of_squares_or_cubes(n):\n    cubes = []\n    for i in range(1, n+1):\n        if is_cube(i**2) or is_cube(i**3):\n            cubes.append(i**3)\n    return cubes\n\ndef sum_of_cubes(cubes):\n    return sum(cubes)\n\ndef main():\n    cubes = get_cubes_of_squares_or_cubes(2000)\n    print(sum_of_cubes(cubes))\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 302,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "def power(base, exponent):\n    if exponent == 0:\n        return 1\n    else:\n        return base * power(base, exponent - 1)\n\ndef is_perfect_power(a, b):\n    for i in range(b + 1):\n        if power(a, i) == b:\n            return True\n    return False\n\ndef largest_perfect_power(a):\n    for i in range(1000000):\n        if is_perfect_power(a, i):\n            return i\n    return 0\n\na = 2**306 * 3**340\nprint(largest_perfect_power(a))"
  },
  {
    "example_id": 303,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 100\n\n\ndef n_to_base_n(n, base):\n    return n // base\n\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef fibonacci(n):\n    if n <= 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\nn = 4000\ncount = 0\nfor i in range(1, n+1):\n    if get_remainder(i) == 0 and n_to_base_n(i, 100) == 0:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 304,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "149.0",
      "17.0",
      "17.0",
      "1169.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = 17\nb = 17\nprint(n_to_base_n(a*b, 20))\nprint(n_to_base_n(a+10, 20))\nprint(n_to_base_n(b+10, 20))\nprint(n_to_base_n((a+10)*(b+10), 20))"
  },
  {
    "example_id": 305,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "for N in range(1, 1000000):\n    if not (7 + (30 * N)) % 2 == 0 and not (7 + (30 * N)) % 3 == 0 and not (7 + (30 * N)) % 5 == 0 and not (7 + (30 * N)) % 7 == 0:\n        print(N)\n        break"
  },
  {
    "example_id": 306,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "16592.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 2005\n\ndef n_to_base_n(n, base):\n    if n < base:\n        return [n]\n    else:\n        return [n_to_base_n(n // base, base) + [n % base]]\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 0\nsum = 0\nwhile get_remainder(n) == 0:\n    sum += n\n    n += 1\nprint(sum)"
  },
  {
    "example_id": 307,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "78.0"
    ],
    "annotated_answers": [
      "78.0"
    ],
    "solution": "sum = 0\nfor i in range(0, 50, 3):\n    sum += i % 10\nprint(sum)"
  },
  {
    "example_id": 308,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "E = 5\nprint(E)"
  },
  {
    "example_id": 309,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "8.0",
      "128.0",
      "752.0",
      "34.0",
      "0.0"
    ],
    "annotated_answers": [
      "109.0"
    ],
    "solution": "# Get the number of green beads\ngreen_walter = 476\ngreen_agnes = 104\ngreen_holly = 281\ntotal_green = green_walter + green_agnes + green_holly\n\n# Get the number of red beads\nred_walter = 32\nred_agnes = 16\nred_holly = 80\ntotal_red = red_walter + red_agnes + red_holly\n\n# Get the number of lizards\nlizard_green = 94\nlizard_red = 16\ntotal_green_lizard = green_walter // lizard_green + green_agnes // lizard_green + green_holly // lizard_green\ntotal_red_lizard = red_walter // lizard_red + red_agnes // lizard_red + red_holly // lizard_red\n\n# Get the number of green beads left over\ntotal_green_lizard_red = total_green_lizard * lizard_red\ntotal_red_lizard_green = total_red_lizard * lizard_green\ntotal_green_lizard_red_left_over = total_green_lizard_red % lizard_green\ntotal_red_lizard_green_left_over = total_red_lizard_green % lizard_red\nprint(\"Total Green Lizards:\", total_green_lizard)\nprint(\"Total Red Lizards:\", total_red_lizard)\nprint(\"Total Green Lizards with Red Lizards:\", total_green_lizard_red)\nprint(\"Total Red Lizards with Green Lizards:\", total_red_lizard_green)\nprint(\"Total Green Lizards with Red Lizards Left Over:\", total_green_lizard_red_left_over)\nprint(\"Total Red Lizards with Green Lizards Left Over:\", total_red_lizard_green_left_over)"
  },
  {
    "example_id": 310,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# Find the intersection of the set of all prime numbers less than 30 and the set of all odd numbers greater than zero\nprime_less_than_30 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nodd_greater_than_zero = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\nintersection = list(set(prime_less_than_30) & set(odd_greater_than_zero))\nprint(len(intersection))"
  },
  {
    "example_id": 311,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "number = 527\nsum = 0\nwhile number > 0:\n    sum += number % 4\n    number //= 4\nprint(sum)"
  },
  {
    "example_id": 312,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0",
      "70.0",
      "176.0",
      "418.0",
      "598.0",
      "756.0",
      "1054.0",
      "1960.0",
      "2496.0",
      "1978.0"
    ],
    "annotated_answers": [
      "122.0"
    ],
    "solution": "# define function to get remainder\ndef get_remainder(n):\n    if n % 4 == 3:\n        return 3\n    elif n % 3 == 1:\n        return 1\n    elif n % 5 == 1:\n        return 1\n    else:\n        return 0\n\n# define function to convert to base n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    digits = []\n    while n > 0:\n        digits.append(n % base)\n        n //= base\n    return digits[::-1]\n\n# find two numbers that meet the criteria\nfor a in range(1, 100):\n    for b in range(a+1, 100):\n        if get_remainder(a) == 3 and get_remainder(b) == 1:\n            if get_remainder(a*b) == 1:\n                print(a*b)\n                break"
  },
  {
    "example_id": 313,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "X = 2\nX_units = X % 10\nX_tens = int(X / 10)\n\nn = X_tens + 4\nn_units = n % 10\nn_tens = int(n / 10)\n\nprint(n_tens * 10 + n_units)"
  },
  {
    "example_id": 314,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "87.0",
      "87.0",
      "7569.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 2003\nn_divisors = len(np.unique(np.array(np.divmod(n, np.arange(2, n))[0])))\nn_prime_divisors = len(np.unique(np.array(np.divmod(n, np.arange(2, n))[0]).astype(int)))\nn_prime_divisors_squared = n_prime_divisors**2\nprint(n_divisors)\nprint(n_prime_divisors)\nprint(n_prime_divisors_squared)"
  },
  {
    "example_id": 315,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 7\nprint(n)"
  },
  {
    "example_id": 316,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import itertools\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef has_three_distinct_prime_factors(n):\n    factors = set()\n    while n > 1:\n        factors.add(n % 10)\n        n //= 10\n    return len(factors) == 3\n\ndef get_increasing_sequences(n):\n    for seq in itertools.combinations(range(10), n):\n        if sum(seq) == 20 and is_prime(seq[0]) and is_prime(seq[1]) and is_prime(seq[2]):\n            yield seq\n\nprint(len(list(get_increasing_sequences(3))))"
  },
  {
    "example_id": 317,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Initialize list of prime numbers\nprime_numbers = []\n\n# Iterate through all possible combinations of two digits\nfor i in range(1, 10):\n    for j in range(i, 10):\n        number = i*10 + j\n        if number % 3 == 0:\n            prime_numbers.append(number)\n\n# Print length of prime number list\nprint(len(prime_numbers))"
  },
  {
    "example_id": 318,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def binary_to_decimal(binary_string):\n    return int(binary_string, 2)\n\n\ndef decimal_to_binary(decimal_integer):\n    return bin(decimal_integer)[2:]\n\n\ns1 = '11001010100101011'\ns2 = '110100011000100'\n\nn = binary_to_decimal(s1) + binary_to_decimal(s2)\nm = binary_to_decimal(decimal_to_binary(n))\n\nprint(n - m)"
  },
  {
    "example_id": 319,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 180\nb = 168\nprint(gcd(a,b))"
  },
  {
    "example_id": 320,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 100000001):\n    sum += i\n    for j in range(2, int(sum**0.5) + 1):\n        if sum % j == 0:\n            break\n    else:\n        print(sum)\n        break"
  },
  {
    "example_id": 321,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Jan steps\nstep_1 = 130\nstep_2 = 127\nstep_3 = 124\nstep_4 = 13\n\n# Jen steps\nstep_5 = 3\nstep_6 = 7\nstep_7 = 11\nstep_8 = 139\n\n# Jan and Jen steps\nstep_list = [step_1, step_2, step_3, step_4, step_5, step_6, step_7, step_8]\nstep_list = np.sort(step_list)\n\n# Jan and Jen common steps\ncommon_steps = []\nfor i in range(len(step_list) - 1):\n    if step_list[i] % step_list[i+1] == 0:\n        common_steps.append(step_list[i])\n\nprint(len(common_steps))"
  },
  {
    "example_id": 322,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "365.0"
    ],
    "annotated_answers": [
      "365.0"
    ],
    "solution": "n = 1\nwhile (28*n) % 365!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 323,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "N = 2**3 * 3**1 * 4**3 * 5**8\nprint(len(str(N)))"
  },
  {
    "example_id": 324,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5768876036600566",
      "47"
    ],
    "annotated_answers": [
      "981.0"
    ],
    "solution": "number = 0\nfor i in range(100):\n    number = number * 3 + 1\nprint(number)"
  },
  {
    "example_id": 325,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "n = 5\nwhile not 1560 % n == 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 326,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a = 32\nb = 23\nprint(a+b)"
  },
  {
    "example_id": 327,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# define function to calculate gcd\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n# define function to calculate lcm\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n# define function to convert to base n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    digits = []\n    while n > 0:\n        digits.append(n % base)\n        n //= base\n    return digits\n\n# define function to calculate remainders\ndef get_remainder(n):\n    remainder = n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            remainder = n % i\n            break\n    return remainder\n\n# define function to calculate possible amounts of change\ndef possible_amounts(purchase_amount, change_amount):\n    if purchase_amount == change_amount:\n        return 0\n    if purchase_amount < change_amount:\n        return 0\n    if change_amount < 10:\n        return 0\n    # get gcd of purchase amount and change amount\n    gcd_val = gcd(purchase_amount, change_amount)\n    # get lcm of purchase amount and change amount\n    lcm_val = lcm(purchase_amount, change_amount)\n    # get all possible amounts of change\n    possible_amounts = []\n    for i in range(1, lcm_val):\n        if i % gcd_val == 0:\n            possible_amounts.append(i)\n    return len(possible_amounts)\n\n# test cases\nprint(possible_amounts(10, 10)) # 0\nprint(possible_amounts(10, 9)) # 0\nprint(possible_amounts(10, 11)) # 1\nprint(possible_amounts(10, 21)) # 2\nprint(possible_amounts(10, 22)) # 3"
  },
  {
    "example_id": 328,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "b = 12\nc = 7\n\ndef get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return [int(i) for i in str(n)]\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef solution(b, c):\n    base = c\n    remainder = get_remainder(b)\n    b_in_base_c = n_to_base_n(b, base)\n    c_in_base_b = n_to_base_n(c, b)\n    b_in_base_c_sum = sum(b_in_base_c)\n    c_in_base_b_sum = sum(c_in_base_b)\n    b_plus_c = b_in_base_c_sum + c_in_base_b_sum\n    return b_plus_c\n\nprint(solution(b, c))"
  },
  {
    "example_id": 329,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "# 5 * 25_b = 137_b\n# 5 * 25 = 137\n# 25_b = 137 / 5\n# 25_b = 26\nb = 26\nprint(b)"
  },
  {
    "example_id": 330,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "units_digit = 0\nfor i in range(1, 51):\n    units_digit += i\nprint(units_digit % 10)"
  },
  {
    "example_id": 331,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "875.0"
    ],
    "annotated_answers": [
      "215.0"
    ],
    "solution": "stamps = 200\npages = 30\nlast_page = 5\nstamps_per_page = pages - last_page\nstamps_per_page = 30\nsmallest_number_of_stamps = stamps_per_page * (pages - 1) + last_page\nprint(smallest_number_of_stamps)"
  },
  {
    "example_id": 332,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "202.0"
    ],
    "solution": "# Quotient is 28\n# Remainder is 6\n# Number is 28*7 + 6\nnumber = 28*7 + 6\nprint(number)"
  },
  {
    "example_id": 333,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "1.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "values = [36, 64, 81]\nbases = [10, 2, 3]\ndigits = [0, 1, 2]\n\nfor i in range(3):\n    for j in range(3):\n        if values[i] == values[j]:\n            print(digits[i], digits[j])"
  },
  {
    "example_id": 334,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 12):\n    sum += i\nprint(sum % 10)"
  },
  {
    "example_id": 335,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "42.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "m = 126 / 6\nn = 126 / 6\nprint(m + n)"
  },
  {
    "example_id": 336,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "406.0",
      "406.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "product = 2005\nfor i in range(2, product):\n    if product % i == 0:\n        sum = i + product//i\n        print(sum)"
  },
  {
    "example_id": 337,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "remainder = 2004 % 12\nprint(remainder)"
  },
  {
    "example_id": 338,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1358.0"
    ],
    "annotated_answers": [
      "25168.0"
    ],
    "solution": "binary_number = '10101001110'\noctal_number = int(binary_number, 2)\nprint(octal_number)"
  },
  {
    "example_id": 339,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 289 + 9*51 + 3**6 + 4*187\nremainder = n % 17\nprint(remainder)"
  },
  {
    "example_id": 340,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9",
      "17"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "A = 10**9\nB = 9 * 10**8\nprint(A * B)"
  },
  {
    "example_id": 341,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "121.0"
    ],
    "solution": "def get_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef get_divisors_count(n):\n    divisors_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors_count += 1\n    return divisors_count\n\ndef get_nth_divisible_number(n):\n    current_number = 1\n    while get_divisors_count(current_number)!= 3:\n        current_number += 1\n    return current_number\n\nprint(get_nth_divisible_number(5))"
  },
  {
    "example_id": 342,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2010.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "n = 2010\nwhile True:\n    remainder = n % 10\n    if remainder == 0:\n        break\n    n = n * 10\nprint(n)"
  },
  {
    "example_id": 343,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "41.0"
    ],
    "annotated_answers": [
      "41.0"
    ],
    "solution": "n = 1\nwhile True:\n    p = n**2 - n + 41\n    p_next = (n + 1)**2 - (n + 1) + 41\n    if gcd(p, p_next) > 1:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 344,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "m = 2**1980 * 3**384 * 5**1694 * 7**343\nk = 2\nn = int(math.sqrt(m))\nn_to_base_n(n, k)"
  },
  {
    "example_id": 345,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "remainder = 7**17 % 5\nprint(remainder)"
  },
  {
    "example_id": 346,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "284.0"
    ],
    "solution": "n = 284\nproper_divisors = [1, 2, 3, 4, 6]\nsum_proper_divisors = sum(proper_divisors)\nprint(sum_proper_divisors)"
  },
  {
    "example_id": 347,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1296.0",
      "1296.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "t = 3\nlcm_12_t = lcm(12, t)\nlcm_12_t_squared = lcm_12_t**2\nprint(lcm_12_t_squared)\nprint((12*t)**2)"
  },
  {
    "example_id": 348,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(35**12 % 10)"
  },
  {
    "example_id": 349,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "count = 0\nfor n in range(61):\n    if n % 6 == 2:\n        count += 1\nprint(count)"
  },
  {
    "example_id": 350,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    digits = []\n    while n > 0:\n        digits.append(get_remainder(n))\n        n //= base\n    return digits\n\na = 123\nb = 999\n\nn = 123999\n\nremainder = n_to_base_n(n, b)\n\nprint(remainder)"
  },
  {
    "example_id": 351,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "233.0"
    ],
    "solution": "n = 0\nwhile 942 % 15**n!= 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 352,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3224.0"
    ],
    "annotated_answers": [
      "3224.0"
    ],
    "solution": "n = 6300\nsum_of_odd_divisors = 0\nfor i in range(1, n+1):\n    if n % i == 0:\n        if i % 2!= 0:\n            sum_of_odd_divisors += i\nprint(sum_of_odd_divisors)"
  },
  {
    "example_id": 353,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def get_consecutive_odd_sum(n):\n    return sum(range(1, n+1, 2))\n\ndef get_greatest_common_factor(a, b):\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            return i\n\ndef get_greatest_common_factor_of_consecutive_odd_sum(n):\n    return get_greatest_common_factor(n, get_consecutive_odd_sum(n))\n\nprint(get_greatest_common_factor_of_consecutive_odd_sum(6))"
  },
  {
    "example_id": 354,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "202.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "start_time = 5 * 60 + 13\narrival_time = 8 * 60 + 35\nwaiting_time = arrival_time - start_time\nprint(waiting_time)"
  },
  {
    "example_id": 355,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "304.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 14\nbase = 8\nn_squared = n**2\nn_squared_units = n_to_base_n(n_squared, base)\nprint(n_squared_units)"
  },
  {
    "example_id": 356,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.5928571428571425"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "p = 7\nn = (p-2)\nnum_list = [1, 2, 3, 4, 5, 6, 7]\nden_list = []\nfor num in num_list:\n    den_list.append(num**(-1))\ndenominator = sum(den_list)\nprint(denominator)"
  },
  {
    "example_id": 357,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "451.0"
    ],
    "solution": "# find remainder when 10^51 is divided by 9\nremainder = get_remainder(10**51, 9)\nprint(remainder)\n\n# find the sum of the digits of the remainder\nsum_digits = sum([int(digit) for digit in str(remainder)])\nprint(sum_digits)"
  },
  {
    "example_id": 358,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "numbers = [1, 12, 123, 1234, 12345, 123456, 1234567, 12345678]\nsum = sum(numbers)\nremainder = sum % 5\nprint(remainder)"
  },
  {
    "example_id": 359,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "fibonacci = [1, 1, 2, 3, 5]\nremainder = fibonacci[-1] % 4\nprint(remainder)"
  },
  {
    "example_id": 360,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "15.0",
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Set number of pieces of candy for each person\nx = 5\n\n# Lizzy gives all her candy to Megan\nP1 = x\n\n# Megan gives all the candy she now has (which includes the candy Lizzy gave her) to Oscar\nP2 = P1 + x\n\n# Oscar gives all the candy he now has to Patrick\nP3 = P2 + x\n\n# Print number of pieces of candy Patrick has in the end\nprint(P3)\n\n# Find common divisor for Patrick\ndivisor = gcd(P3, 2)\n\n# Print number of pieces of candy Patrick has in the end\nprint(P3 / divisor)\n\n# Print number of pieces of candy Patrick has in the end\nprint(P3 % divisor)"
  },
  {
    "example_id": 361,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "counter = 0\nfor i in range(1, 30):\n    if (i % 30) == 0:\n        counter += 1\nprint(counter)"
  },
  {
    "example_id": 362,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "97.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "a, b, c = 29, 31, 37\nsum = a + b + c\nprint(sum)"
  },
  {
    "example_id": 363,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "321.0"
    ],
    "annotated_answers": [
      "321.0"
    ],
    "solution": "n = 39500 // 123\nprint(n)"
  },
  {
    "example_id": 364,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "# \nx = 720\na = 2\nax = x * a\n# \nsqrt_ax = (ax)**(1/3)\n# \nsmallest_sqrt_ax = int(sqrt_ax)\n# \nprint(smallest_sqrt_ax)"
  },
  {
    "example_id": 365,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "n = 2\nwhile True:\n    remainder = n % 3\n    if remainder == 2:\n        remainder = n % 7\n        if remainder == 3:\n            print(n)\n            break\n    n += 1"
  },
  {
    "example_id": 366,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.35625"
    ],
    "annotated_answers": [
      "0.35625"
    ],
    "solution": "print(57/160)"
  },
  {
    "example_id": 367,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10901.0"
    ],
    "annotated_answers": [
      "10901.0"
    ],
    "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef get_remainder(n):\n    return n % 11\n\ndef n_to_base_n(n, base):\n    return int(n)\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef smallest_five_digit_palindrome_divisible_by_11():\n    n = 10000\n    while True:\n        if is_palindrome(n) and get_remainder(n) == 0:\n            return n\n        n += 1\n\nprint(smallest_five_digit_palindrome_divisible_by_11())"
  },
  {
    "example_id": 368,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 423\nb = 3\nwhile len(str(n_to_base_n(n, b))) < 3:\n    b += 1\nprint(b)"
  },
  {
    "example_id": 369,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def days_with_3_in_tens_digit(year):\n    days = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if str(day)[0] == '3':\n                days += 1\n    return days\nprint(days_with_3_in_tens_digit(2018))"
  },
  {
    "example_id": 370,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.936390936390936"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "numbers = [4/37, 3/11, 23/9]\nsum = np.sum(numbers)\nprint(sum)"
  },
  {
    "example_id": 371,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "360.0",
      "1.0",
      "2.0",
      "360.0",
      "720.0",
      "1.0",
      "3.0",
      "240.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Find the first 3 consecutive integers\n# that multiply to 720\nfor i in range(1, 1000):\n    for j in range(i+1, 1000):\n        for k in range(j+1, 1000):\n            if i*j*k == 720:\n                print(i, j, k)\n                print(i, j, k, sep=\"*\")\n                print(i*j*k)\n                break\n                break\n                break"
  },
  {
    "example_id": 372,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "495.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# Gear 1 turns 33/3 times per minute\n# Gear 2 turns 45 times per minute\n# Initially, the mark on each gear is pointing due north\n\n# Gear 1 turns 33/3 times per second\ngear_1_turns_per_second = 33 / 3\n\n# Gear 2 turns 45 times per second\ngear_2_turns_per_second = 45\n\n# Gear 1 turns for 1 second\ngear_1_turns_for_1_second = gear_1_turns_per_second\n\n# Gear 2 turns for 1 second\ngear_2_turns_for_1_second = gear_2_turns_per_second\n\n# How many seconds until both gears point due north\nseconds_until_both_gears_point_due_north = lcm(gear_1_turns_per_second, gear_2_turns_per_second)\n\nprint(seconds_until_both_gears_point_due_north)"
  },
  {
    "example_id": 373,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 5\nremainder = n % 7\nprint(remainder)\n\n\nn = 11\nremainder = (2*n+1) % 7\nprint(remainder)"
  },
  {
    "example_id": 374,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "digits = [1,2,3,4,5,6,7,8,9]\nsum_of_digits = [2,2,1]\n\nfor i in range(len(digits)):\n    if digits[i] not in sum_of_digits:\n        print(digits[i])"
  },
  {
    "example_id": 375,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Remainder when 13^13 + 5 is divided by 6\nremainder = (13**13 + 5) % 6\nprint(remainder)"
  },
  {
    "example_id": 376,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "n = 4\nn = n_to_base_n(n, 10)\nn = n.replace('4', '\\triangle_9')\nn = n.replace('0', '\\triangle_7')\nprint(n)"
  },
  {
    "example_id": 377,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "409.0"
    ],
    "solution": "# define variables\nn = 58\nb = 9\nm = 18\n# compute\nresult = n - m\n# express in base b\nbase_result = n_to_base_n(result, b)\nprint(base_result)"
  },
  {
    "example_id": 378,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 1\nwhile True:\n    if len(str(x**2+x)) < 3:\n        print(x)\n        break\n    x += 1"
  },
  {
    "example_id": 379,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "def mod_inv(a, m):\n    return pow(a, m-2, m)\n\nprint(mod_inv(17, 83))"
  },
  {
    "example_id": 380,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "b = 3\nwhile True:\n    if n_to_base_n(47, b) < 10:\n        break\n    b += 1\nprint(b)"
  },
  {
    "example_id": 381,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3504.0"
    ],
    "annotated_answers": [
      "3504.0"
    ],
    "solution": "def sum_digits(number):\n    return sum(int(digit) for digit in str(number))\n\ndef find_smallest_number(n):\n    number = 3456\n    while sum_digits(number)!= n:\n        number += 1\n    return number\n\nprint(find_smallest_number(12))"
  },
  {
    "example_id": 382,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.561",
      "19"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 300\na = 1\nfor i in range(2, n):\n    if n % i == 0:\n        a *= i\nprint(a)"
  },
  {
    "example_id": 383,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2310.0"
    ],
    "annotated_answers": [
      "2079.0"
    ],
    "solution": "def is_terminating_decimal(n):\n    return int(n) == n\n\ndef is_in_set(k):\n    return is_terminating_decimal(17 * k / 66) and is_terminating_decimal(13 * k / 105)\n\ndef find_smallest_k(k):\n    if is_in_set(k):\n        return k\n    return find_smallest_k(k + 1)\n\nprint(find_smallest_k(2010))"
  },
  {
    "example_id": 384,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "625.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "number = 5**100\nremainder = number % 1000\nprint(remainder)"
  },
  {
    "example_id": 385,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "sum = 0\nfor i in range(7438, 7445 + 1):\n    sum += i\nremainder = sum % 8\nprint(remainder)"
  },
  {
    "example_id": 386,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "715.0"
    ],
    "solution": "# Initialize variables\nT = 1\n\n# Set the number of 1s and 0s in T\nones = 14\nzeros = 14\n\n# Initialize the quotient\nquotient = 1\n\n# While there are still 1s or 0s in T\nwhile ones > 0 or zeros > 0:\n    # If there are more 1s than 0s\n    if ones >= zeros:\n        # Add 1 to the quotient\n        quotient = quotient + 1\n        # Subtract 1 from the number of 1s in T\n        ones = ones - 1\n    else:\n        # Subtract 1 from the number of 0s in T\n        zeros = zeros - 1\n\n# Print the quotient\nprint(quotient)"
  },
  {
    "example_id": 387,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(2**8 % 5)"
  },
  {
    "example_id": 388,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "66.0"
    ],
    "solution": "N = 50\nsum = 0\nfor i in range(1, N+1):\n    if i % 8 == 0:\n        sum += 5\n    elif i % 6 == 0:\n        sum += 3\nprint(sum)"
  },
  {
    "example_id": 389,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "69.0"
    ],
    "solution": "nums = np.arange(100, 1000)\nnums = nums[np.logical_and(nums % 13 == 0, nums % 10 == 0)]\nprint(len(nums))"
  },
  {
    "example_id": 390,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1512.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "product = 5 * 6 * 7 * 8 * 9 * 10\nprint(product // 100)"
  },
  {
    "example_id": 391,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return [int(i) for i in str(n)]\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n\ndef get_largest_divisor(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return max(divisors)\n\ndef get_largest_divisor_fibonacci(n):\n    fib = fibonacci(n)\n    divisors = []\n    for i in range(1, int(fib**0.5) + 1):\n        if fib % i == 0:\n            divisors.append(i)\n            if fib // i!= i:\n                divisors.append(fib // i)\n    return max(divisors)\n\nn = 2\nlargest_divisor = get_largest_divisor(n)\nprint(largest_divisor)"
  },
  {
    "example_id": 392,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "90.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "def largest_divisible_number(n):\n    for i in range(99, 10, -1):\n        if i % 9 == 0 and i % 6 == 0:\n            return i\n    return -1\n\nprint(largest_divisible_number(99))"
  },
  {
    "example_id": 393,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "8.0",
      "2.0",
      "3.0",
      "5.0",
      "8.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "numbers = [1, 2, 3, 4]\nproduct = np.prod(numbers)\nremainder = product % 6\nprint(remainder)"
  },
  {
    "example_id": 394,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.72",
      "-5.0"
    ],
    "annotated_answers": [
      "6.72",
      "-05"
    ],
    "solution": "num = 21\nden = 2**2 * 5**7\nprint(num/den)"
  },
  {
    "example_id": 395,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0010030090270812437"
    ],
    "annotated_answers": [
      "333.0"
    ],
    "solution": "a = 997\nb = 1000\nprint(n_to_base_n(a**-1, b))"
  },
  {
    "example_id": 396,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "9.0",
      "9.0"
    ],
    "annotated_answers": [
      "43436.0"
    ],
    "solution": "# Convert the number from decimal to base six\nnum = 999\nbase_six = [int(i) for i in str(num)]\nprint(base_six)"
  },
  {
    "example_id": 397,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 2\nremainder = 2 % 11\nprint(remainder)"
  },
  {
    "example_id": 398,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "23160.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a, b = 2, 3\nf = a * 4 + b * 5\ng = a * 32 + b * 32\n\nh = gcd(f, g)\nf = f // h\ng = g // h\n\nf = n_to_base_n(f, 10)\ng = n_to_base_n(g, 10)\n\nprint(f + g)"
  },
  {
    "example_id": 399,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30031.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "n = 2\nwhile True:\n    if n % 130 == 1 and n % 231 == 1:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 400,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "952.0"
    ],
    "annotated_answers": [
      "935.0"
    ],
    "solution": "X = 1000\nwhile (X % 17)!= 0 or (X % 8)!= 0:\n    X -= 1\nprint(X)"
  },
  {
    "example_id": 401,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = 3\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a*b // gcd(a, b)\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef get_remainder(n):\n    remainder = n % 10\n    if remainder == 0:\n        return 10\n    else:\n        return remainder\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return 0\n    else:\n        return n % base + 10*n_to_base_n(n // base, base)\n\ndef get_values(n):\n    values = []\n    for i in range(1, n+1):\n        remainder = get_remainder(i)\n        if remainder!= 0:\n            values.append(gcd(n + 5, n + 11 - i))\n    return values\n\nprint(get_values(n))"
  },
  {
    "example_id": 402,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3087.0"
    ],
    "annotated_answers": [
      "30325.0"
    ],
    "solution": "answer = 4321 - 1234\nprint(answer)"
  },
  {
    "example_id": 403,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def factors(n):\n    factors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            if n // i!= i:\n                factors.append(n // i)\n    return len(factors)\n\nprint(factors(48))"
  },
  {
    "example_id": 404,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1024.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# tens digit in the sum 11^1 + 11^2 + 11^3 +... + 11^9\n# = 11^1 + 11^2 + 11^3 +... + 11^9\n# = 1 + 1 + 1 +... + 1 + 11^9\n# = 11^10\n# = 1024\nprint(1024)"
  },
  {
    "example_id": 405,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "33.0"
    ],
    "solution": "quarters = 10\nremainder = 3\npiles = 5\nwhile quarters % piles!= remainder:\n    piles += 1\nquarters = (quarters // piles) * piles + remainder\nprint(quarters)"
  },
  {
    "example_id": 406,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 4\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return '0'\n    digits = []\n    while n > 0:\n        digits.append(str(n % base))\n        n //= base\n    return ''.join(reversed(digits))\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 4\nwhile True:\n    n += 1\n    if get_remainder(n) == 0:\n        print(n)\n        break\n    if fibonacci(n) == 144:\n        print(n)\n        break"
  },
  {
    "example_id": 407,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def units_digit(n, base):\n    return int(str(n)[-1])\n\nprint(units_digit(413_6 - 215_6, 6))"
  },
  {
    "example_id": 408,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 121*122*123\nprint(n%4)"
  },
  {
    "example_id": 409,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "sum = np.sum([1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11])\nremainder = sum % 8\nprint(remainder)"
  },
  {
    "example_id": 410,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "40507599.0"
    ],
    "annotated_answers": [
      "11121123.0"
    ],
    "solution": "a = 2012_3\nb = 201_3\nproduct = a*b\nprint(product)"
  },
  {
    "example_id": 411,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "n_divisors = 0\nfor num in range(1, 1000):\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    if len(divisors) == 3:\n        n_divisors += 1\nprint(n_divisors)"
  },
  {
    "example_id": 412,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "sum = 0\nfor i in range(2000, 2007):\n    sum += i\nremainder = sum % 7\nprint(remainder)"
  },
  {
    "example_id": 413,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "245.0"
    ],
    "annotated_answers": [
      "144.0"
    ],
    "solution": "lcm = 7*6*5*4*3*2*1\ngcd = 9\nx = lcm/gcd\ny = 315\nif x == y:\n    print(x)\nelse:\n    print(x-y)"
  },
  {
    "example_id": 414,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a = 0\nfor b in range(1, 10):\n    if (b**2) % 10 == 7:\n        a = b-1\n        break\nprint(a)"
  },
  {
    "example_id": 415,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "1.0",
      "2.0",
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "A = '3245'\nB = '7125'\n\ndef get_difference(A, B):\n    A_list = [int(i) for i in A]\n    B_list = [int(i) for i in B]\n    difference = np.subtract(A_list, B_list)\n    return difference\n\ndifference = get_difference(A, B)\nprint(difference)"
  },
  {
    "example_id": 416,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "722.0"
    ],
    "annotated_answers": [
      "53.0"
    ],
    "solution": "# find the smallest 5 numbers with exactly 4 factors\nnums = []\nfor i in range(1, 1000):\n    factors = []\n    for j in range(1, i):\n        if i % j == 0:\n            factors.append(j)\n    if len(factors) == 4:\n        nums.append(i)\nprint(sum(nums[:5]))"
  },
  {
    "example_id": 417,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "b = 2\na = 13\nc = 15\nd = 243\nx = (d*c)**(1/b)\ny = x**(b-1)\nz = (x-y)**(b-1)\nresult = (z*d)**(1/b)\nprint(result)"
  },
  {
    "example_id": 418,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "a = 17\nb = 40\n\n# Step 1: Find the GCD of $a$ and $b$\ngcd_a_b = gcd(a, b)\n\n# Step 2: Divide $a$ and $b$ by the GCD\na = a // gcd_a_b\nb = b // gcd_a_b\n\n# Step 3: Find the multiplicative inverse of $a$ modulo $b$\ninverse_a_mod_b = pow(a, b-2, b)\n\n# Step 4: Multiply $a$ and $b$ to find the solution\nsolution = a * inverse_a_mod_b\n\n# Step 5: Modular reduce the solution\nsolution = solution % b\n\n# Step 6: Find the smallest and second-smallest positive integers\nsmallest = solution // b\nsecond_smallest = (solution % b) // b\n\nprint(smallest, second_smallest)"
  },
  {
    "example_id": 419,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "numbers = [1, 12, 123, 1234, 12345, 123456, 1234567, 12345678]\nsum = np.sum(numbers)\nprint(sum % 9)"
  },
  {
    "example_id": 420,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 3\nb = 5\nnum = a * (2 * a + b) - 2 * a ** 2 + a * b\ndenom = 2 * a ** 2 - a * b\ng = gcd(num, denom)\nnum = num // g\ndenom = denom // g\nprint(num, '/', denom)"
  },
  {
    "example_id": 421,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "# Initialize variables\nn = 100\nbase = 19\n\n# Calculate the remainder of n when divided by base\nremainder = n % base\n\n# Print the remainder\nprint(remainder)\n\n# Initialize variables\nn = 100\nbase = 19\n\n# Calculate the remainder of n when divided by base\nremainder = n % base\n\n# Print the remainder\nprint(remainder)\n\n# Initialize variables\nn = 100\nbase = 19\n\n# Calculate the remainder of n when divided by base\nremainder = n % base\n\n# Print the remainder\nprint(remainder)\n\n# Initialize variables\nn = 100\nbase = 19\n\n# Calculate the remainder of n when divided by base\nremainder = n % base\n\n# Print the remainder\nprint(remainder)\n\n# Initialize variables\nn = 100\nbase = 19\n\n# Calculate the remainder of n when divided by base\nremainder = n % base\n\n# Print the remainder\nprint(remainder)\n\n# Initialize variables\nn = 100\nbase = 19\n\n# Calculate the remainder of n when divided by base\nremainder = n % base\n\n# Print the remainder\nprint(remainder)\n\n# Initialize variables\nn = 100\nbase = 19\n\n# Calculate the remainder of n when divided by base\nremainder = n % base\n\n# Print the remainder\nprint(remainder)\n\n# Initialize variables\nn = 100\nbase = 19\n\n# Calculate the remainder of n when divided by base\nremainder = n % base\n\n# Print the remainder\nprint(remainder)\n\n# Initialize variables\nn = 100\nbase = 19\n\n# Calculate the remainder of n when divided by base\nremainder = n % base\n\n# Print the remainder\nprint(remainder)\n\n# Initialize variables\nn = 100\nbase = 19\n\n# Calculate the remainder of n when divided by base\nremainder = n % base\n\n# Print"
  },
  {
    "example_id": 422,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0",
      "808.0",
      "130.0",
      "130.0"
    ],
    "annotated_answers": [
      "-449.0"
    ],
    "solution": "n = 15\nmodulus = 1199\n# Calculate the remainder\nremainder = n % modulus\nprint(remainder)\n\n# Calculate the inverse of n in the modulus\ninverse = pow(n, modulus-2, modulus)\nprint(inverse)\n\n# Calculate the result\nresult = remainder * inverse % modulus\nprint(result)\n\n# Print the result\nprint(result)"
  },
  {
    "example_id": 423,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "pages = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\npages_1 = [page for page in pages if str(page)[-1] == str(50)[-1]]\npages_2 = [page for page in pages[::-1] if str(page)[-1] == str(1)[-1]]\n\nprint(len(pages_1))\nprint(len(pages_2))"
  },
  {
    "example_id": 424,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 13):\n    sum += i\nremainder = sum % 4\nprint(remainder)"
  },
  {
    "example_id": 425,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "N = 100\nmultiples_of_4 = np.arange(0, N, 4)\nmultiples_of_3 = np.arange(0, N, 3)\nmultiples_of_4 = set(multiples_of_4)\nmultiples_of_3 = set(multiples_of_3)\ncommon_multiples = multiples_of_4.intersection(multiples_of_3)\nprint(len(common_multiples))"
  },
  {
    "example_id": 426,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "m = 4\nn = 10\nremainder = (m + n) % 14\nprint(remainder)"
  },
  {
    "example_id": 427,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 0\nfor i in range(1, 10000):\n    if (n + 1) % 13 == 0:\n        n = i\n        break\nprint(n)"
  },
  {
    "example_id": 428,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1909.0",
      "2121201.0"
    ],
    "annotated_answers": [
      "12023.0"
    ],
    "solution": "a = 2121\nb = 212\nc = a - b\nprint(c)\nprint(n_to_base_n(c, 3))"
  },
  {
    "example_id": 429,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "n = 46656\nperfect_squares = []\nfor i in range(1, int(math.sqrt(n)) + 1):\n    if n % i ** 2 == 0:\n        perfect_squares.append(i ** 2)\nnum_perfect_squares = len(perfect_squares)\nprint(num_perfect_squares)"
  },
  {
    "example_id": 430,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "406.0"
    ],
    "annotated_answers": [
      "3859.0"
    ],
    "solution": "ans = 817 - 145 - 266\nprint(ans)"
  },
  {
    "example_id": 431,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 3\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    digits = []\n    while n > 0:\n        digits.append(n % base)\n        n //= base\n    return digits\n\ndef is_palindrome(digits):\n    for i in range(len(digits)):\n        if digits[i]!= digits[-i-1]:\n            return False\n    return True\n\ndef get_palindromes(base_3_numbers):\n    palindromes = []\n    for num in base_3_numbers:\n        digits = n_to_base_n(num, 3)\n        if is_palindrome(digits):\n            palindromes.append(num)\n    return palindromes\n\ndef solve():\n    base_3_numbers = [n for n in range(1, 2007)]\n    palindromes = get_palindromes(base_3_numbers)\n    print(len(palindromes))\n\nsolve()"
  },
  {
    "example_id": 432,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "143.0"
    ],
    "annotated_answers": [
      "143.0"
    ],
    "solution": "def gcf(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcf(1001, 2431))"
  },
  {
    "example_id": 433,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# define the function\ndef f(a):\n    return gcd(3*a**2+19*a+30, a**2+6*a+9)\n\n# find the maximum possible value\nmax_value = f(10000) - 10000\nprint(max_value)"
  },
  {
    "example_id": 434,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "M = 3\nN = 5\nremainder = (M + N) % 6\nprint(remainder)"
  },
  {
    "example_id": 435,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.370000000000005"
    ],
    "annotated_answers": [
      "37.0"
    ],
    "solution": "a = 25.67\nb = 17.21\nc = 39.17\nd = 26.32\ntotal = a + b + c + d\nchange = total % 100\nprint(change)"
  },
  {
    "example_id": 436,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "27.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 16\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return [0]\n    digits = []\n    while n > 0:\n        digits.append(int(n % base))\n        n //= base\n    return digits[::-1]\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n\nP = 1\nfor num in range(2, 101):\n    if num % 16 == 0:\n        P *= num\n\nprint(get_remainder(P))"
  },
  {
    "example_id": 437,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "def number_digits(x):\n    return len(str(x))\n\ndef main():\n    a = 10**100\n    b = 9**100\n    difference = a - b\n    print(number_digits(difference))\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 438,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2009.0"
    ],
    "annotated_answers": [
      "2000.0"
    ],
    "solution": "n = np.arange(1, 2011)\nnum_repeating_decimals = 0\nfor i in n:\n    frac = Fraction(i**2, 2010)\n    if frac.denominator!= 1:\n        num_repeating_decimals += 1\nprint(num_repeating_decimals)"
  },
  {
    "example_id": 439,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Find the largest palindrome in base 3\nlargest_palindrome = 0\nfor i in range(1000, 10000):\n    if str(i) == str(i)[::-1]:\n        largest_palindrome = i\n        break\nprint(largest_palindrome)\n\n\n# Find the largest palindrome in base 3\nlargest_palindrome = 0\nfor i in range(1000, 10000):\n    if str(i) == str(i)[::-1]:\n        largest_palindrome = i\n        break\nprint(largest_palindrome)\n\n\n# Find the largest palindrome in base 3\nlargest_palindrome = 0\nfor i in range(1000, 10000):\n    if str(i) == str(i)[::-1]:\n        largest_palindrome = i\n        break\nprint(largest_palindrome)\n\n\n# Find the largest palindrome in base 3\nlargest_palindrome = 0\nfor i in range(1000, 10000):\n    if str(i) == str(i)[::-1]:\n        largest_palindrome = i\n        break\nprint(largest_palindrome)\n\n\n# Find the largest palindrome in base 3\nlargest_palindrome = 0\nfor i in range(1000, 10000):\n    if str(i) == str(i)[::-1]:\n        largest_palindrome = i\n        break\nprint(largest_palindrome)\n\n\n# Find the largest palindrome in base 3\nlargest_palindrome = 0\nfor i in range(1000, 10000):\n    if str(i) == str(i)[::-1]:\n        largest_palindrome = i\n        break\nprint(largest_palindrome)\n\n\n# Find the largest palindrome in base 3"
  },
  {
    "example_id": 440,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "720.0"
    ],
    "annotated_answers": [
      "427.0"
    ],
    "solution": "a = 126_7\nb = 54_7\nprint(a-b)"
  },
  {
    "example_id": 441,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "def lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef problem(m):\n    return lcm(8 * m, 10 ** 10) == 4 * lcm(m, 10 ** 10)\n\nfor i in range(100, 1000):\n    if problem(i):\n        print(i)"
  },
  {
    "example_id": 442,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "percent = 100/5\nprint(percent)"
  },
  {
    "example_id": 443,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "39.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "n = 3 + 4*4 + 4*5\nprint(n)"
  },
  {
    "example_id": 444,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "172.0"
    ],
    "annotated_answers": [
      "777.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    if n == 0:\n        return 0\n    else:\n        return (n % base) + 10 * n_to_base_n(n // base, base)\n\ndef get_prime_factors(n):\n    prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n // i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n\ndef get_sum_of_prime_factors(n):\n    prime_factors = get_prime_factors(n)\n    sum = 0\n    for prime in prime_factors:\n        sum += prime\n    return sum\n\ndef solve_problem():\n    for i in range(100, 1000):\n        if get_sum_of_prime_factors(i) == 47:\n            return i\n    return -1\n\nprint(solve_problem())"
  },
  {
    "example_id": 445,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "num = 29 * 79 + 31 * 81\nprint(num % 10)"
  },
  {
    "example_id": 446,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45420244.0"
    ],
    "annotated_answers": [
      "338.0"
    ],
    "solution": "n = 235\nn = n_to_base_n(n, 7)\nm = 1324\nm = n_to_base_n(m, 5)\nprint(n+m)"
  },
  {
    "example_id": 447,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Define variables\na = 10\nb = 10\n\n# Find the units digit of their product\nproduct = a*b\nunits_digit = product % 4\nprint(units_digit)"
  },
  {
    "example_id": 448,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "remainder = (129**34 + 96**38) % 11\nprint(remainder)"
  },
  {
    "example_id": 449,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "n = 14\nm = 25\n\n# 6^(-1) = 1/6 mod m\n# 6^2 = 36 mod m\n\n# m is the modulus of the equation 6^(-1) = 36\n\n# (1/6) * 36 = 1 mod m\n\n# m = 25\n\nprint(m)"
  },
  {
    "example_id": 450,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "# The sum of four consecutive positive even integers is a perfect square. What is the least possible sum?\n# The sum of four consecutive positive even integers is a perfect square. What is the least possible sum?\n\nnumbers = [2, 4, 6, 8]\nsum_of_numbers = sum(numbers)\n\nif sum_of_numbers % 2 == 0:\n    print(sum_of_numbers)\nelse:\n    print(\"There is no such sum\")"
  },
  {
    "example_id": 451,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def convert_to_base_5(n):\n    return str(n)[::-1]\n\ndef get_sum_of_digits(n):\n    return sum([int(i) for i in convert_to_base_5(n)])\n\nprint(get_sum_of_digits(269))"
  },
  {
    "example_id": 452,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "11.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# The set of integers {2,4,10,x} has the property that the sum of any three members of the set plus 1 yields a prime number. What is the smallest possible value of x greater than 10?\n\n# \nn = 2\nm = 4\np = 10\nx = 11\n\n# \nsum_n_m_p_plus_1 = n + m + p + 1\n\n# \nif sum_n_m_p_plus_1 == 11:\n    print(\"The smallest possible value of x greater than 10 is 11\")\nelse:\n    print(\"The smallest possible value of x greater than 10 is not 11\")"
  },
  {
    "example_id": 453,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "residue = 0\nfor i in range(1, 13):\n    residue = (residue + i) % 13\nprint(residue)"
  },
  {
    "example_id": 454,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def superfactorial(n):\n    return np.prod(range(1, n+1))\n\ndef units_digit(n):\n    return superfactorial(n) % 10\n\nprint(units_digit(4))"
  },
  {
    "example_id": 455,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Find modulo 16 inverses of the first 8 positive odd integers\ninverses = [1, 15, 7, 13, 3, 9, 5, 11]\n\n# Sum modulo 16 inverses\nsum_inverses = sum(inverses)\n\n# Get residue modulo 16 of sum\nresidue = sum_inverses % 16\n\n# Print residue\nprint(residue)"
  },
  {
    "example_id": 456,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "44.0"
    ],
    "annotated_answers": [
      "45.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 77\n\ndef n_to_base_n(n, base):\n    return int(n)\n\ndef gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n\ndef solve_problem():\n    # number of cards\n    n = 100\n    # number of cards to remove\n    r = 1\n    # sum of the values of the remaining cards\n    sum_remaining = sum(range(1, n+1)) - r\n    # find the prime factorization of the sum\n    prime_factors = [p for p in range(1, int(math.sqrt(sum_remaining))+1) if sum_remaining % p == 0]\n    if len(prime_factors) == 0:\n        return None\n    else:\n        prime_factor = prime_factors[0]\n    # find the remainder of the sum divided by the prime factor\n    remainder = get_remainder(sum_remaining // prime_factor)\n    # find the number that was on the card that was removed\n    return n_to_base_n(remainder, prime_factor)\n\n# print the solution\nprint(solve_problem())"
  },
  {
    "example_id": 457,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "76.0"
    ],
    "solution": "print(321_7 - 321_5)"
  },
  {
    "example_id": 458,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "39.0"
    ],
    "solution": "a = 332\nb = 212\nc = 332-212\nprint(c)"
  },
  {
    "example_id": 459,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def get_remainder(n):\n    return n % 10\n\ndef n_to_base_n(n, base):\n    return int(n % base)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    if b == 0:\n        return a\n    else:\n        return lcm(b, a)\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\nn = 18**6\nprint(get_remainder(n))"
  },
  {
    "example_id": 460,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "52.0"
    ],
    "annotated_answers": [
      "52.0"
    ],
    "solution": "for i in range(101):\n    if -314159 % 101 == i:\n        print(i)"
  },
  {
    "example_id": 461,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 225**66\nb = 327**66\nremainder = a%17\nprint(remainder)"
  },
  {
    "example_id": 462,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "remainder = (5 + 10 + 15) % 7\nprint(remainder)"
  },
  {
    "example_id": 463,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "penteria_population = 137\nminutes = 506\npenteria_population_per_minute = 5\n\ninitial_population = penteria_population / (minutes / penteria_population_per_minute)\ninitial_population = int(initial_population)\nprint(initial_population)"
  },
  {
    "example_id": 464,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 2\nwhile (n < 18) and (n % 18!= 142857):\n    n += 1\nprint(n)"
  },
  {
    "example_id": 465,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "n = 5\nfactors = []\nfor i in range(1, n+1):\n    if n % i == 0:\n        factors.append(i)\nmax_odd_factor = 0\nfor factor in factors:\n    if factor % 2!= 0 and factor > max_odd_factor:\n        max_odd_factor = factor\nprint(max_odd_factor)"
  },
  {
    "example_id": 466,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "n = 9\nbase = 100\nresidue = n_to_base_n(n, base)\nprint(residue)"
  },
  {
    "example_id": 467,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "P = 2003\nb = 2005\nQ = P/2\nP_2 = P - 2\nP_2_div_2 = P_2/2\nP_2_div_2_mod_10 = P_2_div_2 % 10\nprint(P_2_div_2_mod_10)"
  },
  {
    "example_id": 468,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0",
      "28.0",
      "30.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "# Common divisors\n\n# 840\nnum_divisors = 0\nfor i in range(1, 841):\n    if 840 % i == 0:\n        num_divisors += 1\nprint(num_divisors)\n\n# 960\nnum_divisors = 0\nfor i in range(1, 961):\n    if 960 % i == 0:\n        num_divisors += 1\nprint(num_divisors)\n\n# 1200\nnum_divisors = 0\nfor i in range(1, 1201):\n    if 1200 % i == 0:\n        num_divisors += 1\nprint(num_divisors)"
  },
  {
    "example_id": 469,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "a = 19\nb = 18\nc = 17\n\nremainder = (2*a + b - c) % 19\nprint(remainder)"
  },
  {
    "example_id": 470,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1950.0"
    ],
    "annotated_answers": [
      "1950.0"
    ],
    "solution": "n = 2**2001*5**1950//4**27\nprint(len(str(n)))"
  },
  {
    "example_id": 471,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "240.0"
    ],
    "solution": "def number_of_tiles(n):\n    return n * (n + 1) // 2\n\n\ndef least_number_of_tiles(n):\n    for i in range(2, n):\n        if number_of_tiles(i) < n:\n            return i\n    return n\n\n\nn = 10\nprint(least_number_of_tiles(n))"
  },
  {
    "example_id": 472,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "for i in range(1000000000):\n    if i**2 == i and i**3 == i:\n        print(i)\n        break"
  },
  {
    "example_id": 473,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "59.0"
    ],
    "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_remainder(n):\n    return n % 100\n\ndef n_to_base_n(n, base):\n    digits = []\n    while n > 0:\n        digits.append(int(n % base))\n        n //= base\n    return digits[::-1]\n\ndef solve_problem():\n    for i in range(10, 100):\n        if is_prime(i):\n            digits = n_to_base_n(i, 10)\n            if digits[0] + digits[1] + digits[0] * digits[1] == i:\n                return i\n    return None\n\ndef main():\n    result = solve_problem()\n    if result is not None:\n        print(result)\n    else:\n        print(\"No solution found.\")\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 474,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.46153846153846156"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "fraction = 6/13\nprint(fraction)"
  },
  {
    "example_id": 475,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# \nn = 6\nb = 2\nans = n_to_base_n(n, b)\nprint(ans)"
  },
  {
    "example_id": 476,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "30.0"
    ],
    "annotated_answers": [
      "352.0"
    ],
    "solution": "# Calculate number of trees needed to plant eight rows\n# 8 rows of trees = 8 x 8 = 64 trees\n\n# Calculate number of trees needed to plant nine rows\n# 9 rows of trees = 9 x 9 = 81 trees\n\n# Calculate number of trees needed to plant ten rows\n# 10 rows of trees = 10 x 10 = 100 trees\n\n# Calculate total number of trees needed\n# 64 + 81 + 100 = 245 trees\n\n# Calculate the least number of trees needed to plant all rows\n# 245 / 8 = 30 trees\n\n# Print the least number of trees needed to plant all rows\nprint(30)"
  },
  {
    "example_id": 477,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "60.0"
    ],
    "solution": "n = 1\nwhile True:\n    divisors = [d for d in range(1, n+1) if n % d == 0]\n    product = np.prod(divisors)\n    if product == n**6:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 478,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = 20_7\nprint(n%11)"
  },
  {
    "example_id": 479,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 0\nwhile n < 10:\n    if n == 0:\n        print(n)\n    else:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 480,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "step = 139 % 11\nprint(step)"
  },
  {
    "example_id": 481,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "N = 100\nsum = 0\nfor i in range(N):\n    sum += 2**i\nremainder = sum % 7\nprint(remainder)"
  },
  {
    "example_id": 482,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "sum = (33818**2 + 33819**2 + 33820**2 + 33821**2 + 33822**2) % 17\nprint(sum)"
  },
  {
    "example_id": 483,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "0.0",
      "4.0",
      "9.0",
      "5.0",
      "0.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def base11_factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n\ndef base11_digits(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 11)\n        n //= 11\n    return digits\n\nn = 10\nprint(base11_digits(base11_factorial(n)))"
  },
  {
    "example_id": 484,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "A = 1\nB = 2\nC = 3\nsum = A+B+C\nprint(sum)"
  },
  {
    "example_id": 485,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0"
    ],
    "annotated_answers": [
      "127.0"
    ],
    "solution": "for i in range(26, 100):\n    if i % 25 == 2:\n        print(i)\n        break"
  },
  {
    "example_id": 486,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def count_common_digits(base_7, base_8):\n    count = 0\n    for digit in base_7:\n        if digit in base_8:\n            count += 1\n    return count\n\ndef base_7_representation(n):\n    return str(n)[::-1]\n\ndef base_8_representation(n):\n    return str(n)[::-1]\n\ndef solve():\n    base_7 = base_7_representation(629)\n    base_8 = base_8_representation(629)\n    count = count_common_digits(base_7, base_8)\n    return count\n\nprint(solve())"
  },
  {
    "example_id": 487,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "2045.0"
    ],
    "solution": "print(413_5 // 2_5)"
  },
  {
    "example_id": 488,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = 8\nn %= 17\nprint(n)"
  },
  {
    "example_id": 489,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "expression = '8888'\nsum = 0\nfor digit in expression:\n    sum += int(digit)\nprint(sum)"
  },
  {
    "example_id": 490,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2136.05"
    ],
    "annotated_answers": [
      "499.0"
    ],
    "solution": "plumber_cost = 242.5 * 3.5 + 367.8 * 3.5\nprint(plumber_cost)"
  },
  {
    "example_id": 491,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# \nremainder = 5**30 % 7\nprint(remainder)"
  },
  {
    "example_id": 492,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# a number that is divisible by 5 with a remainder of 3\nn = 15\n\n# the remainder when twice the number is divided by 5\ntwice_n = 2*n\nremainder = twice_n % 5\nprint(remainder)"
  },
  {
    "example_id": 493,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "n = 2**5*3**6\nperfect_squares = 0\nfor i in range(1, int(math.sqrt(n))+1):\n    if i**2 == n % (i**2):\n        perfect_squares += 1\nprint(perfect_squares)"
  },
  {
    "example_id": 494,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "321.0"
    ],
    "annotated_answers": [
      "621.0"
    ],
    "solution": "n = 123\nremainder = get_remainder(n)\nbase = 10\nprint(n_to_base_n(n, base))"
  },
  {
    "example_id": 495,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "201.0"
    ],
    "solution": "# Solve the system of linear equations\na = 13\nb = 14\nn = 100\n\n# Find the number of planets\nnum_planets = int(n * (a - b) / (a * b - b))\n\n# Print the answer\nprint(num_planets)"
  },
  {
    "example_id": 496,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.045454545454545456",
      "0.04545454545454546",
      "0.04545454545454546"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 2003\na, b = 2, 11\nab = a*b\ninvertible = (ab)**(-1) % n\nprint(invertible)\n\nremainder = (a**(-1) + b**(-1)) * (a+b)**(-1)\nprint(remainder)\n\nn_remainder = remainder % n\nprint(n_remainder)"
  }
]