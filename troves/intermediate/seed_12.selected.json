[
  {
    "example_id": 0,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "x = 2\nprint(2 + 8)"
  },
  {
    "example_id": 1,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "k = 0\nprint(k)"
  },
  {
    "example_id": 2,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1556.0",
      "4.0",
      "1.0",
      "5.0",
      "2.0",
      "1.0",
      "5.0",
      "2.0",
      "40.0",
      "1.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "from sympy import symbols, I\n\n# define complex variable\nw = 1 - 5*I\n\n# evaluate expression\nexpression = abs(2*w**2 - 4*w - 30)\nprint(expression)"
  },
  {
    "example_id": 3,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "9.0",
      "9.0",
      "10.0"
    ],
    "annotated_answers": [
      "195.0"
    ],
    "solution": "# Find the first term of the sequence\nx = symbols('x')\na = x + 1\nb = 3*x + 3\nc = 5*x + 5\nd = I*x + I\n\n# Find the sum of the first, last, and middle terms of the sequence\nprint(a + b + c + d)\n\n# Find the sum of the first, last, and middle terms of the new sequence\nprint(a + b + c + d + 1)"
  },
  {
    "example_id": 4,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "5.0",
      "3.0",
      "6.0",
      "20.0",
      "15.0",
      "20.0",
      "2.0",
      "17.0",
      "30.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "x = symbols('x')\neq = 17*log(30, x) - 3*log(x, 5) + 20*log(x, 15) - 3*log(x, 6) + 20*log(x, 2)\nprint(eq)"
  },
  {
    "example_id": 5,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "f = sympy.Function('f')\nx = symbols('x')\neq = f(x) - f(x + 1) - f(x - 1)\nsol = solve(eq, f(15))\nf_15 = sol[0]\nsol = solve(eq, f(20))\nf_20 = sol[0]\nf_20152015 = f_20152015 = f_15*f_20152015 + f_20152015 + f_20152015\nprint(f_20152015)"
  },
  {
    "example_id": 6,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "# Define symbols\nv, w, x, y, z = symbols('v w x y z')\n\n# Create magic square\nsquare = [\n    [25, v, 21, 18],\n    [z, x, y, 24],\n    [w, 24, v, 21],\n    [y, 18, 24, z]\n]\n\n# Find sum of each row, column, and diagonal\nrow_sum = 0\nfor row in square:\n    row_sum += sum(row)\n\ncol_sum = 0\nfor col in zip(*square):\n    col_sum += sum(col)\n\ndiag_sum = 0\nfor diag in (diagonal(square), diagonal(square, 1)):\n    diag_sum += sum(diag)\n\n# Find y + z\ny_z = solve(row_sum - col_sum - diag_sum, y + z)\nprint(y_z[0])"
  },
  {
    "example_id": 7,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "16.0",
      "2.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "a = sympy.sqrt(2)**3\nb = sympy.sqrt(2)\nc = 2 - 2*b - a\nprint(a*b*c)"
  },
  {
    "example_id": 8,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000.0"
    ],
    "annotated_answers": [
      "177.0"
    ],
    "solution": "def f(x):\n    return x\n\nf_values = []\nfor x in range(1000):\n    f_values.append(f(x))\n\nf_values = set(f_values)\nprint(len(f_values))"
  },
  {
    "example_id": 9,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "3.0",
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "m, n = symbols('m n')\neq = 3*m + 4*n - 100\nsol = solve(eq, (m, n))\nprint(sol)"
  },
  {
    "example_id": 10,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "r, s = symbols('r s')\nprint((r/s)**3)"
  },
  {
    "example_id": 11,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "12.0",
      "2.0",
      "36.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "z, w = symbols('z w')\neq1 = z + 20*I/w - 5 - I\neq2 = w + 12*I/z - 4 + 10*I\neq12 = [eq1, eq2]\nsolve(eq12, z, w)"
  },
  {
    "example_id": 12,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "0.0",
      "-5.0",
      "1.0",
      "-5.0",
      "2.0",
      "-5.0",
      "3.0",
      "-5.0",
      "4.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "a = -5\nwhile a <= 5:\n    b = -5\n    while b <= 5:\n        if abs(a + b) <= 5:\n            print(a, b)\n        b += 1\n    a += 1"
  },
  {
    "example_id": 13,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nexpr = (4*a**(1/2) + 6*b**(1/2) + 12*c**(1/2))/a**(1/2)\nmaximum = expr.subs([(a, 1), (b, 1), (c, 1)])\nprint(maximum)"
  },
  {
    "example_id": 14,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import symbols, factor, poly\n\nx = symbols('x')\np = x**8 + 3*x**4 - 4\nfactors = factor(p).args\nsum = 0\nfor factor in factors:\n    sum += poly(factor).LC()\nprint(sum)"
  },
  {
    "example_id": 15,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "u, v = symbols('u v')\neq = u*v - 10\nreal_part = sympy.re(u)\nimaginary_part = sympy.im(u)\nsolve_real = sympy.solve(real_part, u)\nsolve_imaginary = sympy.solve(imaginary_part, u)\nprint(len(solve_real))\nprint(len(solve_imaginary))"
  },
  {
    "example_id": 16,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0",
      "-4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = 4*a + 3*b + c**3 / (a - b) / b\nsol = solve(eq, c)\nprint(sol)"
  },
  {
    "example_id": 17,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a, b = symbols('a b')\neq1 = a + b - 5\neq2 = a**2 + b**2 - 15\na_value, b_value = solve([eq1, eq2], [a, b])\nprint(a_value[0]**3 + b_value[0]**3)"
  },
  {
    "example_id": 18,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = symbols('x')\nlogx = log(x**2)\ndomain = solve(logx, x)\nprint(domain[0] + domain[1])"
  },
  {
    "example_id": 19,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1007.5"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "def average(S):\n    return sum(S) / len(S)\n\nS = range(2016)\nprint(average(S))"
  },
  {
    "example_id": 20,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "k, x = symbols('k x')\neq = k*x**4 + 9*x**3 + k*x**2 + 32*x - 11\nremainder = sympy.rem(eq, x + 5)\nk_value = solve(remainder - 4, k)\nprint(k_value[0])"
  },
  {
    "example_id": 21,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5490858940.0"
    ],
    "annotated_answers": [
      "2039191.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nsum = 0\nfor i in range(-2019, 2020):\n    sum += f(i)\n\nprint(sum)"
  },
  {
    "example_id": 22,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z1, z2 = symbols('z1 z2')\neq = (z1/z2 + z2/z1 - 1)\nremainder = sympy.rem(eq, z1 - z2)\nprint(remainder)"
  },
  {
    "example_id": 23,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "2.0",
      "3.0",
      "5.0",
      "2.0",
      "7.0",
      "2.0",
      "3.0",
      "5.0",
      "2.0",
      "2.0",
      "1.0",
      "7.0",
      "2.0",
      "3.0",
      "5.0",
      "2.0",
      "-2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq = (sqrt(3)*a + 1/(b + 1/(c + 1/(d + 1/I))))**(1/3) - 2\nsolve(eq, b)"
  },
  {
    "example_id": 24,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "576.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "print(sum(range(1, 49, 2)))"
  },
  {
    "example_id": 25,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = symbols('z')\neq = abs(z + 5 - 3*I) + abs(z - 7 + 2*I)\nprint(eq)"
  },
  {
    "example_id": 26,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x, y, z = 1, 1, 1\nexpression = x**3 + 2*y**3 + 4*z**3\nexpression = expression / (x*y*z)\nprint(expression)"
  },
  {
    "example_id": 27,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "51.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y, z, w = symbols('x y z w')\neq1 = 2*y - x - 17/x\neq2 = 2*z - y - 17/y\neq3 = 2*w - z - 17/z\neq4 = 2*x - w - 17/w\nsolutions = solve([eq1, eq2, eq3, eq4], [x, y, z, w])\nprint(solutions)"
  },
  {
    "example_id": 28,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "n = 100\nk = 0\nwhile n > 1:\n    if n % 2 == 1:\n        k += 1\n    n = n // 2\nprint(k)"
  },
  {
    "example_id": 29,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-624.9999999999998"
    ],
    "annotated_answers": [
      "29800.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = a**2*b + b**2*c + c**2*a - a*b**2 - b*c**2 - c*a**2\nconstraint = And(1 <= a, 1 <= b, 1 <= c, a <= 100, b <= 100, c <= 100)\nsol = solve(eq, [a, b, c], constraint)\nprint(len(sol))"
  },
  {
    "example_id": 30,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "2.0",
      "14.0",
      "65.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nexpr = sqrt(16 - x**2) + sqrt(25 - y**2) + sqrt(36 - z**2)\nconstraint = x + y + z - 9\nsolve(constraint, x, y, z)\nmaximum = expr.subs(dict(zip([x, y, z], [9, 9, 9])))\nprint(maximum)"
  },
  {
    "example_id": 31,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "-71.0"
    ],
    "solution": "from sympy import Symbol, Poly, sqrt\n\nx = Symbol('x')\n\n# polynomial\nP = Poly(\n    x**8 +\n    x**7 +\n    x**6 +\n    x**5 +\n    x**4 +\n    x**3 +\n    x**2 +\n    x + 1,\n    x\n)\n\n# root\nroot = sqrt(2) + sqrt(3) + sqrt(5)\n\n# find P(1)\nP_1 = P.subs(x, 1)\n\n# print\nprint(P_1)"
  },
  {
    "example_id": 32,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "341.0"
    ],
    "solution": "a, b = symbols('a b')\neq = (x**2 + x + 1)*P(x) - (x**512 + x**256 + 1)\n\n# find the number of nonzero coefficients\ncoeff_count = 0\nfor term in eq.args:\n    if term.is_Number:\n        coeff_count += 1\nprint(coeff_count)"
  },
  {
    "example_id": 33,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31249982499991.0",
      "125000000000.0"
    ],
    "annotated_answers": [
      "250.0"
    ],
    "solution": "import sympy\n\nprint(sympy.nsimplify((1/((5**4 + 1)**(1/4) - (5**4 - 1)**(1/4)))))"
  },
  {
    "example_id": 34,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "102.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "# define the expansion\nexpr = (x + 1)*(x + 3)*(x + 5)*(x + 7)*(x + 9)*(x + 11)*(x + 13)*(x + 15)*(x + 17)*(x + 19)*(x + 21)*(x + 23)*(x + 25)*(x + 27)*(x + 29)*(x + 31)*(x + 33)*(x + 35)*(x + 37)*(x + 39)*(x + 41)*(x + 43)*(x + 45)*(x + 47)*(x + 49)\n\n\n# evaluate the coefficient of x^49\nprint(expr.coeff(x, 49))"
  },
  {
    "example_id": 35,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = symbols('z')\neq = z**5 - 1\nz_value = solve(eq, z)\nprint(z_value[0] + z_value[0]**(-1) + z_value[0]**2 + z_value[0]**(-2))"
  },
  {
    "example_id": 36,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nf = (1/a + 1/b + 1/c)/(1/(a + b) + 1/(a + c) + 1/(b + c))\nf_value = f.limit(a, 0)\nprint(f_value)"
  },
  {
    "example_id": 37,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = symbols('a')\nx1, x2 = symbols('x1 x2')\n\neq1 = x1**2 + a*x1 + 1\neq2 = x2**2 - x2 - a\n\nsol = solve([eq1, eq2], [x1, x2])\nprint(sol)"
  },
  {
    "example_id": 38,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a, b = symbols('a b')\neq = a*b - a + b\neq1 = solve(eq, a)\neq2 = solve(eq, b)\nprint(eq1[0] + eq2[0] - eq)"
  },
  {
    "example_id": 39,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "c = 0\nprint(c)"
  },
  {
    "example_id": 40,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import symbols, simplify, factor\nx = symbols('x')\nexpr = (x + 3)**5 * (x + 2)**8 * (x + 1)**4 * (x - 7)**2 / ( (x + 3)**11 * (x + 2)**6 * (x + 1)**4 * x**2)\nexpr = simplify(expr)\nprint(expr)"
  },
  {
    "example_id": 41,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8778.0"
    ],
    "annotated_answers": [
      "5120.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nexpr = (1 + 5*z)*(4*z + 3*x)*(5*x + 6*y)*(y + 18)\nexpr = expr.expand()\nexpr = expr.subs({x: 1, y: 1, z: 1})\nresult = expr.limit(x, 0)\nprint(result)"
  },
  {
    "example_id": 42,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "f = lambda n: 1 if n == 0 else f(n-1) + 1\nprint(f(15))"
  },
  {
    "example_id": 43,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "6.0",
      "23.0",
      "6.0",
      "7.0",
      "6.0",
      "23.0",
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\neq = 3*x + 2 / (x - 1)\nsolve_eq = solve(eq - 4, x)\nprint(solve_eq)"
  },
  {
    "example_id": 44,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "9.0",
      "1.0",
      "1.0",
      "4.0",
      "16.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 3\nprint(x, x**2)\nx = 1\nprint(x, x**2)\nx = 4\nprint(x, x**2)"
  },
  {
    "example_id": 45,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "x = 0\nprint(x)"
  },
  {
    "example_id": 46,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 8\nb = 4\nh = -8\nk = 16\n\nexpression = h + k + a + b\nprint(expression)"
  },
  {
    "example_id": 47,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define the function\nf = 9*x**2*sympy.sin(x)**2 + 4/x*sympy.sin(x)\n\n# Find the minimum value\nf_min = f.subs(x, 0)\n\n# Find the minimum value of the function\nprint(f_min)"
  },
  {
    "example_id": 48,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0",
      "10.0",
      "20.0",
      "10.0",
      "20.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "z, w = symbols('z w')\nexpr = abs(w - z)\nexpr = expr.subs(z, 2*sympy.exp(sympy.I*sympy.pi/4))\nexpr = expr.subs(w, 5*sympy.exp(sympy.I*sympy.pi/5))\nexpr = expr.subs(sympy.I, sympy.sqrt(-1))\nprint(expr)"
  },
  {
    "example_id": 49,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "i, j = symbols('i j')\nf = lambda i, j: mod_5(j + 1) if i == 0 and 0 <= j <= 4 else f(i - 1, 1) if i >= 1 and j == 0 else f(i - 1, f(i, j - 1))\nprint(f(2015, 2))"
  },
  {
    "example_id": 50,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "840.0"
    ],
    "solution": "for k in range(1, 29):\n    sum = 0\n    for i in range(k, 29):\n        sum += 1/i**2 + 1/i\n    if sum == 1/29:\n        print(k+1)"
  },
  {
    "example_id": 51,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 2**(1/3) * 4**(1/3)\nprint(x)"
  },
  {
    "example_id": 52,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "199.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "k = symbols('k')\na, b = symbols('a b')\neq1 = sympy.binomial(10**9, k) < sympy.binomial(10**9 + 1, k - 1)\neq2 = sympy.binomial(10**9, k) > sympy.binomial(10**9 + 1, k - 1)\nsolve(eq1, k)\nk_value = solve(eq2, k)\nprint(k_value[0])"
  },
  {
    "example_id": 53,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1651.0"
    ],
    "annotated_answers": [
      "277.0"
    ],
    "solution": "x = symbols('x')\np = x**3 + 4*x**2 - 12*x - 32\np_value = p.subs(x, 11)\nprint(p_value)"
  },
  {
    "example_id": 54,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "2017.0"
    ],
    "annotated_answers": [
      "-2016.0"
    ],
    "solution": "x, A, B = symbols('x A B')\neq = x**2017 + A*x + B\ndivisor = (x + 1)**2\neq = eq.subs(x, x + 1)\neq = eq.subs(x, x + 2)\nsol = solve(eq, B)\nprint(sol[0])"
  },
  {
    "example_id": 55,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = abs(a*x**2 + b*x + c)\nconstraint = eq <= 1\nsol = solve(constraint, (a, b, c))"
  },
  {
    "example_id": 56,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "54.0",
      "6.0"
    ],
    "annotated_answers": [
      "-108.0"
    ],
    "solution": "from sympy import symbols, solve, Min\nx, y = symbols('x y')\nexpr = x**6 + y**6 - 54*x*y\nmin_val = Min(expr)\nprint(min_val)"
  },
  {
    "example_id": 57,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2700.0",
      "75.0"
    ],
    "annotated_answers": [
      "450.0"
    ],
    "solution": "a, h = symbols('a h')\nmean_a = 2700\nmean_h = 75\neq = a*h\nsol = solve(eq - mean_a, a)\na_value = sol[0]\nmean_a = a_value*h\neq = a*h\nsol = solve(eq - mean_h, h)\nh_value = sol[0]\nprint(a_value)\nprint(h_value)"
  },
  {
    "example_id": 58,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36100.0"
    ],
    "annotated_answers": [
      "41230.0"
    ],
    "solution": "total = 0\nfor i in range(1, 20):\n    total += i*i*i\nprint(total)"
  },
  {
    "example_id": 59,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\neq = log(x, 2) + log(x**2, 2) - 6\nsolve_eq = solve(eq, x)\nprint(solve_eq[0])"
  },
  {
    "example_id": 60,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "z1 = 2j\nz2 = 3j\nz3 = 4j\n\nexpression = (abs(z1 - z2)**2 + abs(z1 - z3)**2 + abs(z2 - z3)**2)\n\nprint(expression)"
  },
  {
    "example_id": 61,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Number of ordered pairs of real numbers that satisfy (x + y)^2 = (x + 1)(y - 1)\n# (x + y)^2 = (x + 1)(y - 1)\n# x^2 + 2xy + y^2 = x^2 + x + y - 1\n# 2xy = 2x + y - 1\n# xy = x + y - 1\n# x = 1, y = 2\n# x = 2, y = 1\nprint(\"Number of ordered pairs of real numbers that satisfy (x + y)^2 = (x + 1)(y - 1) are:\", 2)"
  },
  {
    "example_id": 62,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "10.0",
      "2.0",
      "52.0",
      "6.0",
      "72.0",
      "15.0",
      "234.0",
      "10.0",
      "1003.0"
    ],
    "annotated_answers": [
      "936.0"
    ],
    "solution": "from sympy import sqrt, symbols\na, b, c = symbols('a b c')\nnum = sqrt(104*sqrt(6) + 468*sqrt(10) + 144*sqrt(15) + 2006)\nden = a*sqrt(2) + b*sqrt(3) + c*sqrt(5)\nsol = solve(den - num, [a, b, c])\nprint(sol[0][0]*sol[0][1]*sol[0][2])"
  },
  {
    "example_id": 63,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = symbols('n')\nx = symbols('x')\nf = (x + 3)*(x - 7)**5/(x - 1)*(x - 7)**n\nhole = f.subs(x, 7)\nprint(solve(hole - 0, n))"
  },
  {
    "example_id": 64,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "9.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "degree = 10\nx = symbols('x')\np = sum(x**i for i in range(degree))\n\np_value = solve(p - 1, x)\nprint(p_value)\n\np_value = solve(p - 3, x)\nprint(p_value)\n\np_value = solve(p - 5, x)\nprint(p_value)\n\nprint(len(set(p_value)))"
  },
  {
    "example_id": 65,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "231.0",
      "231.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# define variables\na = 2*I\nb = 5\n\n\n# find the modulus\nmodulus = abs(a + b)\nprint(modulus)"
  },
  {
    "example_id": 66,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "a = 1\nb = 2\n\nfor i in range(99):\n    a = a**2 - a*b\n    b = a*b + 1\n\nprint(a)"
  },
  {
    "example_id": 67,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "49.0",
      "4.0",
      "48.0",
      "6.0",
      "47.0",
      "8.0",
      "46.0",
      "10.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "# Initialize variables\np = symbols('p')\nx = symbols('x')\n\n# Define the polynomial\np = a*x**3 + b*x**2 - 6*x - 5\n\n# Solve for a and b\nsol = solve([p(-3) == -6, p(4) == 8, p(5) == 10, p(7) == 15], [a, b])\n\n# Evaluate the polynomial\np_value = p(12)\n\n# Print the result\nprint(p_value)"
  },
  {
    "example_id": 68,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "3.0",
      "5.0",
      "2.0",
      "16.0",
      "8.0",
      "2.0",
      "3.0",
      "6.0",
      "3.0",
      "5.0",
      "2.0",
      "16.0",
      "8.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "from sympy import *\ny = symbols('y')\nf = 6*y**3 + 5*y**2 - 16*y + 8\ng = 2*y + 3\nq, r = divmod(f, g)\nprint(q, r)"
  },
  {
    "example_id": 69,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import symbols, conjugate, simplify, factorial, arg, acos, sin, cos, pi, I\na, b, c, d = symbols('a b c d')\neq = (a + b) * (a + c) * (a + d) * (b + c) * (b + d) * (c + d)\neq = simplify(eq)\narg_a = arg(a)\narg_b = arg(b)\narg_c = arg(c)\narg_d = arg(d)\n\n# Calculate the angle between the vectors\nangle_ab = acos(cos(arg_a - arg_b))\nangle_ac = acos(cos(arg_a - arg_c))\nangle_ad = acos(cos(arg_a - arg_d))\nangle_bc = acos(cos(arg_b - arg_c))\nangle_bd = acos(cos(arg_b - arg_d))\nangle_cd = acos(cos(arg_c - arg_d))\n\n# Calculate the absolute value of the complex numbers\nabs_a = abs(a)\nabs_b = abs(b)\nabs_c = abs(c)\nabs_d = abs(d)\n\n# Calculate the maximum value\nmax_value = abs_a * abs_b * abs_c * abs_d * sin(angle_ab) * sin(angle_ac) * sin(angle_ad) * sin(angle_bc) * sin(angle_bd) * sin(angle_cd)\nprint(max_value)"
  },
  {
    "example_id": 70,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4561.0"
    ],
    "solution": "f = lambda x: x**2\nf(19)\n\n\nf(94)"
  },
  {
    "example_id": 71,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "81.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "expression = int((3**100 + 2**100) / (3**96 + 2**96))\nprint(expression)"
  },
  {
    "example_id": 72,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "81.0",
      "2.0",
      "81.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "c = 2\nf(c) = 3c^2 - 36c + 7\nf'(c) = 6c - 36\nf'(c) = 0\nc = 2"
  },
  {
    "example_id": 73,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "108.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = 2/x - y/3\neq2 = x/y - 2/x\neq3 = x/y - 3/y\nsolutions = solve([eq1, eq2, eq3], [x, y])\nx_value = solutions[x]\nprint(x_value[0])"
  },
  {
    "example_id": 74,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "13.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x = symbols('x')\neq1 = x**2 - 13*x + 22\neq2 = x**2 - 8*x + 12\nsol = eq1.subs(eq2, 0)\nsol = sol.factor()\nsum_roots = 0\nfor root in sol.args:\n    sum_roots += root\nprint(sum_roots)"
  },
  {
    "example_id": 75,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "68.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "# Define x_1\nx_1 = 97\n\n# Define x_n\nx_n = x_n/x_n-1\n\n# Calculate x_1 x_2... x_8\nx_1x_2x_3x_4x_5x_6x_7x_8 = x_1\n\n# Print x_1 x_2... x_8\nprint(x_1x_2x_3x_4x_5x_6x_7x_8)"
  },
  {
    "example_id": 76,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1000000.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 1\nwhile True:\n    if f(n) > 10**6:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 77,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "272.0"
    ],
    "annotated_answers": [
      "272.0"
    ],
    "solution": "from sympy import binomial\nfrom sympy import Sum\nn = symbols('n', integer=True)\ns = Sum(binomial(n, 15)/binomial(n, 17), (n, 17, oo))\nprint(s.doit())"
  },
  {
    "example_id": 78,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x, y = symbols('x y')\nf = (8*x**3 + 27*y**3) / (2*x + 3*y)\nf_simplified = f.expand()\na, b, c = f_simplified.as_numer_denom()\nprint(a + b + c)"
  },
  {
    "example_id": 79,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "-3.0",
      "6.0",
      "2048.0",
      "2.0",
      "-3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nexpr = x + 108 / (x - y)**3 * (y - z)**2 * z\nmin_value = solve(expr, x, dict=True)[0][x]\nprint(min_value)"
  },
  {
    "example_id": 80,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from itertools import combinations\n\ndef log_product(nums, base):\n    return sum([num * log(num, base) for num in nums])\n\ndef count_tuples(nums):\n    count = 0\n    for a, b, c, d in combinations(nums, 4):\n        if log_product([a, b, c, d], 10) == 2005:\n            count += 1\n    return count\n\nnums = [2, 3, 5, 7]\nprint(count_tuples(nums))"
  },
  {
    "example_id": 81,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "53.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = symbols('z')\nz2 = z**2 + z + 1\nprint(z2**53)"
  },
  {
    "example_id": 82,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = (7-4)/(7-4)\nprint(a)"
  },
  {
    "example_id": 83,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "110.0",
      "110.0",
      "77.0",
      "77.0",
      "70.0",
      "70.0",
      "66.0",
      "66.0",
      "55.0",
      "55.0"
    ],
    "annotated_answers": [
      "66673.0"
    ],
    "solution": "n = 12\ns = 0\nfor i in range(n):\n    for j in range(i, n):\n        s += (1/sympy.sqrt(i+1))*(1/sympy.sqrt(j+1))\nprint(s)"
  },
  {
    "example_id": 84,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "533.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "a = 3\nb = 2\nc = 4\nd = 5\n\nexpression = (a*d - b*c)**2 + (a*c + b*d)**2\nprint(expression)"
  },
  {
    "example_id": 85,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "3.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "x = symbols('x')\neq = (x**7 + 32*x**2 + 128)/x**3\neq_min = solve(eq, x)\nprint(eq_min[0])"
  },
  {
    "example_id": 86,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "p = symbols('p')\neq1 = p(1) - 210\neq2 = (x + 10)*p(2*x) - 8*(x - 4)*p(x + 6)\neq = eq1 - eq2\np_value = solve(eq, p)\nprint(p_value[0])"
  },
  {
    "example_id": 87,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a_1 = 1\na_2 = 1/a_1\na_3 = a_1\na_4 = 1/a_3\na_5 = 1/a_4\na_6 = 1/a_5\na_7 = 1/a_6\na_8 = 1/a_7\na_9 = 1/a_8\nprint(a_9**9)"
  },
  {
    "example_id": 88,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "f = lambda x: x/2 + 3/2\nf_inv = lambda x: 2*x - 3\nprint(f(f_inv(3)))"
  },
  {
    "example_id": 89,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 101):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 90,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "for n in range(1, 1000000):\n    factors = []\n    for a in range(1, n):\n        for b in range(1, n):\n            if (n % a == 0) and (n % b == 0):\n                factors.append(a)\n                factors.append(b)\n                if len(factors) == 2:\n                    print(n)\n                    break\n    if len(factors) == 2:\n        print(n)\n        break"
  },
  {
    "example_id": 91,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "48.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x, y = symbols('x y')\nexpr = (x+y)**2 + (x-y)**2\neq = expr - 2\neq = eq.expand()\neq = eq.subs(x, 3)\neq = eq.subs(y, 4)\neq = eq.simplify()\nprint(eq)"
  },
  {
    "example_id": 92,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "21.0",
      "36.0",
      "32.0",
      "720.0"
    ],
    "annotated_answers": [
      "508.0"
    ],
    "solution": "a, b, c, d, e, f = symbols('a b c d e f')\neq1 = a + b + c + d + e + f\neq2 = a + 2*b + 3*c + 4*d + 2*e + 2*f\neq3 = a + 3*b + 6*c + 9*d + 4*e + 6*f\neq4 = a + 4*b + 10*c + 16*d + 8*e + 24*f\neq5 = a + 5*b + 15*c + 25*d + 16*e + 120*f\neqs = [eq1, eq2, eq3, eq4, eq5]\nsolve(eqs, [a, b, c, d, e, f])\nprint(a + 6*b + 21*c + 36*d + 32*e + 720*f)"
  },
  {
    "example_id": 93,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.9238795325112867",
      "0.3826834323650897",
      "-0.29289321881345254",
      "0.7071067811865475",
      "0.3826834323650897",
      "0.9238795325112866",
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# using the fact that the polynomial factors as (x^2 + ax + a^2 - 1)(x^2 - a^2)\n# and the roots are complex conjugates\nimport cmath\n\na = cmath.sqrt(cmath.exp(1j*cmath.pi/4))\nprint(a)\nprint(a**2 - 1)\nprint(a**3)\nprint(a**2 - a**2)"
  },
  {
    "example_id": 94,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols('x')\neq = x**3 - 3*x - 5\nroots = solve(eq)\na, b, c = roots\nabc = a*b*c\nprint(abc)"
  },
  {
    "example_id": 95,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.460461017585218",
      "84",
      "1050.0"
    ],
    "annotated_answers": [
      "1052.0"
    ],
    "solution": "from sympy import binomial\nn = 1000\nk = 50\nprint(binomial(n, k))\nprint(n + k)"
  },
  {
    "example_id": 96,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def is_root(x, a, b):\n    return x**2 + a*x + b == 0\n\ndef find_roots(a, b):\n    count = 0\n    for x in range(-100, 100):\n        if is_root(x, a, b):\n            count += 1\n    return count\n\nfor a in range(-100, 100):\n    for b in range(-100, 100):\n        print(find_roots(a, b))"
  },
  {
    "example_id": 97,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-151.0",
      "3.0",
      "-904.0",
      "9.0",
      "-9517.0",
      "108.0",
      "19359257.0",
      "12.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "-48.0"
    ],
    "solution": "x = symbols('x')\nf = x**4 + 2*x**3 - 2*x**2 - 6*x - 154\nroots = solve(f, x)\nf_value = f.subs(x, roots[0])\nprint(f_value)"
  },
  {
    "example_id": 98,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "8.0",
      "56.0",
      "6.0",
      "2.0",
      "6.0",
      "140.0",
      "4.0",
      "4.0",
      "4.0",
      "56.0",
      "2.0",
      "6.0",
      "2.0",
      "2.0",
      "8.0"
    ],
    "annotated_answers": [
      "-81.0"
    ],
    "solution": "from sympy import symbols, expand, simplify\n\na, b = symbols('a b')\n\nexpr = (a + b*I)**8 + (a - b*I)**8\nexpr = expand(expr)\nexpr = simplify(expr)\nprint(expr)"
  },
  {
    "example_id": 99,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 11\nf = 24\nr = (f * (n-1)) / (f * (n-1) - f * (n-2))\nprint(r)"
  },
  {
    "example_id": 100,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "expr = 0\nfor i in range(1, 101):\n    expr += i\nprint(expr)"
  },
  {
    "example_id": 101,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "495.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\neq = (5*x - 7)/((x - 1)**3)\nA, B, C = symbols('A B C')\nsolution = solve(eq - (A/(x - 1) + B/(x - 1)**2 + C/(x - 1)**3), [A, B, C])\nprint(solution)"
  },
  {
    "example_id": 102,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a, b = symbols('a b')\neq1 = a + 10*b/(a**2 + b**2) - 5\neq2 = b + 10*a/(a**2 + b**2) - 4\neqs = [eq1, eq2]\nsol = solve(eqs, [a, b])\nprint(sol[0][0] + sol[0][1])"
  },
  {
    "example_id": 103,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "0.0",
      "0.0",
      "0.0",
      "-65.0",
      "0.0",
      "0.0",
      "-65.0",
      "-0.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "import cmath\n\na = 0\nb = 0\nr = 0\ns = 0\n\ndef P(x):\n    return x**3 - a*x**2 + b*x - 65\n\nfor a in range(1, 10):\n    for b in range(1, 10):\n        r = 0\n        s = 0\n        while cmath.polar(P(r + s*1j))[0] <= 1:\n            r += 1\n        print(\"{}, {}\".format(a, b))\n        print(\"{}, {}\".format(r, s))\n        print(\"{}, {}\".format(r+s*1j, P(r+s*1j)))\n        print(\"{}, {}\".format(r+s*1j, P(r+s*1j).conjugate()))\n        print(\"{}, {}\".format(r+s*1j, P(r+s*1j).conjugate()*P(r+s*1j)))\n        print()"
  },
  {
    "example_id": 104,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x + y - 2\neq2 = x**5 + y**5 - 82\nsol = solve([eq1, eq2], [x, y])\nprint(sum(sol[i][0]**2 + sol[i][1]**2 for i in range(len(sol))))"
  },
  {
    "example_id": 105,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5",
      "-0.5"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import cmath\n\na = 1 - 3j\nb = 2 + 4j\n\nexpression = a/b\nprint(expression)"
  },
  {
    "example_id": 106,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "2.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = symbols('x')\ng = x**3 - 14*x**2 + 18*x + 72\nprint(g.factor())"
  },
  {
    "example_id": 107,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "4.0",
      "10.0",
      "2.0",
      "4.0",
      "26.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = 2*x**2 + 2*y**2 + 5*z**2 - 2*x*y - 4*y*z - 4*x - 2*z + 15\nmin_value = solve(eq, (x, y, z), dict=True)\nprint(min_value[0])"
  },
  {
    "example_id": 108,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "2.0",
      "12.0",
      "24.0",
      "3.0",
      "3.0",
      "-6.0",
      "2.0",
      "12.0",
      "24.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "z = symbols('z')\neq = (z - 3)**2 + (z - 5 + 2*I)**2 + (z - 1 + I)**2\nprint(solve(eq, z))"
  },
  {
    "example_id": 109,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "2.0",
      "2.0",
      "5.0",
      "1.0",
      "0.5"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = symbols('x')\nf = (5*x**2 + 2*x*sqrt(5) + 1)**0.5 + x*sqrt(5)\nprint(f)"
  },
  {
    "example_id": 110,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "2.0",
      "1.0",
      "3.0",
      "-2.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = (a + 1)*(b + 1)*(c + 1) - 1\neq2 = (a + 2)*(b + 2)*(c + 2) - 2\neq3 = (a + 3)*(b + 3)*(c + 3) - 3\neq4 = (a + 4)*(b + 4)*(c + 4)\neqs = [eq1, eq2, eq3]\nsol = solve(eqs, [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 111,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "-345.0",
      "-2139.0",
      "-15092.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "f = lambda x: 1\nn = 1\ns = 1\nfor i in range(1, 1000):\n    f = lambda x: 1 if x == 1 else f(x - 1) + 1\n    n = n * 2\n    s = s + f(5)\nprint(n * s)"
  },
  {
    "example_id": 112,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6290000.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c = symbols('a b c')\np1 = a*x**3 + b*x - c\np2 = x**2 + b*x + c\np3 = p1.div(p2)\nprint(p3.coeff(x, 1))"
  },
  {
    "example_id": 113,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nlog_a_b = log(b, a)\nlog_b_c = log(c, b)\nlog_c_a = log(a, c)\neq = log_a_b + log_b_c + log_c_a\neq_3 = eq**3\nprint(eq_3.subs([(log_a_b, log_a_b**3), (log_b_c, log_b_c**3), (log_c_a, log_c_a**3)]))"
  },
  {
    "example_id": 114,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2010.5"
    ],
    "annotated_answers": [
      "2014.0"
    ],
    "solution": "a = 2011\nb = 2\nc = 1\nexpression = a - 1/b**c\nprint(expression)"
  },
  {
    "example_id": 115,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.907136132772733",
      "-16.0",
      "16.179581148900184"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\nimport numpy as np\n\n# calculate the length of the minor axis\na = 15\nb = a * (1 - (15**2 / (4*26)))**0.5\nprint(b)"
  },
  {
    "example_id": 116,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "6.0",
      "1.0",
      "8.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x = symbols('x')\nroot = sqrt(1 + sqrt(6))\neq = x**4 - root\nsol = solve(eq, x)\nprint(sol[0])"
  },
  {
    "example_id": 117,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = symbols('x')\neq1 = x**4 - 5*x**2 - x + 4\neq2 = x**2 - 3*x\nroots = solve([eq1 - eq2, eq1.diff() - eq2.diff()], [x])\nsum_of_y = 0\nfor i in roots:\n    sum_of_y += i[1]\nprint(sum_of_y)"
  },
  {
    "example_id": 118,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "24.0",
      "-5.0",
      "24.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = symbols('x')\nf = (1/(x**2-6*x+8)+1/(x**2+x-6))\nprint(f.subs(x, 0))\nprint(f.subs(x, -2))\nprint(f.subs(x, 2))"
  },
  {
    "example_id": 119,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = symbols('z')\neq = z + 1/z - 1\nz_value = solve(eq, z)\nprint(z_value[0])"
  },
  {
    "example_id": 120,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nab = a*b\nac = a*c\nbc = b*c\neq = (ab/a**2 + ac/b**2 + bc/c**2)\neq = eq.expand()\neq = eq.simplify()\nprint(eq)"
  },
  {
    "example_id": 121,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = symbols('x')\nexpr = (sqrt(x + sqrt(3*x + 6)) + sqrt(x - sqrt(3*x + 6)))\nsolve(expr - 6, x)"
  },
  {
    "example_id": 122,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x, y = symbols('x y')\nf = Function('f')\neq = f(x, y) - x - y*f(y, x)\neq = eq.subs({f(y, x): f(x, y)})\nsol = solve(eq, f(1, 2))\nprint(sol)"
  },
  {
    "example_id": 123,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "4.0",
      "-3.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "import sympy as sym\n\na1, b1, a2, b2, an, bn = sym.symbols('a1, b1, a2, b2, an, bn')\n\neq1 = sym.Eq(a1 + (17*a1 + 6*b1)/(a1**2 + b1**2), 6)\neq2 = sym.Eq(b1 + (6*a1 - 17*b1)/(a1**2 + b1**2), 0)\n\nsol = sym.solve([eq1, eq2], [a1, b1, a2, b2, an, bn])\n\nprint(sol)"
  },
  {
    "example_id": 124,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "405.0"
    ],
    "annotated_answers": [
      "405.0"
    ],
    "solution": "expression = abs(-324 + 243j)\nprint(expression)"
  },
  {
    "example_id": 125,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "for n in range(2, 2011):\n    if n == 2:\n        if (1 + 1/2) == 1.5:\n            print(n)\n    elif n == 3:\n        if (1 + 1/2) * (1 + 1/3) == 2.25:\n            print(n)\n    else:\n        if (1 + 1/2) * (1 + 1/3) * (1 + 1/n) == 10.083333333333333:\n            print(n)"
  },
  {
    "example_id": 126,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "53.0"
    ],
    "annotated_answers": [
      "2150.0"
    ],
    "solution": "c2 = (3**3) - 3*3**2 + 3*3 - 5\nc1 = (3**2) - 3*3 + 1\nc0 = 3**0 - 3*1 + 1 - 5\nprint(c2**2 + c1**2 + c0**2)"
  },
  {
    "example_id": 127,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "8.0",
      "4.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "16.0",
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = (x + 1/y) * (y + 1/z) * (z + 1/x)\nsol = solve(eq - 8, [x, y, z])\nprint(sol)"
  },
  {
    "example_id": 128,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "676.0"
    ],
    "solution": "x = symbols('x')\nf = sympy.Function('f')\nf_x = f(x)\nf_2x = f(2*x**2)\neq1 = f_x*f_2x - f_x\neq2 = f_x + f_2x - 125\neq3 = f_x*f(2*x**3 + x) - f_x\nsolve([eq1, eq2, eq3], [f_x, f_2x])\nprint(f(5))"
  },
  {
    "example_id": 129,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1430.0"
    ],
    "annotated_answers": [
      "348.0"
    ],
    "solution": "n = 8\na = 1440\nb = 1716\nc = 1848\nd = a + (b - a)\ne = d + (c - d)\nf = e + (c - e)\nprint(f)"
  },
  {
    "example_id": 130,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.0",
      "52.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "import math\n\n# The volume of a box is the product of its width, height, and length\n# The surface area of a box is 2 times the sum of the perimeter of its sides\n\nwidth = 6\nheight = 4\nlength = 3\n\nvolume = width * height * length\nsurface_area = 2 * (2 * (width + height + length))\n\nprint(\"The volume of the box is:\", volume)\nprint(\"The surface area of the box is:\", surface_area)"
  },
  {
    "example_id": 131,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x**4*y**5 + y**4*x**5 - 810\neq2 = x**3*y**6 + y**3*x**6 - 945\nsolve([eq1, eq2], [x, y])\nprint(2*x**3 + (x*y)**3 + 2*y**3)"
  },
  {
    "example_id": 132,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = -0.99\ny = 0.99\nexpression = x + y\nprint(expression)"
  },
  {
    "example_id": 133,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "x = symbols('x')\neq = 9*x**3 - 20*x - 8*sqrt(2)\nsol = solve(eq, x)\na, b, c = [int(i) for i in sol]\nprint(a + b + c)"
  },
  {
    "example_id": 134,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def count_positive_integers(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (i * j) <= 0:\n                count += 1\n    return count\n\n\nprint(count_positive_integers(3))"
  },
  {
    "example_id": 135,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x**4 + y**4 + z**4 - 4*x*y*z\nsolution = solve(eq - 1, [x, y, z])\nprint(len(solution))"
  },
  {
    "example_id": 136,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-77.0"
    ],
    "annotated_answers": [
      "763.0"
    ],
    "solution": "x = symbols('x')\np = x**3 + 313*x**2 - 77*x - 8\nfor n in range(1, 21):\n    p = p.subs(x, x - n)\nprint(p.coeff(x))"
  },
  {
    "example_id": 137,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import symbols, solve, sqrt, asin, pi\nfrom sympy.abc import r, theta\n\nA, B, O = symbols('A B O')\n\neq = (r * theta)\n\ntheta_max = solve(eq, theta)\nprint(theta_max[0])"
  },
  {
    "example_id": 138,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-9.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols('x')\nfloor_5x = sympy.floor(5*x)\neq = floor_5x - (-9)\nprint(solve(eq, floor_5x))"
  },
  {
    "example_id": 139,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0",
      "37.0",
      "6.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import symbols, solve, sqrt\n\nx = symbols('x')\n\ndef f(x):\n    return x + 3*x**2\n\ndef f_prime(x):\n    return 1 + 6*x\n\nx_sol = solve(f(x) - f_prime(x), x)\nprint(max(x_sol))"
  },
  {
    "example_id": 140,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = 0, 0, 0, 1\nmaximum = a**2 + b**2 + c**2 + d**2\nprint(maximum)"
  },
  {
    "example_id": 141,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import *\na, b, c, d, e = symbols(\"a b c d e\")\nf = a**4 + b**4 + c**4 + d**4 + e**4\nexpr = expand((a - b)*(a - c)*(a - d)*(a - e))\nprint(expr)"
  },
  {
    "example_id": 142,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2002.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 2004\na, b = 2001, 2002\nfor i in range(3, n):\n    a, b = b, a + b - a\nprint(a)"
  },
  {
    "example_id": 143,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "1.0",
      "2.0",
      "8.0",
      "4.0",
      "3.0",
      "7.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import Symbol, simplify, factor\nx = Symbol('x')\nexpr = (x + 8)*(x + 5)**2*(x + 1)**3*x**5*(x - 3)**2 \\\n    / ( (x + 7) * (x + 5)**2 * (x + 1) * x * (x - 3)**3 * (x - 4))\nprint(simplify(expr))"
  },
  {
    "example_id": 144,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "f = sympy.Function('f')\nx = symbols('x')\neq = f(f(x)) - 6\nsol = solve(eq, f(x))"
  },
  {
    "example_id": 145,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.03333333333333333"
    ],
    "annotated_answers": [
      "553.0"
    ],
    "solution": "import math\n\ndef max_divisor(k):\n    n = int(math.pow(k, 1/3))\n    divisors = []\n    for i in range(1, n+1):\n        if k % i == 0:\n            divisors.append(i)\n    return max(divisors)\n\nk = 120\nn = int(math.pow(k, 1/3))\nn_list = []\nfor i in range(1, n+1):\n    if k % i == 0:\n        n_list.append(i)\n\nmax_n = max(n_list)\nprint(max_n/k)"
  },
  {
    "example_id": 146,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "169.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 156 + 65j\nprint(abs(z))"
  },
  {
    "example_id": 147,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def is_irreducible(p, q):\n    if p == 1 or q == 1:\n        return False\n    for i in range(2, int(p**0.5) + 1):\n        if p % i == 0:\n            return False\n    for i in range(2, int(q**0.5) + 1):\n        if q % i == 0:\n            return False\n    return True\n\ndef find_p_q(n):\n    p = 1\n    q = 1\n    while not is_irreducible(p, q):\n        p += 1\n        q += 1\n    return p, q\n\ndef find_a(n):\n    p, q = find_p_q(n)\n    return (p + q) % 10\n\nprint(find_a(10**8))"
  },
  {
    "example_id": 148,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-29.0",
      "80.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = symbols('x')\nf = (6*x**3 + 4*x**2 - 11*x + 5)/(3*x**3 - 15*x + 20)\nf_derivative = f.diff(x)\nf_derivative_limit = f_derivative.limit(x, 0)\nc = f_derivative_limit\nprint(c)"
  },
  {
    "example_id": 149,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5910300000.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n1990, n1000, n990 = 1990, 1000, 990\nprint(n1990**3 - n1000**3 - n990**3)"
  },
  {
    "example_id": 150,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x + y + z\neq2 = x*y*z\neq3 = x**3*y + y**3*z + z**3*x\nsolve([eq1, eq2], [x, y, z])\nprint(eq3)"
  },
  {
    "example_id": 151,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "N = 1\nwhile True:\n    a = 0\n    b = 1\n    c = a + b\n    while c < N:\n        a = b\n        b = c\n        c = a + b\n    if c == N:\n        break\n    else:\n        N += 1\nprint(N)"
  },
  {
    "example_id": 152,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "0.5"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "a, b, c = 1, 2, 3\n\n# Use AM-GM inequality\nexpression = (a + b + c) * ((a + b)**2 + (a + b + 4c)**2) / abc\n\n# Evaluate AM-GM inequality\n# Use the fact that the square of the product of n positive numbers is\n# greater than or equal to the product of the squares of the numbers\n# and that the sum of the squares is at least 2n\na_squared = a**2\nb_squared = b**2\nc_squared = c**2\n\nn = 3\nproduct = a * b * c\nproduct_squared = product**2\n\nexpression = (a_squared + b_squared + c_squared + product_squared) / 2\n\nprint(expression)"
  },
  {
    "example_id": 153,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "67.0"
    ],
    "solution": "n = symbols('n')\nx = symbols('x')\neq = (x**2*n + x + 1)**2n + 1 + (x + 1)**2n\ndivisible = sympy.div(eq, x**2 + x + 1)\nsolve(divisible - 0, n)"
  },
  {
    "example_id": 154,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Define z and w\nz, w = symbols('z w')\n\n# Define the absolute values of z and w\n|z| = 2\n|w| = 5\n\n# Find the largest possible value of |z + w|\n|z + w| = sqrt(4 + 25) = sqrt(29)\n\n# Print the result\nprint(sqrt(29))"
  },
  {
    "example_id": 155,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1700.0"
    ],
    "annotated_answers": [
      "1700.0"
    ],
    "solution": "# Compute the smallest positive integer x greater than 9 such that\n# [lfloor x rfloor - 19 lfloor x/19 rfloor = 9 = lfloor x rfloor - 89 lfloor x/89 rfloor]\nx = 10\nwhile True:\n    if (x - 19*int(x/19)) == 9 and (x - 89*int(x/89)) == 9:\n        break\n    x += 1\nprint(x)"
  },
  {
    "example_id": 156,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "A, B, x, a, b, c = symbols('A B x a b c')\nf = 1/(x**2 + a*x + b/c)\nA, B = f.as_numer_denom()\nprint(A + B)"
  },
  {
    "example_id": 157,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17504.0"
    ],
    "annotated_answers": [
      "1112.0"
    ],
    "solution": "x = symbols('x')\np = x**4 + 3*x**3 + 11*x**2 + 27*x + 1\np_value = p.subs(x, -2) + 7*p.subs(x, 6)\nprint(p_value)"
  },
  {
    "example_id": 158,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "170.0",
      "13.0",
      "170.0",
      "170.0",
      "1.0",
      "810932305.0",
      "8.0",
      "499769140.0",
      "7.0",
      "134723250.0"
    ],
    "annotated_answers": [
      "850.0"
    ],
    "solution": "from sympy import Symbol, expand, solve, simplify, factor, collect, trigsimp\nfrom sympy.abc import x\nx = Symbol('x')\n\n# The equation to be solved\neq = x**10 + (13*x - 1)**10\n\n# Solve the equation for x\nsol = solve(eq, x)\n\n# Evaluate the expression\nexpression = 1/sol[0].conjugate() + 1/sol[1].conjugate() + 1/sol[2].conjugate() + 1/sol[3].conjugate() + 1/sol[4].conjugate()\nprint(expression)"
  },
  {
    "example_id": 159,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "95.81262248236034"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "sum_of_frac = 1\nfor i in range(1, 100):\n    sum_of_frac += i/(i+1)\nprint(sum_of_frac)"
  },
  {
    "example_id": 160,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a3 = 1\na2 = 2\na1 = 2\na0 = 1\n\nfrom fractions import Fraction\n\nfor n in range(1, 6):\n    if a3 % n == 0 and a2 % n == 0 and a1 % n == 0 and a0 % n == 0:\n        print(Fraction(a3, n) / Fraction(a2, n))"
  },
  {
    "example_id": 161,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13535.0"
    ],
    "annotated_answers": [
      "13535.0"
    ],
    "solution": "num = (sympy.sqrt(7) + sympy.sqrt(5))**6\nprint(int(num))"
  },
  {
    "example_id": 162,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4031.0"
    ],
    "annotated_answers": [
      "1209.0"
    ],
    "solution": "f = lambda x: 2*x + 1\nprint(f(2015))"
  },
  {
    "example_id": 163,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nf = x**6 - 4*x**5 + 3*x**3 + x**2 - 1\nf.as_numer_denom()"
  },
  {
    "example_id": 164,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "z1, z2, z3 = symbols('z1 z2 z3')\nexpr = (z3 - z1)/(z2 - z1)*(z - z2)/(z - z3)\nexpr = expr.subs(z1, 18 + 83*I).subs(z2, 18 + 39*I).subs(z3, 78 + 99*I)\nsol = solve(expr, z)\nprint(sol[0].real)"
  },
  {
    "example_id": 165,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "92.0"
    ],
    "solution": "# https://math.stackexchange.com/questions/2299577/sum-of-all-values-p1-over-all-the-polynomials-with-these-properties\n# https://math.stackexchange.com/questions/2299577/sum-of-all-values-p1-over-all-the-polynomials-with-these-properties\n\nimport sympy as sp\n\nsum_p1 = 0\n\nfor a in range(5, 4+1):\n    for b in range(a, 4+1):\n        for c in range(b, 4+1):\n            for d in range(c, 4+1):\n                P = sp.Poly(4*z**4 + a*z**3 + b*z**2 + c*z + d, z)\n                if P.has(sp.Zeros):\n                    z_0 = sp.solve(P, z)[0]\n                    if abs(z_0) == 1:\n                        sum_p1 += P(1)\n\nprint(sum_p1)"
  },
  {
    "example_id": 166,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq1 = a**2 + b**2 - 3\neq2 = c**2 + d**2 - 4\nsol1 = solve((eq1, eq2), (a, b, c, d))\nprint((sol1[0][0]*sol1[0][1] + sol1[0][2]*sol1[0][3])**2 + (sol1[0][1]*sol1[0][3] - sol1[0][0]*sol1[0][2])**2)"
  },
  {
    "example_id": 167,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y, k = symbols('x y k')\neq1 = x**2 + y**2 - k**2\neq2 = x*y - k\nsol = solve([eq1, eq2], [x, y])\nprint(len(sol))"
  },
  {
    "example_id": 168,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy\nfrom sympy import log\n\ndef log_chain(base, number):\n    result = 1\n    for i in range(2, number):\n        result *= log(base, i)\n    return result\n\nprint(log_chain(2, 8))"
  },
  {
    "example_id": 169,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\na = 1 + 1j\nb = 1 - 1j\nc = 1\np = x**12 + a*x**8 + b*x**4 + c\n\n# solve p(2009 + 9002*pi*i) = p(2009) = p(9002) = 0\nsol = solve([p.subs(x, 2009 + 9002*pi*I),\n             p.subs(x, 2009),\n             p.subs(x, 9002)], x)\n\n# find the number of nonreal zeros\nn = 0\nfor z in sol:\n    if z.as_real_imag()[0] == 0:\n        n += 1\nprint(n)"
  },
  {
    "example_id": 170,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "z = 100 + 75j\nprint(abs(z))"
  },
  {
    "example_id": 171,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0",
      "4.0",
      "445.0",
      "4.0",
      "11641.0",
      "8.0",
      "679661.0",
      "64.0",
      "165.0",
      "640247.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "from sympy import solve, Symbol\nx = Symbol('x', complex=True)\neq = (1/(x-1) + 1/(x-5) + 1/(x-10) + 1/(x-25) - 2)\nroots = solve(eq, x)\nprint(roots)"
  },
  {
    "example_id": 172,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# 1) Finding the point on the curve where x = y = z\nx = y = z = 1\n\n# 2) Finding the distance between the point and the origin\ndistance = (1-1)**2 + (1-1)**2 + (1-1)**2\ndistance = distance**(1/2)\nprint(distance)"
  },
  {
    "example_id": 173,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "2.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "3.0",
      "4.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a, x1, y1, x2, y2 = symbols('a x1 y1 x2 y2')\neq1 = y1**2 - 4*a*x1\neq2 = y2**2 - 4*a*x2\neq3 = y1 - y2\neq4 = x1 - x2\ndist = sympy.sqrt(eq1*eq2)\ndist_x = sympy.expand(dist.subs(y1, eq3).subs(y2, eq4))\nprint(dist_x)"
  },
  {
    "example_id": 174,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "384.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "print(2009**4 - 4*2007**4 + 6*2005**4 - 4*2003**4 + 2001**4)"
  },
  {
    "example_id": 175,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0",
      "1.0",
      "6.0",
      "1.0"
    ],
    "annotated_answers": [
      "1000.0"
    ],
    "solution": "m = 1\nwhile m < 1000:\n    n = 1\n    while n < m:\n        if m*n <= m + n:\n            print(m, n)\n            break\n        n += 1\n    m += 1"
  },
  {
    "example_id": 176,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "560.9999999999999"
    ],
    "annotated_answers": [
      "561.0"
    ],
    "solution": "a = [1, 1]\nb = [1, 3]\nfor n in range(2, 33):\n    a.append(a[n-1] + a[n-1]**2/a[n-2])\n    b.append(b[n-1] + b[n-1]**2/b[n-2])\nprint(b[32]/a[32])"
  },
  {
    "example_id": 177,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a = 1\nb = 2\nexpression = a**2 + b**2\nprint(expression)"
  },
  {
    "example_id": 178,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2009.0",
      "3.0",
      "6033.0",
      "2.0",
      "12132359.0",
      "8132719289.0",
      "0.0",
      "2010.0",
      "3.0",
      "6033.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\neq = (1/(x-2009)) + (1/(x-2010)) + (1/(x-2011))\nsol = solve(eq >= 1, x)\nprint(sol)"
  },
  {
    "example_id": 179,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6.0",
      "44.0",
      "5.0",
      "196.0",
      "4.0",
      "198.0",
      "3.0",
      "68.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x', real=True)\n\ndef f(x):\n    return (1/(7-x) * (1+x)*(1-x) +\n            3*x**2 - 18*x - 22/(x**2 - 1) * (x - 7) +\n            3/(x - 2) - 3/(x - 1)*(x - 2))\n\nprint(solve(f(x) - 0, x))"
  },
  {
    "example_id": 180,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 2"
  },
  {
    "example_id": 181,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x, y = symbols('x y')\neq = (2*x**2 + x + 3)/(x**2 + x + 1) - (2*x + 1)/(x + 1)\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 182,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "a, b = symbols('a b')\neq1 = log(log(8*x)/log(2), 2)\neq2 = log(log(2*x)/log(8), 8)\nsol = solve(eq1 - eq2, x)\nprint(sol)"
  },
  {
    "example_id": 183,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# Using Cardano's Formula\n# https://en.wikipedia.org/wiki/Cubic_function#Cardano's_method\n\nimport cmath\n\n# x^3 + Px^2 + Qx - 19 = 0\nP = 1\nQ = 1\n\n# x^3 - Ax^2 + Bx - C = 0\nA = 1\nB = 1\nC = 19\n\n# x = (-B \u00b1 sqrt(B^2 - 4AC)) / 3A\nx1 = (-B - cmath.sqrt(B**2 - 4*A*C)) / (3*A)\nx2 = (-B + cmath.sqrt(B**2 - 4*A*C)) / (3*A)\n\n# roots of x^3 - Ax^2 + Bx - C = 0\nr1 = x1.real\nr2 = x2.real\nr3 = x2.imag\n\n# roots of x^3 + Px^2 + Qx - 19 = 0\ns1 = r1 + 1\ns2 = r2 + 1\ns3 = r3 + 1\n\n# A + B + C\nprint(A + B + C)"
  },
  {
    "example_id": 184,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a**3 - 2*a - 5\neq2 = b**3 - 2*b - 5\neq3 = c**3 - 2*c - 5\nsum = eq1 + eq2 + eq3\nprint(sum)"
  },
  {
    "example_id": 185,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = sympy.var('a')\nx = sympy.Symbol('x')\n\neq = x**6 + 3*a*x**5 + (3*a**2 + 3)*x**4 + (a**3 + 6*a)*x**3 + (3*a**2 + 3)*x**2 + 3*a*x + 1\n\nsolve_eq = solve(eq, a)\nprint(solve_eq)"
  },
  {
    "example_id": 186,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "k, x = symbols('k x')\neq1 = (x - 2)**4 - (x - 2)\neq2 = x**2 - k*x + k\n\nroot_eq1 = solve(eq1, x)\nroot_eq2 = solve(eq2, x)\n\nk_value = solve(root_eq1[0] - root_eq2[0], k)\nprint(k_value[0])"
  },
  {
    "example_id": 187,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "41.56921938165307"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "x = -2 - 2*2**0.5*1j\nprint(abs(x**3))"
  },
  {
    "example_id": 188,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "9.0",
      "4.0",
      "10.0",
      "5.0",
      "11.0",
      "6.0",
      "12.0",
      "7.0",
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import log\n\np = log(1) + 2*log(2) + 3*log(3) + 4*log(4)\np = p.expand()\n\n# Check if p can be expressed in the form A*log(B/C)\nfor A in range(1, 10):\n    for B in range(1, 10):\n        for C in range(1, 10):\n            if C % 2!= 0 and C % 3!= 0 and C % 5!= 0:\n                if p.subs({log(1): A*log(B/C)}).is_real:\n                    print(A + B + C)"
  },
  {
    "example_id": 189,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3628800.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "from sympy import symbols, factorial, factor\n\nn = 10\nproduct = 1\nfor i in range(1, n+1):\n    product *= i\nprint(product)"
  },
  {
    "example_id": 190,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x*y*z - 4\neq2 = x**3 + y**3 + z**3 - 4\neq3 = x**2*y + x**2*z + y**2*z - 12\nsolve([eq1, eq2, eq3], [x, y, z])\nxy_plus_yz_plus_zx = x*y + y*z + z*x\nprint(xy_plus_yz_plus_zx)"
  },
  {
    "example_id": 191,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "36.0",
      "2.0",
      "36.0",
      "25.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = log(x-y, 6) + log(x+y, 6)\neq2 = log(y, 5)*x\neq1_sol = solve(eq1 - 2, x)\neq2_sol = solve(eq2 - 2, x)\nprint(eq1_sol)\nprint(eq2_sol)"
  },
  {
    "example_id": 192,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.00000000000001"
    ],
    "annotated_answers": [
      "743.0"
    ],
    "solution": "r = sympy.Symbol('r')\neq = sympy.floor(r + 19/100) + sympy.floor(r + 20/100) + sympy.floor(r + 21/100) + sympy.floor(r + 22/100) + sympy.floor(r + 23/100) + sympy.floor(r + 24/100) + sympy.floor(r + 25/100) + sympy.floor(r + 26/100) + sympy.floor(r + 27/100) + sympy.floor(r + 28/100) + sympy.floor(r + 29/100) + sympy.floor(r + 30/100) + sympy.floor(r + 31/100) + sympy.floor(r + 32/100) + sympy.floor(r + 33/100) + sympy.floor(r + 34/100) + sympy.floor(r + 35/100) + sympy.floor(r + 36/100) + sympy.floor(r + 37/100) + sympy.floor(r + 38/100) + sympy.floor(r + 39/100) + sympy.floor(r + 40/100) + sympy.floor(r + 41/100) + sympy.floor(r + 42/100) + sympy.floor(r + 43/100) + sympy.floor(r + 44/100) + sympy.floor(r + 45/100) + sympy.floor(r + 46/100) + sympy.floor(r + 47/100) + sympy.floor(r + 48/100) + sympy.floor(r + 49/100) + sym"
  },
  {
    "example_id": 193,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq = (a + b + c + d)*(1/a + 1/b + 1/c + 1/d)\nmin_value = eq.subs([(a, 1), (b, 1), (c, 1), (d, 1)])\nprint(min_value)"
  },
  {
    "example_id": 194,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z = (64/5 - 48/5j)**0.25\nprint(abs(z))"
  },
  {
    "example_id": 195,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.5",
      "0.3333333333333333",
      "0.25",
      "2.0",
      "1.0",
      "0.6666666666666666",
      "0.5",
      "3.0",
      "1.5",
      "1.0",
      "0.75",
      "4.0",
      "2.0",
      "1.3333333333333333",
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# find the possible rational roots\npossible_rational_roots = []\nfor i in range(1, 5):\n    for j in range(1, 5):\n        possible_rational_roots.append(i/j)\n\n# print the possible rational roots\nprint(possible_rational_roots)"
  },
  {
    "example_id": 196,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "n = 1\nwhile True:\n    r = 1000*n*n*n + 1\n    if r % 1 == 0:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 197,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4757.177377517636"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "expression = 0\nfor i in range(1, 99):\n    expression += (i**2/(i+1))\nprint(expression)"
  },
  {
    "example_id": 198,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-100.0",
      "2.0",
      "10.0",
      "2.0",
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = 10*x**2 + 10*y**2 + z**2\ncond = x*y + x*z + y*z\nminimum = solve(eq, x, y, z, cond, dict=True)\nprint(minimum[0])"
  },
  {
    "example_id": 199,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "def e(x):\n    return x\n\ndef o(x):\n    return x**2\n\ndef f(x):\n    return e(x) + o(x)\n\nprint(f(2))"
  },
  {
    "example_id": 200,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "10000.0",
      "10000.0",
      "1.0"
    ],
    "annotated_answers": [
      "199.0"
    ],
    "solution": "# Solution\nimport math\n\n# Calculate the number of real numbers x that satisfy the equation\n# x^2 + 10000*x = 10000x\n# x^2 = 9000x\n# x = sqrt(9000)\n# x = 30\n\nprint(\"The number of real numbers x that satisfy the equation x^2 + 10000\\lfloor x \\rfloor = 10000x is:\", 1)"
  },
  {
    "example_id": 201,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def largest_number_of_integer_roots(a, b, c):\n    \"\"\"\n    Given a quadratic polynomial of the form ax^2 + bx + c = 0\n    where a, b, and c are integers, find the largest possible number of integer roots\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The given polynomial is not quadratic.\")\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return 0\n    elif delta == 0:\n        return 1\n    else:\n        return 2\n\n# Test case 1:\nprint(largest_number_of_integer_roots(1, 0, 42))\n# Expected output: 1\n\n# Test case 2:\nprint(largest_number_of_integer_roots(1, -4, 17))\n# Expected output: 2\n\n# Test case 3:\nprint(largest_number_of_integer_roots(1, 4, 4))\n# Expected output: 0"
  },
  {
    "example_id": 202,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a, b = symbols('a b')\nl = sympy.Line(sympy.Point(5, 8), sympy.Point(7, 14))\nl1 = l.translate(3, -2)\nprint(l1.slope)"
  },
  {
    "example_id": 203,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "27.0",
      "2.0",
      "27.0",
      "1312.0",
      "2.0",
      "1755904.0"
    ],
    "annotated_answers": [
      "-80.0"
    ],
    "solution": "x, c = symbols('x c')\neq = x**3 + 8*x**2 - 4*x + c\nroots = solve(eq, x)\nprint(roots[0] + roots[1])"
  },
  {
    "example_id": 204,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8080.0"
    ],
    "annotated_answers": [
      "8080.0"
    ],
    "solution": "x = 1\ny = 1\nexpression = (x + 1/y) * (x + 1/y + 2018) + (y + 1/x) * (y + 1/x + 2018)\nprint(expression)"
  },
  {
    "example_id": 205,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.000000000000001"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x0 = 3\nx = x0\nfor i in range(1, 12345):\n    x = (1 + x)/(1 - x)\nprint(x)"
  },
  {
    "example_id": 206,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "import math\n\ndef tangent_line_slope(point, radius, angle):\n    return (point[0] + radius * math.cos(angle)) / (point[1] + radius * math.sin(angle))\n\ndef find_side_length(point, radius, angle):\n    slope = tangent_line_slope(point, radius, angle)\n    return slope * (point[0]**2 + point[1]**2)\n\ndef find_side_lengths(radius, angles):\n    return [find_side_length(point, radius, angle) for point, angle in zip(circles, angles)]\n\ndef find_perimeter(side_lengths):\n    return sum(side_lengths)\n\ndef find_area(side_lengths):\n    return side_lengths[0] * side_lengths[1]\n\ndef find_a_plus_b_plus_c_plus_d(side_lengths):\n    return sum([\n        side_lengths[0],\n        side_lengths[1],\n        side_lengths[2],\n        side_lengths[3]\n    ])\n\n# The circle with equation x^2 + y^2 = 1\ncircles = [\n    (0, 1),\n    (2, 0),\n    (0, -1),\n    (-2, 0)\n]\n\n# The four angles of the square\nangles = [\n    0,\n    math.pi / 2,\n    math.pi,\n    math.pi * 3 / 2\n]\n\n# The side lengths of the square\nside_lengths = find_side_lengths(1, angles)\n\n# The perimeter of the square\nperimeter = find_perimeter(side_lengths)\n\n# The area of the square\narea = find_area(side_lengths)\n\n# The sum of the side lengths of the square\na_plus_b_plus_c_plus_d = find_a_plus_b_plus_c_plus_d(side_lengths)\n\nprint(a_plus_b_plus_c_plus_d)\n\n**"
  },
  {
    "example_id": 207,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "S = 1/2\nprint(S)"
  },
  {
    "example_id": 208,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2660.0",
      "1.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "4.0",
      "3.0",
      "23940.0",
      "1.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "-63.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a*b*c - 17955\neq2 = (3*a + b)*(3*b + c)*(3*c + a)\neq3 = a + b + c\nsolutions = solve([eq1, eq2, eq3], [a, b, c])\nprint(solutions[0][0] + solutions[0][1] + solutions[0][2])"
  },
  {
    "example_id": 209,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import sqrt\n\nA, B, C, D, E = 3, 5, 6, 7, 9\n\nAB = A + B\nBC = B + C\nCD = C + D\nDE = D + E\nEA = E + A\n\nsequence = [AB, BC, CD, DE, EA]\nmiddle_term = (sequence[1] + sequence[2]) / 2\n\nprint(middle_term)"
  },
  {
    "example_id": 210,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "1.0",
      "6.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "9.0",
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nconditions = [x + y + z - 6, 1/x + 1/y + 1/z - 2]\nsolutions = solve(conditions, [x, y, z])\nprint(solutions[0][0] + solutions[0][1]/solutions[0][2] + solutions[0][2]/solutions[0][1])"
  },
  {
    "example_id": 211,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "h = -3\na = 3\nb = 3\nk = 3\nprint(h + k + a + b)"
  },
  {
    "example_id": 212,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-27.0",
      "2.0",
      "2950.0",
      "27.0",
      "2.0",
      "1098500.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "x, c = symbols('x c')\neq = x**3 - 10*x**2 + 55*x - c\nroots = solve(eq, x)\nprint(roots[0]*roots[1])\nprint(c)"
  },
  {
    "example_id": 213,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0",
      "20.0"
    ],
    "annotated_answers": [
      "340.0"
    ],
    "solution": "n = 1\nwhile n < 1000:\n    if int(math.log2(n)) % 2 == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 214,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.4825486315913923"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sum = 0\nfor n in range(-10, 21):\n    if n < 0:\n        sum += -1\n    elif n == 0:\n        sum += 0\n    else:\n        sum += 1\nprint(sum)"
  },
  {
    "example_id": 215,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from math import factorial\n\ndef coefficient(x, n):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\nfor k in range(1, 51):\n    print(f\"k = {k}: {coefficient(3, k)}\")"
  },
  {
    "example_id": 216,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "41.0",
      "2.0",
      "144.0",
      "2.0",
      "41.0",
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x**2 + y**2 + 6*x - 24*y + 72\neq2 = x**2 - y**2 + 6*x + 16*y - 46\nsol = solve([eq1, eq2], [x, y])\nsum = 0\nfor i in sol:\n    sum += (i[0] - (-3))**2 + (i[1] - 2)**2\nprint(sum)"
  },
  {
    "example_id": 217,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2025.0",
      "14580.0",
      "3.0",
      "1971.0",
      "2.0",
      "27.0",
      "1583.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "from sympy import symbols, solve, expand\n\nx = symbols('x')\npolynomial = x**3 + 9*x**2 - 9*x - 8\nroots = solve(polynomial, x)\nprint(expand((roots[0] + roots[1] + roots[2])*(roots[1] + roots[2] + roots[0])*(roots[2] + roots[0] + roots[1])))"
  },
  {
    "example_id": 218,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def is_factor(x):\n    q1 = x**2 + (k - 29)*x - k\n    q2 = 2*x**2 + (2*k - 43)*x + k\n    return q1 % x == 0 and q2 % x == 0\n\nfor k in range(1, 20):\n    if is_factor(k):\n        print(\"The largest value of k for which Q1(x) and Q2(x) can both be factors of P(x) is\", k)\n        break"
  },
  {
    "example_id": 219,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "n = symbols('n')\neq = sum(i**k * n**k for k in range(1, n + 1))\nsolve(eq - (48 + 49*i), n)"
  },
  {
    "example_id": 220,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "6.0",
      "18.0",
      "6.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "a = [1, 4, 15, 2]\nb = [1, 2, 3, 4]\nc = [a[i] + b[i] for i in range(len(a))]\nprint(c)"
  },
  {
    "example_id": 221,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0",
      "2.0",
      "21.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import Poly\nfrom sympy.abc import x\nexpression = Poly(x**6 + x**4 - 115*x**3 + x**2 + 1, x)\nprint(expression.all_roots())"
  },
  {
    "example_id": 222,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1969.0"
    ],
    "annotated_answers": [
      "401.0"
    ],
    "solution": "def f(x):\n    return 6*x - 2005\n\nn = int(f(6))\nprint(n)"
  },
  {
    "example_id": 223,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "10.0",
      "4.0",
      "2.0",
      "-4.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq = 1/a + 1/b + 4/c + 16/d\neq = eq.expand()\neq = eq.subs({a: 1 - b - c - d, b: 1 - a - c - d, c: 1 - a - b - d, d: 1 - a - b - c})\nmin_value = solve(eq, [a, b, c, d])\nprint(min_value)"
  },
  {
    "example_id": 224,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "14.0",
      "3.0",
      "62.0",
      "2.0",
      "91.0",
      "42.0",
      "2.0",
      "11.0",
      "30.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x = symbols('x')\ng = x**2 - 11*x + 30\nf = x**4 - 14*x**3 + 62*x**2 - 91*x + 42\nsol = solve(g*f - x**4 - 14*x**3 + 62*x**2 - 91*x + 42, f)\nprint(sol[0])"
  },
  {
    "example_id": 225,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def f(x):\n    return (x - 2)*12\n\nprint(f(12) - f(2))"
  },
  {
    "example_id": 226,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def f(x):\n    return x**2 - 2\n\ndef check(f, x, y):\n    return f(x * y) == f(x) * f(y) - 2\n\ndef find_number_of_functions(f, x, y):\n    count = 0\n    for i in range(1, x):\n        for j in range(1, y):\n            if check(f, i, j):\n                count += 1\n    return count\n\ndef main():\n    x = 10000\n    y = 10000\n    print(find_number_of_functions(f, x, y))\n\nmain()"
  },
  {
    "example_id": 227,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 100\nexpression = sum([a**i for i in range(n+1) for a in [-1, 1]])\nprint(n)"
  },
  {
    "example_id": 228,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\n\na, b, c, d, e = sympy.symbols('a, b, c, d, e')\nexpression = (a**3)/(a - b)*(a - c)*(a - d)*(a - e) + (b**3)/(b - a)*(b - c)*(b - d)*(b - e) + (c**3)/(c - a)*(c - b)*(c - d)*(c - e) + (d**3)/(d - a)*(d - b)*(d - c)*(d - e) + (e**3)/(e - a)*(e - b)*(e - c)*(e - d)\nprint(expression)"
  },
  {
    "example_id": 229,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "3.0",
      "2.0",
      "8.0",
      "2.0",
      "3.0",
      "108.0",
      "3.0",
      "2.0",
      "8.0"
    ],
    "annotated_answers": [
      "254.0"
    ],
    "solution": "a, b, c, d, e, f, n = symbols('a b c d e f n')\nq = a*n**4 + b*n**3 + c*n**2 + d*n + e\nprint(solve(q - 4, n))\nprint(solve(q - 152, n))"
  },
  {
    "example_id": 230,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import sqrt\nnum = 1/(2*(5/(sqrt(3) + sqrt(2)) + 1/(sqrt(3) - sqrt(2))))\na, b = num.as_numer_denom()[0].as_numer_denom()\nprint(a + b)"
  },
  {
    "example_id": 231,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "112.0"
    ],
    "solution": "# a_0 = 2\n# a_1 = 5\n# a_2 = 8\n# a_3 = 17\n# a_4 = 41\n# a_5 = 73\n\n# a_6 = 147\n# a_7 = 293\n# a_8 = 587\n# a_9 = 1179\n# a_10 = 2357\n\n# a_11 = 4713\n# a_12 = 9423\n# a_13 = 18847\n# a_14 = 37693\n# a_15 = 75387\n\n# a_16 = 150783\n# a_17 = 301567\n# a_18 = 552353\n# a_19 = 1105007\n# a_20 = 2210013\n\n# a_21 = 4420023\n# a_22 = 8840047\n# a_23 = 17680093\n# a_24 = 35360137\n# a_25 = 70720283\n\n# a_26 = 141440527\n# a_27 = 282881053\n# a_28 = 565762107\n# a_29 = 1131524213\n# a_30 = 2263048427\n\n# a_31 = 4526176963\n# a_32 = 9052353937\n# a_33 = 18104707873\n# a_34 = 36209415753\n# a_35 = 72418831507\n\n# a_36"
  },
  {
    "example_id": 232,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = 2\ny = 2\nexpression = x**2 + y**2\nprint(expression)"
  },
  {
    "example_id": 233,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = 0\na = 0\ng = 0\n\nwhile n < 4:\n    n += 1\n    a += 1\n    g += 1\n\nprint(a+g)"
  },
  {
    "example_id": 234,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x, y = symbols('x y')\neq = (x + 3)*(y - 5)\neq_expanded = expand(eq)\neq_expanded_solved = solve(eq_expanded, x, y)\nprint(eq_expanded_solved)"
  },
  {
    "example_id": 235,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "4.0",
      "1.0",
      "2.0",
      "10.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "w = -1 + 4*symbols('i')\neq = abs(w**2 + 2*w - 8)\nprint(eq.evalf())"
  },
  {
    "example_id": 236,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0"
    ],
    "annotated_answers": [
      "154.0"
    ],
    "solution": "N = 19\nN_min = 2**(1 + floor(log(N-1, 2)))\nN_max = N_min + 1\nprint(N_min + N_max)"
  },
  {
    "example_id": 237,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x, y = symbols('x y')\neq = floor(x)*floor(y) - 16\narea = integrate(integrate(eq, y), x)\nprint(area)"
  },
  {
    "example_id": 238,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "165.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = symbols('x')\neq1 = (4*x - 23)/(x**2 + 5*x - 24)\neq2 = (C/x - 3 + D/(x + 8))\nsol = solve([eq1 - eq2], [C, D])\nprint(sol)"
  },
  {
    "example_id": 239,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "14.0",
      "2.0",
      "14.0",
      "49.0"
    ],
    "annotated_answers": [
      "175.0"
    ],
    "solution": "x, y = symbols('x y')\neq = 3*x**2 - 18*x + 4*y**2 - 32*y + 91\nexpr = x**2 + y**2 + 2*x*y - 14*x - 14*y + 49\nsolve(eq - 300, x, y)\nprint(expr.subs(solve(eq - 300, x, y)))"
  },
  {
    "example_id": 240,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2007.0"
    ],
    "solution": "x = symbols('x')\nf = 2*x\nf2 = f(f(x))\nf2005 = f2(f2(x))\nf2005_2 = f2(f2(f2(x)))\nf2005_3 = f2(f2(f2(f2(x))))\nf2005_4 = f2(f2(f2(f2(f2(x)))))\nf2005_5 = f2(f2(f2(f2(f2(f2(x))))))\nf2005_6 = f2(f2(f2(f2(f2(f2(f2(x)))))))\nf2005_7 = f2(f2(f2(f2(f2(f2(f2(f2(x))))))))\nf2005_8 = f2(f2(f2(f2(f2(f2(f2(f2(f2(x)))))))))\nf2005_9 = f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(x))))))))))\nf2005_10 = f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(x)))))))))))\nf2005_11 = f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(x))))))))))))\nf2005_12 = f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(x)))))))))))))\nf2005_13 = f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(f2(x))))))))))))))\nf2005_14 = f"
  },
  {
    "example_id": 241,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a, b = symbols('a b')\nx = symbols('x', integer=True)\np1 = x**2 - a*x + 24\np2 = x**2 - b*x + 36\ncommon_root = p1.free_symbols.intersection(p2.free_symbols)\nprint(solve(p1 - p2, a))\nprint(solve(p1 - p2, b))"
  },
  {
    "example_id": 242,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Enter all possible values of n, separated by commas.\nn = 3\nprint(n)"
  },
  {
    "example_id": 243,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "13.0",
      "2.0",
      "11.0",
      "23.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nf = 3*x**3 - 13*x**2 + 11*x + 23\ng = x**2 - 5*x\nq, r = divmod(f, g)\nprint(r)"
  },
  {
    "example_id": 244,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = -2\nb = 0\nc = 2\n\na_squared = a**2\nb_squared = b**2\nc_squared = c**2\n\na_plus_b_plus_c = a + b + c\n\nexpression = a_squared + b_squared + c_squared\nprint(expression)"
  },
  {
    "example_id": 245,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-125.0",
      "5.0",
      "78125.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x, a, c = symbols('x a c')\nf = x**7 + a*x**3 + c*x\neq = f.subs(x, 5) - 3\na_value = solve(eq, a)[0]\nc_value = solve(eq, c)[0]\nf_value = f.subs(x, -5)\nprint(f_value)"
  },
  {
    "example_id": 246,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.4142135623730951"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 1\nb = 1\nc = -1\nd = sqrt(3)\nx = a + b*1j\nprint(abs(x))"
  },
  {
    "example_id": 247,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import symbols, solve, expand_func, factor, simplify, powsimp\nfrom sympy.abc import x\n\nf = (x + 1/x)**6 - (x**6 + 1/x**6) - 2\nf = expand_func(f)\nf = factor(f)\nf = powsimp(f)\nf = simplify(f)\nprint(f)"
  },
  {
    "example_id": 248,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import symbols, diff, simplify, Max\nx, y = symbols('x y')\nf = x*sqrt(1 - y**2) + y*sqrt(1 - x**2)\nd_x = diff(f, x)\nd_y = diff(f, y)\nresult = simplify(Max(d_x, d_y))\nprint(result)"
  },
  {
    "example_id": 249,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "11.0",
      "2.0",
      "484.0",
      "11.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "x, y = symbols('x y')\neq = (x**2/50 - y**2/22 - 2)\nfocus = sympy.solve(eq, x)\nprint(focus[0])"
  },
  {
    "example_id": 250,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x**2 + y**2 - 3*x - 28\neq2 = 2*x + 2*y - 3\neq3 = x**2 + y**2 - 3*x - 28\neq4 = 2*x + 2*y - 3\nsolve_set = solve([eq1, eq2], [x, y])\nslope = (solve_set[0][1] - solve_set[1][1])/(solve_set[0][0] - solve_set[1][0])\nprint(slope)"
  },
  {
    "example_id": 251,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "25.0"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "def f(x):\n    return x * x\n\nprint(f(2))\nprint(f(5))"
  },
  {
    "example_id": 252,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3074.0",
      "2.0",
      "3074.0",
      "2.0",
      "2.0",
      "3074.0",
      "4.0",
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# we have a^2 = bc and a + b + c = abc\n# we can write a^2 = (a+b+c)(a-b-c)\n# since a + b + c = abc, a^2 = (abc)(a-b-c)\n# so we have a^2 = (abc)(a-b-c) = abc(a-b-c)\n# since a^2 = bc, we have bc = abc(a-b-c)\n# so we have bc = abc(a-b-c) = (a-b-c)^2(a-b-c)\n# so we have (a-b-c)^2 = 1\n# so we have a = b = c = 1\n# so the smallest possible value of a^2 is 1"
  },
  {
    "example_id": 253,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import sqrt, pi\n\ndef largest_rectangle_area():\n    return (1 - sqrt(2)) * pi\n\nprint(largest_rectangle_area())"
  },
  {
    "example_id": 254,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "819.0"
    ],
    "solution": "a = [0]\na_1 = 0\nfor i in range(19):\n    a_1 += 1\n    a.append(a_1)\n\nfor i in range(92):\n    a_1 -= 1\n    a.append(a_1)\n\nprint(a[1])"
  },
  {
    "example_id": 255,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "for x in range(1,100):\n    if (x**5) == (x**4) + 72*x**3:\n        print(x)"
  },
  {
    "example_id": 256,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "12.0",
      "64.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "a = symbols('a')\nx = symbols('x')\neq = x**3 - 12*x**2 + a*x - 64\nsol = solve(eq, a)\nprint(sol[0])"
  },
  {
    "example_id": 257,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1431.0"
    ],
    "annotated_answers": [
      "504.0"
    ],
    "solution": "# See http://oeis.org/A005974\n\ndef a(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return a(n-1) + a(n-2) + a(n-3)\n\nprint(a(13))"
  },
  {
    "example_id": 258,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from sympy import *\n\nx, y = symbols('x y')\n\ncircle = x**2 + y**2 - 2\nparabola = y**2 - 8*x\n\nsolve_circle = solve(circle, y)\nsolve_parabola = solve(parabola, x)\n\npoint_1 = (solve_circle[0], solve_parabola[0])\npoint_2 = (solve_circle[0], -solve_parabola[0])\npoint_3 = (-solve_circle[0], solve_parabola[0])\npoint_4 = (-solve_circle[0], -solve_parabola[0])\n\narea = (point_1[0] - point_2[0])*(point_1[1] - point_3[1])\n\nprint(\"The area of the quadrilateral is: \", area)"
  },
  {
    "example_id": 259,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.9"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 0.5\nb = 0.5\nprint(a + b/(a*b+1))"
  },
  {
    "example_id": 260,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "count = 0\nfor i in range(1, 20):\n    for j in range(1, 20):\n        for k in range(1, 20):\n            if i**i == (1+1j)**j == k:\n                count += 1\n                print(i, j, k)\nprint(count)"
  },
  {
    "example_id": 261,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "P = 100\nQ = 100\nR = 100\nS = 10\n\nx = np.roots([1, -40, P, Q, R, S])\nx = np.sort(x)\nx = 1 / x\nx = np.sum(x)\nprint(x)"
  },
  {
    "example_id": 262,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "88.0"
    ],
    "annotated_answers": [
      "913.0"
    ],
    "solution": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nsum = 0\nfor i in range(1, 10):\n    sum = sum + fibonacci(i)\nprint(sum)"
  },
  {
    "example_id": 263,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "3.0",
      "6.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a + b + c - 4\neq2 = 1/a + 1/b + 1/c - 5\neq3 = a/b + b/a + a/c + c/a + b/c + c/b\nsol = solve([eq1, eq2], [a, b, c])\nprint(solve(eq3, a)[0])"
  },
  {
    "example_id": 264,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "n = 0\nm = 0\n\nwhile m < 100:\n    m += 1\n    n += m\n\nprint(n)"
  },
  {
    "example_id": 265,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "19.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "f = lambda x: max([abs(x + 15), abs(x + 12), abs(x + 8), abs(x - 1), abs(x - 3), abs(x - 19)])\nf_min = f(0)\nprint(f_min)"
  },
  {
    "example_id": 266,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "-256.0"
    ],
    "solution": "a, b = symbols('a b')\n\neq = 8*x**3 + 4*a*x**2 + 2*b*x + a\n\nlog_base_2_roots = [log(r, 2) for r in eq.roots()]\n\nlog_sum = sum(log_base_2_roots)\n\nprint(log_sum)"
  },
  {
    "example_id": 267,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0",
      "7.0",
      "5.0",
      "6.0",
      "7.0",
      "6.0",
      "5.0",
      "7.0",
      "7.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "from sympy import sqrt\n\na = sqrt(5) + sqrt(6) + sqrt(7)\nb = -sqrt(5) + sqrt(6) + sqrt(7)\nc = sqrt(5) - sqrt(6) + sqrt(7)\nd = sqrt(5) + sqrt(6) - sqrt(7)\n\nprint(a*b*c*d)"
  },
  {
    "example_id": 268,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "w1, w2, w3, w4, w5 = symbols('w1:6')\nz1, z2, z3, z4, z5 = symbols('z1:6')\neq = (z1 - w1) + (z2 - w2) + (z3 - w3) + (z4 - w4) + (z5 - w5)\nslope = sympy.solve(eq, z1)[0]\nprint(slope)"
  },
  {
    "example_id": 269,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def degree(a, b, c):\n    if a == b == c:\n        return 0\n    elif a == b or a == c or b == c:\n        return 1\n    else:\n        return 2\n\nprint(degree(1, 2, 3))"
  },
  {
    "example_id": 270,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "990.0"
    ],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "a = 0\nb = 0\nfor i in range(1, 1001):\n    a += ceil(log(i, 2))\n    b += floor(log(i, 2))\nprint(a-b)"
  },
  {
    "example_id": 271,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "for a in range(1,10):\n    for b in range(1,10):\n        if (a*b) >= 0:\n            if (a*b**0.5) >= 0:\n                print(a)"
  },
  {
    "example_id": 272,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1995.0",
      "1995.0"
    ],
    "annotated_answers": [
      "3980025.0"
    ],
    "solution": "x = symbols('x')\neq = sympy.sqrt(1995) * x**(sympy.log(1995, x)) - x**2\nsol = solve(eq, x)\nprint(sol[0] * sol[1])"
  },
  {
    "example_id": 273,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import *\nf = Function('f')\nx = Symbol('x')\ny = f(x)\nf_expr = y.subs(y, 27*x**2 + 9*x + 3)/(27*x**3 + 9*x**2 + 3*x + 1)\n\n# find the horizontal asymptote\nh_asymptote = solve(f_expr.as_numer_denom()[1], x)\nprint(h_asymptote)"
  },
  {
    "example_id": 274,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "898.0"
    ],
    "solution": "x = [211, 375, 420, 523]\nfor i in range(5, 531 + 1):\n    x.append(x[-1] - x[-2] + x[-3] - x[-4])\nprint(sum(x[531:531 + 753 + 1]) + sum(x[531 + 753 + 1:531 + 753 + 975 + 1]))"
  },
  {
    "example_id": 275,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "2.0",
      "17.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b = symbols('a b')\neq = 1/a + 1/b - 2/17\nsolution = solve(eq, (a, b))\nprint(solution)"
  },
  {
    "example_id": 276,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = symbols('x')\neq = x**4 - 2*x**2 - 7\nsol = solve(eq, x)\nprint(len(sol))"
  },
  {
    "example_id": 277,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = complex(21, -20)\nb = complex(0, 29)\nprint(abs(a/b))"
  },
  {
    "example_id": 278,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "327680.0"
    ],
    "annotated_answers": [
      "327680.0"
    ],
    "solution": "a = [4*n**3 + 6*n**2 + 4*n + 1 for n in range(8, 24)]\nprint(sum(a))"
  },
  {
    "example_id": 279,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = symbols('a')\nx = symbols('x')\neq = x**3 + a*x**2 + a*x + 1\nroots = solve(eq, x)\nfor root in roots:\n    if not root.is_real:\n        a_value = solve(a - 1, a)\n        print(a_value[0])"
  },
  {
    "example_id": 280,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "729.0",
      "8019.0",
      "729.0",
      "8019.0"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "a1 = 27\na2 = a1 * 3\na3 = a2 * 3\na9 = a3 * 3\nprint(a9)\n\nb1 = 99\nb2 = b1 * 3\nb3 = b2 * 3\nb11 = b3 * 3\nb9 = b11 * 3\nprint(b9)\n\nprint(a9, b9)"
  },
  {
    "example_id": 281,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\nremainder = sympy.rem(x**100, x**8 - x**6 + x**4 - x**2 + 1)\nprint(remainder)"
  },
  {
    "example_id": 282,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.25",
      "3.5"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x1 = (3*5 - 3*2) / (5 - 1)\nx2 = (3*5 + 3*2) / (5 + 1)\nprint(x1, x2)"
  },
  {
    "example_id": 283,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\nprint(cos(x)**3 + cos(x)**2)"
  },
  {
    "example_id": 284,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.010168185071755"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "log12 = lambda x: log(x)/log(12)\nx = (162**2 - 1250**2) / (2*(162 - 1250))\nx = exp(log12(x))\nprint(x)"
  },
  {
    "example_id": 285,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 1\ny = 0\nexpression = (x + y)**2\nprint(expression)"
  },
  {
    "example_id": 286,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "7.0",
      "2.0",
      "2.0",
      "1.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "z1, z2 = symbols('z1 z2')\neq = 2*z1 + 7*z2\nden = 2*z1 - 7*z2\ndiv = eq/den\nabs_div = abs(div)\nprint(abs_div)"
  },
  {
    "example_id": 287,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = symbols('x')\neq = x**4 - x**2\neq = eq.subs(x, x**2)\neq = eq.subs(x, -x)\neq = eq.subs(x, x)\nprint(eq)"
  },
  {
    "example_id": 288,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "80.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "f = lambda x: x**2 + 2*x\nprint(f(8))"
  },
  {
    "example_id": 289,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "135.0",
      "2.0",
      "27.0",
      "29.0",
      "2.0",
      "1.0",
      "3.0",
      "3.0",
      "3.0",
      "135.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import roots\nfrom sympy.abc import x\nprint(roots(x**3 + 3*x + 5, x))"
  },
  {
    "example_id": 290,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a = 7j\nb = 4j\nprint(abs(a*b))"
  },
  {
    "example_id": 291,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import symbols, simplify, solve, sqrt, Min\nx = symbols('x')\nf = (x + 5)*(x + 2)/(x + 1)\nmin_f = Min(f, x)\nprint(min_f)"
  },
  {
    "example_id": 292,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = 3 - 2*1\nb = 4 - 3*1\nc = 1\nd = 1/a\nprint(d)"
  },
  {
    "example_id": 293,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import symbols, Sum, factorial, exp\nk, n = symbols('k n')\neq = Sum(k - 3/(k*(k**2 - 1)), (k, 2, n))\nprint(eq)"
  },
  {
    "example_id": 294,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-3.0",
      "-2.0",
      "9.0",
      "23.0",
      "-18.0",
      "-93.0",
      "116.0",
      "315.0",
      "-438.0",
      "-432.0",
      "972.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import symbols, Poly\n\nx = symbols('x')\np = Poly(x**23 + 23*x**17 - 18*x**16 - 24*x**15 + 108*x**14, x)\np2 = Poly((x**4 - 3*x**2 - 2*x + 9)*p, x)\n\nprint(p2.coeffs())"
  },
  {
    "example_id": 295,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "0.5",
      "4.0",
      "0.25"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Find the divisors of 4\n# 4 = 1 * 4\n# 4 = 2 * 2\n# 4 = 4 * 1\ndivisors = [1, 2, 4]\n\n# Find the possible rational roots\npossible_rational_roots = []\nfor divisor in divisors:\n    possible_rational_roots.append(divisor)\n    possible_rational_roots.append(1/divisor)\n\nprint(possible_rational_roots)"
  },
  {
    "example_id": 296,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a, b = symbols('a b')\nx = symbols('x')\n\neq1 = x**2 + a*x + b\neq2 = x**2 - 2\n\nsolve1 = solve(eq1 - eq2, x)\nsolve2 = solve(eq1 - eq2, a)\n\nprint(len(solve1))\nprint(len(solve2))"
  },
  {
    "example_id": 297,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Define Fibonacci sequence\nFibonacci = [0, 1]\nfor i in range(1, 100):\n    Fibonacci.append(Fibonacci[i] + Fibonacci[i - 1])\n\n# Define sum variable\nsum_var = 0\n\n# Define n variable\nn = 1\n\n# Define a and b\na, b = symbols('a b')\n\n# Define log variable\nlog_var = log(a, b)\n\n# Define sum variable\nsum_var = 0\n\n# Define n variable\nn = 1\n\n# Define sum variable\nsum_var = 0\n\n# Define n variable\nn = 1\n\n# Define a and b\na, b = symbols('a b')\n\n# Define log variable\nlog_var = log(a, b)\n\n# Define sum variable\nsum_var = 0\n\n# Define n variable\nn = 1\n\n# Define sum variable\nsum_var = 0\n\n# Define n variable\nn = 1\n\n# Define a and b\na, b = symbols('a b')\n\n# Define log variable\nlog_var = log(a, b)\n\n# Define sum variable\nsum_var = 0\n\n# Define n variable\nn = 1\n\n# Define sum variable\nsum_var = 0\n\n# Define n variable\nn = 1\n\n# Define a and b\na, b = symbols('a b')\n\n# Define log variable\nlog_var = log(a, b)\n\n# Define sum variable\nsum_var = 0\n\n# Define n variable\nn = 1\n\n# Define sum variable\nsum_var = 0\n\n# Define n variable\nn = 1\n\n# Define a and b\na, b = symbols('a b')\n\n# Define log variable\nlog_var = log(a, b)\n\n# Define sum variable\nsum_var = 0\n\n# Define n variable\nn = 1\n\n# Define sum variable\nsum_var = 0\n\n# Define n variable\nn = 1\n\n# Define a and b\na, b = symbols('a b"
  },
  {
    "example_id": 298,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-53.0"
    ],
    "annotated_answers": [
      "440.0"
    ],
    "solution": "a = 4\nb = 2*a**2 - 81\nc = b - a\nprint(c)"
  },
  {
    "example_id": 299,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "from sympy import *\nr, s, t = symbols(\"r, s, t\")\nexpression = (r**2*s**2 + s**2*t**2 + t**2*r**2).expand()\nprint(expression)"
  },
  {
    "example_id": 300,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "a = 5 + sqrt(3)\nprint(a * a.conjugate())"
  },
  {
    "example_id": 301,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "19.0"
    ],
    "annotated_answers": [
      "0.61"
    ],
    "solution": "a1, a2, a3, a4, a5, a6, a7 = symbols('a1 a2 a3 a4 a5 a6 a7')\nA1, A2, A3, A4, A5, A6, A7 = symbols('A1 A2 A3 A4 A5 A6 A7')\neq = [a1 + a2 + a3 + a4 + a5 + a6 + a7 - 19,\n      A1 + A2 + A3 + A4 + A5 + A6 + A7 - 19]\nsol = solve(eq, [A1, A2, A3, A4, A5, A6, A7])\nprint(sol)"
  },
  {
    "example_id": 302,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "from sympy import symbols, solve\n\nx, y = symbols('x y')\nd = solve(x**2/4 + y**2/4 - 1, y)\nprint(d)"
  },
  {
    "example_id": 303,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "945.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "a1 = a2 = 9\na3 = a2 * 3\na4 = a3 * 3\na5 = a4 * 3 + 576\nprint(a1 + a2 + a3 + a4 + a5)"
  },
  {
    "example_id": 304,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0",
      "8.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = symbols('x')\neq1 = abs(x - 1) + abs(x - 3)\neq2 = 8\narea = integrate(eq1 - eq2, (x, -oo, oo))\nprint(area)"
  },
  {
    "example_id": 305,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-26.0"
    ],
    "solution": "# define the variables\nx, y, z = symbols('x y z')\n# define the polynomial\nf = x**3 - 3*x**2 - 4*x + 4\n# define the other polynomial\ng = x**3 + a*x**2 + b*x + c\n# define the roots\nr1, r2, r3 = symbols('r1 r2 r3')\n# define the coefficients\na, b, c = symbols('a b c')\n# define the expression for s\ns1 = r1 + r2*z + r3*z**2\ns2 = r1*z + r2*z**2 + r3\ns3 = r1*z**2 + r2 + r3*z\n# solve for a, b, and c\neqs = [s1, s2, s3]\nsol = solve(eqs, a, b, c)\na, b, c = sol.values()\n# find the real part of the sum of the coefficients of g\nprint(g.coeff_real(x, 0) + g.coeff_real(x, 1) + g.coeff_real(x, 2))"
  },
  {
    "example_id": 306,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x - y - 4\neq2 = x**3 - y**3 - 28\nsolve_set = solve([eq1, eq2], [x, y])\nprint(solve_set[0][0]*solve_set[0][1])"
  },
  {
    "example_id": 307,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x, t = symbols('x t')\neq = x**3 - 3*x**2 + t*x + 27\nfactor = sympy.factor(eq)\nt_value = factor.as_expr().args[2]\nprint(t_value)"
  },
  {
    "example_id": 308,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\neq = x**4 - 80*x - 36\nroots = solve(eq, x)\nsum_of_roots = sum(roots)\nprint(sum_of_roots)"
  },
  {
    "example_id": 309,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0",
      "9.0",
      "9.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\nf = (x**2+3*x)/(x**2+4*x+3)\nholes = f.free_symbols\nb = f.as_numer_denom()[1].count_ops(lambda x: x.is_Pow and x.exp is S.Half)\nc = f.as_numer_denom()[1].count_ops(lambda x: x.is_Pow and x.exp is S.One)\nd = f.as_numer_denom()[1].count_ops(lambda x: x.is_Pow and x.exp is Rational(3, 4))\nprint(len(holes) + 2*b + 3*c + 4*d)"
  },
  {
    "example_id": 310,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import symbols, sqrt, Rational\nfrom sympy.abc import x, y, z\n\n# The largest positive real number such that for any nonnegative real numbers x, y, and z, \n# the inequality \u03bbxy + yz \u2264 \u221a5/2 holds\n\n# \u03bb = sqrt(5)/2\n\n# For any nonnegative real numbers x, y, and z, the inequality \u03bbxy + yz \u2264 \u221a5/2 holds\n\n# Proof:\n# Let x, y, and z be any nonnegative real numbers such that x^2 + y^2 + z^2 = 1.\n# We want to show that \u03bbxy + yz \u2264 \u221a5/2.\n# Note that x^2 + y^2 + z^2 = 1, so x^2 + y^2 = 1 - z^2.\n# We have \u03bbxy + yz = \u03bb(x^2 + y^2) + yz = \u03bb(1 - z^2) + yz \u2264 \u03bb + yz.\n# Since yz \u2264 1, we have \u03bb + yz \u2264 \u03bb + 1 = \u03bb + \u221a5/2.\n# Hence, \u03bbxy + yz \u2264 \u221a5/2.\n\n# Hence, \u03bb = \u221a5/2.\n\n# Therefore, the largest positive real number such that for any nonnegative real numbers x, y, and z, \n# the inequality \u03bbxy + yz \u2264 \u221a5/2 holds is \u221a5/2.\n\n# Example:\n# Let x = 0.5, y = 0.5, and z = 0.5.\n# Then x^2 + y^2 + z^2 = 1, and \u03bbxy + yz = \u03bb(0.5)^2 + 0.5(0.5) = \u03bb + 0.25 \u2264 \u221a5/2.\n# Hence, \u03bb = \u221a5/2.\n\n# Therefore, the largest positive real number such that for any nonnegative real numbers x, y, and z, \n# the inequality \u03bbxy + yz \u2264 \u221a"
  },
  {
    "example_id": 311,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b = symbols('a b')\neq = a + 1/b*(a - b)\nmin_value = solve(eq, a, dict=True)[0][a]\nprint(min_value)"
  },
  {
    "example_id": 312,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "w = 1\nh = 10\nd = 13\nvol = h*w*d\nvol_slices = 10\nremaining_vol = vol - vol_slices\nprint(remaining_vol)"
  },
  {
    "example_id": 313,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = (3*x + 4*y + 12*z)\nmax_value = eq.subs([(x, 1), (y, 0), (z, 0)])\nprint(max_value)"
  },
  {
    "example_id": 314,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "134.0"
    ],
    "solution": "for i in range(2, 27):\n    if i / 100 < i - 1:\n        print(i)\n        break"
  },
  {
    "example_id": 315,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "224.0"
    ],
    "solution": "n = 2007\na = [3] * n\nfor i in range(n-1):\n    a.append(a[i]*a[i+1])\na = [a[i]**2 + 2007 for i in range(n)]\nprint(max(int(a[i]/(a[i-1]*a[i-2])) for i in range(n-2, -1, -1)))"
  },
  {
    "example_id": 316,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "12.0",
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "a, b = symbols('a b')\nab = (9*a - 12)*(3 + 4*b)\nprint(ab)"
  },
  {
    "example_id": 317,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "72.22222222222223"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\n\nexpression = (2*a + 1/3*b)**2 + (2*b + 1/3*c)**2 + (2*c + 1/3*a)**2\nprint(expression)"
  },
  {
    "example_id": 318,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3988.0"
    ],
    "annotated_answers": [
      "997.0"
    ],
    "solution": "x, y = symbols('x y')\ncircle = x**2 + y**2 - 1994**2\ntangent = 2*1994*x + 2*1994*y - 1\nsolution = solve(circle - tangent, x)\nprint(solution[0] + solution[1])"
  },
  {
    "example_id": 319,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nx = symbols('x')\neq = (x + c)/(x**2 + a*x + b)\nprint(eq)"
  },
  {
    "example_id": 320,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "7.0",
      "5.0",
      "4.0",
      "3.0",
      "3.0",
      "5.0",
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import symbols, solve\n\nx = symbols('x')\nf = (2*x**7 - 5*x**4 + 3*x**3 - x + 5)\nq = solve(f, x)[0]\nprint(q)"
  },
  {
    "example_id": 321,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a = 1\nb = 1/a\nexpression = a**4 + b**8\nprint(expression)"
  },
  {
    "example_id": 322,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "z = symbols('z')\nf = sympy.im(z**5)/sympy.im(z)**5\nf_value = solve(f - 1, z)\nprint(f_value[0])"
  },
  {
    "example_id": 323,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "1.0",
      "1.0",
      "2.0",
      "3.0",
      "143640.0",
      "-21.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = symbols('x')\neq = x*(x + 1)*(x + 2)*(x + 3) + 1\nprint(eq)\nprint(eq - 379**2)\nprint(solve(eq - 379**2, x)[0])"
  },
  {
    "example_id": 324,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "3.0",
      "5.0",
      "6.0",
      "2.0",
      "6.0",
      "3.0",
      "5.0",
      "7.0",
      "2.0",
      "5.0",
      "3.0",
      "6.0",
      "7.0",
      "2.0",
      "3.0",
      "5.0",
      "6.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "from sympy import sqrt\n\na = -sqrt(3) + sqrt(5) + sqrt(6) + sqrt(7)\nb = sqrt(3) - sqrt(5) + sqrt(6) + sqrt(7)\nc = sqrt(3) + sqrt(5) - sqrt(6) + sqrt(7)\nd = sqrt(3) + sqrt(5) + sqrt(6) - sqrt(7)\n\nsum = (a**2 + b**2 + c**2 + d**2)\n\nprint(sum)"
  },
  {
    "example_id": 325,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def f(x):\n    return (x - 1)**7 + 3*(x - 1)**6 + (x - 1)**5 + 1\n\ndef g(x):\n    return (x - 1)**5\n\ndef h(x):\n    return f(x)/g(x)\n\nprint(min(h(x) for x in range(2, 100)))"
  },
  {
    "example_id": 326,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-22.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x*y - 24\neq2 = x*z - 48\neq3 = y*z - 72\nsol = solve([eq1, eq2, eq3], [x, y, z])\nprint(sol[0][0] + sol[0][1] + sol[0][2])"
  },
  {
    "example_id": 327,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-338016.0"
    ],
    "solution": "from math import factorial\n\ndef roots(n):\n    return [complex(0, 1)**k for k in range(n+1)]\n\ndef f(x):\n    return x**2016 + x**2015 + x**2014 + x**2013 + x**2012 + x**2011 + x**2010 + x**2009 + x**2008 + x**2007 + x**2006 + x**2005 + x**2004 + x**2003 + x**2002 + x**2001 + x**2000 + x**1999 + x**1998 + x**1997 + x**1996 + x**1995 + x**1994 + x**1993 + x**1992 + x**1991 + x**1990 + x**1989 + x**1988 + x**1987 + x**1986 + x**1985 + x**1984 + x**1983 + x**1982 + x**1981 + x**1980 + x**1979 + x**1978 + x**1977 + x**1976 + x**1975 + x**1974 + x**1973 + x**1972 + x**1971 + x**1970 + x**1969 + x**1968 + x**1967 + x**1966 + x**1965 + x**1964 + x**1963 + x**1962 + x**1961 + x**1960 + x**1959 + x**1958 + x**1957 + x**1956 + x**1955 + x**1954 + x**1953 + x**1952 + x**1951 + x**1"
  },
  {
    "example_id": 328,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "k, x, y = symbols('k x y')\neq1 = k*x**2 + y**2 - 1\neq2 = x**2 - 2*x*y + y**2 - 1\neq3 = x**2 - 2*x*y + y**2 - 1\nsol = solve([eq1, eq2, eq3], [k, x, y])\nprint(sol[0])"
  },
  {
    "example_id": 329,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4014.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    return x * 2\n\nf_value = f(2007)\nprint(f_value)"
  },
  {
    "example_id": 330,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.85629799036563",
      "3.14159265358979"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = symbols('x')\neq = log(2*(2*x + 8)/(x + 2)) + log(2*(x + 2)/(x - 5))\neq = eq.subs(x, 0)\neq = eq.evalf()\neq = eq.subs(x, 10)\neq = eq.evalf()\neq = eq.subs(x, 100)\neq = eq.evalf()\neq = eq.subs(x, 1000)\neq = eq.evalf()\nprint(eq)"
  },
  {
    "example_id": 331,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "import cmath\nprint(abs((1-1j)**8))"
  },
  {
    "example_id": 332,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "3.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, b = symbols('a b')\neq = (a**3 - b**3)/(a - b)\nsolve_eq = solve(eq - 0, a)\nprint(solve_eq)"
  },
  {
    "example_id": 333,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "250009.0"
    ],
    "annotated_answers": [
      "996506.0"
    ],
    "solution": "def generate_sequence(n):\n    sequence = [1, 2, 3, 4]\n    for i in range(4, n):\n        sequence.append(i + 3)\n        sequence.append(sequence[i - 1] + 5)\n    return sequence\n\nprint(generate_sequence(500000)[-1])"
  },
  {
    "example_id": 334,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = symbols('x')\neq = x**9 - x**6 + x**3 - 1\nremainder = sympy.rem(eq, x**2 + x + 1)\nprint(remainder)"
  },
  {
    "example_id": 335,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.3799999999999994"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "t = 0.8\nm = -2*t\nT = (t, 9-t**2)\nX = (T[0], T[1]+m)\nY = (T[0]+1, T[1]+m)\n\narea = 0.5 * abs(X[0]*Y[1] - X[1]*Y[0])\nprint(area)"
  },
  {
    "example_id": 336,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import math\n\ndef find_length(x1, y1, x2, y2):\n    return math.sqrt((x2-x1)**2 + (y2-y1)**2)\n\ndef find_tangent_length(x1, y1, x2, y2, x3, y3, x4, y4):\n    # find the distance between the two circles\n    distance = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    # find the angle between the two lines\n    angle = math.acos((x2-x1) * (x3-x4) + (y2-y1) * (y3-y4))\n    # find the length of the tangent line\n    length = distance / math.sin(angle)\n    return length\n\ndef main():\n    x1, y1 = 10, 0\n    x2, y2 = -15, 0\n    x3, y3 = 0, 12\n    x4, y4 = 0, -12\n    length = find_tangent_length(x1, y1, x2, y2, x3, y3, x4, y4)\n    print(length)\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "example_id": 337,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "14.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Ellipse equation\nx = 3\ny = 2\n\n# Transform into standard form\na = 3\nb = 2\nh = 5\nk = 4\n\n# Sum of h + k + a + b\nprint(h + k + a + b)"
  },
  {
    "example_id": 338,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = [1, 1, 0]\nfor i in range(1, 99):\n    a.append(a[i] - 2*a[i-1] + a[i-2])\nprint(sum(a[98:]))"
  },
  {
    "example_id": 339,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "import cmath\n\nn = 0\nfor i in range(-100, 100):\n    for j in range(-100, 100):\n        z1 = cmath.rect(1, i * cmath.pi)\n        z2 = cmath.rect(1, j * cmath.pi)\n        if (z1 * z2).imag == 0 and z1 / z2 == cmath.rect(1, 0):\n            n += 1\nprint(n)"
  },
  {
    "example_id": 340,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1024.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "log_256 = 2**8\nlog_64 = 2**6\nlog_64_over_log_256 = log_64 / log_256\nlog_256_over_log_64 = log_256 / log_64\nlog_256_over_log_64_over_log_256 = log_256 / log_64_over_log_256\nprint(log_256_over_log_64_over_log_256)"
  },
  {
    "example_id": 341,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import Symbol, expand, factor\nx = Symbol('x')\nf = expand((x**2 + 5*x + 7)**2)\nprint(factor(f))"
  },
  {
    "example_id": 342,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\neq = x**12 - 1\nfactors = sympy.factor(eq)\npoly_list = list(factors.args)\nk_value = len(poly_list)\nprint(k_value)"
  },
  {
    "example_id": 343,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a = 1\nb = 1\nh = 0\nk = 0\nexpression = a + k\nprint(expression)"
  },
  {
    "example_id": 344,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "5.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import *\nx, y, z = symbols('x y z')\nexpression = 2*x**2 + 5*y**2 + 2*z**2 + 4*x*y - 4*y*z - 2*z - 2*x\nprint(expression)"
  },
  {
    "example_id": 345,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 5-12j\nprint(abs(x))"
  },
  {
    "example_id": 346,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "307.0"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "def p(x):\n    if x == 1:\n        return 1\n    elif x == 2:\n        return 2\n    elif x == 3:\n        return 3\n    elif x == 99:\n        return 99\n    elif x == 100:\n        return 100\n    elif x == 101:\n        return 102\n    else:\n        return p(x-1) + p(x-2) + p(x-3) + p(x-99) + p(x-100) + p(x-101)\n\nprint(p(102))"
  },
  {
    "example_id": 347,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x = symbols('x')\np = symbols('p')\n\neq = p**2 + p - 6*x\neq1 = p**2 + p - 6*10\n\nsolve_eq = solve(eq, p)\nsolve_eq1 = solve(eq1, p)\n\nsum = 0\nfor i in solve_eq:\n    sum = sum + i\nfor j in solve_eq1:\n    sum = sum + j\n\nprint(sum)"
  },
  {
    "example_id": 348,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-46.0"
    ],
    "solution": "p, a, b = symbols('p a b')\neq = a**4 - 6*a**3 + 26*a**2 + p*a + 65 - (b**4 - 6*b**3 + 26*b**2 + p*b + 65)\nsolve(eq, p)"
  },
  {
    "example_id": 349,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "973.0"
    ],
    "solution": "def a(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*a(n//2)\n    else:\n        return 3*a(n//3)\n\nn = 1\nwhile n < 1000:\n    n += 1\n    if a(n) < 1000:\n        break\n\nprint(n + a(n))"
  },
  {
    "example_id": 350,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "def f(x):\n    return x**2 + 6*x + 1\n\ndef R(a, b):\n    return [p for p in [(x, y) for x in range(a, b + 1) for y in range(a, b + 1) if f(x) + f(y) <= 0 and f(x) - f(y) <= 0]]\n\ndef area(R):\n    return sum([(x[0] - x[1]) * (y[0] + y[1]) for x, y in zip(R, R[1:])])\n\ndef closest(a, b):\n    return min(range(a, b + 1), key=lambda x: abs(area(R(x, x + 1)) - area(R(x + 1, x + 2))))\n\nprint(closest(0, 100))"
  },
  {
    "example_id": 351,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "K, L, M = symbols('K L M')\nx = symbols('x')\n\neq = x**4 - K*x**3 + K*x**2 + L*x + M\n\na, b, c, d = solve(eq, x)\n\nsum = a**2 + b**2 + c**2 + d**2\n\nprint(sum)"
  },
  {
    "example_id": 352,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2018.0"
    ],
    "annotated_answers": [
      "4036.0"
    ],
    "solution": "n = 2018\na = 1/n\nwhile a > 1/2018:\n    n += 1\n    a = 1/n\nprint(n)"
  },
  {
    "example_id": 353,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-588.0"
    ],
    "solution": "from sympy import symbols, factorial, binomial\n\nn = 15\nk = symbols('k')\nexpr = 1\nfor i in range(1, n):\n    expr += binomial(n, i) * (1 - i * k)\n\nprint(expr.coeff(k, 2))"
  },
  {
    "example_id": 354,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "19941989.0"
    ],
    "annotated_answers": [
      "19941989.0"
    ],
    "solution": "n = 19941994\nresult = math.floor(math.sqrt(n**2 - 10*n + 29))\nprint(result)"
  },
  {
    "example_id": 355,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-28.0",
      "2.0",
      "4.0",
      "1.0",
      "4.0",
      "1.0",
      "4.0",
      "2.0",
      "-28.0",
      "2.0",
      "4.0",
      "1.0",
      "4.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x, y = symbols('x y')\nconstraint = x**2 + 2*y**2 - x*(2*y + 1)/2\nprint(solve(constraint, (x, y)))"
  },
  {
    "example_id": 356,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-398354630313.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "p = symbols('x')\npoly = p**4 + 8*p**3 + 13*p**2 + 8*p + 1\nans = poly.subs(p, 55) - poly.subs(p, 83) - poly.subs(p, 204) + poly.subs(p, 232)\nans += poly.subs(p, 103)\nfor i in range(286):\n    ans -= poly.subs(p, i + 1)\nprint(ans)"
  },
  {
    "example_id": 357,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "-150.0"
    ],
    "solution": "a = []\nfor i in range(100):\n    a.append((-1)**(i+1)*(3*i+2))\nprint(sum(a))"
  },
  {
    "example_id": 358,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "import cmath\n\ndef solve_equation(z):\n    return (z**3 + z**2 - abs(z)**2 + 2*z)\n\nsolutions = []\nfor z in cmath.polar(1) + cmath.polar(1j):\n    if solve_equation(z) == 0:\n        solutions.append(z)\n\nprint(solutions)"
  },
  {
    "example_id": 359,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "p = 0\nq = 1"
  },
  {
    "example_id": 360,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b = symbols('a b')\nab = 8\neq = (a**2 + b**2)/(a - b)\nmin_val = eq.subs(a, 3).subs(b, 2)\nprint(min_val)"
  },
  {
    "example_id": 361,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "x, y, z, w = symbols('x y z w')\neqs = [x**2 + y**2 + z**2 + w**2 - 1,\n       x**2 + y**2 + z**2 + w**2 - 1,\n       x**2 + y**2 + z**2 + w**2 - 1,\n       x**2 + y**2 + z**2 + w**2 - 1]\nres = solve(eqs, [x, y, z, w])\nprint(res)"
  },
  {
    "example_id": 362,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a, b, c, d, e = symbols('a b c d e')\nx = symbols('x')\nexpr = 8*x**3 - 27\neq = (a*x + b)*(c*x**2 + d*x + e)\nsol = solve(eq - expr, [a, b, c, d, e])\nprint(sol)"
  },
  {
    "example_id": 363,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-123456787.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Using fermat's little theorem\n\na = 123456789\nb = 2\n\ndef fermat_little_theorem(n, p):\n    return pow(n, p - 1, p) == 1\n\nwhile not fermat_little_theorem(a, b):\n    a += 1\n\nprint(b - a)"
  },
  {
    "example_id": 364,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def find_real_solutions(expression):\n    \"\"\"\n    Returns a list of real solutions to the equation |x| \\* |x-5| = 3.\n    \"\"\"\n    solutions = []\n    # Find the real solutions to the equation |x| = 3.\n    for x in range(1, 6):\n        if abs(x) == 3:\n            solutions.append(x)\n    # Find the real solutions to the equation |x-5| = 3.\n    for x in range(1, 6):\n        if abs(x - 5) == 3:\n            solutions.append(x)\n    return solutions\n\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    expression = \"|x| \\* |x-5| = 3\"\n    solutions = find_real_solutions(expression)\n    print(\"The real solutions to the equation\", expression, \"are:\")\n    for solution in solutions:\n        print(solution)\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 365,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "14.0",
      "5.0",
      "10.0",
      "5.0",
      "5.0",
      "5.0",
      "14.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\neq = 5*x**4 - 10*x**3 + 10*x**2 - 5*x - 11\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 366,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "585937519.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "n = 1\na = 14\nwhile n <= 10:\n    a = 24 - 5*a\n    n += 1\n\na_n = a\np = a_n - (24 - 5*a_n)\nq = 5\nr = 14\nprint(p + q + r)"
  },
  {
    "example_id": 367,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "from itertools import combinations\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nans = 0\nfor n in range(1, 10):\n    for comb in combinations(a, n):\n        s = sum(comb)\n        if s == 96 and sum(x**2 for x in comb) == 144 and sum(x**3 for x in comb) == 216:\n            ans += 1\n\nprint(ans)"
  },
  {
    "example_id": 368,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "5.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "x = symbols('x')\nP = x**2 - 2*x + 2\nP_value = solve(P - 181, x)[0]\nP_value2 = solve(2*x**2 - 4*x + 3 - P_value, x)[0]\nprint(P_value2)"
  },
  {
    "example_id": 369,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = symbols('x')\neq = 5*x**4 - 8*x**3 + 2*x**2 + 4*x + 7\na, b, c, d, e = symbols('a b c d e')\nf = eq/(x + 2)**4\na_value = a + b/x + c/(x + 2)**2 + d/(x + 2)**3 + e/(x + 2)**4\nprint(a_value)"
  },
  {
    "example_id": 370,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "import sympy as sym\nx = sym.Symbol('x')\nf = sym.Function('f')\nexpression = x**2*f(x) + f(1-x) - x**4 + 2*x\nsolution = sym.solve(expression, f(x))\nfor f_x in solution:\n    print(f_x)"
  },
  {
    "example_id": 371,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "-5.0",
      "7.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = -1\nb = 2\nc = 3\n\nab = a*b\nac = a*c\nbc = b*c\n\nprint(ab - c, ac - b, bc - a)"
  },
  {
    "example_id": 372,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "576.0"
    ],
    "solution": "x = 8**2\nprint(x)"
  },
  {
    "example_id": 373,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "# define variables\nx, y, z = symbols('x y z')\n\n# define expression\nexpr = (x**4 + 1)*(y**4 + 1)*(z**4 + 1)\n\n# define denominator\ndenom = x*y**2*z\n\n# define logarithm\nlog_expr = log(expr, denom)\n\n# define expression\nexpr_1 = expr / denom\n\n# define expression\nexpr_2 = (expr_1 - 1) / (a*b*c)\n\n# define expression\nexpr_3 = expr_2.expand()\n\n# define expression\nexpr_4 = expr_3.simplify()\n\n# define expression\nexpr_5 = expr_4.subs({a: 1, b: 1, c: 1})\n\n# define expression\nexpr_6 = expr_5.expand()\n\n# define expression\nexpr_7 = expr_6.simplify()\n\n# define expression\nexpr_8 = expr_7.subs({a: 1, b: 1, c: 1})\n\n# define expression\nexpr_9 = expr_8.expand()\n\n# define expression\nexpr_10 = expr_9.simplify()\n\n# define expression\nexpr_11 = expr_10.subs({a: 1, b: 1, c: 1})\n\n# define expression\nexpr_12 = expr_11.expand()\n\n# define expression\nexpr_13 = expr_12.simplify()\n\n# define expression\nexpr_14 = expr_13.subs({a: 1, b: 1, c: 1})\n\n# define expression\nexpr_15 = expr_14.expand()\n\n# define expression\nexpr_16 = expr_15.simplify()\n\n# define expression\nexpr_17 = expr_16.subs({a: 1, b: 1, c: 1})\n\n# define expression\nexpr_18 = expr_17.expand()\n\n# define expression\nexpr_19 = expr_18.simplify()"
  },
  {
    "example_id": 374,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3968.0"
    ],
    "annotated_answers": [
      "3968.0"
    ],
    "solution": "def f(x):\n    if x**0.5 in set(range(1,10)):\n        return x**0.5\n    else:\n        return (f(x-1))**2 - 1\n\nprint(f(8))"
  },
  {
    "example_id": 375,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = symbols('x')\neq = 4*x**3 - 41*x**2 + 10*x - 1989\nprint(solve(eq, x)[0])"
  },
  {
    "example_id": 376,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "82.0"
    ],
    "annotated_answers": [
      "181.0"
    ],
    "solution": "a = [0, 0, 0]\na[0] = 1\na[1] = 10\na[2] = 100\nfor i in range(3, 1332):\n    a.append(2*a[i-1] - 2*a[i-2] + a[i-3])\nprint(a[1331])"
  },
  {
    "example_id": 377,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "10.0",
      "11.0",
      "10.0",
      "9.0",
      "100.0",
      "101.0",
      "100.0",
      "99.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols('x:102')\nexpr = 0\nfor i in range(1, 101):\n    expr += x[i] * x[i+1]\nprint(expr)"
  },
  {
    "example_id": 378,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = symbols('n')\neq = 3*n**3 - 12*n\nsolution = solve(eq, n)\nprint(len(solution))"
  },
  {
    "example_id": 379,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "z = 9 + I*b\nz2 = z**2\nz3 = z**3\nimaginary_part = solve(log(z2).imag() - log(z3).imag(), b)\nprint(imaginary_part[0])"
  },
  {
    "example_id": 380,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z1 = 1\nz2 = 2\nz3 = 3\n\nexpression = abs(9*z1*z2 + 4*z1*z3 + z2*z3)\nprint(expression)"
  },
  {
    "example_id": 381,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "10.0",
      "4.60517018598809",
      "2.0",
      "-0.460517018598809",
      "10.0",
      "2.0",
      "1.0",
      "5.0",
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\neq = 2*log(x, 10) - log(1/100, x)\nprint(eq.diff())\nprint(eq.diff().subs(x, 10))"
  },
  {
    "example_id": 382,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = symbols('x')\neq = x**5 + 5*x**4 + 10*x**3 + 10*x**2 - 5*x + 1\nx_value = solve(eq - 10, x)\nprint((x_value[0] + 1)**4)"
  },
  {
    "example_id": 383,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\nf = (2*x - 6)/(x**3 - 7*x**2 - 2*x + 6)\nf_value = f.subs(x, 0)\nprint(f_value)"
  },
  {
    "example_id": 384,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "k = 0\nprint(k)"
  },
  {
    "example_id": 385,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "1.0",
      "6.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from itertools import product\n\nfor x, y, z in product(range(1, 13), repeat=3):\n    if x + 2 * y + 4 * z == 12 and x * y + 2 * x * z + 4 * y * z == 22 and x * y * z == 6:\n        print(x, y, z)"
  },
  {
    "example_id": 386,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "90.0",
      "90.0",
      "6.0",
      "4.0",
      "2.0",
      "8.0",
      "88.0",
      "86.0",
      "84.0",
      "1.0",
      "90.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "from sympy import symbols, expand, factor, simplify\nz = symbols('z')\nexpression = expand((z+1/z)**2 + (z**2 + 1/z**2)**2 + (z**3 + 1/z**3)**2 + (z**45 + 1/z**45)**2)\nprint(simplify(expression))"
  },
  {
    "example_id": 387,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "14.0",
      "8.0",
      "6.0",
      "5.0",
      "5.0",
      "5.0",
      "6.0",
      "8.0",
      "14.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "n = 10\na_n = 2\na_0 = 66\n\nfor i in range(1, n):\n    a_i = (a_n * a_0) // (i * (n - i))\n    print(a_i)"
  },
  {
    "example_id": 388,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b, x = symbols('a b x')\neq1 = a*x + b\neq2 = a*(a*x + b) + b\neq3 = a*(a*(a*x + b) + b) + b\neq4 = 8*x + 21\nsol = solve([eq1, eq2, eq3, eq4], [a, b])\nprint(sol[0])"
  },
  {
    "example_id": 389,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = c*(b - c)\neq2 = c*(a - c)\neq3 = eq1 + eq2\nsol = solve(eq3, c)\nprint(sol[0])"
  },
  {
    "example_id": 390,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.549114687985394"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\n\ndef distance(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    return math.sqrt((x2-x1)**2 + (y2-y1)**2)\n\ndef max_distance(p):\n    x, y = p\n    f1x, f1y = 4, 0\n    f2x, f2y = -4, 0\n    qx = (x**2 + (y-3)**2 - 4) / (2*(x-f1x))\n    qy = (x**2 + (y-3)**2 - 4) / (2*(y-f1y))\n    q = (qx, qy)\n    d1 = distance(p, q)\n    d2 = distance(p, (f1x, f1y)) + distance(q, (f2x, f2y))\n    return max(d1, d2)\n\nprint(max_distance((0, 3)))"
  },
  {
    "example_id": 391,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "59.0",
      "2.0",
      "4.0",
      "3.0",
      "59.0",
      "2.0",
      "4.0",
      "3.0",
      "59.0",
      "2.0"
    ],
    "annotated_answers": [
      "-376.0"
    ],
    "solution": "from sympy import Symbol\nr, s, t = Symbol('r'), Symbol('s'), Symbol('t')\nf = lambda x: 4*x**3 - 59*x**2\nprint(f(r) + f(s) + f(t))"
  },
  {
    "example_id": 392,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "31.0",
      "31.0",
      "2.0",
      "31.0",
      "31.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "from math import gcd\n\na = 2\nb = 31\n\ngcd_a_b = gcd(a, b)\n\nif gcd_a_b == 1:\n    print(f\"The largest term in the binomial expansion of (1 + {a}/{b})^{b} is of the form {a}/{b}, where a and b are relatively prime positive integers.  The value of b is {b}.\")\nelse:\n    print(f\"The largest term in the binomial expansion of (1 + {a}/{b})^{b} is not of the form {a}/{b}, where a and b are relatively prime positive integers.  The value of b is {b}.\")"
  },
  {
    "example_id": 393,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(0)"
  },
  {
    "example_id": 394,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# define variables\nx, y, z = symbols('x y z')\n\n# define equation\neq = x**2 + 2*y**2 + 5*z**2 - 22\n\n# find maximum value of xy + xz + yz\nmax_value = 0\nfor x in range(0, 10):\n    for y in range(0, 10):\n        for z in range(0, 10):\n            if eq.subs([(x, x), (y, y), (z, z)]) == 0:\n                max_value = max(max_value, x*y + x*z + y*z)\nprint(max_value)"
  },
  {
    "example_id": 395,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.905441406869805"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "# Number of second-degree polynomials f(x) with integer coefficients and integer zeros for which f(0) = 2010\nprint((-1 + sqrt(1 + 8*2010))/2)"
  },
  {
    "example_id": 396,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "27.0",
      "81.0",
      "3.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a, b = symbols('a b')\neq = 3*a**3*sqrt(3) + 2/(a*b - 2*b**2)\neq = eq.subs(b, 2*a)\neq = eq.subs(a, 3)\nprint(eq)"
  },
  {
    "example_id": 397,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "12.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\nx = Symbol('x')\ny = Symbol('y')\nF1 = 4*x**2 - 8*x + y**2 + 4*y - 8\nF2 = 4*x**2 - 8*x + y**2 - 4*y - 8\nd = solve(F1 + F2, x)[0]\nprint(d)"
  },
  {
    "example_id": 398,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "x = symbols('x')\nf = sympy.Function('f')\nf_seq = [0, f(0), f(f(0)), f(f(f(0))), f(f(f(f(0)))), f(f(f(f(f(0))))), f(f(f(f(f(f(0))))))]\nf_seq = [0, f(0), f(f(0)), f(f(f(0))), f(f(f(f(0)))), f(f(f(f(f(0))))), f(f(f(f(f(f(0))))))]\nf_seq_sum = sum(f_seq)\nprint(f_seq_sum)"
  },
  {
    "example_id": 399,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# We have to find P(5)\n# By using the remainder theorem\n# We can find P(x)\n# We know that P(0) = 5\n# So we can set P(x) = 5 + Q(x)\n# Where Q(x) is a polynomial of degree 3\n# We can find Q(5) by using the remainder theorem\n# We can find Q(x) by using the fact that (x - 1)(x - 4) and (x - 2)(x - 3) are factors of P(x)\n# We know that P(x) = 5 + Q(x)\n# So we can set P(5) = 5 + Q(5)\n# Q(5) = 2Q(4) + 3Q(3) + 4Q(2) + 5Q(1)\n# We know that Q(4) = 2Q(3) + 3Q(2) + 4Q(1)\n# Q(3) = 2Q(2) + 3Q(1)\n# Q(2) = 2Q(1)\n# Q(1) = 1\n# So we can set P(5) = 5 + 2Q(4) + 3Q(3) + 4Q(2) + 5Q(1)\n# P(5) = 5 + 2(2Q(3) + 3Q(2) + 4Q(1)) + 3Q(3) + 4Q(2) + 5Q(1)\n# P(5) = 5 + 4Q(3) + 6Q(2) + 5Q(1)\n# P(5) = 5 + 4(2Q(2) + 3Q(1)) + 6Q(2) + 5Q(1)\n# P(5) = 5 + 8Q(2) + 9Q(1)\n# P(5) = 5 + 8(2Q(1)) + 9Q(1)\n# P(5) = 5 + 16Q(1) + 9Q(1)\n# P(5)"
  },
  {
    "example_id": 400,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import itertools\n\ndef max_value(x, y, z):\n    return (x * y + z) * (x * z + y)\n\nfor x, y, z in itertools.product(range(0, 4), repeat=3):\n    if x + y + z == 3:\n        print(max(max_value(x, y, z), max_value(y, z, x), max_value(z, x, y)))\n        break"
  },
  {
    "example_id": 401,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "# Solve the equation:\n# x^4 + kx^2 + 90x - 2009 = 0\n\n# Find the roots of the equation\n# using the quadratic formula\n\n# The roots are:\n# alpha, beta, gamma, and delta\n\n# Use the fact that alpha beta = 49\n# to find k\n\n# The equation becomes:\n# (x - alpha)(x - beta)(x - gamma)(x - delta) = 0\n# Expanding and simplifying:\n# x^4 + kx^2 + 90x - 2009 = 0\n# Solving for k:\n# k = 90 - 90x - x^2 - 49x\n# Simplifying:\n# k = -x^2 - 48x - 199\n# Finding the value of k:\n# k = -1\n# The roots are:\n# alpha = 1\n# beta = 1\n# gamma = 1\n# delta = 1"
  },
  {
    "example_id": 402,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "501.0"
    ],
    "solution": "k, x = symbols('k x')\neq = log(k*x) - 2*log(x+2)\neq_solve = solve(eq, k)\nprint(len(eq_solve))"
  },
  {
    "example_id": 403,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "0.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import symbols, solve\nx = symbols('x')\nf = (x**3 - x**2 + x) / (6*x**2 - 9*x)\neq1 = f.free_symbols\neq2 = f.as_numer_denom()[0].free_symbols\neq3 = f.as_numer_denom()[1].free_symbols\neq4 = f.as_numer_denom()[1].as_numer_denom()[1].free_symbols\nprint(len(eq1))\nprint(len(eq2))\nprint(len(eq3))\nprint(len(eq4))"
  },
  {
    "example_id": 404,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "4.0",
      "6.0",
      "12.0",
      "2.0",
      "12.0",
      "8.0",
      "27.0",
      "2.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "from sympy import *\nx, y, z = symbols('x, y, z')\nf = 3*x**2 + 12*y**2 + 27*z**2 - 4*x*y - 6*x*z - 12*y*z - 8*y - 24*z\nprint(f)\nprint(f.expand())"
  },
  {
    "example_id": 405,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "f, d, q, r = symbols('f d q r')\neq = f/d\ndeg_q = solve(eq.as_poly().total_degree() - 3, q.as_poly().total_degree())\nprint(deg_q[0])"
  },
  {
    "example_id": 406,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 2\nb = 3\n\nx1 = (a + b)/(b - a)\nx2 = (a - b)/(a - b)\n\nif (x1 - x2) == 0:\n    print(\"x1 = x2\")\nelse:\n    print(\"x1!= x2\")"
  },
  {
    "example_id": 407,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n# First equation\neq1 = x**4 + a*x**3 + b*x**2 + c*x + 1\n# Second equation\neq2 = x**4 + 2*a*x**3 + 2*b*x**2 + 2*c*x + 1\n# Find the square root of both equations\nsol1 = sqrt(eq1)\nsol2 = sqrt(eq2)\n# Find the sum of the coefficients\nsum_coeff = a + b + c\nprint(sum_coeff)"
  },
  {
    "example_id": 408,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef f(x):\n    return sum(2**i*x**(2000-i) for i in range(1, 2001)) + 3\n\ndef num_real_roots(f, a, b):\n    count = 0\n    for x in range(a, b+1):\n        if f(x) == 0:\n            count += 1\n    return count\n\ndef main():\n    print(num_real_roots(f, -100, 100))\n\nmain()"
  },
  {
    "example_id": 409,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# The number of units in S is 10\nprint(10)"
  },
  {
    "example_id": 410,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2101.0"
    ],
    "annotated_answers": [
      "2101.0"
    ],
    "solution": "x = 5\ny = 4\nexpression = x**4 + x**3*y + x**2*y**2 + x*y**3 + y**4\nprint(expression)"
  },
  {
    "example_id": 411,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "565.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "a = 10\nb = 14\nc = 22\nd = 519\nexpression = a + b + c + d\nprint(expression)"
  },
  {
    "example_id": 412,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "48.0",
      "12.0",
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq1 = a**4 + b**4 + c**4 + d**4 - 48\neq2 = a*b*c*d - 12\nsolution = solve([eq1, eq2], [a, b, c, d])\nprint(solution)"
  },
  {
    "example_id": 413,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "import sympy as sp\n\na, b, c = sp.symbols('a b c')\n\nexpression = a*b*c + a*b + a*c + b*c + a + b + c + 1\n\nprint(expression)"
  },
  {
    "example_id": 414,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1986.0"
    ],
    "annotated_answers": [
      "331.0"
    ],
    "solution": "f = [0] * 1986\nf[1] = 1986\nfor i in range(2, 1986):\n    f[i] = (-1)**(i + 1) * (i - 2) * f[i - 1]\nprint(sum(f))"
  },
  {
    "example_id": 415,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "a = 0\nb = 0\nprint(a + b)"
  },
  {
    "example_id": 416,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1115.0"
    ],
    "annotated_answers": [
      "1999.0"
    ],
    "solution": "n = 2\nsum = 0\nwhile sum < 10000:\n    n += 1\n    sum = sum + (((n-1) % 10) + ((n-2) % 10))\n\nprint(n)"
  },
  {
    "example_id": 417,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b = symbols('a b')\neq = a + 2*b - 1\nden = a*b\nmin_value = solve(eq, b)\nprint(min_value[0])"
  },
  {
    "example_id": 418,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import symbols\nfrom sympy import factorial\nfrom sympy import simplify\nfrom sympy import expand\nfrom sympy import collect\n\na, b, c, d, e = symbols('a, b, c, d, e')\nexpr = (a**5/(a - b)*(a - c)*(a - d)*(a - e) + b**5/(b - a)*(b - c)*(b - d)*(b - e)\n        + c**5/(c - a)*(c - b)*(c - d)*(c - e) + d**5/(d - a)*(d - b)*(d - c)*(d - e)\n        + e**5/(e - a)*(e - b)*(e - c)*(e - d))\nprint(simplify(expr))"
  },
  {
    "example_id": 419,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a, b = 2-4*1j, 2+1j\nprint(abs(a/b))"
  },
  {
    "example_id": 420,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y = symbols('x y')\neq = x*y*(x**2 - y**2) - (x**2 + y**2)\neq_solve = solve(eq, x**2 + y**2)\nprint(eq_solve[0])"
  },
  {
    "example_id": 421,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c = 1, 2, 3\nexpression = (a + b)*(a + c)*(b + c)/(a*b*c)\nprint(expression)"
  },
  {
    "example_id": 422,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "101.0"
    ],
    "solution": "x = 100000000 // 10**16\nprint(x)"
  },
  {
    "example_id": 423,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def f(x):\n    return abs(x - 15) + abs(x - p) + abs(x - p - 15)\n\n\np = 1\nmin_value = f(p)\nfor x in range(p + 1, 15 + 1):\n    value = f(x)\n    if value < min_value:\n        min_value = value\n\nprint(min_value)"
  },
  {
    "example_id": 424,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0",
      "36.0",
      "36.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = log(a, 6) + log(b, 6) + log(c, 6) - 6\neq2 = log(b, 6) - log(a, 6)\neq3 = log(b, 6) - log(c, 6)\neq4 = b - a\neq5 = eq2**2\neq6 = solve((eq1, eq2, eq3, eq4, eq5), (a, b, c))\nprint(eq6[0])"
  },
  {
    "example_id": 425,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "863.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# p(x) = x^4 + 4x^3 + 7x^2 + 10x + 11\n# p(0) = 11\n# p(4) = 4^4 + 4(4)^3 + 7(4)^2 + 10(4) + 11 = 256 + 576 + 240 + 160 + 11 = 863\nprint(863)"
  },
  {
    "example_id": 426,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "50.0",
      "-2.0",
      "10.0",
      "105.0",
      "2.0",
      "50.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x, y = symbols('x y')\na = 5\nb = 5\nA = ((3 - x)**2/a**2 + (10 - y + sqrt(105) - y)**2/b**2)\nB = ((3 - x)**2/a**2 + (10 - y - sqrt(105) - y)**2/b**2)\nsemi_major = sympy.sqrt(A/2)\nprint(semi_major)"
  },
  {
    "example_id": 427,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def number_of_triplets(a, b, c):\n    if a**2 + b**2 == c**2:\n        return 1\n    else:\n        return 0\n\na = 0\nb = 0\nc = 0\ntotal = 0\nwhile a <= 10:\n    b = 0\n    while b <= 10:\n        c = 0\n        while c <= 10:\n            if a**2 + b**2 == c**2:\n                total += 1\n            c += 1\n        b += 1\n    a += 1\nprint(total)"
  },
  {
    "example_id": 428,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "1.0",
      "11.0",
      "5.0",
      "11.0",
      "5.0",
      "9.0",
      "611.0",
      "1.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nexpr = (5*x + 9)**611 + (x + 5)**11 + (x - 1)**11 + 3*x**2 + 1\nrem = expr.rewrite(x - 2)\nprint(rem)"
  },
  {
    "example_id": 429,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x**4 + 4*y**2 + 4*z**4\ncon = x*y*z - 2\nmin_value = solve(eq, y)\nprint(min_value[0])"
  },
  {
    "example_id": 430,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "7.0",
      "2.0",
      "225.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x, y = symbols('x y')\neq = x**2 + 8*x*y + 7*y**2 - 225\ndistance = sympy.sqrt(eq)\nprint(distance)"
  },
  {
    "example_id": 431,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "F1 = (10, 2)\nF2 = (-16, 2)\nd = abs(F1[0] - F2[0])\na = abs(F1[1] - F2[1])\nh = (F1[0] + F2[0]) / 2\nk = (F1[1] + F2[1]) / 2\nprint(h + k + a + d)"
  },
  {
    "example_id": 432,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6872.0"
    ],
    "annotated_answers": [
      "962.0"
    ],
    "solution": "# First root is 7\n# Second root is 13\n# Third root is 17\nk = 581 - 7**3 - 13**3 - 17**3\nprint(k)"
  },
  {
    "example_id": 433,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "2.0",
      "9.0",
      "2.0",
      "9.0",
      "2.0",
      "2.0",
      "9.0",
      "7.0",
      "-7.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = symbols('x')\nf = (2*x + 9)/(x - 7)\nf_inv = f.subs(x, f)\nf_inv_inv = f_inv.subs(x, f_inv)\nprint(f_inv_inv)"
  },
  {
    "example_id": 434,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z = symbols('z')\nprint(abs(z**(-2)))"
  },
  {
    "example_id": 435,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "c = 1\nf = lambda x: c*x/(2*x + 3)\n\nfor i in range(10):\n    x = f(f(i))\n    if x!= i:\n        break\nelse:\n    print(c)"
  },
  {
    "example_id": 436,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nexpression = a + b + c\nprint(expression)"
  },
  {
    "example_id": 437,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nfrac = (7*x-2)/(x**2-4)\nA,B = fraction(frac)\nprint(A+B)"
  },
  {
    "example_id": 438,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "F = lambda n: (1/sqrt(5))*( (1 + sqrt(5))**n - (1 - sqrt(5))**n )/(2**n*sqrt(5))\nsum = 0\nfor n in range(1, 100000):\n    sum += 1/F(n)*F(n+2)\nprint(sum)"
  },
  {
    "example_id": 439,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7022.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "expression = sum([abs(xi - 1) for xi in range(120)])\nprint(expression)"
  },
  {
    "example_id": 440,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "# Define x as a symbol\nx = symbols('x')\n# Define the expression\nexpr = sqrt(3620 + 322*x - 4*x**2)\n# Solve for x\nsolve(expr, x)"
  },
  {
    "example_id": 441,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2222222222222223"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 1/3\nb = 1/3\nc = 1/3\nexpression = 2*a**2 + 3*b**2 + 6*c**2\nprint(expression)"
  },
  {
    "example_id": 442,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "3.0",
      "-9.0",
      "2.0",
      "27.0",
      "2.0",
      "-4.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x, p, q, r = symbols('x p q r')\neq1 = x**3 + 5*x**2 + p*x + q\neq2 = x**3 + x**2 + p*x + r\nroots = [solve(eq1, x), solve(eq2, x)]\nprint(roots[0][0] + roots[1][0])"
  },
  {
    "example_id": 443,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "def f(x):\n    return x**3 - 49*x**2 + 623*x - 2015\n\ndef g(x):\n    return f(x + 5)\n\nroots = []\nfor i in range(-100, 100):\n    if g(i) == 0:\n        roots.append(i)\nprint(sum(roots))"
  },
  {
    "example_id": 444,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "27648.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq = a*b**2*c**3*d**4\nconstraint = a + b + c + d - 10\nsol = solve(eq, [a, b, c, d])\nsol_value = sol[0][0]\nprint(sol_value)"
  },
  {
    "example_id": 445,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import Poly, symbols\nx = symbols('x')\npoly = Poly(x**4 - 1 - 2*x**2 + x + 3, x)\nprint(poly.degree())"
  },
  {
    "example_id": 446,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "154629.0"
    ],
    "annotated_answers": [
      "516.0"
    ],
    "solution": "print(sum(range(745, 496, -1)))"
  },
  {
    "example_id": 447,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.28"
    ],
    "annotated_answers": [
      "0.63"
    ],
    "solution": "log3_6 = 1.63\nlog3_6_val = log3_6**2\nlog9_4_val = (log3_6_val/log3_6)**(1/2)\nlog9_4_val = round(log9_4_val, 2)\nprint(log9_4_val)"
  },
  {
    "example_id": 448,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "5.0",
      "4.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "189.0",
      "8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = 2*a**3 + 3*a**2*b + 4*a*b**2 + 5*b**3\nabc_plus_a_plus_b_plus_c = a*b*c + a + b + c\nprint(solve(eq, a, b, c)[0][0] + abc_plus_a_plus_b_plus_c)"
  },
  {
    "example_id": 449,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "4.0",
      "4.0",
      "5.0",
      "5.0",
      "6.0",
      "6.0",
      "7.0"
    ],
    "annotated_answers": [
      "117649.0"
    ],
    "solution": "from sympy import symbols, prod, I\nr1, r2, r3, r4, r5, r6, r7 = symbols('r1 r2 r3 r4 r5 r6 r7')\nroots = [r1, r2, r3, r4, r5, r6, r7]\nexpression = prod([r1 + r2 for r1, r2 in zip(roots, roots[1:])])\nprint(expression)"
  },
  {
    "example_id": 450,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.82842712474619",
      "26.0",
      "3.0",
      "43.0",
      "1.5",
      "2.82842712474619",
      "3.0",
      "43.0",
      "26.0",
      "1.5"
    ],
    "annotated_answers": [
      "828.0"
    ],
    "solution": "from sympy import symbols, expand, simplify, sqrt, symbols\nfrom sympy.abc import a, b\nx = 52 + 6*sqrt(43)\ny = 52 - 6*sqrt(43)\nprint(expand(simplify(x**(3/2) - y**(3/2))))"
  },
  {
    "example_id": 451,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1428.0"
    ],
    "annotated_answers": [
      "198.0"
    ],
    "solution": "n = 19\na = 99\nfor i in range(2, n+1):\n    a = a + sum(range(1, i+1))\nprint(a)"
  },
  {
    "example_id": 452,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "3.0",
      "-3.0",
      "3.0",
      "-6.0",
      "-3.0",
      "3.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x + y - z - 0\neq2 = x*z - x*y + y*z - 27\neq3 = x*y*z - 54\nsol = solve([eq1, eq2, eq3], [x, y, z])\nprint(sol)"
  },
  {
    "example_id": 453,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0",
      "82.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1325.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\n\na, b, c = solve(x**3 + 7*x**2 - 11*x - 2, x)\nprint(a + b + c)"
  },
  {
    "example_id": 454,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "123456.0"
    ],
    "annotated_answers": [
      "229.0"
    ],
    "solution": "p = 0\nfor i in range(1, 7):\n    p += i*10**(6-i)\nprint(p)"
  },
  {
    "example_id": 455,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "0.25"
    ],
    "annotated_answers": [
      "697.0"
    ],
    "solution": "z, n = symbols('z n')\neq = z/(z + n) - 4*1j\nsolution = solve(eq, n)\nprint(solution[0])"
  },
  {
    "example_id": 456,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "a, b = symbols('a b')\nsqrt_a = sympy.sqrt(a)\nsqrt_b = sympy.sqrt(b)\ndiff = sympy.expand_mul((sqrt_a - sqrt_b))\nmax_value = sympy.expand_mul((a - 5*b))\nprint(max_value.subs(diff, 20))"
  },
  {
    "example_id": 457,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.158114871269602",
      "3.0",
      "1111.0",
      "100.0",
      "0.158116847915517",
      "9998.0",
      "3.0",
      "1111.0",
      "0.158118824783851",
      "9997.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import Sum, sqrt, symbols\n\nn = symbols('n')\nexpr = 1/(sqrt(n) + sqrt(n + 1))/(sqrt(n**(1/4)) + sqrt(n + 1)**(1/4))\nsum_expr = Sum(expr, (n, 1, 9999))\nprint(sum_expr.doit())"
  },
  {
    "example_id": 458,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "x = 0.5\nexpression = x**2001 + (x - 0.5)**2001\nprint(expression)"
  },
  {
    "example_id": 459,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "214.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq1 = a*b + c*d\neq2 = a*c + b*d\neq3 = a*d + b*c\neq1 = 143\neq2 = 150\neq3 = 169\nsolve((eq1, eq2, eq3), (a, b, c, d))"
  },
  {
    "example_id": 460,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1004.0"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "n = 2007\nsum = 0\nfor i in range(1, n + 1):\n    if i % 2 == 0:\n        sum += i\n    else:\n        sum -= i\nprint(sum)"
  },
  {
    "example_id": 461,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\n\ndef func(x):\n    return 8*math.log(x, n)*math.log(x, m) - 7*math.log(x, n) - 6*math.log(x, m) - 2013\n\n\ndef find_min(m, n):\n    min_value = float('inf')\n    for i in range(1, n):\n        for j in range(1, m):\n            x = i*j\n            if func(x) == 0:\n                min_value = min(min_value, x)\n    return m + n\n\n\nprint(find_min(1, 1))"
  },
  {
    "example_id": 462,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = sympy.sqrt(3/4 - sympy.sqrt(1/2)) - sympy.sqrt(3/4 + sympy.sqrt(1/2))\nprint(x)"
  },
  {
    "example_id": 463,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "S = {0, 10}\n\nwhile True:\n    x = symbols('x')\n    for n in range(1, 10):\n        a = [symbols(f'a_{i}') for i in range(n+1)]\n        if all(i in S for i in a):\n            S.add(x)\n            break\n    else:\n        break\n\nprint(len(S))"
  },
  {
    "example_id": 464,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1024.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "d = 0\nwhile d < 1024:\n    d += 1024\n    d *= 2\n    d -= 1024\nprint(d)"
  },
  {
    "example_id": 465,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = symbols('x')\neq1 = 1/(x**2 - 10*x - 29)\neq2 = 1/(x**2 - 10*x - 45)\neq3 = 2/(x**2 - 10*x - 69)\nsol = solve(eq1 + eq2 - eq3, x)\nprint(sol[0])"
  },
  {
    "example_id": 466,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "4022030.0"
    ],
    "solution": "x = symbols('x')\nf = lambda x: (x - floor(x) - (1/(2*floor(x)))) * abs(x - floor(x)) if x < floor(x) + (1/floor(x)) else f(x - 1/floor(x))\ng = lambda x: 2**(x - 2007)\nintersections = solve(f(x) - g(x), x)\nprint(len(intersections))"
  },
  {
    "example_id": 467,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "269.0"
    ],
    "annotated_answers": [
      "269.0"
    ],
    "solution": "a = 10 - 13*I\nb = 10 + 13*I\nprint(abs(a)*abs(b))"
  },
  {
    "example_id": 468,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "sasha_point = 15 + 8j\nchloe_point = 3 - 4j\ndistance_to_origin_from_sasha = abs(sasha_point)\ndistance_to_origin_from_chloe = abs(chloe_point)\nprint(distance_to_origin_from_chloe - distance_to_origin_from_sasha)"
  },
  {
    "example_id": 469,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "7.0",
      "8.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "x = symbols('x')\np = x**2 + 2*x + 1\np_value = p.subs([(x, sqrt(7)), (x, sqrt(11)), (x, sqrt(17))])\nprint(p_value)"
  },
  {
    "example_id": 470,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "number = 2011**2011\nprint(number // 100 % 10)"
  },
  {
    "example_id": 471,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6981.0",
      "2.0",
      "1323.0",
      "2.0",
      "1.0",
      "3.0",
      "3.0",
      "3.0",
      "25.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "from sympy import symbols, expand_power_base, solve\n\nx = symbols('x')\n\nroots = solve(x**3 + 9*x**2 + 2*x + 1, x)\n\nr, s, t = roots\n\nprint(1/r**2 + 1/s**2 + 1/t**2)"
  },
  {
    "example_id": 472,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "6.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "z1, z2, z3, z4 = symbols('z1 z2 z3 z4')\nq = z1**4 - z1**3 - z1**2 - 1\np = z1**6 - z1**5 - z1**3 - z1**2 - z1\nprint(p.subs(z1, z2) + p.subs(z1, z3) + p.subs(z1, z4))"
  },
  {
    "example_id": 473,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.1"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "a = 5\nb = 2\nc = 3\nr1 = 1\nr2 = 2\nr3 = 3\nr4 = 4\n\nsum = (r1/2) + (r2/4) + (r3/5) + (r4/8)\nprint(sum)"
  },
  {
    "example_id": 474,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.38083151964686"
    ],
    "annotated_answers": [
      "-64.0"
    ],
    "solution": "from math import sqrt\nx = 16\nans = (5*x + 8)**(1/2)\nprint(ans)"
  },
  {
    "example_id": 475,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-10879.0"
    ],
    "solution": "x, b = symbols('x b')\neq1 = 1988*x**2 + b*x + 8891\neq2 = 8891*x**2 + b*x + 1988\nsolution = solve([eq1, eq2], b)\nprint(solution)"
  },
  {
    "example_id": 476,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import math\n\ndef count_distinct_rationals(n):\n    count = 0\n    for a in range(n):\n        for b in range(n):\n            for c in range(n):\n                for d in range(n):\n                    if a * math.log10(2) + b * math.log10(3) + c * math.log10(5) + d * math.log10(7) == 2005:\n                        count += 1\n    return count\n\nprint(count_distinct_rationals(10))"
  },
  {
    "example_id": 477,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "tau = (1 + sqrt(5)) / 2"
  },
  {
    "example_id": 478,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import symbols, limit, oo, S\nx = symbols('x')\nf = 1/(x**3 - 3*x**2 + 3*x - 1)\nlim = limit(f, x, oo)\nif lim == 0:\n    print('The function has a removable singularity.')\nelif lim == S.NaN:\n    print('The function has a pole.')\nelse:\n    print('The function has a vertical asymptote.')"
  },
  {
    "example_id": 479,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4096.0",
      "1.0",
      "3.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "a, b = symbols('a b')\neq1 = log(a, 8) + log(b**2, 4) - 5\neq2 = log(b, 8) + log(a**2, 4) - 7\neq1_solve = solve(eq1, b)\neq2_solve = solve(eq2, a)\nprint(eq1_solve[0]*eq2_solve[0])"
  },
  {
    "example_id": 480,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\n\nexpr = (b + c + d)/a + (a + c + d)/b + (a + b + d)/c + (a + b + c)/d\n\nsol = sympy.solve(expr, (a, b, c, d))\nprint(sol)"
  },
  {
    "example_id": 481,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2269.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "n = 2017\nf = [0,1]\nfor i in range(2, n+1):\n    f.append(f[i-2] + f[i-1])\nf = [f[i] % 3 for i in range(n+1)]\nprint(sum(f))"
  },
  {
    "example_id": 482,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "x, y = symbols('x y')\neq = log(x, y) + log(y, x) - 7\neq.expand()\neq.simplify()\nresult = eq.subs({x: 2, y: 3})\nprint(result)"
  },
  {
    "example_id": 483,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "70.0",
      "9.0",
      "14.0",
      "51.0",
      "9.0",
      "658.0",
      "27.0",
      "1.0",
      "3.0",
      "14.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import sympy\n\nx = sympy.Symbol('x')\npoly = x**4 - 8*x**3 + 7\nroots = sympy.solve(poly, x)\na, b, c, d = roots\nprint(a + b + c + d)"
  },
  {
    "example_id": 484,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "501.0"
    ],
    "annotated_answers": [
      "49896.0"
    ],
    "solution": "N = 2007 // 4\nprint(N)"
  },
  {
    "example_id": 485,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "5.0",
      "4.0",
      "-10.0",
      "2.0",
      "5.0",
      "4.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "z = symbols('z')\neq = z + 1/z - (1 + sqrt(5))/2\nz_value = solve(eq, z)\nprint(z_value[0])\nz_value_powered = z_value[0]**85\nprint(z_value_powered + 1/z_value_powered)"
  },
  {
    "example_id": 486,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n, omega = symbols('n \\omega')\nexpr = (omega + 1)**n\neq = expr.expand()\nprint(eq)"
  },
  {
    "example_id": 487,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "496.0"
    ],
    "solution": "def floor_x(n):\n    x = (n - 1) / n\n    return x\n\ndef is_floor_x(n):\n    x = floor_x(n)\n    return n == x * int(x)\n\nprint(sum(1 for n in range(1, 1000) if is_floor_x(n)))"
  },
  {
    "example_id": 488,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import symbols, sqrt\nfrom sympy.abc import a, b, h, k, x\n\nx, y = symbols('x y')\n\nhyp_eq = (y - k)**2/a**2 - (x - h)**2/b**2 - 1\n\nh_value = solve(hyp_eq, h)[0]\nk_value = solve(hyp_eq, k)[0]\na_value = solve(hyp_eq, a)[0]\nb_value = solve(hyp_eq, b)[0]\n\nprint(h_value + k_value + a_value + b_value)"
  },
  {
    "example_id": 489,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "a1 = 10\na2 = 20\nexpression = abs(a1 - a2)\nprint(expression)"
  },
  {
    "example_id": 490,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, x = symbols('a b c x')\neq = (x + a)**2 / (a - b) * (a - c) + (x + b)**2 / (b - a) * (b - c) + (x + c)**2 / (c - a) * (c - b)\nprint(simplify(eq))"
  },
  {
    "example_id": 491,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nexpr = (x + y)*(y + z)\neq = expr - 1\neq_solved = solve(eq, x)\nprint(eq_solved[0])"
  },
  {
    "example_id": 492,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "n = symbols('n')\nk = 2002//n\neq = sympy.floor(2002/n) - k\neq = eq.subs(n, 1)\neq = eq.simplify()\neq = eq.expand()\nprint(eq)"
  },
  {
    "example_id": 493,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "3.0",
      "9.0",
      "3.0"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = (a/b + b/c + c/a - 7)**3\neq2 = (b/a + c/b + a/c - 9)**3\nans = eq1 + eq2\nprint(ans)"
  },
  {
    "example_id": 494,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "0.5"
    ],
    "annotated_answers": [
      "4014013.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nx = (a**2 + b**2 + c**2)**(1/2)\nprint(x)"
  },
  {
    "example_id": 495,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "73.0",
      "27.0",
      "606.0",
      "9.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from sympy import symbols, solve\nx = symbols('x')\nf = x**3 + 2*x**2 + 3*x + 1\nf_value = solve(f - 5, x)\nprint(f_value[0])"
  },
  {
    "example_id": 496,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "from sympy import symbols, Min\n\nx = symbols('x')\neq = x*(x + 1)*(x + 2)*(x + 3)\nprint(Min(eq))"
  },
  {
    "example_id": 497,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    if 0 <= x < 2:\n        return 2*x\n    elif 2 <= x <= 4:\n        return 8 - 2*x\n    else:\n        return 0\n\nx = 0\nwhile f(x) > f(x + 1):\n    x += 1\nprint(x)"
  },
  {
    "example_id": 498,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def f(m):\n    return m**2 + m + 1\n\nn = 1\nwhile True:\n    product = 1\n    for i in range(1, n + 1):\n        product *= f(i**2)\n    if product >= f(1)**2 * f(2)**2 * f(n)**2:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 499,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.649924689425514",
      "28.0"
    ],
    "annotated_answers": [
      "3996.0"
    ],
    "solution": "n = 1998\nresult = (n**2 - (n-1)**2)*(n**2 - (n-2)**2)*(n**2 - (n-3)**2)*(n**2 - (n-4)**2)/(1**2 - (n-1)**2)*(2**2 - (n-2)**2)*(3**2 - (n-3)**2)*(4**2 - (n-4)**2)\nprint(result)"
  },
  {
    "example_id": 500,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "for a in range(1,101):\n    for b in range(1,101):\n        for c in range(1,101):\n            if a**2 + b**2 + c**2 == a*b + a*c + b*c:\n                print(a,b,c)"
  },
  {
    "example_id": 501,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-3.0",
      "-4.0",
      "-3.0",
      "0.0",
      "5.0",
      "12.0",
      "21.0",
      "32.0",
      "60.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x_values = []\nfor y in range(1, 10):\n    x = y**2 - 6*y + 5\n    x_values.append(x)\n    print(x)\nprint(sum(x_values))"
  },
  {
    "example_id": 502,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\neq = x**3 - 3*x**2 - 9*x + 30\nremainder = sympy.rem(eq, x - 3)\nprint(remainder)"
  }
]