[
  {
    "example_id": 0,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "print(2 + 8)"
  },
  {
    "example_id": 1,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "5.0",
      "7.0",
      "9.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "print(1, 3, 5, 7, 9)"
  },
  {
    "example_id": 2,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1556.0",
      "4.0",
      "1.0",
      "5.0",
      "2.0",
      "1.0",
      "5.0",
      "2.0",
      "40.0",
      "1.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "from sympy import symbols, solve\n\nomega = symbols('omega')\neq = 2*omega**2 - 4*omega - 30\nprint(abs(eq.subs(omega, 1-5*1j)))"
  },
  {
    "example_id": 3,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "2484.0",
      "125.0",
      "27.0",
      "-4.0",
      "1551.0",
      "5.0"
    ],
    "annotated_answers": [
      "195.0"
    ],
    "solution": "n, k, a = symbols('n k a')\neq = a + 2*n*(k-1) + 3*n*(k-1)**2 + 5*n*(k-1)**3\nremainder = sympy.rem(eq, a + 715)\nk_value = solve(remainder - 836, k)\nprint(k_value[0])"
  },
  {
    "example_id": 4,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "2.0",
      "5.0",
      "6.0",
      "15.0",
      "30.0",
      "15.0",
      "6.0",
      "8.0",
      "5.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "x = symbols('x')\nf = 17*log(30, x) - 3*log(x, 5) + 20*log(x, 15) - 3*log(x, 6) + 20*log(x, 2)\nf_sol = solve(f, x)\nprint(f_sol)"
  },
  {
    "example_id": 5,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "241.0",
      "241.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = symbols('x')\nf = x**2 + x + 1\nf = f.subs(x, x + 1)\nf = f.subs(x, x - 1)\nf = f.subs(x, 15)\nf = f.subs(x, 20)\nprint(f)\nf = f.subs(x, 20152015)\nprint(f)"
  },
  {
    "example_id": 6,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "5.0",
      "5.0",
      "6.0",
      "4.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "x, y, z, v, w = symbols('x y z v w')\nrow1 = x + y + z + v\nrow2 = w + y + z + v\nrow3 = x + y + w + v\nrow4 = x + y + z + w\n\ncol1 = x + y + z + v\ncol2 = w + y + z + v\ncol3 = x + y + w + v\ncol4 = x + y + z + w\n\ndiag1 = x + y + z + v\ndiag2 = w + y + z + v\ndiag3 = x + y + w + v\ndiag4 = x + y + z + w\n\neq = [row1, row2, row3, row4, col1, col2, col3, col4, diag1, diag2, diag3, diag4]\n\nsum_diag1 = sum(eq[0:4])\nsum_diag2 = sum(eq[4:8])\nsum_diag3 = sum(eq[8:12])\nsum_diag4 = sum(eq[12:16])\n\nsum_row1 = sum(eq[0:3])\nsum_row2 = sum(eq[3:6])\nsum_row3 = sum(eq[6:9])\nsum_row4 = sum(eq[9:12])\n\nsum_col1 = sum(eq[0:4:2])\nsum_col2 = sum(eq[1:4:2])\nsum_col3 = sum(eq[2:4:2])\nsum_col4 = sum(eq[3:4:2])\n\nsum_all = sum_diag1 + sum_diag2 + sum_diag3 + sum_diag4\n\nprint(sum_all - (sum_row1 + sum_row2 + sum_row3 + sum_row4 + sum_col1 + sum_col2 + sum_col3 + sum_col4))"
  },
  {
    "example_id": 7,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "0.333333333333333",
      "2.0",
      "3.0",
      "0.333333333333333"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "a, b = symbols('a b')\nexpr = (a**(1/3) + a**(1/3)) * (2 - 2*a**(1/3) - a**(1/3))\nprint(expr.subs(a, b))"
  },
  {
    "example_id": 8,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "999.0",
      "999.0",
      "999.0",
      "999.0"
    ],
    "annotated_answers": [
      "177.0"
    ],
    "solution": "f = lambda x: 999 if x in [0, 1, 2, 999] else 0\nprint(f(0))\nprint(f(1))\nprint(f(2))\nprint(f(999))"
  },
  {
    "example_id": 9,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "3.0",
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "m, n = symbols('m n')\neq = 3*m + 4*n - 100\nsolve_eq = solve(eq)\nprint(solve_eq)"
  },
  {
    "example_id": 10,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "r, s = symbols('r s')\neq = (1/(r + s)) - ((1/r) + (1/s))\neq = eq.subs(log, sympy.log)\nprint(eq)"
  },
  {
    "example_id": 11,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.838586246872757",
      "0.222855066362781",
      "2.0",
      "0.448011965956253",
      "3.36585415364449",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "z, w = symbols('z w')\neq1 = z + 20*1j/w - 5 - 1j\neq2 = w + 12*1j/z - 4 + 10*1j\nsol = solve([eq1, eq2], [z, w])\nprint(log(sol[0][0]**2 + sol[0][1]**2))"
  },
  {
    "example_id": 12,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "def ordered_pairs(n):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if abs(i + j * 1j) <= n:\n                count += 1\n    return count\n\nprint(ordered_pairs(5))"
  },
  {
    "example_id": 13,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "6.0",
      "12.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = a + b + c - 4*a*b*c\nf = 4*sympy.sqrt(a) + 6*sympy.sqrt(b) + 12*sympy.sqrt(c)\ng = sympy.sqrt(a*b*c)\nmaximum = solve(eq, a, b, c, \n                dict=True)[0]\nprint('Maximum value is:', f/g)"
  },
  {
    "example_id": 14,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "1.0",
      "-2.0",
      "3.0",
      "4.0",
      "-81.0",
      "7585.0",
      "1.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = symbols('x')\np1 = x**8 + 3*x**4 - 4\np2 = x**8 - 3*x**4 + 4\np3 = x**8 + 9*x**4 - 16\np4 = x**8 - 9*x**4 + 16\np5 = x**8 + 25*x**4 - 64\np6 = x**8 - 25*x**4 + 64\np7 = x**8 + 49*x**4 - 128\np8 = x**8 - 49*x**4 + 128\np9 = x**8 + 81*x**4 - 256\np10 = x**8 - 81*x**4 + 256\n\neq = p1*p2*p3*p4*p5*p6*p7*p8*p9*p10\n\nsolution = solve(eq, x)\nprint(solution)\n\nx = 1\nresult = 0\nfor i in solution:\n    result += i\nprint(result)"
  },
  {
    "example_id": 15,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "integer_part = [1, 2, 3, 4, 5]\nfor u in integer_part:\n    for v in integer_part:\n        if (u * v) == 10 and (u.real % 1 == 0 and u.imag % 1 == 0 and v.real % 1 == 0 and v.imag % 1 == 0):\n            print(\"({}, {})\".format(u, v))"
  },
  {
    "example_id": 16,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "5.0",
      "4.0",
      "6.0",
      "18.0",
      "4.0",
      "72.0",
      "3.0",
      "49.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = 4*a + 3*b + c**3/(a - b)*b\nconstraint = a + b + c - 4\nsol = solve([eq, constraint], [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 17,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0",
      "5.0",
      "2.0",
      "5.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a, b = symbols('a b')\neq1 = a + b - 5\neq2 = a**2 + b**2 - 15\n\n# solve the system of equations\nsol = solve([eq1, eq2], [a, b])\n\n# print the result\nprint(sol[0][0]**3 + sol[0][1]**3)"
  },
  {
    "example_id": 18,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = 2\nb = 3\nprint(a + b)"
  },
  {
    "example_id": 19,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2016.0",
      "10.0",
      "2016.0",
      "100.0",
      "2016.0",
      "1000.0",
      "2016.0",
      "1001.0",
      "2016.0"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "n = 2016\ns = symbols('s1:{}'.format(n))\navg = sum(s)/n\nprint(avg)"
  },
  {
    "example_id": 20,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "k, x = symbols('k x')\neq = k*x**4 + 9*x**3 + k*x**2 + 32*x - 11\nremainder = sympy.rem(eq, x + 5)\nk_value = solve(remainder - 4, k)\nprint(k_value[0])"
  },
  {
    "example_id": 21,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5486782579.0"
    ],
    "annotated_answers": [
      "2039191.0"
    ],
    "solution": "def f(x):\n    return x**2\n\ndef g(x):\n    return x**2 + 1\n\ndef h(x):\n    return x**2 - 1\n\ndef i(x):\n    return x**2 + x\n\ndef j(x):\n    return x**2 - x\n\ndef k(x):\n    return x**2 + 2*x\n\ndef l(x):\n    return x**2 - 2*x\n\ndef m(x):\n    return x**2 + 3*x\n\ndef n(x):\n    return x**2 - 3*x\n\ndef o(x):\n    return x**2 + 4*x\n\ndef p(x):\n    return x**2 - 4*x\n\ndef q(x):\n    return x**2 + 5*x\n\ndef r(x):\n    return x**2 - 5*x\n\ndef s(x):\n    return x**2 + 6*x\n\ndef t(x):\n    return x**2 - 6*x\n\ndef u(x):\n    return x**2 + 7*x\n\ndef v(x):\n    return x**2 - 7*x\n\ndef w(x):\n    return x**2 + 8*x\n\ndef x(x):\n    return x**2 - 8*x\n\ndef y(x):\n    return x**2 + 9*x\n\ndef z(x):\n    return x**2 - 9*x\n\nsum = 0\nfor n in range(-2019, 2019):\n    sum += f(n)\n\nprint(sum)"
  },
  {
    "example_id": 22,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z1, z2 = symbols('z1 z2')\neq = (z1/z2 + z2/z1 - 1)\nnorm = (z1 - z2)**2\nprint(norm)"
  },
  {
    "example_id": 23,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq = sqrt(3)*(a + 1/(b + 1/(c + 1/(d + 1/sympy.oo))))\neq_solve = solve(eq - 2, b)\nprint(eq_solve[0])"
  },
  {
    "example_id": 24,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "576.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "print(sum(range(1, 49, 2)))"
  },
  {
    "example_id": 25,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "4.0",
      "6.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = symbols('z')\nexpr = abs(z + 5 - 3*I) + abs(z - 7 + 2*I)\nprint(expr.evalf(subs={z: 1 + 2*I}))"
  },
  {
    "example_id": 26,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "27.0",
      "3.0",
      "54.0",
      "3.0",
      "-108.0",
      "3.0",
      "3.0",
      "54.0",
      "3.0",
      "108.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x, y, z = symbols('x y z')\na = x**3 + 2*y**3 + 4*z**3\nb = x*y*z\nresult = solve(a/b - 1, x)\nprint(result)"
  },
  {
    "example_id": 27,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "51.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y, z, w = symbols('x y z w')\neqs = [2*y - x - 17/x,\n       2*z - y - 17/y,\n       2*w - z - 17/z,\n       2*x - w - 17/w]\nsol = solve(eqs, [x, y, z, w])\nprint(sol)"
  },
  {
    "example_id": 28,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "n = 100\nk = (log(n, 2) - 1) / 2\nprint(int(k))"
  },
  {
    "example_id": 29,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "29800.0"
    ],
    "solution": "for a in range(1, 101):\n    for b in range(1, 101):\n        for c in range(1, 101):\n            if a**2 * b + b**2 * c + c**2 * a == a * b**2 + b * c**2 + c * a**2:\n                print(a, b, c)"
  },
  {
    "example_id": 30,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "0.444444444444444",
      "0.833333333333333",
      "1.0",
      "0.04",
      "2.0",
      "0.5",
      "1.0",
      "0.0277777777777778",
      "2.0",
      "0.5",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = (16 - x**2)**(1/2) + (25 - y**2)**(1/2) + (36 - z**2)**(1/2)\nmaximum = solve(eq, x, y, z, maximize=True)\nprint(maximum[0])"
  },
  {
    "example_id": 31,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "5.0",
      "2.0",
      "3.0",
      "5.0",
      "2.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-71.0"
    ],
    "solution": "x = symbols('x')\np = x**8 + x**7 + x**6 + x**5 + x**4 + x**3 + x**2 + x + 1\nr = p.subs(x, sqrt(2) + sqrt(3) + sqrt(5))\nprint(r)"
  },
  {
    "example_id": 32,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "341.0"
    ],
    "solution": "coefficients = [0, 0, 0, 1, 1]\nprint(coefficients)"
  },
  {
    "example_id": 33,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.9999919999936"
    ],
    "annotated_answers": [
      "250.0"
    ],
    "solution": "# Define the expression\nexpr = (1 / (sympy.sqrt(5**4 + 1) - sympy.sqrt(5**4 - 1)))\n\n# Simplify the expression\nexpr = expr.simplify()\n\n# Find the value of the expression\nvalue = expr.evalf()\n\nprint(value)"
  },
  {
    "example_id": 34,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "x = symbols('x')\nn = 100\neq = (x + 1)*(x + 3)*(x + 5)\nfor i in range(2, n):\n    eq *= x + i\nprint(eq.coeff(x**49))"
  },
  {
    "example_id": 35,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0",
      "4.0",
      "13.0",
      "4.0",
      "2.0",
      "1.0",
      "13.0",
      "4.0",
      "-1.0",
      "4.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = symbols('z')\nz5 = z**5\neq = z + 1/z + z**2 + 1/z**2\nsol = solve(eq - 1, z)\nprint(sol)"
  },
  {
    "example_id": 36,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nexpr = (1/a + 1/b + 1/c)/(1/(a + b) + 1/(a + c) + 1/(b + c))\nmin_value = expr.subs([(a, 1), (b, 1), (c, 1)])\nprint(min_value)"
  },
  {
    "example_id": 37,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, a = symbols('x a')\neq1 = x**2 + a*x + 1\neq2 = x**2 - x - a\nroots = solve(eq1, a)\nfor root in roots:\n    if solve(eq2, x) == root:\n        print(root)"
  },
  {
    "example_id": 38,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a, b = symbols('a b')\neq = a*b - a + b\nexpr = (a/b) + (b/a) - eq\nprint(expr.subs({a:1, b:1}))\nprint(expr.subs({a:1, b:2}))\nprint(expr.subs({a:2, b:1}))\nprint(expr.subs({a:2, b:2}))"
  },
  {
    "example_id": 39,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.5"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "c = -3/2\nprint(c)"
  },
  {
    "example_id": 40,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "-1.0",
      "0.0",
      "7.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = symbols('x')\nf = (x + 3)**5 * (x + 2)**8 * (x + 1)**4 * (x - 7)**2 / (x + 3)**11 * (x + 2)**6 * (x + 1)**4 * x**2\nvertical_asymptotes = solve(f, x)\nprint(vertical_asymptotes)"
  },
  {
    "example_id": 41,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "18.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "5120.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nf = (1 + 5*z) * (4*z + 3*x) * (5*x + 6*y) * (y + 18)\nf_min = Min(f, x, y, z)\nprint(f_min)"
  },
  {
    "example_id": 42,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "n = symbols('n')\nf = lambda x: 1 if x == 1 else f(x - 1) + 1\nprint(f(15))"
  },
  {
    "example_id": 43,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# x = symbols('x')\nx = symbols('x')\n# 3x + 2 = 4(x - 1)\neq = 3*x + 2 - 4*x + 1\neq1 = solve(eq, x)\nprint(eq1[0])"
  },
  {
    "example_id": 44,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 0\nwhile (abs(x) + 5) < 7 and abs(x - 3) > 2:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 45,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "x = symbols('x')\neq = sympy.sqrt(x) + sympy.sqrt(x + 12)\neq = eq.expand()\neq = eq.simplify()\neq = eq.subs(x, 0)\neq = eq.expand()\nprint(eq)"
  },
  {
    "example_id": 46,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y = symbols('x y')\na, b = symbols('a b')\nh, k = symbols('h k')\n\neq = 4*x**2 + 16*y**2 - 16*x + 96*y + 144\n\neq_2 = (x - h)**2/a**2 + (y - k)**2/b**2\n\nsolve(eq, x, y)\n\n# Substitute values of a and b from eq_2\na_value = eq_2.subs([(a, 1), (b, 2)])\nprint(a_value)\n\n# Substitute values of h and k from eq_2\nk_value = eq_2.subs([(h, 3), (k, 4)])\nprint(k_value)\n\n# Find h + k + a + b\nh_k_a_b = h + k + a + b\nprint(h_k_a_b)"
  },
  {
    "example_id": 47,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = symbols('x')\neq = (9*x**2*sympy.sin(x)**2 + 4)/(x*sympy.sin(x))\neq = eq.rewrite(sympy.sin)\neq = eq.subs(x, sympy.sin(x))\neq = eq.subs(sympy.sin(x), 0)\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 48,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "z, w = symbols('z w')\neq = Abs(w - z)\neq = eq.subs(w, 5)\neq = eq.subs(z, 2*I)\nprint(eq)"
  },
  {
    "example_id": 49,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Define the function f\ndef f(i, j):\n    if i == 0:\n        if 0 <= j <= 4:\n            return sympy.mod(j + 1, 5)\n        else:\n            return 0\n    else:\n        if j == 0:\n            return f(i - 1, 1)\n        else:\n            return f(i - 1, f(i, j - 1))\n\n# Evaluate f(2015, 2)\nf(2015, 2)"
  },
  {
    "example_id": 50,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.13216876123687"
    ],
    "annotated_answers": [
      "840.0"
    ],
    "solution": "m, n = symbols('m n')\nexpr = (1/((n-m+1)*(n-m+2)/2))\n\nresult = solve(expr - 1/29, n)\nprint(result[0])"
  },
  {
    "example_id": 51,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Create symbols\nx = symbols('x')\n\n# Solve for x\nsol = solve(log(2, x) + log(4, x) - 3)\n\n# Print solution\nprint(sol)"
  },
  {
    "example_id": 52,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "k = 10**9\na, b = [int(str(k)[i]) for i in range(2)]\nprint(10*a + b)"
  },
  {
    "example_id": 53,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0",
      "16.0",
      "160.0",
      "261.0",
      "1875.0"
    ],
    "annotated_answers": [
      "277.0"
    ],
    "solution": "x = symbols('x')\np = x**3 + 4*x**2 + 4*x + 16\np_value = p.subs(x, -3)\nprint(p_value)\np_value = p.subs(x, -2)\nprint(p_value)\np_value = p.subs(x, 4)\nprint(p_value)\np_value = p.subs(x, 5)\nprint(p_value)\np_value = p.subs(x, 11)\nprint(p_value)"
  },
  {
    "example_id": 54,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-2016.0"
    ],
    "solution": "# Find the remainder of the division of x^2017 + Ax + B by (x + 1)^2\ndef remainder(A, B):\n    return (A + B) % 4\n\n# Find the value of B such that the remainder is 0\nfor B in range(1000):\n    if remainder(B, B) == 0:\n        print(B)\n        break"
  },
  {
    "example_id": 55,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n\n# define the function\nf = lambda x: Abs(a*x**2 + b*x + c)\n\n# find the maximum of the function\nmaximum = solve(f(x) - 1, x)\n\n# find the largest value of a, b, c\nlargest = Min(Abs(a), Abs(b), Abs(c))\n\n# print the solution\nprint(largest)"
  },
  {
    "example_id": 56,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "54.0",
      "6.0"
    ],
    "annotated_answers": [
      "-108.0"
    ],
    "solution": "x, y = symbols('x y')\nexpr = x**6 + y**6 - 54*x*y\n\n# find minimum value\nprint(Min(expr, x, y))"
  },
  {
    "example_id": 57,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.33466800133467",
      "-7.0",
      "4.80480480480481",
      "-6.0"
    ],
    "annotated_answers": [
      "450.0"
    ],
    "solution": "x, y = symbols('x y')\nmean_x = 2700\nmean_y = 75\nx_harmonic = 1/mean_x\ny_harmonic = 1/mean_y\nx_geometric = (x*x_harmonic + y*y_harmonic)/(1/x_harmonic + 1/y_harmonic)\nprint(x_geometric)"
  },
  {
    "example_id": 58,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "41230.0"
    ],
    "solution": "k = symbols('k')\nsum = 0\nfor i in range(1, 20):\n    sum += i*k**2\n    k += 1\nprint(sum)"
  },
  {
    "example_id": 59,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\nexpr = log(2, x) + log(2, x**2) - 6\nsol = solve(expr, x)\nprint(sol)"
  },
  {
    "example_id": 60,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "z1 = 2\nz2 = 3\nz3 = 4\nexpression = abs(z1-z2)**2 + abs(z1-z3)**2 + abs(z2-z3)**2\nprint(expression)"
  },
  {
    "example_id": 61,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x, y = symbols('x y')\neq = (x + y)**2 - (x + 1)*(y - 1)\nprint(solve(eq, [x, y]))"
  },
  {
    "example_id": 62,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "10.0",
      "2.0"
    ],
    "annotated_answers": [
      "936.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nexpr = (104*sqrt(6) + 468*sqrt(10) + 144*sqrt(15) + 2006)\nexpr = a*sqrt(2) + b*sqrt(3) + c*sqrt(5)\nsol = solve(expr, a, b, c)\nprint(sol)"
  },
  {
    "example_id": 63,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5.0",
      "2.0",
      "6.0",
      "13.0",
      "2.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "n = symbols('n')\nx = symbols('x')\ny = (x + 3)*(x - 7)**5/(x - 1)*(x - 7)**n\ny_prime = diff(y, x)\nprint(solve(y_prime - 0, n))"
  },
  {
    "example_id": 64,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols('x')\np = symbols('p')\n\n# Find the least possible degree of p\ndef least_degree(p):\n    # Find the degree of p\n    degree = len(p.args) - 1\n\n    # Find the number of horizontal lines p crosses\n    crosses = [1, 3, 5]\n    crosses_count = 0\n    for i in crosses:\n        if p.subs(x, i) == 1:\n            crosses_count += 1\n\n    # If the number of crosses is equal to the degree, then p has the least possible degree\n    if crosses_count == degree:\n        return degree\n\n    # If the number of crosses is not equal to the degree, then p has a higher degree\n    else:\n        return degree + 1\n\n# Find the least possible degree of p\nprint(least_degree(p))"
  },
  {
    "example_id": 65,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\nz = sqrt(5) + 2*I\ny = Abs(z)\nprint(y)"
  },
  {
    "example_id": 66,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "n = 100\na_n = symbols('a_n')\neq = a_n**2 - a_n*a_n.diff() - 1\na_n_value = solve(eq, a_n)[0]\nprint(a_n_value)"
  },
  {
    "example_id": 67,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "6558.0",
      "9.0",
      "9.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "x = symbols('x')\np = x**3 - 6*x**2 + 11*x - 24\np_value = solve(p, x)\nprint(p_value[0])"
  },
  {
    "example_id": 68,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "3.0",
      "5.0",
      "2.0",
      "16.0",
      "8.0",
      "2.0",
      "3.0",
      "6.0",
      "3.0",
      "5.0",
      "2.0",
      "16.0",
      "8.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "from sympy import *\ny,c = symbols('y c')\nf = 6*y**3 + 5*y**2 - 16*y + 8\ng = 2*y + 3\nq,r = divmod(f,g)\nprint(q,r)"
  },
  {
    "example_id": 69,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\n\ndef f(x):\n    return abs((x + a)*(x + b)*(x + c)*(x + d))\n\n\n# Find the maximum value of f(x)\nx = symbols('x')\n\nf_max = f(x).subs(x, 0)\n\nfor i in range(1, 5):\n    x_i = symbols(f'x{i}')\n    f_max = Min(f_max, f(x_i).subs(x, 0))\n\nprint(f_max)"
  },
  {
    "example_id": 70,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "343.0",
      "8743.0"
    ],
    "annotated_answers": [
      "4561.0"
    ],
    "solution": "f = lambda x: x**2 - x + 1\nprint(f(19))\nprint(f(94))"
  },
  {
    "example_id": 71,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "100.0",
      "96.0",
      "96.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "# Define variables\na, b = symbols('a b')\n\n# Express the fraction as a rational number\neq = a**100 + b**100\neq_rational = eq / (a**96 + b**96)\n\n# Use the greatest integer less than or equal to function\ng = sympy.floor(eq_rational)\nprint(g)"
  },
  {
    "example_id": 72,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0",
      "303.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\nf = -3*x**2 + 36*x - 7\nc = solve(f, x)[0]\nprint(c)"
  },
  {
    "example_id": 73,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "6.0",
      "3.0",
      "72.0",
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x, y = symbols('x y')\neq = (2/x) - (y/3) - (x/y)\nsol = solve(eq, x)\nprint(sol[0])"
  },
  {
    "example_id": 74,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x = symbols('x')\neq = (x**2 - 13*x + 22)/(x**2 - 8*x + 12)\nroots = solve(eq, x)\nprint(roots)"
  },
  {
    "example_id": 75,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "97.0",
      "0.010309278350515464",
      "194.0",
      "0.015463917525773196",
      "258.66666666666663",
      "0.0193298969072165",
      "310.3999999999999",
      "0.022551546391752584",
      "354.742857142857",
      "105.00000000000001"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "x1 = 97\nx_n = lambda n, xn_1: n / xn_1\nx_values = [x1]\nfor i in range(1, 9):\n    x_values.append(x_n(i, x_values[i - 1]))\n\nprint(x_values)\nproduct = 1\nfor i in range(8):\n    product *= x_values[i]\nprint(product)"
  },
  {
    "example_id": 76,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "11.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "n = 11\nwhile True:\n    f = lambda x: (x + 1)**n\n    if f(1000000) > 1000000:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 77,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "272.0"
    ],
    "annotated_answers": [
      "272.0"
    ],
    "solution": "from sympy import binomial, summation, oo, factorial\nn = symbols('n', integer=True, positive=True)\nS = summation(binomial(n, 15)/binomial(n, 17), (n, 17, oo))\nS_value = S.evalf()\nprint(S_value)"
  },
  {
    "example_id": 78,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "3.0",
      "27.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x, y = symbols('x y')\nfraction = (8*x**3 + 27*y**3)/(2*x + 3*y)\nprint(fraction)"
  },
  {
    "example_id": 79,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-324.0",
      "2.0",
      "4.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x + (108/(x - y)**3 * (y - z)**2 * z)\nprint(eq.diff(x))"
  },
  {
    "example_id": 80,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq = a*log(2, 10) + b*log(3, 10) + c*log(5, 10) + d*log(7, 10) - 2005\nsolutions = solve(eq, [a, b, c, d])\nprint(len(solutions))"
  },
  {
    "example_id": 81,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "49.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "52.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = symbols('z')\neq = z**2 + z + 1\nz_value = solve(eq, z)[0]\nprint(z_value**49 + z_value**50 + z_value**51 + z_value**52 + z_value**53)"
  },
  {
    "example_id": 82,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.6666666666666667"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "def f(n):\n    if n < a:\n        return 4*n + 3\n    else:\n        return 7*n - 12\na = (12 - 7)/(4 - 7)\nprint(a)"
  },
  {
    "example_id": 83,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36175.5621454782",
      "2.0",
      "51159.9706126149"
    ],
    "annotated_answers": [
      "66673.0"
    ],
    "solution": "from sympy import sqrt\nexpression = (sqrt(2) + sqrt(3)**(1/3))**12\nprint(expression.expand())"
  },
  {
    "example_id": 84,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0",
      "13.0",
      "2.0",
      "8.0",
      "2.0",
      "13.0",
      "2.0",
      "8.0",
      "2.0",
      "13.0",
      "2.0",
      "8.0",
      "2.0",
      "13.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq1 = a**2 + b**2 - 8\neq2 = c**2 + d**2 - 13\nsolve_list = solve([eq1, eq2], [a, b, c, d])\nprint(solve_list)\n\nad = a*d\nbc = b*c\nac = a*c\nbd = b*d\nad_bc_2 = (ad - bc)**2\nac_bd_2 = (ac + bd)**2\nprint(ad_bc_2 + ac_bd_2)"
  },
  {
    "example_id": 85,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "x = symbols('x')\nf = x**7 + 32*x**2 + 128\nf_prime = diff(f, x)\nf_prime_x = f_prime.subs(x, 0)\nprint(f_prime_x)"
  },
  {
    "example_id": 86,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "310.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "x = symbols('x')\np = x**2 + 210\nprint(p.subs(x, 10))"
  },
  {
    "example_id": 87,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a1 = symbols('a1')\na3 = symbols('a3')\na = [a1, a3]\na[1] = a[0]\nfor i in range(1, 9):\n    a.append(1/(1 - a[i]))\nprint(a[8])"
  },
  {
    "example_id": 88,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = symbols('x')\nc = symbols('c')\nf = (c*x)/(2*x + 3)\nf_inv = Lambda(x, (2*x + 3)/(c*x))\nc_value = solve(f_inv(x) - f, c)\nprint(c_value[0])"
  },
  {
    "example_id": 89,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "# Create a variable for the sum\nsum = 0\n# Create a loop to iterate over the numbers from 1 to 99\nfor i in range(1, 100):\n    # Add the number to the sum\n    sum += i\n    # Subtract the number from the sum\n    sum -= i\n# Print the sum\nprint(sum)"
  },
  {
    "example_id": 90,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "63.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 63\nprint(n)"
  },
  {
    "example_id": 91,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x, y = symbols('x y')\neq = abs(x + y) + abs(x - y)\neq = eq.expand()\neq = eq.subs(x + y, 2)\neq = eq.subs(x - y, 2)\nprint(eq)"
  },
  {
    "example_id": 92,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "21.0",
      "36.0",
      "32.0",
      "720.0"
    ],
    "annotated_answers": [
      "508.0"
    ],
    "solution": "# Define symbols\na, b, c, d, e, f = symbols('a b c d e f')\n\n# Define equations\neq1 = a + b + c + d + e + f\neq2 = a + 2*b + 3*c + 4*d + 2*e + 2*f\neq3 = a + 3*b + 6*c + 9*d + 4*e + 6*f\neq4 = a + 4*b + 10*c + 16*d + 8*e + 24*f\neq5 = a + 5*b + 15*c + 25*d + 16*e + 120*f\n\n# Define objective function\nobj = a + 6*b + 21*c + 36*d + 32*e + 720*f\n\n# Define constraints\ncons = [\n    eq1,\n    eq2,\n    eq3,\n    eq4,\n    eq5,\n    obj - 42\n]\n\n# Solve system\nsol = solve(cons)\n\n# Print solution\nprint(sol)\n\n# Print objective function\nprint(obj.subs(sol))"
  },
  {
    "example_id": 93,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "import numpy as np\n\ndef polynomial(a):\n    return np.poly1d([1, a**2 - 1, a**3])\n\ndef roots(a):\n    return np.roots(polynomial(a))\n\ndef distinct_roots(a):\n    return len(set(roots(a))) == 2\n\nfor a in range(100):\n    if distinct_roots(a):\n        print(a)"
  },
  {
    "example_id": 94,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols('x')\nroots = solve(x**3 - 3*x - 5, x)\nabc = roots[0]*roots[1]*roots[2]\nprint(abc)"
  },
  {
    "example_id": 95,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.460461017585218",
      "84"
    ],
    "annotated_answers": [
      "1052.0"
    ],
    "solution": "from sympy import binomial\n\nn = 1000\nk = 50\n\nresult = binomial(n, k)\nprint(result)"
  },
  {
    "example_id": 96,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b = symbols('a, b')\nx = symbols('x')\n\n# Find the value of a\nx_1 = solve((x**2 + a*x + b), x)\na_value = x_1[0]\n\n# Find the value of b\nx_2 = solve((x**2 + a*x + b), x)\nb_value = x_2[0]\n\n# Print the result\nprint(a_value)\nprint(b_value)"
  },
  {
    "example_id": 97,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-130.0"
    ],
    "annotated_answers": [
      "-48.0"
    ],
    "solution": "x = symbols('x')\nf = x**4 + 6*x**3 + 11*x**2 + 6*x - 154\nroots = solve(f, x)\nf_value = f.subs(x, 1)\nprint(f_value)"
  },
  {
    "example_id": 98,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "8.0",
      "3.0",
      "3.0",
      "8.0"
    ],
    "annotated_answers": [
      "-81.0"
    ],
    "solution": "from sympy import symbols, sqrt, I, expand_mul\nx = symbols('x')\neq = (3 + I*sqrt(3))**8 + (3 - I*sqrt(3))**8\nprint(expand_mul(eq))"
  },
  {
    "example_id": 99,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "r, n = symbols('r n')\neq = (24, 3072)\nratio = diff(eq[0], n)/eq[0]\nprint(ratio)"
  },
  {
    "example_id": 100,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "expression = 0\nfor i in range(1, 101):\n    expression += i\nprint(expression)"
  },
  {
    "example_id": 101,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\nA, B, C = symbols('A B C')\neq = (5*x - 7)/(x - 1)**3\neq = A/(x - 1) + B/(x - 1)**2 + C/(x - 1)**3\nsol = solve(eq, [A, B, C])\nprint(sol)"
  },
  {
    "example_id": 102,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "a = [5, 4]\nb = [4, 5]\n\nn = len(a)\nsum = 0\nfor i in range(n):\n    sum = sum + a[i] + b[i]\nprint(sum)"
  },
  {
    "example_id": 103,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-874.0",
      "6.0",
      "21219.0",
      "1.0",
      "3.0",
      "3.0",
      "1.0",
      "2.0",
      "3.0",
      "-874.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "from sympy import symbols, solve, Poly\nfrom sympy.abc import x\n\na, b, r, s = symbols('a b r s')\n\n# generate a polynomial with given coefficients\np = Poly(x**3 - a*x**2 + b*x - 65, x)\n\n# find the roots of the polynomial\nroots = solve(p, x)\n\n# sum of the roots\np_sum = sum(roots)\n\n# print the sum of the roots for all possible combinations of a and b\nprint(p_sum.subs(a, 1).subs(b, 1))\nprint(p_sum.subs(a, 2).subs(b, 3))\nprint(p_sum.subs(a, 3).subs(b, 4))"
  },
  {
    "example_id": 104,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x + y - 2\neq2 = x**5 + y**5 - 82\neq = [eq1, eq2]\nsolve_set = solve(eq, [x, y])\nx_y_list = []\nfor xy in solve_set:\n    x_y_list.append(xy[0]**2 + xy[1]**2)\nprint(sum(x_y_list))"
  },
  {
    "example_id": 105,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "import cmath\n\na = cmath.rect(1, 0)\nb = cmath.rect(1, 0)\n\nexpression = a/b\n\nprint(expression)"
  },
  {
    "example_id": 106,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "def get_roots(f):\n    roots = []\n    for n in range(1, 1000):\n        if f(n) == 0:\n            roots.append(n)\n    return roots\n\n\ndef g(x):\n    return x**3 - 14*x**2 + 18*x + 72\n\n\nprint(get_roots(g))"
  },
  {
    "example_id": 107,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0",
      "5.0",
      "2.0",
      "2.0",
      "15.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nf = 2*x**2 + 2*y**2 + 5*z**2 - 2*x*y - 4*y*z - 4*x - 2*z + 15\nprint(Min(f, x, y, z))"
  },
  {
    "example_id": 108,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "z = symbols('z')\nexpr = abs(z - 3)**2 + abs(z - 5 + 2*I)**2 + abs(z - 1 + I)**2\nprint(expr)"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "2.0",
      "2.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = symbols('x')\nf = Lambda(x, sqrt(5*x**2 + 2*x*sqrt(5) + 1) + x*sqrt(5))\nf_prime = diff(f, x)\nf_min = Min(f, x)\nprint(f_min)"
  },
  {
    "example_id": 110,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "-4.0",
      "-4.0",
      "-4.0",
      "-4.0",
      "-4.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = (a + 1)*(b + 1)*(c + 1) - 1\neq2 = (a + 2)*(b + 2)*(c + 2) - 2\neq3 = (a + 3)*(b + 3)*(c + 3) - 3\neq4 = (a + 4)*(b + 4)*(c + 4)\n\nf = Lambda((a, b, c), eq4)\nf_a = diff(f(a, b, c), a)\nf_b = diff(f(a, b, c), b)\nf_c = diff(f(a, b, c), c)\n\nx = symbols('x')\nsol = solve([f_a, f_b, f_c], [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 111,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5225709506.0",
      "5225709506.0",
      "5225709506.0",
      "5225709506.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = symbols('x')\nf = Lambda(x, x**3 + 4*x**2 - 3*x + 1)\n\ny = 5\nz = 5\n\nf_x = f(x + f(y + z)) + f(f(x + y) + z)\n\nf_x = f_x.subs(x, 5)\n\nprint(f_x)\n\nf_x = f_x.subs(y, 5)\nf_x = f_x.subs(z, 5)\n\nprint(f_x)\n\nf_x = f_x.subs(x, 5)\n\nprint(f_x)\n\nprint(f_x.evalf())"
  },
  {
    "example_id": 112,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "2.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "-2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nf = a*x**3 + b*x - c\ng = x**2 + b*x + c\nh = f.as_numer_denom()[0]\ni = f.as_numer_denom()[1]\nj = g.as_numer_denom()[0]\nk = g.as_numer_denom()[1]\n\nprint(h)\nprint(i)\nprint(j)\nprint(k)\n\nh = h.expand()\ni = i.expand()\nj = j.expand()\nk = k.expand()\n\nprint(h)\nprint(i)\nprint(j)\nprint(k)\n\nh = h.subs(x, 0)\ni = i.subs(x, 0)\nj = j.subs(x, 0)\nk = k.subs(x, 0)\n\nprint(h)\nprint(i)\nprint(j)\nprint(k)\n\nh = h.subs(x, 0)\ni = i.subs(x, 0)\nj = j.subs(x, 0)\nk = k.subs(x, 0)\n\nprint(h)\nprint(i)\nprint(j)\nprint(k)\n\nprint(h/i)\nprint(j/k)\n\nab = h/i - j/k\nprint(ab)"
  },
  {
    "example_id": 113,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "6.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = log(b, a) + log(c, b) + log(a, c)\neq2 = eq1**3\neq3 = eq2.expand()\nprint(eq3)"
  },
  {
    "example_id": 114,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2011.0"
    ],
    "annotated_answers": [
      "2014.0"
    ],
    "solution": "# a - 1/b^c\na = 2011\nb = 3\nc = 2011\n\n# a - 1/b^c\na = 2011\nb = 3\nc = 2011\n\na_value = a - (1/b**c)\nprint(a_value)"
  },
  {
    "example_id": 115,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0990195135927845"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\n\n# Area of triangle PF1 F2\narea = 26\n\n# Major axis of ellipse\nmajor_axis = 15\n\n# Minor axis of ellipse\nminor_axis = major_axis\n\n# Distance between the foci\ndistance = math.sqrt(area * (minor_axis / major_axis))\nprint(distance)"
  },
  {
    "example_id": 116,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "6.0",
      "2.0",
      "6.0",
      "1.0",
      "6.0",
      "3.0",
      "2.0",
      "1.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x = symbols('x')\nP = 1 + x + x**2 + x**3 + x**4\nroot = sqrt(1 + sqrt(6))\nP_root = P.subs(x, root)\nprint(P_root)"
  },
  {
    "example_id": 117,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-701490.0",
      "111.0",
      "356539.0",
      "1745.0",
      "201.0",
      "111.0",
      "1.0",
      "3.0",
      "3449.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x**4 - 5*x**2 - x + 4\neq2 = x**2 - 3*x\nsol = solve([eq1 - y, eq2 - y], [x, y])\nprint(sol[0][0] + sol[1][0] + sol[2][0] + sol[3][0])"
  },
  {
    "example_id": 118,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = symbols('x')\nf = (x**2-6*x+8)**(-1) + (x**2+x-6)**(-1)\ndomain = solve(f, x)\nprint(domain)"
  },
  {
    "example_id": 119,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = symbols('z')\neq = z + 1/z - 1\nsol = solve(eq, z)\nprint(sol[0])"
  },
  {
    "example_id": 120,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nexpr = (b*c)/a**2 + (a*c)/b**2 + (a*b)/c**2\nprint(expr)"
  },
  {
    "example_id": 121,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = symbols('x')\neq = sqrt(x + sqrt(3*x + 6)) + sqrt(x - sqrt(3*x + 6)) - 6\nprint(solve(eq, x))"
  },
  {
    "example_id": 122,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x, y = symbols('x y')\nf = Lambda((x, y), x + y*f(y, x))\nf.doit()\nf.subs(x, 1).subs(y, 2)"
  },
  {
    "example_id": 123,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a1 = 6\nb1 = 0\na2 = 6\nb2 = 0\nexpression = a1 + b1 + a2 + b2\nprint(expression)"
  },
  {
    "example_id": 124,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "243.0",
      "324.0"
    ],
    "annotated_answers": [
      "405.0"
    ],
    "solution": "x = symbols('x')\na = -324 + 243*I\nprint(Abs(a))"
  },
  {
    "example_id": 125,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.5"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "n = symbols('n', integer=True, positive=True)\n\ndef f(n):\n    return (1 + 1/2)*(1 + 1/3)*(1 + 1/4)*(1 + 1/5)*(1 + 1/6)*(1 + 1/7)*(1 + 1/8)*(1 + 1/9)*(1 + 1/10)*(1 + 1/11)*(1 + 1/12)*(1 + 1/13)*(1 + 1/14)*(1 + 1/15)*(1 + 1/16)*(1 + 1/17)*(1 + 1/18)*(1 + 1/19)*(1 + 1/20)\n\nf_val = f(n)\n\nf_int = int(f_val)\n\nif f_int == f_val:\n    print(f'For {n}, the value of the expression is an integer: {f_int}')\nelse:\n    print(f'For {n}, the value of the expression is not an integer: {f_val}')"
  },
  {
    "example_id": 126,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "6.0",
      "2.0",
      "20.0",
      "27.0"
    ],
    "annotated_answers": [
      "2150.0"
    ],
    "solution": "# Define variables\nx = symbols('x')\nc1 = symbols('c1')\nc2 = symbols('c2')\nc0 = symbols('c0')\n\n# define the polynomial\np = x**3 + x**2 - 5\n\n# define the other polynomial\nq = (x - 3)**3 + c2*(x - 3)**2 + c1*(x - 3) + c0\n\n# Find the value of c2**2 + c1**2 + c0**2\nprint(Abs(diff(p - q, x)).expand().subs(x - 3, 0))"
  },
  {
    "example_id": 127,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "8.0",
      "4.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "16.0",
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = (x + 1/y) * (y + 1/z) * (z + 1/x)\nsol = solve(eq - 8, [x, y, z])\nprint(sol)"
  },
  {
    "example_id": 128,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "35.0",
      "72.0"
    ],
    "annotated_answers": [
      "676.0"
    ],
    "solution": "x = symbols('x')\nf = Lambda(x, 125*(x+2)*(x+3)/(x**2*(-1+x**2)*(-1+x**2)))\nf_5 = f(5)\nprint(f_5)"
  },
  {
    "example_id": 129,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "10880.0",
      "2.0",
      "10880.0"
    ],
    "annotated_answers": [
      "348.0"
    ],
    "solution": "s1, s2 = symbols('s1 s2')\nseq = [1440, 1716, 1848, 1984, 2120, 2256, 2392, 2528, 2664, 2800]\na1, a2 = seq[0], seq[-1]\nd1, d2 = a2 - a1, a2 - a1\n\n# find the missing term\nn = 8\nx = (d1*n + s1)/(d2*n + s2)\nprint(x)"
  },
  {
    "example_id": 130,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "6.0",
      "6.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nvolume = 216\n\ndef surface_area(box):\n    return 2 * (box[0] * box[1] + box[1] * box[2] + box[2] * box[0])\n\ndef box_volume(box):\n    return box[0] * box[1] * box[2]\n\n# Find the smallest possible surface area of the box\nbox = [1, 1, 1]\nsurface_area_value = surface_area(box)\nwhile surface_area_value < volume:\n    box[0] += 1\n    box[1] += 1\n    box[2] += 1\n    surface_area_value = surface_area(box)\n\nprint(box)"
  },
  {
    "example_id": 131,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x**4*y**5 + y**4*x**5 - 810\neq2 = x**3*y**6 + y**3*x**6 - 945\nsolve([eq1, eq2], [x, y])\n\nprint(2*x**3 + (x*y)**3 + 2*y**3)"
  },
  {
    "example_id": 132,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5714285714285716",
      "0.3571428571428572",
      "-0.30000000000000004"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = -0.8\ny = 0.5\nG = sum(x**n * y**(n-1) for n in range(1, 100))\nG_prime = sum(y**n * x**(n-1) for n in range(1, 100))\nprint(G, G_prime, x + y)"
  },
  {
    "example_id": 133,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9057.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = 9*x**3 - 20*x\nsimplified = eq.subs(x, 8*sqrt(2))\nnumerator = simplified.as_numer_denom()[0]\ndenominator = simplified.as_numer_denom()[1]\nsimplified_numerator = numerator.subs(sqrt(2), I)\nsimplified_denominator = denominator.subs(sqrt(2), I)\nsimplified_numerator_simplified = simplified_numerator.simplify()\nsimplified_denominator_simplified = simplified_denominator.simplify()\nnumerator_coeff = simplified_numerator_simplified.coeff(I)\ndenominator_coeff = simplified_denominator_simplified.coeff(I)\na = numerator_coeff\nb = simplified_numerator_simplified.as_numer_denom()[1]\nc = denominator_coeff\nprint(a + b + c)"
  },
  {
    "example_id": 134,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 3\nwhile True:\n    x = [1] * n\n    x[0] = 0\n    x[1] = 0\n    x[n - 1] = 0\n    if sum(x) == 0 and sum(x[i] * x[j] for i in range(n) for j in range(i + 1, n)) <= 0:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 135,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0",
      "-4.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Define symbols\nx, y, z = symbols('x y z')\n\n# Define equation\neq = x**4 + y**4 + z**4 - 4*x*y*z\n\n# Find solutions\nsol = solve(eq, [x, y, z])\n\n# Print solutions\nprint(sol)"
  },
  {
    "example_id": 136,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-77.0"
    ],
    "annotated_answers": [
      "763.0"
    ],
    "solution": "x = symbols('x')\nn = 20\nP_0 = x**3 + 313*x**2 - 77*x - 8\nP_n = P_0.subs(x, x - n)\n\ncoeff = P_n.coeff(x, 1)\nprint(coeff)"
  },
  {
    "example_id": 137,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6283185307179586",
      "0.6283185307179586",
      "0.3141592653589793"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\nr = 1\ntheta = math.pi/5\n\narc_length = r*theta\narea = 0.5*r**2*theta\n\nprint(theta)\nprint(arc_length)\nprint(area)"
  },
  {
    "example_id": 138,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-45.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "print(sympy.floor(5*(-9)))"
  },
  {
    "example_id": 139,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "numbers = [1, 2, 3, 4, 5]\nsum_of_numbers = sum(numbers)\nsum_of_squares = sum([x**2 for x in numbers])\nmean = sum_of_numbers/len(numbers)\nprint(mean)"
  },
  {
    "example_id": 140,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\na_plus_b_plus_c_plus_d = a + b + c + d\na_squared_plus_b_squared_plus_c_squared_plus_d_squared = a**2 + b**2 + c**2 + d**2\nmaximum_value = a_squared_plus_b_squared_plus_c_squared_plus_d_squared.subs(a_plus_b_plus_c_plus_d, 1).evalf()\nprint(maximum_value)"
  },
  {
    "example_id": 141,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import *\n\na, b, c, d, e = symbols('a b c d e')\n\nexpression = (a**4 / (a - b)*(a - c)*(a - d)*(a - e)\n        + b**4 / (b - a)*(b - c)*(b - d)*(b - e)\n        + c**4 / (c - a)*(c - b)*(c - d)*(c - e)\n        + d**4 / (d - a)*(d - b)*(d - c)*(d - e)\n        + e**4 / (e - a)*(e - b)*(e - c)*(e - d))\n\nprint(expression)"
  },
  {
    "example_id": 142,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2000.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 2004\nn_1 = 2001\nn_2 = 2002\nn_3 = 2003\nn_4 = n_1 + n_2 - n_3\nprint(n_4)"
  },
  {
    "example_id": 143,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "1.0",
      "2.0",
      "4.0",
      "3.0",
      "7.0",
      "4.0",
      "1.0",
      "2.0",
      "8.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\nf = (x + 8)*(x + 5)**2*(x + 1)**3*x**5*(x - 3)**2/( (x + 7)*(x + 5)**2*(x + 1)*x*(x - 3)**3*(x - 4))\nf_diff = diff(f, x)\nprint(f_diff)"
  },
  {
    "example_id": 144,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "6.0",
      "1.0",
      "1.0",
      "6.0",
      "1.0",
      "1.0",
      "6.0",
      "1.0",
      "1.0",
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "f = Lambda(x, x**2 - 2*x + 1)\nf_f = diff(f, x)\neq = f(f(x)) - 6\neq_sol = solve(eq, x)\nprint(eq_sol)"
  },
  {
    "example_id": 145,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.999999999999961",
      "29.0",
      "1",
      "30",
      "9.999999999999961",
      "29.0",
      "1",
      "30",
      "9.999999999999961",
      "29.0",
      "1",
      "30",
      "9.999999999999961"
    ],
    "annotated_answers": [
      "553.0"
    ],
    "solution": "k = 1000000000000000000000000000000\nn = 1000000000000000000000000000000\nfor i in range(1, 71):\n    n_i = k**(1/3) * n**(2/3)\n    print(n_i)\n    n += 1\n    print(n)"
  },
  {
    "example_id": 146,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "65.0",
      "2.0",
      "156.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = symbols('z')\nz2 = z**2\n\n# find modulus\nmodulus = abs(z2 - (156 + 65*I))\nprint(modulus)"
  },
  {
    "example_id": 147,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "11.0",
      "10.0",
      "9.0",
      "2.0",
      "8.0",
      "2.0",
      "7.0",
      "2.0",
      "6.0",
      "2.0",
      "5.0",
      "4.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\np, q = 0, 0\nfor i in range(1, 9):\n    p += x**i\n    q += x**(i + 4)\n    p, q = p.as_poly(), q.as_poly()\np, q = p.as_expr(), q.as_expr()\nprint(p + q)"
  },
  {
    "example_id": 148,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f = (6*x**3 + 4*x**2 - 11*x + 5)/(3*x**3 - 15*x + 20)\nc = f.as_leading_term(x).subs(x, 0)\nprint(c)"
  },
  {
    "example_id": 149,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Compute the result\nresult = (1990**3 - 1000**3 - 990**3) / (1990*1000*990)\nprint(result)"
  },
  {
    "example_id": 150,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "27.0",
      "2.0",
      "2.0",
      "729.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x + y + z\neq2 = x*y*z\neq3 = x**3*y + y**3*z + z**3*x\nconstraints = [eq1, eq2]\nmaximum = solve(eq3, maximize=True)\nprint(maximum)"
  },
  {
    "example_id": 151,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "N = 1\nwhile True:\n    if N > 10**18:\n        break\n    a = [1, N, N**2 + N]\n    b = [1, N, N**2 + N]\n    while len(a) <= 1000:\n        a.append(a[-1] + a[-2])\n    while len(b) <= 1000:\n        b.append(b[-1] + b[-2])\n    if a == b:\n        break\n    N += 1\nprint(N)"
  },
  {
    "example_id": 152,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0",
      "-9.0",
      "2.0",
      "57.0",
      "2.0",
      "36.0",
      "2.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "a, b, c = symbols('a b c')\ndenominator = a*b*c\nnumerator = (a + b + c)*((a + b)**2 + (a + b + 4*c)**2)\nmin_value = solve(numerator - denominator, a, b, c)\nprint(min_value[0])"
  },
  {
    "example_id": 153,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "67.0"
    ],
    "solution": "n = symbols('n')\nf = x**(2*n) + 1 + (x + 1)**(2*n)\ng = x**2 + x + 1\nh = f/g\n# print(h)\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(solve(h.is_integer, n))\n\n# print(sol"
  },
  {
    "example_id": 154,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "z, w = symbols('z w')\neq = abs(z + w)\neq = eq.subs(z, 2*sympy.cos(theta) + 2*sympy.sin(theta)*sympy.I)\neq = eq.subs(w, 5*sympy.cos(phi) + 5*sympy.sin(phi)*sympy.I)\neq = eq.subs(theta, sympy.acos(sympy.cos(theta)))\neq = eq.subs(phi, sympy.acos(sympy.cos(phi)))\nprint(eq.evalf())"
  },
  {
    "example_id": 155,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "89.0",
      "19.0",
      "51.0",
      "70.0",
      "89.0",
      "19.0",
      "70.0",
      "19.0"
    ],
    "annotated_answers": [
      "1700.0"
    ],
    "solution": "x = symbols('x')\na = (log(x) - 19*log(x/19))\nb = (log(x) - 89*log(x/89))\neq = a - b\nsol = solve(eq, x)\nprint(sol[0])"
  },
  {
    "example_id": 156,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nA, B = symbols('A B')\neq = 1/(a*x**2 + b*x + c)\neq1 = A/(x - (-b + sqrt(b**2 - 4*a*c))/2*a) + B/(x - (-b - sqrt(b**2 - 4*a*c))/2*a)\neq2 = eq.subs(a, 1)\neq3 = eq2.subs(b, 3)\neq4 = eq3.subs(c, 4)\nprint(eq4.subs(A, 1).subs(B, 1))"
  },
  {
    "example_id": 157,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17580.0"
    ],
    "annotated_answers": [
      "1112.0"
    ],
    "solution": "x = symbols('x')\np = x**4 + 3*x**3 + 11*x**2 + 27*x + 3\np1 = p.subs(x, 1)\np3 = p.subs(x, 3)\np5 = p.subs(x, 5)\np_6 = p.subs(x, -2)\np_6_6 = p.subs(x, 6)\nprint(p1 + 7*p_6_6)"
  },
  {
    "example_id": 158,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "810932305.0",
      "8.0",
      "499769140.0",
      "7.0",
      "134723250.0",
      "6.0",
      "20748520.0",
      "5.0",
      "1996736.0"
    ],
    "annotated_answers": [
      "850.0"
    ],
    "solution": "from sympy import symbols, solve\nx = symbols('x')\nexpr = x**10 + (13*x - 1)**10\nroots = solve(expr, x)\nvalues = [1/roots[i].conjugate()/roots[i] for i in range(len(roots))]\nprint(sum(values))"
  },
  {
    "example_id": 159,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.823566744004136",
      "189",
      "9.677749120240511",
      "187"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define the function\nf = Lambda(x, 1 + 3/3**x + 5/9**x + 7/27**x + 9/81**x)\n\n# Find the sum\nsum = 0\nfor i in range(1, 100):\n    sum += f(i)\nprint(sum)"
  },
  {
    "example_id": 160,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a3, a2, a1 = 1, 1, 1\n\n# Check if the coefficients are divisible by 2\nif a3 % 2 == 0 and a2 % 2 == 0 and a1 % 2 == 0:\n    print(\"There are 2 possible rational roots.\")\nelse:\n    print(\"There are 0 possible rational roots.\")"
  },
  {
    "example_id": 161,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13535.0"
    ],
    "annotated_answers": [
      "13535.0"
    ],
    "solution": "from math import sqrt\na = (sqrt(7) + sqrt(5))**6\na = int(a)\nprint(a)"
  },
  {
    "example_id": 162,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "2.0",
      "2.0",
      "1.0",
      "8126494.0"
    ],
    "annotated_answers": [
      "1209.0"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\nf = Lambda(x, 2*x**2 + 3*x - 1)\nf_xy = f(4*x*y)\nf_xy_sol = solve(f_xy - 2*y*(f(x + y) + f(x - y)), f_xy)\nprint(f_xy_sol)\nf_2015 = f(2015)\nprint(f_2015)"
  },
  {
    "example_id": 163,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0",
      "4.0",
      "5.0",
      "3.0",
      "3.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\nexpression = (x**6 - 4*x**5 + 3*x**3 + x**2 - 1)\nprint(expression)"
  },
  {
    "example_id": 164,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.23394787031150666"
    ],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "z1 = 18 + 83j\nz2 = 18 + 39j\nz3 = 78 + 99j\n\ndef denominator(z):\n    return (z3 - z1) / (z2 - z1) * (z - z2) / (z - z3)\n\ndef real_part(z):\n    return denominator(z).real\n\nz = complex(real_part(z1), real_part(z2))\nprint(real_part(z))"
  },
  {
    "example_id": 165,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "412.0"
    ],
    "annotated_answers": [
      "92.0"
    ],
    "solution": "# List of all possible values of a,b,c,d\nall_values = []\nfor a in range(0,5):\n    for b in range(0,4):\n        if b <= a:\n            for c in range(0,3):\n                if c <= b:\n                    for d in range(0,2):\n                        if d <= c:\n                            all_values.append([a,b,c,d])\n\n# List of all possible values of P(1)\nall_values_of_p_1 = []\nfor value in all_values:\n    a, b, c, d = value\n    P = 4*I**4 + a*I**3 + b*I**2 + c*I + d\n    all_values_of_p_1.append(P.subs(I, 1))\n\n# Sum of all possible values of P(1)\nsum_of_p_1 = sum(all_values_of_p_1)\nprint(sum_of_p_1)"
  },
  {
    "example_id": 166,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq1 = a**2 + b**2 - 3\neq2 = c**2 + d**2 - 4\neq3 = (a*c + b*d)**2 + (b*c - a*d)**2\nsol = solve([eq1, eq2], [a, b, c, d])\nprint(sol[0][0])"
  },
  {
    "example_id": 167,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "k = symbols('k')\nx, y = symbols('x y')\neq1 = x**2 + y**2 - k**2\neq2 = x*y - k\nsol1 = solve(eq1, x)\nsol2 = solve(eq2, y)\nsol = []\nfor i in sol1:\n    if i in sol2:\n        sol.append(i)\nfor i in sol1:\n    if i not in sol2:\n        sol.append(i)\nprint(len(sol))"
  },
  {
    "example_id": 168,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "from sympy import log\nlog2 = log(3, 2)\nlog3 = log(4, 3)\nlog4 = log(5, 4)\nlog5 = log(6, 5)\nlog6 = log(7, 6)\nlog7 = log(8, 7)\nprint(log2 * log3 * log4 * log5 * log6 * log7)"
  },
  {
    "example_id": 169,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "2009.0",
      "9002.0",
      "4.0",
      "2.0",
      "2009.0",
      "9002.0",
      "8.0",
      "2009.0",
      "9002.0",
      "12.0",
      "4.322741255988151",
      "39",
      "2.8318360310489906",
      "47"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import *\n\nx = symbols('x')\n\np = x**12 + 2*x**8 + 3*x**4 + 4\n\np_val = p.subs(x, 2009 + 9002*pi)\np_val1 = p.subs(x, 2009)\np_val2 = p.subs(x, 9002)\n\nprint(p_val)\nprint(p_val1)\nprint(p_val2)\n\nsolve(p_val)\nsolve(p_val1)\nsolve(p_val2)"
  },
  {
    "example_id": 170,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "75.0",
      "100.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "z = symbols('z')\nexpr = z**3\neq = expr - (100 + 75*I)\nsolution = solve(eq, z)\nz_value = solution[0]\nprint(Abs(z_value))"
  },
  {
    "example_id": 171,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0",
      "4.0",
      "445.0",
      "4.0",
      "11641.0",
      "8.0",
      "679661.0",
      "64.0",
      "165.0",
      "640247.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "x = symbols('x')\neq = (1/(x-1) + 1/(x-5) + 1/(x-10) + 1/(x-25)) - 2\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 172,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x*y*z**2 - 2\nP = (x, y, z)\norigin = (0, 0, 0)\ndist = sqrt(diff(eq, x)**2 + diff(eq, y)**2 + diff(eq, z)**2)\nmin_dist = Min(dist.subs(P, origin))\nprint(min_dist)"
  },
  {
    "example_id": 173,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0",
      "2.0",
      "1.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Define symbols\na = symbols('a')\nx1 = symbols('x1')\ny1 = symbols('y1')\nx2 = symbols('x2')\ny2 = symbols('y2')\n\n# Define equations\neq1 = y1**2 - 4*a*x1\neq2 = y2**2 - 4*a*x2\n\n# Solve equations\nsol1 = solve([eq1, eq2], [x1, y1, x2, y2])\n\n# Define functions\nf1 = Lambda(x, y1**2 - 4*a*x)\nf2 = Lambda(x, y2**2 - 4*a*x)\n\n# Define derivatives\nd1 = diff(f1(x1), x1)\nd2 = diff(f2(x2), x2)\n\n# Define distances\nd = abs(x1 - x2)\n\n# Compute c_1, c_2, and c_3\nc1 = d1.subs(x1, sol1[0][0])\nc2 = d2.subs(x2, sol1[0][0])\nc3 = d.subs(x1, sol1[0][0])\n\n# Compute c_1 + c_2 + c_3\nsum = c1 + c2 + c3\n\nprint(sum)"
  },
  {
    "example_id": 174,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "384.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "# Define the expression\nexpr = 2009**4 - 4*2007**4 + 6*2005**4 - 4*2003**4 + 2001**4\n\n# Compute the value of the expression\nprint(expr)"
  },
  {
    "example_id": 175,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1000.0"
    ],
    "solution": "for m in range(1, 1001):\n    for n in range(1, m + 1):\n        if m * n > m + n:\n            break\n    else:\n        print(m)"
  },
  {
    "example_id": 176,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "560.9999999999999"
    ],
    "annotated_answers": [
      "561.0"
    ],
    "solution": "a = [1, 1]\nb = [1, 3]\n\nfor i in range(2, 33):\n    a.append(a[i - 1] + a[i - 1] ** 2 / a[i - 2])\n    b.append(b[i - 1] + b[i - 1] ** 2 / b[i - 2])\n\nprint(b[32] / a[32])"
  },
  {
    "example_id": 177,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "a, b = symbols('a b')\nf = x**4 + a*x**3 + 3*x**2 + b*x + 1\nf = f.subs(x, -1)\nf = f.subs(x, 1)\n\n# 0 <= f(x) <= 1\n\nf = f.subs(x, -1)\nf = f.subs(x, 1)\n\n# 0 <= f(x) <= 1\n\nf = f.subs(x, 0)\nf = f.subs(x, 1)\n\n# 1 <= f(x) <= 2\n\nf = f.subs(x, 0)\nf = f.subs(x, -1)\n\n# 1 <= f(x) <= 2\n\nf = f.subs(x, 0)\nf = f.subs(x, 1)\n\n# 1 <= f(x) <= 2\n\nf = f.subs(x, 0)\nf = f.subs(x, -1)\n\n# 1 <= f(x) <= 2\n\nf = f.subs(x, 0)\nf = f.subs(x, 1)\n\n# 1 <= f(x) <= 2\n\nf = f.subs(x, 0)\nf = f.subs(x, -1)\n\n# 1 <= f(x) <= 2\n\nf = f.subs(x, 0)\nf = f.subs(x, 1)\n\n# 1 <= f(x) <= 2\n\nf = f.subs(x, 0)\nf = f.subs(x, -1)\n\n# 1 <= f(x) <= 2\n\nf = f.subs(x, 0)\nf = f.subs(x, 1)\n\n# 1 <= f(x) <= 2\n\nf = f.subs(x, 0)\nf = f.subs(x, -1)\n\n# 1 <= f("
  },
  {
    "example_id": 178,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\neq = (1/(x-2009) + 1/(x-2010) + 1/(x-2011)) - 1\nsol = solve(eq, x)\nprint(len(sol))"
  },
  {
    "example_id": 179,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "2.0",
      "7.0",
      "18.0",
      "22.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "154.0",
      "2.0",
      "1.0",
      "6.0",
      "1.0",
      "3.0",
      "2.0",
      "1.0",
      "7.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import expand, factor\nfrom sympy.abc import x\n\nexpression = (1/(7-x)*(1+x)*(1-x) + 3*x**2 - 18*x - 22/(x**2 - 1)*(x - 7) + 3/(x - 2) - 3/(x-1)*(x-2))\nprint(expand(expression))"
  },
  {
    "example_id": 180,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "2.0",
      "3.0",
      "9.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = symbols('x')\neq = 3**(2*x) + 19\nlog_eq = log(eq)\nlog_10 = log(10)\nsolution = solve(log_eq - log_10, x)\nprint(solution)"
  },
  {
    "example_id": 181,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "6.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "327.0",
      "18.0",
      "217.0",
      "216.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = symbols('x')\neq1 = 2*x**2 + x + 3\neq2 = x**2 + x + 1\neq = eq1/eq2 - 2*x + 1\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 182,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "1.0",
      "3.0",
      "3.0",
      "5.0",
      "6.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = log(log(8*x), 2)\neq2 = log(log(2*x), 8)\neq = eq1 - eq2\nsol = solve(eq, x)\nprint(sol[0])"
  },
  {
    "example_id": 183,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "9.0",
      "2.0",
      "27.0",
      "2.0",
      "-4.0",
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "A, B, C, P, Q = symbols('A B C P Q')\nroots1 = solve(x**3 + P*x**2 + Q*x - 19, x)\nroots2 = solve(x**3 - A*x**2 + B*x - C, x)\nA_plus_B_plus_C = sum(roots1) + sum(roots2)\nprint(A_plus_B_plus_C)"
  },
  {
    "example_id": 184,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a**3 - 2*a - 5\neq2 = b**3 - 2*b - 5\neq3 = c**3 - 2*c - 5\n\ndef f(x):\n    return x**3 - 2*x - 5\n\n# Calculate the minimum value of the function\nmin_value = Min(f(a), f(b), f(c))\nprint(min_value)"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = symbols('a')\nf = x**6 + 3*a*x**5 + (3*a**2 + 3)*x**4 + (a**3 + 6*a)*x**3 + (3*a**2 + 3)*x**2 + 3*a*x + 1\nf_prime = diff(f, x)\nf_second = diff(f_prime, x)\nf_third = diff(f_second, x)\n\n# find the critical points of the function\ncritical_points = solve(f_prime, x)\n\n# check if the critical points are real\nreal_critical_points = [critical_point for critical_point in critical_points if critical_point.is_real]\n\n# check if the critical points are positive\npositive_critical_points = [critical_point for critical_point in real_critical_points if critical_point > 0]\n\n# if the critical points are positive, find the minimum of the function\nif len(positive_critical_points) > 0:\n    minimum = Min(f, positive_critical_points)\n    a = minimum.args[0]\nelse:\n    a = solve(f_third, x)[0]\n\nprint(a)"
  },
  {
    "example_id": 186,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Solve the first equation\nx1 = solve(x**4 - 2*x**3 + 4*x**2 - 4*x + 1, x)[0]\nx2 = solve(x**2 - 2*x + 1, x)[0]\n\n# Find the value of k\nk = (x1 - x2)**2 / (x1 + x2)\nprint(k)"
  },
  {
    "example_id": 187,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "z = symbols('z')\nabs_z = Abs(z)\nabs_z3 = abs_z**3\nexpr = -2 - 2*I*sqrt(3)\nexpr_abs = abs_z3.subs(z, expr)\nprint(expr_abs)"
  },
  {
    "example_id": 188,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "A, B, C = symbols('A B C')\nP = A*log(B/C)\nP_1 = P.subs({x: 1})\nP_2 = P.subs({x: 2})\nP_3 = P.subs({x: 3})\nP_4 = P.subs({x: 4})\n\nP_values = [P_1, P_2, P_3, P_4]\n\nP_values_solved = solve(P_values, {A, B, C})\nprint(P_values_solved)"
  },
  {
    "example_id": 189,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "5.0",
      "567.0",
      "1.0",
      "15.0",
      "-2.0",
      "1.0",
      "5.0",
      "567.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "x = symbols('x')\nexpr = 10*x**4/3*x**2/4*x**2/5*x**2/6*x**2/7*x**2/8*x**2/9\nexpr_diff = diff(expr, x)\nsol = solve(expr_diff - 4, x)\nprint(sol)"
  },
  {
    "example_id": 190,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x*y*z - 4\neq2 = x**3 + y**3 + z**3 - 4\neq3 = x**2 * y**2 + x**2 * z**2 + y**2 * z**2 + x*y*z**2 + y*z**2 + x*z**2\neq = eq1 - eq2 + eq3 - 12\nprint(solve(eq, x, y, z)[0])"
  },
  {
    "example_id": 191,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "5.0",
      "9.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = log(x-y,6) + log(x+y,6) - 2\neq2 = log(5*x,y) - 2\nsol = solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 192,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9000.0"
    ],
    "annotated_answers": [
      "743.0"
    ],
    "solution": "r = 100\nexpression = 0\nfor i in range(1, 91):\n    expression += int(r + i/100)\nprint(expression)"
  },
  {
    "example_id": 193,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\nmin_value = solve(a + b + c + d - (1/a + 1/b + 1/c + 1/d), (a + b + c + d))\nprint(min_value[0])"
  },
  {
    "example_id": 194,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.33748060995284",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z = symbols('z')\neq = z**4 - (64/5 - 48/5)*I\nsol = solve(eq, z)\nz_value = sol[0]\nprint(Abs(z_value))"
  },
  {
    "example_id": 195,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a_3, a_2, a_1 = symbols('a_3 a_2 a_1')\n\ndef get_roots(a_3, a_2, a_1):\n    x = symbols('x')\n    eq = 7*x**4 + a_3*x**3 + a_2*x**2 + a_1*x - 14\n    roots = solve(eq, x)\n    return roots\n\ndef get_rational_roots(a_3, a_2, a_1):\n    roots = get_roots(a_3, a_2, a_1)\n    rational_roots = []\n    for root in roots:\n        if root.is_rational:\n            rational_roots.append(root)\n    return rational_roots\n\nprint(len(get_rational_roots(a_3, a_2, a_1)))"
  },
  {
    "example_id": 196,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "81.0",
      "3.0",
      "2.0",
      "27.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "n = symbols('n')\nr = symbols('r', real=True, positive=True)\neq = (n+r)**3 - n\nsol = solve(eq, n)\nprint(sol)"
  },
  {
    "example_id": 197,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "10.0",
      "10.0",
      "11.0",
      "11.0",
      "12.0",
      "12.0",
      "13.0",
      "13.0",
      "14.0"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "roots = [symbols('r{}'.format(i)) for i in range(1, 99)]\npoly = sum(root**i for i, root in enumerate(roots, start=1)) + 1\nprint(poly)"
  },
  {
    "example_id": 198,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "10.0",
      "2.0",
      "10.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x*y + x*z + y*z\nmin_val = Min(10*x**2 + 10*y**2 + z**2, (diff(eq, x) + diff(eq, y) + diff(eq, z))**2)\nprint(min_val)"
  },
  {
    "example_id": 199,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "def e(x):\n    return x\n\ndef o(x):\n    return x**2\n\ndef f(x):\n    return e(x) + o(x)\n\nprint(f(2))"
  },
  {
    "example_id": 200,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "199.0"
    ],
    "solution": "x = 0\nwhile x**2 + 10000*int(x)!= 10000*x:\n    x += 1\nprint(x)"
  },
  {
    "example_id": 201,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0",
      "5.0",
      "4.0",
      "5.0",
      "3.0",
      "5.0",
      "2.0",
      "5.0",
      "42.0",
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# The equation is x^5 - 5x^4 - 5x^3 - 5x^2 - 5x - 42 = 0\nx = symbols('x')\neq = x**5 - 5*x**4 - 5*x**3 - 5*x**2 - 5*x - 42\nprint(solve(eq, x))"
  },
  {
    "example_id": 202,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "import numpy as np\n\n# Points on line l\nx1, y1 = 5, 8\nx2, y2 = 7, 14\n\n# Points on line l_1\nx3, y3 = x1 - 3, y1 - 2\nx4, y4 = x2 - 3, y2 - 2\n\n# Slope of line l\na = (y2-y1)/(x2-x1)\n\n# Slope of line l_1\nb = (y4-y3)/(x4-x3)\n\nprint(a - b)"
  },
  {
    "example_id": 203,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "27.0",
      "2.0",
      "27.0",
      "1312.0",
      "2.0",
      "1755904.0"
    ],
    "annotated_answers": [
      "-80.0"
    ],
    "solution": "c, x = symbols('c x')\neq = x**3 + 8*x**2 - 4*x + c\nroots = solve(eq, x)\nc_value = (roots[0] + roots[1]) / 2\nprint(c_value)"
  },
  {
    "example_id": 204,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2018.0",
      "1.0",
      "1.0",
      "2018.0",
      "1.0"
    ],
    "annotated_answers": [
      "8080.0"
    ],
    "solution": "x, y = symbols('x y')\n\n# Define the function\nf = (x + 1/y)*(x + 1/y + 2018) + (y + 1/x)*(y + 1/x + 2018)\n\n# Find the minimum value\nmin_value = Min(f)\n\n# Print the result\nprint(min_value)"
  },
  {
    "example_id": 205,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.000000000000001"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x_n = 3\nfor n in range(1, 12345):\n    x_n = (1 + x_n) / (1 - x_n)\nprint(x_n)"
  },
  {
    "example_id": 206,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "# define the variables\na, b, c, d = symbols('a b c d')\n\n\n# define the equations\neq1 = x**2 + y**2 - 1\neq2 = x**2 + y**2 - 4\n\n\n# find the point of tangency\npoint = solve(eq1, x, y)\n\n\n# define the equations for the side length\nsidelength = a*sqrt(b) - c\nside = sidelength / d\n\n\n# define the equations for the area\narea = 4*b - c**2\n\n\n# define the equations for the perimeter\nperimeter = 2*a*sqrt(b) + 2*c\n\n\n# define the equations for the diagonals\ndiagonal1 = a + b + c + d\ndiagonal2 = a**2 + b**2 + c**2 + d**2\n\n\n# define the equations for the angles\nangle1 = (a**2 + b**2 + c**2) / (2*a*b*c)\nangle2 = (a**2 + b**2 + d**2) / (2*a*b*d)\nangle3 = (b**2 + c**2 + d**2) / (2*b*c*d)\n\n\n# solve the equations\nsolve([sidelength, area, perimeter, diagonal1, diagonal2, angle1, angle2, angle3], [a, b, c, d])"
  },
  {
    "example_id": 207,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "4.0",
      "2.0",
      "1.0",
      "4.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Initialize variables\nS, n = symbols('S n')\n\n# Initialize geometric series\ngeometric_series = (1/n)*(1 - (1/n))\n\n# Solve for S\nsolution = solve(geometric_series - S, n)\n\n# Print solution\nprint(solution)"
  },
  {
    "example_id": 208,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "17955.0",
      "4.0",
      "8.0",
      "2.0",
      "3.0",
      "1995.0",
      "-64.0",
      "3.0"
    ],
    "annotated_answers": [
      "-63.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nconsecutive_sequence = [a, b, c]\ngeometric_sequence = [3*a + b, 3*b + c, 3*c + a]\n\nconsecutive_sequence_product = a*b*c\ngeometric_sequence_product = a*(3*b + c) + b*(3*c + a) + c*(3*a + b)\n\neq1 = consecutive_sequence_product - 17955\neq2 = geometric_sequence_product - 17955\n\nsolution = solve([eq1, eq2], [a, b, c])\nprint(solution[0])"
  },
  {
    "example_id": 209,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.5"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Define a function\ndef arithmetic_sequence(a, b, c):\n    n = (b - a) / (c - a)\n    return n\n\n# Get the values\na = 3\nb = 5\nc = 6\nd = 7\ne = 9\n\n# Create the sequence\ns = [a, b, c, d, e]\n\n# Get the middle term\nm = (s[2] + s[3]) / 2\n\n# Print the middle term\nprint(m)"
  },
  {
    "example_id": 210,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "1.0",
      "6.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "9.0",
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x + y + z - 6\neq2 = 1/x + 1/y + 1/z - 2\nsolve_eq = solve([eq1, eq2], [x, y, z])\nprint(solve_eq[0][0] + solve_eq[0][1]/solve_eq[0][2] + solve_eq[0][2]/solve_eq[0][1])"
  },
  {
    "example_id": 211,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a = 4\nb = 6\nh = -5\nk = 3\n\nprint(h + k + a + b)"
  },
  {
    "example_id": 212,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "x = symbols('x')\nc = 10*x**2 + 55*x - 30*x**2\nc_value = solve(c, c)\nprint(c_value[0])"
  },
  {
    "example_id": 213,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "6.0",
      "8.0",
      "10.0",
      "12.0",
      "14.0",
      "16.0",
      "18.0",
      "20.0"
    ],
    "annotated_answers": [
      "340.0"
    ],
    "solution": "for n in range(1,1001):\n    if (n<1000) and (n%2==0):\n        print(n)"
  },
  {
    "example_id": 214,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def sgn(x):\n    if x < 0:\n        return -1\n    elif x == 0:\n        return 0\n    else:\n        return 1\n\nprint(sum(sgn(n) for n in range(-10, 21)))"
  },
  {
    "example_id": 215,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = symbols('x')\nn = 50\nf = (x + 3)**n\nk = diff(f, x, n).subs(x, 0)\nk_value = solve(k, k)\nprint(k_value[0])"
  },
  {
    "example_id": 216,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-4.0",
      "41.0",
      "8.0",
      "41.0",
      "2.0",
      "36.0",
      "2.0",
      "4.0",
      "41.0",
      "36.0",
      "41.0",
      "8.0",
      "2.0"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "from sympy import symbols, solve, sqrt\nx, y = symbols('x y')\neq1 = x**2 + y**2 + 6*x - 24*y + 72\neq2 = x**2 - y**2 + 6*x + 16*y - 46\nsol = solve([eq1, eq2], [x, y])\n\ndef distance(pt1, pt2):\n    return sqrt((pt1[0] - pt2[0])**2 + (pt1[1] - pt2[1])**2)\n\ntotal_distance = 0\nfor i in sol:\n    total_distance += distance(i, (-3, 2))\nprint(total_distance)"
  },
  {
    "example_id": 217,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "36.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1971.0",
      "2.0",
      "27.0",
      "1583.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "import sympy as sp\nfrom sympy.abc import x, r, s, t\n\np = x**3 + 9*x**2 - 9*x - 8\nroots = sp.solve(p, x)\n\nr, s, t = roots\n\nprint((r + s)*(s + t)*(t + r))"
  },
  {
    "example_id": 218,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "29.0",
      "2.0",
      "2.0",
      "2.0",
      "43.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "k, x = symbols('k x')\nq1 = x**2 + (k - 29)*x - k\nq2 = 2*x**2 + (2*k - 43)*x + k\np = q1*q2\nprint(p.factor())"
  },
  {
    "example_id": 219,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "n = 2\nexpression = 0\nfor i in range(n+1):\n    expression += i * (n-i) * 1j**i\nprint(expression)"
  },
  {
    "example_id": 220,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "c = [1, 4, 15, 2]\na = [1, 2, 4, 7]\nb = [1, 3, 9, 25]\nc_next = c[-1] + a[-1] + b[-1]\nprint(c_next)"
  },
  {
    "example_id": 221,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0",
      "2.0",
      "21.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "-5.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols('x')\np = x**6 + x**4 - 115*x**3 + x**2 + 1\nroots = solve(p, x)\nprint(roots)"
  },
  {
    "example_id": 222,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "58145.0"
    ],
    "annotated_answers": [
      "401.0"
    ],
    "solution": "def f(x):\n    return 6*x - 2005\n\nn = int(f(f(2005)))\nprint(n)"
  },
  {
    "example_id": 223,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "4.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\nconstraint = a + b + c + d - 1\nobj = (1/a) + (1/b) + (4/c) + (16/d)\n\n# Find the minimum value of the objective function\nmin_value = Min(obj, constraint)\n\n# Print the minimum value\nprint(min_value)"
  },
  {
    "example_id": 224,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from math import factorial\n\ndef g(x):\n    return x**2 - 11*x + 30\n\ndef f(x):\n    return x**4 - 14*x**3 + 62*x**2 - 91*x + 42\n\ndef find_all_values_of_f(x):\n    gx = g(x)\n    if gx == 0:\n        return [x]\n    else:\n        roots = []\n        for i in range(1, 1000):\n            root = (gx - i) / (2*x)\n            if root.is_integer():\n                roots.append(int(root))\n        return roots\n\ndef sum_of_all_values_of_f(x):\n    roots = find_all_values_of_f(x)\n    sum = 0\n    for root in roots:\n        sum += f(root)\n    return sum\n\nprint(sum_of_all_values_of_f(10**100))"
  },
  {
    "example_id": 225,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def f(x):\n    return (x-2)*6\n\nprint(f(12) - f(2))"
  },
  {
    "example_id": 226,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "999.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 0\nfor i in range(1, 1000):\n    n = n + 1\n    for j in range(1, 1000):\n        if (i*j)**2 - 2 == (i*j)**2:\n            n = n + 1\nprint(n)"
  },
  {
    "example_id": 227,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def max_degree_polynomial(n):\n    for i in range(n+1):\n        if (i%2) == 0:\n            if (i == 0):\n                return 0\n            else:\n                return i\n        else:\n            return n\n\nprint(max_degree_polynomial(10))"
  },
  {
    "example_id": 228,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import sympy\nfrom sympy import symbols, expand, factorial\n\na, b, c, d, e = symbols('a, b, c, d, e')\n\nx = expand((a**3 - b**3) / (a - b)**3)\nx = expand((b**3 - c**3) / (b - c)**3)\nx = expand((c**3 - d**3) / (c - d)**3)\nx = expand((d**3 - e**3) / (d - e)**3)\nx = expand((e**3 - a**3) / (e - a)**3)\n\nprint(x)"
  },
  {
    "example_id": 229,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "120.0"
    ],
    "annotated_answers": [
      "254.0"
    ],
    "solution": "a0 = 4\na1 = 1\na2 = 5\na3 = 20\na4 = 35\na5 = 70\na6 = 120\nprint(a6)"
  },
  {
    "example_id": 230,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = 1/2 * (5/sympy.sqrt(3) + 1/sympy.sqrt(3))\nprint(x)"
  },
  {
    "example_id": 231,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "112.0"
    ],
    "solution": "a = [2, 5, 8]\nfor i in range(2, 2023):\n    a.append(a[i-1] + a[i-2] + a[i-3])\n    a[i] = a[i] % 11\nprint(a[2018] * a[2020] * a[2022])"
  },
  {
    "example_id": 232,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x, y = symbols('x y')\neq = x**2 + y**2 - 4*x*y\nsolve_eq = solve(eq)\nprint(solve_eq)"
  },
  {
    "example_id": 233,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "0.0",
      "0.0",
      "0.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a1 = 0\ng1 = 0\na2 = 1\ng2 = 0\na3 = 0\ng3 = 1\na4 = 0\n\na = [a1, a2, a3, a4]\ng = [g1, g2, g3]\n\nfor i in range(len(g)):\n    a.append(a[i] + g[i])\n\nprint(a)"
  },
  {
    "example_id": 234,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x, y = symbols('x y')\neq = (x + 3)*(y - 5)\nx_value = solve(eq, x)\ny_value = solve(eq, y)\nx_value_square = x**2\ny_value_square = y**2\nx_value_square_plus_y_value_square = x_value_square + y_value_square\nprint(Min(x_value_square_plus_y_value_square))"
  },
  {
    "example_id": 235,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "164.0",
      "1.0",
      "4.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "8.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "w = -1 + 4*I\nprint(abs(w**2 + 2*w - 8))"
  },
  {
    "example_id": 236,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "154.0"
    ],
    "solution": "n = 19\nN = 2**(1 + (n-1).bit_length() - 1) - n\nprint(N)"
  },
  {
    "example_id": 237,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "10.0",
      "0.0",
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x, y = symbols('x y')\nregion = floor(x) * floor(y)\narea = integrate(region, (x, 0, 10), (y, 0, 10))\nprint(area)"
  },
  {
    "example_id": 238,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": ""
  },
  {
    "example_id": 239,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "2.0",
      "10.0",
      "2.0",
      "2.0",
      "2.0",
      "14.0",
      "2.0",
      "14.0",
      "49.0"
    ],
    "annotated_answers": [
      "175.0"
    ],
    "solution": "x, y = symbols('x y')\neq = 3*x**2 - 18*x + 4*y**2 - 32*y + 91\nmax_value = sympy.Max(x**2 + y**2 + 2*x*y - 14*x - 14*y + 49,\n                      (x - 10)**2 + (y - 10)**2)\nprint(max_value)"
  },
  {
    "example_id": 240,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2007.0"
    ],
    "annotated_answers": [
      "2007.0"
    ],
    "solution": "from math import ceil\n\ndef f(x):\n    if x <= 0.5:\n        return 2*x\n    else:\n        return 2 - 2*x\n\ndef f_n(x, n):\n    if n == 1:\n        return f(x)\n    else:\n        return f(f_n(x, n-1))\n\ndef count_values_of_x_in_0_1_for_which_f_n_2005_x_equals_1_2(n):\n    count = 0\n    for x in np.linspace(0, 1, 10000):\n        if f_n(x, n) == 0.5:\n            count += 1\n    return count\n\np = 2\na = 2005\nprint(p + a)"
  },
  {
    "example_id": 241,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = symbols('x')\na, b = symbols('a b')\nf1 = x**2 - a*x + 24\nf2 = x**2 - b*x + 36\nsolve((f1 - f2).subs(x, 1), a)"
  },
  {
    "example_id": 242,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 3\nfor m in range(1, 4):\n    if m not in [1, 2, 3]:\n        n += 1\nprint(n)"
  },
  {
    "example_id": 243,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "13.0",
      "2.0",
      "11.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "13.0",
      "2.0",
      "11.0",
      "23.0",
      "6.0",
      "23.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "y, c = symbols('y c')\neq = 3*y**3 - 13*y**2 + 11*y + 23\nquotient = (eq/3*y + 2).as_numer_denom()[0]\nremainder = eq - quotient*(3*y + 2)\nprint(remainder)"
  },
  {
    "example_id": 244,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a + b + c\neq2 = a**2 + b**2 + c**2\neq3 = a**4 + b**4 + c**4\neq1 = solve(eq1, a)[0]\neq2 = solve(eq2, b)[0]\neq3 = solve(eq3, c)[0]\nprint(eq3)"
  },
  {
    "example_id": 245,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-125.0",
      "5.0",
      "78125.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x, a, c = symbols('x a c')\nf = x**7 + a*x**3 + c*x\nf_5 = f.subs(x, 5)\nf_m5 = f.subs(x, -5)\nprint(f_m5)"
  },
  {
    "example_id": 246,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = symbols('a')\nans = abs(a-1 + I*sqrt(3))\nprint(ans)"
  },
  {
    "example_id": 247,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "1.0",
      "-5.0",
      "8.0",
      "39.0",
      "8.0",
      "-5.0",
      "8.0",
      "39.0",
      "8.0",
      "-5.0",
      "8.0",
      "39.0",
      "8.0",
      "-5.0",
      "8.0",
      "39.0",
      "8.0",
      "60.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import expand, simplify, diff, solve\n\ndef f(x):\n    return (x+1/x)**6 - (x**6 + 1/x**6) - 2\n\ndef g(x):\n    return (x+1/x)**3 + (x**3 + 1/x**3)\n\nx = symbols('x')\n\nprint(solve(diff(f(x), x), x))\nprint(simplify(f(x).subs(x, 1)))"
  },
  {
    "example_id": 248,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x, y = symbols('x y')\nf = x*sqrt(1 - y**2) + y*sqrt(1 - x**2)\nf_max = f.subs({x: -1, y: -1})\nprint(f_max)"
  },
  {
    "example_id": 249,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "25.0",
      "2.0",
      "11.0",
      "4.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "x, y = symbols('x y')\neq = x**2/50 - y**2/22 - 2\nfocus_distance = sympy.sqrt(2*eq)\nprint(focus_distance)"
  },
  {
    "example_id": 250,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = 2*x**2 + y - 28\neq2 = x**2 + 2*y\nsolve_eq1 = solve(eq1, y)\nsolve_eq2 = solve(eq2, y)\nprint(solve_eq1[0])\nprint(solve_eq2[0])"
  },
  {
    "example_id": 251,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "25.0"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "def f(x):\n    return x*x\n\nprint(f(2))\nprint(f(5))"
  },
  {
    "example_id": 252,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a**2 - b*c\neq2 = a + b + c - a*b*c\neq3 = a**2 - a*b*c\n\nsol = solve([eq1, eq2, eq3], [a, b, c])\n\na_value = Min(sol[0][0])\nb_value = Min(sol[0][1])\nc_value = Min(sol[0][2])\n\nprint(a_value)\nprint(b_value)\nprint(c_value)"
  },
  {
    "example_id": 253,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nimport cmath\n\ndef largest_rectangle(radius):\n    # Get the coordinates of the points\n    x1 = radius\n    y1 = 0\n    x2 = 0\n    y2 = radius\n\n    # Calculate the area\n    area = x1 * y1 + x2 * y2\n\n    return area\n\nradius = 1\nlargest_area = largest_rectangle(radius)\nprint(largest_area)"
  },
  {
    "example_id": 254,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "819.0"
    ],
    "solution": "def Delta(A):\n    return [A[i+1]-A[i] for i in range(len(A)-1)]\n\ndef DeltaDelta(A):\n    return [1]*len(A)\n\ndef f(A):\n    return A[19]+A[92]\n\ndef solve(A):\n    D = Delta(A)\n    DD = DeltaDelta(D)\n    for i in range(len(DD)):\n        if DD[i]!= 1:\n            raise Exception('DD[i]!= 1')\n    return A[19]\n\nA = [0]*100\nA[19] = 1\nA[92] = 1\nprint(solve(A))"
  },
  {
    "example_id": 255,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def solve_x(x):\n    if x**5 == x**4 + 72*x**3:\n        return x\n    else:\n        return None\n\nfor x in range(1, 100):\n    value = solve_x(x)\n    if value is not None:\n        print(value)"
  },
  {
    "example_id": 256,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0",
      "3.0",
      "3.0",
      "54.0",
      "-4.0",
      "144.0",
      "3.0",
      "3.0",
      "108.0",
      "5184.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "x = symbols('x')\na = symbols('a')\nf = x**3 - 12*x**2 + a*x - 64\nroots = solve(f, x)\nroot_values = [root.subs(x, 0) for root in roots]\nprint(root_values)"
  },
  {
    "example_id": 257,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2016.0"
    ],
    "annotated_answers": [
      "504.0"
    ],
    "solution": "a_1 = 2016\nprint(a_1)"
  },
  {
    "example_id": 258,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "from math import sqrt\n\nA = (-1,1)\nB = (2,4)\nC = (-1,-1)\nD = (2,-4)\n\ndef area(A,B,C,D):\n  return (A[0]*B[1] - A[1]*B[0] + B[0]*C[1] - B[1]*C[0] + C[0]*D[1] - C[1]*D[0] + D[0]*A[1] - D[1]*A[0])/2\n\nprint(area(A,B,C,D))"
  },
  {
    "example_id": 259,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b = symbols('a b')\na_max = Min(a, 1 - a)\nb_max = Min(b, 1 - b)\nf = Lambda((a, b), (a + b)/(a*b + 1))\nf_max = f(a_max, b_max)\nprint(f_max)"
  },
  {
    "example_id": 260,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "1.0",
      "0.0",
      "2.0",
      "1.0",
      "0.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "for x in range(20):\n    for y in range(20):\n        for z in range(20):\n            if (x**x == z) or ((1+x)**y == z):\n                print(x, y, z)"
  },
  {
    "example_id": 261,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "x = symbols('x')\nP, Q, R, S = symbols('P Q R S')\neq = x**5 - 40*x**4 + P*x**3 + Q*x**2 + R*x + S\nroots = solve(eq, x)\nreciprocals = []\nfor root in roots:\n    reciprocals.append(1/(root - 1))\nsum_reciprocals = sum(reciprocals)\nprint(sum_reciprocals)"
  },
  {
    "example_id": 262,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "1.0",
      "2.0",
      "3.0",
      "5.0",
      "8.0",
      "13.0",
      "21.0",
      "34.0",
      "55.0"
    ],
    "annotated_answers": [
      "913.0"
    ],
    "solution": "fib = [0, 1]\nfor i in range(2, 11):\n    fib.append(fib[-1] + fib[-2])\nprint(fib)"
  },
  {
    "example_id": 263,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a + b + c - 4\neq2 = 1/a + 1/b + 1/c - 5\neq = eq1 - eq2\nprint(solve(eq, a)[0])"
  },
  {
    "example_id": 264,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "4.0",
      "1695.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "n, m = symbols('n m')\n\n# sum of first n positive even integers\neven_sum = (n*(n+1))/2\n\n# sum of first m positive odd integers\nodd_sum = (m*(m+1))/2\n\n# 212 more than the sum of the first n positive even integers\nexpr = 212 + even_sum - odd_sum\n\n# solve for n\nn_value = solve(expr, n)\nprint(n_value[0])"
  },
  {
    "example_id": 265,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "17.000000003083027",
      "2.0",
      "0.0",
      "1.0",
      "5.862",
      "-1.0",
      "1.261",
      "0.0",
      "116.0",
      "52.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "f = lambda x: max([abs(x + 15), abs(x + 12), abs(x + 8), abs(x - 1), abs(x - 3), abs(x - 19)])\nprint(minimize(f, 0))"
  },
  {
    "example_id": 266,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-256.0"
    ],
    "solution": "a = 0\nfor x in range(1, 1000):\n    if (8*x**3 + 4*x**2 + 2*x + 1) == 0:\n        a = x\n        break\nprint(a)"
  },
  {
    "example_id": 267,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "# symbols\nx, y, z = symbols('x y z')\n\n# defining a function\nf = Lambda(x, (x**2 + 1)**2)\n\n# defining a function\ng = Lambda(y, (y**2 + 1)**2)\n\n# defining a function\nh = Lambda(z, (z**2 + 1)**2)\n\n# defining a function\nk = Lambda(x, (x**2 + 1)**2)\n\n# evaluating the product\nproduct = f(x)*g(y)*h(z)*k(x)\n\n# print the result\nprint(product)"
  },
  {
    "example_id": 268,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "3.0",
      "4.0",
      "4.0",
      "4.0",
      "5.0",
      "4.0",
      "-2.0",
      "2.0"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "w1, w2, w3, w4, w5 = symbols('w1 w2 w3 w4 w5')\neq = (w1 - w2)*(w1 - w3)*(w1 - w4)*(w1 - w5) + (w2 - w3)*(w2 - w4)*(w2 - w5) + (w3 - w4)*(w3 - w5) + (w4 - w5)\nsol = solve(eq, w1)\nprint(sol[0])"
  },
  {
    "example_id": 269,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Let a, b, and c be distinct real numbers\na, b, c = 1, 2, 3\n\n# Find the degree of the polynomial\ndegree = 0\nfor i in [a, b, c]:\n    degree += (i not in [a, b, c])\n\nprint(degree)"
  },
  {
    "example_id": 270,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "4.0",
      "2.0",
      "5.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "# Let A = ceiling(log_2(2)) + ceiling(log_2(3)) +... + ceiling(log_2(1000))\nA = sum(log(2, i) for i in range(2, 1001))\n\n# Let B = floor(log_2(2)) + floor(log_2(3)) +... + floor(log_2(1000))\nB = sum(log(2, i, evaluate=False) for i in range(2, 1001))\n\nprint(A - B)"
  },
  {
    "example_id": 271,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = 1\nb = 1\nif a > 0 and b > 0:\n    print(\"The domain of the function is (0, inf) and the range is (0, 1).\")\nelse:\n    print(\"The domain of the function is (-inf, 0) and the range is (0, 1).\")"
  },
  {
    "example_id": 272,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1995.0",
      "1.0",
      "2.0",
      "2.0",
      "1995.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "3980025.0"
    ],
    "solution": "x = symbols('x')\neq = sqrt(1995)*x**log(x, 1995) - x**2\nroots = solve(eq, x)\nproduct = 1\nfor root in roots:\n    product *= root\nprint(product)"
  },
  {
    "example_id": 273,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = symbols('x')\ny = (27*x**2 + 9*x + 3)/(27*x**3 + 9*x**2 + 3*x + 1)\ny_value = solve(y, y)\nprint(y_value[0])"
  },
  {
    "example_id": 274,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4001.0"
    ],
    "annotated_answers": [
      "898.0"
    ],
    "solution": "# using the recurrence relation\nx_1 = 211\nx_2 = 375\nx_3 = 420\nx_4 = 523\n\nx_531 = x_1 + x_3 + x_4\nx_753 = x_2 + x_3 + x_4\nx_975 = x_1 + x_2 + x_3 + x_4\n\nprint(x_531 + x_753 + x_975)"
  },
  {
    "example_id": 275,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "17.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b = symbols('a b')\nf = (1/a) + (1/b)\nf_value = f.subs({a: 17, b: 17})\nprint(f_value)"
  },
  {
    "example_id": 276,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "2.0",
      "-1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = symbols('x')\neq = x**4 - 2*x**2 - 7\nreal_roots = solve(eq, x)\nprint(real_roots)"
  },
  {
    "example_id": 277,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0",
      "21.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b = symbols('a b')\nab = a*b\nb_value = 21 - 20*I\nb_mod = 29\na_mod = Abs(ab / b_value)\nprint(a_mod)"
  },
  {
    "example_id": 278,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62480.0"
    ],
    "annotated_answers": [
      "327680.0"
    ],
    "solution": "n_list = [8, 9, 10, 23]\nsum = 0\nfor n in n_list:\n    sum += 4*n**3 + 6*n**2 + 4*n + 1\nprint(sum)"
  },
  {
    "example_id": 279,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = symbols('a')\nx = symbols('x')\neq = x**3 + a*x**2 + a*x + 1\nroots = solve(eq, x)\nfor root in roots:\n    if root.is_real is False:\n        print(\"The root is not real\")\n        break\nelse:\n    print(\"The root is real\")\nprint(a)"
  },
  {
    "example_id": 280,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2619.0",
      "-9603.0"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "a_1 = 27\nb_1 = 99\n\na_15 = b_11 = 27 * 15\nb_15 = 99 * 15\n\na_9 = a_15 - (a_15 - a_1) * 8\nb_9 = b_15 - (b_15 - b_1) * 8\n\nprint(a_9)\nprint(b_9)"
  },
  {
    "example_id": 281,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\neq = x**100\nremainder = sympy.rem(eq, x**8 - x**6 + x**4 - x**2 + 1)\nprint(remainder)"
  },
  {
    "example_id": 282,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "3.0",
      "10.0",
      "9.0",
      "307.0",
      "432.0",
      "126249.0",
      "432.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\neq1 = (2*x**2 - 3*x)/(x**2 - x) + 5*x - 11\neq2 = 3*x**2 + 5*x + 2/(x**2 - 1)\nsol = solve(eq1 - eq2)\nprint(sol)"
  },
  {
    "example_id": 283,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5",
      "1.0",
      "2.0",
      "0.5",
      "0.25",
      "1.0",
      "2.0",
      "1.0",
      "0.125",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\nn = symbols('n')\n\ndef f(x):\n    return (1/2)*(1 - x**2)**(1/2)\n\ndef g(x):\n    return (1/2)*(1 + x**2)**(1/2)\n\ndef h(x):\n    return (1/2)*(1 + x**2)**(1/2) + (1/2)*(1 - x**2)**(1/2)\n\ndef k(x):\n    return (1/2)*(1 - x**2)**(1/2) + (1/2)*(1 + x**2)**(1/2)\n\ndef l(x):\n    return (1/2)*(1 - x**2)**(1/2) - (1/2)*(1 + x**2)**(1/2)\n\na = f(x)\nb = g(x)\nc = h(x)\nd = k(x)\ne = l(x)\n\na_list = []\nb_list = []\nc_list = []\nd_list = []\ne_list = []\n\nfor i in range(1, 11):\n    a_list.append(a**i)\n    b_list.append(b**i)\n    c_list.append(c**i)\n    d_list.append(d**i)\n    e_list.append(e**i)\n\na_sum = sum(a_list)\nb_sum = sum(b_list)\nc_sum = sum(c_list)\nd_sum = sum(d_list)\ne_sum = sum(e_list)\n\nprint('a_sum:', a_sum)\nprint('b_sum:', b_sum)\nprint('c_sum:', c_sum)\nprint('d_sum:', d_sum)\nprint('e_sum:', e_sum)"
  },
  {
    "example_id": 284,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1250.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nlog_162, log_x, log_y, log_z, log_1250 = symbols('log_162 log_x log_y log_z log_1250')\n\n# Arithmetic Progression\ndiff_log = (log_1250 - log_162) / 4\nlog_x = log_162 + diff_log\nlog_y = log_162 + diff_log * 2\nlog_z = log_162 + diff_log * 3\n\n# Equation\neq = (log_x - log_162)**2 + (log_y - log_162)**2 + (log_z - log_162)**2\neq = eq.expand()\n\n# Solve\nsol = solve(eq, log_162)\nprint(sol[0])"
  },
  {
    "example_id": 285,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y = symbols('x y')\neq = x**2 + y**2 - 1\ncond = (x + y)**2\nfunc = Lambda((x, y), cond)\nderiv = diff(func, (x, y))\nprint(Min(deriv, eq))"
  },
  {
    "example_id": 286,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "7.0",
      "2.0",
      "2.0",
      "1.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "z1, z2 = symbols('z1 z2')\neq = (2*z1 + 7*z2)/(2*z1 - 7*z2)\nprint(abs(eq))"
  },
  {
    "example_id": 287,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = symbols('x')\npolynomials = []\nfor i in range(0, 5):\n    polynomial = x**4 + i*x**3 + 2*i*x**2 + 3*i*x + 4\n    if polynomial.subs(x, x**2) == polynomial.subs(x, -x):\n        polynomials.append(polynomial)\nprint(len(polynomials))"
  },
  {
    "example_id": 288,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "340.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "f = lambda x: 4 + sum(2*i*(i-1) for i in range(1,x+1))\nprint(f(8))"
  },
  {
    "example_id": 289,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "135.0",
      "2.0",
      "27.0",
      "29.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\nsolution = solve(x**3 + 3*x + 5, x)\nprint(solution)"
  },
  {
    "example_id": 290,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a = 7j\nb = 4j\nprint(abs(a*b))"
  },
  {
    "example_id": 291,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x = symbols('x')\nf = (x + 5)*(x + 2)/(x + 1)\ng = diff(f, x)\nprint(Min(f, x))"
  },
  {
    "example_id": 292,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "10.0",
      "6.0",
      "1.0",
      "6.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Define variables\nx, y, a, b, c, d, x_star_y = symbols('x y a b c d x_star_y')\n\n# Define x*y\nx_star_y = a*x + b*y + c*x*y\n\n# Define equations\neq1 = x_star_y.subs(x, 1).subs(y, 2) - 3\neq2 = x_star_y.subs(x, 2).subs(y, 3) - 4\neq3 = diff(x_star_y.subs(x, d), d)\n\n# Solve equations\nsolutions = solve([eq1, eq2, eq3], [a, b, c, d])\n\n# Print solution\nprint(solutions)"
  },
  {
    "example_id": 293,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import Sum, symbols, limit, oo, simplify\nk, n = symbols('k n')\nsum_k = Sum(k - 3, (k, 2, oo))\nsum_k = simplify(sum_k)\nsum_k = sum_k.rewrite(n)\nsum_k = sum_k.subs(n, k)\nsum_k = limit(sum_k, k, oo)\nprint(sum_k)"
  },
  {
    "example_id": 294,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "2.0",
      "2.0",
      "9.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = symbols('x')\np = x**23 + 23*x**17 - 18*x**16 - 24*x**15 + 108*x**14\neq = p - (x**4 - 3*x**2 - 2*x + 9)*p\ncoeff = eq.coeff(p)\nprint(coeff)"
  },
  {
    "example_id": 295,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.5",
      "1.0",
      "-1.5",
      "2.0",
      "-2.5",
      "3.0",
      "-3.5",
      "4.0",
      "-4.5"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Find possible rational roots\npossible_rational_roots = []\nfor i in range(1, 10):\n    if i % 2 == 0:\n        possible_rational_roots.append(i/2)\n    else:\n        possible_rational_roots.append(-i/2)\n\nprint(possible_rational_roots)"
  },
  {
    "example_id": 296,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Number of quadratic equations of the form x^2 + ax + b = 0, such that c is a root of the equation, and c^2 - 2 is also a root of the equation\n# is equal to number of quadratic equations of the form x^2 + ax + b = 0, such that c is a root of the equation, and c^2 - 2 is not a root of the equation\n# Since c^2 - 2 is not a root of the equation, we can rewrite the equation as x^2 + ax + b = (x-c)(x-c-2) = 0\n# For the equation to be true, (x-c) and (x-c-2) must both be equal to 0\n# For this to happen, x-c = 0 and x-c-2 = 0\n# x = c and x = c-2\n# c = 2 and c = 1\n# So the number of quadratic equations of the form x^2 + ax + b = 0, such that c is a root of the equation, and c^2 - 2 is also a root of the equation, is 2"
  },
  {
    "example_id": 297,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3628797.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import factorial\n\ndef fibonacci_sum(n):\n    Fn = factorial(n)\n    return Fn/Fn*Fn-1/Fn*Fn-2\n\nprint(fibonacci_sum(10))"
  },
  {
    "example_id": 298,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "0.0"
    ],
    "annotated_answers": [
      "440.0"
    ],
    "solution": "a = 5\nc = 3\nx = symbols('x')\np = 2*x**3 - 2*a*x**2 + (a**2 - 81)*x - c\np1 = diff(p, x)\np2 = diff(p1, x)\np3 = diff(p2, x)\nprint(p3)\n\n\n# Find the values of a and c\nsol = solve([p3.subs(x, 0) == 0, p3.subs(x, 1) == 0], [a, c])\nprint(sol)\n\n# Find the possible values of c\nsol_c = [sol[c] for sol in sol]\nprint(sol_c)\n\n# Find the sum of the possible values of c\nprint(sum(sol_c))"
  },
  {
    "example_id": 299,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "221073.0",
      "18.0",
      "12949.0",
      "54.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "x = symbols('x')\neq = x**3 - 20*x**2 + 18*x - 7\nroots = solve(eq, x)\nr, s, t = roots\nprint(r**2*s**2 + s**2*t**2 + t**2*r**2)"
  },
  {
    "example_id": 300,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "a = 5 + sqrt(3)\nprint(a*a.conjugate())"
  },
  {
    "example_id": 301,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0"
    ],
    "annotated_answers": [
      "0.61"
    ],
    "solution": "# define variables\na1, a2, a3, a4, a5, a6, a7 = symbols('a1 a2 a3 a4 a5 a6 a7')\nA1, A2, A3, A4, A5, A6, A7 = symbols('A1 A2 A3 A4 A5 A6 A7')\nM = symbols('M')\n\n# define equations\neq1 = a1*A1 + a2*A2 + a3*A3 + a4*A4 + a5*A5 + a6*A6 + a7*A7 - 19\neq2 = A1 + A2 + A3 + A4 + A5 + A6 + A7 - 19\n\n# find M\nM = Min(diff(eq1, A1), diff(eq1, A2), diff(eq1, A3), diff(eq1, A4), diff(eq1, A5), diff(eq1, A6), diff(eq1, A7))\nprint(M)"
  },
  {
    "example_id": 302,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# define the variables\nx1, x2, d = symbols('x1 x2 d')\n\n# define the equation\neq = x1 + x2 - d\n\n# solve for d\nd_value = solve(eq, d)\n\nprint(d_value[0])"
  },
  {
    "example_id": 303,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "a1, a2, a3, a4, a5 = symbols('a1 a2 a3 a4 a5')\neq1 = a1*a2 - a1 + a2*a3 - a3 + a4*a5 - a5\neq2 = a5 - a4 - 576\neq3 = a2 - a1 - 9\nsolve([eq1, eq2, eq3])\nprint(a1 + a2 + a3 + a4 + a5)"
  },
  {
    "example_id": 304,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "8.0",
      "4.0",
      "0.0",
      "-8.0",
      "8.0",
      "-16.0",
      "10.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = symbols('x')\ny = Abs(x - 1) + Abs(x - 3)\ndy = diff(y, x)\narea = (8 - y) * dy\nprint(area.subs(x, 2))\nprint(area.subs(x, 4))\nprint(area.subs(x, 6))\nprint(area.subs(x, 8))\nprint(area.subs(x, 10))"
  },
  {
    "example_id": 305,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-26.0"
    ],
    "solution": "# define the polynomial f(x)\nf = x**3 - 3*x**2 - 4*x + 4\n\n# define the polynomial g(x)\ng = x**3 + a*x**2 + b*x + c\n\n# define the roots of f(x)\nr_1, r_2, r_3 = symbols('r_1, r_2, r_3')\n\n# define the roots of g(x)\ns_1, s_2, s_3 = symbols('s_1, s_2, s_3')\n\n# define the z value\nz = (1 - I*sqrt(3))/2\n\n# find the roots of f(x)\nf_roots = solve(f, x)\n\n# find the roots of g(x)\ng_roots = solve(g, x)\n\n# find the coefficients of g(x)\na, b, c = [diff(g, x).subs(x, x_i) for x_i in g_roots]\n\n# find the real part of the sum of the coefficients of g(x)\nreal_sum = Abs(a + b + c)\n\n# find the minimum value of the real part of the sum of the coefficients of g(x)\nreal_sum_min = Min(real_sum)\n\n# print the real part of the sum of the coefficients of g(x)\nprint(real_sum_min)"
  },
  {
    "example_id": 306,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-3.0",
      "3.0",
      "-1.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x - y - 4\neq2 = x**3 - y**3 - 28\nsol = solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 307,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "27.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x, t = symbols('x t')\neq = x**3 - 3*x**2 + t*x + 27\nfactors = sympy.factor(eq)\nprint(factors)"
  },
  {
    "example_id": 308,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\neq = x**4 - 80*x - 36\nroots = solve(eq, x)\nroot_sum = 0\nfor root in roots:\n    if root.is_real:\n        root_sum += root\nprint(root_sum)"
  },
  {
    "example_id": 309,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "18.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x, y = symbols('x y')\nf = (x**2 + 3*x)/(x**2 + 4*x + 3)\n\n# number of horizontal asymptotes\nc = len(solve(f.as_numer_denom()[1]))\n\n# number of oblique asymptotes\nd = len(solve(f.as_numer_denom()[0] - f.as_numer_denom()[1]))\n\n# number of vertical asymptotes\nb = len(solve(f.diff(x).as_numer_denom()[1]))\n\n# number of holes\na = len(solve(f.diff(x).as_numer_denom()[0] - f.diff(x).as_numer_denom()[1]))\n\nprint(a + 2*b + 3*c + 4*d)"
  },
  {
    "example_id": 310,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.6180339887498948"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import sqrt\n\ndef lambda_max(x, y, z):\n    return 2 * (x*y + y*z) / (x*z + y*z + sqrt(5)/2)\n\n# test the function\nx = 0.5\ny = 0.5\nz = 0.5\nprint(lambda_max(x, y, z))"
  },
  {
    "example_id": 311,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b = symbols('a b')\neq = a + 1/(b*(a - b))\nprint(eq.subs({a: 3, b: 1}))"
  },
  {
    "example_id": 312,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "length, width, height = symbols('length width height')\ncheese = length*width*height\nslices = 10\ntotal_volume = cheese - slices*1\nprint(total_volume)"
  },
  {
    "example_id": 313,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = (3*x + 4*y + 12*z).expand()\nmax_val = eq.subs({x:1, y:0, z:0}).evalf()\nprint(max_val)"
  },
  {
    "example_id": 314,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0"
    ],
    "annotated_answers": [
      "134.0"
    ],
    "solution": "candidates = range(1, 28)\nfor candidate in candidates:\n    percent = (candidate - 1)/candidate\n    print(percent)\n    if percent < 0.99:\n        print(candidate)\n        break"
  },
  {
    "example_id": 315,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5547.0"
    ],
    "annotated_answers": [
      "224.0"
    ],
    "solution": "n = 2007\na = [3, 3]\nfor i in range(2, n+1):\n    a.append((a[i-1] * a[i-2]) % 10000)\nprint(a[n])"
  },
  {
    "example_id": 316,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "expression = abs(9j - 12) * abs(3 + 4j)\nprint(expression)"
  },
  {
    "example_id": 317,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "0.166666666666667",
      "2.0",
      "8.0",
      "0.166666666666667",
      "2.0",
      "8.0",
      "0.166666666666667",
      "2.0",
      "4.0",
      "0.166666666666667",
      "2.0",
      "4.0",
      "0.166666666666667",
      "2.0",
      "8.0",
      "0.166666666666667",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n\ndef f(x, y):\n    return (2*x + 1/3*y)**2 + (2*y + 1/3*x)**2 + (2*x + 1/3*y)**2\n\nmin_value = Min(f(a, b), f(b, c), f(c, a))\nprint(min_value)"
  },
  {
    "example_id": 318,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "997.0"
    ],
    "annotated_answers": [
      "997.0"
    ],
    "solution": "a, b = symbols('a b')\nx, y = symbols('x y')\neq1 = x**2 + y**2 - 1994**2\neq2 = (2*1994 - x)*x + (2*1994 - y)*y - 0\nsol = solve([eq1, eq2], [x, y])\nprint(sol[0][0] + sol[0][1])"
  },
  {
    "example_id": 319,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a = 1\nb = 2\nc = -1\nexpression = a + b + c\nprint(expression)"
  },
  {
    "example_id": 320,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "7.0",
      "5.0",
      "4.0",
      "3.0",
      "3.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = symbols('x')\nrational = (2*x**7 - 5*x**4 + 3*x**3 - x + 5)/(x**2 - 2*x + 1)\nrational_derivative = rational.diff(x)\nprint(rational_derivative)"
  },
  {
    "example_id": 321,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a, b = symbols('a b')\n\n# Find the minimum value of a^4 + b^8\nexpr = a**4 + b**8\n\n# Find the minimum value of the expression\nsol = solve(expr, a, b)\n\n# Print the minimum value\nprint(sol)"
  },
  {
    "example_id": 322,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-5.0",
      "5.0",
      "6.0",
      "5.0",
      "4.0",
      "10.0",
      "2.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "z = symbols('z')\nexpression = log(Abs(z**5))/log(Abs(z))**5\nsolution = Min(diff(expression, z), 0)\nprint(solution.subs(z, I))"
  },
  {
    "example_id": 323,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-21.0",
      "18.0",
      "-3.0",
      "2.0",
      "1511.0",
      "2.0",
      "-3.0",
      "2.0",
      "1511.0",
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = symbols('x')\neq = x*(x + 1)*(x + 2)*(x + 3) + 1\nsol = solve(eq - 379**2, x)\nprint(sol)"
  },
  {
    "example_id": 324,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq = (a**2 + b**2 + c**2 + d**2)\nprint(eq)"
  },
  {
    "example_id": 325,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\nf = (x - 1)**7 + 3*(x - 1)**6 + (x - 1)**5 + 1\nf = f / (x - 1)**5\nf = f.subs(x, x + 1)\nf = f.diff(x)\nf = f.subs(x, 1)\nprint(f)"
  },
  {
    "example_id": 326,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "-6.0",
      "-12.0",
      "4.0",
      "6.0",
      "12.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "x, y, z = symbols('x y z')\n\n# Solve for the equations\neq1 = x*y - 24\neq2 = x*z - 48\neq3 = y*z - 72\n\n# Solve for the variables\nsol = solve([eq1, eq2, eq3], [x, y, z])\n\n# Print the values of the variables\nprint(sol)\n\n# Calculate the sum of the variables\nsum = x + y + z\nprint(sum)"
  },
  {
    "example_id": 327,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0004960317460316332"
    ],
    "annotated_answers": [
      "-338016.0"
    ],
    "solution": "from sympy import symbols, factorial, binomial, expand, simplify\nfrom sympy.abc import x\n\ndef sum_of_reciprocals(n):\n    \"\"\"\n    Returns the sum of the reciprocals of the first n positive integers.\n    \"\"\"\n    return sum([1/i for i in range(1, n+1)])\n\ndef compute_expression(n):\n    \"\"\"\n    Returns the expression of the sum of the reciprocals of the first n positive integers.\n    \"\"\"\n    return sum_of_reciprocals(n) - sum_of_reciprocals(n-1)\n\nn = 2016\nx_list = [symbols('x_{}'.format(i+1)) for i in range(n)]\nroots = [x**i for i in range(n)]\nexpression = expand(sum(roots))\nsolution = compute_expression(n)\nprint(solution)"
  },
  {
    "example_id": 328,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "k, x = symbols('k x')\nF1, F2 = symbols('F1 F2')\ny = symbols('y')\n\n# Equation of ellipse\neq1 = k*x**2 + y**2 - 1\neq2 = x**2 + y**2 - 1\n\n# Equation of circle\neq3 = (x - F1)**2 + (y - F2)**2 - 1\n\n# Equation of tangent line\neq4 = x**2 + y**2 - (F1 + F2)**2\n\n# Equation of tangent line at x-axis\neq5 = 2*x*y - 2*F1*y\n\n# Solving for k\nk_value = solve(eq1 - eq2, k)\nprint(k_value[0])"
  },
  {
    "example_id": 329,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4030056.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "def f(x):\n    return x * (x + 1)\n\nprint(f(2007))"
  },
  {
    "example_id": 330,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0",
      "5.0",
      "3.0",
      "-8.0",
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x = symbols('x')\neq = log(2*(2*x + 8)/(x + 2)) + log(2*(x + 2)/(x - 5))\nsol = solve(eq - 3, x)\nprint(sol)"
  },
  {
    "example_id": 331,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "a = 1 - 1j\nprint(abs(a**8))"
  },
  {
    "example_id": 332,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, b = symbols('a b')\na_b = (a**3 - b**3)/(a-b)\na_b_eq = a_b - 1\na_b_eq_eq_0 = solve(a_b_eq, a)\nprint(a_b_eq_eq_0)"
  },
  {
    "example_id": 333,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "501256.0"
    ],
    "annotated_answers": [
      "996506.0"
    ],
    "solution": "n = 1\nk = 4\nwhile n < 500000:\n    n = n + k + 3\n    k = k + 2\nprint(n)"
  },
  {
    "example_id": 334,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = symbols('x')\neq = x**9 - x**6 + x**3 - 1\nremainder = sympy.rem(eq, x**2 + x + 1)\nprint(remainder)"
  },
  {
    "example_id": 335,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "169.0",
      "-28726.5",
      "-28726.5"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def parab(x):\n    return(4 - x**2)\n\ndef tangent_area(a):\n    x = a\n    y = parab(x)\n    x2 = x + 1\n    y2 = parab(x2)\n    s = (x2 - x) * (y2 + y) / 2\n    return(s)\n\ndef find_a(s):\n    a = (s**2 + 2*s + 1) / 4\n    return(a)\n\ndef find_x(a):\n    x = a\n    y = parab(x)\n    x2 = x + 1\n    y2 = parab(x2)\n    s = (x2 - x) * (y2 + y) / 2\n    return(s)\n\ndef find_y(a):\n    x = a\n    y = parab(x)\n    x2 = x + 1\n    y2 = parab(x2)\n    s = (x2 - x) * (y2 + y) / 2\n    return(s)\n\ns = 25\na = find_a(s)\nx = find_x(a)\ny = find_y(a)\n\nprint(\"a = \", a)\nprint(\"x = \", x)\nprint(\"y = \", y)"
  },
  {
    "example_id": 336,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "36.0",
      "2.0",
      "81.0",
      "2.0",
      "25.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "import sympy\nfrom sympy import symbols, sqrt, solve\n\nx, y, a, b, c = symbols('x y a b c')\n\nc1 = (x-10)**2 + y**2 - 36\nc2 = (x+15)**2 + y**2 - 81\n\nsolve_c1 = solve(c1, x)\nsolve_c2 = solve(c2, x)\n\nPx = solve_c1[0]\nQx = solve_c2[0]\n\nPQ = sqrt((Px-Qx)**2 + (y)**2)\nprint(PQ)"
  },
  {
    "example_id": 337,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 18\nb = 20\n\nx = -54/9\ny = -40/4\n\nh = x\nk = y\n\nprint(h + k + a + b)"
  },
  {
    "example_id": 338,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2852978.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, n = symbols('a n')\nf = a*n**3 - 2*a*n**2 + a*n\nf_1 = f.subs(a, 1)\nf_98 = f_1.subs(n, 98)\nf_99 = f_1.subs(n, 99)\nf_100 = f_1.subs(n, 100)\nsum = f_100 + f_99 + f_98\nprint(sum)"
  },
  {
    "example_id": 339,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "solution = 0\nfor z1 in range(1, 100):\n    for z2 in range(1, 100):\n        if (z1 * z2).imag and z1 / z2 == z2.real:\n            solution += 1\nprint(solution)"
  },
  {
    "example_id": 340,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "256.0",
      "256.0",
      "256.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# find the log of log of log of 256\nn = 3\nlog_base = 256\nlog_base_to_power = 64\nfor i in range(n):\n    log_base_to_power = log(log_base_to_power, log_base)\n\nprint(log_base_to_power)"
  },
  {
    "example_id": 341,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-7.0",
      "2.0",
      "3.0",
      "2.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1.0",
      "2.0",
      "3.0",
      "2.0",
      "7.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = symbols('x')\nroot = solve(x**2 + 5*x + 7, x)[0]\nresult = (root - 1)*(root + 2)*(root + 6)*(root + 3)\nprint(result)"
  },
  {
    "example_id": 342,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import factor, symbols\n\nx = symbols('x')\np1, p2, p3, p4 = symbols('p1:5')\n\neq = x**12 - 1\nfactored = factor(eq)\nprint(factored)"
  },
  {
    "example_id": 343,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a = 2\nb = 3\nh = -1\nk = 0\n\nprint(a + k)"
  },
  {
    "example_id": 344,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "5.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nf = 2*x**2 + 5*y**2 + 2*z**2 + 4*x*y - 4*y*z - 2*z - 2*x\nf_min = Min(f, x, y, z)\nprint(f_min)"
  },
  {
    "example_id": 345,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 5-12j\nprint(abs(z))"
  },
  {
    "example_id": 346,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.316375287739983",
      "200"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "def polynomial(x):\n    total = 0\n    for i in range(1, 101):\n        total += (x**i - i)\n    return total\n\nprint(polynomial(102))"
  },
  {
    "example_id": 347,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "x = symbols('x')\nP = Lambda(x, x**2 + 4)\nP_1 = P(P(x))\nP_2 = P(x)\neq = P_1 + P_2 - 6*x\nsol = solve(eq, x)\nprint(sum(sol))"
  },
  {
    "example_id": 348,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-46.0"
    ],
    "solution": "a, b, p = symbols('a b p')\neq = a**4 - 6*a**3 + 26*a**2 + p*a + 65\nsolve(eq.as_real_imag()[0] - 0, p)"
  },
  {
    "example_id": 349,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1054.0"
    ],
    "annotated_answers": [
      "973.0"
    ],
    "solution": "n = 20\na = 1\nwhile a < 1000:\n    a = a * 2\n    n += 1\nprint(n + a)"
  },
  {
    "example_id": 350,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "f = lambda x: x**2 + 6*x + 1\nR = set(filter(lambda p: f(p[0]) + f(p[1]) <= 0 and f(p[0]) - f(p[1]) <= 0, [(x, y) for x in range(-100, 100) for y in range(-100, 100)]))\nprint(round(abs(sum(map(lambda p: p[0] * p[1], R)) / len(R))))"
  },
  {
    "example_id": 351,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.346680637175317",
      "0.424595332391238",
      "0.180281196288426",
      "2.0",
      "0.480749856769136",
      "-0.0277777777777778",
      "-0.375",
      "2.0",
      "3.0",
      "-0.375"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "K, L, M = symbols('K L M')\na, b, c, d = symbols('a b c d')\n\n# Equation\neq = x**4 - K*x**3 + K*x**2 + L*x + M\n\n# Solve for the roots\nroots = solve(eq, x)\n\n# Compute the sum of squares\nsum_of_squares = (roots[0]**2 + roots[1]**2 + roots[2]**2 + roots[3]**2).evalf()\n\n# Print the result\nprint(sum_of_squares)"
  },
  {
    "example_id": 352,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4036.0"
    ],
    "solution": "def sum_of_squares(n):\n    return sum(i*(i/n)**2 for i in range(1, n+1))\n\ndef find_n(target):\n    n = 0\n    while sum_of_squares(n) < target:\n        n += 1\n    return n\n\nprint(find_n(1/2018))"
  },
  {
    "example_id": 353,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-588.0"
    ],
    "solution": "n = 14\na = 1\nb = 15\nx = symbols('x')\nf = (1-x)*(1+2*x)*(1-3*x)*(1-a*x)**(n-1)*(1+b*x)**(n-1)\nprint(f.coeff(x, 2))"
  },
  {
    "example_id": 354,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "19941989.0"
    ],
    "annotated_answers": [
      "19941989.0"
    ],
    "solution": "n = 19941994\nresult = int(math.floor(math.sqrt(n**2 - 10*n + 29)))\nprint(result)"
  },
  {
    "example_id": 355,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import solve, symbols, Eq, Piecewise, sqrt\nx, y = symbols('x y')\nsol = solve(Eq(x**2 + 2*y**2 + 0.5, x*(2*y + 1)), (x, y))\nprint(len(sol))"
  },
  {
    "example_id": 356,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-100.0",
      "11.0",
      "1230.0",
      "36.0",
      "11.0",
      "1.0",
      "3.0",
      "550.0",
      "3.0",
      "11.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = symbols('x')\np = Lambda(x, x**4 + 8*x**3 + 13*x**2 - 100*x + 8)\n\nf = diff(p(x), x)\n\n# find all roots of p(x)\nroots = solve(f, x)\n\n# find the value of the expression\nsum = 0\nfor r in roots:\n    sum += p(r)\nprint(sum)"
  },
  {
    "example_id": 357,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "8.0",
      "151.0",
      "5.0",
      "60.0",
      "100.0",
      "5.0",
      "-151.0",
      "4.0",
      "12.0"
    ],
    "annotated_answers": [
      "-150.0"
    ],
    "solution": "n = symbols('n')\na = (-1)**(n+1)*(3*n + 2)\nprint(a.series(n, 100).removeO())"
  },
  {
    "example_id": 358,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "from sympy import solve, Symbol\nz = Symbol('z')\nsolutions = solve(z**3 + z**2 - z**2 + 2*z, z)\nprint(solutions)"
  },
  {
    "example_id": 359,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import numpy as np\n\ndef f(m, n):\n    if m == 1 and n == 1:\n        return 1\n    elif m > 1 and n > 1:\n        return f(m-1, n) + f(m, n-1) + f(m-1, n-1)\n    else:\n        return 0\n\ndef S(k):\n    return np.sum([f(a, b) for a in range(1, k+1) for b in range(1, k+1) if a + b == k])\n\ndef calculate_pq(k):\n    S_k1 = S(k+1)\n    S_k = S(k)\n    S_k2 = S(k+2)\n    p = (S_k2 - S_k1) / (S_k1 - S_k)\n    q = (S_k2 - S_k) / (S_k1 - S_k)\n    return p, q\n\np, q = calculate_pq(2)\nprint(p * q)"
  },
  {
    "example_id": 360,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b = symbols('a b')\n\n# Minimize the expression\nf = (a**2 + b**2) / (a - b)\n\n# Find the solution\nsol = solve(f, a)\n\n# Evaluate the solution\na = sol[0]\nb = 5\n\n# Find the minimum\nmin_val = Min(f, a, b)\nprint(min_val)"
  },
  {
    "example_id": 361,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "137438953472.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "189827962198875.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "import sympy as sp\nfrom sympy import *\nx, y, z, w = symbols('x y z w')\ne = sp.Matrix([[x**2/(2**2 - 1), y**2/(2**2 - 3**2), z**2/(2**2 - 5**2), w**2/(2**2 - 7**2)],\n               [x**2/(4**2 - 1), y**2/(4**2 - 3**2), z**2/(4**2 - 5**2), w**2/(4**2 - 7**2)],\n               [x**2/(6**2 - 1), y**2/(6**2 - 3**2), z**2/(6**2 - 5**2), w**2/(6**2 - 7**2)],\n               [x**2/(8**2 - 1), y**2/(8**2 - 3**2), z**2/(8**2 - 5**2), w**2/(8**2 - 7**2)]])\nprint(e.det())"
  },
  {
    "example_id": 362,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# a, b, c, d, e = symbols('a b c d e')\na, b, c, d, e = symbols('a b c d e')\nexpr = 8*x**3 - 27\nexpr1 = (a*x + b)*(c*x**2 + d*x + e)\nprint(expr1)\n\n\n# a + b + c + d + e\n(a + b + c + d + e).expand()"
  },
  {
    "example_id": 363,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.560999959977897",
      "-17.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import primefactors, gcd\n\n# Find the prime factors of a and b\na = 123456789\nb = a**3 + 3*a**2 + 9*a + 7\n\n# Find the prime factors of a and b\nafactors = primefactors(a)\nbfactors = primefactors(b)\n\n# Find the common factors of a and b\ncommon_factors = [f for f in afactors if f in bfactors]\n\n# Compute the gcd of a and b\ng = gcd(a,b)\n\n# Compute the ratio of a to b\nratio = a/b\n\n# Print the result\nprint(ratio)"
  },
  {
    "example_id": 364,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "def real_solutions(x):\n    return x*x - 5*x + 3\n\ndef real_solutions_sum(x):\n    sum = 0\n    for i in range(x):\n        if real_solutions(i) == 0:\n            sum += i\n    return sum\n\nprint(real_solutions_sum(10))"
  },
  {
    "example_id": 365,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "14.0",
      "5.0",
      "10.0",
      "5.0",
      "5.0",
      "5.0",
      "14.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import Symbol, solve\n\nx = Symbol('x')\nsol = solve(5*x**4 - 10*x**3 + 10*x**2 - 5*x - 11, x)\nprint(sol)"
  },
  {
    "example_id": 366,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-27.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "n = symbols('n')\na = 14\np = 24 - 5*a\nq = 5\nr = a\nprint(p + q + r)"
  },
  {
    "example_id": 367,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-145017.0",
      "217.0",
      "30500.0",
      "2196.0",
      "217.0",
      "1.0",
      "3.0",
      "2.0",
      "2136125.0",
      "30500.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "a1, a2, an = symbols('a1 a2 an')\neq1 = a1 + a2 + an\neq2 = a1**2 + a2**2 + an**2\neq3 = a1**3 + a2**3 + an**3\nsol = solve((eq1 - 96, eq2 - 144, eq3 - 216), (a1, a2, an))\nprint(sol)"
  },
  {
    "example_id": 368,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "226.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "P = lambda x: x**2 - 2*x + 2\nexpression = P(16)\nprint(expression)"
  },
  {
    "example_id": 369,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "0.0",
      "5.0",
      "4.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = symbols('x')\neq = 5*x**4 - 8*x**3 + 2*x**2 + 4*x + 7\neq = eq / (x + 2)**4\neq = eq.expand()\na, b, c, d, e = symbols('a b c d e')\neq_ = eq.subs({a: 0, b: 0, c: 0, d: 0, e: 0})\neq_ = eq_.expand()\neq_ = eq_.simplify()\nprint(eq_.coeff(x**4))\nprint(eq_.coeff(x**3))\nprint(eq_.coeff(x**2))\nprint(eq_.coeff(x))\nprint(eq_.coeff(1/x**4))\nprint(eq_.coeff(1/x**3))\nprint(eq_.coeff(1/x**2))\nprint(eq_.coeff(1/x))\nprint(eq_.coeff(1))"
  },
  {
    "example_id": 370,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "1.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0",
      "1.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\nf = Function('f')\neq = x**2 * f(x) + f(1 - x) - (-x**4 + 2*x)\nsol = solve(eq, f(x))\nalpha, beta = symbols('alpha beta')\nalpha_value = solve(eq.subs(x, alpha), f(alpha))\nbeta_value = solve(eq.subs(x, beta), f(beta))\nprint(alpha_value[0]**2 + beta_value[0]**2)"
  },
  {
    "example_id": 371,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "4.0",
      "1.0",
      "3.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Define variables\na, b, c = symbols('a b c')\n\n# Define equations\neq1 = a*b + a*c + b*c\neq2 = (a + b + c + 1)**2\n\n# Define functions\nf = Lambda(x, x**3 + 3*x**2 - 3*x + 1)\ng = Lambda(x, x**2 - 4*x + 4)\n\n# Find roots\nroots = solve([eq1, eq2], [a, b, c])\n\n# Find possible values of (ab - c)(ac - b)(bc - a)\nvalues = []\nfor root in roots:\n    # Calculate (ab - c)(ac - b)(bc - a)\n    val = f(root[0])*g(root[1])*g(root[2])\n\n    # Add to list\n    values.append(val)\n\n# Print list\nprint(values)"
  },
  {
    "example_id": 372,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "576.0"
    ],
    "solution": "x = 8**2\nprint(x)"
  },
  {
    "example_id": 373,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "1.0",
      "4.0",
      "1.0",
      "4.0",
      "1.0",
      "2.0",
      "4.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "# x, y, z are positive real numbers\nx, y, z = symbols('x y z', positive=True)\n\n# expression is a product of 3 terms\nexpr = (x**4 + 1)*(y**4 + 1)*(z**4 + 1)\n\n# expression is divided by xy^2z\nexpr_divided = expr/ (x*y**2*z)\n\n# the minimum value is of the form a*sqrt(b)/c\n# for some positive integers a, b, and c, where a and c are relatively prime, and b is not divisible by the square of a prime\n# find the minimum value of expr_divided\nmin_value = Min(expr_divided, Lambda((x, y, z), diff(expr_divided, x)),\n               Lambda((x, y, z), diff(expr_divided, y)),\n               Lambda((x, y, z), diff(expr_divided, z)))\n\n# print the value of a + b + c\nprint(Abs(min_value)**2)"
  },
  {
    "example_id": 374,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3968.0"
    ],
    "annotated_answers": [
      "3968.0"
    ],
    "solution": "def f(x):\n    if int(sqrt(x)) == sqrt(x):\n        return sqrt(x)\n    else:\n        return (f(x-1))**2 - 1\n\nprint(f(8))"
  },
  {
    "example_id": 375,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0",
      "-11.0",
      "8.0",
      "2327.0",
      "8.0",
      "-11.0",
      "8.0",
      "2327.0",
      "8.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = symbols('x')\nf = 4*x**3 - 41*x**2 + 10*x - 1989\nsol = solve(f, x)\nprint(sol)"
  },
  {
    "example_id": 376,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "0.0",
      "3.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "181.0"
    ],
    "solution": "a = symbols('a')\na0, a1, a2 = symbols('a0 a1 a2')\na_list = [a0, a1, a2]\n\nfor i in range(3, 1331):\n    a_list.append(2*a_list[i-1] - 2*a_list[i-2] + a_list[i-3])\n\nprint(a_list[1330])"
  },
  {
    "example_id": 377,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "101.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols('x:102')\nsum = x[1]*x[2] + x[1]*x[3] + x[1]*x[101] + x[2]*x[3] + x[2]*x[101] + x[3]*x[101]\nsum_squares = x[1]**2 + x[2]**2 + x[3]**2 + x[101]**2\nconstraint = sum_squares - 1\nmaximum = solve(sum - constraint, x[1])\nprint(maximum)"
  },
  {
    "example_id": 378,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "n = symbols('n')\neq = 3*n**3 - 12*n\nsol = solve(eq, n)\nprint(len(sol))"
  },
  {
    "example_id": 379,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1250.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "z = 9 + 10*I\nz2 = z**2\nz3 = z**3\nz2_real, z2_imag = z2.as_real_imag()\nz3_real, z3_imag = z3.as_real_imag()\nb = z2_imag - z3_imag\nprint(b)"
  },
  {
    "example_id": 380,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "36.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z1 = 1\nz2 = 2\nz3 = 3\nexpression = abs(9*z1*z2 + 4*z1*z3 + z2*z3)\nprint(expression)"
  },
  {
    "example_id": 381,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.217147240951626",
      "100.0",
      "2.0",
      "100.0",
      "10.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\neq = 2*log(x, 10) - log(x, 1/100)\neq_min = eq.subs(x, 100)\nprint(eq_min)"
  },
  {
    "example_id": 382,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# if x = -1, then x^5 + 5x^4 + 10x^3 + 10x^2 - 5x + 1 = 10\n# so we need to find x such that the equation is satisfied\n\nx = -1\nwhile True:\n    if x**5 + 5*x**4 + 10*x**3 + 10*x**2 - 5*x + 1 == 10:\n        break\n    else:\n        x += 1\n\nprint((x + 1)**4)"
  },
  {
    "example_id": 383,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "6.0",
      "3.0",
      "7.0",
      "2.0",
      "2.0",
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\nf = (2*x - 6)/(x**3 - 7*x**2 - 2*x + 6)\nprint(f.as_numer_denom())"
  },
  {
    "example_id": 384,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "for k in range(4):\n    print(k)"
  },
  {
    "example_id": 385,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x + 2*y + 4*z - 12\neq2 = x*y + 2*x*z + 4*y*z - 22\neq3 = x*y*z - 6\nsol = solve([eq1, eq2, eq3], [x, y, z])\nprint(sol)"
  },
  {
    "example_id": 386,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.188868845137331",
      "63.0",
      "3.996001025798152",
      "63.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "z = 1 - 5j\nexpression = 0\nfor i in range(1, 46):\n    expression += (z**i + z**(-i))**2\nprint(expression)"
  },
  {
    "example_id": 387,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.09090909090909091"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "a_n = 2\na_0 = 66\na_1 = -4\na_2 = 3\n\nexpression = (a_1*a_2) / (a_0*a_n)\nprint(expression)"
  },
  {
    "example_id": 388,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b = symbols('a b')\nf = Lambda(x, a*x + b)\neq = f(f(f(x))) - 8*x - 21\nsolve(eq, a + b)"
  },
  {
    "example_id": 389,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n\neq1 = a*b\neq2 = a*c\neq3 = b*c\neq4 = a + b\neq5 = a + c\neq6 = b + c\neq7 = a*b*c\neq8 = a*b + a*c + b*c\neq9 = a*b*c + a*c + b*c\neq10 = a*b*c + a*b + a*c + b*c\n\nmax_value = sympy.Max(sympy.sqrt(eq3*eq2), sympy.sqrt(eq2*eq1), sympy.sqrt(eq1*eq3), sympy.sqrt(eq3*eq1), sympy.sqrt(eq1*eq2), sympy.sqrt(eq2*eq3), sympy.sqrt(eq3*eq1*eq2), sympy.sqrt(eq1*eq2*eq3), sympy.sqrt(eq1*eq3*eq2), sympy.sqrt(eq2*eq3*eq1))\n\nprint(max_value)"
  },
  {
    "example_id": 390,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "# Define the symbols\nx, y, a, b, r, d = symbols('x y a b r d')\n\n# Define the ellipse\nell = (x**2/a**2 + y**2/b**2) - 1\n\n# Define the circle\ncir = (x**2 + (y-3)**2) - 4\n\n# Define the function to find the max value of PQ + F1Q\ndef max_val(P, Q):\n    # Find the distance between P and Q\n    d = Abs(P - Q)\n\n    # Find the distance between P and F1\n    r = Abs(P - F[1])\n\n    # Find the distance between P and F2\n    s = Abs(P - F[2])\n\n    # Find the maximum value of PQ + F1Q\n    max_val = Max(d, r + s)\n\n    return max_val\n\n# Find the maximum value of PQ + F1Q\nmax_val_ = Lambda(P, Q, max_val(P, Q))\n\n# Find the maximum value of PQ + F1Q\nmax_val_ = diff(max_val_, P)\n\n# Find the maximum value of PQ + F1Q\nmax_val_ = diff(max_val_, Q)\n\n# Find the maximum value of PQ + F1Q\nmax_val_ = solve(max_val_, (x, y))\n\n# Print the maximum value of PQ + F1Q\nprint(max_val_[0])"
  },
  {
    "example_id": 391,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "59.0",
      "2.0",
      "4.0",
      "3.0",
      "59.0",
      "2.0",
      "4.0",
      "3.0",
      "59.0",
      "2.0"
    ],
    "annotated_answers": [
      "-376.0"
    ],
    "solution": "r, s, t = symbols('r s t')\nf = Lambda(x, 4*x**3 - 59*x**2)\nprint(f(r) + f(s) + f(t))"
  },
  {
    "example_id": 392,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "# Define a function to compute the terms of the binomial expansion\ndef binomial_terms(n):\n    terms = []\n    for i in range(0, n + 1):\n        for j in range(0, i + 1):\n            terms.append(1/sympy.factorial(j))\n    return terms\n\n# Compute the terms of the binomial expansion\nterms = binomial_terms(31)\n\n# Compute the maximum term\nmax_term = terms[0]\nfor term in terms:\n    if term > max_term:\n        max_term = term\n\n# Find the value of b\nb = max_term.as_numer_denom()[1]\nprint(b)"
  },
  {
    "example_id": 393,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "print(0)"
  },
  {
    "example_id": 394,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x**2 + 2*y**2 + 5*z**2 - 22\nexpr = x*y + x*z + y*z\nresult = max(expr.subs({x: x_val, y: y_val, z: z_val}) for x_val in range(0, 11) for y_val in range(0, 11) for z_val in range(0, 11))\nprint(result)"
  },
  {
    "example_id": 395,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "# 0 is a root of f(x)\nf = Lambda(x, x**2 + 2*x + 1)\n# Find the number of roots of f(x)\nn = len(solve(f(x) - 2010, x))\nprint(n)"
  },
  {
    "example_id": 396,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "-3.0",
      "6.0",
      "32.0",
      "2.0",
      "-3.0",
      "4.0",
      "16.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a, b = symbols('a b')\neq = 3*a**3*sqrt(3) + 2/(a*b - 2*b**2)\nmin_value = solve(eq, a)\nprint(min_value[0])"
  },
  {
    "example_id": 397,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x, y = symbols('x y')\neq = 4*x**2 - 8*x + y**2 + 4*y - 8\npf = 4*x**2 + 4*x*y + y**2\nd = solve(eq - pf, x)[0]\nprint(d)"
  },
  {
    "example_id": 398,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6039063.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "from itertools import accumulate\n\nx = [0]\nfor k in range(2006):\n    x.append(abs(x[-1] + 3))\n\nprint(sum(x))"
  },
  {
    "example_id": 399,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "670.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# Define the variables\nx = symbols('x')\n\n# Define the polynomial P(x)\nP = 4*x**3 + 7*x**2 - 2*x + 5\n\n# Define the remainder R(x)\nR = 2*x**2 - 10*x + 10\n\n# Calculate the remainder when P(x) is divided by (x-1)(x-4)\nremainder_1 = P.subs(x, 1)\nremainder_2 = P.subs(x, 4)\n\n# Calculate the remainder when R(x) is divided by (x-2)(x-3)\nremainder_3 = R.subs(x, 2)\nremainder_4 = R.subs(x, 3)\n\n# Calculate the value of P(5)\nP_value = P.subs(x, 5)\n\n# Print the solution\nprint(P_value)"
  },
  {
    "example_id": 400,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y, z = 0, 0, 0\n\nwhile x + y + z!= 3:\n    if x + y + z < 3:\n        x += 0.5\n        y += 0.5\n        z += 0.5\n    else:\n        x -= 0.5\n        y -= 0.5\n        z -= 0.5\n\nprint((x*y + z)*(x*z + y))"
  },
  {
    "example_id": 401,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "3.0",
      "2.0",
      "3.0",
      "108.0",
      "2009.0",
      "3.0",
      "2025.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "k, alpha, beta, gamma, delta = symbols('k alpha beta gamma delta')\neq = alpha**4 + k*alpha**2 + 90*alpha - 2009\nroot_values = solve(eq, alpha)\nprint(root_values)"
  },
  {
    "example_id": 402,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "501.0"
    ],
    "solution": "x, k = symbols('x k')\neq = log(k*x) - 2*log(x+2)\nsolutions = solve(eq, x)\nprint(len(solutions))"
  },
  {
    "example_id": 403,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import Symbol, simplify, solve\nx = Symbol('x', real=True)\nf = (x**3 - x**2 + x)/(6*x**2 - 9*x)\ng = simplify(f.expand())\nprint(g)"
  },
  {
    "example_id": 404,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "-8.0",
      "2.0",
      "12.0",
      "6.0",
      "18.0",
      "2.0",
      "18.0",
      "3.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = 3*x**2 + 12*y**2 + 27*z**2 - 4*x*y - 6*x*z - 12*y*z - 8*y - 24*z\nsol = solve(eq, x, y, z, dict=True)\nprint(sol[0])"
  },
  {
    "example_id": 405,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# maximum possible value of degree of quotient\nmax_deg_q = 9 - 3\nprint(max_deg_q)"
  },
  {
    "example_id": 406,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\na, b = symbols('a b', real=True, positive=True)\neq = (x - a)/b + (x - b)/a - (b/(x - a) + a/(x - b))\nprint(solve(eq, x))"
  },
  {
    "example_id": 407,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nx = symbols('x')\neq1 = x**4 + a*x**3 + b*x**2 + c*x + 1\neq2 = x**4 + 2*a*x**3 + 2*b*x**2 + 2*c*x + 1\nremainder = sympy.rem(eq1, eq2)\na_value = solve(remainder - 1, a)\nb_value = solve(remainder - 1, b)\nc_value = solve(remainder - 1, c)\nprint(a_value[0] + b_value[0] + c_value[0])"
  },
  {
    "example_id": 408,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\n\nn = 2001\na = 2\nb = 3\n\nf = a*x**n + b\n\ndiff_f = diff(f)\n\n# print(diff_f)\n\nroots = solve(diff_f, x)\n\nprint(roots)"
  },
  {
    "example_id": 409,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a, b, w = symbols('a b w')\nunit_set = set()\nfor a in range(-100, 100):\n    for b in range(-100, 100):\n        if a**2 + b**2 == 1:\n            unit_set.add(a + I*b)\n\nprint(len(unit_set))"
  },
  {
    "example_id": 410,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2101.0"
    ],
    "annotated_answers": [
      "2101.0"
    ],
    "solution": "x = 5\ny = 4\nexpression = x**4 + x**3*y + x**2*y**2 + x*y**3 + y**4\nprint(expression)"
  },
  {
    "example_id": 411,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1719.20789838548"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "a = 12\nb = 13\nc = 14\nd = 15\nexpression = a**2 + b**2 + c**2 + 519 - (d + 36*10**0.5*(a+b+c-d))\nprint(expression)"
  },
  {
    "example_id": 412,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "48.0",
      "12.0",
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq1 = a**4 + b**4 + c**4 + d**4 - 48\neq2 = a*b*c*d - 12\nsol = solve((eq1, eq2), (a, b, c, d))\nprint(sol)"
  },
  {
    "example_id": 413,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "7.0",
      "2.0",
      "0.0",
      "3.0",
      "3.0",
      "7.0",
      "2.0",
      "1.0",
      "3.0",
      "3.0",
      "7.0",
      "2.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "from sympy import symbols, Poly, expand\na, b, c = symbols('a b c')\nx = symbols('x')\npolynomial = Poly(x**3 - 7*x + 2, x)\nroots = polynomial.all_roots()\nabc = expand(sum(root**3 for root in roots))\nprint(abc)"
  },
  {
    "example_id": 414,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "331.0"
    ],
    "solution": "n = symbols('n')\nf = Lambda(n, (-1)**(n + 1)*n - 2*f(n - 1))\nf.subs(f(1), f(1986))\nf_sum = sum(f(i) for i in range(1, 1986))\nprint(f_sum)"
  },
  {
    "example_id": 415,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "x = symbols('x')\na, b = symbols('a b')\np = x**6 + a*x + b\nq = x**2 - 2*x - 1\n# quotient = p.quo(q)\nquotient = p / q\nremainder = p % q\nprint(remainder)\n# print(quotient)"
  },
  {
    "example_id": 416,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1119.0"
    ],
    "annotated_answers": [
      "1999.0"
    ],
    "solution": "n = 0\nsum = 0\nwhile sum < 10000:\n    n += 1\n    sum += (n%10 + (n//10)%10)\nprint(n)"
  },
  {
    "example_id": 417,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b = symbols('a b')\nf = (2/a) + (1/b)\ncons = a + 2*b - 1\nres = solve(cons, a, b)\nsol = [f.subs(res)]\nprint(sol)"
  },
  {
    "example_id": 418,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "import sympy as sp\nfrom sympy.abc import a, b, c, d, e\n\nexpr = (a**5/(a-b)*(a-c)*(a-d)*(a-e) +\n        b**5/(b-a)*(b-c)*(b-d)*(b-e) +\n        c**5/(c-a)*(c-b)*(c-d)*(c-e) +\n        d**5/(d-a)*(d-b)*(d-c)*(d-e) +\n        e**5/(e-a)*(e-b)*(e-c)*(e-d))\n\nprint(sp.simplify(expr))"
  },
  {
    "example_id": 419,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Abs\nfrom sympy.abc import i\nnumerator = 2-4*i\ndenominator = 2+i\nprint(Abs(numerator/denominator))"
  },
  {
    "example_id": 420,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 1\ny = 1\nexpression = x**2 + y**2\nprint(expression)"
  },
  {
    "example_id": 421,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nf = (a + b)*(a + c)*(b + c)/abc\nf_min = Min(f)\nprint(f_min.evalf())"
  },
  {
    "example_id": 422,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0"
    ],
    "annotated_answers": [
      "101.0"
    ],
    "solution": "x = 100000000\nwhile x**4 > 100000000:\n    x -= 1\nprint(x)"
  },
  {
    "example_id": 423,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "15.0",
      "10.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = symbols('x')\np = symbols('p', real=True)\nf = abs(x-p) + abs(x-15) + abs(x-p-15)\nprint(f.subs(p, 10))"
  },
  {
    "example_id": 424,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46656.0",
      "46656.0",
      "46656.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = log(a, 6) + log(b, 6) + log(c, 6) - 6\na_value = solve(eq, a)[0]\nb_value = solve(eq, b)[0]\nc_value = solve(eq, c)[0]\nabc = [a_value, b_value, c_value]\nprint(sum(abc))"
  },
  {
    "example_id": 425,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "p = sympy.Poly(sympy.symbols('x'), domain='ZZ')\np = p.monic()\np = p.as_expr()\np = p.subs(x, 1)\np = p.subs(x, 2)\np = p.subs(x, 3)\np = p.subs(x, 0)\np = p.subs(x, 4)\nprint(p)"
  },
  {
    "example_id": 426,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "import sympy\nfrom sympy import symbols, sqrt, solve\n\nx1, y1, x2, y2, x3, y3, x4, y4 = symbols('x1 y1 x2 y2 x3 y3 x4 y4')\n\n# Find the semi-major axis\nsemi_major = sympy.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\n# Find the semi-minor axis\nsemi_minor = sympy.sqrt((x3 - x4)**2 + (y3 - y4)**2)\n\n# Find the semi-major axis\nsemi_major_value = solve(semi_major, semi_major)\nsemi_minor_value = solve(semi_minor, semi_minor)\n\nprint(semi_major_value[0])\nprint(semi_minor_value[0])"
  },
  {
    "example_id": 427,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 0\nb = 0\nc = 0\nans = 0\n\nfor a in range(1, 10):\n    for b in range(1, 10):\n        for c in range(1, 10):\n            if (a**3 + a**2*b + a*b**2 + b**3 + b*c + c**2) == 0:\n                ans += 1\nprint(ans)"
  },
  {
    "example_id": 428,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = symbols('x')\neq = (5*x + 9)**611 + (x + 5)**11 + (x - 1)**11 + 3*x**2 + 1\nremainder = sympy.rem(eq, x + 2)\nprint(remainder)"
  },
  {
    "example_id": 429,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "4.0",
      "4.0",
      "1.0",
      "4.0",
      "-4.0",
      "2.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nexpr = x**4 + 4*y**2 + 4*z**4\ncond = x*y*z - 2\nsol = solve(expr, x, y, z, dict=True)\nprint(sol)"
  },
  {
    "example_id": 430,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "7.0",
      "2.0",
      "225.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x, y = symbols('x y')\neq = x**2 + 8*x*y + 7*y**2 - 225\ndistance = sympy.sqrt(sympy.expand_power_base(eq))\nprint(distance)"
  },
  {
    "example_id": 431,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "x1, y1 = symbols('x1 y1')\nx2, y2 = symbols('x2 y2')\nF1 = (x1, y1)\nF2 = (x2, y2)\neq = abs(F1[0] - F2[0]) - abs(F1[1] - F2[1])\neq = eq.subs(x1, 10).subs(x2, -16).subs(y1, 2).subs(y2, 2)\neq = eq.simplify()\nprint(eq)"
  },
  {
    "example_id": 432,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "574.0"
    ],
    "annotated_answers": [
      "962.0"
    ],
    "solution": "from sympy import primefactors\nk = 581\nfor p in primefactors(k):\n    if p**2 > k:\n        break\n    else:\n        k -= p\nprint(k)"
  },
  {
    "example_id": 433,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = symbols('x')\nf = Lambda(x, (2*x + 9)/(x - 7))\nf_of_f = Lambda(x, f(f(x)))\nf_of_f_x = solve(f_of_f(x) - x, x)\nprint(prod(f_of_f_x))"
  },
  {
    "example_id": 434,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z = symbols('z')\nprint(abs(z.conjugate()**2))"
  },
  {
    "example_id": 435,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    if x!= -3/2:\n        return x * (2 * x + 3) / (2 * x + 3)\n\nfor x in range(-5, 5):\n    if x!= -3/2:\n        if f(f(x)) == x:\n            c = x\n\nprint(c)"
  },
  {
    "example_id": 436,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "822.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "f = lambda x: x**4 + 2*x**2 + 3*x + 4\n\nroot1 = 2\nroot2 = -3\nroot3 = 5\n\na = f(root1)\nb = f(root2)\nc = f(root3)\n\nprint(a+b+c)"
  },
  {
    "example_id": 437,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "7.0",
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "A, B, x = symbols('A B x')\nf = (7*x - 2)/(x**2 - 4)\np = f.as_numer_denom()\nA_value = solve(p[0] - A, A)[0]\nB_value = solve(p[1] - B, B)[0]\nprint(A_value + B_value)"
  },
  {
    "example_id": 438,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "F = Lambda(n, Fibonacci(n))\nf = Lambda(n, 1/(F(n)*F(n+2)))\nsum = sum(f(n), (n, 1, oo))\nprint(sum)"
  },
  {
    "example_id": 439,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7021.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "def f(x):\n    return sum(abs(xi - 1) for xi in range(1, 120))\n\ndef g(x):\n    return sum(abs(xi - 1) for xi in range(1, 120))\n\nprint(min(f(x) for x in range(1, 100)))"
  },
  {
    "example_id": 440,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "x = symbols('x')\nprint(solve(sympy.sqrt(3620 + 322*x - 4*x**2), x)[0])"
  },
  {
    "example_id": 441,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "2.0",
      "12.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = 2*a**2 + 3*b**2 + 6*c**2\nconstraint = a + b + c - 1\nmin_value = solve(eq, a, b, c, constraint)\nprint(min_value[0])"
  },
  {
    "example_id": 442,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.16666666666666666"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "p = 5\nq = 1\nr = 1\n\nx1 = (r - q) / (p - p**2)\nx2 = (r - p) / (q - p**2)\n\nsum = x1 + x2\nprint(sum)"
  },
  {
    "example_id": 443,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "x = symbols('x')\nf = x**3 - 49*x**2 + 623*x - 2015\ng = f.subs(x, x + 5)\nroots = solve(g, x)\nprint(sum(roots))"
  },
  {
    "example_id": 444,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27648.0"
    ],
    "annotated_answers": [
      "27648.0"
    ],
    "solution": "a, b, c, d = 1, 2, 3, 4\nexpression = a*b**2*c**3*d**4\nprint(expression)"
  },
  {
    "example_id": 445,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "7.0",
      "1.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\npolynomial = x**4 - 2*x**3 + 3*x**2 - 7*x + 1\nprint(polynomial.factor())"
  },
  {
    "example_id": 446,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2400.0"
    ],
    "annotated_answers": [
      "516.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 201):\n    sum += 745 - 739 + 742 - 736\nprint(sum)"
  },
  {
    "example_id": 447,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "0.63"
    ],
    "solution": "log3_6 = 1.63\nlog9_4 = sympy.log(4, 9)\nlog9_4_value = round(log9_4 - log3_6, 2)\nprint(log9_4_value)"
  },
  {
    "example_id": 448,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "4.0",
      "2.0",
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "from sympy import symbols, solve\na, b, c = symbols('a b c')\nf = 2*a**3 + 3*a**2*b + 4*a*b**2 + 5*b**3\neq = f - a - b - c\nsol = solve(eq, a, b, c)\nprint(sol)"
  },
  {
    "example_id": 449,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "10.0",
      "2.0",
      "10.0",
      "11.0",
      "2.0",
      "10.0",
      "9.0",
      "2.0",
      "11.0"
    ],
    "annotated_answers": [
      "117649.0"
    ],
    "solution": "from sympy import symbols, factorial, prod\n\ndef get_roots(n):\n    roots = []\n    for k in range(1, n):\n        for m in range(k, n):\n            roots.append(symbols('r_%d' % (k+m)))\n    return roots\n\ndef get_prod(roots):\n    return prod([root1 + root2 for root1, root2 in zip(roots, roots[1:])])\n\ndef get_k(roots):\n    return get_prod(roots)**2\n\nn = 7\nroots = get_roots(n)\nk = get_k(roots)\nprint(k)"
  },
  {
    "example_id": 450,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.82842712474619",
      "26.0",
      "3.0",
      "43.0",
      "1.5",
      "2.82842712474619",
      "3.0",
      "43.0",
      "26.0",
      "1.5"
    ],
    "annotated_answers": [
      "828.0"
    ],
    "solution": "x = 52 + 6*sqrt(43)\ny = 52 - 6*sqrt(43)\n\neq = x**(3/2) - y**(3/2)\neq = simplify(eq)\nprint(eq)"
  },
  {
    "example_id": 451,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "190.0"
    ],
    "annotated_answers": [
      "198.0"
    ],
    "solution": "a19 = 99\na20 = sum(range(1, 20))\nprint(a20)"
  },
  {
    "example_id": 452,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x + y - z - 0\neq2 = x*z - x*y + y*z - 27\neq3 = x*y*z - 54\nsol = solve([eq1, eq2, eq3], [x, y, z])\nprint(len(sol))"
  },
  {
    "example_id": 453,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0",
      "82.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1325.0",
      "2.0",
      "3.0",
      "49983.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nx = symbols('x')\neq = x**3 + 7*x**2 - 11*x - 2\nsolve_set = solve([eq.subs(x, a), eq.subs(x, b), eq.subs(x, c)], [a, b, c])\nprint(solve_set[0][0] + solve_set[0][1] + solve_set[0][2])"
  },
  {
    "example_id": 454,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3493.0"
    ],
    "annotated_answers": [
      "229.0"
    ],
    "solution": "x = symbols('x')\np = x**4 + 9*x**3 + 2*x**2 + 32*x - 11\np_value = p.subs(x, 6)\nprint(p_value)"
  },
  {
    "example_id": 455,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "697.0"
    ],
    "solution": "from sympy import symbols, I, solve\nz, n = symbols('z n')\neq = (z/ (z + n)) - 4*I\nsolve(eq, n)"
  },
  {
    "example_id": 456,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "a, b = symbols('a b')\neq = sqrt(a) - sqrt(b)\neq = eq.expand()\neq = eq.subs(sqrt(a), a/2)\neq = eq.subs(sqrt(b), b/2)\neq = eq.subs(a, 20)\neq = eq.subs(b, 0)\nprint(eq)"
  },
  {
    "example_id": 457,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.158114871269602",
      "3.0",
      "1111.0",
      "100.0",
      "0.158116847915517",
      "9998.0",
      "3.0",
      "1111.0",
      "0.158118824783851",
      "9997.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import summation\nn = symbols('n')\nexpr = 1/(sqrt(n) + sqrt(n + 1))/(sqrt(n**(1/4)) + sqrt(n + 1)**(1/4))\nprint(summation(expr, (n, 1, 9999)))"
  },
  {
    "example_id": 458,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "0.0"
    ],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "# roots are real\nroot1 = (-1+5**0.5)/2\nroot2 = (-1-5**0.5)/2\nsum = root1 + root2\nprint(sum)\n\n# roots are non-real\nroot1 = 1 - 5j\nroot2 = 1 + 5j\nsum = root1 + root2\nprint(sum)"
  },
  {
    "example_id": 459,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "143.0",
      "2.0",
      "2.0",
      "169.0",
      "2.0",
      "2.0",
      "169.0",
      "2.0",
      "2.0",
      "150.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "214.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq1 = (a + b)*(c + d) - 143\neq2 = (a + c)*(b + d) - 150\neq3 = (a + d)*(b + c) - 169\na_value = solve(eq1, a)\nb_value = solve(eq2, b)\nc_value = solve(eq3, c)\nd_value = solve(eq3, d)\nprint(a_value[0]**2 + b_value[0]**2 + c_value[0]**2 + d_value[0]**2)"
  },
  {
    "example_id": 460,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1004.0"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 2007+1):\n    if i % 2 == 0:\n        sum += i\n    else:\n        sum -= i\nprint(sum)"
  },
  {
    "example_id": 461,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "671.0",
      "8.0",
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "m, n = symbols('m n')\nlog_m_x, log_n_x = symbols('log_m_x log_n_x')\neq = 8*(log_n_x*log_m_x) - 7*log_n_x - 6*log_m_x - 2013\nsol = solve(eq, log_n_x)\nsol_product = 1\nfor s in sol:\n    sol_product *= s\nprint(sol_product)\nprint(m + n)"
  },
  {
    "example_id": 462,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print((((3/4) - (1/2)**(1/2))**(1/2)) - (((3/4) + (1/2)**(1/2))**(1/2)))"
  },
  {
    "example_id": 463,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "S = [0,10]\nwhile True:\n    for x in S:\n        if x**2 + 2*x*10 + 10**2 == 0:\n            S.append(x)\n    if len(S) == len(set(S)):\n        break\nprint(len(S))"
  },
  {
    "example_id": 464,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "d = symbols('d')\neq = d + 2*d*10**2 + 2*d*10**3 + 2*d*10**4 + 2*d*10**5 + 2*d*10**6 + 2*d*10**7 + 2*d*10**8 + 2*d*10**9 + 2*d*10**10\nsol = solve(eq, d)\nprint(sol[0])"
  },
  {
    "example_id": 465,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0",
      "251.0",
      "25759.0",
      "24.0",
      "1509171.0",
      "1.0",
      "3.0",
      "1153.0",
      "25759.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from sympy import solve\nfrom sympy import Symbol\nx = Symbol('x')\nexpr1 = (x**2 - 10*x - 29)**(-1)\nexpr2 = (x**2 - 10*x - 45)**(-1)\nexpr3 = (x**2 - 10*x - 69)**(-2)\neq = expr1 + expr2 - 2*expr3\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 466,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4022030.0"
    ],
    "solution": "def f(x):\n    if x < floor(x) + 1/floor(x):\n        return floor(x) * abs(x - floor(x) - 1/2/floor(x))\n    else:\n        return f(x - 1/floor(x))\n\ndef g(x):\n    return 2**(x - 2007)\n\ndef count_intersections(f, g):\n    count = 0\n    for x in range(1, 1000):\n        if f(x) == g(x):\n            count += 1\n    return count\n\nprint(count_intersections(f, g))"
  },
  {
    "example_id": 467,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "269.0"
    ],
    "annotated_answers": [
      "269.0"
    ],
    "solution": "z = 10-13*I\nprint(abs(z)*abs(z))"
  },
  {
    "example_id": 468,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-12.0",
      "-12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "sasha = 15 + 8*1j\nchloe = 3 - 4*1j\nprint(chloe - sasha)"
  },
  {
    "example_id": 469,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "67.8617393793236"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "x = symbols('x')\np = x**2 + 7*x + 22\np_root = p.subs(x, sqrt(11))\np_root_val = p_root.evalf()\np_val = p.subs(x, sqrt(17))\np_val_val = p_val.evalf()\nprint(p_val_val)"
  },
  {
    "example_id": 470,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "611.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "print(2011**2011 % 1000)"
  },
  {
    "example_id": 471,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6981.0",
      "2.0",
      "1323.0",
      "2.0",
      "1.0",
      "3.0",
      "3.0",
      "3.0",
      "25.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "x = symbols('x')\neq = x**3 + 9*x**2 + 2*x + 1\nroots = solve(eq, x)\nr, s, t = roots\nprint(1/r**2 + 1/s**2 + 1/t**2)"
  },
  {
    "example_id": 472,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "1.0",
      "6.0",
      "4.0",
      "1.0",
      "5.0",
      "4.0",
      "1.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import symbols, solve, poly\nz1, z2, z3, z4 = symbols('z1 z2 z3 z4')\nQ = poly(z1, z2, z3, z4)\nP = poly(z1**6 - z1**5 - z1**3 - z1**2 - 1, z2**6 - z2**5 - z2**3 - z2**2 - 1, z3**6 - z3**5 - z3**3 - z3**2 - 1, z4**6 - z4**5 - z4**3 - z4**2 - 1)\nprint(P(z1) + P(z2) + P(z3) + P(z4))"
  },
  {
    "example_id": 473,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "2.0",
      "64.0",
      "6.0",
      "2.0",
      "-3.0",
      "2.0",
      "128.0",
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "x = symbols('x')\na, b, c = symbols('a b c')\neq = 4*x**4 - a*x**3 + b*x**2 - c*x + 5\nr1, r2, r3, r4 = solve(eq, x)\nroot_sum = (r1/2) + (r2/4) + (r3/5) + (r4/8)\nprint(root_sum)"
  },
  {
    "example_id": 474,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "16.0",
      "0.5",
      "5.0",
      "8.0",
      "0.5"
    ],
    "annotated_answers": [
      "-64.0"
    ],
    "solution": "x = symbols('x')\nexpr = (5*abs(x) + 8)**(1/2) - (x**2 - 16)**(1/2)\nexpr_expand = expr.expand()\nexpr_expand_simplify = expr_expand.simplify()\nexpr_expand_simplify_collect = expr_expand_simplify.collect(x)\nexpr_expand_simplify_collect_expand = expr_expand_simplify_collect.expand()\nexpr_expand_simplify_collect_expand_simplify = expr_expand_simplify_collect_expand.simplify()\nexpr_expand_simplify_collect_expand_simplify_trig = expr_expand_simplify_collect_expand_simplify.trigsimp()\nexpr_expand_simplify_collect_expand_simplify_trig_expand = expr_expand_simplify_collect_expand_simplify_trig.expand()\nexpr_expand_simplify_collect_expand_simplify_trig_expand_simplify = expr_expand_simplify_collect_expand_simplify_trig_expand.simplify()\nexpr_expand_simplify_collect_expand_simplify_trig_expand_simplify_factor = expr_expand_simplify_collect_expand_simplify_trig_expand_simplify.factor()\nprint(expr_expand_simplify_collect_expand_simplify_trig_expand_simplify_factor)"
  },
  {
    "example_id": 475,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-10879.0"
    ],
    "solution": "b_values = []\nfor b in range(0, 10000):\n    if (1988 * b) % 8891 == 0 and (8891 * b) % 1988 == 0:\n        b_values.append(b)\nprint(b_values)"
  },
  {
    "example_id": 476,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\nexpr = a*log(2) + b*log(3) + c*log(5) + d*log(7)\neq = expr - 2005\nsol = solve(eq, [a, b, c, d])\nprint(len(sol))"
  },
  {
    "example_id": 477,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = symbols('n')\nx = symbols('x')\n# Equation\neq = (1/tau + 1/(tau**2) + 1/(tau**3) + 1/(tau**4) + 1/(tau**5)) - tau**n\n# Solving for n\nn_value = solve(eq, n)\nprint(n_value[0])"
  },
  {
    "example_id": 478,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\nf = 1/(x**3 - 3*x**2 + 3*x - 1)\nf.as_numer_denom()"
  },
  {
    "example_id": 479,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "64.0",
      "8.0",
      "32.0",
      "2.0",
      "-1.0",
      "4.0",
      "2.0",
      "-1.0",
      "128.0",
      "2.0",
      "1.0",
      "3.0",
      "4.0",
      "2.0",
      "-1.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "a, b = symbols('a b')\neq1 = log(a, 8) + log(b**2, 4) - 5\neq2 = log(b, 8) + log(a**2, 4) - 7\neqs = [eq1, eq2]\nsol = solve(eqs, [a, b])\nprint(sol)"
  },
  {
    "example_id": 480,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\nf = (b + c + d)/a + (a + c + d)/b + (a + b + d)/c + (a + b + c)/d\nf_min = f.subs([(a, 1), (b, 1), (c, 1), (d, 1)])\nprint(f_min)"
  },
  {
    "example_id": 481,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "F = [0, 1]\nfor i in range(2, 2025):\n    F.append(F[i-1] + F[i-2] - F[i-1] % 3)\n\nprint(sum(F[2017:2025]))"
  },
  {
    "example_id": 482,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "x, y = symbols('x y')\nlog_x = log(x, y)\nlog_y = log(y, x)\neq = log_x + log_y - 7\nsolve(eq, log_x**2 + log_y**2)"
  },
  {
    "example_id": 483,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "-2.0",
      "7.0",
      "282.0",
      "36.0",
      "7.0",
      "2.0",
      "1.0",
      "3.0",
      "7.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq = 2*a**4 - 8*a**3 + 7\nsolve_eq = solve([eq], [a, b, c, d])\nprint(solve_eq[0][0] + solve_eq[0][1] + solve_eq[0][2] + solve_eq[0][3])"
  },
  {
    "example_id": 484,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "501.0"
    ],
    "annotated_answers": [
      "49896.0"
    ],
    "solution": "N = 2007 // 4\nprint(N)"
  },
  {
    "example_id": 485,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "85.0",
      "5.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "-85.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "z = symbols('z')\neq = z + 1/z - (1 + sqrt(5))/2\nz_power = eq**85\nz_power_1 = 1/z_power\nprint(z_power + z_power_1)"
  },
  {
    "example_id": 486,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "n, omega = symbols('n omega')\nf = omega**3 - 1\nf_factors = f.factor()\nomega_value = solve(f_factors, omega)[0]\nprint(omega_value)"
  },
  {
    "example_id": 487,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "496.0"
    ],
    "solution": "n = 0\nfor x in range(1, 1000):\n    if x * floor(x) == n:\n        n += 1\nprint(n)"
  },
  {
    "example_id": 488,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "h = 6\nk = -5\na = 4\nb = 2\n\nprint(h + k + a + b)"
  },
  {
    "example_id": 489,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "4.0",
      "10.0",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "a1, a2 = symbols('a_1 a_2')\neq1 = a1*a2 - 50\neq2 = (1/a1**2 + 1/a2**2 + 1/(a1*a2)**2 + 1/(a1*a2)**2 + 1/(a1*a2)**2 + 1/(a1*a2)**2) - 10\nk = solve(eq1, a1)\nsol = solve(eq2, a2)\nprint(sol[0])"
  },
  {
    "example_id": 490,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, x = symbols('a b c x')\nexpr = (x + a)**2 / (a - b)*(a - c) + (x + b)**2 / (b - a)*(b - c) + (x + c)**2 / (c - a)*(c - b)\nprint(expr.simplify())"
  },
  {
    "example_id": 491,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x*y*z*(x + y + z) - (x + y)*(y + z)\neq_min = eq.subs([(x, 1), (y, 1), (z, 1)])\nprint(eq_min)"
  },
  {
    "example_id": 492,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1001.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "k = 2002 // 2\nprint(k)"
  },
  {
    "example_id": 493,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "2.0",
      "7.0",
      "2.0",
      "81.0",
      "4.0",
      "196.0",
      "3.0",
      "378.0",
      "2.0",
      "2.0",
      "324.0",
      "3.0",
      "49.0",
      "4.0",
      "2.0",
      "7.0",
      "9.0"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = (a/b + b/c + c/a)/7\neq2 = (b/a + c/b + a/c)/9\neq3 = a**3/b**3 + b**3/c**3 + c**3/a**3\neq4 = eq1 - eq2\nsol = solve(eq4, a)\nprint(sol[0])"
  },
  {
    "example_id": 494,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "4014013.0"
    ],
    "solution": "a, b, c = symbols('a b c')\np = a*b*c\nside_1 = a\nside_2 = b\nside_3 = c\ndiagonal_squared = (side_1**2 + side_2**2 + side_3**2)/2\ndiagonal = sqrt(diagonal_squared)\nprint(diagonal)"
  },
  {
    "example_id": 495,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "156.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = symbols('x')\nf = x**3 + x**2 + x + 1\nf_value = f.subs(x, 5)\nprint(f_value)"
  },
  {
    "example_id": 496,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = symbols('x')\nf = x*(x + 1)*(x + 2)*(x + 3)\nprint(f.diff(x))"
  },
  {
    "example_id": 497,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# Function\ndef f(x):\n    if 0 <= x < 2:\n        return 2*x\n    elif 2 <= x <= 4:\n        return 8 - 2*x\n    else:\n        return None\n\n# Maximum value\nmax_x = 4\nmax_y = f(max_x)\nprint(f\"Maximum value: {max_y}\")"
  },
  {
    "example_id": 498,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def f(m):\n    return m**2 + m + 1\n\nn = 0\nwhile True:\n    product = 1\n    for i in range(1, n+1):\n        product *= f(i**2)\n    square = f(1)**2 * f(2)**2 * f(n)**2\n    if product >= square:\n        break\n    n += 1\nprint(n)"
  },
  {
    "example_id": 499,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "254340011737680.0"
    ],
    "annotated_answers": [
      "3996.0"
    ],
    "solution": "from sympy import symbols, factorial\nfrom sympy.abc import k\n\nn = 1998\nm = 1997\n\nnum = (n**2 - m**2) * (n**2 - (m-1)**2) * (n**2 - (m-2)**2) * (n**2 - (m-3)**2)\nden = (n-m) * (n-m+1) * (n-m+2) * (n-m+3)\n\nresult = num / den\nprint(result)"
  },
  {
    "example_id": 500,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "for a in range(1, 101):\n    for b in range(1, 101):\n        for c in range(1, 101):\n            if a**2 + b**2 + c**2 == a*b + a*c + b*c:\n                print((a, b, c))"
  },
  {
    "example_id": 501,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "sum = 0\nfor x in range(1, 100):\n    y = abs(x)\n    if x == y**2 - 6*y + 5:\n        sum += x\nprint(sum)"
  },
  {
    "example_id": 502,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\neq = x**3 - 3*x**2 - 9*x + 30\nremainder = sympy.rem(eq, x - 3)\nprint(remainder)"
  }
]