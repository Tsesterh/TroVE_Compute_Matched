[
  {
    "example_id": 0,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "62.0"
    ],
    "annotated_answers": [
      "51.0"
    ],
    "solution": "# Create a set of numbers\nx = 5\n\n# Create a set of labels\nlabels = [1, 2, 4, 8, 16, 32]\n\n# Initialize sum\nsum = 0\n\n# Iterate through the labels\nfor label in labels:\n    # Check if the label is true\n    if eval(f\"x < x**{label}\"):\n        # Add the label to the sum\n        sum += label\n\n# Print the sum\nprint(sum)"
  },
  {
    "example_id": 1,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "5.0",
      "7.0",
      "9.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "k = [1, 3, 5, 7, 9]\nprint(k)"
  },
  {
    "example_id": 2,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1556.0",
      "4.0",
      "1.0",
      "5.0",
      "2.0",
      "1.0",
      "5.0",
      "2.0",
      "40.0",
      "1.0"
    ],
    "annotated_answers": [
      "82.0"
    ],
    "solution": "omega = 1-5*I\nprint(abs(2*omega**2 - 4*omega - 30))"
  },
  {
    "example_id": 3,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "21.0",
      "21.0",
      "21.0",
      "62.0",
      "41.0"
    ],
    "annotated_answers": [
      "195.0"
    ],
    "solution": "# Define the function\ndef arithmetic_sequence(k, n):\n    return (k * n * (n + 1)) / 2\n\n# Find the first, last, and middle terms\nfirst = 1\nlast = 3\nmiddle = 2\n\n# Add the first, last, and middle terms\nsum_first_last_middle = arithmetic_sequence(first, last) + arithmetic_sequence(middle, last) + arithmetic_sequence(first, middle)\nprint(sum_first_last_middle)\n\n# Find the sum of the first, last, and middle terms\nsum_first_last_middle = arithmetic_sequence(first, last) + arithmetic_sequence(middle, last) + arithmetic_sequence(first, middle)\nprint(sum_first_last_middle)\n\n# Find the sum of the terms of the original sequence\nsum_original = arithmetic_sequence(first, last) + arithmetic_sequence(middle, last) + arithmetic_sequence(first, middle)\nprint(sum_original)\n\n# Find the sum of the terms of the new sequence\nsum_new = arithmetic_sequence(first + 1, last + 1) + arithmetic_sequence(middle + 1, last + 1) + arithmetic_sequence(first + 1, middle + 1)\nprint(sum_new)\n\n# Find the difference between the sums of the terms of the original and new sequences\ndifference = sum_new - sum_original\nprint(difference)"
  },
  {
    "example_id": 4,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "5.0",
      "3.0",
      "6.0",
      "20.0",
      "15.0",
      "20.0",
      "2.0",
      "17.0",
      "30.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "from sympy import symbols, log, Min\n\nx = symbols('x')\nexpr = 17*log(30, x) - 3*log(x, 5) + 20*log(x, 15) - 3*log(x, 6) + 20*log(x, 2)\nprint(Min(expr, x))"
  },
  {
    "example_id": 5,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "60.0",
      "4.0",
      "60.0",
      "4.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = symbols('x')\nf = x + I\nf = f + f.subs(x, x + 1)\nf = f + f.subs(x, x - 1)\nf = f.subs(x, 15)\nf = f.subs(x, 20)\nprint(f)\n\nf = f.subs(x, 20152015)\nprint(f)"
  },
  {
    "example_id": 6,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "21.0",
      "24.0",
      "21.0",
      "18.0",
      "18.0",
      "18.0",
      "18.0",
      "24.0",
      "21.0"
    ],
    "annotated_answers": [
      "46.0"
    ],
    "solution": "x, y, z, v, w = symbols('x y z v w')\nM = Matrix([[25, v, x, y, z],\n            [21, 24, 21, 18, 18],\n            [18, 18, 24, 21, 18],\n            [18, 18, 18, 24, 21],\n            [z, 21, 18, 18, 24]])\nprint(M)\nprint(M.det())"
  },
  {
    "example_id": 7,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "from sympy import sqrt\n\neq = sqrt(2**2) + sqrt(2)\neq = eq * (2 - 2*sqrt(2) - sqrt(2**2))\nprint(eq)"
  },
  {
    "example_id": 8,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "260098.0",
      "264194.0",
      "7.0",
      "760382.0",
      "63502.0",
      "14.0",
      "67598.0",
      "77839.0",
      "258062.0"
    ],
    "annotated_answers": [
      "177.0"
    ],
    "solution": "f = lambda x: x**2 + 2*x - 1\nf_values = []\nfor i in range(1000):\n    f_values.append(f(i))\nprint(set(f_values))"
  },
  {
    "example_id": 9,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-34.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "m = 33\nn = 67\nprint(m-n)"
  },
  {
    "example_id": 10,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Define r and s\nr, s = symbols('r s')\n\n# Define the equation\neq = 1/(r + s) - 1/r - 1/s\n\n# Compute the number\nnum = (1/(r/s)**3)\n\n# Print the result\nprint(num)"
  },
  {
    "example_id": 11,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.77508423238816",
      "2.44554646728387",
      "-5.76193659835426",
      "10.7461186106201",
      "-0.499222163422647",
      "0.755891294870078",
      "3.30039813681579",
      "1.05381091831239"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "z, w = symbols('z w')\neq1 = z + 20/w - (5+1j)\neq2 = w + 12/z - (-4+10j)\nsolve_system = solve([eq1, eq2], [z, w])\nprint(solve_system)"
  },
  {
    "example_id": 12,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0",
      "1.0",
      "0.0",
      "2.0",
      "0.0",
      "3.0",
      "0.0",
      "4.0"
    ],
    "annotated_answers": [
      "81.0"
    ],
    "solution": "a = 0\nb = 0\nwhile a <= 5:\n    while b <= 5:\n        if abs(a + b*1j) <= 5:\n            print(a, b)\n        b += 1\n    a += 1\n    b = 0"
  },
  {
    "example_id": 13,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a + b + c - 4*abc\neq2 = (4*sqrt(a) + 6*sqrt(b) + 12*sqrt(c))/sqrt(abc)\nresult = solve((eq1, eq2), (a, b, c))\nprint(result)"
  },
  {
    "example_id": 14,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x')\neq = x**8 + 3*x**4 - 4\nprint(eq.factor())"
  },
  {
    "example_id": 15,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "0.0",
      "5.0",
      "0.0",
      "5.0",
      "0.0",
      "2.0",
      "0.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "real_part_u = 0\nreal_part_v = 0\nimag_part_u = 0\nimag_part_v = 0\n\nfor real_part_u in range(0, 10):\n    for imag_part_u in range(0, 10):\n        for real_part_v in range(0, 10):\n            for imag_part_v in range(0, 10):\n                u = complex(real_part_u, imag_part_u)\n                v = complex(real_part_v, imag_part_v)\n                if u * v == 10 and u.real % 1 == 0 and u.imag % 1 == 0 and v.real % 1 == 0 and v.imag % 1 == 0:\n                    print(u, v)"
  },
  {
    "example_id": 16,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nf = 4*a + 3*b + c**3 / (a - b)*b\ng = a + b + c - 4\nh = Min(f, g)\nprint(h)"
  },
  {
    "example_id": 17,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a, b = symbols('a b')\neq1 = a + b - 5\neq2 = a**2 + b**2 - 15\neq3 = a**3 + b**3\neq4 = eq1 - eq2\nsol = solve(eq4, a)\na = sol[0]\nb = 5 - a\nprint(eq3.subs(a, a).subs(b, b))"
  },
  {
    "example_id": 18,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = symbols('x')\nlog_x_2 = log(x**2)\ndomain = solve(log_x_2, x)\nprint(domain)"
  },
  {
    "example_id": 19,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1007.5"
    ],
    "annotated_answers": [
      "62.0"
    ],
    "solution": "S = set(range(2016))\nprint(sum(S)/len(S))"
  },
  {
    "example_id": 20,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "k, x = symbols('k x')\neq = k*x**4 + 9*x**3 + k*x**2 + 32*x - 11\nremainder = sympy.rem(eq, x + 5)\nk_value = solve(remainder - 4, k)\nprint(k_value[0])"
  },
  {
    "example_id": 21,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "22161106683859.0"
    ],
    "annotated_answers": [
      "2039191.0"
    ],
    "solution": "S = 0\nfor i in range(-2019, 2019):\n    S += i**2\n    for j in range(-2019, 2019):\n        S -= 2*i*j\n        S += j**2\nprint(S)"
  },
  {
    "example_id": 22,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z1, z2 = symbols('z_1 z_2')\neq = (z1/z2 + z2/z1) - 1\nremainder = eq.expand()\nprint(remainder)"
  },
  {
    "example_id": 23,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.66146542124485",
      "-12.0",
      "-150117119397.0",
      "1.0",
      "3.0",
      "150117119397.0",
      "1.0",
      "3.0",
      "125000000000.0",
      "125000000000.0",
      "125000000000.0",
      "1.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq = (sqrt(3)*a)**(1/3) - (1/(b + (1/(c + (1/(d + I))))))\nb_value = solve(eq, b)[0]\nprint(b_value)"
  },
  {
    "example_id": 24,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "625.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Create a sequence of numbers\nn = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]\n\n# Create a sum of the sequence\nsum_n = sum(n)\n\n# Print the sum\nprint(sum_n)"
  },
  {
    "example_id": 25,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "2.0",
      "5.0",
      "3.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = symbols('z')\nmin_value = abs(z + 5 - 3*I) + abs(z - 7 + 2*I)\nprint(min_value)"
  },
  {
    "example_id": 26,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "3.0",
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# x, y, z are positive real numbers\nx, y, z = symbols('x y z', positive = True)\n\n# Find the minimum value of the expression\nexpr = x**3 + 2*y**3 + 4*z**3\n\n# Calculate the denominator\nden = x*y*z\n\n# Calculate the minimum value of the expression\nmin_value = Min(expr/den)\n\n# Print the result\nprint(min_value)"
  },
  {
    "example_id": 27,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "17.0",
      "51.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y, z, w = symbols('x y z w')\neq1 = 2*y - x - 17/x\neq2 = 2*z - y - 17/y\neq3 = 2*w - z - 17/z\neq4 = 2*x - w - 17/w\n\nsol = solve([eq1, eq2, eq3, eq4], [x, y, z, w])\n\nprint(sol)"
  },
  {
    "example_id": 28,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5981133764386.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "n = 100\na = 1\nb = 2\nc = 4\nd = 5\n\nfor i in range(1, n):\n    a = b\n    b = c\n    c = d\n    d = a + b\n\nprint(d)"
  },
  {
    "example_id": 29,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "29800.0"
    ],
    "solution": "for a in range(1, 101):\n    for b in range(1, 101):\n        for c in range(1, 101):\n            if a**2 * b + b**2 * c + c**2 * a == a**2 * b**2 + b**2 * c**2 + c**2 * a**2:\n                print(a, b, c)"
  },
  {
    "example_id": 30,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "2.0",
      "25.0",
      "2.0",
      "36.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nconstraint = x + y + z - 9\nexpr = sqrt(16 - x**2) + sqrt(25 - y**2) + sqrt(36 - z**2)\n\n# Calculate the maximum value of the expression\n# using the method of Lagrange multipliers\n\n# Define the Lagrange function\nL = expr + 3*log(y) + 2*log(z) - 2*log(x)\n\n# Define the constraint as a matrix\nconstraint_matrix = Matrix([[1, 1, 1]])\n\n# Define the Lagrange multiplier\nlam = Symbol('lam')\n\n# Solve the system of equations\nsol = solve((L, constraint_matrix), (x, y, z, lam))\n\n# Extract the maximum value\nmax_val = expr.subs(sol)\nprint(max_val)"
  },
  {
    "example_id": 31,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-71.0"
    ],
    "solution": "x = symbols('x')\nroot = sqrt(2) + sqrt(3) + sqrt(5)\nP = Poly(x**8 - root, x)\nprint(P(1))"
  },
  {
    "example_id": 32,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "341.0"
    ],
    "solution": "x = symbols('x')\nP = x**512 + x**256 + 1\nfactor = x**2 + x + 1\neq = factor * P - factor * (x**2 + x + 1)\nsolve(eq, P)"
  },
  {
    "example_id": 33,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "39.0",
      "1.0",
      "4.0",
      "626.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "250.0"
    ],
    "solution": "from sympy import sqrt, simplify\nfrom sympy.abc import x\n\neq = (5**4 + 1)**(S.One/4) - (5**4 - 1)**(S.One/4)\nprint(simplify(eq))"
  },
  {
    "example_id": 34,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2500.0"
    ],
    "solution": "x = symbols('x')\nterm = 1\nfor i in range(2, 99):\n    term = term * (x + i)\nprint(term.coeff(x**49))"
  },
  {
    "example_id": 35,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = symbols('z')\neq = z**5 - 1\nsol = solve(eq, z)\nz_value = sol[0]\nprint(z_value)"
  },
  {
    "example_id": 36,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "10.0",
      "2.0",
      "5.0",
      "1.0",
      "1.0",
      "5.0",
      "1.0",
      "5.0",
      "1.0",
      "5.0",
      "1.0",
      "5.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n\n\ndef f(x):\n    return (1/x) + (1/(x + 5))\n\n\ndef g(x):\n    return (1/x) + (1/(a + x)) + (1/(b + x)) + (1/(c + x))\n\n\ndef h(x):\n    return (f(x) + f(x + 5)) / (g(x) + g(x + 5))\n\n\nresult = Min(h(x))\n\nprint(result)"
  },
  {
    "example_id": 37,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = symbols('a')\nx1, x2 = symbols('x1, x2')\n\neq1 = x1**2 + a*x1 + 1\neq2 = x2**2 - x2 - a\n\nsol = solve([eq1, eq2], [x1, x2])\nprint(sol)"
  },
  {
    "example_id": 38,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0",
      "2.0",
      "1.0",
      "5.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a, b = symbols('a b')\neq = a*b - a + b\nsum = (a/b) + (b/a) - eq\nprint(solve(sum))"
  },
  {
    "example_id": 39,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "c = symbols('c')\nreal_c = sqrt(7**2 - 3**2)\nimag_c = 3*7\n\nif real_c == imag_c:\n    c_value = solve(c - I*real_c, c)\n    print(c_value[0])\nelse:\n    print('No real value of c')"
  },
  {
    "example_id": 40,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nf = (x + 3)**5 * (x + 2)**8 * (x + 1)**4 * (x - 7)**2 / ( (x + 3)**11 * (x + 2)**6 * (x + 1)**4 * x**2)\nprint(f.as_expr())"
  },
  {
    "example_id": 41,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4341120.0"
    ],
    "annotated_answers": [
      "5120.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = (1 + 5*z)*(4*z + 3*x)*(5*x + 6*y)*(y + 18)\neq = eq.expand()\neq = eq.subs(x, 10)\neq = eq.subs(y, 20)\neq = eq.subs(z, 3)\neq = eq.subs(x, 10)\neq = eq.subs(y, 20)\neq = eq.subs(z, 3)\nprint(eq)"
  },
  {
    "example_id": 42,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 1:\n        return f(n // 2) + 1\n    else:\n        return f(n // 2)\n\nprint(f(15))"
  },
  {
    "example_id": 43,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "6.0",
      "23.0",
      "6.0",
      "1.0",
      "6.0",
      "23.0",
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = Symbol('x')\neq = 3*x + 2/x - 1\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 44,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = (3-7) + 5\nprint(x)"
  },
  {
    "example_id": 45,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-18.803847577293368"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "from math import sqrt\n\ndef solve_cubic_equation(cube_root, square_root):\n    x = cube_root**3 - square_root**2 - 12\n    return x\n\nx = solve_cubic_equation(cube_root=sqrt(3), square_root=sqrt(12))\nprint(x)"
  },
  {
    "example_id": 46,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y = symbols('x y')\neq = 4*x**2 + 16*y**2 - 16*x + 96*y + 144\na, b, h, k = symbols('a b h k')\neq_new = (x - h)**2/a**2 + (y - k)**2/b**2 - 1\neq_new = eq_new.expand()\nsol = solve(eq_new, [h, k, a, b])\nprint(sol)"
  },
  {
    "example_id": 47,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "9.0",
      "2.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import symbols, solve, Min, sin, cos, pi\nx = symbols('x')\nf = (9*x**2*sin(x)**2 + 4)/(x*sin(x))\nmin_f = Min(f, x, 0, pi)\nprint(min_f)"
  },
  {
    "example_id": 48,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "z = 2j\nw = 5j\nprint(abs(w-z))"
  },
  {
    "example_id": 49,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# define function f\ndef f(i, j):\n    if i == 0 and 0 <= j <= 4:\n        return mod_5(j+1)\n    elif i >= 1 and j == 0:\n        return f(i-1, 1)\n    else:\n        return f(i-1, f(i, j-1))\n\n# compute f(2015, 2)\nprint(f(2015, 2))"
  },
  {
    "example_id": 50,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "840.0"
    ],
    "solution": "# Define the sequence\na = [1/(k**2 + k) for k in range(1, 100)]\n\n# Find the sum of the first n terms\nn = 10\nsum_of_first_n = sum(a[:n])\n\n# Find the sum of the first m terms\nm = 5\nsum_of_first_m = sum(a[:m])\n\n# Find the difference between the two sums\ndiff = sum_of_first_n - sum_of_first_m\n\n# Find the value of m + n\nm_plus_n = m + n\n\n# Print the answer\nprint(m_plus_n)"
  },
  {
    "example_id": 51,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = Symbol('x')\nexpr = log(2, x) + log(4, x)\nsol = solve(expr - 3, x)\nprint(sol)"
  },
  {
    "example_id": 52,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "k = 10**9\na = str(k)[0]\nb = str(k)[1]\nprint(int(a) + int(b))"
  },
  {
    "example_id": 53,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0",
      "4.0",
      "26.0",
      "2.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-4.0"
    ],
    "annotated_answers": [
      "277.0"
    ],
    "solution": "x = Symbol('x')\n\n# define the polynomial\np = x**3 + 4*x**2 - 12*x + 16\n\n# solve for the value of x\nx_value = solve(p - 4, x)\n\n# solve for the value of p\np_value = p.subs(x, x_value[0])\n\nprint(p_value)"
  },
  {
    "example_id": 54,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.743062034397555",
      "303.0",
      "2.74306203439689",
      "303.0"
    ],
    "annotated_answers": [
      "-2016.0"
    ],
    "solution": "x = 1 + 1j\nexpression = x**2017 + 1*x + 1\nprint(expression)"
  },
  {
    "example_id": 55,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = -1\nb = -1\nc = 1\nprint(abs(a) + abs(b) + abs(c))"
  },
  {
    "example_id": 56,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "6.0",
      "54.0",
      "0.0",
      "1.0",
      "0.0"
    ],
    "annotated_answers": [
      "-108.0"
    ],
    "solution": "x, y = symbols('x y')\nexpr = x**6 + y**6 - 54*x*y\nsol = solve(expr, y)\nprint(sol[0])"
  },
  {
    "example_id": 57,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2700.0",
      "2700.0"
    ],
    "annotated_answers": [
      "450.0"
    ],
    "solution": "a, h = symbols('a h')\nmean_a = 2700\nmean_h = 75\neq = (a*h)/(h-1)\nsolve_eq = solve(eq - mean_a, a)\nprint(solve_eq[0])"
  },
  {
    "example_id": 58,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "41230.0"
    ],
    "annotated_answers": [
      "41230.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 20):\n    sum += i * (i+1)**2\nprint(sum)"
  },
  {
    "example_id": 59,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\nlog_2_x = log(2, x)\nlog_2_x_squared = log(2, x**2)\neq = log_2_x + log_2_x_squared - 6\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 60,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "87.0"
    ],
    "solution": "from sympy import symbols, Abs, expand\n\nz1, z2, z3 = symbols('z1 z2 z3')\nexpr = Abs(z1 - z2)**2 + Abs(z1 - z3)**2 + Abs(z2 - z3)**2\n\nresult = expand(expr)\nprint(result)"
  },
  {
    "example_id": 61,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x, y = symbols('x y')\neq = (x + y)**2 - (x + 1)*(y - 1)\nsol = solve(eq, x, y)\nprint(sol)"
  },
  {
    "example_id": 62,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "10.0",
      "2.0",
      "104.0",
      "3.0",
      "72.0",
      "30.0",
      "468.0",
      "5.0",
      "1003.0",
      "2.0"
    ],
    "annotated_answers": [
      "936.0"
    ],
    "solution": "# Define variables\na, b, c, x, y, z, t, u, v, w, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z = symbols('a b c x y z t u v w A B C D E F G H I J K L M N O P Q R S T U V W X Y Z')\n\n# Define the expression\nexpr = 104*sqrt(6) + 468*sqrt(10) + 144*sqrt(15) + 2006\n\n# Define the equation\neq = a*sqrt(2) + b*sqrt(3) + c*sqrt(5)\n\n# Find the solutions\nsolutions = solve(eq - expr, [a, b, c])\n\n# Find the minimum\nmin_value = Min(solutions[0][0]*solutions[0][1]*solutions[0][2])\n\n# Print the result\nprint(min_value)"
  },
  {
    "example_id": 63,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = Symbol('x')\nn = Symbol('n')\nf = (x + 3)*(x - 7)**5/(x - 1)*(x - 7)**n\nf_prime = f.diff(x)\nf_prime_val = f_prime.subs(x, 7)\nf_prime_val_floor = floor(f_prime_val)\nf_val = f.subs(x, 7)\nprint(f_val)\nprint(f_prime_val)\nprint(f_prime_val_floor)\nprint(f_prime_val_floor == 0)\nprint(solve(f_prime_val_floor - 0, n))"
  },
  {
    "example_id": 64,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "3.0",
      "7.0",
      "6.0",
      "6.0",
      "11.0",
      "5.0",
      "12.0",
      "4.0",
      "9.0",
      "3.0",
      "6.0",
      "2.0",
      "2.0",
      "1.0",
      "8.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import Symbol, Poly\n\nx = Symbol('x')\n\np = Poly(x**8 - 3*x**7 - 6*x**6 + 11*x**5 + 12*x**4 - 9*x**3 - 6*x**2 + 2*x + 1, x)\n\nprint(p)\n\nprint(p.degree())"
  },
  {
    "example_id": 65,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Import math library\nimport math\n\n# Import symbols and solving functions\nfrom sympy import symbols, solve\n\n# Import I, log, Min, Matrix, sqrt, and solve functions\nfrom sympy import I, log, Min, Matrix, sqrt, solve\n\n# Import the sympy library\nimport sympy\n\n# Import the Symbol function\nfrom sympy import Symbol\n\n# Import the floor function\nfrom math import floor\n\n# Declare variables\na, b = symbols('a b')\n\n# Evaluate the expression\nprint(sqrt(5) + 2*I)"
  },
  {
    "example_id": 66,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "101.0",
      "99.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "n = 100\na_n = sympy.symbols('a_%d'%n)\na_n_1 = sympy.symbols('a_{%d}'%(n-1))\na_n_2 = sympy.symbols('a_{%d}'%(n+1))\neq = a_n**2 - a_n_1*a_n_2\na_n_value = solve(eq, a_n)\nprint(a_n_value[0])"
  },
  {
    "example_id": 67,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "31.0",
      "3.0",
      "6.0",
      "31.0",
      "2.0",
      "233.0"
    ],
    "annotated_answers": [
      "38.0"
    ],
    "solution": "x = symbols('x')\np = x**3 - 6*x**2 + 8*x - 15\np = p.subs(x, x + 3)\np = p.subs(x, x + 4)\np = p.subs(x, x + 5)\np = p.subs(x, x + 7)\np = p.subs(x, x + 12)\nprint(p)"
  },
  {
    "example_id": 68,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "3.0",
      "5.0",
      "2.0",
      "16.0",
      "8.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "23.0"
    ],
    "solution": "y, c = symbols('y c')\neq = 6*y**3 + 5*y**2 - 16*y + 8\nquotient = eq / (2*y + 3)\nremainder = eq % (2*y + 3)\nprint(remainder)"
  },
  {
    "example_id": 69,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.67394039744206",
      "-16.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "import cmath\n\na = cmath.rect(1, 0)\nb = cmath.rect(1, 2*cmath.pi/3)\nc = cmath.rect(1, 4*cmath.pi/3)\nd = cmath.rect(1, cmath.pi)\n\nexpression = abs(a+b)*abs(a+c)*abs(a+d)*abs(b+c)*abs(b+d)*abs(c+d)\nprint(expression)"
  },
  {
    "example_id": 70,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "343.0",
      "8743.0"
    ],
    "annotated_answers": [
      "4561.0"
    ],
    "solution": "f = lambda x: x**2 - x + 1\nprint(f(19))\nprint(f(94))"
  },
  {
    "example_id": 71,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "n = 100\na = 3**n + 2**n\nb = 3**(n-1) + 2**(n-1)\nc = a/b\nd = sympy.log(c, 3)\ne = sympy.log(c, 2)\nf = sympy.Min(d, e)\ng = sympy.floor(f)\nprint(g)"
  },
  {
    "example_id": 72,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "def f(x):\n    return -3*x**2 + 36*x - 7\n\ndef f_inverse(x):\n    return (-1/3)*(x**2 + 7/3)\n\ndef domain_inverse(x):\n    return (-1/3)*(x**2 + 7/3)\n\nc = 0\nwhile True:\n    try:\n        domain_inverse(c)\n    except:\n        c += 1\n    else:\n        print(c)\n        break"
  },
  {
    "example_id": 73,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "6.0",
      "3.0",
      "72.0",
      "6.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x, y = symbols('x y')\neq = (2/x) - (y/3) - (x/y)\nx_value = solve(eq, x)[0]\nprint(x_value)"
  },
  {
    "example_id": 74,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "from sympy import I\nfrom sympy import symbols\nfrom sympy import log\nfrom sympy import Min\nfrom sympy import solve\nfrom sympy import Matrix\nfrom sympy import sqrt\nimport sympy\nfrom sympy import Symbol\nfrom math import floor\n\nx = symbols('x')\n\nnumerator = x**2 - 13*x + 22\ndenominator = x**2 - 8*x + 12\n\nresult = solve(numerator / denominator - 1)\n\nroots = []\nfor i in result:\n    roots.append(i)\n\nsum = 0\nfor i in roots:\n    sum += i\n\nprint(sum)"
  },
  {
    "example_id": 75,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.2376500397986598",
      "-14.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "# define x_1\nx_1 = 97\n\n# define x_n\nx_n = x_1\n\n# define n\nn = 1\n\n# define x_n\nx_n = n/x_n\n\n# calculate x_1x_2...x_8\nx_8 = x_1\n\nfor i in range(8):\n    x_8 = x_8 * x_n\n\nprint(x_8)"
  },
  {
    "example_id": 76,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# find f(n)\nn = Symbol('n')\nf = Matrix([[1, 1], [1, n]])\nf_n = f.det()\nprint(f_n)\n\n\n# find f(n)\nn = Symbol('n')\nf = Matrix([[1, 1], [1, n]])\nf_n = f.det()\nprint(f_n)\n\n\n# find f(n)\nn = Symbol('n')\nf = Matrix([[1, 1], [1, n]])\nf_n = f.det()\nprint(f_n)\n\n\n# find f(n)\nn = Symbol('n')\nf = Matrix([[1, 1], [1, n]])\nf_n = f.det()\nprint(f_n)\n\n\n# find f(n)\nn = Symbol('n')\nf = Matrix([[1, 1], [1, n]])\nf_n = f.det()\nprint(f_n)\n\n\n# find f(n)\nn = Symbol('n')\nf = Matrix([[1, 1], [1, n]])\nf_n = f.det()\nprint(f_n)\n\n\n# find f(n)\nn = Symbol('n')\nf = Matrix([[1, 1], [1, n]])\nf_n = f.det()\nprint(f_n)\n\n\n# find f(n)\nn = Symbol('n')\nf = Matrix([[1, 1], [1, n]])\nf_n = f.det()\nprint(f_n)\n\n\n# find f(n)\nn = Symbol('n')\nf = Matrix([[1, 1], [1, n]])\nf_n = f.det()\nprint(f_n)\n\n\n# find f(n)\nn = Symbol('n')\nf = Matrix([[1, 1], [1, n]])\nf_n = f.det()\nprint(f_n)"
  },
  {
    "example_id": 77,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "136.0"
    ],
    "annotated_answers": [
      "272.0"
    ],
    "solution": "from sympy import binomial, symbols\nn = symbols('n')\nsum = binomial(n, 15)/binomial(n, 17)\nsum_value = sum.series(n, 17, 1).removeO()\nprint(sum_value)"
  },
  {
    "example_id": 78,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "2.0",
      "3.0",
      "1.0",
      "4.0",
      "3.0",
      "4.0",
      "3.0",
      "1.0",
      "4.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import S, solve\nx, y = S('x'), S('y')\nfraction = (8*x**3 + 27*y**3)/(2*x + 3*y)\na, b, c = solve(fraction.as_numer_denom()[0], (x, y))\nprint(a + b + c)"
  },
  {
    "example_id": 79,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "108.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nf = x + (108/(x - y)**3 * (y - z)**2 * z)\nf_min = Min(f, x, y, z)\nf_min_value = f_min.subs(x, 1), f_min.subs(y, 1), f_min.subs(z, 1)\nprint(f_min_value[0])"
  },
  {
    "example_id": 80,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\n\neq = a*log(10, 2) + b*log(10, 3) + c*log(10, 5) + d*log(10, 7)\n\nsol = solve(eq - 2005, [a, b, c, d])\n\n# number of distinct tuples\nprint(len(sol))"
  },
  {
    "example_id": 81,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "49.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "52.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = symbols('z')\neq = z**2 + z + 1\nz_value = solve(eq, z)[0]\nprint(z_value**49 + z_value**50 + z_value**51 + z_value**52 + z_value**53)"
  },
  {
    "example_id": 82,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "7.0",
      "12.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a = Symbol('a')\nf = Piecewise((4*a + 3, a < a), (7*a - 12, a >= a))\nprint(f)\n\n\n# find a\na = solve(f, a)\nprint(a)"
  },
  {
    "example_id": 83,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "12.0",
      "12.0",
      "2.0",
      "11.0",
      "3.0",
      "66.0",
      "2.0",
      "10.0",
      "3.0"
    ],
    "annotated_answers": [
      "66673.0"
    ],
    "solution": "sqrt2, sqrt3 = symbols('sqrt2 sqrt3')\neq = (sqrt2 + sqrt3)**12\nprint(eq.expand())"
  },
  {
    "example_id": 84,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0",
      "13.0",
      "2.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq1 = a**2 + b**2 - 8\neq2 = c**2 + d**2 - 13\neq3 = (a*d - b*c)**2 + (a*c + b*d)**2\nsol1 = solve(eq1, a)\nsol2 = solve(eq2, c)\nsol3 = solve(eq3, d)\nprint(sol1[0])\nprint(sol2[0])\nprint(sol3[0])"
  },
  {
    "example_id": 85,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "32.0",
      "2.0",
      "128.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "# find the minimum value of the given expression\nx = Symbol('x')\nf = x**7 + 32*x**2 + 128\nf_min = Min(f, x)\nprint(f_min)"
  },
  {
    "example_id": 86,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "2.0",
      "6.0",
      "1.0",
      "2.0",
      "6.0",
      "2.0",
      "7.0",
      "4.0",
      "6.0",
      "2.0",
      "17.0",
      "129.0"
    ],
    "annotated_answers": [
      "336.0"
    ],
    "solution": "x = symbols('x')\np = x**2 + 3*x - 1\nq = x**2 + 2*x - 5\nr = x**2 + 4*x - 7\n\n# p(1) = 210\np1 = p.subs(x, 1)\nprint(p1)\n\n# (x + 10) p(2x) = 8(x - 4) p(x + 6)\np2 = p.subs(x, 2*x)\nprint(p2)\n\n# q(x + 6) = 8(x - 4) q(x)\nq1 = q.subs(x, x + 6)\nprint(q1)\n\n# r(x) = r(x + 6)\nr1 = r.subs(x, x + 6)\nprint(r1)\n\n# p(10)\np10 = p.subs(x, 10)\nprint(p10)"
  },
  {
    "example_id": 87,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a1, a2 = symbols('a1 a2')\na1 = a2 = a1\nfor i in range(9):\n    a1 = 1/(1 - a1)\n    a2 = a1\nprint(a2)"
  },
  {
    "example_id": 88,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "c = Symbol('c')\nx = Symbol('x')\nf = c/(2*x + 3)\nf_inv = 2*x + 3/c\nf_inv_eq = f_inv - f\nc_value = solve(f_inv_eq, c)\nprint(c_value[0])"
  },
  {
    "example_id": 89,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-5050.0"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 101):\n    sum += -i\nprint(sum)"
  },
  {
    "example_id": 90,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "n = 25\nprint(n)"
  },
  {
    "example_id": 91,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "26.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "x, y = symbols('x y')\nexpr = (x+y)**2 + (x-y)**2\nexpr = expr.expand()\nexpr = expr.subs(x, 3)\nexpr = expr.subs(y, 2)\nprint(expr)"
  },
  {
    "example_id": 92,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-19.0",
      "24.0",
      "33.0",
      "16.0",
      "65.0",
      "16.0",
      "97.0",
      "16.0",
      "19.0",
      "6.0",
      "12.0"
    ],
    "annotated_answers": [
      "508.0"
    ],
    "solution": "a, b, c, d, e, f = symbols('a b c d e f')\neq1 = a + b + c + d + e + f\neq2 = a + 2*b + 3*c + 4*d + 2*e + 2*f\neq3 = a + 3*b + 6*c + 9*d + 4*e + 6*f\neq4 = a + 4*b + 10*c + 16*d + 8*e + 24*f\neq5 = a + 5*b + 15*c + 25*d + 16*e + 120*f\neq_list = [eq1, eq2, eq3, eq4, eq5]\nx_list = [a, b, c, d, e, f]\nans = 0\nfor i in range(len(eq_list)):\n    ans += solve(eq_list[i], x_list[i])[0]\nprint(ans)"
  },
  {
    "example_id": 93,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a = Symbol('a')\neq = x**4 + (a**2 - 1)*x**2 + a**3\nroots = solve(eq.expand(), x)\nn_roots = len(roots)\nif n_roots == 2:\n    z1, z2 = roots\n    if z1.is_real and z2.is_real:\n        print(0)\n    else:\n        if z1.is_real:\n            z1 = z1.as_real_imag()[1]\n            z2 = z2.as_real_imag()[1]\n            n_roots = 1\n        else:\n            z1 = z1.as_real_imag()[1]\n            z2 = z2.as_real_imag()[1]\n            n_roots = 1\n        if z1 == z2:\n            print(0)\n        else:\n            print(n_roots)\nelse:\n    print(0)"
  },
  {
    "example_id": 94,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = x**3 - 3*x - 5\nroots = solve(eq, x)\nroot_product = 1\nfor root in roots:\n    root_product *= root\nprint(root_product)"
  },
  {
    "example_id": 95,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.460461017585218",
      "84"
    ],
    "annotated_answers": [
      "1052.0"
    ],
    "solution": "from sympy import binomial\n\nn = 1000\nk = 50\nresult = binomial(n, k)\nprint(result)"
  },
  {
    "example_id": 96,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = ( -1 + 0j )\nb = ( -1 + 0j )\nexpression = a**2 + a*b + b**2\nprint(expression)"
  },
  {
    "example_id": 97,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "-48.0"
    ],
    "solution": "from sympy import Poly, roots, expand\nfrom sympy.abc import x\n\nf = Poly(x**4 + 2*x**3 + 3*x**2 - 2*x - 1, x)\nroots_f = roots(f)\nprint(expand(f.subs(x, 1)))"
  },
  {
    "example_id": 98,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "8.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "8.0"
    ],
    "annotated_answers": [
      "-81.0"
    ],
    "solution": "a = (3 + I*sqrt(3))/2\nb = (3 - I*sqrt(3))/2\nprint(a**8 + b**8)"
  },
  {
    "example_id": 99,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.75"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "r = 11 / 4\nprint(r)"
  },
  {
    "example_id": 100,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5050.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "sum = 0\nfor i in range(100, 0, -1):\n    sum += i\nprint(sum)"
  },
  {
    "example_id": 101,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "1.0",
      "7.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\neq = 5*x-7\neq = eq/(x-1)**3\neq = eq.expand()\nA, B, C = symbols('A B C')\neq = eq.subs({A:1, B:1, C:1})\nprint(eq)"
  },
  {
    "example_id": 102,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "from sympy import symbols, solve\na1, b1, a2, b2, an, bn = symbols('a1 b1 a2 b2 a3 b3')\neq1 = a1 + 10*b1/(a1**2 + b1**2) - 5\neq2 = b1 + 10*a1/(a1**2 + b1**2) - 4\neq3 = a2 + 10*b2/(a2**2 + b2**2) - 5\neq4 = b2 + 10*a2/(a2**2 + b2**2) - 4\neq5 = an + 10*bn/(an**2 + bn**2) - 5\neq6 = bn + 10*an/(an**2 + bn**2) - 4\n\nsol1 = solve((eq1, eq2), (a1, b1))\nsol2 = solve((eq3, eq4), (a2, b2))\nsol3 = solve((eq5, eq6), (an, bn))\n\nprint(sol1[0][0] + sol2[0][0] + sol3[0][0])"
  },
  {
    "example_id": 103,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "9.0",
      "2.0",
      "-4.0",
      "2.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "80.0"
    ],
    "solution": "from sympy import symbols, solve\nfrom sympy.abc import a, b, x\n\nP = x**3 - a*x**2 + b*x - 65\n\ndef get_roots(a, b):\n    roots = solve(P, x)\n    return roots\n\ndef get_sum(a, b):\n    roots = get_roots(a, b)\n    return sum(roots)\n\na_values = [1, 2, 3, 4, 5]\nb_values = [1, 2, 3, 4, 5]\n\nsums = []\nfor a in a_values:\n    for b in b_values:\n        sums.append(get_sum(a, b))\n\nprint(sums)"
  },
  {
    "example_id": 104,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "1.0",
      "2.0",
      "2.0",
      "5.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x1, y1, x2, y2, x3, y3, x4, y4, x5, y5 = symbols('x1 y1 x2 y2 x3 y3 x4 y4 x5 y5')\neq1 = x1 + y1 - 2\neq2 = x1**5 + y1**5 - 82\neq3 = x2 + y2 - 2\neq4 = x2**5 + y2**5 - 82\neq5 = x3 + y3 - 2\neq6 = x3**5 + y3**5 - 82\neq7 = x4 + y4 - 2\neq8 = x4**5 + y4**5 - 82\neq9 = x5 + y5 - 2\neq10 = x5**5 + y5**5 - 82\n\nsol1 = solve((eq1, eq2), (x1, y1))\nsol2 = solve((eq3, eq4), (x2, y2))\nsol3 = solve((eq5, eq6), (x3, y3))\nsol4 = solve((eq7, eq8), (x4, y4))\nsol5 = solve((eq9, eq10), (x5, y5))\n\nresult = (sol1[0][0]**2 + sol1[0][1]**2 + sol2[0][0]**2 + sol2[0][1]**2 + sol3[0][0]**2 + sol3[0][1]**2 + sol4[0][0]**2 + sol4[0][1]**2 + sol5[0][0]**2 + sol5[0][1]**2)\nprint(result)"
  },
  {
    "example_id": 105,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "a, b = symbols('a b')\neq = abs(a) == abs(b) == abs(a + b)\nsolution = solve(eq, a, b)\nprint(sum(solution))"
  },
  {
    "example_id": 106,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0",
      "1.0",
      "7.0",
      "1.0",
      "7.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = Symbol('x')\ng = x**3 - 14*x**2 + 18*x + 72\nsol = solve(g, x)\nprint(sol)"
  },
  {
    "example_id": 107,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0",
      "5.0",
      "2.0",
      "2.0",
      "15.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import symbols, solve, Min\n\nx, y, z = symbols('x y z')\nf = 2*x**2 + 2*y**2 + 5*z**2 - 2*x*y - 4*y*z - 4*x - 2*z + 15\nprint(Min(f, x, y, z))"
  },
  {
    "example_id": 108,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "z = symbols('z')\neq = (z - 3)**2 + (z - 5 + 2*I)**2 + (z - 1 + I)**2\neq = sympy.Min(eq)\nprint(eq)"
  },
  {
    "example_id": 109,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "2.0",
      "2.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = Symbol('x')\nf = sqrt(5*x**2 + 2*x*sqrt(5) + 1) + x*sqrt(5)\n\n# Find the minimum value of f(x)\nmin_val = Min(f, x)\n\nprint(min_val)"
  },
  {
    "example_id": 110,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "1.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = (a + 1)*(b + 1)*(c + 1) - 1\neq2 = (a + 2)*(b + 2)*(c + 2) - 2\neq3 = (a + 3)*(b + 3)*(c + 3) - 3\nsolutions = solve([eq1, eq2, eq3], [a, b, c])\na_value = solutions[0][0]\nb_value = solutions[0][1]\nc_value = solutions[0][2]\nprint((a_value + 4)*(b_value + 4)*(c_value + 4))"
  },
  {
    "example_id": 111,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "302500.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "def f(x):\n    return x**2\n\nn = 0\ns = 0\n\nfor i in range(-100, 100):\n    for j in range(-100, 100):\n        for k in range(-100, 100):\n            if f(1) == 1 and f(i + f(j + k)) + f(f(i + j) + k) == 2*j:\n                n += 1\n                s += f(5)\n\nprint(n * s)"
  },
  {
    "example_id": 112,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "3.0",
      "4.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nf = a*x**3 + b*x - c\ng = x**2 + b*x + c\nh = f/g\nd = h.diff(x)\ndisc = d**2 - 4*h*g\nprint(disc)"
  },
  {
    "example_id": 113,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = log(b, a) + log(c, b) + log(a, c)\neq = eq**3\nprint(eq.simplify())"
  },
  {
    "example_id": 114,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8041.720164941818"
    ],
    "annotated_answers": [
      "2014.0"
    ],
    "solution": "def get_coefficient(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 4:\n        return 2\n    else:\n        return n * get_coefficient(n/2)\n\na = 2011\nb = 2\nc = 0\nfor i in range(2, 2012):\n    a -= 1/b**c\n    b += 2\n    c += 1\nprint(a + b + c)"
  },
  {
    "example_id": 115,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.8768136958757977"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\n\ndef find_distance(major_axis, area, center_x, center_y):\n    # Find the minor axis\n    minor_axis = math.sqrt(major_axis**2 - area/math.pi)\n\n    # Find the distance between the foci\n    distance = math.sqrt(major_axis**2 - minor_axis**2)\n\n    # Find the coordinates of the foci\n    focus_x = center_x + minor_axis/2\n    focus_y = center_y\n\n    # Find the coordinates of the point of intersection\n    point_x = center_x + distance\n    point_y = center_y\n\n    return distance\n\n# Test the function with some specific values\nprint(find_distance(15, 26, 0, 0))"
  },
  {
    "example_id": 116,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-8.0",
      "6.0",
      "-3.0",
      "2.0",
      "5.0",
      "4.0",
      "1.0",
      "6.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "x = Symbol('x')\n\nP = x**4 + 6*x**3 + 11*x**2 + 6*x + 1\n\nroot = sqrt(1 + sqrt(6))\n\nroot_x = solve(P - root, x)[0]\n\nprint(P.subs(x, root_x))"
  },
  {
    "example_id": 117,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-2.0",
      "-701490.0",
      "111.0",
      "356539.0",
      "1745.0",
      "201.0",
      "111.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x, y = symbols('x y')\nf1 = x**4 - 5*x**2 - x + 4\nf2 = x**2 - 3*x\nintersections = solve([f1 - y, f2 - y], [x, y])\nprint(intersections)"
  },
  {
    "example_id": 118,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "6.0",
      "1.0",
      "2.0",
      "6.0",
      "8.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = symbols('x')\nf = (1/(x**2 - 6*x + 8)) + (1/(x**2 + x - 6))\nprint(f.args)"
  },
  {
    "example_id": 119,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "z = (1 + 1j)\nprint(z**3)"
  },
  {
    "example_id": 120,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nf = b*c/(a**2) + a*c/(b**2) + a*b/(c**2)\nprint(f)"
  },
  {
    "example_id": 121,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = symbols('x')\neq = sqrt(x + sqrt(3*x + 6)) + sqrt(x - sqrt(3*x + 6))\neq_solve = solve(eq - 6, x)\nprint(eq_solve)"
  },
  {
    "example_id": 122,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "# x, y = symbols('x y')\nx, y = symbols('x y')\n# f(x,y) = x + yf(y,x)\nf = x + y*f(y,x)\n# f(1,2) = 1 + 2f(2,1)\nf = 1 + 2*f(2,1)\n# f(2,1) = 2 + 1f(1,2)\nf = 2 + 1*f(1,2)\n# f(1,2) = 1 + 2f(2,1)\nprint(f(1,2))"
  },
  {
    "example_id": 123,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a, b = symbols('a b')\neq1 = a + (17*a + 6*b)/(a**2 + b**2) - 6\neq2 = b + (6*a - 17*b)/(a**2 + b**2)\n\n# solve the system of equations\nsol = solve((eq1, eq2), (a, b))\n\n# find the sum\nsum = 0\nfor i in range(len(sol)):\n    sum += sol[i][0] + sol[i][1]\nprint(sum)"
  },
  {
    "example_id": 124,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "405.0"
    ],
    "annotated_answers": [
      "405.0"
    ],
    "solution": "expression = abs(-324 + 243j)\nprint(expression)"
  },
  {
    "example_id": 125,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "8.0",
      "9.0",
      "10.0",
      "11.0"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "n = 1\nfor i in range(2, 2011):\n    n *= (i + 1)\n    if int(n) == n:\n        print(i)"
  },
  {
    "example_id": 126,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "31.0",
      "1.0",
      "33.0",
      "2.0",
      "10.0"
    ],
    "annotated_answers": [
      "2150.0"
    ],
    "solution": "x = Symbol('x')\nc2, c1, c0 = symbols('c_2, c_1, c_0')\neq = x**3 + x**2 - 5 - (x - 3)**3 - c2*(x - 3)**2 - c1*(x - 3) - c0\n\nprint(solve(eq, c2, c1, c0))"
  },
  {
    "example_id": 127,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "8.0",
      "4.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "16.0",
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = (x + 1/y) * (y + 1/z) * (z + 1/x)\nsolution = solve(eq - 8, [x, y, z])\nprint(solution)"
  },
  {
    "example_id": 128,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3906.0"
    ],
    "annotated_answers": [
      "676.0"
    ],
    "solution": "f = lambda x: 1 + x + x**2 + x**3 + x**4 + x**5\nprint(f(5))"
  },
  {
    "example_id": 129,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "232.0",
      "276.0",
      "232.0",
      "1848.0"
    ],
    "annotated_answers": [
      "348.0"
    ],
    "solution": "# first sequence\na1 = 1440\na2 = 1716\nb1 = 1848\nb2 = 2080\n\n# find the common difference\nd1 = a2 - a1\nd2 = b2 - b1\n\n# find the terms\ne1 = a1 + d1*log(d1, d2)\ne2 = b1 + d2*log(d1, d2)\n\n# print the eighth term\nprint(e2)"
  },
  {
    "example_id": 130,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "216.0"
    ],
    "solution": "# Define variables\nl, w, h = symbols('l w h')\n\n# Find the volume of the box\nvolume = l*w*h\n\n# Find the surface area of the box\nsurface_area = 2*l*w + 2*w*h + 2*h*l\n\n# Find the minimum surface area\nmin_surface_area = Min(surface_area, evaluate=False)\n\n# Find the smallest possible dimensions\nsmallest_dimensions = solve(min_surface_area - volume, [l, w, h])\n\n# Print the smallest possible dimensions\nprint(smallest_dimensions)"
  },
  {
    "example_id": 131,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x**4*y**5 + y**4*x**5 - 810\neq2 = x**3*y**6 + y**3*x**6 - 945\nsolve([eq1, eq2], [x, y])\nprint(2*x**3 + (x*y)**3 + 2*y**3)"
  },
  {
    "example_id": 132,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x, y = symbols('x y')\ngeometric_series = (x + y) * (1 - x*y)/(1 - x - y + x*y)\ngeometric_series_prime = (y + x) * (1 - y*x)/(1 - x - y + x*y)\nresult = sympy.simplify(geometric_series - geometric_series_prime)\nprint(result)"
  },
  {
    "example_id": 133,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "4.0",
      "2.0",
      "9.0",
      "4.0",
      "42.0",
      "243.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "x = symbols('x')\na, b, c = symbols('a b c', positive=True)\nsol = solve(9*x**3 - 20*x - 8*sqrt(2), x)\nprint(sol[0])"
  },
  {
    "example_id": 134,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "n = 1\nwhile True:\n    if (sum(i*j for i, j in zip(range(1, n + 1), range(1, n + 1)[1:])) <= 0):\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 135,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0",
      "-4.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x**4 + y**4 + z**4 - 4*x*y*z\nprint(solve(eq, x, y, z))"
  },
  {
    "example_id": 136,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-77.0"
    ],
    "annotated_answers": [
      "763.0"
    ],
    "solution": "def p(n, x):\n    if n == 0:\n        return x**3 + 313*x**2 - 77*x - 8\n    else:\n        return p(n - 1, x - n)\n\nx = Symbol('x')\nprint(p(20, x).coeff(x))"
  },
  {
    "example_id": 137,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\n\nr, theta = symbols('r theta')\n\nperimeter = 2 * r\narc_length = r * theta\narea = r ** 2 * theta / 2\n\nmaxima = solve(area - perimeter * theta, theta)\nprint(maxima[0])"
  },
  {
    "example_id": 138,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-45.0",
      "-40.0",
      "-35.0",
      "-30.0",
      "-25.0",
      "-20.0",
      "-15.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "floor = lambda x: int(x) - 1 if x % 1 > 0 else int(x)\npossible_values = [floor(5*x) for x in range(-9, -2)]\nprint(possible_values)"
  },
  {
    "example_id": 139,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "3.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "1.0",
      "4.0",
      "2.0",
      "4.0",
      "3.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Initialize variables\nn = 3\nx_1, x_2, x_3 = symbols('x_1 x_2 x_3')\n# Define equations\neq1 = x_1 + x_2 + x_3\neq2 = x_1**2 + x_2**2 + x_3**2\n# Define sum of the squares\nsum_squares = x_1**2 + x_2**2 + x_3**2\n# Define sum of the numbers\nsum_numbers = x_1 + x_2 + x_3\n# Define the largest possible value of the arithmetic mean of the numbers\nlargest_mean = (sum_numbers / n)\n# Define the smallest possible value of the arithmetic mean of the numbers\nsmallest_mean = (sum_numbers / (n + 1))\n# Solve for the values of x_1, x_2, and x_3\nsolutions = solve([eq1 - sum_numbers, eq2 - sum_squares], [x_1, x_2, x_3])\n# Print the largest possible value of the arithmetic mean of the numbers\nprint(largest_mean)\n# Print the smallest possible value of the arithmetic mean of the numbers\nprint(smallest_mean)"
  },
  {
    "example_id": 140,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\nexpr = a**2 + b**2 + c**2 + d**2\nconstraint = a + b + c + d - 1\nsol = solve(expr, [a, b, c, d], constraints=[constraint])\nprint(sol[0])"
  },
  {
    "example_id": 141,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "import sympy\na, b, c, d, e = sympy.symbols('a, b, c, d, e')\n\ndef get_denominator(x):\n    return (x - a) * (x - b) * (x - c) * (x - d) * (x - e)\n\ndef get_numerator(x):\n    return x**4\n\ndef get_term(x):\n    return get_numerator(x) / get_denominator(x)\n\nresult = get_term(a) + get_term(b) + get_term(c) + get_term(d) + get_term(e)\nprint(result)"
  },
  {
    "example_id": 142,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2003.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "n = 2004\na, b, c = symbols('a b c')\nf = a + b - c\nf_list = [f.subs(c, i) for i in range(n)]\nans = f_list[n-1]\nprint(ans)"
  },
  {
    "example_id": 143,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "3.0",
      "7.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\ny = (x + 8)*(x + 5)**2*(x + 1)**3*x**5*(x - 3)**2/( (x + 7)*(x + 5)**2*(x + 1)*x*(x - 3)**3*(x - 4) )\nprint(y.as_numer_denom()[1])"
  },
  {
    "example_id": 144,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "-23.0",
      "33.0",
      "4.0",
      "35.0",
      "33.0",
      "2.0",
      "-23.0",
      "33.0",
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from math import sqrt\nfrom sympy import Symbol, Eq, solve\n\nf = Symbol('f')\nx = Symbol('x')\n\ndef f(x):\n    return (x**2 - 4)/(x**2 + 4)\n\neq = Eq(f(f(x)), 6)\nsol = solve(eq, x)\n\nprint(sol)"
  },
  {
    "example_id": 145,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "553.0"
    ],
    "solution": "# Maximum value of n_i/k\nmax_value = 0\n\n# For k = 1 to 100\nfor k in range(1, 101):\n    # For n_i = 1 to 70\n    for n_i in range(1, 71):\n        # Check if k divides n_i\n        if k % n_i == 0:\n            # Check if k is the greatest integer less than or equal to n_i\n            if k == floor(n_i**(1/3)):\n                # Calculate n_i/k\n                value = n_i / k\n                # Check if value is greater than max_value\n                if value > max_value:\n                    # Update max_value\n                    max_value = value\n\nprint(max_value)"
  },
  {
    "example_id": 146,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "169.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "z = 156 + 65j\nprint(abs(z))"
  },
  {
    "example_id": 147,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "150.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "def p(x):\n    return x**8 + 98*x**4 + 1\n\ndef q(x):\n    return (x**8 + 98*x**4 + 1) / (x**4 + 1)\n\nprint(p(1) + q(1))"
  },
  {
    "example_id": 148,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = symbols('x')\nf = (6*x**3 + 4*x**2 - 11*x + 5)/(3*x**3 - 15*x + 20)\nc = f.as_leading_term(x)\nprint(c)"
  },
  {
    "example_id": 149,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = 1990\ny = 1000\nz = 990\n\nprint((x**3 - y**3 - z**3) / (x*y*z))"
  },
  {
    "example_id": 150,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x + y + z\neq2 = x*y*z\neq3 = x**3*y + y**3*z + z**3*x\neq4 = eq2 - 2\neq5 = eq1 - eq4\nsolve([eq5, eq2], [x, y, z])"
  },
  {
    "example_id": 151,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "# Find the smallest possible value of N\nN = 10\nwhile True:\n    # Create two sequences\n    a = [1, 2, N]\n    b = [1, 2, N, N, N, N, N]\n\n    # Check if they have the same first term\n    if a[0] == b[0]:\n        break\n\n    # Increment N\n    N += 1\n\nprint(N)"
  },
  {
    "example_id": 152,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "from sympy import symbols, solve, Min\na, b, c = symbols('a b c')\nf = (a + b + c) * ((a + b) ** 2 + (a + b + 4 * c) ** 2) / (a * b * c)\nprint(Min(f))"
  },
  {
    "example_id": 153,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "67.0"
    ],
    "solution": "n = symbols('n', integer=True, positive=True)\nx = symbols('x')\nexpr = (x**2*n + x + 1)**(2*n) + x**2*n + 1\ncond = expr.is_divisible(x**2 + x + 1)\nexpr_sol = solve(cond, n)\nprint(expr_sol)"
  },
  {
    "example_id": 154,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "z = 2\nw = 5\nprint(abs(z + w))"
  },
  {
    "example_id": 155,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28.0",
      "187.0"
    ],
    "annotated_answers": [
      "1700.0"
    ],
    "solution": "# x > 9\nx = 10\nwhile True:\n    # floor(x) - 19 * floor(x/19) = 9\n    if (x - 19 * (x // 19)) == 9:\n        print(x)\n        break\n    x += 1\n\n# x > 9\nx = 100\nwhile True:\n    # floor(x) - 89 * floor(x/89) = 9\n    if (x - 89 * (x // 89)) == 9:\n        print(x)\n        break\n    x += 1"
  },
  {
    "example_id": 156,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-4.0",
      "2.0",
      "2.0",
      "2.0",
      "-4.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Define variables\na, b, c, A, B = symbols('a b c A B')\n\n# Partial fractions\neq1 = (A/(x - (-b + sqrt(b**2 - 4*a*c))/2*a) + B/(x - (-b - sqrt(b**2 - 4*a*c))/2*a))\n\n# Find A + B\nprint(eq1.subs(x, 0).doit())"
  },
  {
    "example_id": 157,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "17520.0"
    ],
    "annotated_answers": [
      "1112.0"
    ],
    "solution": "x = Symbol('x')\np = x**4 + 3*x**3 + 11*x**2 + 27*x + 3\nprint(p.subs(x, -2) + 7*p.subs(x, 6))"
  },
  {
    "example_id": 158,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "5.0",
      "-2.0"
    ],
    "annotated_answers": [
      "850.0"
    ],
    "solution": "from sympy import *\nx, r1, r2, r3, r4, r5, r_1, r_2, r_3, r_4, r_5 = symbols('x r1 r2 r3 r4 r5 r_1 r_2 r_3 r_4 r_5')\nexpression = 1/(r_1*r_1 + 1/(r_2*r_2 + 1/(r_3*r_3 + 1/(r_4*r_4 + 1/(r_5*r_5)))))\nprint(expression)"
  },
  {
    "example_id": 159,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.9926881724751366"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# define the sum\nsum = 1 + (3/3) + (5/9) + (7/27) + (9/81) + (11/243) + (13/729) + (15/4096)\nprint(sum)"
  },
  {
    "example_id": 160,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a3, a2, a1 = symbols('a_3 a_2 a_1')\neq = 2*x**4 + a3*x**3 + a2*x**2 + a1*x + 1\nrational_roots = solve(eq, x)\nprint(len(rational_roots))"
  },
  {
    "example_id": 161,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13535.0"
    ],
    "annotated_answers": [
      "13535.0"
    ],
    "solution": "expression = int(((7**(1/2) + 5**(1/2))**6))\nprint(expression)"
  },
  {
    "example_id": 162,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "1209.0"
    ],
    "solution": "def f(x):\n    if x == 5:\n        return 3\n    elif x == 2015:\n        return 2\n    else:\n        return 2*f(x/2 + f(x/2)) + 2*f(x/2 - f(x/2))\n\nprint(f(2015))"
  },
  {
    "example_id": 163,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "3.0",
      "6.0",
      "4.0",
      "5.0",
      "3.0",
      "3.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\nq = x**2 - 4*x + 3\nR = q/(x**6 - 4*x**5 + 3*x**3 + x**2 - 1)\nprint(R)\n\n\n# The degree of the numerator is 2 and that of the denominator is 6.\n# So, the degree of q(x) should be at most 6 - 2 = 4."
  },
  {
    "example_id": 164,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "56.0"
    ],
    "solution": "z1 = 18 + 83*I\nz2 = 18 + 39*I\nz3 = 78 + 99*I\nz_real = Symbol('z_real')\nz_imag = Symbol('z_imag')\nz_real_1 = Symbol('z_real_1')\nz_imag_1 = Symbol('z_imag_1')\nz_real_2 = Symbol('z_real_2')\nz_imag_2 = Symbol('z_imag_2')\nz_real_3 = Symbol('z_real_3')\nz_imag_3 = Symbol('z_imag_3')\nz_real_4 = Symbol('z_real_4')\nz_imag_4 = Symbol('z_imag_4')\nz_real_5 = Symbol('z_real_5')\nz_imag_5 = Symbol('z_imag_5')\nz_real_6 = Symbol('z_real_6')\nz_imag_6 = Symbol('z_imag_6')\nz_real_7 = Symbol('z_real_7')\nz_imag_7 = Symbol('z_imag_7')\nz_real_8 = Symbol('z_real_8')\nz_imag_8 = Symbol('z_imag_8')\nz_real_9 = Symbol('z_real_9')\nz_imag_9 = Symbol('z_imag_9')\nz_real_10 = Symbol('z_real_10')\nz_imag_10 = Symbol('z_imag_10')\nz_real_11 = Symbol('z_real_11')\nz_imag_11 = Symbol('z_imag_11')\nz_real_12 = Symbol('z_real_12')\nz_imag_12 = Symbol('z_imag_12')\nz_real_13 = Symbol('z_real_13')\nz_imag_13 = Symbol('z_imag_13')\nz_real_14 = Symbol('z_real_1"
  },
  {
    "example_id": 165,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "92.0"
    ],
    "solution": "from sympy import symbols, Poly\n\na, b, c, d, z = symbols('a b c d z')\n\nP = Poly(4*z**4 + a*z**3 + b*z**2 + c*z + d, z)\n\nsolutions = []\nfor i in range(5):\n    for j in range(i, 5):\n        for k in range(j, 5):\n            for l in range(k, 5):\n                for m in range(l, 5):\n                    if P.subs({a:i, b:j, c:k, d:l}).has(z):\n                        continue\n                    if abs(P.subs({a:i, b:j, c:k, d:l}).evalf(subs={z:1})) == 0:\n                        solutions.append(P.subs({a:i, b:j, c:k, d:l}).evalf(subs={z:1}))\n\nprint(sum(solutions))"
  },
  {
    "example_id": 166,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq1 = a**2 + b**2 - 3\neq2 = c**2 + d**2 - 4\neq1_sol = solve(eq1, a)\neq2_sol = solve(eq2, c)\nprint((eq1_sol[0]*eq2_sol[0])**2 + (eq1_sol[0]*eq2_sol[1] - eq1_sol[1]*eq2_sol[0])**2)"
  },
  {
    "example_id": 167,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "k = symbols('k')\nx, y = symbols('x y')\neq1 = x**2 + y**2 - k**2\neq2 = x*y - k\nsol = solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 168,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# define the values of log_n(x)\nlog_n = [log(x, n) for n in range(2, 8)]\n\n# define the product of log_n(x)\nproduct = 1\nfor n in range(2, 8):\n    product = product * log_n[n-2]\n\n# find the value of the product\nprint(product)"
  },
  {
    "example_id": 169,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# define complex numbers\na = I*2009 + 9002*I*pi\nb = I*2009\nc = I*9002\n\n# define x\nx = Symbol('x')\n\n# define the polynomial\np = x**3 + a*x**2 + b*x + c\n\n# solve for the roots\nroots = solve(p)\n\n# count the nonreal roots\nnum_nonreal = 0\nfor root in roots:\n    if not root.is_real:\n        num_nonreal += 1\n\nprint(num_nonreal)"
  },
  {
    "example_id": 170,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0",
      "3.0",
      "4.0",
      "3.0",
      "2.0",
      "25.0",
      "3.0",
      "4.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "z = symbols('z')\neq = z**3 - (100 + 75*I)\nres = solve(eq, z)\nz_value = res[0]\nprint(abs(z_value))"
  },
  {
    "example_id": 171,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "43.0",
      "4.0",
      "445.0",
      "4.0",
      "11641.0",
      "8.0",
      "679661.0",
      "64.0",
      "165.0",
      "640247.0"
    ],
    "annotated_answers": [
      "43.0"
    ],
    "solution": "x = symbols('x')\neq = (1/(x-1)) + (1/(x-5)) + (1/(x-10)) + (1/(x-25))\nsol = solve(eq - 2, x)\nprint(sol)"
  },
  {
    "example_id": 172,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x*y*z**2 - 2\ndistance = sympy.sqrt(sympy.diff(eq, x)**2 + sympy.diff(eq, y)**2 + sympy.diff(eq, z)**2)\nmin_distance = solve(distance, z)\nprint(min_distance[0])"
  },
  {
    "example_id": 173,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a, x1, y1, x2, y2 = symbols('a x1 y1 x2 y2')\nparabola_y2 = 4*a*x1\nline_y2 = y1 - y2\nfocus = (x1 + x2)/2\ndistance = sqrt((x1 - focus)**2 + (y1 - focus)**2)\nc1 = (y2 - parabola_y2)/(2*a)\nc2 = (y2 - line_y2)/(2*a)\nc3 = (y2 - focus)/(2*a)\nexpression = c1*x1 + c2*x2 + c3*a\neq = expression - distance\nprint(eq)"
  },
  {
    "example_id": 174,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "384.0"
    ],
    "annotated_answers": [
      "384.0"
    ],
    "solution": "x = 2009\ny = 2007\nz = 2005\nw = 2003\nu = 2001\n\nprint((x**4 - 4*y**4 + 6*z**4 - 4*w**4 + u**4))"
  },
  {
    "example_id": 175,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1000.0"
    ],
    "solution": "m = symbols('m')\nn = symbols('n')\neq = m*n <= m + n\nsol = solve(eq, n)\nprint(sol)"
  },
  {
    "example_id": 176,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "561.0"
    ],
    "solution": "n = 32\na, b = symbols('a b')\na_sequence = [a, a + a**2, a + a**2 + a**3, a + a**2 + a**3 + a**4]\nb_sequence = [b, b + b**2, b + b**2 + b**3, b + b**2 + b**3 + b**4]\nfor i in range(2, n):\n    a_sequence.append(a_sequence[i-1] + a_sequence[i-1]**2/a_sequence[i-2])\n    b_sequence.append(b_sequence[i-1] + b_sequence[i-1]**2/b_sequence[i-2])\nprint(b_sequence[n]/a_sequence[n])"
  },
  {
    "example_id": 177,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "# Let x be a real number.\nx = Symbol('x')\n# Define the equation\neq = x**4 + a*x**3 + 3*x**2 + b*x + 1\n# Find the discriminant\nd = eq.discriminant()\n# Find the roots of the equation\nroots = solve(eq, x)\n# Find the largest possible value of a^2 + b^2\nlargest = Min(a**2 + b**2 for a, b in [(root.subs(x, 0), root.subs(x, 1)) for root in roots])\n# Print the largest value of a^2 + b^2\nprint(largest)"
  },
  {
    "example_id": 178,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1353433165.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "sum = 0\nfor a in range(1, 2011):\n    for b in range(a, 2011):\n        if (b - a) > 0:\n            sum += b - a\nprint(sum)"
  },
  {
    "example_id": 179,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "38.0",
      "4.0",
      "120.0",
      "3.0",
      "36.0",
      "2.0",
      "185.0",
      "1098.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import symbols, solve\nx = symbols('x')\neq = (1/(7 - x)*(1 + x)*(1 - x) + 3*x**2 - 18*x - 22/(x**2 - 1)*(x - 7) + 3/(x - 2))/(x - 1)*(x - 2)\nprint(solve(eq - 3, x))"
  },
  {
    "example_id": 180,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.095903274289385"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "import math\nx = math.log(10, 3)\nprint(x)"
  },
  {
    "example_id": 181,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "2.0",
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = symbols('x')\neq = (2*x**2 + x + 3)/(x**2 + x + 1) - (2*x + 1)/(x + 1)\neq = eq.expand()\nprint(eq)\nsolve(eq, x)"
  },
  {
    "example_id": 182,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "x = symbols('x')\nlog_2_log_8_x = log(log(8*x), 2)\nlog_8_log_2_x = log(log(2*x), 8)\nresult = (log_2_log_8_x)**2\nprint(result)"
  },
  {
    "example_id": 183,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "3.0",
      "3.0",
      "9.0",
      "2.0",
      "27.0",
      "2.0",
      "-4.0",
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "A, B, C, P, Q = symbols('A B C P Q')\n\n# Solve the first equation\nroots = solve(x**3 + P*x**2 + Q*x - 19, x)\n\n# Solve the second equation\nroots2 = solve(x**3 - A*x**2 + B*x - C, x)\n\n# Find the sum of the roots\nsum_of_roots = sum(roots) + sum(roots2)\n\n# Find the value of A + B + C\nA_plus_B_plus_C = sum_of_roots - 3\n\nprint(A_plus_B_plus_C)"
  },
  {
    "example_id": 184,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "5.0",
      "3.0",
      "2.0",
      "5.0",
      "-1.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a**3 - 2*a - 5\neq2 = b**3 - 2*b - 5\neq3 = c**3 - 2*c - 5\nprint(eq1, eq2, eq3)\nprint(solve([eq1, eq2, eq3], [a, b, c]))"
  },
  {
    "example_id": 185,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = Symbol('a')\neq = x**6 + 3*a*x**5 + (3*a**2 + 3)*x**4 + (a**3 + 6*a)*x**3 + (3*a**2 + 3)*x**2 + 3*a*x + 1\nsol = solve(eq, a)\nprint(sol[0])"
  },
  {
    "example_id": 186,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "-4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Find the common root\nroot = (2 - 2)**0.5\nprint(root)\n\n# Find the value of k\nk = (2 - 2)**2 - 4\nprint(k)"
  },
  {
    "example_id": 187,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "64.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "a = -2 - 2*sqrt(3)*I\nprint(abs(a**3))"
  },
  {
    "example_id": 188,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "a, b, c = symbols('a b c')\np = a*log(b/c)\np_value = solve(p - log(5), a)\nprint(p_value[0])"
  },
  {
    "example_id": 189,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "512.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "product = 10 * (4/3) * (6/4) * (8/5) * (10/6) * (12/7) * (14/8) * (16/9) * (18/10)\nprint(product)"
  },
  {
    "example_id": 190,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# Create symbols\nx, y, z = symbols('x y z')\n\n# Create equations\neq1 = x*y*z - 4\neq2 = x**3 + y**3 + z**3 - 4\neq3 = x**2*y + x*y**2 + x**2*z + x*z**2 + y*z**2 + y**2*z - 12\n\n# Find solution\nsol = solve([eq1, eq2, eq3], [x, y, z])\n\n# Calculate value of xy + yz + zx\nxy_yz_zx = sol[0][0]*sol[0][1] + sol[0][1]*sol[0][2] + sol[0][2]*sol[0][0]\nprint(xy_yz_zx)"
  },
  {
    "example_id": 191,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "5.0",
      "9.0",
      "3.0",
      "5.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = log(x-y, 6) + log(x+y, 6) - 2\neq2 = log(5*x, y) - 2\nsol = solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 192,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "100.0",
      "0.01",
      "0.02",
      "0.03",
      "0.04",
      "0.05",
      "0.06",
      "0.07",
      "0.08",
      "0.09"
    ],
    "annotated_answers": [
      "743.0"
    ],
    "solution": "r = symbols('r')\nsum_floor = 0\nfor i in range(1, 92):\n    sum_floor += sympy.floor(r + i/100)\nprint(sympy.floor(100*r) - sum_floor + 546)"
  },
  {
    "example_id": 193,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "from sympy import symbols, solve, sqrt\na, b, c, d = symbols('a b c d')\nexpr = (a + b + c + d) * (1/a + 1/b + 1/c + 1/d)\nprint(expr.subs({a: 1, b: 1, c: 1, d: 1}))"
  },
  {
    "example_id": 194,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.33748060995284"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z = symbols('z')\neq = z**4 - (64/5 - 48/5)*I\neq_sol = solve(eq, z)\nz_sol = eq_sol[0]\nprint(abs(z_sol))"
  },
  {
    "example_id": 195,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "a3, a2, a1 = symbols('a_3 a_2 a_1')\nx = symbols('x')\neq = 7*x**4 + a3*x**3 + a2*x**2 + a1*x - 14\nrational_roots = []\nfor i in range(1, 6):\n    if (i**4 + a3*i**3 + a2*i**2 + a1*i - 14) % i == 0:\n        rational_roots.append(i)\nprint(len(rational_roots))"
  },
  {
    "example_id": 196,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "999.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "n = 0\nwhile True:\n    r = (n+1)/1000\n    if r % 1 == 0:\n        print(n)\n        break\n    n += 1"
  },
  {
    "example_id": 197,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-50.0"
    ],
    "solution": "# Define the roots\nroots = symbols('r_1:99')\n\n# Define the equation\neq = sum(x**i for i in range(99)) + x + 1\n\n# Solve for the roots\nsolutions = solve(eq, roots)\n\n# Define the expression\nexpr = sum(r**2/(r + 1) for r in solutions)\n\n# Print the result\nprint(expr)"
  },
  {
    "example_id": 198,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0",
      "2.0",
      "10.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x*y + x*z + y*z - 1\neq_log = log(eq)\neq_log = eq_log.subs(x, Symbol('x', positive=True))\neq_log = eq_log.subs(y, Symbol('y', positive=True))\neq_log = eq_log.subs(z, Symbol('z', positive=True))\n\nmatrix = Matrix([[1, 1, 1],\n                 [1, x, y],\n                 [1, y, z]])\nmatrix = matrix.transpose()\nmatrix = matrix.inv()\n\nresult = 10*x**2 + 10*y**2 + z**2\nresult = result.subs(x, Symbol('x', positive=True))\nresult = result.subs(y, Symbol('y', positive=True))\nresult = result.subs(z, Symbol('z', positive=True))\n\nmin_result = Min(result, eq_log)\nprint(min_result)"
  },
  {
    "example_id": 199,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = symbols('x')\ne = x**2\no = x**2\nf = e + o\nf_2 = f.subs(x, 2)\nprint(f_2)"
  },
  {
    "example_id": 200,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "199.0"
    ],
    "solution": "# Number of real numbers x satisfying the equation x^2 + 10000 \\lfloor x \\rfloor = 10000x\n# is equal to the number of pairs (x, n) that satisfy x^2 + 10000n = 10000x\n# where n is an integer\n# \n# Let x = n + t, where t is a positive real number\n# We have x^2 = (n + t)^2 = n^2 + 2nt + t^2\n#                          = n^2 + 10000n + 10000t\n#                          = 10000n + 10000t\n#                          = 10000(n + t)\n# Substituting this into the original equation\n# we get 10000n + 10000t = 10000x\n# Solving for n and t, we get\n# n = (10000x - 10000t) / 10000\n# t = (10000x - n^2) / 10000\n# \n# Since n is an integer, we have n = (10000x - 10000t) / 10000 = k, where k is an integer.\n# Substituting this into the equation for t, we get\n# t = (10000x - n^2) / 10000 = (10000x - k^2) / 10000\n# \n# Substituting this into the equation for n, we get\n# n = (10000x - 10000t) / 10000 = (10000x - (10000x - k^2) / 10000 = k\n# \n# Therefore, the number of real numbers x that satisfy the equation is equal to the number of pairs (x, n) that satisfy x^2 + 10000n = 10000"
  },
  {
    "example_id": 201,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols('x')\npolynomial = 42 + 5*x**3 + 7*x**2 - 2*x + 1\nroots = sympy.roots(polynomial)\nprint(len(roots))"
  },
  {
    "example_id": 202,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "-7.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a = (14 - 8) / (7 - 5)\nb = 8 - a*5\nprint(a, b)"
  },
  {
    "example_id": 203,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "27.0",
      "2.0",
      "27.0",
      "1312.0",
      "2.0",
      "1755904.0"
    ],
    "annotated_answers": [
      "-80.0"
    ],
    "solution": "c = Symbol('c')\nx = symbols('x')\neq = x**3 + 8*x**2 - 4*x + c\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 204,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "1009.0",
      "3.0",
      "1009.0",
      "8.0",
      "2018.0",
      "7.0",
      "1018081.0",
      "6.0"
    ],
    "annotated_answers": [
      "8080.0"
    ],
    "solution": "x, y = symbols('x y')\nf = (x + 1/y) * (x + 1/y + 2018) + (y + 1/x) * (y + 1/x + 2018)\nf_derivative = f.diff(x)\nsol = solve(f_derivative, y)\nprint(Min(f.subs(y, sol[0])))"
  },
  {
    "example_id": 205,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-264.0213122316308"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "x = Symbol('x')\nxn = [3]\nfor i in range(1, 12345):\n    xn.append(1/(1-xn[i-1]) + xn[i-1])\nx_12345 = xn[-1]\nprint(x_12345)"
  },
  {
    "example_id": 206,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "import math\n\na = 2\nb = 16\nc = 2\nd = 2\n\nside_length = (a*math.sqrt(b) - c)/d\n\nprint(side_length)"
  },
  {
    "example_id": 207,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.5"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "S = 1/2\nprint(S)"
  },
  {
    "example_id": 208,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "-63.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n\n# Consecutive Arithmetic Sequence\nabc = 17955\na_b_c = [a, b, c]\nfor i in range(len(a_b_c)):\n    a_b_c[i] = a_b_c[i]\n\n# Consecutive Geometric Sequence\nab_bc_ca = [3*a + b, 3*b + c, 3*c + a]\nfor i in range(len(ab_bc_ca)):\n    ab_bc_ca[i] = ab_bc_ca[i]\n\n# Find a + b + c\nab_bc_ca_sum = 0\nfor i in range(len(ab_bc_ca)):\n    ab_bc_ca_sum += ab_bc_ca[i]\n\nprint(ab_bc_ca_sum)"
  },
  {
    "example_id": 209,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# The sum of the numbers at the ends of the line segments\n# is an arithmetic sequence, so the middle term is the average\n# of the two end terms.\na, b, c, d, e = symbols('a b c d e')\nseq = [a, b, c, d, e]\n\n# The sum of the line segments is 30.\nsum_seq = sum(seq)\n\n# The sum of the line segments is 30, so the average is 30/5 = 6.\navg = sum_seq/5\n\n# The middle term is 6.\nprint(avg)"
  },
  {
    "example_id": 210,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "1.0",
      "6.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "9.0",
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x + y + z - 6\neq2 = 1/x + 1/y + 1/z - 2\nsol1 = solve([eq1, eq2], [x, y, z])\nprint(sol1[0][0] + sol1[0][1]/sol1[0][2] + sol1[0][2]/sol1[0][1])"
  },
  {
    "example_id": 211,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import symbols, solve\nfrom sympy.abc import x, y\n\na, b, h, k = symbols('a b h k')\n\neq = (x - h)**2/a**2 - (y - k)**2/b**2 - 1\n\nsol = solve(eq, (x, y))\n\nprint(sol[0][0] + sol[0][1] + a + b)"
  },
  {
    "example_id": 212,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-27.0",
      "2.0",
      "2950.0",
      "27.0",
      "2.0",
      "1098500.0"
    ],
    "annotated_answers": [
      "150.0"
    ],
    "solution": "c = Symbol('c')\nroots = solve(x**3 - 10*x**2 + 55*x - c, x)\nroot_product = roots[0]*roots[1]\nprint(root_product)"
  },
  {
    "example_id": 213,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0",
      "5.0",
      "6.0",
      "7.0",
      "16.0",
      "17.0",
      "18.0",
      "19.0",
      "20.0"
    ],
    "annotated_answers": [
      "340.0"
    ],
    "solution": "n = 1\nwhile n < 1000:\n    if int(log(n, 2)) % 2 == 0:\n        print(n)\n    n += 1"
  },
  {
    "example_id": 214,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "sum = 0\nfor n in range(-10, 20):\n    if n < 0:\n        sum += -1\n    elif n == 0:\n        sum += 0\n    else:\n        sum += 1\nprint(sum)"
  },
  {
    "example_id": 215,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "from sympy import expand_mul, factorial, binomial\nfrom sympy.abc import x\n\ndef find_k(n):\n    return expand_mul((x + 3)**n).coeff(x, n)\n\nprint(find_k(50))"
  },
  {
    "example_id": 216,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.605551275463989",
      "2.0",
      "27.51363298439521",
      "3.0",
      "27.51363298439521",
      "4.0",
      "22.20360331117452",
      "80.83642055542893"
    ],
    "annotated_answers": [
      "40.0"
    ],
    "solution": "import numpy as np\n\ndef distance(x1,y1,x2,y2):\n    return np.sqrt((x2-x1)**2 + (y2-y1)**2)\n\ndef main():\n    x1 = 0\n    y1 = 0\n    x2 = -3\n    y2 = 2\n    point1 = (x1,y1)\n    point2 = (x2,y2)\n    distance1 = distance(point1[0], point1[1], point2[0], point2[1])\n    print(\"Distance1:\", distance1)\n\n    x1 = 6\n    y1 = -24\n    x2 = -3\n    y2 = 2\n    point1 = (x1,y1)\n    point2 = (x2,y2)\n    distance2 = distance(point1[0], point1[1], point2[0], point2[1])\n    print(\"Distance2:\", distance2)\n\n    x1 = 6\n    y1 = -24\n    x2 = -3\n    y2 = 2\n    point1 = (x1,y1)\n    point2 = (x2,y2)\n    distance3 = distance(point1[0], point1[1], point2[0], point2[1])\n    print(\"Distance3:\", distance3)\n\n    x1 = -6\n    y1 = 24\n    x2 = -3\n    y2 = 2\n    point1 = (x1,y1)\n    point2 = (x2,y2)\n    distance4 = distance(point1[0], point1[1], point2[0], point2[1])\n    print(\"Distance4:\", distance4)\n\n    distance_sum = distance1 + distance2 + distance3 + distance4\n    print(\"Distance Sum:\", distance_sum)\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 217,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0",
      "2.0",
      "1.0",
      "3.0",
      "6.0",
      "73.0",
      "1583.0",
      "1.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "73.0"
    ],
    "solution": "from sympy import symbols, solve, factor\nx = symbols('x')\nroots = solve(x**3 + 9*x**2 - 9*x - 8, x)\nprint(factor(roots[0]*roots[1]*roots[2]))"
  },
  {
    "example_id": 218,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "7.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "def factor(k):\n    Q1 = k**2 + (k - 29)*k - k\n    Q2 = 2*k**2 + (2*k - 43)*k + k\n    P = Q1*Q2\n    factors = []\n    for i in range(1, k):\n        if P % i == 0:\n            factors.append(i)\n    return factors\n\nfor k in range(1, 100):\n    factors = factor(k)\n    if len(factors) == 3:\n        print(k)"
  },
  {
    "example_id": 219,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "3.0",
      "2.0",
      "2.0",
      "48.0",
      "49.0"
    ],
    "annotated_answers": [
      "97.0"
    ],
    "solution": "n = Symbol('n')\ni = Symbol('i', real=True)\n\n# define the equation\neq = i + 2*i**2 + 3*i**3 + n*i**n\n\n# solve for n\nn_value = solve(eq - 48 - 49*I, n)\n\n# print the value of n\nprint(n_value[0])"
  },
  {
    "example_id": 220,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "6.0",
      "8.0",
      "10.0"
    ],
    "annotated_answers": [
      "61.0"
    ],
    "solution": "a = [1, 2, 3, 4, 5]\nb = [1, 2, 3, 4, 5]\nc = [x + y for x, y in zip(a, b)]\nprint(c)"
  },
  {
    "example_id": 221,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "5.0",
      "2.0",
      "21.0",
      "2.0",
      "21.0",
      "2.0",
      "5.0",
      "2.0",
      "-5.0",
      "4.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "from sympy import roots\nfrom sympy.abc import x\n\nexpression = x**6 + x**4 - 115*x**3 + x**2 + 1\nprint(roots(expression, multiple=True))"
  },
  {
    "example_id": 222,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "401.0"
    ],
    "solution": "n = 10\nf = lambda x: 6*x - 2005\nwhile not f(n) % 1 == 0:\n    n += 1\nprint(n)"
  },
  {
    "example_id": 223,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "16.0",
      "4.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\nexpr = (1/a + 1/b + 4/c + 16/d)\ncons = a + b + c + d - 1\nsolve(cons, a, b, c, d)\nmin_expr = Min(expr)\nprint(min_expr)"
  },
  {
    "example_id": 224,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\n\ndef g(x):\n    return x**2 - 11*x + 30\n\ndef f(x):\n    return g(g(g(x)))\n\nprint(f(10**100))"
  },
  {
    "example_id": 225,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "x = Symbol('x')\nf = x + 3\nf_val = f.subs(x, 2)\nf_val2 = f.subs(x, 6)\ndifference = f_val2 - f_val\nprint(difference)\n\n\nx = Symbol('x')\nf = x + 3\nf_val = f.subs(x, 2)\nf_val2 = f.subs(x, 12)\ndifference = f_val2 - f_val\nprint(difference)"
  },
  {
    "example_id": 226,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "f = Function('f')\nx, y = symbols('x y')\neq = f(x*y) - f(x)*f(y) - 2\neq = eq.expand()\neq = eq.subs(f(x), f(x))\neq = eq.subs(f(y), f(y))\neq = eq.simplify()\nsol = solve(eq, f(x))\nprint(sol)"
  },
  {
    "example_id": 227,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0",
      "0.0",
      "0.0",
      "1.0",
      "0.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "for n in range(1, 10):\n    for i in range(n):\n        a = (-1)**i\n        if a == 1:\n            x = 0\n        else:\n            x = 1\n        expression = x**(n-i)\n        print(expression)"
  },
  {
    "example_id": 228,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "from sympy import *\na, b, c, d, e = symbols('a, b, c, d, e')\nexpr = (a**3/(a - b)*(a - c)*(a - d)*(a - e) +\n        b**3/(b - a)*(b - c)*(b - d)*(b - e) +\n        c**3/(c - a)*(c - b)*(c - d)*(c - e) +\n        d**3/(d - a)*(d - b)*(d - c)*(d - e) +\n        e**3/(e - a)*(e - b)*(e - c)*(e - d))\nprint(expr)"
  },
  {
    "example_id": 229,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "3.0",
      "4.0",
      "5.0",
      "0.0",
      "5.0",
      "1.0",
      "25.0"
    ],
    "annotated_answers": [
      "254.0"
    ],
    "solution": "# Initialize variables\na0, a1, a2, a3, a4, a5 = symbols('a_0 a_1 a_2 a_3 a_4 a_5')\nx = symbols('x')\nQ = a0 + a1*x + a2*x**2 + a3*x**3 + a4*x**4 + a5*x**5\n\n# Find the value of Q(1)\nprint(Q.subs(x, 1))\n\n# Find the value of Q(5)\nprint(Q.subs(x, 5))\n\n# Find the value of Q(6)\nprint(Q.subs(x, 6))"
  },
  {
    "example_id": 230,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "3.0",
      "0.333333333333333",
      "1.0",
      "5.0",
      "2.0",
      "2.0",
      "3.0",
      "0.333333333333333"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = symbols('x')\nexpr = (5/((sqrt(3) + sqrt(2))**(1/3)) + (1/((sqrt(3) - sqrt(2))**(1/3))))/2\na = expr.as_base_exp()[0]\nb = expr.as_base_exp()[1]\na, b = solve([a - b, a + b], [a, b])\nprint(a + b)"
  },
  {
    "example_id": 231,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "2.0",
      "11.0",
      "0.0"
    ],
    "annotated_answers": [
      "112.0"
    ],
    "solution": "a0, a1, a2 = symbols('a_0 a_1 a_2')\n\na = [a0, a1, a2]\n\nfor n in range(3, 2023):\n    a.append(a[n-1] + a[n-2] + a[n-3])\n    a[n] %= 11\n\nprint(a[2018] * a[2020] * a[2022])"
  },
  {
    "example_id": 232,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x**2 + y**2\neq2 = 4*x*y\neq = Eq(eq1, eq2)\nsol = solve(eq, (x, y))\nprint(sol)"
  },
  {
    "example_id": 233,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 0\ng = 0\nfor n in range(4):\n    a += 1\n    g *= 2\nprint(a+g)"
  },
  {
    "example_id": 234,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0",
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x, y = symbols('x y')\neq = (x + 3)*(y - 5)\neq_solved = solve(eq, x)\nx_value = eq_solved[0]\nx_square = x_value**2\nx_square_plus_y_square = x_square + y**2\nx_square_plus_y_square_min = Min(x_square_plus_y_square, 0)\nprint(x_square_plus_y_square_min)"
  },
  {
    "example_id": 235,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "164.0",
      "1.0",
      "4.0",
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "8.0",
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "# Define the complex number\nw = -1 + 4*I\n\n# Define the expression\nexpr = w**2 + 2*w - 8\n\n# Print the result\nprint(abs(expr))"
  },
  {
    "example_id": 236,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0",
      "63.0"
    ],
    "annotated_answers": [
      "154.0"
    ],
    "solution": "def elite_status(N):\n    return 2**(1 + math.floor(math.log(N - 1, 2))) - N\n\n# find the smallest possible value of N\nN_min = 2**(1 + math.floor(math.log(19 - 1, 2)))\nprint(N_min)\n\n# find the sum of the two smallest possible values of N\nN1 = N_min\nN2 = N_min - 1\nprint(N1 + N2)"
  },
  {
    "example_id": 237,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "256.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "from sympy import floor\n\ndef area_of_region(x, y):\n    return floor(x) * floor(y)\n\nprint(area_of_region(16, 16))"
  },
  {
    "example_id": 238,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "5.0"
    ],
    "annotated_answers": [
      "-5.0"
    ],
    "solution": "x = symbols('x')\nC, D = symbols('C D')\nexpr = (C/(x-3) + D/(x+8) - (4*x-23)/(x**2+5*x-24))\nsolve_expr = solve(expr, [C, D])\nprint(solve_expr)"
  },
  {
    "example_id": 239,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "3.0",
      "4.0",
      "3.0",
      "6.0",
      "14.0",
      "28.0",
      "3.0",
      "4.0",
      "3.0",
      "2.0",
      "3.0",
      "4.0",
      "3.0",
      "3.0",
      "2.0",
      "7.0"
    ],
    "annotated_answers": [
      "175.0"
    ],
    "solution": "x, y = symbols('x y')\neq = 3*x**2 - 18*x + 4*y**2 - 32*y + 91\n\ndef func(x, y):\n    return x**2 + y**2 + 2*x*y - 14*x - 14*y + 49\n\nsolve = sympy.solve(eq, (x, y))\nprint(func(solve[0][0], solve[0][1]))"
  },
  {
    "example_id": 240,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2007.0"
    ],
    "solution": "def f(x):\n    if 0 <= x <= 1/2:\n        return 2*x\n    else:\n        return 2 - 2*x\n\ndef f_n(x):\n    return f(f(x))\n\ndef f_n_plus_1(x):\n    return f(f_n(x))\n\ndef count_points(n):\n    count = 0\n    for x in [0, 1]:\n        if f_n_plus_1(x) == 1/2:\n            count += 1\n    return count\n\nprint(count_points(2005))"
  },
  {
    "example_id": 241,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "# Solution 1:\n# x^2 - ax + 24 = (x - 3)(x - 8)\n# x^2 - bx + 36 = (x - 6)(x - 12)\n# roots of first polynomial are 3 and 8\n# roots of second polynomial are 6 and 12\n# so, the number of ordered pairs (a,b) is 2\nprint(2)\n\n# Solution 2:\n# x^2 - ax + 24 = (x - 3)(x - 8)\n# x^2 - bx + 36 = (x - 6)(x - 12)\n# roots of first polynomial are 3 and 8\n# roots of second polynomial are 6 and 12\n# so, the number of ordered pairs (a,b) is 2\nprint(2)"
  },
  {
    "example_id": 242,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = 3\nprint(n)"
  },
  {
    "example_id": 243,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "13.0",
      "2.0",
      "11.0",
      "23.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "y = symbols('y')\neq = 3*y**3 - 13*y**2 + 11*y + 23\nquotient = eq / (3*y + 2)\nprint(quotient)"
  },
  {
    "example_id": 244,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a + b + c\neq2 = a**2 + b**2 + c**2\neq3 = a**4 + b**4 + c**4\nsol = solve([eq1, eq2], [a, b, c])\na, b, c = sol[0]\nprint(eq3.subs(a, a).subs(b, b).subs(c, c))"
  },
  {
    "example_id": 245,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "125.0",
      "5.0",
      "78125.0",
      "-125.0",
      "5.0",
      "78125.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x = symbols('x')\na, c = symbols('a c')\nf = x**7 + a*x**3 + c*x\nf_val = f.subs(x, 5)\nf_val_minus = f.subs(x, -5)\nprint(f_val)\nprint(f_val_minus)"
  },
  {
    "example_id": 246,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.732050807568877",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "a = Symbol('a')\nb = Symbol('b')\nc = Symbol('c')\nd = Symbol('d')\n\nexpr = a + b*I + c*I**2 + d*I**3\n\nresult = expr.subs({a: -1, b: 1, c: -sqrt(3), d: 0})\n\nprint(result.evalf())"
  },
  {
    "example_id": 247,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "10.0",
      "12.0",
      "8.0",
      "18.0",
      "6.0",
      "18.0",
      "4.0",
      "12.0",
      "2.0",
      "3.0",
      "8.0",
      "2.0",
      "6.0",
      "4.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "from sympy import *\nx = Symbol('x', positive=True)\ne = (x + 1/x)**6 - (x**6 + 1/x**6) - 2\ne = e/(x + 1/x)**3 + (x**3 + 1/x**3)\nprint(e.simplify().diff(x).simplify())"
  },
  {
    "example_id": 248,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x, y = symbols('x y')\nf = x*sqrt(1 - y**2) + y*sqrt(1 - x**2)\nprint(f)"
  },
  {
    "example_id": 249,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "55.0",
      "11.0",
      "2.0",
      "484.0",
      "11.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "# define symbols\nx, y = symbols('x y')\n\n# define hyperbola\neq = x**2/50 - y**2/22 - 2\n\n# find distance between foci\nfocus_distance = sympy.sqrt(sympy.solve(eq, x)[0])\nprint(focus_distance)"
  },
  {
    "example_id": 250,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "# Slope of the common chord\nslope = (sqrt((3-3)**2 + (-28-(-28))**2) - sqrt((3-(-3))**2 + (-28-(-28))**2)) / (3-(-3))\nprint(slope)"
  },
  {
    "example_id": 251,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "25.0"
    ],
    "annotated_answers": [
      "243.0"
    ],
    "solution": "f = lambda x: x**2\nprint(f(2))\nprint(f(5))"
  },
  {
    "example_id": 252,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "3.0",
      "2.0",
      "-2.0",
      "2.0",
      "1.0",
      "2.0",
      "6.0",
      "3.0",
      "-4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a**2 - b*c\neq2 = a + b + c - a*b*c\neqs = [eq1, eq2]\nsol = solve(eqs, [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 253,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "from math import pi\n\ndef inscribed_rectangle(r):\n    \"\"\"\n    Find the largest possible area of a rectangle inscribed in a unit circle.\n\n    Parameters\n    ----------\n    r : float\n        The radius of the unit circle.\n\n    Returns\n    -------\n    area : float\n        The largest possible area of the rectangle.\n\n    \"\"\"\n    # Find the length of one side of the rectangle.\n    a = 2*r\n\n    # Find the other side of the rectangle.\n    b = a/2\n\n    # Find the area of the rectangle.\n    area = a*b\n\n    return area\n\n# Find the largest possible area of the rectangle.\nprint(inscribed_rectangle(1))"
  },
  {
    "example_id": 254,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "819.0"
    ],
    "solution": "# Define variables\na_1, a_2, a_3, a_4, a_5 = symbols('a_1 a_2 a_3 a_4 a_5')\n\n# Define delta_A\ndelta_A = [a_2 - a_1, a_3 - a_2, a_4 - a_3, a_5 - a_4]\n\n# Define delta_delta_A\ndelta_delta_A = [a_3 - a_2, a_4 - a_3, a_5 - a_4]\n\n# Define delta_delta_delta_A\ndelta_delta_delta_A = [a_4 - a_3, a_5 - a_4]\n\n# Find a_1\na_1 = solve(a_2 - a_1 + a_3 - a_2 + a_4 - a_3 + a_5 - a_4, a_1)\n\n# Find a_2\na_2 = solve(a_3 - a_2 + a_4 - a_3 + a_5 - a_4, a_2)\n\n# Find a_3\na_3 = solve(a_4 - a_3 + a_5 - a_4, a_3)\n\n# Find a_4\na_4 = solve(a_5 - a_4, a_4)\n\n# Find a_5\na_5 = solve(a_5, a_5)\n\n# Print a_1\nprint(a_1)"
  },
  {
    "example_id": 255,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "9.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "def is_solution(x):\n    return x**5 == x**4 + 72*x**3\n\ndef find_solutions():\n    for x in range(0, 100):\n        if is_solution(x):\n            print(x)\n\nfind_solutions()"
  },
  {
    "example_id": 256,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "144.0",
      "3.0",
      "3.0",
      "54.0",
      "-4.0",
      "144.0",
      "3.0",
      "3.0",
      "108.0",
      "5184.0"
    ],
    "annotated_answers": [
      "48.0"
    ],
    "solution": "a = symbols('a')\nx = symbols('x')\neq = x**3 - 12*x**2 + a*x - 64\nroots = solve(eq, x)\nprint(roots)"
  },
  {
    "example_id": 257,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "126.0"
    ],
    "annotated_answers": [
      "504.0"
    ],
    "solution": "a = 0\nfor i in range(1, 14):\n    if i % 2 == 0:\n        a = a + 1\n    else:\n        a = a * 2\nprint(a)"
  },
  {
    "example_id": 258,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# define the circle equation\nx, y = symbols('x y')\ncircle = x**2 + y**2 - 2\n\n# define the parabola equation\nparabola = y**2 - 8*x\n\n# find the tangent points\ntangent_points = solve([circle.diff(x), parabola.diff(x)], [x, y])\n\n# find the area of the quadrilateral\narea = 0\nfor tp in tangent_points:\n    area += abs(tp[0] - tp[1])\nprint(area)"
  },
  {
    "example_id": 259,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import symbols, Max\na, b = symbols('a b')\nexpr = (a + b)/(a*b + 1)\nresult = Max(expr, a, b)\nprint(result)"
  },
  {
    "example_id": 260,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "225.0"
    ],
    "solution": "from itertools import combinations\n\ndef get_set(i, j, k):\n    return set(map(lambda x: x**i * (1 + x)**j, range(k+1)))\n\ndef find_pairs(k):\n    pairs = 0\n    for i, j in combinations(range(k+1), 2):\n        if len(get_set(i, j, k)) == 2:\n            pairs += 1\n    return pairs\n\nn = 20\npairs = 0\nfor k in range(n):\n    pairs += find_pairs(k)\nprint(pairs)"
  },
  {
    "example_id": 261,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "32.0"
    ],
    "solution": "P, Q, R, S = symbols('P Q R S')\neq = x**5 - 40*x**4 + P*x**3 + Q*x**2 + R*x + S\nroots = solve(eq, x)\nreciprocals = [1/root for root in roots]\nsum_reciprocals = sum(reciprocals)\nprint(sum_reciprocals)"
  },
  {
    "example_id": 262,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "1.0",
      "2.0",
      "3.0",
      "5.0",
      "8.0",
      "13.0",
      "21.0",
      "34.0",
      "88.0"
    ],
    "annotated_answers": [
      "913.0"
    ],
    "solution": "f = [0, 1, 1]\nfor i in range(3, 13):\n    f.append(f[-1] + f[-2])\nprint(f[:10])\nprint(sum(f[:10]))"
  },
  {
    "example_id": 263,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "5.0",
      "1.0",
      "5.0",
      "2.0",
      "17.0",
      "4.0",
      "4.0",
      "5.0",
      "1.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq1 = a + b + c - 4\neq2 = 1/a + 1/b + 1/c - 5\neqs = [eq1, eq2]\nsol = solve(eqs, [a, b, c])\nprint(sol)"
  },
  {
    "example_id": 264,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "255.0"
    ],
    "solution": "n = 0\nwhile True:\n    n += 1\n    x = sum(range(1, n+1, 2))\n    y = sum(range(1, n+1, 2)) + 212\n    if x + 212 == y:\n        print(n)\n        break"
  },
  {
    "example_id": 265,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "17.0"
    ],
    "solution": "x = symbols('x')\nf = Max(abs(x + 15), abs(x + 12), abs(x + 8), abs(x - 1), abs(x - 3), abs(x - 19))\nf_min = f.subs(x, -10)\nprint(f_min)"
  },
  {
    "example_id": 266,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-256.0"
    ],
    "annotated_answers": [
      "-256.0"
    ],
    "solution": "a, b = symbols('a b')\neq = 8*x**3 + 4*a*x**2 + 2*b*x + a\nroots = solve(eq, x)\nlog_roots = [log(root, 2) for root in roots]\nsum_log_roots = sum(log_roots)\na_value = solve(sum_log_roots - 5, a)\nprint(a_value[0])"
  },
  {
    "example_id": 267,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "6.0",
      "7.0",
      "6.0",
      "5.0",
      "7.0",
      "7.0",
      "5.0",
      "6.0",
      "7.0",
      "6.0",
      "5.0"
    ],
    "annotated_answers": [
      "104.0"
    ],
    "solution": "result = (sqrt(5)+sqrt(6)+sqrt(7)) * (sqrt(5)-sqrt(6)+sqrt(7)) * (sqrt(5)+sqrt(6)-sqrt(7)) * (sqrt(5)-sqrt(6)-sqrt(7))\nprint(result)"
  },
  {
    "example_id": 268,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "4.0",
      "3.0",
      "4.0",
      "4.0",
      "4.0",
      "5.0",
      "4.0"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "w1, w2, w3, w4, w5 = symbols('w1 w2 w3 w4 w5')\neq = (w1 - w2) + (w1 - w3) + (w1 - w4) + (w1 - w5)\nsol = solve(eq, w1)\nprint(sol[0])"
  },
  {
    "example_id": 269,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, b, c = symbols('a b c')\np = (x - b)*(x - c)/(a - b)(a - c) + (x - a)*(x - c)/(b - a)(b - c) + (x - a)*(x - b)/(c - a)(c - b)\ndeg = sympy.degree(p)\nprint(deg)"
  },
  {
    "example_id": 270,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "31.0",
      "2.0",
      "5.0",
      "61.0",
      "2.0",
      "5.0",
      "59.0",
      "2.0",
      "5.0"
    ],
    "annotated_answers": [
      "990.0"
    ],
    "solution": "n = 1000\nA = sum(floor(log(i+1, 2)) for i in range(n))\nB = sum(log(i+1, 2) for i in range(n))\nprint(A-B)"
  },
  {
    "example_id": 271,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0",
      "3.0",
      "2.0",
      "4.0",
      "1.0",
      "4.0",
      "2.0",
      "4.0",
      "3.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "for a in range(1, 10):\n    for b in range(1, 10):\n        if a*b > 0 and a**2 > 4*b:\n            print(f\"For a = {a}, b = {b}, the domain and range of f are the same set\")"
  },
  {
    "example_id": 272,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1995.0",
      "1.0",
      "2.0",
      "2.0",
      "1995.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "3980025.0"
    ],
    "solution": "x = Symbol('x')\nexpr = sqrt(1995)*x**log(x, 1995) - x**2\nroots = solve(expr, x)\npositive_roots = [root for root in roots if root.is_positive]\nprint(positive_roots)"
  },
  {
    "example_id": 273,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "9.0",
      "2.0",
      "3.0",
      "1.0",
      "27.0",
      "3.0",
      "9.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x, y = symbols('x y')\neq = y - (27*x**2 + 9*x + 3)/(27*x**3 + 9*x**2 + 3*x + 1)\nprint(solve(eq, y))"
  },
  {
    "example_id": 274,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "211.0"
    ],
    "annotated_answers": [
      "898.0"
    ],
    "solution": "n = 531\nx_1 = 211\nx_2 = 375\nx_3 = 420\nx_4 = 523\nx = [x_1, x_2, x_3, x_4]\nfor i in range(5, n+1):\n    x.append(x[-1] - x[-2] + x[-3] - x[-4])\nx_sum = sum(x)\nprint(x_sum)"
  },
  {
    "example_id": 275,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "289.0",
      "17.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 17*17\nb = 17\nprint(a,b)"
  },
  {
    "example_id": 276,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "2.0",
      "-1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = symbols('x')\neq = x**4 - 2*x**2 - 7\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 277,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "29.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a = 21 - 20j\nb = 29\nexpression = abs(a)\nprint(expression)"
  },
  {
    "example_id": 278,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "327680.0"
    ],
    "annotated_answers": [
      "327680.0"
    ],
    "solution": "n = symbols('n', integer=True)\na_n = 4*n**3 + 6*n**2 + 4*n + 1\nsum = 0\nfor i in range(8, 24):\n    sum += a_n.subs(n, i)\nprint(sum)"
  },
  {
    "example_id": 279,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = Symbol('a', positive=True)\nroots = solve(x**3 + a*x**2 + a*x + 1, x)\n\n# find the smallest value of a\nmin_a = Min(a, 0, evaluate=False)\nprint(min_a)"
  },
  {
    "example_id": 280,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "18.0",
      "20.0"
    ],
    "annotated_answers": [
      "363.0"
    ],
    "solution": "a, b = symbols('a b')\na_15 = a**15\nb_11 = b**11\na_9 = a**9\nratio = a_9/a_15\nratio_b = b_11/b\nratio_b_a = ratio_b/ratio\na_9_b_11 = a_9/b_11\na_9_b_11_ratio_b_a = a_9_b_11/ratio_b_a\nb_11_ratio_b_a = b_11/ratio_b_a\nb_11_ratio_b_a_a_15 = b_11_ratio_b_a/a_15\na_9 = a_9_b_11_ratio_b_a*b_11_ratio_b_a_a_15\nprint(a_9)"
  },
  {
    "example_id": 281,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\nremainder = sympy.rem(x**100, x**8 - x**6 + x**4 - x**2 + 1)\nprint(remainder)"
  },
  {
    "example_id": 282,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "3.0",
      "10.0",
      "9.0",
      "307.0",
      "432.0",
      "126249.0",
      "432.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\neq1 = (2*x**2 - 3*x)/(x**2 - x) + 5*x - 11\neq2 = 3*x**2 + 5*x + 2/(x**2 - 1)\nsol = solve(eq1 - eq2, x)\nprint(sol)"
  },
  {
    "example_id": 283,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\ncos_x = sympy.cos(x)\nsin_x = sympy.sin(x)\ntan_x = sympy.tan(x)\ncos_x_3 = cos_x**3\ncos_x_2 = cos_x**2\nans = cos_x_3 + cos_x_2\nprint(ans.simplify())"
  },
  {
    "example_id": 284,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "12.0",
      "1250.0",
      "12.0",
      "12.0",
      "1250.0",
      "12.0",
      "12.0",
      "1250.0"
    ],
    "annotated_answers": [
      "270.0"
    ],
    "solution": "log12_162, log12_x, log12_y, log12_z, log12_1250 = symbols('log12_162 log12_x log12_y log12_z log12_1250')\n\neq1 = log12_162 - log12_1250\neq2 = log12_x - log12_1250\neq3 = log12_y - log12_1250\neq4 = log12_z - log12_1250\n\neqs = [eq1, eq2, eq3, eq4]\n\nsol = solve(eqs, [log12_x, log12_y, log12_z])\nprint(sol)"
  },
  {
    "example_id": 285,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y = symbols('x y')\neq = x**2 + y**2 - 1\nsolve(eq, [x, y])\nmax_value = (x + y)**2\nprint(max_value)"
  },
  {
    "example_id": 286,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "7.0",
      "2.0",
      "2.0",
      "1.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "z1, z2 = symbols('z1 z2')\nz2_over_z1 = z2/z1\npure_imaginary = z2_over_z1.as_real_imag()[1] == 0\ntwo_z1_neq_7z2 = z1**2!= 7*z2**2\n\ncondition = pure_imaginary & two_z1_neq_7z2\n\nresult = abs(2*z1 + 7*z2)/abs(2*z1 - 7*z2)\nprint(result)"
  },
  {
    "example_id": 287,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Number of polynomials of degree 4 with real coefficients that satisfy\n# P(x^2) = P(x) P(-x)\n# 4 choices for the constant term, 3 choices for the linear term,\n# 2 choices for the quadratic term, 1 choice for the cubic term,\n# and 0 choices for the fourth-degree term.\nprint(4*3*2*1*0)"
  },
  {
    "example_id": 288,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "80.0"
    ],
    "annotated_answers": [
      "88.0"
    ],
    "solution": "f = lambda x: x*(x + 2)\nprint(f(1))\nprint(f(8))"
  },
  {
    "example_id": 289,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "135.0",
      "2.0",
      "27.0",
      "29.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import *\nx = symbols('x')\nexpr = x**3 + 3*x + 5\nprint(solve(expr,x))"
  },
  {
    "example_id": 290,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "28.0"
    ],
    "annotated_answers": [
      "28.0"
    ],
    "solution": "a = 7j\nb = 4j\nprint(abs(a*b))"
  },
  {
    "example_id": 291,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "x_min = 1\nprint(x_min)"
  },
  {
    "example_id": 292,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = 1\ny = 2\na = 1\nb = 1\nc = 0\nexpression = a*x + b*y + c*x*y\nprint(expression)"
  },
  {
    "example_id": 293,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-10.0",
      "9.0",
      "151.0",
      "2.0",
      "2.0",
      "216.0",
      "1085.0",
      "2.0",
      "3.0",
      "1296.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "# Initialize variables\nk = symbols('k', real=True)\n\n# Define the sum\nsum = (k - 3)/(k*(k**2 - 1))\n\n# Evaluate the sum\nresult = sum.series(k, 2, 100)\nprint(result)"
  },
  {
    "example_id": 294,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "31464.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "# compute the sum of the coefficients of P(x)\n# assuming P(x) is a polynomial in x\nsum = 0\nfor i in range(23):\n    sum += (23-i)*(-18+108+24)\nprint(sum)"
  },
  {
    "example_id": 295,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "6.0",
      "-3.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "3.0",
      "-9.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a2, a1, a0, b = symbols('a2 a1 a0 b')\n\n# Find the possible rational roots\nrational_roots = solve(2*x**3 + a2*x**2 + a1*x - 4, x)\n\n# Print the possible rational roots\nprint(rational_roots)"
  },
  {
    "example_id": 296,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "a, b = symbols('a b')\nc = symbols('c')\n\n# First equation\nx = c\neq1 = x**2 + a*x + b\n\n# Second equation\nx = c**2 - 2\neq2 = x**2 + a*x + b\n\n# Solve the system of equations\nsolutions = solve((eq1, eq2), (a, b))\nprint(solutions)"
  },
  {
    "example_id": 297,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.437328012689123"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "# Define the function\nf = lambda n: (n + 1)/(n*(n + 2))\n\n# Define the summation\nsum_ = sum(f(n) for n in range(1, 100))\n\n# Print the sum\nprint(sum_)"
  },
  {
    "example_id": 298,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "39.0",
      "2.0",
      "13.0",
      "43.0",
      "2.0"
    ],
    "annotated_answers": [
      "440.0"
    ],
    "solution": "# a is the positive integer\na = 3\n\n# c is the positive integer\nc = 2\n\n# P(x) is the polynomial\nP = 2*x**3 - 2*a*x**2 + (a**2 - 81)*x - c\n\n# The roots of P(x) are the solutions of P(x) = 0\nroots = solve(P, x)\n\n# There are two possible values of c\nc1 = roots[0]\nc2 = roots[1]\n\n# The sum of the two possible values of c is 12\nprint(c1 + c2)"
  },
  {
    "example_id": 299,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "from sympy import Symbol\nfrom sympy.abc import r,s,t\n\nx = Symbol('x')\nexpression = r**2*s**2 + s**2*t**2 + t**2*r**2\n\nprint(expression)"
  },
  {
    "example_id": 300,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "5.0",
      "2.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "a = 5 + sqrt(3)\nprint(a*a.conjugate())"
  },
  {
    "example_id": 301,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.61"
    ],
    "solution": "a = [2.56, 2.61, 2.65, 2.71, 2.79, 2.82, 2.86]\nA = [round(a[i]) for i in range(len(a))]\nprint(A)\nprint(sum(A) - sum(a))"
  },
  {
    "example_id": 302,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "# define symbols\nF1, F2, d = symbols('F1 F2 d')\n\n# define equation\neq = F1 + F2 - d\n\n# find d\nsol = solve(eq, d)\nprint(sol[0])"
  },
  {
    "example_id": 303,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "2.0",
      "4.0",
      "9.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "4.0",
      "9.0",
      "2.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "a1, a2, a3, a4, a5 = symbols('a1 a2 a3 a4 a5')\neq1 = a1 + a2 + a3 + a4 + a5\neq2 = a5 - a4\neq3 = a2 - a1\neq4 = 576\neq = [eq1 - eq2, eq3 - 9]\nsol = solve(eq, [a1, a2, a3, a4, a5])\nprint(sol)"
  },
  {
    "example_id": 304,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "1.0",
      "0.0",
      "8.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "# create variables\nx, y, a, b, c, d = symbols('x y a b c d')\n\n# create functions\nf = abs(x - 1) + abs(x - 3)\ng = 8\n\n# find the area\narea = integrate(f, (x, 0, y)) - integrate(g, (x, 0, y))\n\n# solve for y\ny = solve(area, y)\n\n# print the answer\nprint(y)"
  },
  {
    "example_id": 305,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "16.0",
      "2.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-26.0"
    ],
    "solution": "x, a, b, c = symbols('x a b c')\nr1, r2, r3 = symbols('r1 r2 r3')\nz = symbols('z')\ns1 = r1 + r2*z + r3*z**2\ns2 = r1*z + r2*z**2 + r3\ns3 = r1*z**2 + r2 + r3*z\n\nf = x**3 - 3*x**2 - 4*x + 4\ng = x**3 + a*x**2 + b*x + c\n\neq1 = g.subs(x, s1) - f\neq2 = g.subs(x, s2) - f\neq3 = g.subs(x, s3) - f\n\nsolve_1 = solve(eq1, z)\nsolve_2 = solve(eq2, z)\nsolve_3 = solve(eq3, z)\n\nprint(solve_1[0].subs(z, solve_2[0]).subs(z, solve_3[0]))"
  },
  {
    "example_id": 306,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "x, y = symbols('x y')\neq1 = x - y - 4\neq2 = x**3 - y**3 - 28\nsol = solve([eq1, eq2], [x, y])\nprint(sol[0][0]*sol[0][1])"
  },
  {
    "example_id": 307,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0",
      "3.0",
      "3.0",
      "27.0",
      "2.0",
      "-4.0",
      "12.0",
      "3.0",
      "3.0",
      "27.0"
    ],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x, t = symbols('x t')\neq = x**3 - 3*x**2 + t*x + 27\nfactor = sympy.factor(eq)\nx_value = solve(factor - (x - 3), x)\nprint(x_value[0])"
  },
  {
    "example_id": 308,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = Symbol('x')\nf = x**4 - 80*x - 36\n\ndef get_roots(f):\n    return solve(f)\n\ndef get_real_roots(f):\n    roots = get_roots(f)\n    real_roots = [root for root in roots if root.is_real]\n    return real_roots\n\ndef get_sum_of_roots(f):\n    real_roots = get_real_roots(f)\n    return sum(real_roots)\n\nprint(get_sum_of_roots(f))"
  },
  {
    "example_id": 309,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0",
      "1.0",
      "10.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\nf = (x**2 + 3*x)/(x**2 + 4*x + 3)\na, b, c, d = symbols('a b c d')\n\n# a)\na = f.free_symbols\nprint(len(a))\n\n# b)\nb = f.as_numer_denom()[1].free_symbols\nprint(len(b))\n\n# c)\nc = f.as_numer_denom()[0].free_symbols\nprint(len(c))\n\n# d)\nd = f.as_numer_denom()[1].as_numer_denom()[0].free_symbols\nprint(len(d))\n\n# a + 2b + 3c + 4d\nprint(len(a) + 2*len(b) + 3*len(c) + 4*len(d))"
  },
  {
    "example_id": 310,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.7071067811865476"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "def find_largest_positive_real_number(x, y, z):\n    return ((5 - x**2 - y**2 - z**2)**0.5)/2\n\nprint(find_largest_positive_real_number(1, 1, 1))"
  },
  {
    "example_id": 311,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# Define variables\na, b = symbols('a b')\n\n# Define function\nf = a + 1/b*(a-b)\n\n# Find the minimum value of the function\nf_min = f.subs(a, 1)\n\n# Print the solution\nprint(f_min)"
  },
  {
    "example_id": 312,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "729.0"
    ],
    "solution": "# variables\nl, w, h = symbols('l w h')\n\n# define volume of cheese\nV = l*w*h\n\n# define volume of each slice\nV_slice = 1\n\n# define total volume of slices\nV_total = V_slice*10\n\n# define volume of remaining cheese\nV_remaining = V - V_total\n\n# find maximum volume of cheese\nmax_volume = V_remaining\n\n# print solution\nprint(max_volume)"
  },
  {
    "example_id": 313,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "4.0",
      "12.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Define the variables\nx, y, z = symbols('x y z')\n\n# Define the equation\neq = x**2 + y**2 + z**2 - 1\n\n# Define the objective function\nobj = 3*x + 4*y + 12*z\n\n# Find the maximum value of the objective function\nmax_value = Max(obj, eq)\n\n# Print the maximum value\nprint(max_value)"
  },
  {
    "example_id": 314,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "134.0"
    ],
    "solution": "import math\n\ndef get_min_committee(total_candidates, margin_percentage):\n    # margin_percentage should be less than 1\n    if margin_percentage >= 1:\n        raise ValueError(\"Margin percentage should be less than 1\")\n\n    # The minimum number of members required for the committee is the number of candidates\n    min_committee = total_candidates\n\n    # Find the minimum number of members required to get the desired margin\n    for i in range(total_candidates):\n        # Calculate the percentage of votes required for each candidate\n        # to get the desired margin\n        percentage = (1 - margin_percentage) / (i + 1)\n        # Calculate the number of members required for each candidate\n        # to get the desired margin\n        num_members = int(math.ceil(percentage * total_candidates))\n        # Update the minimum number of members required for the committee\n        min_committee = min(min_committee, num_members)\n\n    return min_committee\n\n# Test the function with different values\nprint(get_min_committee(27, 0.05))  # Output: 3\nprint(get_min_committee(27, 0.10))  # Output: 4\nprint(get_min_committee(27, 0.20))  # Output: 6"
  },
  {
    "example_id": 315,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2017.0"
    ],
    "annotated_answers": [
      "224.0"
    ],
    "solution": "# Define sequence\nn = 1\na = 3\n\n# Find largest integer less than or equal to the expression\nlargest = floor(((a**2 + 2007)**2 + (a**2 + 2007)) / (a**2 + 2007))\n\n# Print the answer\nprint(largest)"
  },
  {
    "example_id": 316,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "75.0"
    ],
    "annotated_answers": [
      "75.0"
    ],
    "solution": "print(abs(9j - 12) * abs(3 + 4j))"
  },
  {
    "example_id": 317,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "0.166666666666667",
      "2.0",
      "4.0",
      "0.166666666666667",
      "2.0",
      "4.0",
      "0.166666666666667",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c = symbols('a b c')\neq = (2*a + 1/3*b)**2 + (2*b + 1/3*c)**2 + (2*c + 1/3*a)**2\nmin_value = Min(eq)\nprint(min_value)"
  },
  {
    "example_id": 318,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7976.0",
      "2.0",
      "2.0",
      "2.0",
      "3976036.0"
    ],
    "annotated_answers": [
      "997.0"
    ],
    "solution": "x, y = symbols('x y')\nc = x**2 + y**2 - 1994**2\na, b = symbols('a b')\n\n# First tangent line\neq1 = c - (a - 2*1994)**2\n\n# Second tangent line\neq2 = c - (b - 2*1994)**2\n\n# Solve for a + b\nsol = solve([eq1, eq2], [a, b])\nprint(sol[0][0] + sol[0][1])"
  },
  {
    "example_id": 319,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "c, a, b = symbols('c a b')\neq = (x + c)/(x**2 + a*x + b)\nsol = solve(eq <= 0, c)\nprint(sol)"
  },
  {
    "example_id": 320,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = symbols('x')\nf = 2*x**7 - 5*x**4 + 3*x**3 - x + 5\ng = sympy.gcd(f, f.diff(x))\nprint(g)"
  },
  {
    "example_id": 321,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "8.0"
    ],
    "annotated_answers": [
      "50.0"
    ],
    "solution": "a, b = symbols('a b')\nab2 = a*b**2\neq = a**4 + b**8\neq_min = Min(eq.subs(ab2, 5))\nprint(eq_min)"
  },
  {
    "example_id": 322,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.9999999999999998"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "z = 1 + 2j\nexpression = abs(z**5) / abs(z)**5\nprint(expression)"
  },
  {
    "example_id": 323,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-21.0",
      "18.0",
      "-3.0",
      "2.0",
      "1511.0",
      "2.0",
      "-3.0",
      "2.0",
      "1511.0",
      "2.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = symbols('x')\neq = x*(x + 1)*(x + 2)*(x + 3) + 1\nsol = solve(eq - 379**2, x)\nprint(sol)"
  },
  {
    "example_id": 324,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "3.0",
      "5.0",
      "6.0",
      "2.0",
      "6.0",
      "3.0",
      "5.0",
      "7.0",
      "2.0",
      "5.0",
      "3.0",
      "6.0",
      "7.0",
      "2.0",
      "3.0",
      "5.0",
      "6.0",
      "7.0",
      "2.0"
    ],
    "annotated_answers": [
      "84.0"
    ],
    "solution": "from sympy import sqrt\nexpr = ((-sqrt(3) + sqrt(5) + sqrt(6) + sqrt(7))**2 + (sqrt(3) - sqrt(5) + sqrt(6) + sqrt(7))**2 + (sqrt(3) + sqrt(5) - sqrt(6) + sqrt(7))**2 + (sqrt(3) + sqrt(5) + sqrt(6) - sqrt(7))**2)\nprint(expr)"
  },
  {
    "example_id": 325,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\neq = (x - 1)**7 + 3*(x - 1)**6 + (x - 1)**5 + 1\neq = eq / (x - 1)**5\neq = eq.subs(x, 2)\nprint(eq)"
  },
  {
    "example_id": 326,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-22.0"
    ],
    "annotated_answers": [
      "22.0"
    ],
    "solution": "# x, y, z = symbols('x y z')\nx, y, z = symbols('x y z')\n\n# Create a system of equations\neq1 = x*y - 24\neq2 = x*z - 48\neq3 = y*z - 72\n\n# Solve the system of equations\nsol = solve([eq1, eq2, eq3], [x, y, z])\n\n# Find the sum of x, y, and z\nsum_of_xyz = sol[0][0] + sol[0][1] + sol[0][2]\n\n# Print the sum\nprint(sum_of_xyz)"
  },
  {
    "example_id": 327,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-338016.0"
    ],
    "solution": "x = symbols('x')\n\ndef f(x):\n    return x**2016 + x**2015 + x**2014 + x**2013 + x**2012 + x**2011 + x**2010 + x**2009 + x**2008 + x**2007 + x**2006 + x**2005 + x**2004 + x**2003 + x**2002 + x**2001 + x**2000 + x**1999 + x**1998 + x**1997 + x**1996 + x**1995 + x**1994 + x**1993 + x**1992 + x**1991 + x**1990 + x**1989 + x**1988 + x**1987 + x**1986 + x**1985 + x**1984 + x**1983 + x**1982 + x**1981 + x**1980 + x**1979 + x**1978 + x**1977 + x**1976 + x**1975 + x**1974 + x**1973 + x**1972 + x**1971 + x**1970 + x**1969 + x**1968 + x**1967 + x**1966 + x**1965 + x**1964 + x**1963 + x**1962 + x**1961 + x**1960 + x**1959 + x**1958 + x**1957 + x**1956 + x**1955 + x**1954 + x**1953 + x**1952 + x**1951 + x**1950 + x**1949 + x**1948 + x**1947 + x**1"
  },
  {
    "example_id": 328,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "k, x, y = symbols('k x y')\neq1 = k*x**2 + y**2 - 1\neq2 = x**2 + y**2 - 1\nsol1 = solve([eq1, eq2], [k, x, y])\nprint(sol1[0])"
  },
  {
    "example_id": 329,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2007.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "f = symbols('f', cls=Function)\nm, n = symbols('m n', integer=True)\neq = f(m*f(n)) - n*f(m)\nmin_value = Min(f(2007))\nprint(min_value)"
  },
  {
    "example_id": 330,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "32.0",
      "5.0",
      "3.0",
      "-8.0",
      "3.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "from sympy import log, solve\n\nx = symbols('x')\neq = log(2*(2*x+8)/(x+2)) + log(2*(x+2)/(x-5))\nsol = solve(eq - 3, x)\nprint(sol)"
  },
  {
    "example_id": 331,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "16.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "answer = abs((1-1j)**8)\nprint(answer)"
  },
  {
    "example_id": 332,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a = symbols('a')\nb = 1\n\ndef atb(a, b):\n    return (a**3 - b**3) / (a - b)\n\nresult = solve(atb(a, b) - 0, a)\n\nprint(result)"
  },
  {
    "example_id": 333,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "499997.0"
    ],
    "annotated_answers": [
      "996506.0"
    ],
    "solution": "n = 500000\n\ndef get_next(n):\n    if n % 2 == 0:\n        return n + 1\n    else:\n        return n + 3\n\ndef is_in_sequence(n):\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_in_sequence(n // 2)\n    else:\n        return is_in_sequence(n // 3)\n\ndef get_sequence(n):\n    sequence = []\n    for i in range(n):\n        sequence.append(get_next(i))\n    return sequence\n\ndef find_nth(n, sequence):\n    for i, element in enumerate(sequence):\n        if element == n:\n            return i\n    return -1\n\nprint(find_nth(500000, get_sequence(500000)))"
  },
  {
    "example_id": 334,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "x = symbols('x')\nremainder = sympy.rem(x**9 - x**6 + x**3 - 1, x**2 + x + 1)\nprint(remainder)"
  },
  {
    "example_id": 335,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0990430622009573"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def parab(x):\n  return 9 - x**2\n\ndef find_a(t):\n  x1, y1 = t, parab(t)\n  x2, y2 = 1, 0\n  x3, y3 = 0, 5\n  area = (x2-x1)*(y2-y3) - (x3-x1)*(y2-y1)\n  return t + (5*area)/(2*(y2-y1))\n\nt = 0.8\nprint(find_a(t))"
  },
  {
    "example_id": 336,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "10.0",
      "2.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "from sympy import symbols, solve, sqrt\nx, y = symbols('x y')\nc1 = (x-10)**2 + y**2 - 36\nc2 = (x+15)**2 + y**2 - 81\np, q = solve([c1.diff(x), c1.diff(y)], [x, y])\npq = sqrt((p-10)**2 + y**2)\nprint(pq)"
  },
  {
    "example_id": 337,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = 9\nb = 4\nc = -54\nd = -40\ne = 145\n\n# x = (h + a) / a^2\n# y = (k + b) / b^2\n# x^2 + y^2 - 1 = 0\n\n# (h + a)^2 + (k + b)^2 - 1 = 0\n# h^2 + k^2 + 2hk + a^2 + b^2 - 1 = 0\n\n# h^2 + k^2 + 2hk + a^2 + b^2 = 1\n# h^2 + k^2 + 2hk - 1 = a^2 + b^2\n\n# h^2 + k^2 + 2hk = a^2 + b^2 + 1\n# (h + k)^2 = (a^2 + b^2 + 1)^2\n# h + k = \u00b1\u221a(a^2 + b^2 + 1)\n\n# h + k + a + b = \u00b1(a^2 + b^2 + 1) + 2(a + b)\n# h + k + a + b = \u00b1(a^2 + b^2 + 1) + 2ab\n\n# h + k + a + b = \u00b1(9 + 4) + 2(9*4)\n# h + k + a + b = \u00b1(9 + 4) + 72\n# h + k + a + b = \u00b1104\n\n# h + k + a + b = 104"
  },
  {
    "example_id": 338,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "a = [1, 1]\nfor i in range(100):\n    a.append(a[i] - 2*a[i-1] + a[i-2])\nprint(sum(a))"
  },
  {
    "example_id": 339,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Create symbols\nz1, z2 = symbols('z1 z2')\n# Create expression\nexpr1 = z1*z2\nexpr2 = z1/z2\nexpr3 = abs(z1)\nexpr4 = abs(z2)\n# Find solutions\nsol1 = solve(expr1*I - expr2, z1)\nsol2 = solve(expr1*I - expr2, z2)\n# Find the number of solutions\nn_sol1 = len(sol1)\nn_sol2 = len(sol2)\n# Find the number of pure imaginary solutions\nn_pure = 0\nfor i in range(n_sol1):\n    for j in range(n_sol2):\n        if (expr1*I - expr2).subs({z1:sol1[i], z2:sol2[j]}) == 0:\n            n_pure += 1\nprint(n_pure)"
  },
  {
    "example_id": 340,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "base = log(256, log(64, log(256, 2)))\nprint(base)"
  },
  {
    "example_id": 341,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "r = symbols('r')\neq = r**2 + 5*r + 7\nprint((r - 1)*(r + 2)*(r + 6)*(r + 3))"
  },
  {
    "example_id": 342,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x = symbols('x')\neq = x**12 - 1\np = factor(eq)\nk_value = len(p.args)\nprint(k_value)"
  },
  {
    "example_id": 343,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "a, b, h, k = symbols('a b h k')\neq = ((x-h)**2/a**2 + (y-k)**2/b**2 - 1)\n\na_value = solve(eq, a)[0]\nk_value = solve(eq, k)[0]\n\nprint(a_value + k_value)"
  },
  {
    "example_id": 344,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "4.0",
      "2.0",
      "5.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = 2*x**2 + 5*y**2 + 2*z**2 + 4*x*y - 4*y*z - 2*z - 2*x\n\n# Find the minimum value of the expression\nmin_val = Min(eq)\nprint(min_val)"
  },
  {
    "example_id": 345,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "from cmath import polar\nprint(polar(5 - 12j)[0])"
  },
  {
    "example_id": 346,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.462702793494782",
      "202"
    ],
    "annotated_answers": [
      "203.0"
    ],
    "solution": "p = lambda x: sum(x**i for i in range(102))\nprint(p(102))"
  },
  {
    "example_id": 347,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "420.0"
    ],
    "annotated_answers": [
      "-10.0"
    ],
    "solution": "def P(x):\n    return 6*x\n\nprint(P(P(10)) + P(10))"
  },
  {
    "example_id": 348,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-46.0"
    ],
    "solution": "p, a, b = symbols('p a b')\nf = x**4 - 6*x**3 + 26*x**2 + p*x + 65\n\n# roots = solve(f, x)\nroots = solve(f, x)\n\n# if roots[0] is not None:\nif roots[0] is not None:\n    print(roots[0])\nelse:\n    print('No real solutions')\n\n# if roots[1] is not None:\nif roots[1] is not None:\n    print(roots[1])\nelse:\n    print('No real solutions')\n\n# if roots[2] is not None:\nif roots[2] is not None:\n    print(roots[2])\nelse:\n    print('No real solutions')\n\n# if roots[3] is not None:\nif roots[3] is not None:\n    print(roots[3])\nelse:\n    print('No real solutions')\n\n# if roots[4] is not None:\nif roots[4] is not None:\n    print(roots[4])\nelse:\n    print('No real solutions')\n\n# if roots[5] is not None:\nif roots[5] is not None:\n    print(roots[5])\nelse:\n    print('No real solutions')\n\n# if roots[6] is not None:\nif roots[6] is not None:\n    print(roots[6])\nelse:\n    print('No real solutions')\n\n# if roots[7] is not None:\nif roots[7] is not None:\n    print(roots[7])\nelse:\n    print('No real solutions')\n\n# if roots[8] is not None:\nif roots[8] is not None:\n    print(roots[8])\nelse:\n    print('No real solutions')\n\n# if roots[9] is not None:\nif roots[9] is not None:\n    print(roots[9])\nelse:\n    print('No real solutions')\n\n# if roots[10] is not None:\nif roots[10] is not None:\n    print"
  },
  {
    "example_id": 349,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.18098098699736",
      "25.0"
    ],
    "annotated_answers": [
      "973.0"
    ],
    "solution": "# Solve for the 1000th term\nn = Symbol('n', integer=True)\na = Symbol('a', positive=True)\n\n# Define the first three terms in geometric progression\na1 = 1\na2 = a1*(3/2)**(1/2)\na3 = a2*(5/4)**(1/2)\n\n# Define the second, third, and fourth terms in arithmetic progression\nb1 = a2 + 1\nb2 = a2 + 2\nb3 = a2 + 3\n\n# Define the general terms for all $n\\ge1$\na_2n_1 = a2*(3/2)**(n/2)\na_2n_2 = a2*(5/4)**(n/2)\na_2n_3 = a2*(7/6)**(n/2)\n\n# Define the general terms for all $n\\ge1$\na_2n_1 = a2*(3/2)**(n/2)\na_2n_2 = a2*(5/4)**(n/2)\na_2n_3 = a2*(7/6)**(n/2)\n\n# Find the terms that are less than 1000\na_2n_1 = a_2n_1.subs(n, floor(log(1000, 3/2)**2))\na_2n_2 = a_2n_2.subs(n, floor(log(1000, 5/4)**2))\na_2n_3 = a_2n_3.subs(n, floor(log(1000, 7/6)**2))\n\n# Find the greatest term that is less than 1000\na_2n = Min(a_2n_1, a_2n_2, a_2n_3)\n\n# Find the sum of the greatest term and the number of terms\nprint(n + a_2n)"
  },
  {
    "example_id": 350,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "def f(x):\n    return x**2 + 6*x + 1\n\ndef area(R):\n    return len(R)\n\ndef closest(n):\n    R = set()\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if f(i) + f(j) <= 0 and f(i) - f(j) <= 0:\n                R.add((i, j))\n    return area(R)\n\nprint(closest(100))"
  },
  {
    "example_id": 351,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0",
      "2.0",
      "4.0",
      "2.0",
      "3.0",
      "2.0",
      "-3.0",
      "2.0",
      "8.0",
      "3.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "K, L, M = symbols('K L M')\nx = symbols('x')\n\n# find the roots\nroots = solve(x**4 - K*x**3 + K*x**2 + L*x + M, x)\n\n# compute the sum of the squares\nsum_of_squares = 0\nfor root in roots:\n    sum_of_squares += root**2\n\nprint(Min(sum_of_squares))"
  },
  {
    "example_id": 352,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2018.0"
    ],
    "annotated_answers": [
      "4036.0"
    ],
    "solution": "n = 2018\na_n = (1/n)**2\nprint(n)"
  },
  {
    "example_id": 353,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-588.0"
    ],
    "annotated_answers": [
      "-588.0"
    ],
    "solution": "x = symbols('x')\neq = (1-x)*(1+2*x)*(1-3*x)*(1+4*x)*(1-5*x)*(1+6*x)*(1-7*x)*(1+8*x)*(1-9*x)*(1+10*x)*(1-11*x)*(1+12*x)*(1-13*x)*(1+14*x)*(1-15*x)\neq_expanded = eq.expand()\ncoeff = eq_expanded.coeff(x**2)\nprint(coeff)"
  },
  {
    "example_id": 354,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "19941989.0"
    ],
    "annotated_answers": [
      "19941989.0"
    ],
    "solution": "n = 19941994\nprint(floor(sqrt(n**2 - 10*n + 29)))"
  },
  {
    "example_id": 355,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x, y = symbols('x y')\neq = x**2 + 2*y**2 + Rational(1, 2) - x*(2*y + 1)\nprint(solve(eq, (x, y)))"
  },
  {
    "example_id": 356,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "45.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "def p(x):\n    if x == 55 or x == 83 or x == 204 or x == 232:\n        return 8\n    if x == 103:\n        return 13\n    return 0\n\nsum = 0\nfor i in range(1, 286):\n    sum += p(i)\nprint(sum)"
  },
  {
    "example_id": 357,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-150.0"
    ],
    "annotated_answers": [
      "-150.0"
    ],
    "solution": "a = 0\nfor i in range(1, 101):\n    a += (-1)**(i+1)*(3*i + 2)\nprint(a)"
  },
  {
    "example_id": 358,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "z_list = []\nfor real_part in range(-10, 10):\n    for imaginary_part in range(-10, 10):\n        z = real_part + imaginary_part*1j\n        if z**3 + z**2 - abs(z)**2 + 2*z == 0:\n            z_list.append(z)\nprint(z_list)"
  },
  {
    "example_id": 359,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "S = lambda k: sum([f(a,b) for a in range(1,k+1) for b in range(1,k+1)])\np, q = 0, 0\nfor k in range(2, 1000):\n    pq = (p*q)**2 + 2*p*q\n    p, q = pq, p\n\nprint(pq)"
  },
  {
    "example_id": 360,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b = symbols('a b')\nab = a*b\n# the minimum value of (a^2 + b^2) / (a - b) is 0\nprint(Min(a**2 + b**2, a - b))"
  },
  {
    "example_id": 361,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "36.0"
    ],
    "solution": "from sympy import Symbol, solve, Eq\n\nx, y, z, w = Symbol('x'), Symbol('y'), Symbol('z'), Symbol('w')\n\neq = [Eq(x**2 + y**2 + z**2 + w**2, 1),\n      Eq(x**2 + y**2 + z**2 + w**2, 1),\n      Eq(x**2 + y**2 + z**2 + w**2, 1),\n      Eq(x**2 + y**2 + z**2 + w**2, 1)]\n\nsol = solve(eq, [x, y, z, w])\n\nprint(sol)"
  },
  {
    "example_id": 362,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "4.0",
      "2.0",
      "6.0",
      "9.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = symbols('x')\neq = 8*x**3 - 27\nfac = sympy.factor(eq)\nprint(fac)"
  },
  {
    "example_id": 363,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-123456788.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "from sympy import primefactors\n\ndef coprime(a,b):\n    return not set(primefactors(a)).intersection(primefactors(b))\n\ndef solve(a,b):\n    while not coprime(a,b):\n        b+=1\n    return b-a\n\nprint(solve(123456789,1))"
  },
  {
    "example_id": 364,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "# Real solutions to the equation |x| \\cdot |x-5| = 3.\n# x = 3, x = -3, x = 1, x = 4\n# Sum of all real solutions = 3 + (-3) + 1 + 4\nprint(3 + (-3) + 1 + 4)"
  },
  {
    "example_id": 365,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0",
      "5.0",
      "14.0",
      "5.0",
      "10.0",
      "5.0",
      "5.0",
      "5.0",
      "14.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\neq = 5*x**4 - 10*x**3 + 10*x**2 - 5*x - 11\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 366,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-19531230.2"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "n = 1\na = 14\nwhile n < 10:\n    a = 24 - 5*a\n    n += 1\na_n = a\n\np = a_n\nq = 24/5\nr = 11\nprint(p + q + r)"
  },
  {
    "example_id": 367,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "210.0"
    ],
    "annotated_answers": [
      "64.0"
    ],
    "solution": "# define variables\na1, a2, a3, a4, a5, a6, a7, a8, a9, a10 = symbols('a1 a2 a3 a4 a5 a6 a7 a8 a9 a10')\n# define equations\neq1 = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10\neq2 = a1**2 + a2**2 + a3**2 + a4**2 + a5**2 + a6**2 + a7**2 + a8**2 + a9**2 + a10**2\neq3 = a1**3 + a2**3 + a3**3 + a4**3 + a5**3 + a6**3 + a7**3 + a8**3 + a9**3 + a10**3\n# define sum of all possible values of n\nn = symbols('n')\nsum_n = 0\n# find n\nfor i in range(1, 11):\n    for j in range(1, 11):\n        if i + j <= 10:\n            for k in range(1, 11):\n                if i + j + k <= 10:\n                    for l in range(1, 11):\n                        if i + j + k + l <= 10:\n                            for m in range(1, 11):\n                                if i + j + k + l + m <= 10:\n                                    for n in range(1, 11):\n                                        if i + j + k + l + m + n <= 10:\n                                            sum_n = sum_n + 1\nprint(sum_n)"
  },
  {
    "example_id": 368,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-297.0",
      "377.0",
      "11.0",
      "432.0",
      "121.0",
      "100093.0",
      "121.0"
    ],
    "annotated_answers": [
      "406.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nP = a*x**2 + b*x + c\nx_min = Min(P, x)\nx_max = Max(P, x)\nP_11 = P.subs(x, 11)\nP_16 = P.subs(x, 16)\n\nsol_a = solve(P_11 - 181, a)\nsol_b = solve(P_11 - 181, b)\nsol_c = solve(P_11 - 181, c)\n\na_value = sol_a[0]\nb_value = sol_b[0]\nc_value = sol_c[0]\n\nP_11 = a_value*11**2 + b_value*11 + c_value\nP_16 = a_value*16**2 + b_value*16 + c_value\n\nprint(P_16)"
  },
  {
    "example_id": 369,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "4.0",
      "5.0",
      "4.0",
      "8.0",
      "3.0",
      "2.0",
      "2.0",
      "4.0",
      "7.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "18.0"
    ],
    "solution": "x = symbols('x')\na, b, c, d, e = symbols('a b c d e', real=True)\neq = 5*x**4 - 8*x**3 + 2*x**2 + 4*x + 7\nexpr = a + b/(x + 2) + c/(x + 2)**2 + d/(x + 2)**3 + e/(x + 2)**4\nsol = solve(eq - expr, [a, b, c, d, e])\nprint(sol)"
  },
  {
    "example_id": 370,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\nf = Function('f')\neq = x**2 * f(x) + f(1 - x) - x**4 + 2*x\nsolve(eq, f(x))\nalpha, beta = symbols('alpha beta')\nf_alpha = f(alpha)\nf_beta = f(beta)\nprint(alpha**2 + beta**2)"
  },
  {
    "example_id": 371,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "0.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n\n# Equation 1: ab + ac + bc = 0\neq1 = a*b + a*c + b*c\n\n# Equation 2: (a + b + c + 1)^2 = abc\neq2 = (a + b + c + 1)**2\n\n# Solve for a, b, and c\nsolve([eq1, eq2], [a, b, c])\n\n# Compute the product of the three terms\nprod = (a*b - c)*(a*c - b)*(b*c - a)\n\n# Find the possible values\nprint(prod.expand().args)"
  },
  {
    "example_id": 372,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.717047997679451"
    ],
    "annotated_answers": [
      "576.0"
    ],
    "solution": "x = 8\nexpression = x / (1 + x ** 0.5) ** 0.5\nprint(expression ** 2 - 8)"
  },
  {
    "example_id": 373,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "8.0"
    ],
    "annotated_answers": [
      "44.0"
    ],
    "solution": "from sympy import factorint, primefactors, sqrt\n\n# a = 1, b = 1, c = 1\na = 1\nb = 1\nc = 1\n\n# x, y, z = 1\nx = 1\ny = 1\nz = 1\n\n# (x^4 + 1)(y^4 + 1)(z^4 + 1)\nexpr = (x**4 + 1)*(y**4 + 1)*(z**4 + 1)\n\n# xy^2 z\ndenominator = x*y**2*z\n\n# a/c = (x^4 + 1)(y^4 + 1)(z^4 + 1)/(xy^2 z)\na_over_c = expr/denominator\n\n# a/c = 1\nprint(a_over_c)"
  },
  {
    "example_id": 374,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3968.0"
    ],
    "annotated_answers": [
      "3968.0"
    ],
    "solution": "# define f(x)\ndef f(x):\n    if floor(sqrt(x))**2 == x:\n        return sqrt(x)\n    else:\n        return (f(x-1))**2 - 1\n\n# compute f(8)\nprint(f(8))"
  },
  {
    "example_id": 375,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = symbols('x')\neq = 4*x**3 - 41*x**2 + 10*x - 1989\nprint(solve(eq, x)[0])"
  },
  {
    "example_id": 376,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "-2.0",
      "1.0",
      "1.0",
      "-2.0",
      "1.0",
      "1.0",
      "0.0",
      "0.0",
      "1331.0"
    ],
    "annotated_answers": [
      "181.0"
    ],
    "solution": "n = symbols('n')\na = Matrix([[2, -2, 1], [1, -2, 1], [1, 0, 0]])\nb = Matrix([1, 10, 100])\na_n = a**n\na_n_value = a_n.subs(n, 1331)\nprint(a_n_value)"
  },
  {
    "example_id": 377,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "1.0",
      "1.0",
      "2.0",
      "10.0",
      "11.0",
      "10.0",
      "9.0",
      "100.0",
      "99.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols('x:101')\nsum = sum(x[i]*x[i+1] for i in range(100))\nmax = Max(sum)\nprint(max)"
  },
  {
    "example_id": 378,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "for n in range(0, 10000):\n    if (3*n**3 - 12*n == 0):\n        print(n)"
  },
  {
    "example_id": 379,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "b = Symbol('b')\nz = 9 + b*I\nz2 = z**2\nz3 = z**3\neq1 = z2.imag == z3.imag\neq2 = z2.imag == b\neq3 = z3.imag == b\neq4 = z2.real == 0\neq5 = z3.real == 0\neq6 = z.real == 9\neq7 = z.imag == b\nsol1 = solve([eq1, eq2, eq3, eq4, eq5, eq6, eq7], [b])\nsol2 = solve([eq1, eq2, eq3, eq4, eq5, eq6, eq7], [b])\nsol3 = solve([eq1, eq2, eq3, eq4, eq5, eq6, eq7], [b])\nprint(sol1)\nprint(sol2)\nprint(sol3)"
  },
  {
    "example_id": 380,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "9.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0",
      "12.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z1, z2, z3 = symbols('z1 z2 z3')\neq = abs(9*z1*z2 + 4*z1*z3 + z2*z3) - 12\neq = eq.subs({z1: z1})\neq = eq.subs({z2: z2})\neq = eq.subs({z3: z3})\neq = eq.simplify()\neq = eq.expand()\nprint(eq)"
  },
  {
    "example_id": 381,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.217147240951626",
      "2.0",
      "10.0",
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\nexpr = 2*log(10, x) - log(x, 1/100)\nprint(expr.diff(x))"
  },
  {
    "example_id": 382,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "10.0"
    ],
    "solution": "x = -1\nwhile x!= -1:\n    try:\n        x = input(\"Enter a value for x: \")\n        x = float(x)\n    except ValueError:\n        print(\"Invalid input.\")\n\nexpression = (x + 1)**4\nprint(expression)"
  },
  {
    "example_id": 383,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "4.0",
      "10.0",
      "10.0",
      "4.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\nf = (2*x - 6) / (x**3 - 7*x**2 - 2*x + 6)\nk = symbols('k')\neq = f.as_numer_denom()[1]\neq = eq.subs(k, f.as_numer_denom()[0])\nsol = solve(eq, x)\nprint(sol)"
  },
  {
    "example_id": 384,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "k = 0, 1, 2, 3"
  },
  {
    "example_id": 385,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "x, y, z = symbols('x y z')\n\n# 1st equation\neq1 = x + 2*y + 4*z - 12\n\n# 2nd equation\neq2 = x*y + 2*x*z + 4*y*z - 22\n\n# 3rd equation\neq3 = x*y*z - 6\n\n# Solving the system of equations\nsol = solve([eq1, eq2, eq3], [x, y, z])\n\n# Printing the solution\nprint(sol)"
  },
  {
    "example_id": 386,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "2.0",
      "2.0",
      "2.0",
      "-2.0",
      "2.0",
      "2.0",
      "3.0",
      "-3.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "z = sympy.Symbol('z')\neq = z**2 + z + 1\nsum = (z + sympy.S(1)/z)**2 + (z**2 + sympy.S(1)/z**2)**2 + (z**3 + sympy.S(1)/z**3)**2\nfor i in range(45):\n    sum = sum + (z**(i+1) + sympy.S(1)/z**(i+1))**2\nprint(sum)"
  },
  {
    "example_id": 387,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "14.0"
    ],
    "solution": "n = symbols('n')\na0, a1, a2, a3, a4, a5 = symbols('a0 a1 a2 a3 a4 a5')\nf = a0 + a1*x + a2*x**2 + a3*x**3 + a4*x**4 + a5*x**5\nf = f.expand()\nf = f.subs({a0: 66, a1: 2})\nf = f.expand()\nf = f.as_expr()\nf = f.coeff(x**4)\nf = f.coeff(x**3)\nf = f.coeff(x**2)\nf = f.coeff(x)\nf = f.coeff(I)\nf = f.coeff(Symbol('x'))\nf = f.coeff(Symbol('x**5'))\nf = f.coeff(Symbol('x**4'))\nf = f.coeff(Symbol('x**3'))\nf = f.coeff(Symbol('x**2'))\nf = f.coeff(Symbol('x'))\nf = f.coeff(Symbol('I'))\nf = f.coeff(Symbol('x'))\nf = f.coeff(Symbol('x**5'))\nf = f.coeff(Symbol('x**4'))\nf = f.coeff(Symbol('x**3'))\nf = f.coeff(Symbol('x**2'))\nf = f.coeff(Symbol('x'))\nf = f.coeff(Symbol('I'))\nf = f.coeff(Symbol('x'))\nf = f.coeff(Symbol('x**5'))\nf = f.coeff(Symbol('x**4'))\nf = f.coeff(Symbol('x**3'))\nf = f.coeff(Symbol('x**2'))\nf = f.coeff(Symbol('x'))\nf = f.coeff(Symbol('I'))\nf = f.coeff(Symbol('x'))\nf = f.coeff(Symbol('x**5'))\nf = f.coeff(Symbol('x**4'))\nf = f.coeff(Symbol('x**3'))"
  },
  {
    "example_id": 388,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "# Define f(x) = ax + b\nf = lambda x: a*x + b\n\n\n# Define the equation f(f(f(x))) = 8x + 21\neq = f(f(f(x))) - (8*x + 21)\n\n\n# Find a and b\na, b = solve(eq, [a, b])\n\n\n# Print the sum of a and b\nprint(a + b)"
  },
  {
    "example_id": 389,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a = 8\nb = 4\nc = 0\nexpression = (c*(b-c))**0.5 + (c*(a-c))**0.5\nprint(expression)"
  },
  {
    "example_id": 390,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.110322745344961"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "import math\n\n# Find the x coordinate of the point Q\nx_q = (4 - 5 * math.sqrt(3)) / 49\n\n# Find the y coordinate of the point Q\ny_q = (3 + 5 * math.sqrt(3)) / 33\n\n# Find the distance between F[1] and Q\nd1 = math.sqrt((4 - x_q)**2 + (0 - y_q)**2)\n\n# Find the distance between F[2] and Q\nd2 = math.sqrt((-4 - x_q)**2 + (0 - y_q)**2)\n\n# Find the maximum value of PQ + F_1 Q\nmax_distance = max(d1, d2)\n\nprint(max_distance)"
  },
  {
    "example_id": 391,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-59.0",
      "3481.0",
      "144.0",
      "1253010.0",
      "36.0",
      "212291.0",
      "1728.0",
      "1.0",
      "3.0",
      "59.0"
    ],
    "annotated_answers": [
      "-376.0"
    ],
    "solution": "x = symbols('x')\nf = 4*x**3 - 59*x**2\nroots = solve(f - 32, x)\nf_value = f.subs(x, roots[0]) + f.subs(x, roots[1]) + f.subs(x, roots[2])\nprint(f_value)"
  },
  {
    "example_id": 392,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "300540195.0"
    ],
    "annotated_answers": [
      "1024.0"
    ],
    "solution": "from sympy import binomial\nb = binomial(31, 15)\nprint(b)"
  },
  {
    "example_id": 393,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "def is_even(n):\n    return n % 2 == 0\ndef is_odd(n):\n    return n % 2 == 1\nprint(sum(1 for f in range(1000) if is_even(f) and is_odd(f)))"
  },
  {
    "example_id": 394,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "5.0",
      "2.0",
      "22.0"
    ],
    "annotated_answers": [
      "11.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x**2 + 2*y**2 + 5*z**2 - 22\n\n# Define the function\ndef f(x, y, z):\n    return x*y + x*z + y*z\n\n# Find the maximum value\nmax_value = Min(f(x, y, z), eq)\nprint(max_value)"
  },
  {
    "example_id": 395,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "163.0"
    ],
    "solution": "from sympy import Symbol, Integer, solve\nx = Symbol('x', integer=True)\nf = x**2 + Integer(2010)\nsolutions = solve(f, x)\nprint(len(solutions))"
  },
  {
    "example_id": 396,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0",
      "-3.0",
      "6.0",
      "32.0",
      "2.0",
      "-3.0",
      "4.0",
      "16.0"
    ],
    "annotated_answers": [
      "20.0"
    ],
    "solution": "a, b = symbols('a b')\nexpr = 3*a**3*sqrt(3) + 2/(a*b - 2*b**2)\nassumptions = [a > 2*b, b > 0, a > 0]\nsolution = solve(expr, a, assumptions=assumptions)\nprint(solution)"
  },
  {
    "example_id": 397,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "6.0",
      "2.0",
      "2.0",
      "6.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "PF_1, PF_2 = symbols('PF_1 PF_2')\nd = symbols('d')\neq1 = 4*x**2 - 8*x + y**2 + 4*y - 8\neq2 = PF_1 + PF_2 - d\nsol = solve([eq1, eq2], [x, y])\nprint(sol)"
  },
  {
    "example_id": 398,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "27.0"
    ],
    "solution": "x = symbols('x')\neq = abs(x) + 3\neq = eq.subs(x, abs(x + 3))\nseq = [0]\nfor i in range(1, 2007):\n    seq.append(eq.subs(x, seq[-1]))\nprint(min(seq))"
  },
  {
    "example_id": 399,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0",
      "0.0",
      "0.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "def polynomial(x):\n    return (x - 1) * (x - 4) * (x - 2) * (x - 3) * x\n\ndef remainder(x):\n    return 2 * polynomial(x)\n\ndef find_p(x):\n    p = polynomial(x)\n    r = remainder(x)\n    print(f\"polynomial: {p}, remainder: {r}\")\n    return p\n\nprint(find_p(0))"
  },
  {
    "example_id": 400,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "# set variables\nx, y, z = symbols('x y z')\n\n# define constraints\nconstraints = [\n    x + y + z == 3,\n    x >= 0,\n    y >= 0,\n    z >= 0\n]\n\n# solve for maximum value\nvariables = [x, y, z]\nvariables = Matrix(variables)\nconstraints = Matrix(constraints)\nsolution = solve(variables, constraints)\n\n# get maximum value\nmax_value = 0\nfor s in solution:\n    x, y, z = s\n    if x >= 0 and y >= 0 and z >= 0:\n        max_value = max(max_value, (x*y + z)*(x*z + y))\n\nprint(max_value)"
  },
  {
    "example_id": 401,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-2.0",
      "3.0",
      "2.0",
      "3.0",
      "108.0",
      "2009.0",
      "3.0",
      "2025.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "k, x = symbols('k x')\nal, be, ga, de = symbols('alpha beta gamma delta')\neq = x**4 + k*x**2 + 90*x - 2009\nsol = solve(eq, x)\nal, be, ga, de = sol\nalpha = al\nbeta = be\ngamma = ga\ndelta = de\nprint(alpha)\nprint(beta)\nprint(gamma)\nprint(delta)\nprint(alpha*beta)\nprint(k)"
  },
  {
    "example_id": 402,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "501.0"
    ],
    "solution": "k, x = symbols('k x')\nlogx = log(x)\neq = log(k*x) - 2*log(x+2)\nsol = solve(eq, k)\n\n# Find the number of integer values of k in the closed interval [-500,500] for which the equation log(kx)=2log(x+2) has exactly one real solution.\nnum_sol = 0\nfor i in range(-500, 500):\n    if i in sol:\n        num_sol += 1\n\nprint(num_sol)"
  },
  {
    "example_id": 403,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "x = symbols('x')\nf = (x**3 - x**2 + x)/(6*x**2 - 9*x)\na = f.free_symbols\nb = f.as_numer_denom()[1].free_symbols\nc = f.as_numer_denom()[0].free_symbols\nd = f.as_numer_denom()[1].as_numer_denom()[1].free_symbols\nprint(len(a) + 2*len(b) + 3*len(c) + 4*len(d))"
  },
  {
    "example_id": 404,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "4.0",
      "6.0",
      "12.0",
      "2.0",
      "12.0",
      "8.0",
      "27.0",
      "2.0",
      "24.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "x, y, z = symbols('x y z')\nexpr = 3*x**2 + 12*y**2 + 27*z**2 - 4*x*y - 6*x*z - 12*y*z - 8*y - 24*z\n\n# solve for the minimum\nminimum = Min(expr)\n\nprint(minimum)"
  },
  {
    "example_id": 405,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "f, d, q, r = symbols('f d q r')\neq = f*d - q*d - r\ndeg_f = 9\ndeg_r = 3\ndeg_q = deg_f - deg_r\nprint(deg_q)"
  },
  {
    "example_id": 406,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0",
      "0.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\na, b = symbols('a, b', real=True)\neq = (x - a)/b + (x - b)/a - (b/(x - a)) - (a/(x - b))\nsol = solve(eq, x)\n\n# Number of distinct values of x\nprint(len(sol))\n\n# Find the value of x\nprint(sol)"
  },
  {
    "example_id": 407,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n\neq1 = a*x**4 + a*x**3 + b*x**2 + c*x + 1\neq2 = a*x**4 + 2*a*x**3 + 2*b*x**2 + 2*c*x + 1\n\nA = Matrix([[1, 1, 1, 1, 1],\n            [1, x, x**2, x**3, x**4],\n            [1, a, a*x, a*x**2, a*x**3],\n            [1, b, b*x, b*x**2, b*x**3],\n            [1, c, c*x, c*x**2, c*x**3]])\n\nB = Matrix([[1, 0, 0, 0, 0],\n            [0, 1, 0, 0, 0],\n            [0, 0, 1, 0, 0],\n            [0, 0, 0, 1, 0],\n            [0, 0, 0, 0, 1]])\n\nsolutions = solve(eq1 - eq2, [a, b, c])\nsolutions = [solutions[i] for i in range(len(solutions)) if solutions[i] not in [0, 1, -1]]\n\nfor solution in solutions:\n    if solution[0]!= 0:\n        solution = solution[0]\n        A_inv = A.inv()\n        A_inv_B = A_inv * B\n        x = A_inv_B[0, 0]\n        if x == 0:\n            continue\n        x = Symbol('x')\n        log_x = log(x)\n        log_x_2 = log_x**2\n        log_x_3 = log_x_2 * log_x\n        log_x_4 = log_x_3 * log_x\n        log_x_5 = log_x_4 * log_x\n        log_x_6 = log_x_5 * log_x\n        log"
  },
  {
    "example_id": 408,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\nf = 2*x**2001 + 3*x**2000 + 2*x**1999 + 3*x**1998 + \\\n    2*x**1997 + 3*x**1996 + 2*x**1995 + 3*x**1994 + \\\n    2*x**1993 + 3*x**1992 + 2*x**1991 + 3*x**1990 + \\\n    2*x**1989 + 3*x**1988 + 2*x**1987 + 3*x**1986 + \\\n    2*x**1985 + 3*x**1984 + 2*x**1983 + 3*x**1982 + \\\n    2*x**1981 + 3*x**1980 + 2*x**1979 + 3*x**1978 + \\\n    2*x**1977 + 3*x**1976 + 2*x**1975 + 3*x**1974 + \\\n    2*x**1973 + 3*x**1972 + 2*x**1971 + 3*x**1970 + \\\n    2*x**1969 + 3*x**1968 + 2*x**1967 + 3*x**1966 + \\\n    2*x**1965 + 3*x**1964 + 2*x**1963 + 3*x**1962 + \\\n    2*x**1961 + 3*x**1960 + 2*x**1959 + 3*x**1958 + \\\n    2*x**1957 + 3*x**1956 + 2*x**1955 + 3*x**195"
  },
  {
    "example_id": 409,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "a, b = symbols('a b')\nz = a + I*b\nw = Symbol('w', real=True)\n\n# Define the equation\neq = z*w - 1\n\n# Find the number of units in S\nunits = solve(eq, w)\n\nprint(units)"
  },
  {
    "example_id": 410,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2101.0"
    ],
    "annotated_answers": [
      "2101.0"
    ],
    "solution": "x = 5\ny = 4\nexpression = x**4 + x**3*y + x**2*y**2 + x*y**3 + y**4\nprint(expression)"
  },
  {
    "example_id": 411,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "661.403557437306"
    ],
    "annotated_answers": [
      "89.0"
    ],
    "solution": "a = 20\nb = 12\nc = 3\nd = 16\nexpression = a**2 + b**2 + c**2 + 519\nexpression = expression - (d + 36 * 10**0.5) * 10**0.5\nprint(expression)"
  },
  {
    "example_id": 412,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "1.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0",
      "4.0",
      "48.0",
      "12.0",
      "4.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq1 = a**4 + b**4 + c**4 + d**4\neq2 = a*b*c*d\neq = [Eq(eq1, 48), Eq(eq2, 12)]\nsol = solve(eq, [a, b, c, d])\nprint(sol)"
  },
  {
    "example_id": 413,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "7.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "27.0",
      "6.0",
      "237.0",
      "1.0"
    ],
    "annotated_answers": [
      "-8.0"
    ],
    "solution": "a, b, c = symbols('a b c')\nx = symbols('x')\neq = x**3 - 7*x + 2\nroots = solve(eq, x)\na, b, c = roots\nprint(a*b*c + a*b + a*c + b*c + a + b + c + 1)"
  },
  {
    "example_id": 414,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "331.0"
    ],
    "solution": "# Define f(n)\nf = lambda n: (-1)**(n + 1) * n - 2 * f(n - 1)\n\n# Define f(1)\nf(1) = f(1986)\n\n# Compute f(1) + f(2) + f(3) +... + f(1985)\nf_sum = sum([f(i) for i in range(1, 1986)])\n\nprint(f_sum)"
  },
  {
    "example_id": 415,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "70.0",
      "29.0"
    ],
    "annotated_answers": [
      "-99.0"
    ],
    "solution": "x, a, b = symbols('x a b')\neq = x**6 + a*x + b\nremainder = sympy.rem(eq, x**2 - 2*x - 1)\nprint(remainder)\nprint(a + b)"
  },
  {
    "example_id": 416,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "1999.0"
    ],
    "solution": "n = 3\nwhile n < 10000:\n    n += 1\n    a, b = n % 10, (n // 10) % 10\n    if a + b > 10:\n        n += 1\n    else:\n        n -= 1\n        break\nprint(n)"
  },
  {
    "example_id": 417,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "# Define a and b\na, b = symbols('a b')\n\n# Define the equation\neq = a + 2*b - 1\n\n# Find the minimum value of 2/a + 1/b\nsol = solve(eq, [a, b])\n\n# Print the minimum value of 2/a + 1/b\nprint(Min(2/a + 1/b))"
  },
  {
    "example_id": 418,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "7.0",
      "4.0",
      "2.0",
      "0.0",
      "8.0",
      "5.0",
      "7.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "import sympy as sp\nfrom sympy import Eq, expand, solve\n\nx = sp.Symbol('x')\n\neq = Eq(x**5 + 7*x**4 - 2, 0)\nsol = solve(eq)\n\na, b, c, d, e = sol\n\nexpr = a**5 / (a - b)*(a - c)*(a - d)*(a - e) + b**5 / (b - a)*(b - c)*(b - d)*(b - e) + c**5 / (c - a)*(c - b)*(c - d)*(c - e) + d**5 / (d - a)*(d - b)*(d - c)*(d - e) + e**5 / (e - a)*(e - b)*(e - c)*(e - d)\n\nprint(expand(expr))"
  },
  {
    "example_id": 419,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "z = 2 - 4*I\nprint(abs(z/(2+I)))"
  },
  {
    "example_id": 420,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def min_value_of_x_squared_plus_y_squared(x, y):\n    return (x**2 + y**2)\n\n\ndef xy_times_x_squared_minus_y_squared(x, y):\n    return x*y*(x**2 - y**2)\n\n\ndef find_min(x, y):\n    return min_value_of_x_squared_plus_y_squared(x, y)\n\n\ndef main():\n    x = 1\n    y = 1\n    print(find_min(x, y))\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "example_id": 421,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10.0"
    ],
    "annotated_answers": [
      "8.0"
    ],
    "solution": "def minimum_value(a, b, c):\n    return (a + b)*(a + c)*(b + c) / (a*b*c)\n\nprint(minimum_value(1, 2, 3))"
  },
  {
    "example_id": 422,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "10000.0",
      "-4.0"
    ],
    "annotated_answers": [
      "101.0"
    ],
    "solution": "from sympy import floor, sqrt\nx = symbols('x')\nprint(floor(sqrt(100000000/x**4)))"
  },
  {
    "example_id": 423,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "15.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "x = 15\np = 5\nf_x = abs(x-p) + abs(x-15) + abs(x-p-15)\nprint(f_x)"
  },
  {
    "example_id": 424,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "46656.0"
    ],
    "annotated_answers": [
      "111.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n\n# Increasing geometric sequence\nn = b**2 - a**2\n\n# Formula for logarithm\nlog_term = log(a, 6) + log(b, 6) + log(c, 6)\n\n# Equation\neq = log_term - 6\n\n# Solve for a, b, c\nsol = solve(eq, [a, b, c])\n\n# Print the result\nprint(sol)"
  },
  {
    "example_id": 425,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "450.0"
    ],
    "annotated_answers": [
      "24.0"
    ],
    "solution": "p = lambda x: x**4 + 2*x**3 + 3*x**2 + 4*x + 1\nprint(p(0) + p(4))"
  },
  {
    "example_id": 426,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "10.0",
      "105.0",
      "2.0",
      "3.0",
      "2.0",
      "105.0",
      "10.0",
      "2.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "# Solve for the semi-major axis\nx, y = symbols('x y')\nf_1 = (3 - x)**2 + (10 - y + sqrt(105))**2\nf_2 = (3 - x)**2 + (10 - y - sqrt(105))**2\na = Min(f_1, f_2)\nprint(a)"
  },
  {
    "example_id": 427,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "# There are 3 ordered triplets of roots of \n# x^3 + ax^2 + bx + c = 0\n# (a,b,c) = (1,1,1), (1,-1,1), (1,1,-1)\nprint(3)"
  },
  {
    "example_id": 428,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x = symbols('x')\neq = (5*x + 9)**611 + (x + 5)**11 + (x - 1)**11 + 3*x**2 + 1\nremainder = sympy.rem(eq, x + 2)\nprint(remainder)"
  },
  {
    "example_id": 429,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-4.0",
      "2.0",
      "4.0",
      "4.0",
      "1.0",
      "4.0",
      "-4.0",
      "2.0",
      "4.0",
      "4.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq = x*y*z\neq_x = x**4 + 4*y**2 + 4*z**4\nsolve_eq_x = solve(eq_x, x)\nprint(solve_eq_x)"
  },
  {
    "example_id": 430,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "8.0",
      "7.0",
      "2.0",
      "225.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x, y = symbols('x y')\neq = x**2 + 8*x*y + 7*y**2 - 225\ndistance = sympy.sqrt(eq)\nprint(distance)"
  },
  {
    "example_id": 431,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "12.0"
    ],
    "annotated_answers": [
      "16.0"
    ],
    "solution": "F1 = (10, 2)\nF2 = (-16, 2)\n\nx, y = symbols('x y')\n\nd = abs(F1[0] - F2[0])\nh = (F1[0] + F2[0])/2\na = d/2\nb = sqrt(abs(F1[1] - F2[1]))\nk = (F1[1] + F2[1])/2\n\nprint(h + k + a + b)"
  },
  {
    "example_id": 432,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "962.0"
    ],
    "solution": "from sympy import roots\nfrom sympy.abc import x\n\nk = -1\nwhile True:\n    if len(roots(x**3 - 52*x**2 + 581*x - k)) == 3:\n        break\n    k += 1\n\nprint(k)"
  },
  {
    "example_id": 433,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "-9.0"
    ],
    "solution": "x = symbols('x')\nf = (2*x + 9)/(x - 7)\nf_of_f = f(f(x))\nsolutions = solve(f_of_f - x, x)\nproduct = 1\nfor solution in solutions:\n    product = product*solution\nprint(product)"
  },
  {
    "example_id": 434,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "25.0"
    ],
    "solution": "z = symbols('z')\nprint(abs(conjugate(z)**2))"
  },
  {
    "example_id": 435,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-3.0"
    ],
    "solution": "c = Symbol('c')\nx = Symbol('x')\nf = lambda x: c*x/(2*x + 3)\neq = f(f(x)) - x\nsol = solve(eq, c)\nprint(sol)"
  },
  {
    "example_id": 436,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6.0"
    ],
    "annotated_answers": [
      "79.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nexpression = a + b + c\nprint(expression)"
  },
  {
    "example_id": 437,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0",
      "2.0",
      "4.0",
      "2.0",
      "2.0",
      "4.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "from sympy import Symbol\nx = Symbol('x')\nexpression = (7*x - 2)/(x**2 - 4)\nprint(expression.expand())"
  },
  {
    "example_id": 438,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "n = symbols('n', integer=True)\nFib = Matrix([[1, 1], [1, 0]])\nFib = Fib**n\nFib = Fib[1, 0]\nFib = Fib.subs(n, 0)\nFib = Fib.subs(n, 1)\nFib = Fib.subs(n, 2)\nFib = Fib.subs(n, 3)\nFib = Fib.subs(n, 4)\nFib = Fib.subs(n, 5)\nFib = Fib.subs(n, 6)\nFib = Fib.subs(n, 7)\nFib = Fib.subs(n, 8)\nFib = Fib.subs(n, 9)\nFib = Fib.subs(n, 10)\nFib = Fib.subs(n, 11)\nFib = Fib.subs(n, 12)\nFib = Fib.subs(n, 13)\nFib = Fib.subs(n, 14)\nFib = Fib.subs(n, 15)\nFib = Fib.subs(n, 16)\nFib = Fib.subs(n, 17)\nFib = Fib.subs(n, 18)\nFib = Fib.subs(n, 19)\nFib = Fib.subs(n, 20)\nFib = Fib.subs(n, 21)\nFib = Fib.subs(n, 22)\nFib = Fib.subs(n, 23)\nFib = Fib.subs(n, 24)\nFib = Fib.subs(n, 25)\nFib = Fib.subs(n, 26)\nFib = Fib.subs(n, 27)\nFib = Fib.subs(n, 28)\nFib = Fib."
  },
  {
    "example_id": 439,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "1.0",
      "3.0",
      "1.0",
      "4.0",
      "1.0",
      "5.0",
      "1.0",
      "6.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "x = symbols('x')\nf = sum([abs(i*x - 1) for i in range(1, 120)])\nf_min = Min(f, x)\nprint(f_min)"
  },
  {
    "example_id": 440,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "66.0"
    ],
    "annotated_answers": [
      "90.0"
    ],
    "solution": "x = symbols('x')\n\n# find the largest integer x such that sqrt(3620 + 322x - 4x^2) is a real number\n\n# 1. find the discriminant of the equation\nD = 322**2 - 4*3620\n\n# 2. find the real solutions of the equation\nreal_sol = solve(322*x - 4*x**2 - 3620, x)\n\n# 3. find the largest solution\nlargest_sol = max(real_sol)\n\n# 4. find the largest integer x\nx_int = floor(largest_sol)\n\nprint(x_int)"
  },
  {
    "example_id": 441,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "6.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "# Define the variables\na, b, c = symbols('a b c')\n\n# Define the constraint\nconstraint = a + b + c - 1\n\n# Define the objective function\nobj = 2*a**2 + 3*b**2 + 6*c**2\n\n# Solve for the minimum value of the objective function\nmin_value = Min(obj, constraints=[constraint])\n\n# Print the result\nprint(min_value)"
  },
  {
    "example_id": 442,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "3.0",
      "3.0",
      "-9.0",
      "2.0",
      "27.0",
      "2.0",
      "-4.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "-6.0"
    ],
    "solution": "p, q, r = symbols('p q r')\nx = symbols('x')\neq1 = x**3 + 5*x**2 + p*x + q\neq2 = x**3 + x**2 + p*x + r\nroot1 = solve(eq1, x)[0]\nroot2 = solve(eq2, x)[0]\nprint(root1 + root2)"
  },
  {
    "example_id": 443,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "34.0"
    ],
    "annotated_answers": [
      "34.0"
    ],
    "solution": "x = symbols('x')\nf = x**3 - 49*x**2 + 623*x - 2015\ng = f.subs(x, x + 5)\nroots = solve(g, x)\nprint(sum(roots))"
  },
  {
    "example_id": 444,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "27648.0"
    ],
    "annotated_answers": [
      "27648.0"
    ],
    "solution": "a = 1\nb = 2\nc = 3\nd = 4\nexpression = a*b**2*c**3*d**4\nprint(expression)"
  },
  {
    "example_id": 445,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "5.0"
    ],
    "solution": "x = symbols('x')\npolynomial = (x - 1 + sqrt(2))*(x - 3 + sqrt(7))*(x - 1 + sqrt(2))*(x - 5)\ndegree = len(polynomial.args)\nprint(degree)"
  },
  {
    "example_id": 446,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "24.0",
      "24.0",
      "24.0",
      "24.0",
      "24.0",
      "24.0",
      "24.0",
      "24.0",
      "24.0",
      "24.0"
    ],
    "annotated_answers": [
      "516.0"
    ],
    "solution": "# Create a list of the values\nvalues = []\n\nfor i in range(1, 100):\n    values.append(751 - 745 + 748 - 742 + 745 - 739 + 742 - 736)\n\nprint(values)"
  },
  {
    "example_id": 447,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.6",
      "0.63"
    ],
    "annotated_answers": [
      "0.63"
    ],
    "solution": "x = symbols('x')\ny = symbols('y')\nz = symbols('z')\n\n# Solve for log36\nlog36 = log(6, 3)\nlog36 = log36.evalf(2)\nlog36 = round(log36, 2)\nprint(log36)\n\n# Solve for log94\nlog94 = log(4, 9)\nlog94 = log94.evalf(2)\nlog94 = round(log94, 2)\nprint(log94)"
  },
  {
    "example_id": 448,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "5.0",
      "4.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "189.0",
      "8.0"
    ],
    "annotated_answers": [
      "-4.0"
    ],
    "solution": "x = symbols('x')\na, b, c = solve(2*x**3 + 3*x**2 + 4*x + 5, x)\nprint(a*b*c + a + b + c)"
  },
  {
    "example_id": 449,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "28672.0",
      "7.0",
      "5.0",
      "7.0",
      "-7.0",
      "1.0",
      "7.0",
      "7.0",
      "7.0",
      "1.0"
    ],
    "annotated_answers": [
      "117649.0"
    ],
    "solution": "from sympy import Symbol, Mul, roots, expand\n\nx = Symbol('x')\nP = x**7 - 7\nroots = roots(P, x)\nK = 1\nfor r1 in roots:\n    for r2 in roots:\n        if r1!= r2:\n            K *= r1 + r2\nK2 = K**2\nprint(K2)"
  },
  {
    "example_id": 450,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "52.0",
      "6.0",
      "43.0",
      "1.5",
      "6.0",
      "43.0",
      "52.0",
      "1.5"
    ],
    "annotated_answers": [
      "828.0"
    ],
    "solution": "eq = (52+6*sqrt(43))**(3/2) - (52-6*sqrt(43))**(3/2)\nprint(eq)"
  },
  {
    "example_id": 451,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25952256.0"
    ],
    "annotated_answers": [
      "198.0"
    ],
    "solution": "n = 19\na_n = 99\na_n_plus_1 = 0\nfor i in range(1, n + 1):\n    a_n_plus_1 = a_n_plus_1 + a_n\n    a_n = a_n_plus_1\nprint(a_n_plus_1)"
  },
  {
    "example_id": 452,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-6.0",
      "3.0",
      "-3.0",
      "3.0",
      "-6.0",
      "-3.0",
      "3.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x, y, z = symbols('x y z')\neq1 = x + y - z - 0\neq2 = x*z - x*y + y*z - 27\neq3 = x*y*z - 54\nsol = solve([eq1, eq2, eq3], [x, y, z])\nprint(sol)"
  },
  {
    "example_id": 453,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-7.0",
      "82.0",
      "3.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "1325.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-7.0"
    ],
    "solution": "from sympy import Symbol, solve\nx = Symbol('x')\nroots = solve(x**3 + 7*x**2 - 11*x - 2, x)\na, b, c = roots\nprint(a + b + c)"
  },
  {
    "example_id": 454,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "641.0",
      "325.0"
    ],
    "annotated_answers": [
      "229.0"
    ],
    "solution": "n = 6\nk, x = symbols('k x')\neq = k*x**(n-1) + 9*x**(n-2) + k*x**(n-3) + 32*x**(n-4) - 11\nremainder = sympy.rem(eq, x + 5)\nk_value = solve(remainder - 4, k)\nprint(k_value[0])"
  },
  {
    "example_id": 455,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "4.0"
    ],
    "annotated_answers": [
      "697.0"
    ],
    "solution": "n = symbols('n')\nz = 4*I\neq = (z/(z + n)) - 4*I\nn_value = solve(eq, n)\nprint(n_value[0])"
  },
  {
    "example_id": 456,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "20.0"
    ],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "a, b = symbols('a b')\neq = sqrt(a) - sqrt(b)\nmax_a_5b = 20 - eq\nprint(max_a_5b)"
  },
  {
    "example_id": 457,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "199980001.0",
      "3.0",
      "1111.0",
      "100.0",
      "1.0",
      "199940005.0",
      "9998.0",
      "3.0",
      "1111.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import symbols, summation, sqrt\nn = symbols('n')\nsum_expr = summation(1/(sqrt(n) + sqrt(n+1))/(sqrt(n)**(4) + sqrt(n+1)**(4)), (n, 1, 9999))\nprint(sum_expr)"
  },
  {
    "example_id": 458,
    "selected_mode": "import",
    "is_success": false,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "500.0"
    ],
    "solution": "x = symbols('x')\ne1 = x**2001 + (1/2-x)**2001\ne2 = log(e1)\ne3 = e2.expand()\ne4 = e3.subs(x, I)\ne5 = e4.subs(x, -I)\ne6 = e5.subs(x, 0)\ne7 = e6.subs(x, 1)\ne8 = e7.subs(x, -1)\ne9 = e8.subs(x, I)\ne10 = e9.subs(x, -I)\ne11 = e10.subs(x, 0)\ne12 = e11.subs(x, 1)\ne13 = e12.subs(x, -1)\ne14 = e13.subs(x, I)\ne15 = e14.subs(x, -I)\ne16 = e15.subs(x, 0)\ne17 = e16.subs(x, 1)\ne18 = e17.subs(x, -1)\ne19 = e18.subs(x, I)\ne20 = e19.subs(x, -I)\ne21 = e20.subs(x, 0)\ne22 = e21.subs(x, 1)\ne23 = e22.subs(x, -1)\ne24 = e23.subs(x, I)\ne25 = e24.subs(x, -I)\ne26 = e25.subs(x, 0)\ne27 = e26.subs(x, 1)\ne28 = e27.subs(x, -1)\ne29 = e28.subs(x, I)\ne30 = e29.subs(x, -I)\ne31 = e30.subs(x, 0)\ne32 ="
  },
  {
    "example_id": 459,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [],
    "annotated_answers": [
      "214.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\n\n# Calculate the first expression\neq1 = (a + b) * (c + d) - 143\neq2 = (a + c) * (b + d) - 150\neq3 = (a + d) * (b + c) - 169\n\n# Calculate the second expression\neq4 = a**2 + b**2 + c**2 + d**2 - 1\n\n# Solve the equations\nsol = solve([eq1, eq2, eq3, eq4], [a, b, c, d])\n\n# Print the solution\nprint(sol)"
  },
  {
    "example_id": 460,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1004.0"
    ],
    "annotated_answers": [
      "1004.0"
    ],
    "solution": "sum = 0\nfor i in range(1, 2008):\n    if i % 2 == 0:\n        sum += i\n    else:\n        sum -= i\nprint(sum)"
  },
  {
    "example_id": 461,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "import math\n\ndef get_solutions(m, n):\n    log_n = math.log(n)\n    log_m = math.log(m)\n    for x in range(1, n):\n        if pow(log_n, x) * pow(log_m, x) * (8 * pow(log_n, x) - 7 * log_n - 6 * log_m - 2013) == 0:\n            yield x\n\nmin_value = math.inf\nfor m, n in ((x, y) for x in range(2, 100) for y in range(2, 100)):\n    solutions = get_solutions(m, n)\n    product = 1\n    for solution in solutions:\n        product *= solution\n    if product < min_value:\n        min_value = product\n        min_m, min_n = m, n\n\nprint(min_m + min_n)"
  },
  {
    "example_id": 462,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "-1.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "print(sqrt((3/4) - sqrt(1/2)) - sqrt((3/4) + sqrt(1/2)))"
  },
  {
    "example_id": 463,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "def has_root(x):\n    if x == 0:\n        return False\n    for i in range(1, 6):\n        if x**i in S:\n            return True\n    return False\n\nS = {0, 10}\nwhile True:\n    n = len(S)\n    for x in S:\n        if has_root(x):\n            S.add(x)\n            break\n    if n == len(S):\n        break\nprint(len(S))"
  },
  {
    "example_id": 464,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2045.0",
      "2.0",
      "4087.0",
      "2.0",
      "3.0",
      "2.0",
      "4087.0",
      "2.0"
    ],
    "annotated_answers": [
      "1023.0"
    ],
    "solution": "d = symbols('d')\nx = symbols('x')\n\neq1 = d + x**2 - 2*x\neq2 = x + d - 1024\n\nsolution = solve([eq1, eq2])\nprint(solution[0])"
  },
  {
    "example_id": 465,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-3.0",
      "13.0"
    ],
    "annotated_answers": [
      "13.0"
    ],
    "solution": "x = symbols('x')\nexpr = (1/(x**2 - 10*x - 29)) + (1/(x**2 - 10*x - 45)) - (2/(x**2 - 10*x - 69))\nsol = solve(expr, x)\nprint(sol)"
  },
  {
    "example_id": 466,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "0.0"
    ],
    "annotated_answers": [
      "4022030.0"
    ],
    "solution": "def f(x):\n    if x < floor(x) + 1/floor(x):\n        return floor(x) * abs(x - floor(x) - 1/2/floor(x))\n    else:\n        return f(x - 1/floor(x))\n\ndef g(x):\n    return 2**(x - 2007)\n\ndef count_intersections(f, g):\n    count = 0\n    for x in range(1, 1000):\n        if f(x) == g(x):\n            count += 1\n    return count\n\nprint(count_intersections(f, g))"
  },
  {
    "example_id": 467,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "269.00000000000006"
    ],
    "annotated_answers": [
      "269.0"
    ],
    "solution": "print(abs(10-13j) * abs(10+13j))"
  },
  {
    "example_id": 468,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-12.0",
      "12.0"
    ],
    "annotated_answers": [
      "12.0"
    ],
    "solution": "x, y = symbols('x y')\nsasha = 15 + 8*I\nchloe = 3 - 4*I\nprint(chloe - sasha)"
  },
  {
    "example_id": 469,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "7.0",
      "7.0"
    ],
    "annotated_answers": [
      "42.0"
    ],
    "solution": "x = symbols('x')\na, b, c = symbols('a b c')\np = a*x**2 + b*x + c\np_value = p.subs([(x, sqrt(7)), (x, sqrt(11)), (x, sqrt(17))])\nprint(p_value)"
  },
  {
    "example_id": 470,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "6643.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# define the function\ndef power(a, b):\n    return a**b\n\n# define the variables\na = 2011\nb = 2011\n\n# calculate the power\nc = power(a, b)\n\n# get the hundreds digit\nd = floor(log(c, 10))\n\nprint(d)"
  },
  {
    "example_id": 471,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "6981.0",
      "2.0",
      "1323.0",
      "2.0",
      "1.0",
      "3.0",
      "3.0",
      "3.0",
      "25.0"
    ],
    "annotated_answers": [
      "-14.0"
    ],
    "solution": "x = symbols('x')\neq = x**3 + 9*x**2 + 2*x + 1\nroots = solve(eq, x)\nsum = 0\nfor root in roots:\n    sum += 1/root**2\nprint(sum)"
  },
  {
    "example_id": 472,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "9.0",
      "69.0",
      "18.0",
      "25.0",
      "54.0",
      "1.0",
      "3.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "# define variables\nz1, z2, z3, z4 = symbols('z1 z2 z3 z4')\n\n# define polynomial\nP = z1**6 - z1**5 - z1**3 - z1**2 - z1\nQ = z1**4 - z1**3 - z1**2 - 1\n\n# find roots of Q(x)=0\nroots = solve(Q, z1)\n\n# find P(z_1)+P(z_2)+P(z_3)+P(z_4)\nsum_of_roots = 0\nfor root in roots:\n    sum_of_roots += P.subs(z1, root)\n\nprint(sum_of_roots)"
  },
  {
    "example_id": 473,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "1.0",
      "2.0",
      "4.0",
      "1.0",
      "5.0",
      "1.0",
      "3.0"
    ],
    "annotated_answers": [
      "19.0"
    ],
    "solution": "# Find roots\nr1, r2, r3, r4 = symbols('r_1 r_2 r_3 r_4')\na, b, c = symbols('a b c')\npoly = 4*r1**4 - a*r1**3 + b*r1**2 - c*r1 + 5\nroots = solve(poly)\nprint(roots)"
  },
  {
    "example_id": 474,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "16.0",
      "5.0",
      "8.0",
      "2.0",
      "16.0",
      "5.0",
      "8.0",
      "2.0",
      "16.0",
      "5.0",
      "8.0"
    ],
    "annotated_answers": [
      "-64.0"
    ],
    "solution": "x = symbols('x')\neq = sympy.sqrt(5*abs(x) + 8) - sympy.sqrt(x**2 - 16)\nprint(eq.expand())\nprint(eq.expand().factor())\nprint(eq.expand().factor().simplify())"
  },
  {
    "example_id": 475,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-0.2235968957372624",
      "-4.472334004024145"
    ],
    "annotated_answers": [
      "-10879.0"
    ],
    "solution": "b1 = -1988/8891\nb2 = -8891/1988\nb = [b1, b2]\nprint(b)"
  },
  {
    "example_id": 476,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, d = symbols('a b c d')\neq = a*log(10, 2) + b*log(10, 3) + c*log(10, 5) + d*log(10, 7)\n\n# Find the number of distinct rational solutions\nsolutions = solve(eq - 2005, a, b, c, d)\nprint(len(solutions))"
  },
  {
    "example_id": 477,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.618033988749895"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "tau = (1 + sqrt(5))/2\nprint(sum(1/tau**i for i in range(1000)))"
  },
  {
    "example_id": 478,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "1.0",
      "3.0",
      "3.0",
      "2.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "x = symbols('x')\ny = (1/(x**3 - 3*x**2 + 3*x - 1))\nprint(y.as_numer_denom())"
  },
  {
    "example_id": 479,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "68719476736.0",
      "-3.0",
      "2.0",
      "4.0",
      "2.0",
      "-3.0",
      "2.0",
      "4.0",
      "2.0"
    ],
    "annotated_answers": [
      "512.0"
    ],
    "solution": "a, b = symbols('a b')\neq1 = log(a, 8) + log(b, 4)**2 - 5\neq2 = log(b, 8) + log(a, 4)**2 - 7\nsolve_eq1 = solve(eq1, a)\nsolve_eq2 = solve(eq2, b)\nprint(solve_eq1[0]*solve_eq2[0])"
  },
  {
    "example_id": 480,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "6.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "from sympy import symbols, floor\na, b, c, d = symbols('a b c d')\nexpr = floor((b + c + d)/a) + floor((a + c + d)/b) + floor((a + b + d)/c) + floor((a + b + c)/d)\nmin_expr = expr.subs({b: 1, c: 1, d: 1})\nprint(min_expr)"
  },
  {
    "example_id": 481,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "9.0"
    ],
    "annotated_answers": [
      "9.0"
    ],
    "solution": "F = [0, 1]\nfor i in range(2, 2025):\n    F.append(F[-1] + F[-2])\n    F[-1] = F[-1] % 3\n\nprint(sum(F[2017:2024]))"
  },
  {
    "example_id": 482,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "7.0",
      "2.0",
      "2.0",
      "7.0"
    ],
    "annotated_answers": [
      "47.0"
    ],
    "solution": "x, y = symbols('x y')\nlog_x_y = log(y, x)\nlog_y_x = log(x, y)\n\nlog_x_y_2 = log_x_y**2\nlog_y_x_2 = log_y_x**2\n\neq = log_x_y_2 + log_y_x_2 - 7\n\nsol = solve(eq, log_x_y, log_y_x)\n\nprint(sol)"
  },
  {
    "example_id": 483,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "x = symbols('x')\neq = 2*x**4 - 8*x**3 + 7\nroots = solve(eq, x)\nsum = 0\nfor root in roots:\n    sum = sum + root\nprint(sum)"
  },
  {
    "example_id": 484,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "49896.0"
    ],
    "solution": "# 1\n# Length of one side of the rectangle\ns = 2007/4\n\n# Area of the rectangle\narea = s * 4\n\n# Number of basic rectangles\nN = area // 2007\n\nprint(N)"
  },
  {
    "example_id": 485,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0",
      "5.0",
      "2.0",
      "1.0",
      "2.0",
      "1.0"
    ],
    "annotated_answers": [
      "-2.0"
    ],
    "solution": "z = symbols('z')\neq = (z + 1/z) - (1 + sqrt(5))/2\nprint(eq)\nprint(eq.expand())"
  },
  {
    "example_id": 486,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "-1.0",
      "2.0",
      "3.0",
      "2.0",
      "-1.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "6.0"
    ],
    "solution": "z = symbols('z')\neq = z**3 - 1\nroots = solve(eq, z)\nfor r in roots:\n    if not r.is_real:\n        print(r)"
  },
  {
    "example_id": 487,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "499.0",
      "499.0"
    ],
    "annotated_answers": [
      "496.0"
    ],
    "solution": "# 1. Find the number of positive integers n less than 1000 for which there exists a positive real number x such that n=x\\lfloor x \\rfloor.\n# 2. Find the number of positive integers n less than 1000 for which there exists a positive real number x such that n=x\\lfloor x \\rfloor.\n\n# 1.\ncount = 0\nfor i in range(1, 1000):\n    x = i/2\n    if x.is_integer():\n        count += 1\nprint(count)\n\n# 2.\ncount = 0\nfor i in range(1, 1000):\n    x = i/2\n    if x.is_integer():\n        count += 1\nprint(count)"
  },
  {
    "example_id": 488,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "7.0"
    ],
    "annotated_answers": [
      "7.0"
    ],
    "solution": "h = 6\nk = -5\na = 4\nb = 2\nprint(h + k + a + b)"
  },
  {
    "example_id": 489,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "4.0",
      "10.0",
      "2.0",
      "3.0",
      "4.0",
      "2.0",
      "4.0",
      "4.0",
      "50.0"
    ],
    "annotated_answers": [
      "30.0"
    ],
    "solution": "a_1, a_2, a_3, a_4 = symbols('a_1 a_2 a_3 a_4')\neq_1 = a_1 + a_4\neq_2 = (a_1*a_2 + a_2*a_3 + a_3*a_4 + a_4*a_1)/(a_1*a_2*a_3*a_4)\neq_3 = 10\nsolve_1 = solve(eq_1 - 50, a_1)\nsolve_2 = solve(eq_2 - 10, a_1)\nsolve_3 = solve(eq_3, a_1)\nprint(abs(solve_1[0] - solve_2[0]))"
  },
  {
    "example_id": 490,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "1.0"
    ],
    "solution": "a, b, c, x = symbols('a b c x')\nexpr = (x + a)**2 / (a - b)*(a - c) + (x + b)**2 / (b - a)*(b - c) + (x + c)**2 / (c - a)*(c - b)\nprint(expr.simplify())"
  },
  {
    "example_id": 491,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "1.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x, y, z = symbols('x y z')\n# Define a matrix A\nA = Matrix([\n    [x, y, z],\n    [y, z, x],\n    [z, x, y]\n])\n# Find the determinant of A\ndetA = A.det()\n# Find the minimum value of (x + y)(y + z)\nmin_value = Min((x + y)*(y + z), detA - 1)\nprint(min_value)"
  },
  {
    "example_id": 492,
    "selected_mode": "create",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0"
    ],
    "annotated_answers": [
      "49.0"
    ],
    "solution": "k = 1\nwhile True:\n    n = 2002/k\n    if n.is_integer:\n        n = int(n)\n        if (2002/n) == k:\n            print(k)\n            break\n    k += 1"
  },
  {
    "example_id": 493,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0",
      "3.0"
    ],
    "annotated_answers": [
      "157.0"
    ],
    "solution": "a, b, c = symbols('a b c')\ncon1 = (a/b + b/c + c/a) - 7\ncon2 = (b/a + c/b + a/c) - 9\neq = a**3/b**3 + b**3/c**3 + c**3/a**3\nsol = solve([con1, con2], [a, b, c])\nprint(sol)\nprint(eq.subs(sol))"
  },
  {
    "example_id": 494,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "2.0"
    ],
    "annotated_answers": [
      "4014013.0"
    ],
    "solution": "a, b, c = symbols('a b c')\n\n# Length of the space diagonal\ndiagonal = sqrt(a**2 + b**2 + c**2)\n\n# Print the answer\nprint(diagonal)"
  },
  {
    "example_id": 495,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0"
    ],
    "annotated_answers": [
      "15.0"
    ],
    "solution": "# 1.\n# Define the function f.\nf = Function('f')\n\n# 2.\n# Solve for f(5)\nf_5 = f(5)\n\n# 3.\n# Print f(5)\nprint(f_5)"
  },
  {
    "example_id": 496,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "-1.0"
    ],
    "solution": "x = Symbol('x')\nf = x*(x + 1)*(x + 2)*(x + 3)\nprint(Min(f, x))"
  },
  {
    "example_id": 497,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "4.0"
    ],
    "annotated_answers": [
      "4.0"
    ],
    "solution": "def f(x):\n    if 0 <= x < 2:\n        return 2*x\n    elif 2 <= x <= 4:\n        return 8 - 2*x\n    else:\n        return 0\n\nprint(max(f(x) for x in range(6)))"
  },
  {
    "example_id": 498,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "25.0"
    ],
    "annotated_answers": [
      "31.0"
    ],
    "solution": "def f(x):\n    return x**2 + x + 1\n\nn = 25\nexpression = 1000 * f(1) * f(4) * f(9) * f(16) * f(25)\nwhile expression < f(1)**2 * f(2)**2 * f(3)**2 * f(4)**2 * f(5)**2:\n    n += 1\n    expression = 1000 * f(1) * f(n**2) * f(n**2 + 1) * f(n**2 + 2)\n\nprint(n)"
  },
  {
    "example_id": 499,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "3.0",
      "2.0",
      "1.0",
      "1.0",
      "2.0",
      "3.0"
    ],
    "annotated_answers": [
      "3996.0"
    ],
    "solution": "# define symbols\na, b = symbols('a b')\n\n# define the product\nproduct = (a**2 - b**2) * (a**2 - (b+1)**2) * (a**2 - (b+2)**2) * (a**2 - (b+3)**2)\n\n# find the common denominator\ndenominator = (a**2 - (b+4)**2) * (a**2 - (b+5)**2) * (a**2 - (b+6)**2) * (a**2 - (b+7)**2)\n\n# simplify the product\nproduct = product.expand()\n\n# find the numerator\nnumerator = product / denominator\n\n# find the minimum value\nmin_value = Min(numerator, evaluate=False)\n\n# find the solution\nsolution = solve(min_value, a, b)\n\n# print the solution\nprint(solution)"
  },
  {
    "example_id": 500,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "2.0",
      "2.0",
      "3.0",
      "2.0",
      "2.0",
      "2.0",
      "3.0",
      "2.0"
    ],
    "annotated_answers": [
      "100.0"
    ],
    "solution": "# define a, b, c\na, b, c = symbols('a b c')\n# define the equation\neq = a**2 + b**2 + c**2 - (a*b + b*c + c*a)\n# solve the equation\nsolution = solve(eq, [a, b, c])\n# print the solution\nprint(solution)"
  },
  {
    "example_id": 501,
    "selected_mode": "skip",
    "is_success": true,
    "is_correct": false,
    "model_answers": [
      "5.0",
      "5.0"
    ],
    "annotated_answers": [
      "2.0"
    ],
    "solution": "x = 5\ny = 5\n\nexpression = (x, y)\nprint(expression)"
  },
  {
    "example_id": 502,
    "selected_mode": "import",
    "is_success": true,
    "is_correct": true,
    "model_answers": [
      "3.0"
    ],
    "annotated_answers": [
      "3.0"
    ],
    "solution": "x = symbols('x')\nf = x**3 - 3*x**2 - 9*x + 30\nr = f.subs(x, 3)\nprint(r)"
  }
]